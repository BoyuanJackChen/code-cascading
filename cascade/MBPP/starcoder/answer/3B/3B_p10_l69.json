[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    # Loop through both lists and compare each element\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elems = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elems.append(elem)\n    return shared_elems"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return tuple(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the tuples to sets to remove duplicates and compare their length\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # check if the length of both sets are equal, if so, the two lists have common elements\n    if len(set1) == len(set2):\n        common_elements = list(set1.intersection(set2))\n        return common_elements\n    else:\n        return \"The two lists do not have any shared elements.\""
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for item1 in test_tup1:\n        if item1 in test_tup2 and item1 not in shared_list:\n            shared_list.append(item1)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    common_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            common_elements.append(elem)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for element in test_tup1:\n        if element in test_tup2:\n            print(element)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import random\nimport math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check for 2 and 3\n    if n == 2 or n == 3:\n        return False\n    # check if n is less than 2\n    elif n < 2:\n        return True\n    # check if n is 1\n    elif n == 1:\n        return False\n    # check for even numbers\n    elif n % 2 == 0:\n        return True\n    # check for odd numbers\n    else:\n        # check for factors less than n/2\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n            # check if i^r is congruent to 1 modulo n\n            d = i - 1\n            while d*d <= n:\n                if n % d == 0:\n                    return True\n                d += 2\n        # check if n is probably prime using Miller-Rabin primality test\n        k = 5\n        while k > 0:\n            # calculate s = n-1, r = 0\n            s = n - 1\n            r = 0\n            # calculate d\n            d = 0\n            while s % 2 == 0:\n                s //= 2\n                d += 1\n            # calculate a random number x\n            x = random.randrange(2, n-1)\n            # calculate u = pow(x, s, n)\n            u = pow(x, s, n)\n            # calculate v = pow(a, d, n)\n            v = pow(a, d, n)\n            # repeat d iterations to check if u is congruent to 1 modulo n\n            for _ in range(d):\n                if u == 1 or u == n-1:\n                    break\n                u = pow(u, 2, n)\n            else:\n                # if u is congruent to 1 modulo n, n is probably prime\n                return False\n            # reduce n by 2 until it is odd\n            n //= 2\n            k -= 1\n        # if n is not likely prime, it is composite\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function checks if a given number is not a prime number.\n    '''\n\n    if n < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n == 2 or n == 3:\n        return False\n    if n % 2 == 0:\n        return True\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 2\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is a prime number, and False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    \n    # Build max heap\n    for num in nums:\n        hq.heappush(heap, -num)\n    \n    # Extract the n largest numbers from the heap\n    result = []\n    for _ in range(n):\n        result.append(-hq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    for num in nums:\n        # If the heap size is less than n, add the number to the heap\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, -num)\n        # If the heap size is equal to n, compare the number with the smallest element\n        elif -num > -min_heap[0]:\n            # If the new number is larger than the smallest element, pop the smallest element and add the new number\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, -num)\n    # Return the n largest integers from the heap\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers into a heap\n    hq.heapify(nums)\n\n    # Extract the n largest integers from the heap and return them in descending order\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers,\n    returned in descending order.\n    \"\"\"\n    # Create a max heap from the input list\n    hq.heapify(nums)\n\n    # Pop the maximum n elements from the max heap and store them in a list\n    result = []\n    while n > 0:\n        result.append(hq.heappop(nums))\n        n -= 1\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Create a max heap from the list of numbers\n    heap = hq.nlargest(n, nums)\n\n    # Convert the heap into a list and return it\n    return list(heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # initialize a max heap with the first n elements from the list\n    hq.heapify(nums[:n])\n\n    # remove the smallest element from the max heap and add the next smallest element to the max heap\n    for i in range(n, len(nums)):\n        hq.heappop(nums[:i])\n        hq.heappush(nums[:i+1], nums[i])\n\n    # return the max heap in descending order\n    return [heapq.heappop(nums) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list into a heap of max-heap\n    hq.heapify(nums)\n    \n    # Pop and return n largest integers from the heap\n    for _ in range(n):\n        hq.heappop(nums)\n        \n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as input and returns the n largest integers from the list in descending order.\n    '''\n    if n > len(nums):\n        raise ValueError(\"n is greater than the length of the list\")\n\n    heap = nums[:n]\n    hq.heapify(heap)\n\n    for num in nums[n:]:\n        if num > heap[0]:\n            heapq.heapreplace(heap, num)\n\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums) #convert list to heap\n    for _ in range(n):\n        nums.pop() #remove smallest element from heap\n    return nums #return remaining elements in descending order"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n    :param nums: list of integers to find the n largest integers from\n    :param n: integer specifying the number of largest integers to find\n    :return: list of n largest integers in descending order\n    \"\"\"\n\n    # Convert the list of numbers into a max heap using a list comprehension\n    max_heap = [(-num, num) for num in nums]\n\n    # Use heapq.nlargest() to find the n largest integers and convert them back into a list\n    n_largest = [num for num, _ in heapq.nlargest(n, max_heap, key=lambda x: x[0])]\n\n    return n_largest"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x-1)!= 0: # while x is not a power of 2\n        x &= (x-1) # remove the least significant bit\n    return x == 1 # if x is 1, then there is at least one bit difference only"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert both numbers to binary strings\n    bin_x = bin(x)\n    bin_y = bin(y)\n\n    # Compare the binary strings at each bit position\n    for i in range(len(bin_x)):\n        if bin_x[i]!= bin_y[i]:\n            # If a difference is found, the function returns False\n            return False\n\n    # If all bit positions are the same, the function returns True\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x_binary = bin(x)[2:] # convert the decimal number to binary format\n    y_binary = bin(x)[2:] # convert the decimal number to binary format\n    for i in range(len(x_binary)):\n        if x_binary[i]!= y_binary[i]:\n            return True\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and checks whether it is a power of two or not.\n    A power of two is a number that is a multiple of 2 and its binary representation consists only of 1's.\n    For example, 2, 4, 8, 16, 32, 64, 128, 256 are all powers of 2.\n    '''\n    if x == 0:\n        return False\n    elif x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    return bin(x)[2:]!= bin(x - 1)[2:]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 1:\n        if x & 1 == 0:\n            x >>= 1\n        else:\n            x = (x >> 1) | 1\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x-1)) == 0: # checking if x and x-1 have same set bits\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # check if the number is negative\n    if x < 0:\n        x = abs(x)\n\n    # check if x is a power of two\n    while x > 1:\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes a positive integer x as input and returns True if x is a power of 2 or False otherwise.\n    '''\n    if x <= 0:\n        return False\n    \n    # Find the number of bits required to represent the integer x\n    bits = 0\n    while x > 1:\n        x >>= 1\n        bits += 1\n    \n    # If the number of bits is even, x is a power of 2\n    if bits % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Convert the string to lowercase\n    text = text.lower()\n    # Split the string into individual words\n    words = text.split()\n    # Find all words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    # Print the long words\n    print(long_words)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall('\\b\\w+\\b', text) # find all words in text\n    long_words = [word for word in words if len(word) >= 4] # filter words with length >= 4\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    return pattern.findall(text)\n"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Using regex to split the string into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Convert the string into a list of characters\n    str_list = list(str)\n    n = len(str_list)\n\n    # Find the frequency of each character in the string\n    freq_dict = {}\n    for char in str_list:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # Sort the characters in the string based on their frequency\n    sorted_chars = sorted(freq_dict.keys(), key=lambda x: freq_dict[x], reverse=True)\n\n    # Find the minimum number of rotations required to get the same string\n    min_rotations = 0\n    for i in range(n):\n        if sorted_chars[i]!= str_list[i]:\n            min_rotations += 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    '''\n    # Convert the string to lowercase for case insensitivity\n    str = str.lower()\n    # Initialize variables\n    count = 0\n    max_count = 0\n    # Traverse the string and check if the string is already the same after rotations\n    for i in range(len(str)):\n        for j in range(1, 3):\n            # Make a copy of the string to avoid modifying the original\n            new_str = str.copy()\n            # Rotate the string by j positions\n            new_str = new_str[j:] + new_str[:j]\n            # Increment the count if the new string is the same as the original string\n            if new_str == str:\n                count += 1\n                break\n            # Update the maximum count if the current count is greater\n            if count > max_count:\n                max_count = count\n    # Return the minimum number of rotations required to get the same string\n    return max_count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Find the length of the string\n    length = len(str)\n\n    # Initialize a dictionary to store the frequency of characters in the string\n    freq = {}\n\n    # Count the frequency of characters in the string\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n\n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = 0\n\n    # Iterate through all possible rotations of the string\n    for i in range(length):\n        # Find the frequency of characters in the current rotation\n        new_freq = {}\n        for j in range(length):\n            if j == i:\n                continue\n            char = str[j]\n            new_freq[char] = new_freq.get(char, 0) + 1\n\n        # Check if the frequency of characters in the new rotation is equal to the frequency of characters in the old string\n        if new_freq == freq:\n            # If yes, increment the minimum number of rotations required\n            min_rotations += 1\n\n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Initialize a list to store the frequency of each character in the string\n    freq = [0] * 26\n    # Calculate the frequency of each character in the string\n    for char in str:\n        freq[ord(char) - ord('a')] += 1\n    # Initialize a boolean variable to check if any rotations are needed\n    need_rot = False\n    # Loop through all rotations of the string\n    for i in range(1, n+1):\n        # Calculate the current rotation of the string\n        rotated_str = str[i:] + str[:i]\n        # Check if the current rotation is equal to the original string\n        if rotated_str == str:\n            return i\n        # Check if the current rotation has any duplicate characters\n        for j in range(i):\n            if rotated_str.count(rotated_str[j]) > 1:\n                need_rot = True\n                break\n    # If no rotations are needed, return 0\n    if not need_rot:\n        return 0\n    else:\n        # If rotations are needed, find the minimum number of rotations\n        min_rot = n\n        for i in range(2, n+1):\n            if find_Rotations(str[i:]) + i < min_rot:\n                min_rot = find_Rotations(str[i:]) + i\n        return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    # initialize two pointers (start and end) at the beginning of the string\n    start = 0\n    end = len(str) - 1\n\n    # initialize a flag to keep track of whether or not the string has been reversed\n    is_reversed = False\n\n    # loop until the start pointer reaches the end of the string\n    while start < end:\n        # if the characters at the start and end pointers are the same,\n        # then the string has been reversed, so update the flag and exit the loop\n        if str[start] == str[end]:\n            is_reversed = True\n            break\n\n        # move the start pointer to the right until it finds a character that is different from the character at the end pointer\n        while str[start] == str[end]:\n            start += 1\n\n        # move the end pointer to the left until it finds a character that is different from the character at the start pointer\n        while str[end] == str[start]:\n            end -= 1\n\n        # if the string has not been reversed, then there must have been a rotation\n        if not is_reversed:\n            return start - end\n\n    # if the string has been reversed, then there must have been a rotation\n    return end - start"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # Find the minimum number of rotations required to get the same string\n    n = len(str)\n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            return i+1\n    \n    # If the string is already the same after rotating n/2 times, return n/2\n    return n//2"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    # Split the string into a list of characters\n    str_list = list(str)\n\n    # Find the length of the string\n    n = len(str_list)\n\n    # Loop through all possible rotations of the string\n    for i in range(1, n+1):\n        # Loop through all possible permutations of the first n characters\n        for j in range(n-i+1):\n            # Get the current sublist of the string\n            sublist = str_list[j:j+i]\n\n            # Check if the sublist is a palindrome\n            if sublist == sublist[::-1]:\n                # If it is, return the number of rotations\n                return i-1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    rotations = 0\n    \n    # check if the string is already a palindrome\n    for i in range(n//2):\n        if str[i]!= str[n-1-i]:\n            return rotations\n    \n    # check if the string is a permutation of its reverse\n    for i in range(n):\n        if str[i]!= str[n-i-1]:\n            break\n    else:\n        return rotations\n        \n    # try to find a rotational inversion in the string\n    for i in range(n//2):\n        if str[i]!= str[n-1-i]:\n            # swap the characters\n            str[i], str[n-1-i] = str[n-1-i], str[i]\n            # check if the string is a palindrome\n            for j in range(i+1, n//2):\n                if str[j]!= str[n-1-j]:\n                    str[i], str[n-1-i] = str[n-1-i], str[i]\n                    break\n            else:\n                return rotations + 1\n            str[i], str[n-1-i] = str[n-1-i], str[i]\n            \n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    if len(str) < 2:\n        return 0\n    \n    n = len(str)\n    count = 0\n    i = 0\n    j = n - 1\n    \n    while i < j:\n        if str[i] == str[j]:\n            i += 1\n            j -= 1\n        elif str[i] > str[j]:\n            count += j - i\n            i = j\n        else:\n            count += n - i\n            j = i\n    \n    if str[i] == str[j]:\n        count += j - i\n    else:\n        count += n - i\n        \n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    for i in range(n): \n        if str[i]!= str[n-1-i]: \n            return i+1"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        if s.find(ch) == 0:\n            s = s[1:]\n        elif s.rfind(ch) == len(s)-1:\n            s = s[:len(s)-1]\n        else:\n            s = s.replace(ch,'',1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # check if the string is empty\n    if len(s) == 0:\n        return s\n    \n    # check if the character is in the string\n    if ch in s:\n        # remove first occurrence\n        if s.index(ch) == 0:\n            s = s[1:]\n        # remove last occurrence\n        elif s.index(ch) == len(s)-1:\n            s = s[:len(s)-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # check if the string is empty\n    if s == \"\":\n        return \"\"\n    # find the index of the first occurrence of the character\n    index = s.find(ch)\n    # if the character is not present, return the original string\n    if index == -1:\n        return s\n    # remove the character from the string\n    s = s[:index] + s[index+1:]\n    # find the index of the last occurrence of the character\n    index = s.rfind(ch)\n    # if the character is not present, return the modified string\n    if index == -1:\n        return s\n    # remove the character from the string\n    s = s[:index] + s[index+1:]\n    # return the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) > 1: \n        s = s.replace(ch, '', 1) \n        s = s.replace(ch, '', -1) \n    else: \n        print(\"Character is not present in the string\") \n    return s "
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch,'')\n        return s\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    return s.replace(ch, '', 1).replace(ch, '', -1)\n"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    if s.count(ch) > 1:\n        s = s.replace(ch, '')\n        s = s.replace(ch, '', 1)\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch in s:\n        # find the first occurrence of the character\n        i = s.find(ch)\n        # find the last occurrence of the character\n        j = s.rfind(ch)\n        # remove the first occurrence\n        s = s[:i] + s[j+1:]\n        # remove the last occurrence\n        s = s[:j] + s[i+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) > 1:\n        s = s.replace(ch, '', 1) # remove first occurrence\n        s = s.replace(ch, '', -1) # remove last occurrence\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0:\n        return ''\n    elif s[0] == ch and s[-1] == ch:\n        return s[1:-1]\n    elif s[0] == ch:\n        return s[1:]\n    elif s[-1] == ch:\n        return s[:-1]\n    else:\n        return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    \n    # Sort the matrix in ascending order based on the sum of its rows\n    for i in range(rows):\n        for j in range(cols-1):\n            if sum(M[i]) < sum(M[i]) + sum(M[i][j+1:]):\n                M[i], M[i][j+1:] = M[i][j+1:], M[i]\n    \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    sorted_rows = []\n    for i in range(rows):\n        sorted_row = sorted(M[i])\n        sorted_rows.append(sorted_row)\n    sorted_M = []\n    for i in range(rows):\n        for j in range(cols):\n            sorted_M.append(sorted_rows[i][j])\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the sum of each row and store it in a list\n    row_sums = [sum(row) for row in M]\n    # Sort the list in ascending order\n    row_sums.sort()\n    # Create a new list to store the sorted matrix\n    sorted_matrix = []\n    # Iterate through the original matrix and add the rows to the sorted matrix in ascending order\n    for row in M:\n        i = 0\n        while i < len(row_sums) and row_sums[i] > sum(row):\n            i += 1\n        sorted_matrix.append(row)\n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        # Sort the rows\n        M[i].sort()\n        # Calculate the sum of the row\n        M[i].append(sum(M[i]))\n    # Sort the columns\n    for j in range(len(M[0])):\n        for i in range(len(M)):\n            M[i][j] = M[i][j]\n    # Sort the matrix\n    for i in range(len(M)):\n        M[i].sort()\n    # Reverse the sorted matrix\n    for i in range(len(M)):\n        M[i].reverse()\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            for k in range(len(M)-1, i-1, -1):\n                for l in range(len(M[k])):\n                    M[k][l] += M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Iterate through each row of the matrix\n    for i in range(len(M)):\n        # Initialize two variables to keep track of the current minimum and maximum values\n        min_val = float('inf')\n        max_val = float('-inf')\n\n        # Iterate through each value in the current row\n        for j in range(len(M[i])):\n            # Update the minimum and maximum values if necessary\n            if M[i][j] < min_val:\n                min_val = M[i][j]\n            elif M[i][j] > max_val:\n                max_val = M[i][j]\n\n        # Iterate through each value in the current row again and sort them based on the minimum and maximum values\n        for j in range(len(M[i])):\n            if M[i][j] < min_val:\n                M[i][j], M[i][j-1] = M[i][j-1], M[i][j]\n            elif M[i][j] > max_val:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n    # Sort the matrix according to the row sums\n    sorted_M = sorted(M, key=lambda x: row_sums.index(sum(x)))\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize variables to store the sum of rows and the final sorted matrix\n    sum_rows = 0\n    sorted_matrix = []\n    \n    # Calculate the sum of rows of the matrix\n    for row in M:\n        sum_rows += sum(row)\n    \n    # If the sum of rows is negative, sort the matrix in descending order\n    if sum_rows < 0:\n        M.sort(key=lambda x: sum(x), reverse=True)\n    else:\n        M.sort(key=lambda x: sum(x))\n    \n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    row_sums = [sum(M[i]) for i in range(n)]\n    sorted_rows = sorted(range(n), key=lambda i: row_sums[i])\n    sorted_matrix = [[M[i][j] for i in sorted_rows] for j in range(n)]\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][i] > M[j+1][i]:\n                M[j], M[j+1] = M[j+1], M[j]"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h  # calculate volume\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/3 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/3 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    This function takes three arguments, l, b, and h, which represent the length, breadth, and height of a triangular prism, respectively. \n    The function then calculates and returns the volume of the prism as a floating point number.\n    '''\n    V = (1/3) * l * b * h   # formula to find the volume of a triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h/3\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*b*h)/3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h/3\n    print(\"The volume of the triangular prism is\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h / 3.0 \n    return volume "
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6.0\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+_[a-z]+)+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def text_lowercase_underscore(text):\n    '''\n    This function checks if a given input string contains sequences of lowercase letters joined with an underscore.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    pattern = r'[a-z]+_[a-z]+'\n\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+(_[a-z]+)*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = re.compile(r'([a-z])_([a-z])')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z][a-z_]*[a-z]$'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]*[_][a-z]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # define regular expression pattern to match sequences of lowercase letters\n    pattern = r'[a-z]+_[a-z]+'\n    # search for pattern in input string\n    match = re.search(pattern, text)\n    # if pattern found, return True else False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = a * 4\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    chars_to_remove = list(set(string) - set(string[1]))\n    result = ''\n    for char in string:\n        if char not in chars_to_remove:\n            result += char\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # create an empty list to store the remaining characters\n    remaining_chars = []\n    # create a set to store the characters present in the second string\n    chars_to_remove = set(string)\n    # iterate over each character in the first string\n    for char in string:\n        # if the character is not present in the second string, add it to the remaining_chars list\n        if char not in chars_to_remove:\n            remaining_chars.append(char)\n    # convert the remaining characters into a string and return it\n    return ''.join(remaining_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    char_list = list(set(char_list) - set(set(string) & set(char_list)))\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_set = set(string)\n    filtered_string = \"\"\n    \n    for char in range(NO_OF_CHARS):\n        if char not in char_set:\n            filtered_string += chr(char)\n            \n    return filtered_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    no_of_chars = 256\n    char_set = set(string2)\n    list_str = \"\"\n    for char in string1:\n        if char not in char_set:\n            list_str += char\n    return list_str"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string, char_list): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = \"\"\n    for char in string: \n        if char not in char_list: \n            new_string += char \n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    list_of_chars = [chr(i) for i in range(NO_OF_CHARS)]\n    result = []\n    for char in string:\n        if char not in list_of_chars:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Converting the first string to a list\n    string_list = list(string)\n    # Converting the second string to a set\n    set_2 = set(string)\n    # Creating an empty list to store the characters to be removed\n    result = []\n    # Looping through each character in the first string\n    for char in string_list:\n        # If the character is not present in the second string, append it to the result list\n        if char not in set_2:\n            result.append(char)\n    # Converting the result list to a string and returning it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert the string to a list of characters\n    lst = list(string)\n\n    # loop through the characters in the list\n    for i in range(len(lst)):\n        # if the character is present in the second string, remove it from the list\n        if lst[i] in string:\n            lst.pop(i)\n            i -= 1\n\n    # convert the list back to a string\n    return ''.join(lst)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    chars_to_remove = string[:NO_OF_CHARS]\n    for char in chars_to_remove:\n        if char in string:\n            string = string.replace(char, '')\n    return string"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_elements = set(arraynums)\n    # Check if the length of the set is equal to the length of the array\n    if len(unique_elements) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) < 2:\n        return False\n    \n    for i in range(len(arraynums)):\n        if i == 0:\n            if arraynums[i] in arraynums[1:]:\n                return True\n        else:\n            if arraynums[i] in arraynums[i-1:]:\n                return True\n    \n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the count of each element in the array\n    counts = {}\n    for num in arraynums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # Loop through the dictionary to check for duplicates\n    for count in counts.values():\n        if count > 1:\n            return True\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n\n    # convert the array to a set to remove duplicates\n    unique_nums = set(arraynums)\n\n    # check if the length of the set is less than the length of the array\n    if len(unique_nums) < len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the indices of the elements in the array\n    indices = {}\n    # iterate through the array and store the indices in the dictionary\n    for i in range(len(arraynums)):\n        if arraynums[i] in indices:\n            return True\n        indices[arraynums[i]] = i\n    # if no duplicate element was found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n\n    # Create a set to store the unique elements\n    unique_set = set()\n\n    # Loop through the array\n    for num in arraynums:\n        # If the element is already in the set, return True\n        if num in unique_set:\n            return True\n        # Otherwise, add it to the set\n        else:\n            unique_set.add(num)\n\n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the array\n    freq_dict = {}\n    \n    # Iterate through the array\n    for num in arraynums:\n        # If the number is already in the dictionary, return True\n        if num in freq_dict:\n            return True\n        \n        # Otherwise, add the number and its frequency to the dictionary\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    \n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique numbers\n    unique_set = set(arraynums)\n    # check if the length of the set is equal to the length of the original array\n    if len(unique_set) == len(arraynums):\n        print(\"No duplicate elements found in the array.\")\n    else:\n        print(\"Duplicate elements found in the array.\")\n        # loop through the set to print all duplicates\n        for num in unique_set:\n            if arraynums.count(num) > 1:\n                print(num)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function takes an array of integers as an argument and returns True if there is at least one duplicate element,\n    and False otherwise.\n    '''\n    # Create a dictionary to store the count of each element in the array\n    count_dict = {}\n    for num in arraynums:\n        # If the element is already in the dictionary, increment its count\n        if num in count_dict:\n            count_dict[num] += 1\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            count_dict[num] = 1\n    \n    # Loop through the dictionary and check if there are any duplicate elements\n    for num in count_dict:\n        if count_dict[num] > 1:\n            return True\n    \n    # If no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 0 and x <= 100:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 3 == 0 and x % 5 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define a list of prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    # Loop through the list of primes\n    for prime in primes:\n        # Check if the given number is divisible by the prime number\n        if x % prime == 0:\n            # If the given number is divisible by the prime number, it's a woodball\n            return True\n    \n    # If the loop completes without finding a prime factor, the given number is not a woodball\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 7 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        return is_woodall(x-1)\n\nprint(is_woodall(7))  # Output: True\nprint(is_woodall(11))  # Output: False\nprint(is_woodall(13))  # Output: True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 7 == 0:\n        print(\"The number is a woodball.\")\n    else:\n        print(\"The number is not a woodball.\")"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0:\n        return \"Woodall number\"\n    else:\n        return \"Not a Woodall number\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        if x in [2, 4, 6, 8]:\n            return True\n        elif x in [1, 3, 5, 7]:\n            return False\n    elif x % 2 == 1:\n        if x in [2, 3, 4, 5]:\n            return True\n        elif x in [6, 7, 8]:\n            return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x == 2:\n        return True\n    elif x % 2 == 0:\n        return is_woodall(x // 2)\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 0:\n        return 'The number is a Woodall.'\n    else:\n        return 'The number is not a Woodall.'"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # reverse the number\n    rev_num = str(num)[::-1]\n    # calculate the reverse of the reverse\n    reverse_of_reverse = int(rev_num)\n    # check if the number is one less than twice its reverse\n    if num < reverse_of_reverse:\n        print(num, \"is one less than twice its reverse.\")\n    else:\n        print(num, \"is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the given number to a string\n    num_str = str(num)\n\n    # Reverse the string and convert it back to an integer\n    rev_num = int(num_str[::-1])\n\n    # Check if the reversed number is one less than twice the original number\n    if rev_num < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    # Get the reverse of the number\n    rev_num = str(num)[::-1]\n    \n    # Check if the reverse is one less than twice the original number\n    if int(rev_num) < int(str(int(rev_num) * 2)[::-1]):\n        print(num, \"is one less than twice its reverse.\")\n    else:\n        print(num, \"is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the given number and calculate its reverse\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    # Check if the given number is one less than twice its reverse\n    return True if num - reverse == 1 else False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return reverse >= (2 * reverse + 1)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    while temp!= 0:\n        reverse = reverse*10 + temp%10\n        temp //= 10\n\n    if reverse == 2*num:\n        print(\"The number is one less than twice its reverse.\")\n    else:\n        print(\"The number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == reverse * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Calculate the reverse of the given number\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n\n    # Check if the reverse of the given number is one less than twice its reverse\n    if rev_num == num - 1:\n        print(f\"{num} is one less than twice its reverse.\")\n    else:\n        print(f\"{num} is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Find the reverse of the input number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    # Check if the reverse of the input number is one less than twice the input number\n    return num < 2 * reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == reverse * 2 - 1"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    # sort the list in descending order\n    arr.sort(reverse=True)\n\n    # initialize the max number with the first number in the array\n    max_num = arr[0]\n\n    # check if the second number is greater than the max number\n    if arr[1] > max_num:\n        max_num = arr[1]\n\n    # check if the third number is greater than the max number\n    if arr[2] > max_num:\n        max_num = arr[2]\n\n    # check if the fourth number is greater than the max number\n    if arr[3] > max_num:\n        max_num = arr[3]\n\n    # check if the fifth number is greater than the max number\n    if arr[4] > max_num:\n        max_num = arr[4]\n\n    # check if the sixth number is greater than the max number\n    if arr[5] > max_num:\n        max_num = arr[5]\n\n    # check if the seventh number is greater than the max number\n    if arr[6] > max_num:\n        max_num = arr[6]\n\n    # check if the eighth number is greater than the max number\n    if arr[7] > max_num:\n        max_num = arr[7]\n\n    # check if the ninth number is greater than the max number\n    if arr[8] > max_num:\n        max_num = arr[8]\n\n    # check if the tenth number is greater than the max number\n    if arr[9] > max_num:\n        max_num = arr[9]\n\n    # check if the eleventh number is greater than the max number\n    if arr[10] > max_num:\n        max_num = arr[10]\n\n    # return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    digits = {0: '', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6:'six', 7:'seven', 8: 'eight', 9: 'nine'}\n    \n    # Sort the list of digits in ascending order\n    arr.sort()\n    \n    # Initialize variables for the largest number and its corresponding index\n    largest_num = 0\n    largest_index = -1\n    \n    # Traverse through the sorted list of digits\n    for i in range(len(arr)):\n        # Calculate the current number\n        curr_num = int(''.join(map(str, arr[i:])))\n        \n        # If the current number is greater than the largest number found so far, update the largest number and its index\n        if curr_num > largest_num:\n            largest_num = curr_num\n            largest_index = i\n    \n    # Convert the largest number into words\n    largest_str = ''\n    for i in range(largest_num, 0, -1):\n        digit = int(i % 10)\n        if digit > 0:\n            largest_str = digits[digit] + largest_str\n        if i == 10:\n            largest_str = 'ten' + largest_str\n        elif i == 11:\n            largest_str = 'eleven' + largest_str\n        elif i == 12:\n            largest_str = 'twelve' + largest_str\n        elif i == 13:\n            largest_str = 'thirteen' + largest_str\n        elif i == 14:\n            largest_str = 'fourteen' + largest_str\n        elif i == 15:\n            largest_str = 'fifteen' + largest_str\n        elif i == 16:\n            largest_str ='sixteen' + largest_str\n        elif i == 17:\n            largest_str ='seventeen' + largest_str\n        elif i == 18:\n            largest_str = 'eighteen' + largest_str\n        elif i == 19:\n            largest_str = 'nineteen' + largest_str\n    \n    # Combine the largest number and its word representation\n    result = largest_str +'' + 'hundred'\n    if largest_index!= -1:\n        result +='and'+ largest_str\n    \n    return result"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)-1):\n        max_num = max(max_num, int(arr[i])+int(arr[i+1]))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n\n    The function should accept a list of digits as input and return an integer value which represents the largest number that can be formed with the given list of digits.\n\n    For example:\n\n    Input: [1, 2, 3, 4, 5]\n    Output: 12345\n\n    Explanation: The largest number that can be formed with the given list of digits [1, 2, 3, 4, 5] is 12345.\n    '''\n\n    # function to check if a number is valid or not\n    def is_valid(num):\n        '''\n        Write a python function to check if a given number is valid or not.\n\n        The function should accept a number as input and return a boolean value indicating whether the number is valid or not.\n\n        For example:\n\n        Input: 12345\n        Output: True\n\n        Explanation: The number 12345 is a valid number since it can be formed with the given list of digits [1, 2, 3, 4, 5].\n        '''\n\n        # iterate through the digits in the number and check if they are valid\n        for digit in str(num):\n            if digit not in arr:\n                return False\n        return True\n\n    # function to find the largest valid number that can be formed with the given list of digits\n    def find_largest_valid_number(arr):\n        '''\n        Write a python function to find the largest valid number that can be formed with the given list of digits.\n\n        The function should accept a list of digits as input and return the largest valid number that can be formed with the given list of digits.\n\n        For example:\n\n        Input: [1, 2, 3, 4, 5]\n        Output: 12345\n\n        Explanation: The largest valid number that can be formed with the given list of digits [1, 2, 3, 4, 5] is 12345.\n        '''\n\n        # initialize the largest valid number\n        largest_valid_num = 0\n\n        # iterate through all possible numbers between 1 and 999999\n        for num in range(1000000):\n\n            # check if the current number is valid and if it is, update the largest valid number\n            if is_valid(num):\n                largest_valid_num = num\n\n            # if the largest valid number is greater than 999999, stop iterating\n            if largest_valid_num > 999999:\n                break\n\n        return largest_valid_num\n\n    # find the largest valid number and return it\n    return find_largest_valid_number(arr)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # sort the input list in descending order\n    arr.sort(reverse=True)\n    # initialize the maximum number with the first digit\n    max_num = arr[0]\n    # loop through the remaining digits\n    for digit in arr[1:]:\n        # calculate the new maximum number\n        new_max_num = max_num + digit\n        # update the maximum number if necessary\n        if new_max_num > max_num:\n            max_num = new_max_num\n    # return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    \n    # Sorting the array in descending order\n    arr.sort(reverse=True)\n    \n    # Initializing the max number\n    max_num = 0\n    \n    # Traversing the array and adding each digit to the max number\n    for digit in arr : \n        max_num += digit\n    \n    # Returning the max number\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Sort the given list of digits in ascending order\n    arr.sort()\n    \n    # Initialize the largest number as 0\n    largest = 0\n    \n    # Initialize the maximum number as the first number in the sorted list\n    max_num = arr[0]\n    \n    # Iterate through the remaining numbers in the sorted list\n    for i in range(1, len(arr)) :\n        \n        # Calculate the sum of the current number and the maximum number\n        current_sum = arr[i] + max_num\n        \n        # If the current sum is greater than the largest number, update the largest number\n        if current_sum > largest :\n            largest = current_sum\n        \n        # If the current sum is greater than the maximum number, update the maximum number\n        if current_sum > max_num :\n            max_num = current_sum\n    \n    # Return the largest number that can be formed with the given list of digits\n    return largest"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # initialize the largest number with first digit in list\n    largest = arr[0]\n\n    # loop through the rest of the digits in the list\n    for i in range(1, len(arr)) : \n\n        # find the sum of the current digit and the previous largest number\n        temp = arr[i] + largest\n\n        # update the largest number if necessary\n        if temp > largest : \n            largest = temp\n\n    # return the largest number that can be formed with the given digits\n    return largest"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    max_num = 0\n    n = len(arr)\n    \n    # Using a for loop to iterate through each digit in the given list\n    for i in range(n):\n        # Using a while loop to find the largest number that can be formed with the current digit\n        j = 0\n        while arr[i] * (10 ** j) <= max_num:\n            j += 1\n        \n        # Updating the max_num variable with the largest number that can be formed with the current digit\n        max_num = arr[i] * (10 ** j)\n    \n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    # check if the signs of x and y are different\n    if x*y < 0:\n        return \"Both numbers have opposite signs\"\n    else:\n        return \"Both numbers have the same sign\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return \"Both integers have opposite sign.\"\n    elif x > 0 and y > 0 or x < 0 and y < 0:\n        return \"Both integers have the same sign.\"\n    else:\n        return \"One of the integers has zero sign.\"\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    It returns True if the signs are opposite and False otherwise.\n    '''\n    if x == 0 or y == 0:\n        return False\n    elif x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    if x*y <= 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # Check if both integers are positive or negative\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y<0) or (x<0 and y>0):\n        print(\"The two integers have opposite signs.\")\n    else:\n        print(\"The two integers have the same sign.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n**2 + 10*n + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 ** 0.5) ** 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return False\n    \n    # Initialize variables to calculate the octagonal number\n    num = 1\n    counter = 1\n    \n    # Calculate the octagonal number\n    while counter <= n:\n        num = 4 * num + 1\n        counter += 1\n    \n    return num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Check if n is odd and evenly divisible by 12\n    if n % 2!= 0 and n % 12 == 0:\n        # Compute the power of 8\n        power = n // 12\n        # Compute the sum of the squares of the powers of 8\n        octagonal_sum = 8 ** power\n        # Check if the sum is equal to n\n        return octagonal_sum == n\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"n must be a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        a = n\n        while n > 1:\n            n -= 1\n            a += n\n        return a"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    if n < 1:\n        return \"Input must be a positive integer.\"\n\n    for i in range(1, n+1):\n        j = 2*i**2 - 1\n        if j == n:\n            return j\n        elif j > n:\n            return \"Number is not octagonal.\"\n\n    return \"Number is not octagonal.\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # calculate the sum of the cubes of even integers up to n\n    even_cubes = sum([i*i*i for i in range(2, n+1, 2)])\n    # calculate the sum of the squares of odd integers up to n\n    odd_squares = sum([i*i for i in range(1, n+1, 2)])\n    # return the sum of the two sums\n    return even_cubes + odd_squares"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return False\n    else:\n        return (n * (3 * n - 1)) ** 2 == n * (n + 1) ** 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    # Define a function to find the nth octagonal number\n    def nth_octagonal(n):\n        \"\"\"\n        Recursive function to find the nth octagonal number.\n        \"\"\"\n        # Base case: return 0 for n = 0\n        if n == 0:\n            return 0\n        # Base case: return 1 for n = 1\n        elif n == 1:\n            return 1\n        # Recursive case: calculate the nth octagonal number\n        else:\n            return n * nth_octagonal(n-1) - n * nth_octagonal(n-2) + n\n\n    # Call the function to find the nth octagonal number\n    oct_n = nth_octagonal(n)\n\n    # Return the result\n    return oct_n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*n*n + n*n + n\n\ndef nth_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number using the is_octagonal function.\n    '''\n    return is_octagonal(n) - is_octagonal(n-1)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[s[i]] += 1\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            total_digits = sum(int(digit) for digit in substring)\n            if total_digits == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def digit_sum(n):\n        '''\n        Helper function to calculate the sum of digits in a number.\n        '''\n        return sum(int(digit) for digit in str(n))\n\n    # Create a dictionary to store the count of substrings with sum of digits equal to their length\n    substrings = defaultdict(int)\n\n    # Iterate through all possible substrings of the input string\n    for i in range(len(s)+1):\n        for j in range(i+1, len(s)+1):\n            # Check if the substring contains only digits\n            if all(char.isdigit() for char in s[i:j]):\n                # Calculate the sum of digits in the substring and check if it is equal to its length\n                substring_sum = digit_sum(int(s[i:j]))\n                if substring_sum == j-i:\n                    substrings[substring_sum] += 1\n\n    # Return the dictionary of substring counts\n    return dict(substrings)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Create a dictionary to store the count of substrings with the given sum\n    substrings_count = defaultdict(int)\n    \n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # Extract the substring starting from the current character\n        substring = s[i:i+len(s[i])-1]\n        # Convert the substring to a list of integers\n        substring_list = list(map(int, substring))\n        # Calculate the sum of the digits in the substring\n        substring_sum = sum(substring_list)\n        # Check if the substring has the given sum\n        if substring_sum == len(substring_list):\n            # Increment the count for this substring\n            substrings_count[substring] += 1\n    \n    # Return the count of substrings with the given sum\n    return sum(substrings_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # convert the string into a list of characters\n    s = list(s)\n    count = 0\n    # loop through all possible substrings of the list\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # calculate the sum of digits of each substring\n            substring = s[i:j]\n            digit_sum = sum([int(digit) for digit in substring])\n            # check if the sum of digits is equal to the length of the substring\n            if digit_sum == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        count[i] = defaultdict(int)\n        count[i][i] = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if s[j] == s[i]:\n                count[i][j] = count[i-1][j-1] + 1\n    \n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(int(s[i:j+1]) for s in count) == j-i+1:\n                result += 1\n    \n    return result"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of each substring\n    substrings_count = defaultdict(int)\n\n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # Initialize a counter variable to keep track of the number of digits in the substring\n        count = 0\n\n        # Iterate through each subsequent character in the string\n        for j in range(i, len(s)):\n            # If the next character is a digit, increment the counter and move on to the next character\n            if s[j].isdigit():\n                count += 1\n            else:\n                # If the counter is greater than the length of the substring, decrement the count\n                if count > len(s):\n                    substrings_count[s[i:j+1]] += 1\n                # Reset the counter and move on to the next character\n                count = 0\n\n    # Return the total count of substrings\n    return sum(substrings_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Create a defaultdict to store the count of substrings with the sum of digits equal to their length\n    digit_count = defaultdict(int)\n\n    # Loop through all the substrings of the string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Calculate the sum of digits of the substring\n            substring = s[i:j+1]\n            digits_sum = sum(int(digit) for digit in substring)\n\n            # If the sum of digits is equal to the length of the substring, increment the count in the defaultdict\n            if digits_sum == len(substring):\n                digit_count[digits_sum] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return digit_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with the sum of digits equal to their length\n    count_dict = defaultdict(int)\n\n    # Iterate through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Check if the substring has a sum of digits equal to its length\n            if sum([int(d) for d in s[i:j]]) == j-i:\n                # Increment the count of substrings with the sum of digits equal to their length\n                count_dict[j-i] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Convert the string to lowercase for case-insensitive comparison\n    s = s.lower()\n    # Initialize a dictionary to store the frequency of each digit\n    freq = defaultdict(int)\n    # Iterate through the string and update the frequency of each digit\n    for c in s:\n        freq[int(c)] += 1\n    # Initialize the count of substrings with the sum of digits equal to their length\n    count = 0\n    # Iterate through the string again to find all substrings with the sum of digits equal to their length\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Calculate the sum of digits in the substring\n            substring_sum = sum(freq[int(c)] for c in s[i:j])\n            # If the sum of digits is equal to its length, increment the count\n            if substring_sum == len(s[i:j]):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            digit_sum = sum(int(d) for d in s[i:j+1])\n            if digit_sum == j-i+1:\n                count[digit_sum] += 1\n\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    if xs:\n        return min(xs)\n    else:\n        return None"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    smallest = float('inf')\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n\n    Args:\n        xs (list): A list of numbers.\n\n    Returns:\n        int: The smallest number in the list.\n    \"\"\"\n    if len(xs) == 0:\n        raise ValueError(\"The list is empty.\")\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        min_num = xs[0]\n        for num in xs:\n            if num < min_num:\n                min_num = num\n        return min_num"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # initialize variables\n    max_diff = 0\n    \n    # iterate over the list of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # check if the difference between the two tuples is greater than the current maximum difference\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            max_diff = max(diff, max_diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n\n    :param test_list: List of tuples containing integers.\n    :return: The maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    if n < 2:\n        return 0\n    else:\n        max_diff = test_list[1][0] - test_list[0][0]\n        for i in range(1, n-1):\n            diff = test_list[i+1][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n        return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Initialize variables\n    max_diff = float('-inf')\n    prev_num = float('-inf')\n    count = 0\n\n    # Loop through the list of tuples\n    for num in test_list:\n        # Check if the current number is greater than the previous number\n        if num > prev_num:\n            # Increment the count of pairs with the same difference\n            count += 1\n            # Update the maximum difference if necessary\n            if num - prev_num > max_diff:\n                max_diff = num - prev_num\n        # Update the previous number\n        prev_num = num\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize variables to store minimum and maximum difference found so far\n    min_diff = float('inf')\n    max_diff = float('-inf')\n\n    # Loop through the list of tuples\n    for pair in test_list:\n        # Extract the first element of the pair and calculate the difference\n        diff = abs(pair[0] - pair[1])\n\n        # Update the minimum and maximum differences if necessary\n        if diff < min_diff:\n            min_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # create a list of tuples containing the subject name and marks\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    # create a list of subjects sorted by marks\n    sorted_subjects = [x[0] for x in sorted_marks]\n    return sorted_subjects"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sorting the list based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples based on the second value in each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples by the second value\n    subjectmarks.sort(key=lambda x: x[1])\n    # print the sorted list of tuples\n    for mark in subjectmarks:\n        print(mark)"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flat_list = []\n        for item in data_list:\n            flat_list += recursive_list_sum(item)\n        return flat_list\n    else:\n        return [data_list]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data):\n        if isinstance(data, list):\n            for item in data:\n                flatten_list(item)\n        else:\n            flattened_data.append(data)\n\n    flattened_data = []\n    flatten_list(data_list)\n    return sum(flattened_data)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        '''\n        Helper function to flatten a list recursively.\n        '''\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    total_sum = sum(flattened_list)\n    return total_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # Recursive case: sum the first element and add the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element of the list to the sum of the flattened list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list, index=0, total=0):\n    if index == len(data_list):\n        return total\n    else:\n        return recursive_list_sum(data_list, index+1, total+data_list[index])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    This function takes in a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    def binomial(n, k):\n        if k > n:\n            return 0\n        elif k == 0 or k == n:\n            return 1\n        else:\n            return binomial(n-1, k-1) + binomial(n-1, k)\n\n    bell_numbers = [1, 2, 13, 70, 210, 607, 1678, 4402, 10926, 24634, 50729, 99302, 180194, 319789, 574080, 1009687, 1727247, 2868713, 4644543, 7377048, 11425647, 18337824, 29993559, 49160441, 79383107, 126188434, 208442719, 349934173, 588686654, 988648519, 1638589567, 2663572830, 4348636707, 7067145797, 11330841986, 18452697479, 30381555539, 49869366348, 80585423398, 130106810575, 217633319626, 363505171170, 626668717331, 1070427284866, 1801839048006, 2969286343364, 4858403790577, 7913256793499, 12817006067012, 21483572665848, 36212146247222, 61911556019618, 106627167635201, 179643401611838, 302628518704848, 499340168963226, 806428789745170, 1298775228622584, 2166389389720719, 3609551034619950, 5996236170115504, 10484624463118473, 16902260077144400, 27130302884611952, 43861002476332553, 69905682336511574, 113621610443764709]\n\n    bell_count = [0] * (n+1)\n    bell_count[0] = 0\n    bell_count[1] = 1\n    for i in range(2, n+1):\n        for j in range(i):\n            bell_count[i] += binomial(i, j) * bell_numbers[j]\n\n    return bell_count[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # initialize an empty list to store the number of ways\n    count = []\n\n    # loop through the range of values of n from 1 to n\n    for i in range(1, n+1):\n\n        # initialize an empty list to store the number of ways for each value of n\n        ways = []\n\n        # loop through the range of values of k from i to n\n        for k in range(i, n+1):\n\n            # calculate the number of ways to partition the set of Bell numbers into k parts\n            ways.append(k * (k-1) // 2)\n\n        # append the number of ways for each value of n to the count list\n        count.append(sum(ways))\n\n    # return the count list\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): the number of elements in the set\n\n    Returns:\n    int: the number of ways to partition the set\n    \"\"\"\n    # Base case: if n=0, there is only one way to partition the set\n    if n == 0:\n        return 1\n\n    # Base case: if n=1, there is only one way to partition the set\n    if n == 1:\n        return 1\n\n    # Base case: if n=2, there are two ways to partition the set:\n    #   - split the set into two sets of length 1\n    #   - or do not split the set\n    if n == 2:\n        return 2\n\n    # Initialize a list to store the number of ways to partition the set\n    ways = [0] * (n + 1)\n\n    # Base case: if n=0 or n=1, there is only one way to partition the set\n    ways[0] = 1\n    ways[1] = 1\n\n    # Calculate the number of ways to partition the set using the formula\n    for i in range(2, n + 1):\n        ways[i] = (ways[i-1] + ways[i-2]) % 1000000007\n\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the count to 0\n    count = 0\n    # Initialize a list of the form [1, 1,..., 1, n]\n    bell_numbers = [1] * (n + 1)\n    # Set the first two elements of the list to 1\n    bell_numbers[0] = 1\n    bell_numbers[1] = 1\n    # Loop through the remaining elements of the list\n    for i in range(2, n + 1):\n        # Loop through all possible combinations of the first i-1 elements\n        for j in range(1, i + 1):\n            # Check if the sum of the two elements is greater than or equal to the third element\n            if bell_numbers[j] + bell_numbers[i - j] >= bell_numbers[i]:\n                # If it is, update the count by 1\n                count += 1\n                # Update the bell numbers list to remove the two elements added in the previous step\n                bell_numbers[j] += bell_numbers[i - j]\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # The number of ways to partition a set of Bell numbers is equal to the number of Bell numbers plus 1.\n    ways = n + 1\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return bell_number(n//2) + bell_number(n//2) + 1\n    else:\n        return bell_number(n//2) + bell_number(n//2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    # Compute the Bell numbers up to n\n    bell_numbers = [0] * (n + 1)\n    bell_numbers[0] = 0\n    bell_numbers[1] = 1\n    for i in range(2, n + 1):\n        bell_numbers[i] = i * bell_numbers[i-1]\n\n    # Compute the partition function using the formula for the Bell numbers\n    partition_function = [0] * (n + 1)\n    partition_function[0] = 0\n    partition_function[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            partition_function[j] += bell_numbers[i]\n\n    return partition_function"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        bell_numbers = [0] * (n+1)\n        bell_numbers[0] = 1\n        bell_numbers[1] = 1\n        for i in range(2, n+1):\n            for j in range(i):\n                bell_numbers[i] += bell_numbers[j] * bell_numbers[i-j]\n        return bell_numbers[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize a list to store the number of ways to partition the Bell numbers\n    ways = [1] * (n+1)\n\n    # Initialize variables to keep track of the number of ways to partition the first Bell number\n    ways[1] = 1\n    ways[2] = 1\n\n    # Loop through the remaining Bell numbers\n    for i in range(3, n+1):\n        # Initialize a variable to keep track of the number of ways to partition the current Bell number\n        ways[i] = 0\n\n        # Loop through the remaining Bell numbers\n        for j in range(2, i):\n            # If the current Bell number is less than the j-th Bell number, then it can be combined with the (i-j)th Bell number to get a larger Bell number\n            if i < j:\n                # Update the number of ways to partition the current Bell number by adding the number of ways to partition the smaller Bell numbers\n                ways[i] += ways[j]\n\n    # Return the total number of ways to partition the Bell numbers\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # initialize the count variable to zero\n    count = 0\n    # loop through each digit in the input number n\n    for digit in str(n):\n        # calculate the number of ways to partition the digit\n        ways = (4 * digit - 2) // 3\n        # multiply the count by the number of ways to partition the digit\n        count *= ways\n    # return the count\n    return count"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1): \n        if A[i] > A[i+1]: \n            return False\n        elif A[i] < A[i+1]:\n            continue\n        else: \n            return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty or not\n    if not A:\n        return True\n    \n    # initialize a flag to keep track of the direction of the first element\n    first_direction = A[1] - A[0]\n    \n    # check if the first element is the minimum element in the array\n    if first_direction == 0:\n        for i in range(1, len(A)-1):\n            if A[i] - A[i-1]!= first_direction:\n                return False\n        return True\n    \n    # check if the first element is the maximum element in the array\n    if first_direction > 0:\n        for i in range(1, len(A)-1):\n            if A[i] - A[i-1] <= 0:\n                return False\n        return True\n    \n    # check if the first element is the minimum element in the array\n    if first_direction < 0:\n        for i in range(1, len(A)-1):\n            if A[i] - A[i-1] >= 0:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    if A[0] < A[1]:\n        return all(A[i] < A[i+1] for i in range(len(A)-1))\n    else:\n        return all(A[i] > A[i+1] for i in range(len(A)-1))"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True\n    \n    if A[0] <= A[1]: \n        for i in range(1, len(A)-1): \n            if A[i] >= A[i+1]: \n                return False\n        return True\n    else: \n        for i in range(1, len(A)-1): \n            if A[i] <= A[i+1]: \n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if the array is empty or has only one element\n    if len(A) <= 1:\n        return True\n    \n    # Check if the array contains only integers\n    if not all(isinstance(x, int) for x in A):\n        return False\n    \n    # Check if the array is monotonic\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    if len(A) < 2:\n        return True\n    \n    # find the first increasing and decreasing element in the array\n    i, j = 0, 1\n    while j < len(A):\n        if A[i] < A[j]:\n            i += 1\n        elif A[i] > A[j]:\n            j -= 1\n        else:\n            return False\n        \n        j += 1\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True\n\n    if A[0] <= A[1]: \n        for i in range(1, len(A)): \n            if A[i] <= A[i-1]: \n                return False\n        return True\n\n    if A[0] >= A[1]: \n        for i in range(1, len(A)): \n            if A[i] >= A[i-1]: \n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    \n    # check if all elements are the same\n    if A[0] == A[-1]:\n        return True\n    \n    # check if the array is monotonic increasing or decreasing\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n    \n    # if none of the above conditions are met, the array is not monotonic\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True\n    \n    if A[0] < A[1]: \n        for i in range(1, len(A)): \n            if A[i] <= A[i-1]: \n                return False\n        return True\n    \n    if A[0] > A[1]: \n        for i in range(1, len(A)): \n            if A[i] >= A[i-1]: \n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1:\n        return True\n    \n    # check if the first element is smaller than or equal to the last element\n    if A[0] <= A[-1]:\n        return True\n    \n    # check if the first element is larger than the last element\n    if A[0] > A[-1]:\n        # check if the array is decreasing or increasing\n        for i in range(1, n-1):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the first element of the sublist is in the list\n    if l[0] in s:\n        # Check if the rest of the list is a sublist of the rest of the sublist\n        if s[s.index(l[0])+len(l[0]):] in l:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while j < len(s):\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n        \n        if i == len(l):\n            return True\n        \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    elif l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s not in l:\n        return False\n    if len(s) == 0:\n        return True\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in l:\n        if i in s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if l and s[0] in l[0]:\n        return is_sublist(l[1:], s[1:])\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) > len(s):\n        return False\n    i = 0\n    j = 0\n    while i < len(l):\n        if l[i] == s[j]:\n            j += 1\n            if j == len(s):\n                return True\n        i += 1\n        j = 0\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # loop through the input list and check if all the tuples have equal length\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tuple1 in Input:\n        if len(tuple1)!= len(tuple(set(tuple1))):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    # check if all the tuples have the same length\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    # if all the tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Iterate over all the tuples in the input list\n    for i in range(len(Input)):\n        # Find the length of the current tuple\n        length = len(Input[i])\n        # Iterate over all the tuples in the input list\n        for j in range(len(Input)):\n            # If the length of the current tuple is different from the length of the other tuple, return False\n            if i!= j and len(Input[j])!= length:\n                return False\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if all(len(t) == len(Input[0]) for t in Input):\n        print(\"All tuples have equal length\")\n    else:\n        print(\"Some tuples have different length\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    count = 0\n    for i in range(len(Input)-1):\n        if len(Input[i]) == len(Input[i+1]):\n            count += 1\n    if count == len(Input) - 1:\n        print(\"All tuples have equal length.\")\n    else:\n        print(\"Not all tuples have equal length.\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # First, check if all the tuples have same length\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    \n    # If all the tuples have same length, return True\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    This function sorts a list of elements using the Comb Sort algorithm.\n    '''\n\n    # Define the parameters for the algorithm\n    gap = len(nums) // 2\n    max_iter = 1000\n\n    # Iterate through the list until the gap size becomes 1\n    while gap > 1 and max_iter > 0:\n        max_iter -= 1\n        gap = len(nums) // gap\n        #print(f\"Current gap: {gap}\")\n\n        # Sort the list by comparing adjacent elements\n        swapped = False\n        for i in range(gap, len(nums)):\n            if nums[i-gap] > nums[i]:\n                nums[i-gap], nums[i] = nums[i], nums[i-gap]\n                swapped = True\n        if not swapped:\n            break\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # initialize variables\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    # main loop\n    while swapped:\n        swapped = False\n\n        # find the largest gap\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n        # shrink the gap\n        gap = int(gap/1.3)\n\n        # repeat until the gap is 1 or the list is sorted\n        if gap == 1 or not swapped:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize variables\n    n = len(nums)\n    max_iter = 10000\n    swapped = True\n\n    # Iterate until no swaps are made\n    while swapped:\n        swapped = False\n        gap = n // 2\n\n        # Iterate over the sorted part of the array\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n        # Decrease the gap size and check for early termination\n        n -= gap\n        max_iter -= 1\n        if n == gap or max_iter == 0:\n            break"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    n = len(nums)\n\n    # define the swap function\n    def swap(a, b):\n        temp = nums[a]\n        nums[a] = nums[b]\n        nums[b] = temp\n\n    # define the compare function\n    def compare(a, b):\n        return nums[a] > nums[b]\n\n    # iterate until the list is sorted\n    while True:\n        swapped = False\n        for i in range(n-1):\n            if compare(i, i+1):\n                swap(i, i+1)\n                swapped = True\n\n        if not swapped:\n            break\n\n        n -= 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        gap = n // 2\n        i = 0\n        while i < gap:\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n            i += 1\n        n -= gap\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        last_gap = gap\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        gap = last_gap // 1.3\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] <= pivot:\n                i += 1\n                swap(arr, i, j)\n        swap(arr, i + 1, high)\n        return i + 1\n\n    def quicksort(arr, low, high):\n        if low < high:\n            pi = partition(arr, low, high)\n            quicksort(arr, low, pi - 1)\n            quicksort(arr, pi + 1, high)\n\n    quicksort(nums, 0, len(nums) - 1)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    This function implements the comb sort algorithm to sort a list of elements.\n    '''\n\n    # Initialize variables\n    n = len(nums)\n    gap = n\n    swapped = True\n    i = 0\n\n    # Loop until the gap is one\n    while gap > 1 or swapped:\n\n        # Reset swapped flag\n        swapped = False\n\n        # Loop over the list\n        for j in range(gap):\n\n            # If the current element is greater than the next element\n            if nums[j] > nums[j + gap]:\n\n                # Swap the elements\n                nums[j], nums[j + gap] = nums[j + gap], nums[j]\n\n                # Set the swapped flag\n                swapped = True\n\n        # Decrease the gap by one\n        gap = int(gap / 1.3)\n\n        # If the gap is zero, the list is sorted\n        if gap == 0:\n            break\n\n        # Increase the iteration count\n        i += 1\n\n        # Check if the maximum number of iterations has been reached\n        if i == n * 100:\n            raise ValueError('The maximum number of iterations has been reached.')\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    # initialize parameters\n    n = len(nums)\n    gap = n // 2\n\n    # sort the list using the comb sort algorithm\n    while gap > 0:\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n        gap //= 1\n\n    # print the sorted list\n    print(\"Sorted List: \", nums)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if i**2 == n:\n            return True\n        elif i**2 > n:\n            return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    # function to check whether the given number can be represented as the difference of two squares or not\n    # n: number to be checked\n    # returns: True if the number can be represented as the difference of two squares, False otherwise\n    \n    # checking if the number is a negative number\n    if n < 0:\n        return False\n    \n    # creating a list of pairs of squares that can be formed by the given number\n    square_pairs = []\n    for i in range(1, int(n**0.5)+1):\n        square_pairs.append((i, n - i**2))\n    \n    # checking whether the number can be formed by the sum of two squares in the list\n    for pair in square_pairs:\n        if pair[0] + pair[1] == n:\n            return True\n    \n    # if the number cannot be formed by the sum of two squares, then it cannot be represented as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number is odd\n    if n % 2 == 1:\n        return False\n\n    # Find the square root of n\n    sqrt_n = int(n ** 0.5)\n\n    # Check if the difference of the squares can be represented as an integer\n    diff = sqrt_n ** 2 - n\n\n    # Check if the difference is an integer\n    if diff.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Convert the given number to a string\n    n_str = str(n)\n\n    # Convert the string to a list of characters\n    n_list = list(n_str)\n\n    # Initialize the count of digits\n    count = 0\n\n    # Check if all the characters in the string are digits\n    for char in n_list:\n        if char.isdigit():\n            count += 1\n        else:\n            return False\n\n    # Check if the count of digits is less than or equal to 10\n    if count <= 10:\n        return False\n\n    # Sort the characters in the string\n    n_list.sort()\n\n    # Convert the list back to a string\n    n_str = ''.join(n_list)\n\n    # Check if the string is a palindrome or not\n    if n_str == n_str[::-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    def is_square(num):\n        '''\n        Check whether a given number is a square or not.\n        '''\n        if num < 0:\n            return False\n        sqrt_num = int(num**0.5)\n        return sqrt_num**2 == num\n\n    def is_difference_square(num):\n        '''\n        Check whether a given number can be represented as the difference of two squares or not.\n        '''\n        sqrt_num = int(num**0.5)\n        if sqrt_num**2 == num:\n            for i in range(1, sqrt_num+1):\n                if is_square(num-i*i):\n                    return True\n        return False\n\n    return is_difference_square(n)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # check if the number is odd\n    if n % 2 == 1:\n        return False\n    \n    # divide the number by 2 and check if the remainder is 0\n    while n % 2 == 0:\n        n /= 2\n    \n    # calculate the square of the number\n    num_square = n ** 2\n    \n    # check if the square of the number is odd\n    if num_square % 2 == 1:\n        return True\n    \n    # calculate the difference between the square of the number and the number itself\n    diff = num_square - n\n    \n    # check if the difference is greater than 1\n    if diff > 1:\n        return True\n    \n    # if the difference is equal to 1, then the number can be represented as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Square of number\n    sqr = n ** 2\n\n    # Loop from 1 to square root of number\n    for i in range(1, int(sqr ** 0.5) + 1):\n        # Check if square of number is equal to difference between square of i and square of square of i\n        if sqr == i ** 2 + (sqr - i ** 2):\n            # If yes, number can be represented as the difference of two squares\n            return True\n    \n    # If no valid square found, then number cannot be represented as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    \"\"\"\n    This function checks whether the given number can be represented as the difference of two squares or not.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    (bool): True if the number can be represented as the difference of two squares, otherwise False.\n    \"\"\"\n\n    # Find the square root of the given number\n    sqrt_n = n ** 0.5\n\n    # Check if the square root of the given number is an integer\n    if sqrt_n.is_integer():\n        # Find the square root of the difference between the square root of the given number and 2\n        diff_sqrt = sqrt_n ** 2 - 2 * n\n\n        # Check if the square root of the difference between the square root of the given number and 2 is an integer\n        if diff_sqrt.is_integer():\n            # Check if the square root of the difference between the square root of the given number and 2 is equal to the given number\n            return sqrt_n ** 2 == n\n\n        # Otherwise, return False\n        else:\n            return False\n\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number can be represented as the difference of two squares or not\n    for i in range(1, int(n**0.5)+1):\n        for j in range(i, int(n**0.5)+1):\n            if i**2 + j**2 == n:\n                return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is divisible by 4\n    if n%4!=0:\n        return False\n    \n    # Check if the difference between the given number and the square of 4 is equal to the square of the given number\n    square_of_4 = int(n/4)**2\n    square_of_diff = (square_of_4-n)**2\n    if square_of_diff == int(square_of_diff):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables\n    same_count = 0\n    last_pattern = -1\n    \n    # Loop through the colors and patterns\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            same_count += 1\n        else:\n            if same_count > 0 and patterns[i] == patterns[last_pattern]:\n                # Check if the patterns are consecutive\n                last_pattern = i\n            else:\n                # Reset the count and pattern\n                same_count = 1\n                last_pattern = i\n                \n    if same_count > 0 and patterns[-1] == patterns[last_pattern]:\n        # Check if the patterns are consecutive\n        last_pattern = len(colors) - 1\n    else:\n        # Reset the count and pattern\n        same_count = 1\n        last_pattern = len(colors) - 1\n        \n    return same_count == len(patterns)"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)-1):\n        if patterns[i]!= patterns[i+1]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function checks whether the given colors follow the given patterns.\n\n    Parameters:\n    - colors (list): A list of colors to check.\n    - patterns (list): A list of patterns to follow.\n\n    Returns:\n    - bool: True if the colors follow the patterns, else False.\n\n    Example:\n    colors = ['red', 'blue', 'green']\n    patterns = ['r', 'b', 'g']\n    print(is_samepatterns(colors, patterns)) # True\n    '''\n\n    # Create a dictionary to store the count of each pattern\n    pattern_count = {}\n    for pattern in patterns:\n        if pattern in pattern_count:\n            pattern_count[pattern] += 1\n        else:\n            pattern_count[pattern] = 1\n\n    # Count the number of occurrences of each pattern in the colors\n    pattern_occurrences = {}\n    for color in colors:\n        if color in pattern_occurrences:\n            pattern_occurrences[color] += 1\n        else:\n            pattern_occurrences[color] = 1\n\n    # Check if the count of each pattern is equal to the count of each pattern in the patterns list\n    for pattern in patterns:\n        if pattern_count[pattern]!= pattern_occurrences[pattern]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if colors.count(patterns[i])!= len(patterns[i]):\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n\n    pattern_set = set(patterns)\n    for color in colors:\n        if color not in pattern_set:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    current_pattern = \"\"\n    for color in colors:\n        if color in current_pattern:\n            return False\n        else:\n            current_pattern += color\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # create a set of colors to store unique colors in the patterns array\n    colors_set = set(colors)\n\n    # loop through the patterns array and check if the sequence of colors is present in the set\n    for i in range(len(patterns)):\n        if patterns[i] not in colors_set:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n-1):\n        if colors[i]!= patterns[i] or colors[i+1]!= patterns[i+1]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors.sort()\n    patterns.sort()\n    if colors == patterns:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two lists of colors and patterns as input and returns a boolean value indicating whether the colors follow the patterns or not.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) % K == 0 and sum(test_list[j]) % K == 0:\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through each tuple in the given list\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible by K, add the tuple to the result list\n            result.append(tup)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if sum(tup) % K == 0:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                return True\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(num % K == 0 for num in test_list[i]) and all(num % K == 0 for num in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(test_list[i][k] % K == 0 for k in range(len(test_list[i]))):\n                result.append(test_list[i])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create an empty list to store the tuples\n    result = []\n    # Loop through each tuple in the list\n    for t in test_list:\n        # Check if the sum of each tuple elements is divisible by K\n        if sum(t) % K == 0:\n            # Add the tuple to the result list\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Create an empty list to store the tuples that have all elements divisible by K\n    result = []\n\n    # Loop through each tuple in the test_list\n    for tup in test_list:\n\n        # Check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n\n            # If all elements are divisible by K, add the tuple to the result list\n            result.append(tup)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    if n%11 == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # checking if the number is divisible by 11\n    if n % 11 == 0:\n        print(n, \"is divisible by 11.\")\n    else:\n        print(n, \"is not divisible by 11.\")"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes a positive integer as input and returns a boolean value indicating whether the input number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Loop through the words and check the length of each word\n    for word in words:\n        if len(word) % 2!= 0:\n            return \"The length of the word is odd.\"\n        else:\n            return \"The length of the word is even.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word)"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    for word in s.split():\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    count = 0\n    for word in words:\n        count += len(word)\n    if count % 2 == 0:\n        return \"The word length is even.\"\n    else:\n        return \"The word length is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # remove spaces and convert to lowercase\n    s = s.replace(\" \", \"\").lower()\n\n    # loop through each word in the sentence and check its length\n    for word in s.split():\n        if len(word) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the word is odd, and False otherwise.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    It returns a boolean value indicating whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n        else:\n            continue\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: \n        return 0 \n    else: \n        return n * (n + 1) * (2 * n + 1) / 6 "
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        print(\"Please enter a positive integer.\")\n    elif n == 1:\n        print(1)\n    elif n == 2:\n        print(4)\n    else:\n        print(n * 6 * (n - 1) // 2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the first three numbers of the tetrahedral sequence\n    a = 1\n    b = 1\n    c = 1\n    # Initialize the fourth number of the tetrahedral sequence\n    d = 1\n    \n    # Compute the next number of the tetrahedral sequence\n    while True:\n        # Calculate the next number of the tetrahedral sequence\n        a, b, c, d = (b + 1) * (c + 1) * (d + 1), 3 * a + 1, 2 * b + 1, 2 * c + 1, 2 * d + 1\n        # Check if the current number is greater than n\n        if a > n:\n            break\n    \n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1)*(n+2)*(n+3)) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Base case: when n is 0 or 1, the nth tetrahedral number is 0\n    if n == 0 or n == 1:\n        return 0\n\n    # Base case: when n is 2, the nth tetrahedral number is 8\n    if n == 2:\n        return 8\n\n    # Compute the nth tetrahedral number by adding the (n-1)th tetrahedral number and the (n-2)th tetrahedral number\n    t = tetrahedral_number(n-1) + tetrahedral_number(n-2)\n\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (1 + math.sqrt(1+8*n-1)) / 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n - 1) * (n - 2) * (n - 3) * 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 40\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3) + tetrahedral_number(n-4)\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Define the terms of the tetrahedral sequence\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    \n    # Iterate n-1 times to compute the nth tetrahedral number\n    for i in range(n-1): \n        a = (a*(a+1)) // 2  # Compute a\n        b = (b*(b+1)) // 2  # Compute b\n        c = (c*(c+1)) // 2  # Compute c\n        d = (d*(d+1)) // 2  # Compute d\n    \n    # Return the nth tetrahedral number\n    return a + b + c + d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 4 * (n - 1) + tetrahedral_number(n - 1)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*(r**3)\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*r**3\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function finds the volume of a sphere with a given radius r.\n    '''\n    return (4/3)*math.pi*(r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Calculate the volume using the formula for the sphere\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # calculate the volume of the sphere\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius (r) as input and returns the volume of a sphere with that radius.\n    '''\n    return 4/3 * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r ** 3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r**3\n    return vol"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr((total % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.lower()\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr((sum_ascii % 26) + ord('a'))\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Convert the given string to a list of characters\n    char_list = list(strr)\n\n    # Initialize the sum to 0\n    sum_value = 0\n\n    # Loop through each character of the list\n    for i in char_list:\n        # Convert each character to its ASCII value\n        ascii_value = ord(i)\n\n        # Add the ASCII value to the sum\n        sum_value += ascii_value\n\n    # Get the character made by adding the ASCII value of all the characters of the string modulo 26\n    char_made = chr((sum_value % 26) + 65)\n\n    # Return the character made\n    return char_made"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ASCII = 65 # ASCII value of 'A'\n    result = 0\n    for char in strr:\n        result += ord(char) - ASCII\n        result %= 26\n    return chr(result + ASCII)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = sum([ord(char) for char in strr])\n    return chr((ascii_value % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # convert the string to a list of characters\n    char_list = list(strr)\n    # initialize the sum to 0\n    sum = 0\n    # iterate over the list and add the ASCII value of each character to the sum modulo 26\n    for i in char_list:\n        sum += ord(i) % 26\n    # convert the sum back to a character and return it\n    return chr((sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for i in range(len(strr)):\n        ascii_sum += ord(strr[i])\n    return chr(ascii_sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    result = ascii_value % 26\n    return chr(result)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = str(strr)\n    char = 0\n    for i in strr:\n        char += ord(i)\n    char = char % 26\n    return chr(char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n\n    return chr(ascii_sum % 26 + ord('a'))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    else:\n        for i in range(3, n+1):\n            # Find the value of the nth term using the formula\n            # 1 / (1 + 1/2^n)\n            value = int(round(1 / (1 + 1/2**i)))\n            # Append the value to a list\n            sequence.append(value)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676211, 23416728348467675, 37889062373143886, 61305790721611561, 99194853094755447, 160500643816367008, 259695496911122455, 420196140727489463, 6798916"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1]  # initialize sequence with first two numbers of sequence\n    for i in range(2, n):  # loop through the sequence to generate the nth number\n        if i % 2 == 0:  # check if i is even\n            sequence.append(sequence[i//2] + sequence[i//2 + 1])\n        else:\n            sequence.append(sequence[i//2] * sequence[i//2 + 1])\n    return sequence[n-1]  # return the nth number in the sequence\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th number in the newman conway sequence is\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # initialize the first two numbers in the sequence\n    a = 1\n    b = 1\n\n    # loop through the sequence up to n-1\n    for i in range(2, n):\n        # add the previous two numbers in the sequence to get the next number in the sequence\n        c = a + b\n        # set the previous numbers to the current numbers\n        a = b\n        b = c\n\n    # return the nth number in the sequence\n    return b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return 4 * (n - 1) + 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    sequence = [1]\n    count = 1\n    while count < n:\n        new_sequence = []\n        for i in range(1, len(sequence)):\n            if sequence[i] == 1:\n                new_sequence.append(1)\n                if len(new_sequence) < 2:\n                    new_sequence.append(1)\n            else:\n                new_sequence.append(0)\n        sequence = new_sequence\n        count += 1\n\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    for i in range(1, n+1):\n        b = a + 4\n        if b > n:\n            b = n\n        a = b\n    return a"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    while len(sequence) < n:\n        next_sequence = [2 * i + 1 for i in range(len(sequence))] + [2 * i + 2 for i in range(len(sequence) - 1)]\n        sequence = next_sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0] * 2\n    sequence[0] = 1\n    sequence[1] = 0\n    for i in range(2, n):\n        sequence[i % 2] = sequence[(i - 1) % 2] + sequence[(i - 2) % 2]\n    return sequence[n % 2]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r * r\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r * r  # formula for surface area of sphere\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Calculate the surface area of a sphere with given radius.\n    '''\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of a sphere\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    A = 4 * math.pi * r**2\n    return A"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    for i in range(1, n + 1):\n        if n % 2 == 0:\n            print(a, end=' ')\n        else:\n            print(4 * a, end=' ')\n        a += 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_helper(n, i):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 6\n        if n == 2:\n            return 30\n        if n == 3:\n            return 126\n        if n == 4:\n            return 510\n        if n == 5:\n            return 2252\n        if n == 6:\n            return 8817\n        if n == 7:\n            return 36882\n        if n == 8:\n            return 138641\n        if n == 9:\n            return 552858\n        if n == 10:\n            return 2375106\n        if n == 11:\n            return 9267122\n        if n == 12:\n            return 38164816\n        if n == 13:\n            return 146410252\n        if n == 14:\n            return 573779944\n        if n == 15:\n            return 2486406212\n        if n == 16:\n            return 9750314672\n        if n == 17:\n            return 40124707392\n        if n == 18:\n            return 159030001664\n        if n == 19:\n            return 600444666984\n        if n == 20:\n            return 2611168530704\n        if n == 21:\n            return 10302661483008\n        if n == 22:\n            return 42786045991680\n        if n == 23:\n            return 169997427704832\n        if n == 24:\n            return 630945560061952\n        if n == 25:\n            return 2755578638657536\n        if n == 26:\n            return 10989415999306880\n        if n == 27:\n            return 45497562706913280\n        if n == 28:\n            return 1871207211021874688\n        if n == 29:\n            return 65625169422803850496\n        if n == 30:\n            return 290232415716288721920\n        if n == 31:\n            return 1159719878940081763840\n        if n == 32:\n            return 4875157336006838957312\n        if n == 33:\n            return 19614915246290924274176\n        if n == 34:\n            return 680575942031689132139520\n        if n == 35:\n            return 3074457345611269108374528\n        if n == 36:\n            return 122587807267308219700692480\n        if n == 37:\n            return 515133074150013957606976000\n        if n == 38:\n            return 2060532296601158841970424832\n        if n == 39:\n            return 7117740210316503088169332224"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hex_num = 1\n    i = 1\n    while i <= n:\n        hex_num += (i ** 2 + 1) * (2 * i - 1) / 2\n        i += 1\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initialize variables\n    h = 1\n    num = 1\n    \n    # Loop through each line\n    for i in range(1, n+1):\n        # Find the number of hexagons in the current line\n        num_hex = (2*i - 1)**2 // 3 + 1\n        \n        # If the current line is odd, move to the next line\n        if i % 2!= 0:\n            h += num_hex\n        # If the current line is even, move to the previous line\n        else:\n            h -= num_hex\n        \n        # Calculate the centered hexagonal number\n        centered_hex = h + i - 1\n        \n        # Print the centered hexagonal number\n        print(centered_hex)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case\n    if n <= 0:\n        return 0\n    \n    # Initialize variables\n    current_hexagonal = n\n    center = 1\n    \n    # Loop through each iteration\n    while True:\n        if current_hexagonal == 1:\n            return center\n        \n        # Calculate the next centered hexagonal number\n        next_hexagonal = 3 * current_hexagonal - 1\n        \n        # Check if the next centered hexagonal number is within the range of valid hexagonal numbers\n        if (next_hexagonal >= 1 and next_hexagonal <= 6) and (next_hexagonal - center) % 6 == 0:\n            current_hexagonal = next_hexagonal\n        \n        # If the next centered hexagonal number is not within the range of valid hexagonal numbers, break out of the loop\n        else:\n            break\n        \n        # Increment the center\n        center += 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    return (1/3)*((1+sqrt(5))/2)**n - (1/3)*((1-sqrt(5))/2)**n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    hexagonal_number = 0\n    while i <= n:\n        hexagonal_number += i\n        i += 1\n    centered_hexagonal_number = hexagonal_number - 1\n    return centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Calculate the base of the centered hexagonal number\n    base = 6 * n + 3\n\n    # Calculate the nth centered hexagonal number using the base\n    centered_hex = base * (2 * n + 1) // 3\n\n    # Return the centered hexagonal number\n    return centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Find the nth centered hexagonal number.\n    \"\"\"\n    # Define the base values for centered hexagons\n    a = 1\n    b = 1.5\n    c = 2\n\n    # Initialize the centered hexagonal number to 0\n    result = 0\n\n    # Iterate through the centered hexagons and add the value of each centered hexagon to the result\n    for _ in range(n):\n        result += a + b + c\n        a = b\n        b = c\n        c = 2 * b - a\n\n    # Return the result\n    return result"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((n * (2 * n - 1)) // 6) + 1"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Combine all the key-value pairs from the three dictionaries\n    combined_dict = dict1.copy()\n    combined_dict.update(dict2)\n    combined_dict.update(dict3)\n\n    # Sort the combined dictionary by key\n    sorted_dict = ct.OrderedDict(sorted(combined_dict.items()))\n\n    return sorted_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n\n    # Merge the first two dictionaries into a single dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    # Merge the third dictionary into the first two dictionaries\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    # Merge the first two dictionaries into a single dictionary\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    # Merge the second and third dictionaries into a single dictionary\n    merged_dict2 = dict1.copy()\n    merged_dict2.update(dict3)\n    # Merge the two merged dictionaries into a single dictionary\n    merged_dict3 = ct.ChainMap(merged_dict, merged_dict2)\n    # Return the merged dictionary\n    return dict(merged_dict3)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for elem in list1:\n        freq_dict[elem] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    freq_dict = collections.defaultdict(int)\n\n    for item in list1:\n        freq_dict[item] += 1\n\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def freq_count(lst):\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    if N % 2 == 0:\n        return closest_even(N)\n    else:\n        return closest_odd(N)\n\ndef closest_even(N):\n    \"\"\"\n    Find the closest smaller even number than n.\n    \"\"\"\n    for i in range(1, N):\n        if i % 2 == 0 and i < N:\n            return i\n\ndef closest_odd(N):\n    \"\"\"\n    Find the closest smaller odd number than n.\n    \"\"\"\n    for i in range(1, N):\n        if i % 2 == 1 and i < N:\n            return i"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = float('inf')\n    closest_smaller_num = 0\n\n    for i in range(1, N+1):\n        if abs(i - N) < abs(smallest_num - N):\n            smallest_num = i\n            closest_smaller_num = N\n        elif abs(i - N) == abs(smallest_num - N):\n            if i < smallest_num:\n                smallest_num = i\n                closest_smaller_num = N\n\n    return closest_smaller_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    for i in range(1, N+1):\n        if N-i in range(1, N+1):\n            return min(N-i, i)\n        elif i in range(1, N+1):\n            return i\n    return -1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    num_list = list(range(1, N+1))\n    closest_num = num_list[0]\n    closest_diff = abs(N - closest_num)\n\n    for num in num_list[1:]:\n        diff = abs(N - num)\n\n        if diff < closest_diff:\n            closest_diff = diff\n            closest_num = num\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return closest_num(N-1)\n    else:\n        return closest_num(N+1)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    return (N - 1) // 2"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    smallest = N\n    smallest_diff = float('inf')\n    for num in range(1, N):\n        diff = abs(num - N)\n        if diff < smallest_diff:\n            smallest_diff = diff\n            smallest = num\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = float('inf')\n    for i in range(N, -1, -1):\n        if i < min_num:\n            min_num = i\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = n\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            smallest = min(smallest, i-1)\n        else:\n            smallest = min(smallest, i+1)\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    smallest_num = n - 1\n\n    if n % 2 == 0:\n        smallest_num -= 1\n\n    for i in range(n, 0, -1):\n        if i % 2 == 0:\n            if i - 2 == smallest_num:\n                break\n        else:\n            if i - 1 == smallest_num:\n                break\n        smallest_num = i\n\n    return smallest_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #initialize variables\n    longest_word = \"\"\n    length = 0\n    \n    #iterate through the list and find the longest word\n    for word in list1:\n        if len(word) > length:\n            length = len(word)\n            longest_word = word\n    \n    #print the result\n    print(\"The length of the longest word in the list is:\", length)\n    print(\"The longest word in the list is:\", longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        length = len(word)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    length = 0\n    for word in list1:\n        if len(word) > length:\n            length = len(word)\n    return length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if type(str1) == list:\n        for s in str1:\n            if sub_str in s:\n                return True\n    elif sub_str in str1:\n        return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(f\"{sub_str} found in {str1}\")\n    else:\n        print(f\"{sub_str} not found in {str1}\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, str) and isinstance(sub_str, str):\n        if sub_str in str1:\n            return True\n        else:\n            return False\n    else:\n        print(\"Both arguments must be strings.\")\n        return None"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2 == 0: \n        return \"The number is not undulating\" \n    else: \n        return \"The number is undulating\" "
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    return n % 2 == 0"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return False\n    elif n < 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    This function takes a number as input and returns True if it is undulating and False otherwise.\n    An undulating number is a positive integer whose digits alternate from odd to even.\n    For example, 15, 37, 45, 59, 71, and so on.\n    '''\n    if n < 10:\n        return False\n    else:\n        digits = [int(d) for d in str(n)]\n        for i in range(len(digits)):\n            if digits[i] % 2 == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # Check if the given number is even or odd\n    if n % 2 == 0: \n        return 'The given number is even.'\n    \n    # If the given number is odd, check if it is divisible by 3 or 5\n    elif n % 3 == 0 or n % 5 == 0: \n        return 'The given number is divisible by 3 or 5.'\n    \n    # If the given number is neither even nor odd and neither divisible by 3 nor 5, then it is undulating\n    else: \n        return 'The given number is undulating.'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    odd_digits = sum(int(d) % 2!= 0 for d in str(n)) % 2  # Count number of odd digits\n    even_digits = sum(int(d) % 2 == 0 for d in str(n)) % 2  # Count number of even digits\n    \n    return odd_digits == even_digits"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is even\n    if n % 2 == 0:\n        # If it's even, check if it's divisible by 3\n        if n % 3 == 0:\n            # If it's divisible by 3, it's not undulating\n            return False\n        # If it's not divisible by 3, it's undulating\n        else:\n            return True\n    # If the number is odd, it's undulating\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"The number is not undulating\"\n    else:\n        return \"The number is undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    This function takes a positive integer as input and returns True if it is undulating, \n    and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value of each tuple using the itemgetter() function from the operator module\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value\n    test_list.sort(key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value in the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples in ascending order of the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    \n    # Sort the list of tuples by the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the index of the tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    \"\"\"\n    return min(range(len(test_list)), key=lambda i: itemgetter(1, i)(test_list))\n"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple in the list with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])[0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for sublist in lst:  \n        if len(sublist) < min_length:  \n            min_length = len(sublist)  \n    return min_length  "
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf') # set initial minimum length to infinity\n    for sublist in lst:  \n        if len(sublist) < min_len:  \n            min_len = len(sublist)  \n    return min_len  "
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # initialize minimum length as infinity\n    min_len = float('inf')\n\n    # iterate through each list in the list\n    for sublist in lst:\n\n        # check if current sublist has a length less than current minimum\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n\n    # return minimum length\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = []\n    for i in range(len(lst)):\n        if len(lst[i]) < len(length):\n            length = lst[i]\n    return len(length)"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of the given integer n.\n    A divisor of an integer n is an integer d such that d is a divisor of n and d!= 1.\n    The function uses a loop to iterate from 1 to n and count the number of divisors.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i!= 1:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    count = 0\n    if n < 2:\n        return count\n    for i in range(2, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if type(item) == list:\n            for subitem in item:\n                if subitem in freq:\n                    freq[subitem] += 1\n                else:\n                    freq[subitem] = 1\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    freq = {}\n    # Use recursion to flatten the list\n    flattened = flatten(list1)\n    # Loop through each element in the flattened list\n    for item in flattened:\n        # Check if the item is already in the dictionary, if not, add it with a value of 1\n        if item not in freq:\n            freq[item] = 1\n        # If the item is already in the dictionary, increment its value by 1\n        else:\n            freq[item] += 1\n    # Return the frequency dictionary\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element in the list\n    frequency = {}\n\n    # loop through each element in the list\n    for item in list1:\n        # if the item is already in the dictionary, increment its frequency by 1\n        if item in frequency:\n            frequency[item] += 1\n        # if the item is not in the dictionary, add it with a frequency of 1\n        else:\n            frequency[item] = 1\n\n    # return the dictionary containing the frequency of each element in the list\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = []\n    for item in list1:\n        for subitem in item:\n            flattened_list.append(subitem)\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # loop through each list in the flattened list of lists\n    for sublist in list1:\n        # loop through each element in the sublist and increment its frequency in the freq_dict\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n\n    # return the final freq_dict\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Loop through each element in the list\n    for item in list1:\n        # If the item is a list, recursively call the function on the item\n        if type(item) == list:\n            # Recursively call the function on the item\n            sub_freq_dict = frequency_lists(item)\n            # Merge the sub-dictionary into the main dictionary\n            for key, value in sub_freq_dict.items():\n                freq_dict[key] = value\n        # If the item is not a list, check if it is already in the dictionary\n        elif item in freq_dict:\n            # Increment the frequency count for the item in the dictionary\n            freq_dict[item] += 1\n        # If the item is not already in the dictionary, add it with a frequency count of 1\n        else:\n            freq_dict[item] = 1\n    \n    # Return the final dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(lst):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in a flattened list of lists.\n    \"\"\"\n    freq = {}\n    for item in lst:\n        if isinstance(item, list):\n            for subitem in item:\n                freq[subitem] = freq.get(subitem, 0) + 1\n        else:\n            freq[item] = freq.get(item, 0) + 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    flatten_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flatten_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq:\n                freq[subitem] += 1\n            else:\n                freq[subitem] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n\n    # Loop through each element of the list\n    for i in list1:\n        # If the element is a list, recursively call the function on the list\n        if type(i) == list:\n            # Recursively call the function on the sublist\n            sublist_freq = frequency_lists(i)\n\n            # Add the sublist frequency to the overall dictionary\n            for key, value in sublist_freq.items():\n                freq[key] = value\n\n        # If the element is not a list, increment its frequency in the dictionary\n        else:\n            freq[i] = freq.get(i, 0) + 1\n\n    # Return the final dictionary of frequency counts\n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    else:\n        binary_digits = []\n        while n > 0:\n            binary_digits.append(str(n % 2))\n            n = n // 2\n        binary_digits.reverse()\n        return ''.join(binary_digits)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_str = str(remainder) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_num = \"\"\n    while n > 0:\n        binary_num = str(n % 2) + binary_num\n        n //= 2\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0: \n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert the decimal number to a string\n    decimal_str = str(n)\n    # Initialize an empty string to store the binary representation of the decimal number\n    binary_str = \"\"\n    # Iterate over the digits of the decimal number from right to left\n    for i in range(len(decimal_str) - 1, -1, -1):\n        # Check if the digit is a 1\n        if decimal_str[i] == \"1\":\n            # If it is, add a 1 to the binary representation\n            binary_str += \"1\"\n        else:\n            # If it's a 0, add a 0 to the binary representation\n            binary_str += \"0\"\n    # Return the binary representation of the decimal number\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    # initialize an empty string to store the binary equivalent\n    binary = ''\n\n    # loop until n is equal to 0\n    while n > 0:\n        # extract the last digit of n\n        last_digit = n % 2\n\n        # convert the last digit to a character and append it to binary\n        binary = str(last_digit) + binary\n\n        # remove the last digit from n\n        n = n // 2\n\n    # return the binary equivalent\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_string = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_string = str(remainder) + binary_string\n        n = n // 2\n    return binary_string"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    str_num = str(num)\n    # Find the largest power of 10 that is less than or equal to the number of digits in the original number\n    power = 1\n    while str_num[:len(str_num) - power].isdigit():\n        power += 1\n    # Multiply the number by that power of 10 and add 1 to get the next smallest palindrome\n    next_palindrome = int(str_num[0]) * 10 ** power + 1\n    return next_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the input integer to a string and reverse it\n    str_num = str(num)[::-1]\n    # Convert the reversed string to an integer and check if it is palindrome\n    if str_num == str_num[::-1]:\n        # If it is a palindrome, check if it is greater than the input integer\n        if int(str_num) > num:\n            # If it is, return it as the next smallest palindrome\n            return int(str_num)\n        else:\n            # If it is not, return the next smallest palindrome of the input integer minus 1\n            return next_smallest_palindrome(num - 1)\n    else:\n        # If it is not a palindrome, return the next smallest palindrome of the input integer minus 1\n        return next_smallest_palindrome(num - 1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Create a list of all possible palindromes of the input integer\n    palindromes = []\n    for i in range(99, num - 1, -1):\n        j = i\n        while j >= 10:\n            j = j // 10\n        for k in range(99, i - 1, -1):\n            k = k // 10\n            if i * 100 + j == k * 100 + j:\n                break\n        else:\n            palindromes.append(i * 100 + j)\n\n    # Find the smallest palindrome in the list\n    smallest_palindrome = min(palindromes)\n\n    # Find the smallest palindrome that is greater than the input number\n    for i in range(99, num + 1, -1):\n        j = i\n        while j >= 10:\n            j = j // 10\n        if j * 100 + i <= smallest_palindrome:\n            break\n    else:\n        raise ValueError(\"No palindromes greater than the input number found.\")\n\n    return j * 100 + i\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n\n    Args:\n        num (int): An integer to find the next smallest palindrome for.\n\n    Returns:\n        int: The next smallest palindrome of num as an integer.\n    \"\"\"\n    if num < 10:\n        return 10\n    else:\n        num_str = str(num)\n        num_digits = len(num_str)\n        next_num = 0\n\n        for i in range(num_digits - 1, -1, -1):\n            temp = 0\n            for j in range(i + 1):\n                temp += int(num_str[j]) * 10 ** (num_digits - j - 1)\n\n            next_num += temp\n            temp //= 10\n\n        return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the input number to a string and reverse it\n    num_str = str(num)\n    reversed_num_str = num_str[::-1]\n\n    # check if the reversed number is a palindrome\n    if is_palindrome(int(reversed_num_str)):\n        # if it is, add 1 to the number and check if it is a palindrome again\n        new_num = int(num_str) + 1\n        if is_palindrome(new_num):\n            # if it is, return the new number\n            return new_num\n        else:\n            # if not, return the original number\n            return num\n    else:\n        # if not, add 1 to the reversed number and check if it is a palindrome again\n        new_num = int(reversed_num_str) + 1\n        if is_palindrome(new_num):\n            # if it is, return the new number\n            return new_num\n        else:\n            # if not, return the original reversed number\n            return int(reversed_num_str)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the input integer to a string\n    num_str = str(num)\n    \n    # Reverse the string\n    reverse_num_str = num_str[::-1]\n    \n    # Convert the reversed string back to an integer\n    reverse_num = int(reverse_num_str)\n    \n    # Check if the reversed number is greater than the original number\n    if reverse_num > num:\n        # Return the original number (i.e., the next smallest palindrome)\n        return num\n    else:\n        # If the reversed number is less than the original number, add 1 to it and return the result\n        return reverse_num + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_smallest_palindrome(num):\n    # find the largest palindrome that is less than or equal to the input number\n    limit = num * 10**9\n    for i in range(int(limit / 100), -1, -1):\n        if is_palindrome(i * 100):\n            return i * 100\n    # no palindrome found, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # reverse the integer and check if it is a palindrome\n    if str(num) == str(num)[::-1]:\n        return num\n    # reverse the integer and add one to it, check if it is a palindrome\n    else:\n        return next_smallest_palindrome(int(str(num)[::-1]) + 1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_palindrome_prime(num):\n        return is_palindrome(num) and is_prime(num)\n\n    def reverse_number(num):\n        return int(str(num)[::-1])\n\n    def is_greater(a, b):\n        return a > b\n\n    def is_smaller(a, b):\n        return a < b\n\n    while True:\n        smallest_palindrome = num - 1\n        if is_palindrome_prime(smallest_palindrome):\n            return smallest_palindrome\n        elif is_greater(smallest_palindrome, num):\n            return num + 1\n        else:\n            num = reverse_number(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    largest_palindrome = 0\n    while True:\n        is_palindrome = True\n        for i in str(num):\n            if int(i)!= int(str(num)[::-1])[-(i+1)]:\n                is_palindrome = False\n                break\n        if is_palindrome:\n            largest_palindrome = num\n        num += 1\n    return largest_palindrome"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Convert the input array to a list so that we can use indexing\n    arr = list(arr)\n\n    # Check if the input array is empty or contains only one element\n    if len(arr) == 0 or len(arr) == 1:\n        return None\n\n    # Find the index of the middle element\n    mid = len(arr) // 2\n\n    # Check if the kth element is in the first half\n    if k <= mid:\n        return kth_element(arr[:mid], k)\n\n    # Check if the kth element is in the second half\n    else:\n        return kth_element(arr[mid:], k - mid)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left_sum = 0\n        right_sum = sum(arr)\n        for i in range(len(arr)):\n            if i < k:\n                left_sum += arr[i]\n            else:\n                right_sum -= arr[i]\n            if left_sum == right_sum:\n                return arr[i]\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    \n    left, right = 1, len(arr)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid == k:\n            return arr[mid-1]\n        elif mid < k:\n            left = mid + 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if not isinstance(arr, list) or not arr:\n        raise ValueError(\"Input must be a non-empty list\")\n    n = len(arr)\n    if k < 1 or k > n:\n        raise ValueError(\"k must be between 1 and the length of the array\")\n\n    # Find the median of the first, middle, and last elements\n    mid = n // 2\n    if n % 2 == 0:\n        median = (arr[mid - 1] + arr[mid]) / 2\n    else:\n        median = arr[mid]\n\n    # Find the index of the median\n    index = bisect_left(arr, median)\n\n    # Check if the kth element is in the first half or second half\n    if index == k - 1:\n        return arr[index]\n    elif index < k - 1:\n        return kth_element(arr[index + 1:], k - index - 1)\n    else:\n        return kth_element(arr[:index], k)\n\nfrom bisect import bisect_left"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n\n    left, right = 1, len(arr)\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k <= 0 or k > n:\n        return None\n    if k == 1:\n        return arr[0]\n    return kth_element(arr[1:], k - 1)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n\n    Args:\n        word (str): A snake case string.\n\n    Returns:\n        str: A camel case string.\n    '''\n\n    # Split the word into words\n    words = word.split('_')\n\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n\n    # Join the words with hyphens\n    camel_case = '-'.join(words)\n\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_word = words[0]\n    for i in range(1, len(words)):\n        camel_word += words[i].capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].lower(), word[1:]])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Remove spaces and convert the rest to uppercase\n    camel_case = word.replace(\" \", \"\").upper()\n    # Convert the first letter to lowercase and add the rest of the words\n    camel_case = camel_case[0].lower() + camel_case[1:]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_word = []\n    for i in range(len(word)):\n        if i == 0:\n            camel_case_word.append(word[i].upper())\n        elif word[i] == '_':\n            continue\n        else:\n            camel_case_word.append(word[i].lower())\n    return ''.join(camel_case_word)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        else:\n            camel_word += word[i].capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_letter = True\n    camel_case = ''\n    for letter in word:\n        if letter.isupper():\n            if first_letter:\n                first_letter = False\n            else:\n                camel_case += '_'\n        camel_case += letter.lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = ''\n    prev_char = ''\n    for char in word:\n        if char.isupper() and prev_char.islower():\n            camel += '_'\n        camel += char.lower()\n        prev_char = char\n    return camel"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if word[i] == \"_\":\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case_word = words[0].lower()\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    return camel_case_word"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 1:\n        return n\n    else:\n        return (n + eulerian_num(n - 1, m - 1)) % m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Base case\n    if m == 1:\n        return n\n    \n    # Recursive case\n    return eulerian_num(n + 1, m) - eulerian_num(n, m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the Eulerian number a(n, m) as 0\n    a = 0\n\n    # Loop through all possible values of n and m\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            # If the value of n is greater than m, then the Eulerian number is 0\n            if i > m:\n                a = 0\n                break\n            # If the value of n is less than or equal to m, then the Eulerian number is 1\n            a = 1\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first row of the matrix with 1\n    row1 = [1] * n\n    # Initialize a variable to keep track of the number of cycles\n    cycles = 0\n    # Create a 2D matrix to store the number of paths for each cycle\n    paths = [[0] * m for i in range(n)]\n    # Iterate over all possible paths of length n in the matrix\n    for i in range(n):\n        # Iterate over all possible paths of length m in the matrix\n        for j in range(m):\n            # If the current path is the same as the previous path, increment the number of cycles\n            if paths[i][j] == paths[i-1][j]:\n                cycles += 1\n                # If the current path is different from the previous path, increment the number of paths for the current cycle\n                if paths[i][j] == 0:\n                    paths[i][j] = 1\n                else:\n                    paths[i][j] += 1\n            # If the current path is different from the previous path, reset the number of paths for the current cycle\n            elif paths[i][j]!= paths[i-1][j]:\n                paths[i][j] = 1\n    # Calculate the value of the Eulerian number a(n, m)\n    a = sum([row1[i] * paths[i][m-1] for i in range(n)])\n    # Return the Eulerian number a(n, m) and the number of cycles\n    return a, cycles"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the matrix and the values of a(0, 0), a(1, 0), a(2, 0)\n    matrix = [[0 for j in range(m + 1)] for i in range(n + 1)]\n    matrix[0][0], matrix[1][0], matrix[2][0] = 1, 1, 1\n    # Calculate the remaining values of a(n, m)\n    for i in range(3, n + 1):\n        for j in range(1, m + 1):\n            if i % 2 == 0:\n                matrix[i][j] = matrix[i - 1][j] + matrix[i - 1][j - 1]\n            else:\n                matrix[i][j] = matrix[i - 1][j] + matrix[i - 1][j - 1] + matrix[i - 2][j]\n    return matrix[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function finds the Eulerian number a(n, m).\n\n    Args:\n    n (int): number of vertices in a graph.\n    m (int): number of edges in a graph.\n\n    Returns:\n    int: the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize the adjacency matrix for the graph\n    adj_matrix = [[0] * n for _ in range(n)]\n\n    # Fill the adjacency matrix with edges\n    for i in range(m):\n        u, v = map(int, input().split())\n        adj_matrix[u - 1][v - 1] = 1\n        adj_matrix[v - 1][u - 1] = 1\n\n    # Find the longest path in the graph using Floyd-Warshall algorithm\n    dist = [[0] * n for _ in range(n)]\n    prev = [[0] * n for _ in range(n)]\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n                if dist[i][j] == dist[i][k] + dist[k][j]:\n                    prev[i][j] = k\n\n    # Find the Eulerian number a(n, m)\n    euler_num = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if dist[i][j] == n - 1:\n                euler_num += 1\n\n    return euler_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Define a recursive function to calculate a(n, m)\n    def a(n, m, a_n_1, a_m_1):\n        if n == 0:\n            return 0\n        elif n == 1:\n            if m == 0:\n                return 1\n            elif m == 1:\n                return a_n_1 + a_m_1\n            else:\n                return a(n-1, m-1, a_n_1, a_m_1)\n        else:\n            if m == 0:\n                return a(n-1, m, a_n_1, a_m_1)\n            elif m == 1:\n                return a(n-1, m-1, a_n_1, a_m_1)\n            else:\n                return a(n-1, m-1, a_n_1, a_m_1) + a(n-1, m, a_n_1, a_m_1)\n\n    # Call the recursive function to calculate a(n, m)\n    return a(n, m, 1, 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    a = 0\n    b = 1\n    c = 1\n\n    # Loop until a(n, m) is greater than or equal to n^m\n    while a < n ** m:\n        # Update the values of a, b, and c\n        a = b + c\n\n        # Update b and c\n        b = b + 2 * c\n\n        # Update c\n        c += 1\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the value of a(0, 0)\n    a = 1\n    \n    # Initialize the value of a(n, m)\n    for i in range(n):\n        a = (a * (m - i) // (i + 1))\n    \n    # Return the value of a(n, m)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the matrix and the sum\n    matrix = [[0 for j in range(n+1)] for i in range(m+1)]\n    sum = 0\n\n    # Fill the matrix with the required values\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            matrix[i][j] = min(matrix[i-1][j]+1, matrix[i][j-1]+1)\n\n    # Calculate the sum of the matrix elements\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            sum += matrix[i][j]\n\n    return sum"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(input_list):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            if i == True:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, bool) and i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) is bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Append test_list to test_tup\n    test_tup = test_tup + test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n\n    # Create a new list and append the elements of the test_list to it.\n    new_list = test_list[:]\n\n    # Append the elements of the test_tup to the new_list.\n    new_list.extend(test_tup)\n\n    # Return the new_list.\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the given list to the given tuple\n    test_tup = test_tup + test_list\n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # create a new list to hold the added elements\n    new_list = []\n\n    # iterate through the tuples\n    for i in test_tup:\n        # convert the tuple to a list and append it to the new list\n        new_list.append(list(i))\n\n    # iterate through the list of lists and append the given list to each list\n    for j in test_list:\n        # create a new list to hold the appended elements\n        new_list_j = []\n        # iterate through the list of elements and append them to the new list\n        for k in j:\n            new_list_j.append(k)\n        # append the new list to the original list\n        new_list.append(new_list_j)\n\n    # return the new list of lists\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_list + test_tup\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the lists to tuples\n    test_tup = tuple(test_list)\n    # Append the lists to the tuples\n    test_tup = test_tup + tuple(test_list)\n    # Convert the tuples back to lists\n    final_list = list(test_tup)\n    return final_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Create a min heap of the three input lists\n    min_heap = [min(num1[i], num2[i], num3[i]) for i in range(len(num1))]\n\n    # Extract the elements from the min heap and append them to a new list\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        elif heapq.heappop(num2) < heapq.heappop(num3):\n            heapq.heappush(merged_list, heapq.heappop(num2))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num3))\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into one\n    combined_list = num1 + num2 + num3\n    # Convert the combined list to a set\n    combined_set = set(combined_list)\n    # Convert the set back to a list and sort it\n    sorted_list = sorted(list(combined_set))\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 and num2 and num3:\n        if num1[0] <= num2[0]:\n            if num1[0] <= num3[0]:\n                result.append(heapq.heappop(num1))\n            else:\n                result.append(heapq.heappop(num3))\n        else:\n            if num2[0] <= num3[0]:\n                result.append(heapq.heappop(num2))\n            else:\n                result.append(heapq.heappop(num3))\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap1 = []\n    heap2 = []\n    heap3 = []\n\n    for num in num1:\n        heapq.heappush(heap1, num)\n\n    for num in num2:\n        heapq.heappush(heap2, num)\n\n    for num in num3:\n        heapq.heappush(heap3, num)\n\n    result = []\n    while heap1 and heap2 and heap3:\n        if heapq.heappop(heap1) < heapq.heappop(heap2):\n            result.append(heapq.heappop(heap1))\n        elif heapq.heappop(heap2) < heapq.heappop(heap3):\n            result.append(heapq.heappop(heap2))\n        else:\n            result.append(heapq.heappop(heap3))\n\n    result += heap1 + heap2 + heap3\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # create a min heap to store the minimum values\n    min_heap = []\n    for num in [num1, num2, num3]:\n        # add each number to the heap\n        heapq.heappush(min_heap, num)\n    \n    # merge the numbers from the heaps\n    merged_list = []\n    while min_heap:\n        # add the minimum value from each heap to the merged list\n        merged_list.append(heapq.heappop(min_heap))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    combined_list = num1 + num2 + num3\n    # Sort the combined list in ascending order\n    sorted_list = sorted(combined_list)\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists\n    merged_list = []\n    i, j, k = 0, 0, 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    merged_list += num3[k:]\n\n    # Sort the merged list\n    heapq.heapify(merged_list)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # combine three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # sort the merged list in ascending order\n    merged_list.sort()\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a list containing all three input lists\n    merged_list = num1 + num2 + num3\n    # convert the list into a min heap\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n    # extract the minimum element from the heap until there is only one element left in the heap\n    sorted_list = []\n    while len(min_heap) > 1:\n        sorted_list.append(heapq.heappop(min_heap))\n    # append the remaining element to the sorted list\n    sorted_list.append(heapq.heappop(min_heap))\n    # reverse the sorted list to get it in descending order\n    sorted_list.reverse()\n    # return the sorted list\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert binary string to integer\n    num = int(s, 2)\n    # Initialize odd counter\n    odd_count = 0\n    # Rotate the binary string n times\n    for i in range(n):\n        # Convert binary string to integer\n        num = int(num, 2)\n        # Find the least significant bit of the binary string\n        least_significant_bit = bin(num & (-num)).split('b')[1][0]\n        # If the least significant bit is 1, increment the odd counter\n        if least_significant_bit == '1':\n            odd_count += 1\n        # Shift the binary string to the right by 1 bit\n        num = (num >> 1) & 0x7FFFFFFF\n    # Return the odd count\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def odd_count(s, n):\n        '''\n        Helper function to count the number of odd values in the binary string s.\n        '''\n        count = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                count += 1\n        return count\n\n    def rotate(s, n):\n        '''\n        Helper function to rotate the binary string s n times.\n        '''\n        return s[-n:] + s[:-n]\n\n    # Initialize the number of odd values and the rotated binary string\n    count = odd_count(s, n)\n    rotated_s = rotate(s, n)\n\n    # Count the number of odd values in the rotated binary string\n    rotated_count = odd_count(rotated_s, n)\n\n    # Return the difference between the two counts as the result\n    return rotated_count - count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    result = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if s.count('1') % 2 == 1:\n            result += 1\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initializing the count variable to 0\n    count = 0\n    # initializing the length of the string s\n    length = len(s)\n    # initializing the rotated string as empty string\n    rotated_str = \"\"\n    # iterating the given number of times\n    for i in range(n):\n        # rotating the binary string by 1 bit\n        rotated_str += s[-1]\n        # shifting the binary string by 1 bit\n        s = s[:-1]\n    # iterating through the rotated string\n    for i in range(length):\n        # if the current character is odd, increment the count variable\n        if s[i] % 2 == 1:\n            count += 1\n    # returning the count variable\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s.zfill(8) # pad the binary string with zeros if it is less than 8 characters long\n    l = len(s)\n    k = n % l\n    s = s[k:] + s[:k] # rotate the binary string k times\n    odds = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            odds += 1\n    return odds"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s)!= n:\n        print(\"Error: String length should be equal to the rotation factor.\")\n    else:\n        count = 0\n        for i in range(n):\n            temp = s[i:] + s[:i]\n            count += temp.count(\"1\")\n        return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the binary string to a list of binary digits\n    digits = [int(d) for d in s]\n    # Create an empty list to store the rotated digits\n    rotated = []\n    # Rotate the digits the given number of times\n    for i in range(n):\n        rotated.append(digits[-1])\n        digits = digits[:-1]\n    # Count the number of odd digits in the rotated list\n    count = 0\n    for d in rotated:\n        if d % 2 == 1:\n            count += 1\n    # Return the count of odd digits\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert binary string to list of characters\n    s = list(s)\n    # Find the length of the binary string\n    n = len(s)\n    # Initialize the count to zero\n    count = 0\n    # Loop through the list of characters\n    for i in range(n):\n        # If the current character is odd, increment the count\n        if int(s[i]) % 2 == 1:\n            count += 1\n        # Rotate the list of characters by one position to the left\n        s.insert(0,s.pop())\n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0: \n        return 0\n\n    length = len(s)\n    if n >= length: \n        return 0\n\n    count = 0\n    i = 0\n    while i < length: \n        if s[i] == '1': \n            count += 1\n        i = (i + n) % length\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #count number of odd numbers\n    count = 0\n    #convert binary string to list of characters\n    arr = list(s)\n    #rotate binary string by n times\n    arr = arr[n:] + arr[:n]\n    #convert list of characters back to binary string\n    odd_s = ''.join(arr)\n    #iterate over binary string and count odd numbers\n    for i in odd_s:\n        if int(i) % 2 == 1:\n            count += 1\n    #return count of odd numbers\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if i!= j:\n                for k in range(len(nestedlist[j])):\n                    if nestedlist[i][k] in nestedlist[j][k:]:\n                        common.append(nestedlist[i][k])\n                        break\n                else:\n                    continue\n                break\n            else:\n                continue\n        else:\n            continue\n        break\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n\n    # Loop through each list in the nested list\n    for sublist in nestedlist:\n\n        # Loop through each element in the list\n        for element in sublist:\n\n            # If the element is already in the set, add it to the common elements set\n            if element in common_elements:\n                common_elements.add(element)\n            # If the element is not in the set, add it to the set\n            else:\n                common_elements.add(element)\n\n    # Return the common elements set\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for lst in nestedlist:\n        for elem in lst:\n            if elem not in common and elem not in lst:\n                common.append(elem)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Convert the list to a set to remove any duplicates\n    set_list = set(nestedlist)\n\n    # Initialize a set to store common elements\n    common_set = set()\n\n    # Loop through each list in the nested list\n    for sublist in nestedlist:\n        # Loop through each element in the sublist and check if it exists in the common set\n        for element in sublist:\n            if element in common_set:\n                common_set.remove(element)\n            else:\n                common_set.add(element)\n\n    # Convert the common set back to a list and return it\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    This function takes a nested list as input and returns a list of common elements.\n    \"\"\"\n    # create a set of common elements for all nested lists\n    common_elements = set()\n    for sublist in nestedlist:\n        common_elements.update(set(sublist))\n\n    # convert the set to a list\n    common_list = list(common_elements)\n\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n\n    # Check if the nested list is valid\n    if not isinstance(nestedlist, list) or not all(isinstance(item, list) for item in nestedlist):\n        raise ValueError(\"The input must be a list of lists.\")\n\n    # Initialize an empty set to store the common elements\n    common = set()\n\n    # Iterate over the nested list\n    for sublist in nestedlist:\n        # Iterate over the sublist\n        for item in sublist:\n            # Add the item to the set if it's not already in it\n            if item not in common:\n                common.add(item)\n\n    # Convert the set back to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_set = set()\n    for i in nestedlist:\n        common_set.update(set(i))\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n\n    Args:\n        nestedlist (list): A list of lists, where each inner list contains elements that need to be compared for common elements.\n\n    Returns:\n        list: A list containing all the common elements found in the input nested lists.\n    \"\"\"\n    common = []\n    for innerlist in nestedlist:\n        for element in innerlist:\n            if element in common:\n                continue\n            else:\n                common.append(element)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty set to store common elements\n    common = set()\n    # iterate over each list in the nested list\n    for item in nestedlist:\n        # iterate over each item in the list\n        for subitem in item:\n            # check if the subitem is in the common set\n            if subitem in common:\n                # if it is, add the list to a new set and exit the nested loop\n                newset = set(item)\n                common = common.union(newset)\n                break\n            # if not, add it to the common set\n            common.add(subitem)\n    # return the common set as a list\n    return list(common)"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Parameters:\n    text (str): the string to check\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n\n    Raises:\n    TypeError: if the input is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Check if the first character of the string is a negative sign\n    if text[0] == '-':\n        # Remove the negative sign from the string\n        text = text[1:]\n        # Check if the string contains only digits\n        if text.isdigit():\n            return True\n        else:\n            return False\n    else:\n        # Check if the string contains only digits\n        if text.isdigit():\n            return True\n        else:\n            return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if dict:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict_ in list1:\n        if not dict_:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Loop through each dictionary in the list\n    for item in list1:\n        # Check if the dictionary is empty or not\n        if len(item)!= 0:\n            # If the dictionary is not empty, return False\n            return False\n    # If all dictionaries are empty, return True\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in list1:\n        if i:\n            empty = False\n            break\n    return empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for dic in list1:\n        if not dic:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    This function takes in a tuple of positive integers and returns a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[0] + (tuple_to_int(nums[1:]) << 1)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list of integers\n    int_list = [int(num) for num in nums]\n    # Convert the list to a single integer\n    return sum(int_list)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for item in test_list:\n        if isinstance(item, (int, float)):\n            result_list.append(item)\n        elif isinstance(item, list):\n            for subitem in item:\n                if isinstance(subitem, (int, float)):\n                    result_list.append(subitem)\n    return result_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    # loop through each element in the list\n    for element in test_list:\n\n        # try to convert the element to float\n        try:\n            element = float(element)\n\n            # if the conversion was successful, print the original element and its float value\n            print(element, type(element))\n\n        # if the conversion was not successful, print an error message\n        except ValueError:\n            print(\"Error:\", element, \"is not convertible to a float.\")"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            try:\n                float(item)\n            except ValueError:\n                try:\n                    int(item)\n                    row[row.index(item)] = float(item)\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    test_list[i][j] = None\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, str)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Loop through the array and count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Loop through the array again and find the element that appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize two variables to keep track of the current element and its count\n    curr_elem = arr[0]\n    count = 1\n    \n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # If we encounter the same element, increment its count\n        if arr[i] == curr_elem:\n            count += 1\n        # If we encounter a different element, store it and reset its count\n        else:\n            curr_elem = arr[i]\n            count = 1\n            \n    # If we have iterated through the entire array and haven't found a duplicate, return None\n    if count == 1:\n        return None\n    # Otherwise, return the current element that appears only once\n    else:\n        return curr_elem"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Iterate through the dictionary to find the element that appears only once\n    for num in freq:\n        if freq[num] == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return None\n    for num in arr:\n        if arr.count(num) == 1:\n            return num\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == unique:\n            return unique\n        elif arr[i]!= unique:\n            unique = arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    # initialize variables for current and previous index\n    i = 0\n    prev_index = -1\n\n    # loop through the array\n    while i < len(arr):\n        # if the current element is not equal to the previous element\n        if arr[i]!= arr[prev_index]:\n            # set the previous index to the current index\n            prev_index = i\n        # increment the current index\n        i += 1\n\n    # return the element at the previous index\n    return arr[prev_index]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    # loop through the array and update the frequency of each element in the dictionary\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    # loop through the dictionary and find the element with frequency 1\n    for i in freq:\n        if freq[i] == 1:\n            return i\n    # if no element is found with frequency 1, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    i = 0\n    while i < n - 1:\n        if arr[i] == arr[i+1]:\n            i += 1\n        else:\n            return arr[i]\n        i += 1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the element that appears only once in the array.\n\n    Parameters:\n    arr: A sorted array of integers.\n\n    Returns:\n    The element that appears only once in the array.\n    \"\"\"\n\n    # Initialize a dictionary to store the elements as keys and their frequency as values\n    freq = {}\n\n    # Iterate over the array and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Find the element with the highest frequency\n    max_freq = 0\n    max_elem = None\n    for elem, freq in freq.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples as input and returns the maximum absolute product between numbers in pairs of tuples within the list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair = (list1[i], list1[j])\n            if pair[0] < 0 and pair[1] > 0:\n                product = abs(pair[0]*pair[1])\n                if product > max_product:\n                    max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_prod = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if (list1[i][0] * list1[j][0]) > max_prod:\n                max_prod = abs(list1[i][0] * list1[j][0])\n            if (list1[i][1] * list1[j][1]) > max_prod:\n                max_prod = abs(list1[i][1] * list1[j][1])\n    return max_prod"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = 0\n    max_product = (0,0)\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            # Calculate the absolute value of the product of the two tuples\n            product_abs = abs(list1[i][0] * list1[j][1])\n            if product_abs > max_abs_product:\n                max_abs_product = product_abs\n                max_product = (list1[i][0],list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    max_tuple = None\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0])\n            if product > max_product:\n                max_product = product\n                max_tuple = (list1[i], list1[j])\n    \n    return max_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # initialize variables to store the minimum and maximum values in the list\n    min_val = list1[0]\n    max_val = list1[0]\n\n    # iterate through the list and update the minimum and maximum values\n    for num in list1:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n\n    # initialize variables to store the maximum absolute product and the corresponding pair of tuples\n    max_abs_product = 0\n    max_pair = None\n\n    # iterate through the list again and check for pairs of values that have a maximum absolute product\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the absolute product of the values in the pair\n            pair_product = abs(list1[i] * list1[j])\n\n            # check if the pair is a maximum and update the variables if necessary\n            if pair_product > max_abs_product:\n                max_abs_product = pair_product\n                max_pair = (list1[i], list1[j])\n\n    # return the maximum absolute product and the pair of tuples that produced it\n    return max_abs_product, max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[j][1]) > max_product:\n                max_product = abs(list1[i][0]*list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i!= 1 and i!= limit:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\nprint(amicable_numbers_sum(2000000))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    '''\n    Sum all amicable numbers from 1 to a specified number.\n    '''\n    a_sum = 0\n    for a in range(1, limit + 1):\n        if is_prime(a) and is_prime(limit - a):\n            a_sum += a\n    return a_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_prime(i) and is_prime(i + 2):\n            amicable_numbers.append(i + 2)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n    # Loop through numbers from 1 to limit\n    for num in range(1, limit+1):\n        # Check if the number is amicable to any number in the range\n        for other_num in range(1, limit+1):\n            if num!= other_num and num % other_num == 0 and other_num % num == 0:\n                # Add the amicable numbers to the sum\n                sum += num + other_num\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit):\n        # Check if the number is an amicable number\n        if num in amicable_numbers:\n            continue\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                break\n        else:\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = set()\n    for num in range(1, limit):\n        if num == sum_of_divisors(num):\n            amicable_numbers.add(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_prime(i):\n            for j in range(1, limit + 1):\n                if is_prime(j):\n                    if i + j == limit:\n                        amicable_numbers.append(i)\n                        amicable_numbers.append(j)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_amicable(num):\n    # check if num is a palindrome\n    if str(num) == str(num)[::-1]:\n        # check if num is a proper amicable number\n        if num < 12000:\n            d = 0\n            for i in range(1, num//2 + 1):\n                if num % i == 0:\n                    d += i\n            if d == num:\n                return True\n    return False\n\ndef sum_amicable_numbers(limit):\n    sum = 0\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            sum += num\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a list to store the amicable numbers\n    amicable_numbers = []\n    # Loop through all numbers from 1 to limit\n    for i in range(1, limit+1):\n        # Check if the number is amicable\n        if i!= 1 and is_amicable(i):\n            # Add the amicable number to the list\n            amicable_numbers.append(i)\n    # Calculate the sum of the amicable numbers\n    amicable_sum = sum(amicable_numbers)\n    # Return the sum\n    return amicable_sum\n\ndef is_amicable(number):\n    '''\n    Check if a number is amicable.\n    '''\n    # Calculate the sum of the proper divisors of the number\n    sum_divisors = sum([j for j in range(1, int(number**0.5)+1) if number % j == 0])\n    # Check if the sum is equal to the original number\n    return sum_divisors == number"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(2, limit):\n        j = i\n        while j < limit:\n            if i % j == 0:\n                break\n            j += 1\n        else:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # Create the complex number\n    z = a + b * 1j\n    \n    # Calculate the angle using the arccosine function\n    angle = cmath.acos(z.imag / abs(z))\n    \n    # Convert the angle to degrees and return it\n    return cmath.degrees(angle)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = round(angle.real, 3)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def angle_complex(a, b):\n    \"\"\"\n    Compute the angle of a complex number.\n\n    Parameters:\n    a: float\n        The real part of the complex number.\n    b: float\n        The imaginary part of the complex number.\n\n    Returns:\n    float\n        The angle in radians.\n    \"\"\"\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # calculate the magnitude of the complex number\n    mag = cmath.sqrt(a*a + b*b)\n\n    # calculate the phase of the complex number\n    phase = cmath.phase(a + b*1j)/mag\n\n    # return the angle in degrees\n    return cmath.phase(a + b*1j)*180/cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    c = a + bj * b\n    angle = cmath.phase(c) * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_radian = cmath.phase(a + b*1j)\n    angle_degree = cmath.phase(a + b*1j) / 2 / cmath.pi * 360\n    angle_gradian = cmath.phase(a + b*1j) / 2 / cmath.pi * 400\n    angle_turns = cmath.phase(a + b*1j) / 2 / cmath.pi * 6\n    \n    return angle_radian, angle_degree, angle_gradian, angle_turns"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    c = a + bj*b\n    angle = cmath.phase(c)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    # Initialize the count of 0s and 1s\n    zero_count = 0\n    one_count = 0\n\n    # Iterate over the string and update the count of 0s and 1s\n    for char in string:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n\n    # Initialize the maximum difference\n    max_diff = 0\n\n    # Iterate over all possible substrings of the string\n    for i in range(len(string)):\n        for j in range(i, len(string) + 1):\n            # Calculate the difference between the number of 0s and number of 1s in the current substring\n            diff = abs(zero_count - one_count)\n\n            # Update the maximum difference if this is greater than the current maximum\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\n    # Initialize variables for length and count of 0s and 1s\n    length = 0\n    count_0 = 0\n    count_1 = 0\n\n    # Loop through each character in the binary string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            count_0 += 1\n        # If the character is a 1, increment the count of 1s\n        elif char == '1':\n            count_1 += 1\n        # If the character is not a 0 or 1, reset the count of 0s and 1s to 0\n        else:\n            count_0 = 0\n            count_1 = 0\n\n        # Update the length if the count of 0s is greater than the count of 1s\n        if count_0 > count_1:\n            length = max(length, count_0 - count_1)\n\n    return length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(1, n):\n        diff = 0\n        j = i\n        while j < n and string[j] == string[i]:\n            j += 1\n        diff = j - i\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables to store the length of the longest sub-string\n    max_diff = 0\n    curr_diff = 0\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # If the current character is a 0, increment the number of 0s and decrement the number of 1s\n        if string[i] == '0':\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        # If the current character is a 1, reset the number of 0s and increment the number of 1s\n        if string[i] == '1':\n            curr_diff = 0\n        # Update the maximum difference if the current difference is greater than the previous maximum\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    length = len(string)\n    max_diff = 0\n    \n    for i in range(length):\n        for j in range(i+1, length+1):\n            diff = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    diff += 1\n                else:\n                    diff -= 1\n            max_diff = max(max_diff, diff)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    length = len(string)\n    for i in range(length):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, length):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    dp = [[0] * 2 for _ in range(n)]\n\n    for i in range(n):\n        dp[i][0] = dp[i - 1][0]\n        dp[i][1] = dp[i - 1][1] + 1\n\n    for i in range(1, n):\n        if string[i] == '0':\n            dp[i][0] = dp[i - 1][0]\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + 1)\n        else:\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + 1)\n            dp[i][1] = dp[i - 1][0]\n\n    max_diff = 0\n    for i in range(n - 1):\n        diff = abs(dp[i][0] - dp[i + 1][0])\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string): \n    \"\"\"\n    This function takes a binary string as input and returns the maximum difference between the number of 0s and number of 1s in any sub-string of the string.\n    \"\"\"\n    \n    # create an empty dictionary to store the count of 0s and 1s in each sub-string\n    count_dict = {}\n    \n    # loop through the string and count the number of 0s and 1s in each sub-string\n    for i in range(len(string)):\n        sub_str = string[i:i+2]\n        if sub_str in count_dict:\n            count_dict[sub_str] += 1\n        else:\n            count_dict[sub_str] = 1\n            \n    # find the maximum difference between the count of 0s and 1s in each sub-string\n    max_diff = 0\n    for i in range(1, len(string), 2):\n        for j in range(i+1, len(string)+1, 2):\n            if count_dict[string[i:j]] > max_diff:\n                max_diff = count_dict[string[i:j]]\n                \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_diff = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            if count == 0:\n                count = 1\n            else:\n                max_diff = max(max_diff, count)\n                count = 0\n\n    if count > 0:\n        max_diff = max(max_diff, count)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        diff = 0\n        for j in range(i+1, n+1):\n            if string[i] == '0' and string[j] == '1':\n                diff += 1\n            elif string[i] == '1' and string[j] == '0':\n                diff -= 1\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, b + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Calculate the sum of common divisors of a and b\n    sum_cd = 0\n    i = 1\n    while i <= a:\n        if a % i == 0 and b % i == 0:\n            sum_cd += i\n        i += 1\n\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    def gcd(a, b):\n        \"\"\"\n        Write a python function to find the greatest common divisor of two given numbers.\n        \"\"\"\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def lcm(a, b):\n        \"\"\"\n        Write a python function to find the least common multiple of two given numbers.\n        \"\"\"\n        return (a * b) // gcd(a, b)\n\n    def sum_of_common_divisors(a, b):\n        \"\"\"\n        Write a python function to find the sum of common divisors of two given numbers.\n        \"\"\"\n        result = 0\n        for i in range(min(a, b), max(a, b) + 1):\n            if lcm(i, a) % b == 0 or lcm(i, b) % a == 0:\n                result += i\n        return result\n\n    result = sum_of_common_divisors(a, b)\n    print(f\"The sum of common divisors of {a} and {b} is: {result}\")"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n\n    for i in range(1, b + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    return sum(divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Calculate the sum of common divisors\n    div_sum = 0\n    # Find the smallest common divisor of a and b\n    smallest_div = min(a, b)\n    # Iterate through all divisors from 1 to smallest_div\n    for i in range(1, smallest_div + 1):\n        # Check if i is a common divisor of a and b\n        if a % i == 0 and b % i == 0:\n            # Add i to the sum\n            div_sum += i\n    # Return the sum of common divisors\n    return div_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Finding the common divisors of the two numbers\n    common_divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    # Calculating the sum of the common divisors\n    sum_of_common = sum(common_divisors)\n\n    return sum_of_common\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of common divisors.\n\n    Parameters:\n        a (int): First number.\n        b (int): Second number.\n\n    Returns:\n        (int): The sum of common divisors of a and b.\n    \"\"\"\n    # Define a function to check if two numbers are divisible by each other\n    def is_divisible(num, divisor):\n        return num % divisor == 0\n\n    # Define a function to find the common divisors of two numbers\n    def find_common_divisors(a, b):\n        divisors = []\n        for i in range(1, a + 1):\n            if is_divisible(i, a) and is_divisible(i, b):\n                divisors.append(i)\n        return divisors\n\n    # Call the find_common_divisors function to find the common divisors of a and b\n    common_divisors = find_common_divisors(a, b)\n\n    # Sum all the common divisors of a and b\n    sum_of_common_divisors = sum(common_divisors)\n\n    return sum_of_common_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = set()\n    for i in range(1, a+1):\n        if a%i == 0 and b%i == 0:\n            divisors.add(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    def common_divisor(a, b):\n        \"\"\"\n        Helper function to find the common divisor of two numbers.\n        \"\"\"\n        while b!= 0:\n            temp = a % b\n            a = b\n            b = temp\n        return a\n\n    def sum_of_common_divisors(a, b):\n        \"\"\"\n        Helper function to find the sum of common divisors of two given numbers.\n        \"\"\"\n        divisor_sum = 0\n        for i in range(1, min(a, b) + 1):\n            if common_divisor(a, i) == common_divisor(b, i):\n                divisor_sum += i\n        return divisor_sum\n\n    return sum_of_common_divisors(a, b)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        carry = x & y\n        result = result ^ carry\n        x = x ^ y\n        y = carry << 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = x * y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = x * y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    This function takes two integers x and y as input and returns their product.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words longer than n characters in the given list of words.\n    \"\"\"\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n    magic_sum = 0\n\n    for i in range(n):\n        for j in range(n):\n            magic_sum += my_matrix[i][j]\n    \n    if magic_sum == n * (n * (n + 1) // 2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    n = len(my_matrix)\n    if n**2!= len(my_matrix[0]):\n        return False\n    \n    # Check if all the rows have the same sum\n    row_sums = [sum(row) for row in my_matrix]\n    if row_sums!= [0]*n:\n        return False\n    \n    # Check if all the columns have the same sum\n    col_sums = [sum(my_matrix[i]) for i in range(n)]\n    if col_sums!= [0]*n:\n        return False\n    \n    # Check if all the diagonals have the same sum\n    diag_sum = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n    if diag_sum!= 0:\n        return False\n    \n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j] == 0:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    # Initialize the magic square\n    magic_square = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n\n    # Check the rows of the magic square\n    for i in range(3):\n        if my_matrix[i] == magic_square:\n            return True\n\n    # Check the columns of the magic square\n    for i in range(3):\n        if my_matrix[0][i] == magic_square[0][0] and \\\n           my_matrix[1][i] == magic_square[1][1] and \\\n           my_matrix[2][i] == magic_square[2][2]:\n            return True\n\n    # Check the diagonals of the magic square\n    for i in range(3):\n        if my_matrix[i][i] == magic_square[0][0] and \\\n           my_matrix[i][2] == magic_square[2][0]:\n            return True\n\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # check if the matrix contains only integers\n    for row in my_matrix:\n        for elem in row:\n            if not isinstance(elem, int):\n                return False\n    \n    # check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= i+1 or my_matrix[i][len(my_matrix[i])-i-1]!= i+1:\n            return False\n    \n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if i!= j and my_matrix[i][j]!= i+1 and my_matrix[j][i]!= i+1:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_square = True\n    for i in range(n):\n        for j in range(n):\n            if sum(my_matrix[i][k]**2 + my_matrix[k][j]**2 for k in range(n))!= my_matrix[i][j]:\n                magic_square = False\n                break\n        if not magic_square:\n            break\n    return magic_square"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function takes a matrix as input and checks whether it is a magic square or not.\n    A magic square is a square matrix in which the sum of the values of each row, column, and diagonal is the same.\n    '''\n\n    # Check if the input matrix is a square matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    if rows!= cols:\n        return \"The input matrix is not a square matrix.\"\n\n    # Calculate the sum of each row, column, and diagonal\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i][j] for i in range(rows)) for j in range(cols)]\n    diag_sum_1 = sum(my_matrix[i][i] for i in range(rows))\n    diag_sum_2 = sum(my_matrix[i][rows-i-1] for i in range(rows))\n\n    # Compare the sum of each row, column, and diagonal to determine if the matrix is a magic square\n    if row_sums == col_sums and col_sums == diag_sum_1 and diag_sum_1 == diag_sum_2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n\n    # Check if the input matrix is a 3x3 array\n    if len(my_matrix)!= 3:\n        return False\n    elif len(my_matrix[0])!= 3:\n        return False\n\n    # Check if all the rows have the same sum\n    row_sums = [sum(row) for row in my_matrix]\n    if row_sums!= [15, 16, 17]:\n        return False\n\n    # Check if all the columns have the same sum\n    col_sums = [sum(my_matrix[i][j] for i in range(len(my_matrix))) for j in range(len(my_matrix[0]))]\n    if col_sums!= [15, 16, 17]:\n        return False\n\n    # Check if all the sub-matrices have the same sum\n    sub_sums = [[sum(my_matrix[i][j] for i in range(j, len(my_matrix)) if i!= j) for j in range(len(my_matrix[0]))] for i in range(len(my_matrix) - 1)]\n    if sub_sums!= [[15, 16, 17], [16, 17, 18], [17, 18, 19]]:\n        return False\n\n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function takes a matrix as input and returns True if it is a magic square,\n    and False otherwise. A magic square is a square matrix where each row, column, and\n    diagonal sum to the same value.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix is a square\n    if n!= len(my_matrix[0]):\n        return False\n    # Check if each row, column, and diagonal sum to the same value\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j] for j in range(n))\n        diag_sum = sum(my_matrix[k][k] for k in range(n))\n        if row_sum!= col_sum!= diag_sum:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # Check if all elements in the matrix are distinct\n    if len(set(sum(row) for row in my_matrix))!= len(my_matrix) ** 2:\n        return False\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= j + 1 and my_matrix[i][j]!= i + 1:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    # Initialize a variable to store the sum of each row and column\n    row_sum = [sum(row) for row in my_matrix]\n    col_sum = [sum(row[i] for row in my_matrix) for i in range(len(my_matrix[0]))]\n\n    # Check if the row and column sums match up\n    if row_sum == col_sum:\n        # Initialize a variable to store the sum of the diagonal\n        diagonal_sum = sum(row[i] for i in range(len(my_matrix)))\n\n        # Check if the diagonal sum matches up\n        if diagonal_sum == sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix[0]))):\n            # If both conditions are met, the matrix is a magic square\n            return True\n        else:\n            # If the diagonal sum doesn't match up, the matrix is not a magic square\n            return False\n    else:\n        # If the row and column sums don't match up, the matrix is not a magic square\n        return False"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Use a defaultdict to keep track of the frequency of each item\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_num = None\n    max_freq = 0\n    for num, freq in freq.items():\n        if freq > max_freq:\n            max_num = num\n            max_freq = freq\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_count = 0\n    max_num = None\n    for num, count in freq_dict.items():\n        if count > max_count:\n            max_count = count\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Use defaultdict to keep track of the frequency of each item\n    freq = defaultdict(int)\n\n    # Iterate through the list and count the frequency of each item\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_item = max(freq, key=freq.get)\n\n    # Return the item with maximum frequency\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = -1\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n\n    max_count = 0\n    max_num = None\n    for num in count_dict:\n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_count = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with the maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    for key, value in freq_dict.items():\n        if value > max_freq:\n            max_freq = value\n            max_item = key\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char.lower() in vowels:\n            new_str = char + new_str\n        else:\n            new_str = new_str + char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_vowels = \"\"\n\n    for char in str1:\n        if char in vowels:\n            reversed_vowels += char\n\n    return reversed_vowels[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = ''\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_set = set(vowels)\n    result = \"\"\n    for char in str1:\n        if char not in vowel_set:\n            result += char\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in string:\n        if char in vowels:\n            result = char + result\n        else:\n            result = result + char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    reversed_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if i not in vowel_indices:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    new_str = []\n    for char in str1:\n        if char.lower() in vowels:\n            new_str.insert(0, char)\n        else:\n            new_str.append(char)\n    return ''.join(new_str)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in string:\n        if char in vowels:\n            result = char + result\n        else:\n            result = result + char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # initialize an empty string\n    string = ''\n    # iterate over the tuple and append each element to the string\n    for item in tup1:\n        string += str(item)\n    # return the final string\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Convert a tuple to a string.\n    \n    :param tup1: A tuple.\n    :type tup1: tuple\n    :return: The string representation of the tuple.\n    :rtype: str\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return \", \".join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # initialize an empty string\n    string = ''\n    # loop through each element in the tuple\n    for element in tup1:\n        # append the element to the string\n        string += str(element)\n    # return the final string\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # Convert tuple to string using join() method\n    result = \", \".join(str(x) for x in tup1)\n    return result"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_numbers = [1]\n    for i in range(n):\n        hexagonal_numbers.append(hexagonal_numbers[-1] + hexagonal_numbers[-2])\n    return hexagonal_numbers[n-1]"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # initialize the first hexagon to 1\n    hexagon = 1\n    \n    # loop through the hexagons and return the nth one\n    for i in range(2, n+1):\n        hexagon += 6 * (n-i)\n    \n    return hexagon"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * (2 * n - 1)\n    return hex_num\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_number = n * (n+1) // 2\n    return hexagonal_number"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case for n = 1 \n    if n == 1: \n        return 1\n\n    # Initialize variables\n    prev_hex_num = 1\n    hex_num = 1\n\n    # Loop through the range from 2 to n\n    for i in range(2, n+1):\n        # Calculate the nth hexagonal number\n        hex_num = prev_hex_num + 2*prev_hex_num - 1\n\n        # Update the previous hexagonal number\n        prev_hex_num = hex_num\n\n    # Return the nth hexagonal number\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Base case\n    if n == 0:\n        return 1\n\n    # Recursive case\n    return 2 * hexagonal_num(n - 1) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize hexagonal number to zero\n    hexagonal = 0\n    \n    # Loop through each row of the triangle\n    for i in range(1, n+1):\n        # Add the number of rows to get to the nth row\n        hexagonal += 6*i\n        \n    return hexagonal"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Initialize arrays to keep track of non-zero and zero counts\n    non_zero_counts = array('i', [1] * len(nums))\n    zero_counts = array('i', [0] * len(nums))\n\n    # Iterate through the array and update the non-zero and zero counts\n    for num in nums:\n        if num == 0:\n            zero_counts[nums.index(num)] += 1\n        else:\n            non_zero_counts[nums.index(num)] += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = 0\n    for i in range(len(nums)):\n        if non_zero_counts[i]!= 0:\n            ratio += zero_counts[i] / non_zero_counts[i]\n        else:\n            ratio += 0.0  # Avoid division by zero\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)  # Convert array to integer array\n    num_zero = 0\n    num_non_zero = 0\n    \n    for num in arr:\n        if num == 0:\n            num_zero += 1\n        else:\n            num_non_zero += 1\n            \n    zero_ratio = num_zero / num_non_zero\n    \n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n            \n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = array('i')\n    ones = array('i')\n    for num in nums:\n        if num == 0:\n            zeroes.append(1)\n        else:\n            ones.append(1)\n    \n    zero_count = len(zeroes) / len(ones)\n    return zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums)) # initialize an array of zeros of the same length as the input array\n    non_zeros = array('i', [0] * len(nums)) # initialize an array of non-zeros of the same length as the input array\n    \n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(0)] += 1\n        else:\n            non_zeros[non_zeros.index(0)] += 1\n    \n    zero_count_ratio = (non_zeros[0] / zeros[0]) if (non_zeros[0]!= 0 and zeros[0]!= 0) else 0 # calculate the ratio of zeroes to non-zeroes\n    \n    return zero_count_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = sum([1 for num in nums if num == 0])\n    non_zeros = len(nums) - zeros\n    ratio = zeros / non_zeros if non_zeros!= 0 else 0\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    zero_count = arr.count(0)\n    total_count = len(arr)\n    ratio = float(zero_count) / total_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    non_zero_count = sum(arr)\n    zero_count = len(nums) - non_zero_count\n    ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Initialize variables to store zero and non-zero counts\n    zero_count = 0\n    non_zero_count = 0\n\n    # Iterate through the array of integers\n    for num in nums:\n        # If the number is zero, increment the zero count\n        if num == 0:\n            zero_count += 1\n        # If the number is not zero, increment the non-zero count\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = (zero_count / non_zero_count) * 100\n\n    # Return the ratio as a float with 2 decimal places\n    return round(ratio, 2)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_array = array('i', nums)\n    zero_count = sum(1 for num in num_array if num == 0)\n    non_zero_count = len(num_array)\n    return zero_count / non_zero_count"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    count = 0\n    while n!= 0:\n        if n % 2 == 0:\n            count += 1\n            n //= 2\n        else:\n            n -= 1\n    return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # initialize a variable to store the sum of powers of 2\n    sum_powers_of_two = 0\n    \n    # loop through the digits of the given number\n    for digit in str(n): \n        # if the digit is equal to 0, continue the loop as 0 is not a power of 2\n        if digit == '0': \n            continue \n        # if the digit is not 0, add 1 to the sum of powers of 2\n        else: \n            sum_powers_of_two += int(digit) ** 2\n    \n    # if the sum of powers of 2 is equal to the given number, then the given number can be represented as sum of non-zero powers of 2\n    if sum_powers_of_two == n: \n        return True \n    # otherwise, return False\n    else: \n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Convert the given number to binary\n    binary = bin(n)[2:]\n    # Initialize two variables, first to store the power of 2 and second to store the sum of powers of 2\n    power = 1\n    sum_of_powers_of_two = 0\n    # Iterate through the binary string\n    for digit in binary:\n        # If the digit is 1, add the power of 2 to the sum_of_powers_of_two\n        if digit == '1':\n            sum_of_powers_of_two += power\n        # If the digit is 0, increment the power of 2\n        else:\n            power <<= 1\n    # Check if the given number can be represented as sum of powers of 2 or not\n    if sum_of_powers_of_two == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to store the sum of powers of 2\n    sum_of_powers = 0\n    # Loop through all the bits of the number\n    for i in range(8):\n        # Check if the bit is 1\n        if n & (1 << i):\n            # Check if the power of 2 is not already in the sum\n            if (1 << i) not in sum_of_powers:\n                # If it is not, add it to the sum\n                sum_of_powers += (1 << i)\n    # Check if the sum of powers is equal to the original number\n    if n == sum_of_powers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # check for negative numbers and 0\n    if n < 0 or n == 0: \n        return False\n\n    # check for odd numbers\n    if n % 2!= 0: \n        return False\n\n    # initialize a boolean variable to keep track of whether the sum of powers of 2 is found or not\n    is_sum_found = False\n\n    # initialize a counter variable to keep track of the number of powers of 2 found\n    count = 0\n\n    # loop through the number of digits in the number\n    for i in range(1, int(n**0.5) + 1): \n        # check if the current digit is 0\n        if n % 10 == 0: \n            continue\n        # check if the current digit is 2\n        elif n % 10 == 2: \n            count += 1\n            # check if the sum of powers of 2 is found or not\n            if count == 1: \n                is_sum_found = True\n                break\n            # if the sum of powers of 2 is not found, reset the counter and break out of the loop\n            else: \n                count = 0\n\n    # check if the sum of powers of 2 is found or not\n    return is_sum_found"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Check if n is a power of 2 or not\n    if n & (n-1) == 0: \n        # n is a power of 2\n        return True\n    # Check if n can be represented as sum of powers of 2\n    for i in range(1, int(n**0.5)+1):\n        if n == (i*i) + (n-i*i):\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 0:\n        return False\n    count = 0\n    while n:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count % 2 == 0"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # loop through all possible powers of 2\n    for i in range(1, 32):\n        # check if the number can be represented as sum of non-zero powers of 2 by checking if the sum is a power of 2\n        if n == (2**i) + (2**i) - 1:\n            return True\n    # if no power of 2 is found, the number cannot be represented as sum of powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Calculate the sum of powers of 2\n    sum_of_powers = 0\n    while n > 0:\n        sum_of_powers += n & 1\n        n = n >> 1\n\n    # Check if the sum of powers is equal to the given number\n    return sum_of_powers == n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n\n    # Check if all bits of n are set\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    if count == 0:\n        return True\n\n    # Check if the sum of powers of 2 is a power of 2\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    if count == 1:\n        return True\n    if count == 2:\n        return n & 1 == 0\n\n    # Check if the sum of powers of 2 is a power of 4\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    if count == 3:\n        return True\n    if count == 4:\n        return n & 3 == 0\n\n    # Check if the sum of powers of 2 is a power of 8\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    if count == 7:\n        return True\n    if count == 8:\n        return n & 7 == 0\n\n    # Check if the sum of powers of 2 is a power of 16\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    if count == 15:\n        return True\n    if count == 16:\n        return n & 15 == 0\n\n    # Check if the sum of powers of 2 is a power of 32\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    if count == 31:\n        return True\n    if count == 32:\n        return n & 31 == 0\n\n    # Check if the sum of powers of 2 is a power of 64\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    if count == 63:\n        return True\n    if count == 64:\n        return n & 63 == 0\n\n    # Check if the sum of powers of 2 is a power of 128\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    if count == 127:\n        return True\n    if count == 128:\n        return n & 127 == 0\n\n    # Check if the sum of powers of 2 is a power of 256\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    if count == 255:\n        return True\n    if count == 256:\n        return n & 255 == 0\n\n    # Check if the sum of powers of 2 is a power of 512\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    if count == 511:\n        return True\n    if count == 512:\n        return n & 511 == 0\n\n    # Check if the sum of powers of 2 is a power of 1024\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    if count == 1023:\n        return True\n    if count == 1024:\n        return n & 1023 == 0\n\n    # Check if the sum of powers of 2 is a power of 2048\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    if count == 2047:\n        return True\n    if count == 2048:\n        return n & 2047 == 0\n\n    "
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # using the formula for the circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r  # 2\u03c0r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2*pi*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(set([num for sublist in test_list for num in sublist]))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n    \n    return flatten(test_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    unique_numbers = set(flat_list)\n    return unique_numbers"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for i in test_list:\n        for j in i:\n            if type(j) == int or type(j) == float:\n                result.add(j)\n    return list(result)\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Create an empty set to hold the flattened numbers\n    flattened_set = set()\n\n    # Loop through each item in the list\n    for item in test_list:\n        # If the item is a list, recursively call the function on it\n        if type(item) == list:\n            flattened_set.update(extract_singly(item))\n        # If the item is a number, add it to the set\n        elif type(item) == int or type(item) == float:\n            flattened_set.add(item)\n\n    # Return the flattened set\n    return flattened_set"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the element at i\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Reverse the pancake with respect to the first element\n        # This is achieved by swapping the first element with the maximum element\n        # and then swapping the maximum element with the element before the maximum\n        # and so on until the first element is reached\n        # This will reverse the pancake\n        pancake_start = i\n        for j in range(i+1, max_idx+1):\n            nums[pancake_start], nums[j] = nums[j], nums[pancake_start]\n            pancake_start = j\n        # Reverse the pancake with respect to the last element\n        # This is achieved by swapping the last element with the maximum element\n        # and then swapping the maximum element with the element before the maximum\n        # and so on until the last element is reached\n        # This will reverse the pancake\n        pancake_end = max_idx\n        for j in range(max_idx-1, i-1, -1):\n            nums[pancake_end], nums[j] = nums[j], nums[pancake_end]\n            pancake_end = j\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    This function sorts a list of elements using the Pancake Sort algorithm.\n    '''\n\n    # Get the length of the list\n    n = len(nums)\n\n    # Create an array of size n, where each element is set to n\n    temp = [n] * n\n\n    # Sort the list using the Pancake Sort algorithm\n    for i in range(n):\n        # Find the largest element in the unsorted part of the list\n        max_index = i\n        for j in range(i, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the largest element with the i-th element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # Move the largest element to the end of the unsorted part of the list\n        for j in range(n - 1, i, -1):\n            temp[j] = nums[j]\n        for j in range(i, n):\n            nums[j] = temp[j]\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the first i elements\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the first i element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Reverse the remaining i-1 elements\n        for j in range(i):\n            nums[j], nums[j+i] = nums[j+i], nums[j]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # Function to swap two elements in the list\n    def swap(lst, i, j):\n        lst[i], lst[j] = lst[j], lst[i]\n    \n    # Function to reverse a sublist\n    def reverse(lst, start, end):\n        while start < end:\n            swap(lst, start, end)\n            start += 1\n            end -= 1\n    \n    # Function to make a pancake\n    def make_pancake(lst, start, end):\n        while start < end:\n            swap(lst, start, end)\n            reverse(lst, start + 1, end)\n            start += 1\n            end -= 1\n    \n    # Main function to sort the list\n    def sort(lst):\n        n = len(lst)\n        # Iterate through the list using a nested loop to sort each sublist of length n-1\n        for i in range(n):\n            for j in range(n - 1):\n                if lst[j] > lst[j + 1]:\n                    make_pancake(lst, j, j + 1)\n        return lst\n    \n    # Call the main function to sort the list\n    sorted_nums = sort(nums)\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    This function takes a list of integers as input and sorts it using the pancake sort algorithm.\n    '''\n\n    # Bubble sort algorithm\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n):\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Bubble sort algorithm\n    n = len(nums)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    # Bubble sort\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n\n    # Top-down pancake sort\n    for length in range(n, 1, -1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            for i in range(start, end):\n                if nums[i] > nums[i+1]:\n                    nums[i], nums[i+1] = nums[i+1], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # In the pancake sort algorithm, we first sort the entire list in reverse order.\n    for i in range(n-1, 0, -1):\n        # We find the index of the maximum element in the remaining unsorted part of the list.\n        max_index = i\n        for j in range(i):\n            if nums[j] < nums[max_index]:\n                max_index = j\n        # We swap the current element with the maximum element.\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    # Finally, we sort the entire list in ascending order.\n    for i in range(n):\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    def reverse(start, end):\n        while start < end:\n            swap(start, end)\n            start += 1\n            end -= 1\n\n    n = len(nums)\n    for i in range(n // 2):\n        reverse(0, i)\n        reverse(i + 1, n - 1)\n        reverse(0, n - 1)"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the count of items in the same position that are identical.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    \"\"\"\n    This function takes in a tuple and returns the number of lists in it.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    count = 0\n    for i in Input: \n        if type(i) == list: \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if isinstance(i, list): \n            count += 1 \n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function finds the maximum absolute difference between any two elements in an array.\n    '''\n    max_diff = float('-inf') # initialize the variable to negative infinity\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function finds the maximum difference between any two elements in a given array.\n    '''\n\n    if len(arr) <= 1:\n        return 0\n\n    max_diff = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    arr.sort() # Sorting the array in ascending order\n    max_diff = 0 # Initializing the maximum difference variable to 0\n    \n    for i in range(len(arr)-1): # Traversing the array starting from the first element and second last element\n        diff = abs(arr[i+1] - arr[i]) # Calculating the absolute difference between current and next element\n        max_diff = max(max_diff, diff) # Updating the maximum difference if the absolute difference is greater than the previous maximum\n    \n    return max_diff # Returning the maximum difference"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    if len(arr) < 2:\n        return \"Array must have at least 2 elements\"\n\n    # initialize variables to store the minimum and maximum values\n    min_val = arr[0]\n    max_val = arr[0]\n\n    # iterate through the array to find the minimum and maximum values\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n    # calculate the maximum absolute difference\n    max_diff = 0\n    for i in range(len(arr)):\n        diff = abs(arr[i] - min_val)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize the variables\n    x1 = 0\n    x2 = 0\n    y1 = 0\n    y2 = 0\n    \n    # find the integers x and y that satisfy ax + by = n\n    while True:\n        x1 = x2 - (b*x1 + (n - b*x1)/a)\n        y1 = y2 - (a*y1 + (n - a*y1)/b)\n        \n        if (a*x1 + b*y1) == n:\n            return (x1, y1)\n        if (a*x2 + b*y2) == n:\n            return (x2, y2)\n        \n        x2 = x1\n        y2 = y1"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1, x2 = 1, a*n // b\n    y1, y2 = 1, b*n // a\n    if x1*a + y1*b == n and x2*a + y2*b == n:\n        return (x1, y1), (x2, y2)\n    elif x1*a + y2*b == n or x2*a + y1*b == n:\n        return (x1, y1), (x2, y2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:  # special case where b is 0\n        return None\n    x = -n / b\n    y = a * x\n    if x == 0 or y == 0:  # special case where x or y is 0\n        return None\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns integers x and y that satisfy ax + by = n as a tuple, or None if no solution exists.\n    \"\"\"\n    if a == 0:\n        return None\n\n    x = -b // a\n    y = n // a\n\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a is zero\n    if a == 0:\n        return None\n\n    # initialize variables\n    x1 = 0\n    y1 = 0\n    x2 = 1\n    y2 = 0\n\n    # iterate until x2 exceeds b\n    while x2 <= b:\n        # calculate y\n        y = x1 * a + y1 * b\n        # check if y equals n\n        if y == n:\n            return (x1, y1)\n        # check if y is greater than n\n        elif y > n:\n            # calculate x and y for x1 and y1\n            x = x1\n            y = y1\n            # check if x1 is the largest possible solution\n            if x2 - x1 > b - x1:\n                return (x1, y1)\n            # update x2 and y2\n            x2 = x1\n            y2 = y1\n            # update x1 and y1\n            x1 = x2 - x1\n            y1 = y2 - y1\n        # update x2 and y2\n        x2 = x2 + 1\n        y2 = y2 + 1\n\n    # if no solution was found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if a is zero, in which case x = -b/a, and y = n/a\n    if a == 0:\n        return (-b//a, n//a)\n\n    # Check if b is zero, in which case y = -a/b, and x = n/b\n    if b == 0:\n        return (n//b, -a//b)\n\n    # Use the extended Euclidean algorithm to find the solution\n    d, x, y = 0, 1, 0\n    for i in range(2, n):\n        q, r = divmod(n - i, i)\n        t = x - q * y\n        x = y\n        y = t\n\n    # Check if the solution is valid\n    if a*x + b*y!= n:\n        return None\n\n    # Return the solution as a tuple\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n):\n        if a * i + b * n == n:\n            return i, n - i\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize two variables x and y to 0\n    x = 0\n    y = 0\n    \n    # iterate n times\n    for i in range(n):\n        # calculate the next value of x and y\n        x += 1\n        y = a * x + b\n        \n        # if y is equal to n, return the current values of x and y as a tuple\n        if y == n:\n            return (x, y)\n    \n    # if no solution is found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Check if ax + by = n for all possible values of x and y\n    for x in range(-1000000, 1000000):\n        for y in range(-1000000, 1000000):\n            if a*x + b*y == n:\n                return (x, y)\n\n    # If no solution exists, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            return (float('-inf'), float('inf'))\n    else:\n        x = -n / a\n        y = -b / a\n        return (x, y)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Loop through each element in the second list\n    for element in list2:\n        # Remove the element from the first list if it is present\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Iterate through the list1 and remove the elements present in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    # Return the updated list1\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # Loop through the first list\n    for i in range(len(list1)):\n        # Check if the element is in the second list\n        if list1[i] in list2:\n            # If it is, remove it from the first list\n            list1.remove(list1[i])\n\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a new list to store the unique elements of the original list1\n    unique_list1 = []\n    # Iterate through the original list1\n    for i in list1:\n        # If the element is not present in list2, add it to the unique_list1\n        if i not in list2:\n            unique_list1.append(i)\n    # Return the unique_list1\n    return unique_list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Iterate through the first list\n    for element in list1:\n        # If the element is in the second list, remove it\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        raise ValueError('n must be a positive integer.')\n    elif n == 1:\n        return 0\n    else:\n        sum = 0\n        for i in range(0, n // 2):\n            sum += (n - 2 * i)\n        return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_val = 0\n    for i in range(n//2):\n        sum_val += (n - 2*i)\n    return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        n_half = n // 2\n        sum_list = [0] * n_half\n        for i in range(n_half):\n            sum_list[i] = i + n - 2 * i - n_half + 1\n            sum_list[n_half - 1 - i] = -1 * (i + n - 2 * i - n_half + 1)\n        return sum_list\n    else:\n        sum_list = [0] * (n // 2)\n        for i in range(n // 2):\n            sum_list[i] = i + n - 2 * i - n // 2 + 1\n            sum_list[n // 2 - 1 - i] = -1 * (i + n - 2 * i - n // 2 + 1)\n        return sum_list"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize the sum of the series to 0\n    series_sum = 0\n    # iterate from 0 to n//2\n    for i in range(n//2):\n        # add (n-2*i) to the series_sum\n        series_sum += (n-2*i)\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum_ = 0\n    for i in range(n // 2 + 1):\n        sum_ += n - 2 * i\n    return sum_"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    s = 0\n    for i in range(n // 2):\n        s += n - 2*i\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_ = 0\n    for i in range(n//2):\n        sum_ += n - 2*i\n    return sum_"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((i * 2 * pi) / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi/l)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the perimeter of the polygon\n    perimeter = s * l\n    # calculate the area of the polygon\n    area = perimeter * (tan(pi/l))\n    # return the area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(2 * pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(i*2*pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s/2) * tan((pi/l)*0.5)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = pi / 5\n    area = 0\n    for i in range(l):\n        area += s * tan(i * a)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the perimeter and side length of the polygon\n    perimeter = 2 * s * l\n    area = perimeter * (tan(pi / l)) ** 2\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((pi/l) * (i + 0.5))\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def get_divisors(num):\n        '''\n        Helper function to get all the divisors of a given number.\n        '''\n        div_list = []\n        i = 1\n        while i <= num:\n            if num % i == 0:\n                div_list.append(i)\n            i += 1\n        return div_list\n    \n    def sum_of_divisors(num):\n        '''\n        Helper function to get the sum of the divisors of a given number.\n        '''\n        return sum(get_divisors(num))\n    \n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    \n    if sum_of_divisors(a) == sum_of_divisors(b):\n        print(\"The sum of the divisors of\", a, \"and\", b, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", a, \"and\", b, \"are not the same.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    def find_divisors(num): \n        divisors = [] \n        for i in range(1, int(math.sqrt(num))+1): \n            if num % i == 0: \n                divisors.append(i) \n                if num // i!= i: \n                    divisors.append(num // i) \n        return divisors \n\n    def sum_of_divisors(num): \n        divisors = find_divisors(num) \n        return sum(divisors) \n\n    def same_div_sum(num1, num2): \n        div1 = sum_of_divisors(num1) \n        div2 = sum_of_divisors(num2) \n        return div1 == div2 \n\n    return same_div_sum(n, n)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes an integer `n` as input and returns True if the sum of the divisors of `n` is the same as `n`, False otherwise.\n\n    The function uses the fact that the sum of the divisors of `n` is equal to the sum of the squares of its divisors.\n    This means that the sum of the squares of the divisors of `n` can be calculated using the following formula:\n    \n    sum_of_squares = \u2211_{d|n} d^2\n    \n    where \u2211 represents the summation.\n    \n    The function then compares the sum of the squares of the divisors to the square of `n` to determine if they are equal.\n    If they are, then the sum of the divisors is also the same as `n`, so the function returns True. Otherwise, it returns False.\n    '''\n    divisor_sum = sum(set(map(int, str(n))))\n    square_sum = sum(map(lambda x: x**2, range(1, int(math.sqrt(n))+1)))\n    return divisor_sum == square_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of the divisors of n using the Sieve of Eratosthenes algorithm\n    divisors = []\n    limit = int(math.sqrt(n))+1\n    for i in range(2, limit):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    divisors.append(n)\n\n    # Calculate the sum of the divisors of the two integers\n    a = sum(divisors)\n    b = sum(divisors)\n\n    # Check if the sum of the divisors is the same\n    if a == b:\n        print(\"The sum of the divisors of\", n, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    sum_divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_divisors += i\n    \n    # Check if the sum of the divisors of n and n-1 are the same\n    if sum_divisors == n*(n-1) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of the divisors of n\n    div_sum = sum(range(1, n+1))\n    # calculate the sum of the divisors of n-1\n    div_sum_n = sum(range(1, n-1))\n    # compare the two sums\n    if div_sum == div_sum_n:\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Get the set of divisors of n \n    divisors = set(range(1, int(math.sqrt(n))+1)) \n    divisors.update(range(int(math.sqrt(n))+1, n+1)) \n    \n    # Calculate the sum of the divisors \n    sum_divisors = sum(divisors)\n    \n    # Check if the sum of the divisors is the same as n \n    if sum_divisors == n: \n        return \"True\"\n    else:\n        return \"False\""
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i\n            divisor_sum += n // i\n    \n    if divisor_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divs = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n//i:\n                divs.append(n//i)\n    return divs\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the sum of the divisors of n\n    div_sum = sum(i for i in range(1, int(n**0.5)+1) if n % i == 0)\n    # Find the sum of the divisors of n+1\n    div_sum_plus_one = sum(i for i in range(1, int(n**0.5)+1) if n+1 % i == 0)\n    # Check if the two sums are the same\n    if div_sum == div_sum_plus_one:\n        return True\n    else:\n        return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    count_dict = {} \n    for i in range(26): \n        count_dict[chr(i+97)] = 0 \n    for i in range(len(str1)): \n        if str1[i].lower() in count_dict.keys(): \n            count_dict[str1[i].lower()] += 1 \n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase to make the comparison case-insensitive\n    str1 = str1.lower()\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # Check if the character at the current position is a vowel (a, e, i, o, u)\n        if str1[i] in ['a', 'e', 'i', 'o', 'u']:\n            # If the character is a vowel, add it to the count variable\n            count += 1\n\n    # Return the count of vowels\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase to make it case insensitive\n    str1 = str1.lower()\n    # Create a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is a letter, add it to the dictionary with a count of 1\n        if char.isalpha():\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    # Iterate through each character in the English alphabet\n    for i in range(ord('a'), ord('z')+1):\n        # If the character is already in the dictionary, add its count to the count of the character at the same position\n        if chr(i).lower() in char_count:\n            char_count[chr(i)] = char_count.pop(chr(i).lower())\n    # Return the dictionary containing the count of characters at each position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    char_count = {}\n    for char in str1.lower():\n        if char.isalpha():\n            position = ord(char) - ord('a')\n            if position in char_count:\n                char_count[position] += 1\n            else:\n                char_count[position] = 1\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    # Define a dictionary to store the count of each character\n    char_count = {}\n\n    # Loop through each character in the input string\n    for char in str1:\n        # Convert the character to lowercase\n        char = char.lower()\n\n        # Check if the character is in the dictionary\n        if char in char_count:\n            # Increment the count by 1\n            char_count[char] += 1\n        else:\n            # If the character is not in the dictionary, add it with a count of 1\n            char_count[char] = 1\n\n    # Loop through the dictionary and count the number of characters that occur at the same position in the string as in the English alphabet\n    count = 0\n    for char in char_count:\n        # Convert the character to lowercase\n        char = char.lower()\n\n        # If the character is not in the English alphabet (a-z), skip it\n        if char.isalpha() and char.islower():\n            # Get the index of the character in the English alphabet (0-25)\n            index = ord(char) - ord('a')\n\n            # Check if the index is within the bounds of the input string\n            if index >= 0 and index < len(str1):\n                # Check if the character at the current index is the same as the current character\n                if str1[index] == char:\n                    # Increment the count by 1\n                    count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        for j in range(ord('a'), ord('z')+1):\n            if str1[i].lower() == chr(j).lower():\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(26):\n        for char in english_alphabet:\n            if char.lower() == str1[i].lower():\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    # Initialize an empty dictionary to store the character counts\n    char_count = {}\n    \n    # Convert the string to lowercase to make the comparison case-insensitive\n    str1 = str1.lower()\n    \n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is in the English alphabet\n        if char.isalpha():\n            # If it is, check if it already exists in the dictionary\n            if char in char_count:\n                # If it does, increment the count by 1\n                char_count[char] += 1\n            else:\n                # If it doesn't, add it to the dictionary with a count of 1\n                char_count[char] = 1\n    \n    # Loop through each character in the English alphabet\n    for i in range(ord('a'), ord('z')+1):\n        # Check if the character is already in the dictionary\n        if chr(i) in char_count:\n            # If it is, increment the count by the number of times it occurs in the string\n            char_count[chr(i)] += str1.count(chr(i))\n    \n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    # convert the string to lowercase\n    str1 = str1.lower()\n\n    # create an empty dictionary to store the counts\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is a letter, add it to the dictionary\n        if char.isalpha():\n            # if the character is already in the dictionary, increment its count\n            if char in char_count:\n                char_count[char] += 1\n            # if the character is not in the dictionary, add it with a count of 1\n            else:\n                char_count[char] = 1\n\n    # return the count of characters that occur at the same position in the string as in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1:\n        if char.lower() in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if (A[i] + A[j]) % 2 == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n    return count "
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n\n    return count "
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0 and A[j] ^ A[i] == 0: \n                count += 1 \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    count = 0\n    \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Use a loop to find the smallest power of 2 greater than or equal to n\n    while n < 1:\n        n <<= 1\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # initialize power variable\n    power = 1\n    \n    # loop while power is less than or equal to n\n    while power <= n:\n        power <<= 1\n    \n    # return the result\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize variables for loop\n    bit = 0\n    result = 1\n    \n    # Loop until the result is greater than or equal to n\n    while result >= n:\n        bit += 1\n        result = 2 ** bit\n    \n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize two variables, base and power.\n    base = 2\n    power = 0\n\n    # Loop until we find a power that is greater than or equal to n.\n    while base <= n:\n        power += 1\n        base *= 2\n\n    # Return the power.\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the value to 2\n    power = 2\n\n    # Loop until we find a power greater than or equal to n\n    while power < n:\n        # Increment the power by 2\n        power <<= 1\n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to an integer\n    n = int(n)\n    # Initialize the result to n\n    result = n\n    # Loop while n is not a power of 2\n    while result & (result - 1)!= 0:\n        result += 1\n    # Return the result as a string\n    return str(result)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 1:\n        return 2\n\n    min_pow = 1\n    max_pow = 2 * n - 1\n\n    while min_pow < max_pow:\n        mid_pow = (min_pow + max_pow) // 2\n        if mid_pow * mid_pow > n:\n            max_pow = mid_pow\n        else:\n            min_pow = mid_pow + 1\n\n    return 2 * min_pow"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n % 2 == 0:\n        n //= 2\n    return 2**int(log2(n))+n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize power to 1\n    power = 1\n    \n    # While n is greater than or equal to 2^power, increment power\n    while n >= 2**power:\n        power += 1\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the result variable to n\n    result = n\n    \n    # Loop until the result is a power of 2\n    while result & (result-1)!= 0:\n        # Double the result\n        result *= 2\n    \n    # Return the result\n    return result"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return \"Invalid range: m must be less than or equal to n\"\n    sum_range = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        sum_range += list1[i]\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m > n:\n        m, n = n, m\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Iterate through the list and add the elements at indices m to n to the sum variable\n    for i in range(m, n+1):\n        sum += list1[i-1]\n\n    # Return the sum of the elements in the specified range\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    \n    total = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        total += list1[i]\n    \n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m > n or n > len(list1) - 1:\n        return \"Invalid index range\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if list1[i]!= None:\n            sum += list1[i]\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Use the formula for the perimeter of a regular pentagon\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculate the semi-perimeter\n    s = (3 * a) / 2\n\n    # Calculate the area of the pentagon\n    area = (5 * s**2) / (4 * math.tan(math.pi/5))\n\n    # Calculate the perimeter of the pentagon\n    perimeter = 5 * a * math.sin(math.pi/5)\n\n    # Return the perimeter\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n    "
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n\nprint(perimeter_pentagon(5))  # Output: 30"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5 * a)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Find the length of the perimeter of the pentagon\n    perimeter = 5 * a\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a * math.sin(math.pi/5)\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    std_count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            std_count += 1\n        if std_count == 2:\n            count += 1\n            std_count = 0\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    length = len(s)\n    \n    while index < length:\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    \n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and checks if all the elements in it have the same data type.\n    Returns True if all the elements have the same data type, False otherwise.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Initialize a variable to store the data type of first element in the tuple\n    datatype = type(test_tuple[0])\n\n    # Loop through all elements in the tuple\n    for i in range(1, len(test_tuple)):\n        # Check if data type of the current element is same as the first element in the tuple\n        if type(test_tuple[i])!= datatype:\n            # If data type is not same, return False\n            return False\n\n    # If all elements in the tuple have same data type, return True\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) > 1:\n        for i in range(1, len(test_tuple)):\n            if type(test_tuple[i])!= type(test_tuple[0]):\n                return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    elif len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = None\n    for element in test_tuple:\n        if data_type is None:\n            data_type = type(element)\n        elif type(element)!= data_type:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= first_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set()\n\n    for item in test_tuple:\n        data_types.add(type(item))\n\n    return len(data_types) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if tuple is empty\n    if len(test_tuple) == 0:\n        return True\n    \n    # Get the first element of the tuple\n    first_element = test_tuple[0]\n    \n    # Loop through the rest of the tuple\n    for i in range(1, len(test_tuple)):\n        # Check if the data type of the current element is different from the first element\n        if type(test_tuple[i])!= type(first_element):\n            return False\n    \n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n//2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes an integer as input and returns the number of set bits (binary digits with value 1) in it.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0 \n    while n > 0: \n        if n & 1 == 1: \n            count += 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1 \n        n >>= 1 \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    # Initialize count to 0 \n    count = 0 \n\n    # Loop through each bit in the binary representation of n \n    for i in range(32): \n        # Extract the i-th bit of n \n        bit = (n >> i) & 1 \n        # If the bit is 1, increment the count \n        if bit == 1: \n            count += 1 \n\n    # Return the count of set bits \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(str)\n\n    # Iterate through the list of characters\n    for i in range(len(char_list)):\n        # If the index of the current character is odd, remove it from the list\n        if i % 2 == 1:\n            del char_list[i]\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_str = \"\"\n    for i in range(len(str)):\n        if i%2!=0:\n            odd_str += str[i]\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(string):\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as an argument and returns a new string with all the characters\n    which have odd index values removed.\n    \"\"\"\n    # Initialize an empty string to store the characters with odd index values\n    result = \"\"\n    \n    # Loop through each character in the input string\n    for char in str:\n        # Get the index of the character in the string\n        index = str.index(char)\n        \n        # Check if the index of the character is odd\n        if index % 2!= 0:\n            # If the index is odd, append the character to the result string\n            result += char\n            \n    # Return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result.append(str[i])\n    return ''.join(result)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function returns the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes in three numbers and returns the minimum number.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    # If a is the minimum, return a\n    if a < b and a < c:\n        return a\n    # If b is the minimum, return b\n    elif b < a and b < c:\n        return b\n    # If c is the minimum, return c\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    # checking if the first number is smaller than second number\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments:\n    n: an integer representing the number whose bits we want to check.\n    l: an integer representing the lower bound of the range in which we want to check.\n    r: an integer representing the upper bound of the range in which we want to check.\n    The function returns True if all the bits in the range are set and False otherwise.\n    '''\n    # check if n is a valid input\n    if not isinstance(n, int):\n        return \"Invalid input: n should be an integer.\"\n    \n    # check if l and r are valid inputs\n    if not isinstance(l, int) or not isinstance(r, int):\n        return \"Invalid input: l and r should be integers.\"\n    \n    # check if l is less than or equal to r\n    if l > r:\n        return \"Invalid input: l should be less than or equal to r.\"\n    \n    # check if the range is within the valid range of n\n    if r >= 2**n:\n        return \"Invalid input: l and r are outside the valid range of n.\"\n    \n    # check if all the bits in the range are set\n    for i in range(l, r+1):\n        if bin(i).count('1') < n:\n            return False\n    \n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0  \n    for i in range(l, r+1):  \n        count += bin(n & i).count('1')  \n    if count == 0:  \n        return True  \n    else:  \n        return False  "
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the count of unset bits\n    unset_bits_count = 0\n    # Loop through each bit in the given range\n    for i in range(l, r+1):\n        # Check if the bit is set or not\n        if n & (1 << i):\n            unset_bits_count += 1\n    # If the unset bits count is equal to the number of bits in the given range, then all bits are unset\n    if unset_bits_count == r - l + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(n).count('1')!= i-l+1:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize a variable to keep track of the number of unset bits in the range\n    unset_bits = 0\n\n    # Loop through the range of integers\n    for i in range(l, r + 1):\n\n        # Loop through the bits of the integer and check if any of them are set\n        for j in range(32):\n\n            # If the bit is set, increment the number of unset bits\n            if (i & (1 << j)):\n                unset_bits += 1\n\n                # If all the bits are unset, return False\n                if (unset_bits == 32):\n                    return False\n\n    # If all the bits are unset, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:  \n        return True  \n    elif n & 1 == 0:  \n        return all_Bits_Set_In_The_Given_Range(n >> 1, l, r)  \n    else:  \n        return all_Bits_Set_In_The_Given_Range(n >> 1, l, r) and ((l-1) & n) == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    set_bits = 0  \n    for i in range(l, r+1):  \n        set_bits |= (1 << i)  \n    if set_bits == (1 << n) - 1:  \n        return True  \n    else:  \n        return False  "
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three arguments, n (the integer), l (the lower limit of the range) and r (the upper limit of the range).\n    It checks whether all the bits are set in the given range or not. If all the bits are set, it returns True.\n    Otherwise, it returns False.\n    \"\"\"\n    # initialize the result variable to True\n    result = True\n    # loop through the bits in the given range\n    for i in range(l, r+1):\n        # check if the i-th bit of the integer n is set\n        if not (n & (1 << i)):\n            # if the i-th bit is not set, set the result variable to False\n            result = False\n            break\n    # return the result variable\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    all_bits_set = True\n    for i in range(l, r+1):\n        if n & (1 << i):\n            all_bits_set = False\n            break\n    return all_bits_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize the count of unset bits to n\n    unset_bits = n\n\n    # Iterate from the leftmost bit to the rightmost bit\n    for i in range(l, r+1):\n\n        # If the current bit is 0, decrement the count of unset bits by 1\n        if (n & 1) == 0:\n            unset_bits -= 1\n\n        # Shift the bits to the right by 1\n        n = n >> 1\n\n    # If the count of unset bits is equal to 0, all bits are unset in the given range\n    if unset_bits == 0:\n        return True\n\n    # If the count of unset bits is greater than 0, some bits are set in the given range\n    return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    negative_count = 0\n    positive_count = 0\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            negative_count += 1\n            i += 1\n        else:\n            positive_count += 1\n            i += 1\n    if positive_count > 0:\n        negative_count += 1\n    if negative_count > 0:\n        positive_count += 1\n    if positive_count > 0 and negative_count > 0:\n        if negative_count < positive_count:\n            positive_count, negative_count = negative_count, positive_count\n        if negative_count == 1:\n            arr[0], arr[-1] = arr[-1], arr[0]\n        elif negative_count > 1:\n            arr[0], arr[negative_count - 1], arr[-1] = arr[-1], arr[0], arr[negative_count - 1]\n        else:\n            arr[0], arr[-1] = arr[-1], arr[0]\n    else:\n        if positive_count == 1:\n            arr[0], arr[1] = arr[1], arr[0]\n        elif positive_count > 1:\n            arr[0], arr[positive_count - 1], arr[1] = arr[1], arr[0], arr[positive_count - 1]\n        else:\n            arr[0], arr[1] = arr[1], arr[0]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two empty arrays to hold negative and positive elements\n    neg = []\n    pos = []\n    \n    # loop through the input array\n    for i in arr:\n        # if the element is negative, append it to the negative array\n        if i < 0:\n            neg.append(i)\n        # if the element is positive, append it to the positive array\n        elif i > 0:\n            pos.append(i)\n    \n    # loop through the negative array and append the first n elements to the output array\n    for i in range(n):\n        arr[i] = neg.pop(0)\n    \n    # loop through the positive array and append the remaining elements to the output array\n    for i in range(n, len(arr)):\n        arr[i] = pos.pop(0)\n    \n    # return the output array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Initialize variables to keep track of positive and negative elements\n    pos_arr = []\n    neg_arr = []\n\n    # Iterate through the input array\n    for elem in arr:\n        # If the element is positive, add it to the positive array\n        if elem >= 0:\n            pos_arr.append(elem)\n        # Otherwise, add it to the negative array\n        else:\n            neg_arr.append(elem)\n\n    # Merge the positive and negative arrays\n    merged_arr = pos_arr + neg_arr\n\n    # Shuffle the merged array\n    import random\n    random.shuffle(merged_arr)\n\n    # Return the first n elements of the shuffled array\n    return merged_arr[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_index = -1\n    for i in range(n):\n        if arr[i] < 0:\n            neg_index += 1\n            arr[i], arr[neg_index] = arr[neg_index], arr[i]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # initialize two pointers for positive and negative elements\n    i, j = 0, n - 1\n\n    # loop through the array\n    while i < j:\n\n        # check if the current element is negative\n        if arr[i] < 0:\n\n            # swap the current element with the last positive element\n            arr[i], arr[j] = arr[j], arr[i]\n\n            # move the pointer for positive elements to the right\n            j -= 1\n\n        # move the pointer for negative elements to the right\n        i += 1\n\n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # create two empty lists for negative and positive elements\n    negative_elements = []\n    positive_elements = []\n\n    # loop over the first n elements of the array\n    for i in range(n):\n        # if the current element is negative, add it to the negative list\n        if arr[i] < 0:\n            negative_elements.append(arr[i])\n        # if the current element is positive, add it to the positive list\n        else:\n            positive_elements.append(arr[i])\n\n    # loop over the remaining elements of the array\n    for i in range(n, len(arr)):\n        # if the current element is negative, add it to the positive list\n        if arr[i] < 0:\n            positive_elements.append(arr[i])\n        # if the current element is positive, add it to the negative list\n        else:\n            negative_elements.append(arr[i])\n\n    # combine the two lists into a single list, and shuffle it\n    result = negative_elements + positive_elements\n    random.shuffle(result)\n\n    # return the shuffled array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    # initialize two empty lists to store negative and positive elements\n    neg = []\n    pos = []\n\n    # iterate over the array and add elements to the appropriate lists\n    for elem in arr:\n        if elem < 0:\n            neg.append(elem)\n        else:\n            pos.append(elem)\n\n    # combine the two lists into a single list and sort it in ascending order\n    combined = neg + pos\n    combined.sort()\n\n    # create a new array with the first n elements from the combined list\n    result = combined[:n]\n\n    # return the result array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for i in arr:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n\n    neg.sort()\n    pos.sort()\n\n    for i in range(n):\n        arr[i] = neg.pop(0)\n\n    for i in range(n, len(arr)):\n        arr[i] = pos.pop(0)\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two separate lists for negative and positive elements\n    neg_list = []\n    pos_list = []\n\n    # iterate through the array and add elements to the appropriate list\n    for i in arr:\n        if i < 0:\n            neg_list.append(i)\n        else:\n            pos_list.append(i)\n\n    # sort the positive list in ascending order\n    pos_list.sort()\n\n    # reverse the order of negative elements in the positive list\n    neg_list.reverse()\n\n    # combine the two lists\n    final_list = neg_list + pos_list\n\n    # return the final list\n    return final_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two empty lists to store the negative and positive elements\n    neg = []\n    pos = []\n    # loop through the array and add elements to the correct list based on their value\n    for num in arr:\n        if num < 0:\n            neg.append(num)\n        else:\n            pos.append(num)\n    # add the negative elements to the beginning of the array\n    arr[:n] = neg\n    # add the positive elements to the end of the array\n    arr[n:] = pos"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n\n    # Replace blank spaces with the character\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join([char if char!='' else str1[i] for i in range(len(str1))])"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    str2 = str1.replace(\" \", char)\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    str1 = str1.replace(' ', char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ',char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Replace all blank spaces with the given character\n    str1 = str1.replace(\" \", char)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # replace all blank spaces with the character\n    str1 = str1.replace(\" \",\"{}\".format(char))\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n and fill it with the first n elements of the list\n    heap = list1[:n]\n    heapq.heapify(heap)\n\n    # Pop the smallest item from the heap and add the next smallest item to the heap\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n\n    # Return the heap\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    This function takes in a list `lst` and an integer `n` and returns a list containing the `n` largest items from the list.\n    '''\n    # Use a max heap to store the n largest items\n    max_heap = [0] * n\n    for item in lst:\n        heapq.heappush(max_heap, item)\n        # If the heap size exceeds n, remove the smallest item\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # Return the list of the largest items\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    \n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n    \n    while len(heap) > n:\n        heapq.heappop(heap)\n    \n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list lst.\n    \"\"\"\n    heap = lst\n    for _ in range(n - len(lst)):\n        heapq.heappush(heap, heapq.heappop(heap))\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, -list1[i])\n    for i in range(n, len(list1)):\n        if -heap[0] > -list1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -list1[i])\n    result = []\n    for i in range(n):\n        result.append(heap[0])\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Heapify the list to convert it into a max heap\n    heapq.heapify(list1)\n    # Initialize an empty list to store the n largest items\n    max_heap = []\n    # Loop through the list and add the n largest items to the max_heap\n    for i in range(n):\n        max_heap.append(heapq.heappop(list1))\n    # Return the max_heap\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Sort the list in descending order\n    lst.sort(reverse=True)\n    # Return the first n elements of the sorted list\n    return lst[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Create a min-heap from the list and then extract the n largest numbers from the heap\n    heap = list1\n    heapq.heapify(heap)\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use heapq to heapify the list in descending order\n    heapq.heapify(list1)\n    # Remove the smallest n elements from the heap and add them to the result list\n    for i in range(n):\n        heapq.heappop(list1)\n    # Reverse the result list to get the n largest elements\n    result = list(reversed(list1))\n    return result"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # The surface area of a cylinder is pi times the radius squared times the height\n    return 2 * 3.14159 * r * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = math.pi * r**2 * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    pi = 3.141592653589793\n    lateral_surface_area = pi*(r**2)*h\n    \n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * h  # formula to find the lateral surface area\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * math.pi * r * h\n    return lateral_area\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Using formula for lateral surface area of cylinder\n    lateral_surface_area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    \n    return lateral_surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h  # Lateral surface area = 2*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = math.pi * r**2 * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l ** 3\n    return vol"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l ** 3\n    print(\"The volume of the cube is:\", v)"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = [0] * 32\n    even_bits[0] = 1 # set the first bit to 1\n    \n    # iterate over all bits in the number and set them in the even_bits array\n    for i in range(1, 32):\n        if n & 1 << i:\n            even_bits[i] = 1\n            \n    # combine the even_bits array into a single number\n    return sum(even_bits)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize an empty list to store the even bits\n    even_bits = []\n\n    # Iterate through each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the current bit is 0, add it to the list of even bits\n        if bit == '0':\n            even_bits.append(bit)\n        # If the current bit is 1, check if it is even\n        elif bit == '1':\n            if n & 1 == 0:\n                even_bits.append(bit)\n\n    # Convert the list of even bits to an integer and return it\n    return int(''.join(even_bits), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n\n    # Loop through each bit in the binary representation of n\n    for i in range(32):\n        # Calculate the bitwise AND between the current bit and 1 (to check if it's even)\n        bit_mask = 1 << i\n        if n & bit_mask == 0:\n            # If the current bit is odd, set its corresponding bit in the result to 1\n            result |= bit_mask\n\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the new number\n    new_number = []\n\n    # loop through each bit in the original number\n    for bit in bin(n)[2:]:\n        # if the bit is even, append a 1 to the new number\n        if int(bit) == 0:\n            new_number.append(0)\n        else:\n            new_number.append(1)\n\n    # return the new number\n    return int(''.join(map(str, new_number)), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    # Create a binary representation of the input number\n    binary = bin(n)[2:]\n\n    # Iterate over the binary representation and set all even bits to 1\n    result = ''\n    for bit in binary:\n        if int(bit) == 0:\n            result += '0'\n        else:\n            result += '1'\n\n    # Convert the result back to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the number of set bits\n    set_bits = 0\n    \n    # loop through each bit in the binary representation of n\n    for i in range(32):\n        # if the current bit is even (i.e. the least significant bit), set the corresponding bit in the even_bits variable\n        even_bits = n & (1 << i)\n        \n        # if the current even bit is set, increment the set_bits counter\n        if even_bits:\n            set_bits += 1\n            \n    # return the number of set bits\n    return set_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize an empty list to store the even bits\n    even_bits = []\n\n    # loop through each bit of the given number\n    for i in range(32):\n        # check if the current bit is even\n        if n & (1 << i):\n            # set the corresponding bit of the even bits list to 1\n            even_bits.append(1)\n        else:\n            # set the corresponding bit of the even bits list to 0\n            even_bits.append(0)\n\n    # join the even bits list to form the final number\n    final_number = sum(2 ** i * bit for i, bit in enumerate(even_bits))\n\n    return final_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function takes an integer input, n, and sets all the even bits of n to 1.\n\n    Parameters:\n        n (int): An integer number.\n\n    Returns:\n        int: The input number with all even bits set to 1.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 0\n\n    # Iterate through each bit in n and set the corresponding bit in the result to 1 if it is even\n    for i in range(32):\n        if (n & (1 << i))!= 0 and (i % 2) == 0:\n            result |= 1 << i\n\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the result variable\n    result = 0\n\n    # Iterate over each bit in the input number\n    for i in range(32):\n        # If the current bit is even\n        if (n & (1 << i)) > 0:\n            # Set the corresponding bit in the result to 1\n            result |= (1 << i)\n\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bit_count = 0 # counter to keep track of number of bits set\n    result = 0 # variable to store the result\n    \n    # iterate over each bit of the number\n    while n > 0:\n        # check if the current bit is even\n        if n & 1 == 0:\n            # set the current bit to 1\n            result |= 1 << bit_count\n        # shift the number to the right by one bit\n        n >>= 1\n        # increment the counter for number of bits set\n        bit_count += 1\n    \n    # return the result\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # use Counter to count the number of occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a Counter object to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Use the Counter class from the collections module to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrence of each tuple\n    counter = Counter(test_list)\n    # Convert the Counter object to a dictionary\n    result = dict(counter)\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple in the list\n    count = Counter(test_list)\n    # Return a dictionary mapping each tuple to its count\n    return dict(count)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts of each unique tuple\n    count_dict = {}\n    # iterate over the list of tuples\n    for item in test_list:\n        # if the tuple is already in the dictionary, increment its count by 1\n        if item in count_dict:\n            count_dict[item] += 1\n        # otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[item] = 1\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts\n    count_dict = {}\n    # iterate over the tuples in the list\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # if it is, increment the count by 1\n            count_dict[tup] += 1\n        else:\n            # if it isn't, add it to the dictionary with a count of 1\n            count_dict[tup] = 1\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    # Count the number of characters in the string\n    n = len(str)\n    \n    # Initialize the result variable\n    result = 0\n    \n    # Loop over all possible substrings of length from 1 to n\n    for i in range(1, n+1):\n        # Loop over all possible starting positions for the substrings\n        for j in range(n-i+1):\n            # Append the substring to the result\n            result += 1\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substr = str[i:j]\n            if substr:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(collections.Counter(str.replace(' ', '')).elements())"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)+1): \n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # initialize variables\n    count = 0\n    i = 0\n\n    # loop through each character of the string\n    while i < len(str):\n\n        # check if the current character is non-empty\n        if str[i]!='':\n\n            # initialize variables for the current substring\n            j = i\n            substring = ''\n\n            # loop through each character in the substring\n            while j < len(str) and str[j]!='':\n                substring += str[j]\n                j += 1\n\n            # increment the count if the substring is not empty\n            if substring!= '':\n                count += 1\n\n        # move the index to the next character\n        i += 1\n\n    # return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize variables\n    count = 0\n    previous_num = None\n    current_num = 2\n    # Check if m is greater than 2*n\n    if m > 2 * n:\n        return 0\n    # Iterate through all possible sequences of length n\n    for i in range(n):\n        # Check if current number is greater than or equal to twice the previous number\n        if current_num >= 2 * previous_num:\n            count += 1\n            # If current number is greater than or equal to m, subtract it from the count\n            while current_num >= m:\n                count -= 1\n                current_num -= 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate through the range of possible elements\n    for i in range(2, m + 1):\n        # Check if the current element is greater than or equal to twice the previous element but less than or equal to m\n        if i >= 2 * i <= m:\n            # Increment the count variable by 1\n            count += 1\n\n    # Return the count variable\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n):\n    # base case: if n is 0, there are no possible sequences\n    if n == 0:\n        return 0\n\n    # base case: if m is 0, there are 0 possible sequences\n    if m == 0:\n        return 0\n\n    # if n is less than or equal to m, there are 1 possible sequence\n    if n <= m:\n        return 1\n\n    # keep track of the number of possible sequences\n    count = 0\n\n    # loop through all possible sequences of length n\n    for i in range(1, m+1):\n        # if the current element is less than or equal to twice the previous element\n        if i <= 2*i-n:\n            count += get_total_number_of_sequences(m-i, n-1)\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    def binary_search(arr, target):\n        low, high = 0, len(arr) - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1\n\n    # Generate all possible sequences of length n\n    sequences = []\n    for i in range(2, n + 1):\n        for j in range(1, m):\n            if binary_search(sequences, j) == -1:\n                sequences.append(j)\n\n    # Count the number of sequences that are within the given constraints\n    count = 0\n    for seq in sequences:\n        if seq >= 2 * min(sequences) and seq <= m:\n            count += 1\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    This function takes in two positive integers m and n and returns the total number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += (m // i) * ((m // i) * (i - 1) // 2 + i)\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    def backtrack(start, curr, count):\n        if curr == n:\n            count += 1\n        for i in range(start, m):\n            if i % 2 == 0 and i >= 2 * (curr - 1) and i <= m:\n                backtrack(i + 1, curr + 1, count)\n        return count\n\n    return backtrack(1, 1, 0)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n):\n    # initialize a list to store the total number of sequences\n    total_sequences = []\n    \n    # loop through all possible first element values\n    for i in range(2,m+1):\n        # loop through all possible last element values\n        for j in range(2,m+1):\n            # check if the sum of first and last element values is less than or equal to m\n            if j + i <= m:\n                # check if the sum of first and last element values is greater than or equal to 2*previous_sum\n                if j + i >= 2*i:\n                    # check if the last element value is greater than or equal to the previous element value\n                    if j >= i:\n                        # if all conditions are met, add the total number of sequences to the list\n                        total_sequences.append(1)\n                    else:\n                        # otherwise, add the total number of sequences for the first and last elements multiplied by the total number of sequences for the remaining elements\n                        total_sequences.append(get_total_number_of_sequences(m,j+1) + get_total_number_of_sequences(m,m-j))\n    return total_sequences[-1]"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(n, m+1):\n        for j in range(2, i//2):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # initialize the counter variable\n    counter = 0\n    # loop through all possible sequence lengths\n    for i in range(n, 0, -1):\n        # loop through all possible elements in the sequence\n        for j in range(m - 1, m - 2 - i + n, -1):\n            # check if the element is within the given range\n            if j >= 2 * j:\n                # increment the counter\n                counter += 1\n    # return the counter value\n    return counter"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(1, m+1):\n        if i >= 2*n:\n            count += 1\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    last_element = list1[-1]\n    list1[-1] = list2\n    return list1, last_element"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop() # Remove the last element of the list1\n    list1.extend(list2) # Extend the list1 with the elements of the list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    for i in range(len(list1) - 1, -1, -1):\n        list1[i] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) > 0:\n        # slice the list to remove the last element\n        list1 = list1[:-1]\n        # extend the list with the elements of the second list\n        list1.extend(list2)\n        # return the modified list\n        return list1\n    else:\n        # return the original list\n        return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Iterate through the first list, starting from the last element\n    for i in range(len(list1)-1, -1, -1):\n        # If the current element is the last one, append the elements of the second list\n        if i == len(list1)-1:\n            list1.append(list2)\n            break\n        # Otherwise, remove the current element from the first list\n        else:\n            list1.pop(i)\n    # Return the modified list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n\n    # check if the length of both lists is equal\n    if len(list1)!= len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    # replace the last element of the first list with the elements of the second list\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_characters(string):\n    \"\"\"\n    This function takes a string as input and returns the total number of characters in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in that string.\n    '''\n    total_chars = 0\n    for char in str1:\n        total_chars += 1\n    return total_chars"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = 0\n    for char in str1:\n        total_chars += 1\n    return total_chars"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    x = N + 1\n    while True:\n        x += 1\n        if math.isqrt(x) ** 2 == x:\n            return x\n        elif math.isqrt(x) ** 2 > x:\n            return -1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        S = int(N**(1/2))\n        if S == int(N**(1/2)):\n            return S+1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Find the largest perfect square less than or equal to N\n    perfect_squares = []\n    while True:\n        square = math.ceil(N**0.5)\n        perfect_squares.append(square)\n        N = square**2\n        if N > N:\n            break\n\n    # Find the smallest perfect square greater than the last perfect square in the list\n    smallest_perfect_square = perfect_squares[-1] + 1\n    while smallest_perfect_square in perfect_squares:\n        smallest_perfect_square += 1\n\n    # Return the next perfect square\n    return smallest_perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # calculate the square root of N\n    sqrtN = math.sqrt(N)\n    # calculate the square of the square root\n    sqrtN2 = sqrtN * sqrtN\n    # find the smallest square greater than sqrtN2\n    while True:\n        nextSqrtN2 = sqrtN2 + 1\n        if nextSqrtN2 * nextSqrtN2 > N:\n            break\n        sqrtN2 = nextSqrtN2\n    # calculate the next perfect square by dividing sqrtN2 by the square root\n    return int(sqrtN2 / sqrtN)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    def is_perfect_square(n):\n        '''\n        Check if a number is a perfect square.\n        '''\n        return int(math.sqrt(n)) ** 2 == n\n\n    def is_greater_than_N(n):\n        '''\n        Check if a number is greater than N.\n        '''\n        return n > N\n\n    def next_square(n):\n        '''\n        Find the next perfect square greater than n.\n        '''\n        i = n + 1\n        while not is_perfect_square(i):\n            i += 1\n        return i\n\n    if is_perfect_square(N):\n        return next_square(N)\n    elif is_greater_than_N(N):\n        return N\n    else:\n        return 0"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    # find the square root of N\n    sqrtN = math.sqrt(N)\n    \n    # find the integer part of sqrt(N)\n    intPart = math.floor(sqrtN)\n    \n    # find the fractional part of sqrt(N)\n    fracPart = sqrtN - intPart\n    \n    # calculate the next integer part\n    nextIntPart = intPart + 1\n    \n    # calculate the next fractional part\n    nextFracPart = 1.0\n    \n    # check if the next fractional part is greater than 1\n    if nextFracPart > 1.0:\n        # calculate the number of times the next fractional part is greater than 1\n        times = math.ceil(math.log2(nextFracPart))\n        \n        # calculate the power of 2 of the next fractional part\n        nextPowerOf2 = 2 ** times\n        \n        # update the fractional part\n        nextFracPart -= nextPowerOf2\n        \n        # update the next integer part\n        nextIntPart += 1\n    \n    # calculate the next perfect square\n    nextPerfectSquare = nextIntPart ** 2 + nextFracPart\n    \n    # return the next perfect square\n    return nextPerfectSquare"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        x = N + 1\n        y = int(math.sqrt(x))\n        if y*y == x:\n            return y\n        N = y\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    sqrt_N = math.sqrt(N)\n    next_int = math.ceil(sqrt_N)\n    return next_int"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than a given number.\n\n    Args:\n        N (int): The given number for which the next perfect square is to be found.\n\n    Returns:\n        int: The next perfect square greater than the given number.\n\n    \"\"\"\n\n    # Find the square root of the given number\n    sqrt_N = math.sqrt(N)\n\n    # Initialize two variables, sqrt_N_plus_1 and sqrt_N_plus_2, to their successors\n    sqrt_N_plus_1 = int(sqrt_N) + 1\n    sqrt_N_plus_2 = int(sqrt_N_plus_1) + 1\n\n    # If the square root of the given number is an integer, then it is already the next perfect square\n    if sqrt_N_plus_2 * sqrt_N_plus_2 == N:\n        return sqrt_N_plus_2\n\n    # Otherwise, find the next perfect square greater than the given number\n    else:\n        while sqrt_N_plus_2 * sqrt_N_plus_2 <= N:\n            sqrt_N_plus_2 += 1\n\n        return sqrt_N_plus_2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math  \n  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the largest perfect square smaller than N \n    i = math.ceil(math.sqrt(N)) \n    while i * i <= N: \n        i += 1 \n    # Check if N is a perfect square \n    if i * i!= N: \n        return next_Perfect_Square(N) \n    # If N is a perfect square, find the next greater perfect square by adding 1 \n    else: \n        return i * i"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_sum = float('-inf')\n\n    # check for increasing subsequence\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            curr_sum = 0\n            for j in range(i, n):\n                curr_sum += arr[j]\n                if curr_sum > max_sum:\n                    max_sum = curr_sum\n\n    # check for decreasing subsequence\n    for i in range(n-2, -1, -1):\n        if arr[i] > arr[i+1]:\n            curr_sum = 0\n            for j in range(i, n):\n                curr_sum += arr[j]\n                if curr_sum > max_sum:\n                    max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    if len(arr) <= 1:\n        return arr[0] if arr[0] >= 0 else -arr[0]\n\n    max_ending_here = arr[0]\n    max_so_far = max_ending_here\n\n    for i in range(1, len(arr)):\n        if arr[i] >= max_ending_here:\n            max_ending_here += arr[i]\n        else:\n            max_ending_here = arr[i]\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # check if the array is bitonic\n    if is_bitonic(arr):\n        return sum(arr)\n\n    # sort the array in non-increasing order\n    sorted_arr = sorted(arr)\n\n    # calculate the maximum sum of a subarray that is bitonic\n    max_bitonic_sum = 0\n    prev_bitonic_sum = 0\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            prev_bitonic_sum += arr[i]\n        else:\n            max_bitonic_sum = max(max_bitonic_sum, prev_bitonic_sum)\n            prev_bitonic_sum = 0\n\n    # add the last subarray to the maximum bitonic sum\n    max_bitonic_sum = max(max_bitonic_sum, prev_bitonic_sum)\n\n    return max_bitonic_sum\n\n\ndef is_bitonic(arr):\n    n = len(arr)\n    prev_val = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > prev_val:\n            return False\n        prev_val = arr[i]\n\n    return True\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr) \n    if n < 2: \n        return 0 \n\n    # Traverse through the array and find the maximum subarray \n    # of increasing and decreasing elements \n    max_sum_inc = max_sum_dec = float('-inf') \n    curr_sum = 0 \n    for i in range(n): \n        if arr[i] > arr[i+1]: \n            curr_sum += arr[i] \n            if curr_sum > max_sum_inc: \n                max_sum_inc = curr_sum \n        else: \n            curr_sum = 0 \n\n    curr_sum = 0 \n    for i in range(n-2, -1, -1): \n        if arr[i] < arr[i+1]: \n            curr_sum += arr[i] \n            if curr_sum > max_sum_dec: \n                max_sum_dec = curr_sum \n\n    # Return the maximum sum \n    return max(max_sum_inc, max_sum_dec) "
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    \n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        elif arr[i] < arr[i-1]:\n            dp[i] = max(dp[i-1], dp[i]) + arr[i]\n        else:\n            dp[i] = dp[i-1]\n            \n    max_sum = 0\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_sum = max(max_sum, dp[i] - dp[i-1])\n            \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Check if the array is bitonic\n    is_bitonic = True\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            is_bitonic = False\n            break\n    \n    # If the array is not bitonic, return 0\n    if not is_bitonic:\n        return 0\n    \n    # Initialize variables\n    max_sum_inc = max_sum_dec = arr[0]\n    current_sum_inc = current_sum_dec = arr[0]\n    \n    # Calculate the maximum sum of increasing subsequence\n    for i in range(1, len(arr)):\n        current_sum_inc += arr[i]\n        if current_sum_inc >= max_sum_inc:\n            max_sum_inc = current_sum_inc\n        else:\n            current_sum_inc = arr[i]\n    \n    # Calculate the maximum sum of decreasing subsequence\n    for i in range(len(arr)-2, -1, -1):\n        current_sum_dec += arr[i]\n        if current_sum_dec >= max_sum_dec:\n            max_sum_dec = current_sum_dec\n        else:\n            current_sum_dec = arr[i]\n    \n    # Return the maximum sum of either subsequence\n    return max(max_sum_inc, max_sum_dec)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    if len(arr) < 3:\n        return sum(arr)\n\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            curr_sum += arr[i]\n        else:\n            curr_sum -= arr[i - 1]\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return max(arr)\n\n    dp = [[0] * 2 for _ in range(n)]\n    for i in range(1, n - 1):\n        if arr[i - 1] < arr[i] < arr[i + 1]:\n            dp[i][0] = dp[i - 1][0] + arr[i]\n        elif arr[i - 1] > arr[i] > arr[i + 1]:\n            dp[i][0] = max(dp[i - 1][0], dp[i + 1][0]) + arr[i]\n        else:\n            dp[i][0] = 0\n\n        if arr[i - 1] < arr[i] > arr[i + 1]:\n            dp[i][1] = dp[i - 1][1] + arr[i]\n        elif arr[i - 1] > arr[i] < arr[i + 1]:\n            dp[i][1] = max(dp[i - 1][1], dp[i + 1][1]) + arr[i]\n        else:\n            dp[i][1] = 0\n\n    return max(dp[n - 1])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # check if the array is bitonic\n    if all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) and all(arr[i] >= arr[i+1] for i in range(len(arr)-2, -1, -1)):\n        return max(arr)\n    # find the maximum sum of a decreasing subsequence\n    elif all(arr[i] <= arr[i+1] for i in range(len(arr)-1)):\n        return max_sum(arr[::-1])\n    # find the maximum sum of an increasing subsequence\n    elif all(arr[i] >= arr[i+1] for i in range(len(arr)-1)):\n        return max_sum(arr[::-1])\n    # if all else fails, return the maximum value of the array\n    else:\n        return max(arr)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    # check if the array is empty or not\n    if not arr: \n        return 0 \n\n    # initialize variables to keep track of the maximum sum \n    # for increasing subsequence and decreasing subsequence \n    max_inc = arr[0] \n    max_dec = float('-inf') \n\n    # iterate through the array and update the maximum sum \n    for num in arr: \n        if num < max_inc: \n            max_inc = num \n        elif num > max_dec: \n            max_dec = num \n\n    # return the maximum sum of the subsequences \n    return max(max_inc, max_dec) "
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Check if the number is negative\n    if number < 0:\n        print(\"Error: input must be non-negative.\")\n        return\n\n    # Initialize variables\n    a = 0\n    b = number\n    c = (a + b) / 2\n\n    # Calculate the square root iteratively until the difference between a and b is less than 0.0001\n    while abs(b - c) > 0.0001:\n        a = b\n        b = c\n        c = (a + b) / 2\n\n    # Return the square root\n    return c"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1\n    y = number / x\n    \n    while abs(x - y) > 0.000000001:\n        x = y\n        y = number / x\n    \n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize variables\n    old_guess = number / 2\n    guess = 0\n    error = 1000\n    \n    # iterate until convergence\n    while error > 0.0001:\n        guess = old_guess - (number / (2 * guess))\n        old_guess = guess\n        error = abs(guess - number / guess)\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2.0\n    while True:\n        if guess*guess == number:\n            return guess\n        elif guess*guess > number:\n            guess = (guess + number / guess) / 2.0\n        else:\n            guess = (guess + number / guess) / 2.0 + number / guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    i = 1\n    while guess**2 > number:\n        i += 1\n        guess = (number / guess + guess) / 2\n    return round(guess, 5), i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    x = 1.0\n    y = number / x\n    \n    # calculate the first iteration\n    x_prev = x\n    x = x_prev - (number / x)\n    \n    # calculate the remaining iterations\n    while abs(x - x_prev) > 0.0001:\n        x_prev = x\n        x = x_prev - (number / x)\n    \n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Check if the input is a positive number\n    if number <= 0:\n        raise ValueError(\"Input must be a positive number.\")\n\n    # Initialize variables\n    guess = number / 2\n    diff = 0.001\n\n    # Calculate the square root using babylonian method\n    while diff > 0.0001:\n        next_guess = guess - (guess**2 - number) / (2*guess)\n        diff = abs(guess - next_guess)\n        guess = next_guess\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    x = 0\n    y = 1\n    # use babylonian method to calculate square root\n    while abs(x**2 - number) > 0.0001:\n        x = (x + number/x) / 2\n        y = (y + number/y) / 2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1\n    y = number\n    while abs(y-x*x) > 0.00001:\n        x = (x+y)/(2*x)\n        y = number/(x*x)\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    guess = 0\n    prev_guess = 0\n    epsilon = 0.000001\n    count = 0\n\n    while abs(guess**2 - number) > epsilon:\n        # update guess\n        guess = (number/guess + prev_guess)/2\n        prev_guess = guess\n\n        # count iterations\n        count += 1\n\n    # print results\n    print('Iterations:', count)\n    print('Guess:', guess)\n    print('Square root:', guess**2)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(s):\n    n = len(s)\n    # create an array of size n to store length of longest palindromic subsequence ending at index i\n    # initialize all elements as 1\n    lps_array = [1] * n\n\n    # loop through all possible indices from 0 to n-2\n    for i in range(1, n-1):\n        # check if the character at current index is same as the previous character\n        if s[i] == s[i-1]:\n            # if same, check if the previous substring ending at index i-2 is also a palindrome\n            if lps_array[i-2] > 1:\n                lps_array[i] = lps_array[i-2] + 2\n            else:\n                lps_array[i] = 2\n        # if not same, check if the previous substring ending at index i-1 is also a palindrome\n        elif lps_array[i-1] > 1:\n            lps_array[i] = lps_array[i-1] + 1\n        else:\n            lps_array[i] = 1\n\n    # find the maximum length palindromic subsequence ending at index n-1\n    max_length = max(lps_array)\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in a given string.\n    \"\"\"\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    max_length = 1\n\n    # Fill in the dynamic programming table\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                max_length = max(max_length, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    max_length = 0\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n                if dp[i][j] > max_length:\n                    max_length = dp[i][j]\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    # create a table to store the length of LPS for all prefixes of the string\n    lps_table = [[0] * n for _ in range(n)]\n    # initialize LPS length as 0 for first character of the string\n    lps_table[0][0] = 0\n\n    # fill in the table using dynamic programming\n    for i in range(1, n):\n        # for each character in the string, check if it is a prefix of a previously calculated LPS\n        for j in range(i):\n            # if yes, take the maximum of the current character and the previous LPS length\n            if str[i] == str[j]:\n                lps_table[i][j] = lps_table[j][i-1] + 1\n            # if not, take the previous LPS length\n            else:\n                lps_table[i][j] = lps_table[j][i-1]\n\n    # return the maximum LPS length\n    return max(lps_table[i][j] for i in range(n) for j in range(i))"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # Create a 2D array to store the lengths of longest palindromic subsequences\n    lps_arr = [[0] * n for _ in range(n)]\n    # Initialize the first column and first row of the array\n    for i in range(n):\n        lps_arr[i][i] = 1\n    # Fill the rest of the array using dynamic programming\n    for i in range(2, n):\n        for j in range(i):\n            if str[j] == str[i]:\n                lps_arr[i][j] = lps_arr[j][i-1] + 2\n            else:\n                lps_arr[i][j] = max(lps_arr[i-1][j], lps_arr[j][i])\n    # Return the length of the longest palindromic subsequence\n    return lps_arr[n-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    n = len(s)\n    # creating a 2D array to store the length of longest palindromic subsequence for all characters and all lengths\n    lps_matrix = [[0]*(n+1) for _ in range(n+1)]\n\n    # initialising the length of longest palindromic subsequence for all characters and lengths\n    for i in range(n+1):\n        lps_matrix[i][0] = 0\n        lps_matrix[0][i] = 0\n\n    # filling the 2D array using dynamic programming approach\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if s[i-1] == s[j-1]:\n                lps_matrix[i][j] = lps_matrix[i-1][j-1] + 2\n            else:\n                lps_matrix[i][j] = max(lps_matrix[i-1][j], lps_matrix[i][j-1])\n\n    # finding the length of the longest palindromic subsequence in the given string\n    return lps_matrix[n][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(s):\n    n = len(s)\n    # create a 2D table to store the length of palindromic subsequences\n    table = [[0]*n for _ in range(n)]\n\n    # base case: all characters are palindromes of length 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # check for substrings of length 2 to n\n    for length in range(2, n+1):\n        # check for substrings of length i+1 to n\n        for i in range(n-length+1):\n            j = i+length-1\n            if s[i] == s[j]:\n                # if the characters are same, then check for longest palindrome\n                if table[i+1][j-1] == 1:\n                    table[i][j] = 2*table[i+1][j-1] + 2\n                else:\n                    table[i][j] = 2*table[i+1][j-1] + 1\n\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(string):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(string)\n    # Create a 2D table to store the lengths of longest palindromic subsequences\n    dp = [[0] * n for _ in range(n)]\n\n    # Fill the first row of the table (base cases)\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the table in bottom-up manner\n    for i in range(1, n):\n        for j in range(i):\n            if string[j] == string[i]:\n                dp[i][j] = dp[j + 1][i - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j + 1], dp[j][i])\n\n    # Find the length of the longest palindromic subsequence\n    max_length = dp[0][0]\n    start_index = 0\n\n    for i in range(1, n):\n        if dp[i][i] > max_length:\n            max_length = dp[i][i]\n            start_index = i\n\n    # Extract the subsequence from the string\n    subsequence = string[start_index:start_index + max_length]\n\n    return max_length, subsequence\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Create a 2D table to store the lengths of longest palindromic subsequences\n    # of all possible lengths from 1 to n\n    n = len(str)\n    table = [[0] * (n+1) for _ in range(n+1)]\n\n    # Initialize the table for empty string and base cases\n    for i in range(n+1):\n        table[i][0] = 0\n        table[0][i] = 0\n\n    # Fill the table using dynamic programming approach\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[n][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    \n    # Find all possible substrings of the string and store them in a list\n    substrings = [str[i:j+1] for i in range(len(str)) for j in range(i, len(str))]\n    \n    # Initialize variables to store the longest substrings\n    longest = \"\"\n    length = 0\n    \n    # Iterate over all possible substrings\n    for substring in substrings:\n        # Check if the substring is a palindrome\n        if substring == substring[::-1]:\n            # If it is, check if it is longer than the current longest\n            if len(substring) > length:\n                longest = substring\n                length = len(substring)\n    \n    # Return the length of the longest palindromic subsequence\n    return length"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    # Find the harmonic sum of n-1\n    n_minus_one_harmonic_sum = 1/n\n    \n    # Calculate the harmonic sum of n\n    harmonic_sum = 1\n    \n    # Iterate n-1 times\n    for i in range(1, n):\n        harmonic_sum += (i + 1)/n\n    \n    # Return the harmonic sum of n\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # initialize sum of harmonic series to 0\n    harmonic_sum = 0\n\n    # loop through the range from 1 to n-1\n    for i in range(1, n):\n        # calculate the harmonic sum by dividing 1 by the i-th term\n        harmonic_sum += 1 / i\n\n    # return the harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1, n):\n        result += 1 / i\n    return result"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 1\n    for i in range(1, n):\n        harmonic += 1 / i\n    return harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + ((1/(n-1))*(n-1)/2)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n-1)/2"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    # create a dictionary to store the frequency of each number in array_nums1\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # iterate through array_nums2 and check if each number is in freq_dict\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            freq_dict[num] -= 1\n            intersection.append(num)\n    \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes in two arrays as inputs and returns the intersection of the two arrays.\n    '''\n    # Create a set from the first array to eliminate duplicates\n    set_nums1 = set(array_nums1)\n    # Create an empty list to store the intersection of the two arrays\n    intersection = []\n    # Iterate through the second array\n    for num in array_nums2:\n        # If the number is in the set, add it to the intersection list\n        if num in set_nums1:\n            intersection.append(num)\n    # Return the intersection of the two arrays\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function finds the intersection of two arrays.\n    '''\n    # Create sets to store the elements of each array\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # Find the intersection of the sets\n    intersect = set1.intersection(set2)\n    \n    # Convert the intersect set back to a list and return it\n    return list(intersect)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    common_nums = []\n    for num in array_nums1:\n        if num in array_nums2:\n            common_nums.append(num)\n    return common_nums"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set from array_nums2 to remove duplicates\n    array_nums2_set = set(array_nums2)\n\n    # initialize an empty list to store the intersection\n    intersection = []\n\n    # iterate through array_nums1 and check if each element is in array_nums2_set\n    for num in array_nums1:\n        if num in array_nums2_set:\n            intersection.append(num)\n\n    # return the intersection\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns a new array containing the intersection of those arrays.\n    '''\n    \n    # Initialize the set to store the unique elements in the first array\n    set1 = set(array_nums1)\n    \n    # Initialize an empty list to store the intersection\n    intersection = []\n    \n    # Iterate over the second array\n    for num in array_nums2:\n        # If the number is present in the first array, add it to the intersection list\n        if num in set1:\n            intersection.append(num)\n            # Remove the number from the first array to avoid duplicates\n            set1.remove(num)\n    \n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes in two arrays as input and returns their intersection.\n    \"\"\"\n    # Create two dictionaries to store the frequency of each element in the arrays\n    freq_dict1 = {}\n    freq_dict2 = {}\n\n    # Iterate through the arrays and update the frequency dictionaries\n    for num in array_nums1:\n        freq_dict1[num] = freq_dict1.get(num, 0) + 1\n\n    for num in array_nums2:\n        freq_dict2[num] = freq_dict2.get(num, 0) + 1\n\n    # Find the intersection of the dictionaries by intersecting their keys\n    intersection = set(freq_dict1.keys()).intersection(set(freq_dict2.keys()))\n\n    # Create an empty list to store the intersection in ascending order\n    intersection_list = []\n\n    # Iterate through the intersection keys and add their corresponding values to the list in ascending order\n    for num in intersection:\n        intersection_list.append((num, min(freq_dict1.get(num, 0), freq_dict2.get(num, 0))))\n\n    # Sort the list in ascending order based on the values\n    intersection_list.sort(key=lambda x: x[1])\n\n    # Create a new list to store the intersection\n    new_list = []\n\n    # Iterate through the sorted intersection list and add the elements to the new list\n    for num, freq in intersection_list:\n        for i in range(freq):\n            new_list.append(num)\n\n    # Return the new list of intersection elements\n    return new_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Given two arrays, returns a new array that contains only the common elements.\n    \"\"\"\n    common_elements = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in common_elements:\n            common_elements.append(num)\n    return common_elements"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    count = 0\n    for elem in tup: \n        if elem == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Create an empty list to store the modified list\n    new_list = []\n\n    # Iterate through each element in the original list\n    for item in list:\n        # Insert the element before the current item\n        new_list.append(element)\n        new_list.append(item)\n\n    # Remove the first element of the new list (since it is the first element of the original list)\n    new_list.pop(0)\n\n    # Return the new list with the first element removed\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(lst)):\n        lst.insert(i, element)\n    return lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts the given element before each element in the list and returns the resulting list.\n    \"\"\"\n    return [elem] + lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Create a new list to store the modified list\n    modified_list = []\n    # Iterate through the list and insert the element before each element\n    for i in range(len(list)):\n        modified_list.append(element)\n        modified_list.append(list[i])\n    # Return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(lst, elem):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, \n    and returns the resulting list.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(elem)\n        new_lst.append(lst[i])\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r = abs(num)\n        phi = cmath.phase(num)\n        print(f\"({r:.2f}, {phi:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    \n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        \n        magnitude = abs(real**2 + imag**2)\n        angle = cmath.phase(number)\n        \n        polar_coordinates.append((magnitude, angle))\n    \n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        # Print the polar coordinates\n        print(f\"Polar coordinates of {num}: r={r}, theta={theta}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r, phi = cmath.polar(num)\n        \n        # Convert the magnitude from a complex number to a float\n        mag = abs(num)\n        \n        # Add the polar coordinate and magnitude to the result list\n        result.append((r, phi, mag))\n    \n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        pol = cmath.rect(real, imag)\n        print(f\"({pol.real:.2f}, {pol.imag:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        magnitude = cmath.sqrt(num.real**2 + num.imag**2)\n        angle = cmath.phase(num)\n\n        # Print the result\n        print(f\"The magnitude of {num} is {magnitude:.2f} and the angle is {angle:.2f} degrees.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # loop through the input list\n    for num in numbers:\n        # convert the complex number to polar coordinates\n        real = abs(num)\n        imag = cmath.phase(num)\n        # print the polar coordinates\n        print(\"The polar coordinates of\", num, \"are\", real, \"+\" + str(imag) + \"i\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        if isinstance(num, complex):\n            # Convert to polar coordinates\n            r = abs(num)\n            theta = cmath.phase(num)\n\n            # Add result to list\n            result.append([r, theta])\n        else:\n            # Convert to float if not already a float\n            num = float(num)\n\n            # Add result to list\n            result.append([num, 0])\n\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        complex_number = complex(number[0], number[1])\n        r = cmath.sqrt(complex_number.real**2 + complex_number.imag**2)\n        theta = cmath.phase(complex_number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(1, len(l)+1):\n        for comb in combinations_with_replacement(l, i):\n            color_combinations.append(tuple(comb))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = set(l)\n    combos = []\n    for color in colors:\n        sub_comb = []\n        for i in range(n):\n            sub_comb.append(color)\n        combos.append(tuple(sub_comb))\n    return combos"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all combinations (with repetition) of the given length and elements of the list\n    comb = combinations_with_replacement(l, n)\n    # Convert the generator object to a list of tuples\n    comb_list = [tuple(comb) for comb in comb]\n    return comb_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_list = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            comb_list.append(tuple(l[i:j]))\n    return comb_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    \"\"\"\n    Generate all combinations of the elements of the list l and length n with replacement.\n    Returns a list with a tuple for each combination.\n    \"\"\"\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations (with repetition) of the elements of the list l and length n, and return a list of tuples for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)-n+1):\n        comb = tuple(l[i:i+n])\n        result.append(comb)\n    return result"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(n):\n    '''\n    Helper function to check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime or not.\n        \"\"\"\n        if num <= 1:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_num1 = max(test_tup1)\n    max_num2 = max(test_tup2)\n\n    if max_num1 > max_num2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if the tuples are equal\n    if test_tup1 == test_tup2:\n        print(\"The two tuples are equal.\")\n    else:\n        # loop through the tuples and find the max value\n        max_value = None\n        for num in test_tup1 + test_tup2:\n            if max_value is None or num > max_value:\n                max_value = num\n        # print the max value\n        print(\"The maximum value in the two tuples is:\", max_value)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return None\n    \n    # Initialize variables for maximum values\n    max1 = max2 = 0\n    \n    # Compare each element in each tuple\n    for i in range(len(test_tup1)):\n        # If the element in test_tup1 is greater, update max1\n        if test_tup1[i] > max1:\n            max1 = test_tup1[i]\n        # If the element in test_tup2 is greater, update max2\n        elif test_tup2[i] > max2:\n            max2 = test_tup2[i]\n    \n    # Return the maximum tuple\n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    if max1 > max2:\n        return test_tup1\n    elif max1 < max2:\n        return test_tup2\n    else:\n        return max(test_tup1, test_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize max values to the first two elements\n    max1 = test_tup1[0]\n    max2 = test_tup2[0]\n\n    # Compare the second elements of the tuples\n    if test_tup1[1] > test_tup2[1]:\n        max1 = test_tup1[1]\n        max2 = test_tup2[1]\n    elif test_tup1[1] < test_tup2[1]:\n        max1 = test_tup1[1]\n        max2 = test_tup2[1]\n\n    # Compare the third elements of the tuples\n    if test_tup1[2] > test_tup2[2]:\n        max1 = test_tup1[2]\n        max2 = test_tup2[2]\n    elif test_tup1[2] < test_tup2[2]:\n        max1 = test_tup1[2]\n        max2 = test_tup2[2]\n\n    # Return the maximum tuple\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuples must have the same length.\")\n        return\n\n    # Compare the values of the tuples and find the maximum value\n    max_val = max(test_tup1[i] for i in range(len(test_tup1)))\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > max_val:\n            max_val = test_tup2[i]\n\n    return max_val"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # convert the tuples into lists to manipulate them\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # loop through the lists and compare the elements\n    for i in range(len(list1)):\n        if list1[i] > list2[i]:\n            list1[i], list2[i] = list2[i], list1[i]\n\n    # convert the lists back into tuples and return the maximum\n    return tuple(max(list1, list2))"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Function to check if a number is prime or not\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Function to find nth newman\u2013shanks\u2013williams prime number\n    def nth_newman_prime(n):\n        count = 0\n        num = 0\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num\n\n    # Return the nth newman-shanks-williams prime number\n    return nth_newman_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    p = 2\n    prime = False\n\n    # Loop until we find the nth newman-shanks-williams prime number\n    while count < n:\n        # Check if the current number is prime\n        if is_prime(p):\n            count += 1\n        # Increment the number\n        p += 1\n\n    # Return the nth newman-shanks-williams prime number\n    return p\n\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    # If n is less than 2, it is not prime\n    if n < 2:\n        return False\n    # If n is equal to 2 or 3, it is prime\n    elif n == 2 or n == 3:\n        return True\n    # Loop through all the numbers from 2 to the square root of n\n    for i in range(2, int(n ** 0.5) + 1):\n        # If n is divisible by i, it is not prime\n        if n % i == 0:\n            return False\n    # If we make it through the loop without finding a divisor, it is prime\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    # First, define the list of prime numbers up to 1000\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Initialize the count of newman-shanks-williams primes\n    count = 0\n\n    # Loop through the list of prime numbers and check if each number is a newman-shanks-williams prime\n    for p in primes:\n        if is_newman_prime(p, n):\n            count += 1\n\n        # If we've found the nth newman-shanks-williams prime, return its value\n        if count == n:\n            return p\n\n    # If we haven't found the nth newman-shanks-williams prime, return None\n    return None\n\ndef is_newman_prime(p, n):\n    # The nth newman-shanks-williams prime is the nth prime number raised to the power of the inverse of n\n    return pow(p, 1/n, 1000) == 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Returns the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    prime_count = 0\n    num = 2\n    while prime_count < n:\n        if is_prime(num):\n            prime_count += 1\n        num += 1\n    return num - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    sieve = [True] * (n+1)\n    sieve[0] = sieve[1] = False\n    p = 2\n    while p * p <= n:\n        if sieve[p]:\n            for i in range(p*p, n+1, p):\n                sieve[i] = False\n        p += 1\n    return [i for i in range(2, n+1) if sieve[i]]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Set initial values\n    count = 0\n    num = 1\n    prime_count = 0\n\n    # Iterate until count is equal to n\n    while count < n:\n        # Check if number is prime\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n\n        # If number is prime, increment count and update prime_count\n        if is_prime:\n            count += 1\n            prime_count += 1\n\n        # Update number for next iteration\n        num += 1\n\n    # Return the nth prime number\n    return num\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # initialize a counter for the number of primes found so far\n    count = 0\n\n    # initialize a set to store the primes found so far\n    primes = set()\n\n    # initialize a list to store the values of the first n primes found\n    primes_list = []\n\n    # loop over the values of n starting from 2\n    for i in range(2, n+1):\n\n        # check if the value is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n\n            # if it's prime, add it to the list and to the set\n            primes_list.append(i)\n            primes.add(i)\n\n            # increment the counter\n            count += 1\n\n            # if the number of primes found so far is equal to n, break the loop\n            if count == n:\n                break\n\n    # if there are n primes found, return the first one\n    if count == n:\n        return primes_list[0]\n    else:\n        return \"Not enough primes found\""
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the count of primes to 0\n    count = 0\n    # Initialize the list of primes to be generated\n    primes = []\n    # Initialize the current number being tested\n    num = 2\n    \n    while count < n:\n        # Check if the current number is prime\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # Add the current number to the list of primes\n            primes.append(num)\n            # Increment the count of primes\n            count += 1\n        # Increment the current number\n        num += 1\n    \n    # Return the nth prime in the list of primes\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num): \n        if num <= 1: \n            return False \n        for i in range(2, int(num**0.5) + 1): \n            if num % i == 0: \n                return False \n        return True \n\n    i = 1 \n    while True: \n        if is_prime(i): \n            if n == 1: \n                return i \n            n -= 1 \n        i += 1 "
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    p = 2\n    while count < n: \n        is_prime = True \n        for i in range(2, int(p**0.5)+1): \n            if p % i == 0: \n                is_prime = False \n                break \n        if is_prime: \n            count += 1 \n        p += 1 \n    return p"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(a/b for a,b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples should have the same length.')\n    for i in range(len(test_tup1)):\n        test_tup1[i] /= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must have the same length.\"\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] // test_tup2[i],)\n        except ZeroDivisionError:\n            return \"Error: Division by zero.\"\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([x / y for x, y in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1)!= len(test_tup2):\n        return 'Error: Tuples have different lengths.'\n    else:\n        for i in range(len(test_tup1)):\n            try:\n                result_tup += (test_tup1[i] / test_tup2[i],)\n            except ZeroDivisionError:\n                return 'Error: Division by zero.'\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of the input tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have equal length.\")\n    \n    # initialize a new tuple to store the result\n    result_tup = ()\n    \n    # loop through the tuples and perform element-wise division operation\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of both tuples are same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of both tuples must be same.\")\n        return\n    \n    # perform element-wise division of the tuples\n    result_tup = tuple([test_tup1[i]/test_tup2[i] for i in range(len(test_tup1))])\n    \n    # print the resultant tuple\n    print(\"Resultant tuple:\", result_tup)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if len(test_tup1[i]) == len(test_tup2[i]):\n            result.append([x / y for x, y in zip(test_tup1[i], test_tup2[i])])\n        else:\n            raise ValueError(\"Both tuples should have same length\")\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples should have the same length\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the length of the first part of the list\n    first_part_length = len(list1) // 2\n    \n    # Split the list into two parts\n    first_part = list1[:first_part_length]\n    second_part = list1[first_part_length:]\n    \n    # Return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create an empty list to store the first part of the list\n    first_part = []\n    # Create an empty list to store the second part of the list\n    second_part = []\n    # Initialize a counter variable to keep track of how many items have been added to the first part of the list\n    count = 0\n    \n    # Loop through the entire list\n    for item in list1:\n        # If the count is equal to L, append the current item to the second part of the list and reset the count to 0\n        if count == L:\n            second_part.append(item)\n            count = 0\n        # If the count is less than L, append the current item to the first part of the list and increment the count by 1\n        else:\n            first_part.append(item)\n            count += 1\n            \n    # Return the first and second parts of the list as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    mid = len(list1) // 2\n    part1 = list1[:mid]\n    part2 = list1[mid:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the length of the list is less than L\n    if len(list1) < L:\n        raise ValueError(\"The length of the list should be greater than or equal to L\")\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Check if the length of list is greater than the length of L\n    if len(list1) > L:\n        # Split the list into two parts\n        part1 = list1[:L]\n        part2 = list1[L:]\n        # Return the two parts in a tuple\n        return (part1, part2)\n    else:\n        # Raise an error if the length of list is not greater than the length of L\n        raise ValueError(\"Length of the list should be greater than L\")"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if L > len(list1):\n        raise ValueError(\"L is greater than the length of the list\")\n    n = len(list1) // 2\n    return (list1[:n], list1[n:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts\n    where the length of the first part of the list is L.\n\n    Parameters:\n    lst (list): The list to be split.\n    L (int): The length of the first part of the list.\n\n    Returns:\n    A tuple containing the two parts of the list.\n    '''\n    # Split the list into two parts\n    part1 = lst[:L]\n    part2 = lst[L:]\n\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # check if L is an integer\n    if not isinstance(L, int):\n        raise TypeError('L must be an integer')\n\n    # check if L is within the range of list1\n    if L > len(list1):\n        raise ValueError('L must be within the range of the list')\n\n    # split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts of length L\n    list1_short = list1[:L]\n    list1_long = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (list1_short, list1_long)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # converting the input height to centimeters\n    height_in_centimeters = h_age * 2.54\n    \n    # calculating the dog's age in dog years\n    dog_age_in_dog_years = height_in_centimeters / 12\n    \n    # returning the dog's age in dog years\n    return dog_age_in_dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * int(h_age)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 7 * h_age\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # Calculate the dog's age in dog years\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n\n    Parameters:\n    h_age: int, the height of the dog in inches\n\n    Returns:\n    age_in_years: int, the age of the dog in dog's years\n    '''\n\n    # Calculate the age in dog's years\n    age_in_years = h_age / 7.0\n\n    # Return the calculated age\n    return age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7*h_age\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Define an empty list to store the resulting lists\n    result = []\n\n    # Define a variable to keep track of the current position in the input list\n    current_pos = 0\n\n    # Loop through the input list\n    while current_pos < len(S):\n        # Check if we've reached the end of the input list and we should stop splitting\n        if (current_pos + 1) % step == 0:\n            # If we've reached the end of the input list, create a new list with the remaining elements\n            result.append(S[current_pos:])\n            # Reset the current position to the start of the input list\n            current_pos = 0\n        else:\n            # If we haven't reached the end of the input list, move on to the next element\n            current_pos += 1\n\n    # Return the resulting lists\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    while n <= len(S):\n        result.append(S[:n])\n        S = S[n:]\n        n += step\n    result.append(S)\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Convert the input list to a set to remove duplicates\n    S = set(S)\n    # Split the list into smaller lists\n    sub_lists = [S[i:i+step] for i in range(0, len(S), step)]\n    # Return the resulting list of lists\n    return sub_lists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    for i in range(0, len(S), step):\n        split_list.append(S[i:i+step])\n    return split_list"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        return []\n    result = []\n    i = 0\n    while i < len(S):\n        j = i + step\n        if j > len(S):\n            j = len(S)\n        result.append(S[i:j])\n        i = j\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        return []\n    elif len(S) % step == 0:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)] + [S[len(S)-step:]]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n    # Iterate through the input list and split it for every nth element\n    for i in range(0, len(S), step):\n        # Append the current slice to the result list\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = l * l * l\n    return 6 * s"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    # iterate over first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current number to the sum\n        sum += i*i\n    # return the sum of squares of odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n        \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count ** 2\n        count += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):   # define the function square_Sum\n    sum_of_squares = 0  # initialize the sum of squares to 0\n    for i in range(2, n+1, 2):  # loop through the first n odd natural numbers\n        sum_of_squares += i**2  # add the square of each odd natural number to the sum\n    return sum_of_squares  # return the sum of squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    # initialize sum variable\n    sum = 0\n    \n    # iterate through odd natural numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add the square of the current number to the sum\n        sum += i ** 2\n    \n    # return the sum of the squares of the odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_numbers = []\n    for i in range(1, n+1, 2):\n        odd_numbers.append(i)\n    square_sum = sum(odd_numbers)\n    return square_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Define the symbols for the stars\n    symbols = [\"*\", \"*\", \"*\", \"*\", \"*\"]\n    # Define the base length of the stars\n    base_len = len(symbols[0])\n    # Define the total number of stars\n    num_stars = n * base_len\n\n    # Initialize the current position of the cursor\n    pos = 0\n    # Initialize the string to store the result\n    result = \"\"\n\n    # Loop through each row of stars\n    for row in range(n):\n        # Loop through each symbol in the row\n        for sym in range(base_len):\n            # Add the symbol to the result\n            result += symbols[pos]\n            # Move the cursor to the next position\n            pos = (pos + 1) % base_len\n\n    # Return the resulting string of stars\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # initialize a variable to keep track of the current number\n    current_num = 1\n\n    # loop through the first n-1 numbers\n    for i in range(1, n):\n        # add the current number to the total number of stars\n        current_num = current_num * 2\n\n    # return the total number of stars\n    return current_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the number of stars to be printed\n    num_stars = 1\n\n    # Initialize the number of spaces to be printed\n    num_spaces = n - 1\n\n    # Print the number of spaces\n    for i in range(num_spaces):\n        print(\" \", end=\"\")\n\n    # Print the number of stars\n    for i in range(num_stars):\n        print(\"*\", end=\"\")\n\n    # Print the remaining spaces\n    for i in range(num_stars, num_stars + num_spaces):\n        print(\" \", end=\"\")\n\n    # Print the remaining stars\n    for i in range(num_stars + num_spaces, n):\n        print(\"*\", end=\"\")\n\n    # Print a new line at the end\n    print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    # initialize the result to 1\n    result = 1\n    \n    # loop n times\n    for i in range(1, n+1):\n        # multiply the result by 2\n        result *= 2\n        \n        # add 1 to the result\n        result += 1\n    \n    # return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through each digit in the number n\n    for i in str(n): \n        # Add the digit to the count variable\n        count += int(i)\n\n    # Return the count variable\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Create an empty string to store the output\n    output = \"\"\n    # Loop through each digit of the input number\n    for digit in str(n):\n        # Create a list of numbers from 1 to 9\n        numbers = list(range(1, 10))\n        # Randomly select a number from the list and append it to the output string\n        output += str(numbers.pop(randint(0, len(numbers)-1)))\n        # Add a line break to separate each digit\n        output += \"\\n\"\n    # Return the output string\n    return output[:-1]"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize a variable to hold the star number\n    star_num = \"\"\n    \n    # loop n times to add the nth star number to the star_num variable\n    for i in range(n):\n        # add the nth star to the star_num variable\n        if i == 0:\n            star_num += \"*\"\n        elif i == 1:\n            star_num += \"**\"\n        elif i == 2:\n            star_num += \"***\"\n        elif i == 3:\n            star_num += \"****\"\n        else:\n            # if n is greater than 4, add an asterisk to the star_num variable\n            # to avoid an index out of range error\n            star_num += \"*\"\n    \n    # return the star_num variable as the output of the function\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*\"\n    elif n % 2 == 0:\n        return find_star_num(n//2) + \"*\" + find_star_num(n//2)\n    else:\n        return find_star_num((n//2)+1) + \"*\" + find_star_num((n//2)+1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Define the pattern of the star numbers\n    pattern = '*' * 5\n\n    # Initialize a variable to store the total number of stars\n    total_stars = 0\n\n    # Loop n times and add the pattern to the total stars\n    for i in range(1, n+1):\n        total_stars += pattern\n\n    # Print the total number of stars\n    print(\"The\", n, \"th star number is:\", total_stars)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    if n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n-1)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n\n    Parameters:\n    k (str): A character.\n\n    Returns:\n    int: The ascii value of the character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = str(k) # convert the character to string\n    k = ord(k) # find the ascii value of the character\n    return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0  \n    for i in range(len(arr)):  \n        if i % 2 == 0:  \n            if arr[i] % 2 == 0:  \n                sum_even += arr[i]  \n    return sum_even  "
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    sum = 0\n    count = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            count += 1\n    \n    return sum, count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even_index += arr[i]\n    return sum_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    count = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            count += 1\n            if count % 2 == 0:\n                break\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = []\n    sum = 0\n    \n    for i in range(2, n+1, 2):\n        power = 5\n        result = i**power\n        if result % 2 == 0:\n            sum += result\n            even_numbers.append(result)\n    \n    return sum, even_numbers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = [i for i in range(2, n+1, 2)]\n    sum_of_even_powers = 0\n    for number in even_numbers:\n        sum_of_even_powers += number**5\n    return sum_of_even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        sum += i ** 5\n    \n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_of_powers += i ** 5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns the sum of the first `n` even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Initialize an empty list to store the rear elements of the tuples\n    rear_elements = []\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Get the last element of the tuple using slicing notation\n        rear_element = test_list[i][-1]\n        # Add the rear element to the list of rear elements\n        rear_elements.append(rear_element)\n    # Return the list of rear elements\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tuple_element in test_list:\n        rear_list.append(tuple_element[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Create an empty list to store the rear elements\n    rear_list = []\n\n    # Iterate over each tuple in the input list\n    for tup in test_list:\n        # Append the rear element of the current tuple to the rear_list\n        rear_list.append(tup[-1])\n\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            result_tup += (test_tup1[i],)\n        else:\n            result_tup += (-test_tup1[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return [(x1-x2) for x1, x2 in zip(test_tup1, test_tup2)]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for index, value in enumerate(test_tup1):\n        if index < len(test_tup2):\n            test_tup1[index] -= test_tup2[index]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            new_tup.append(test_tup1[i] - test_tup2[i])\n        else:\n            new_tup.append(test_tup1[i])\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n\n    sub_tuple = ()\n    for i in range(len(test_tup1)):\n        sub_tuple += (test_tup1[i] - test_tup2[i],)\n\n    return sub_tuple"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            if test_tup1[i]!= test_tup2[i]:\n                test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    substracted_tuples = []\n    for i in range(len(test_tup1)):\n        substracted_tuples.append(test_tup1[i] - test_tup2[i])\n    return substracted_tuples"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize sum to 0\n    sum = 0\n\n    # Loop through the even indices of the binomial coefficients\n    for i in range(0, n, 2):\n        # Calculate the binomial coefficient at index i\n        coeff = math.comb(n, i)\n        # Check if the index is even\n        if i % 2 == 0:\n            # Add the even binomial coefficient to the sum\n            sum += coeff\n\n    # Return the sum of even binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math  \n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    #initializing the sum of even index binomial coefficients to 0\n    even_sum = 0\n    \n    #iterating through the even indices of the first n terms of the binomial coefficients sequence\n    for i in range(0, n, 2):\n        #calculating the value of the even index term\n        term = math.comb(n, i)\n        \n        #adding the value to the sum of even index binomial coefficients\n        even_sum += term\n        \n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n\n    #initialize the sum of even binomial coefficients to 0\n    sum_even = 0\n\n    #loop through all the even numbers between 1 and n\n    for i in range(2, n+1, 2):\n\n        #calculate the binomial coefficient of i and j\n        binomial_coeff = math.comb(i, j)\n\n        #if the index j is even, add its binomial coefficient to the sum_even\n        if j % 2 == 0:\n            sum_even += binomial_coeff\n\n    #return the sum of even binomial coefficients\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients using the formula:\n    n * (n-1) *... * (n-k+1) / k!\n    where k is the even index.\n\n    Args:\n    n (int): The positive integer for which to find the sum of even index binomial coefficients.\n\n    Returns:\n    int: The sum of even index binomial coefficients.\n    \"\"\"\n\n    # Initialize the sum variable\n    sum_even_binomial_coeffs = 0\n\n    # Loop through the even indices\n    for i in range(0, n, 2):\n        # Calculate the even index binomial coefficient using the formula above\n        even_binomial_coeff = (n * math.factorial(n - i)) / math.factorial(i)\n        # Add the even index binomial coefficient to the sum\n        sum_even_binomial_coeffs += even_binomial_coeff\n\n    # Return the sum of even index binomial coefficients\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 2:\n        return 0\n    elif n == 2:\n        return math.factorial(2) // 2\n    else:\n        even_sum = 0\n        for i in range(2, n+1, 2):\n            even_sum += math.factorial(i) // math.factorial(n-i)\n        return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even = 0\n    for i in range(1, n+1):\n        binomial = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += binomial\n\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients using matrix exponentiation.\n    '''\n    # Initialize a list to store the values of the binomial coefficients\n    coeff_list = []\n    # Initialize a list to store the values of the matrix raised to the power of the index\n    matrix_list = []\n    # Initialize a list to store the values of the even index binomial coefficients\n    even_coeff_list = []\n    # Initialize a list to store the values of the odd index binomial coefficients\n    odd_coeff_list = []\n    # Initialize the first row of the matrix\n    matrix_row = [1]\n    # Loop through the values of the index\n    for i in range(n):\n        # Calculate the binomial coefficient of even and odd indices\n        even_coeff = math.factorial(i) / math.factorial(n-i)\n        odd_coeff = math.factorial(n-i) / math.factorial(i)\n        # Append the values to their respective lists\n        coeff_list.append(even_coeff)\n        even_coeff_list.append(even_coeff)\n        odd_coeff_list.append(odd_coeff)\n        # Calculate the matrix raised to the power of the index\n        matrix_row = [odd_coeff] + [0] * (n-1)\n        matrix_list.append(matrix_row)\n    # Initialize the result to 0\n    result = 0\n    # Loop through the values of the even indices\n    for i in range(n):\n        # Calculate the sum of the even index binomial coefficients\n        even_sum = sum(even_coeff_list[:i+1])\n        # Calculate the sum of the even index binomial coefficients raised to the power of the even indices\n        even_pow_sum = sum([even_coeff_list[i]**(2*j+1) for j in range(i)])\n        # Calculate the sum of the odd index binomial coefficients raised to the power of the odd indices\n        odd_pow_sum = sum([odd_coeff_list[j]**(2*i+1) for j in range(n)])\n        # Calculate the sum of the even and odd index binomial coefficients raised to the power of the index\n        even_odd_pow_sum = sum([coeff_list[j]**(2*i+1) for j in range(n)])\n        # Calculate the final sum of the even and odd index binomial coefficients raised to the power of the index\n        final_pow_sum = even_pow_sum + odd_pow_sum + even_odd_pow_sum\n        # Update the result by adding the sum of even and odd index binomial coefficients raised to the power of the index\n        result += final_pow_sum * matrix_list[i][i]\n    return result\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        for j in range(1, 2*i):\n            sum += math.comb(i, j)\n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14 * r ** 2 # calculate the area of the cylinder\n    volume = area * h # calculate the volume of the cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (3/5) * pi * (r**2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Formula to find the volume of a cylinder\n    v = 3.14159 * r**2 * h\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Formula for volume of a cylinder\n    vol = (3/4) * 3.14159 * r**2 * h\n    \n    # Return the volume of the cylinder\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * (r ** 2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*r**2*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159*(r**2)*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14159 * r * r * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Create an empty dictionary to store the filtered entries\n    filtered_dict = {}\n    # Loop through each entry in the original dictionary\n    for key, value in dict.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # Add the entry to the filtered dictionary\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k:v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for elem in test_tup:\n        if elem == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            break\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # Initialize sum of decagonal numbers\n    total_sum = 0\n\n    # Iterate through the range from 1 to n\n    for i in range(1, n+1):\n        # Calculate the decagonal number and add it to the total sum\n        decagonal_num = (5 * i * (i + 1)) / 2\n        total_sum += decagonal_num\n\n    # Check if the total sum is a decimal number\n    if isinstance(total_sum, float):\n        return False\n\n    # If the total sum is an integer, convert it to a string and return it\n    return str(total_sum)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    if n < 1:\n        return False\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return is_num_decagonal(n//2) + is_num_decagonal(n//2)\n    else:\n        return is_num_decagonal((n//2)+1)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        dec_num = (2*n-1) ** 2\n        if dec_num <= 100:\n            return False\n        else:\n            return True"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    return (5*n**2 + 32*n + 16)/6.0"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    decagonal_num = 0\n\n    while i <= n:\n        decagonal_num += i\n        i += 1\n\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #initialize the count variable\n    count = 0\n\n    #initialize the sum variable\n    sum = 0\n\n    #loop until the count reaches n\n    while count < n:\n\n        #add 1 to the sum\n        sum += 1\n\n        #multiply the sum by 3 and add 1\n        sum = 3*sum + 1\n\n        #add 1 to the count\n        count += 1\n\n    #return the sum\n    return sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a decagonal number, and False otherwise.\n    A decagonal number is a positive integer that can be expressed as the sum of two other positive integers.\n\n    For example, 6 is a decagonal number because 6 = 2 + 4, and 2 + 4 = 6.\n\n    Input: n (integer)\n    Output: True or False\n    \"\"\"\n    # Check if n is an integer\n    if not isinstance(n, int):\n        return False\n    \n    # Initialize the sum of two other positive integers to 1\n    sum_1 = 1\n    sum_2 = 1\n    \n    # Loop n times to add up the two other positive integers\n    for i in range(2, n):\n        # Add the previous two positive integers to get the next two\n        sum_1 = sum_2 + sum_1\n        sum_2 = i\n    \n    # If the sum of the two other positive integers is equal to n, then n is a decagonal number\n    if sum_1 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        num = 1\n        for i in range(1, n):\n            num = (num * (2 * i - 1)) // 2\n        return num == 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (5 * n * n + 3 * n) // 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    for i in range(1, n+1):\n        decagonal_num += i * i\n    return decagonal_num\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, num in enumerate(dlist):\n        if num == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store the elements of the list\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements in the list are unique, False otherwise.\n    \"\"\"\n    # initialize a set to store unique elements\n    unique_set = set()\n    \n    # iterate over each element of the list and check if it is already in the set\n    for element in test_list:\n        if element in unique_set:\n            return False\n        else:\n            unique_set.add(element)\n    \n    # if we reach this point, all elements are unique\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # Convert the list to set to remove duplicates\n    unique_set = set(test_list)\n    # Check if the length of set is equal to the length of original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set(test_list)\n    \n    # If the length of the set is equal to the length of the list, then all the elements are unique\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store unique elements\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the original list\n    return len(unique_set) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n    # Loop through each element in the list\n    for element in test_list:\n        # Check if the element is already in the set\n        if element in unique_set:\n            # If it is, return False\n            return False\n        # Otherwise, add the element to the set\n        else:\n            unique_set.add(element)\n    # If all elements are unique, return True\n    return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Error: The two lists should have the same length\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i]-nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    #initialize an empty list to store the result\n    result = []\n    #loop through the lists and subtract the elements\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    #return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the length of both lists are equal.\n    if len(nums1)!= len(nums2):\n        print(\"Error: The length of both lists must be equal.\")\n        return\n\n    # Initialize a new list to store the result.\n    result = []\n\n    # Loop through the elements of both lists.\n    for i in range(len(nums1)):\n        # Subtract the elements and append the result to the new list.\n        result.append(nums1[i] - nums2[i])\n\n    # Return the new list of results.\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the lists are of equal length\n    if len(nums1)!= len(nums2):\n        print(\"Error: lists must have equal length\")\n        return\n    \n    # create a new list to store the result\n    result = []\n    \n    # subtract each element of nums1 from nums2\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    # return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    Args:\n    nums1 (list): A list of numbers.\n    nums2 (list): A list of numbers.\n\n    Returns:\n    list: A list of differences between the two input lists.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    for digit in str(n):\n        freq = digit_freq[digit]\n        if freq > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    frequency = [0] * 10\n\n    for digit in str(n):\n        frequency[int(digit)] += 1\n\n    for digit in range(10):\n        if frequency[digit] > n // 10:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n\n    freq = [0] * 10  # create a list to store the frequency of each digit\n\n    # iterate through each digit in n\n    for digit in str(n):\n        # increment the frequency of the digit in freq list\n        freq[int(digit)] += 1\n\n    # iterate through the freq list and check whether the frequency is less than or equal to the digit itself\n    for digit in freq:\n        if digit > digit:\n            return False  # if any frequency is greater than the digit itself, return False\n\n    return True  # if all frequencies are less than or equal to the digit itself, return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n    \n    for digit in digit_freq:\n        if digit_freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    # Convert the integer to a string\n    n_str = str(n)\n\n    # Loop through each character in the string\n    for char in n_str:\n        # Check if the frequency of the current character is less than or equal to the character itself\n        if char in n_str and n_str.count(char) > 1:\n            return False\n\n    # If no character has a frequency greater than 1, the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    # Convert the integer to a string\n    str_n = str(n)\n\n    # Split the string into a list of digits\n    digits = list(str_n)\n\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # Loop through each digit in the string and update the frequency in the dictionary\n    for digit in digits:\n        freq[digit] = freq.get(digit, 0) + 1\n\n    # Loop through each digit in the string and compare its frequency with the digit itself\n    for digit in digits:\n        if freq[digit] > int(digit):\n            return False\n\n    # If all digits have valid frequency, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    # convert the integer to a string\n    n_str = str(n)\n\n    # create a dictionary to store the frequency of digits\n    freq_dict = {}\n\n    # iterate over each character in the string\n    for char in n_str:\n        # convert the character to an integer and increment its frequency in the dictionary\n        freq_dict[int(char)] = freq_dict.get(int(char), 0) + 1\n\n    # iterate over each digit in the integer\n    for digit in range(10):\n        # check if the frequency of the current digit in the dictionary is greater than or equal to the digit itself\n        if freq_dict.get(digit, 0) > digit:\n            # if it is, return False, indicating that the integer does not meet the requirement\n            return False\n\n    # if all digits have a frequency of 1 or less, return True, indicating that the integer meets the requirement\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    freq = [0] * 10  # Initialize frequency array with 0 for each digit\n\n    # Count the frequency of each digit in the integer\n    for digit in str(n):\n        freq[int(digit)] += 1\n\n    # Check whether the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if digit > n // len(freq):\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = list(str(n))\n    freq = {}\n\n    # count the frequency of each digit in the integer\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # check if the frequency of each digit in the integer is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    # create a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n\n    # check if the frequency of each digit in the integer is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    # Check if the list is empty\n    if len(list) == 0:\n        return True\n\n    # Check if the first element of the list is equal to the given element\n    if list[0] == element:\n        # Check if all elements of the list are also equal to the given element\n        for item in list[1:]:\n            if item!= element:\n                return False\n        return True\n\n    # If the first element is not equal to the given element, the function returns False\n    return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    if len(list) == 0:\n        return True\n    else:\n        return list[0] == element and check_element(list[1:],element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Initialize a variable to keep track of whether all elements in the list are equal to the given element\n    all_elements_equal = True\n    \n    # Loop through each element in the list\n    for item in list:\n        # Check if the current element is not equal to the given element\n        if item!= element:\n            # If an element is found that is not equal to the given element, set the all_elements_equal variable to False and break out of the loop\n            all_elements_equal = False\n            break\n    \n    # Return the value of the all_elements_equal variable\n    return all_elements_equal"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list))!= 1:\n        return False\n    else:\n        return all(x == element for x in list)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\w*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=b.{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a*b[23]*')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('a.*b{2,3}')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b{2,3}')\n    matches = pattern.findall(text)\n    return len(matches) > 0"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def text_match_two_three(text):\n    pattern = re.compile(r'(?<=a)\\1*[bB]{2,3}')\n    return pattern.search(text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'(ab){2,3}(a)')\n    matches = re.findall(pattern, text)\n    return any(matches)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # initialize variables to store the maximum sub-array sum and current sub-array sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # loop through the array a and repeat it k times\n    for i in range(k):\n        curr_sum += a[0]\n        max_sum = max(max_sum, curr_sum)\n        \n        # shift the array by 1 and update the current sum\n        for j in range(n-1):\n            a[j], a[j+1] = a[j+1], a[j]\n            curr_sum -= a[j]\n            curr_sum += a[j+1]\n    \n    # return the maximum sub-array sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    '''\n\n    # Create a new array with repeated elements\n    new_arr = [a[i] for i in range(n)]\n    new_arr += a[:k-1] * k\n\n    # Initialize variables\n    max_sum = max_sum_non_repeating = a[0]\n    current_sum = 0\n\n    # Loop through the new array\n    for i in range(n-k):\n        # Calculate the sum of the current window\n        current_sum += new_arr[i+k]\n        # Check if the current window is a maximum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_non_repeating = new_arr[i:i+k]\n        # Check if the current window is a maximum even if it has repeating elements\n        elif current_sum > max_sum_non_repeating:\n            max_sum_non_repeating = new_arr[i:i+k]\n\n    return max_sum_non_repeating\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create the modified array by repeating the given array k times\n    modified_array = a * k\n    # initialize variables for the largest sum, current sum, and start and end indices of the current subarray\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n\n    # traverse the modified array and find the largest sum of a contiguous subarray\n    for i in range(n):\n        # if the current element is negative, start a new subarray\n        if current_sum < 0:\n            start = i\n            current_sum = modified_array[i]\n        # otherwise, add the current element to the current sum\n        else:\n            current_sum += modified_array[i]\n        # if the current sum becomes greater than the max sum, update the max sum and end index\n        if current_sum > max_sum:\n            max_sum = current_sum\n            end = i\n    # return the maximum sum of the subarray\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # create the modified array by repeating the original array k times\n    modified_array = [a[i] for i in range(n)]\n    for i in range(k):\n        modified_array.extend(a)\n    modified_array.sort()\n\n    # find the maximum sum of a contiguous array in the modified array\n    max_sum = max(modified_array)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    This function finds the largest sum of a contiguous array in the modified array formed by repeating the given array k times.\n    '''\n    \n    # Initialize two variables to store the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Loop through the array k times and add the repeated array to the current sum\n    for i in range(k):\n        current_sum += a\n    \n    # Update the maximum sum if the current sum is greater than the maximum sum\n    max_sum = max(max_sum, current_sum)\n    \n    # Loop through the array n-k times and subtract the repeated array from the current sum\n    for i in range(n-k):\n        current_sum -= a[i]\n    \n    # Update the maximum sum if the current sum is greater than the maximum sum\n    max_sum = max(max_sum, current_sum)\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the length of the array\n    length = len(a)\n\n    # Initialize the maximum sum and the current sum as the first element of the array\n    max_sum = a[0]\n    curr_sum = a[0]\n\n    # Loop through the array from the second element to the end\n    for i in range(1, length):\n        # Add the current element to the current sum\n        curr_sum += a[i]\n\n        # If the current sum becomes greater than the maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # If the current sum becomes negative, reset it to zero\n        if curr_sum < 0:\n            curr_sum = 0\n\n        # If the current index is a multiple of k, add the current element to the current sum\n        if i % k == 0:\n            curr_sum += a[i]\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize max_sum and max_sum_index\n    max_sum = float('-inf')\n    max_sum_index = 0\n\n    # Iterate over each element of the array\n    for i in range(n):\n        # Initialize the current_sum and count\n        current_sum = a[i]\n        count = 1\n\n        # Iterate over the next k-1 elements of the array\n        for j in range(i+1, min(i+k, n)):\n            current_sum += a[j]\n            count += 1\n\n        # Check if the current sum is greater than the max sum so far\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_index = i\n\n    # Return the maximum sum and its index\n    return max_sum, max_sum_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    max_window_sum = float('-inf')\n    window_sum = 0\n    count = 0\n\n    for i in range(k):\n        for j in range(n):\n            window_sum += a[j]\n        if window_sum > max_window_sum:\n            max_window_sum = window_sum\n            count = 0\n        elif window_sum == max_window_sum:\n            count += 1\n        window_sum -= a[i]\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    # Iterate over each element of the given array\n    for i in range(k):\n        current_sum += a[0]\n        # If the current sum becomes greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        # Iterate over each element of the given array and add them to the current sum\n        for j in range(1, n):\n            current_sum += a[j]\n            # If the current sum becomes greater than the maximum sum, update the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n    # Return the maximum sum of a contiguous array in the modified array which is formed by repeating the given array k times\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Find the maximum sum of non-repeating array\n    max_sum = max(a)\n\n    # Create a modified array with repeated elements\n    modified_array = a * k\n\n    # Find the maximum sum of modified array\n    max_modified_sum = max(modified_array)\n\n    # Calculate the difference between maximum sum of non-repeating and maximum sum of modified array\n    return max_modified_sum - max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Initialize a variable to store the sum of squares of even natural numbers\n    sum_of_squares = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Add the square of the current even number to the sum of squares\n        sum_of_squares += i*i\n\n    # Return the sum of squares of even natural numbers\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        sum_of_squares += count**2\n        count += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 2\n    while i <= n:\n        sum += i ** 2\n        i += 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n\n    sum_of_squares = 0\n\n    # iterating from 1 to n\n    for i in range(2, n+1, 2):\n        # calculating square of i\n        square = i*i\n        # adding square to sum_of_squares\n        sum_of_squares += square\n\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of squares\n    total_sum = 0\n\n    # Iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the square of the current even number\n        square = i**2\n\n        # Add the square to the total sum\n        total_sum += square\n\n    # Return the total sum of squares\n    return total_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(1, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    total_sum = 0\n    for i in range(2, n+1, 2):\n        total_sum += i**2\n    return total_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        sum += count * count\n        count += 2\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxLength = 0\n    maxList = []\n    \n    for i in range(len(list1)):\n        if len(list1[i]) > maxLength:\n            maxLength = len(list1[i])\n            maxList = [list1[i]]\n        elif len(list1[i]) == maxLength:\n            maxList.append(list1[i])\n    \n    return maxList"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for lst in list1:\n        lengths.append(len(lst))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for lst in list1:\n        lengths.append(len(lst))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_list = []\n    for lst in list1:\n        if len(lst) > len(max_list):\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        lengths = [len(x) for x in sublist]\n        max_length = max(lengths)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for item in list1:\n        if len(item) > len(max_list):\n            max_list = item\n    return max_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D array to store the number of ways to paint the fence\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n\n    # Base cases: if n=0 or k=0, there is only one way to paint the fence\n    if n == 0 or k == 0:\n        dp[0][0] = 1\n\n    # Fill in the rest of the array using the recursive formula\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1:\n                dp[i][j] = dp[i-1][j]\n            elif j == 1:\n                dp[i][j] = dp[i][j-1]\n            elif dp[i-1][j-1] == 0:\n                dp[i][j] = dp[i-1][j]\n            elif dp[i][j-1] == 0:\n                dp[i][j] = dp[i][j-1]\n            elif dp[i-1][j] == 0:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1]\n\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case\n    if n == 1:\n        return 1\n    # recursive case\n    ways = 0\n    for color in range(k):\n        ways += count_no_of_ways(n-1, k)\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [[0] * (k + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i == 1 or j == 1:\n                ways[i][j] = 1\n            else:\n                ways[i][j] = ways[i - 1][j] + ways[i][j - 1]\n\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def helper(curr_count, prev_color, prev_posts):\n        if curr_count == n:\n            return 1\n        if curr_count > n:\n            return 0\n        res = 0\n        for i in range(k):\n            if i!= prev_color:\n                res += helper(curr_count+1, i, prev_posts+1)\n        return res\n    \n    return helper(0, -1, 0)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize two lists to store the number of ways of painting the fence with k colors and at most 2 adjacent posts having the same color\n    ways_1 = [0] * k\n    ways_2 = [0] * k\n\n    # Initialize the number of ways of painting the fence with 2 colors and at most 1 adjacent post having the same color\n    ways_1[0] = 1\n    ways_1[1] = 1\n\n    # Initialize the number of ways of painting the fence with 1 color and at most 0 adjacent posts having the same color\n    ways_2[0] = 1\n\n    # Loop through the range of n-1\n    for i in range(2, n):\n        # Loop through the range of k\n        for j in range(k):\n            # If the previous color is the same as the current color and there are at most 1 adjacent post having the same color, add 1 to the number of ways of painting the fence with k colors and at most 2 adjacent posts having the same color\n            if j == 0 or ways_1[j-1] == ways_2[j]:\n                ways_1[j] += ways_1[j-1]\n\n            # If the previous color is different from the current color and there are at most 0 adjacent posts having the same color, add 1 to the number of ways of painting the fence with k colors and at most 1 adjacent post having the same color\n            if j > 0 and ways_1[j-1]!= ways_2[j]:\n                ways_2[j] += ways_1[j-1]\n\n    # Return the number of ways of painting the fence with k colors and at most 2 adjacent posts having the same color\n    return ways_2[k-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    def backtrack(start, color, count, result):\n        if count == 0:\n            result.append(color)\n        if start == n:\n            result.sort()\n            return result\n        for i in range(start, n):\n            if i > start and colors[i] == colors[i - 1]:\n                continue\n            colors[i] = color\n            backtrack(i + 1, color, count - 1, result)\n            colors[i] = 0\n\n    colors = [0] * n\n    result = []\n    backtrack(0, 0, 2, result)\n    return result\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a dictionary to store the number of ways for each set of colors\n    ways = {}\n\n    # Initialize the number of ways for all colors to 1\n    for i in range(k):\n        ways[i] = 1\n\n    # Iterate through all possible combinations of colors\n    for i in range(n):\n        # For each set of colors, calculate the number of ways to paint the fence with n-1 posts and k-1 colors\n        for j in range(k):\n            ways[j] *= (n-i)\n\n    # Return the maximum number of ways\n    return max(ways.values())"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D array to store the count of ways for each color combination\n    count = [[0 for j in range(k)] for i in range(n)]\n    \n    # Initialize the count of ways for a single color combination\n    count[0][0] = 1\n    \n    # Fill in the remaining counts using dynamic programming\n    for i in range(1, n):\n        for j in range(k):\n            for l in range(k):\n                # Check if the current color combination is valid\n                if (i - 1 >= 0 and count[i - 1][l] > 0) or (l - 1 >= 0 and count[i][l - 1] > 0):\n                    count[i][j] += count[i - 1][l] if l == j else 0\n                \n    # Return the number of ways of painting the fence\n    return count[n - 1][0]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    def backtrack(start, end, color_count, ways):\n        if start == end:\n            if color_count <= k:\n                ways[start] = ways.get(start, 0) + 1\n            return\n\n        for i in range(start, end):\n            if i > start and fence[start][i] == fence[start][i-1]:\n                continue\n\n            if fence[start][i] not in color_set:\n                color_set.add(fence[start][i])\n                color_count += 1\n                ways[i] = ways.get(i, 0) + 1\n                backtrack(i+1, end, color_count, ways)\n                color_count -= 1\n                color_set.remove(fence[start][i])\n\n    fence = [[] for _ in range(n)]\n    for i in range(n):\n        row = list(map(int, input().split()))\n        fence[i] = row\n\n    ways = [0] * n\n    color_set = set()\n    backtrack(0, n-1, 0, ways)\n\n    return ways[-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize the count variable\n    count = 0\n\n    # Calculate the number of ways to paint the fence\n    for i in range(2, n+1):\n        for j in range(i):\n            for l in range(k-j):\n                # Check if the current color combination is valid\n                if (l + j + i) % 2 == 0:\n                    count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n + m - 1) // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Returns the integer quotient of n divided by m.\n    \"\"\"\n    quotient = n // m\n    if quotient * m < n:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return 0\n    else:\n        q = n // m\n        r = n % m\n        if r == 0:\n            return q\n        else:\n            return q + 1"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Calculate the integer quotient of two numbers.\n\n    Parameters:\n    n: int\n        The first number.\n    m: int\n        The second number.\n\n    Returns:\n    int\n        The integer quotient of n and m.\n    \"\"\"\n    if m == 0:\n        raise ValueError(\"Division by zero is not allowed.\")\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a Python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    This function calculates the quotient of two numbers by subtracting the smaller number from the larger number and then rounding down to the nearest integer.\n    \"\"\"\n\n    # If the smaller number is greater than the larger number, swap the two numbers and calculate the quotient.\n    if n > m:\n        n, m = m, n\n        quotient = find(n, m) - (m // m) * m\n    # If the smaller number is less than or equal to the larger number, calculate the quotient.\n    else:\n        quotient = n // m\n\n    # Return the quotient rounded down to the nearest integer.\n    return int(quotient)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Find the perimeter of the triangle\n    perimeter = w + h + math.sqrt(w**2 + h**2)\n    # Find the semi-perimeter of the triangle\n    semi_perimeter = (w + h) / 2\n    # Find the area of the triangle\n    area = math.sqrt(semi_perimeter * (semi_perimeter - w) * (semi_perimeter - h))\n    # Calculate the third side of the right angled triangle\n    third_side = perimeter / (2 * math.tan(math.pi / 3))\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    sqrt_half = math.sqrt(0.5)\n    a = w + h\n    b = w * sqrt_half\n    c = h * sqrt_half\n    return round(a + b + c, 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes the length of the base and height of a right angled triangle as input\n    and returns the length of the other side of the triangle.\n    \n    The other side of the triangle is the opposite of the diagonal (base x height)\n    and can be calculated using the formula:\n    \n    other_side = sqrt((base^2 + height^2) / 2)\n    \n    The input parameters 'w' and 'h' represent the length of the base and height of the triangle.\n    '''\n    \n    # calculate the diagonal of the triangle\n    diagonal = math.sqrt(w**2 + h**2)\n    \n    # calculate the length of the other side of the triangle\n    other_side = diagonal / math.sqrt(2)\n    \n    # return the other side of the triangle\n    return other_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    b = math.sqrt(w**2 + a**2)\n    c = math.sqrt(a**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # Calculate the area of the triangle\n    A = math.sqrt(s * (s - w) * (s - h))\n    # Calculate the length of the third side\n    s3 = A / math.sin(math.acos(w / (w + h)))\n    # Return the third side\n    return s3"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    return a"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2+h**2)\n    b = math.sqrt(h**2+w**2)\n    c = math.sqrt(a**2+b**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # Calculate the semi-circle radius of the triangle\n    r = math.sqrt(s ** 2 - w ** 2)\n    # Calculate the third side of the triangle\n    c = (w ** 2 + h ** 2 - s ** 2) / (2 * h)\n    # Return the third side of the triangle\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2 + h**2), 2)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize max value to the first element of the list\n    max_val = listval[0]\n    # Loop through the rest of the list\n    for i in range(1, len(listval)):\n        # Check if the current element is greater than the current max value\n        if listval[i] > max_val:\n            # If it is, update the max value\n            max_val = listval[i]\n    # Return the max value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize max_val to the first element of the list\n    max_val = listval[0]\n    # Loop through the list and compare each element to max_val\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of values as input and returns the maximum value in the list.\n    '''\n    if not isinstance(listval, list):\n        print(\"Error: Input is not a list.\")\n        return None\n    else:\n        maxval = listval[0]\n        for i in listval[1:]:\n            if i > maxval:\n                maxval = i\n        return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize a variable to store the maximum value\n    max_val = None\n    # Loop through each element in the list\n    for item in listval:\n        # If the current element is greater than the current maximum value, update the maximum value\n        if item > max_val:\n            max_val = item\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    This function takes a heterogeneous list as input and returns the maximum value in the list.\n    '''\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n\nnum = int(input(\"Enter a number: \"))\nprint(\"The sum of all divisors of\", num, \"is:\", sum_div(num))"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # create an empty list to store divisors\n    divisors = []\n    # loop through numbers from 1 to the square root of the given number\n    for i in range(1, int(number**0.5)+1):\n        # check if the given number is divisible by the current number\n        if number % i == 0:\n            # if it is, add it to the list of divisors\n            divisors.append(i)\n    # sum up the divisors and return the result\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0  # initialize the count of inversions to 0\n    n = len(arr)  # get the length of the array\n    \n    # use a nested loop to sort the array in descending order\n    for i in range(n):\n        # find the smallest element in the remaining unsorted portion of the array\n        smallest_index = i\n        for j in range(i+1, n):\n            if arr[j] > arr[smallest_index]:\n                smallest_index = j\n        \n        # swap the smallest element with the i-th element\n        arr[i], arr[smallest_index] = arr[smallest_index], arr[i]\n        \n        # calculate the count of inversions\n        left, right = i+1, n-1\n        while left < right:\n            if arr[left] > arr[i] and arr[right] > arr[i]:\n                inv_count += right - left\n                left += 1\n                right -= 1\n            elif arr[left] > arr[i]:\n                right -= 1\n            else:\n                left += 1\n                \n    return inv_count  # return the count of inversions"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    n = len(arr) \n    inv_count = 0 \n    # Create a auxiliary array to store the indices of the sorted array\n    aux = [0] * n \n\n    def merge_sort(arr, aux): \n        '''\n        Recursive function to sort the array using merge sort.\n        '''\n\n        if n <= 1: \n            return  # base case: arrays of length 1 and less are already sorted\n\n        # Divide the array into two halves \n        mid = n // 2 \n        left_half = arr[:mid] \n        right_half = arr[mid:] \n\n        # Recursively sort the left and right halves \n        left_count = merge_sort(left_half, aux) \n        right_count = merge_sort(right_half, aux) \n\n        # Merge the two sorted halves into a single sorted array \n        i = j = k = 0\n        while i < len(left_half) and j < len(right_half): \n            if left_half[i] <= right_half[j]: \n                aux[k] = left_half[i] \n                i += 1 \n            else: \n                aux[k] = right_half[j] \n                j += 1 \n                inv_count += len(left_half) - i \n            k += 1 \n\n        # Copy any remaining elements from the left or right half \n        while i < len(left_half): \n            aux[k] = left_half[i] \n            i += 1 \n            k += 1 \n\n        while j < len(right_half): \n            aux[k] = right_half[j] \n            j += 1 \n            k += 1 \n\n        # Copy the sorted array back to the input array \n        for i in range(n): \n            arr[i] = aux[i] \n\n        return left_count + right_count \n\n    return merge_sort(arr, aux) "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j - i + 1)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    # create a helper array to store the indices of elements in the original array\n    indices = list(range(len(arr)))\n    n = len(arr)\n\n    # sort the array using merge sort\n    merge_sort(arr, indices, 0, n-1)\n\n    # count the inversions using a modified merge sort\n    inv_count = 0\n    for i in range(1, n):\n        inv_count += merge_sort_count(arr, indices, 0, n-i-1)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # count inversions using counting sort\n    count = [0] * (n + 1)\n    for i in range(n):\n        count[arr[i]] += 1\n    for i in range(1, n + 1):\n        count[i] += count[i - 1]\n    inv_count = 0\n    for i in range(n - 1, -1, -1):\n        j = count[arr[i]] - 1\n        arr[i], arr[j] = arr[j], arr[i]\n        inv_count += (i - j)\n        count[arr[i]] -= 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Initialize the count variable\n    inv_count = 0\n\n    # Sort the array in ascending order\n    sorted_arr = sorted(arr)\n\n    # Iterate through the sorted array and count inversions\n    for i in range(len(sorted_arr)):\n        for j in range(i+1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a Python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    \n    # Sort the array\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                inv_count += n-j-1\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0 \n  \n    # Sort the array in non-decreasing order \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1]: \n                inv_count += n-j-1 \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    # Step 1: Sort the array \n    arr.sort() \n    # Step 2: Count inversions \n    count = 0 \n    i = 0 \n    j = n - 1 \n    while i < j: \n        if arr[i] > arr[j]: \n            count += j - i \n            i += 1 \n            j -= 1 \n        elif arr[i] < arr[j]: \n            i += 1 \n        else: \n            j -= 1 \n    return count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(lst):\n    result = []\n    for item in lst:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list and flattens it into a single list.\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if isinstance(list1, list):\n        for item in list1:\n            if isinstance(item, list):\n                flatten_list(item)\n            else:\n                yield item\n    else:\n        yield list1"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list += flatten_list(element)\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Initialize an empty list to store the flattened structure\n    flattened = []\n    # Loop through each element in the input list\n    for item in list1:\n        # If the current element is a list, flatten it recursively\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        # Otherwise, append the item to the flattened list\n        else:\n            flattened.append(item)\n    # Return the flattened list\n    return flattened"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flattens a nested list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    item_counts = defaultdict(int)\n    max_aggregate = 0\n\n    for item, count in stdata:\n        item_counts[item] += count\n        max_aggregate = max(max_aggregate, item_counts[item])\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Use defaultdict to create a dictionary to store the maximum aggregate for each transaction\n    max_agg = defaultdict(int)\n\n    # Loop through the list of transactions\n    for transaction in stdata:\n        # Calculate the maximum aggregate\n        max_agg[transaction[0]] += transaction[1]\n        # If the maximum aggregate of any transaction in the list has exceeded the total sales amount, return the total sales amount\n        if max(max_agg.values()) > transaction[2]:\n            return transaction[2]\n\n    # If no transaction in the list exceeds the total sales amount, return None\n    return None"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    max_dict = defaultdict(int)\n    for st, price in stdata:\n        max_dict[st] += price\n        max_sum = max(max_sum, max(max_dict.values()))\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the maximum aggregate of each category\n    max_agg = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for _, item in enumerate(stdata):\n        # Extract the category and the value\n        cat, value = item\n        # Check if the category is already in the defaultdict\n        if cat in max_agg:\n            # If it is, update the maximum aggregate\n            max_agg[cat] = max(max_agg[cat], value)\n        else:\n            # If it's not, add the category and its maximum aggregate\n            max_agg[cat] = value\n\n    # Find the maximum aggregate from the defaultdict\n    max_agg_val = max(max_agg.values())\n\n    # Create a list of tuples containing the category and its maximum aggregate\n    max_agg_lst = [(k, v) for k, v in max_agg.items() if v == max_agg_val]\n\n    # Return the maximum aggregate and the category\n    return max_agg_val, max_agg_lst[0][0]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the counts of each item in the list\n    counts = defaultdict(int)\n    # Loop through the list of tuples\n    for item, price in stdata:\n        # Increment the count of the current item by 1\n        counts[item] += 1\n    # Initialize the maximum aggregate to be zero\n    max_agg = 0\n    # Loop through the counts and find the maximum value\n    for count in counts.values():\n        max_agg = max(max_agg, count)\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for tup in stdata:\n        max_agg[tup[0]] += tup[1]\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate value.\n    '''\n\n    # Create a defaultdict to store the number of times each item is sold.\n    count = defaultdict(int)\n\n    # Iterate over the list of tuples and update the count of each item.\n    for item, quantity in stdata:\n        count[item] += quantity\n\n    # Calculate the maximum aggregate value.\n    max_agg = max(count.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each item\n    max_agg = defaultdict(int)\n\n    # Iterate through each tuple in the list\n    for item, price in stdata:\n        # Add the price to the current maximum aggregate for the item\n        max_agg[item] += price\n\n    # Find the maximum aggregate across all items and return it\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the number of times each item is present in the list\n    item_count = defaultdict(int)\n    for item, count in stdata:\n        item_count[item] += count\n    # calculate the maximum aggregate by finding the maximum count value in the item_count dictionary\n    max_count = max(item_count.values())\n    # create a new dictionary to store the items with their corresponding maximum counts\n    max_items = defaultdict(int)\n    for item, count in item_count.items():\n        if count == max_count:\n            max_items[item] = max_count\n    # calculate the maximum aggregate by finding the maximum count value in the max_items dictionary\n    max_agg = max(max_items.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each item\n    max_dict = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item, price in stdata:\n        # Check if the current item is already present in the dictionary\n        if item in max_dict:\n            # Check if the current price is greater than the maximum price for the item\n            if price > max_dict[item]:\n                # Update the maximum price for the item\n                max_dict[item] = price\n        else:\n            # If the current item is not present in the dictionary, add it with the current price\n            max_dict[item] = price\n\n    # Iterate through the dictionary to find the maximum aggregate\n    max_agg = 0\n    for price in max_dict.values():\n        if price > max_agg:\n            max_agg = price\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    # Initialize the count and sum variables\n    count = 0\n    sum_1 = 0\n    sum_2 = 0\n\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Extract the first n bits\n        first_n = bin(i)[2:].zfill(n)\n\n        # Extract the last n bits\n        last_n = bin(i)[-n-2:].zfill(n)\n\n        # Calculate the sum of the first n bits\n        sum_1 = sum([int(bit) for bit in first_n])\n\n        # Calculate the sum of the last n bits\n        sum_2 = sum([int(bit) for bit in last_n])\n\n        # If the sum of the first n bits is the same as the sum of the last n bits, increment the count\n        if sum_1 == sum_2:\n            count += 1\n\n    # Return the count of all binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        temp = bin(i)[2:]\n        sum1 = 0\n        sum2 = 0\n        for j in range(n):\n            sum1 += int(temp[j])\n            sum2 += int(temp[-1-j])\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize the count and sum of first and last bits\n    count = 0\n    first_bit = 0\n    last_bit = 0\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Extract the first n bits\n        first_bits = bin(i)[2:].zfill(n)\n        # Extract the last n bits\n        last_bits = bin(i+1)[2:].zfill(n)\n        # Check if the sum of first n bits is same as sum of last n bits\n        if int(first_bits, 2) == int(last_bits, 2):\n            count += 1\n    # Return the count of binary sequences that satisfy the condition\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        temp = bin(i)[2:].zfill(2*n)\n        if temp[:n] == temp[-n:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n+1):\n        bits = bin(i)[2:].zfill(n)\n        if bits[:n] == bits[n:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n):\n        if sum(int(x) for x in bin(i)[2:].zfill(n)) == sum(int(x) for x in bin(2**n-i)[2:].zfill(n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        sum1 = sum(int(digit) for digit in bin(i)[2:].zfill(n))\n        sum2 = sum(int(digit) for digit in bin(i)[-n:].zfill(n))\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(2*n)\n        first_n = int(binary_str[:n])\n        last_n = int(binary_str[n:])\n        if sum(first_n) == sum(last_n):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize a list to store the count of binary sequences\n    count = []\n\n    # Loop through all possible binary numbers of length n\n    for i in range(2**n, 2**n+2):\n        # Calculate the sum of the first n bits\n        sum1 = sum(int(d) for d in bin(i)[2:].zfill(n))\n\n        # Calculate the sum of the last n bits\n        sum2 = sum(int(d) for d in bin(i+2**n-1)[2:].zfill(n))\n\n        # If the sum of the first n bits and the sum of the last n bits are the same, add 1 to the count list\n        if sum1 == sum2:\n            count.append(1)\n\n    # Return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(2*n+1), 2**(2*n+1)):\n        left = bin(i)[2:]\n        right = bin(i + 2**(2*n+1) - 1)[2:]\n        if left == right:\n            count += 1\n    return count\n\nn = 4 # replace with the desired value of n\nprint(\"Count of binary sequences of length 2n such that sum of first n bits is same as sum of last n bits:\", count_binary_seq(n))"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            if depth > 1:\n                break\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize depth to zero and keep track of current depth\n    depth = 0\n    current_depth = 0\n    \n    # Iterate through dictionary keys\n    for key in d:\n        # Check if key is a dictionary\n        if isinstance(d[key], dict):\n            # Recursively call the function to get the depth of the nested dictionary\n            nested_depth = dict_depth(d[key])\n            # Increment current depth by the nested depth\n            current_depth += nested_depth\n            # Update depth if nested depth is greater than current depth\n            if nested_depth > current_depth:\n                depth = nested_depth\n        else:\n            # If key is not a dictionary, increment current depth by 1\n            current_depth += 1\n    \n    # Return current depth\n    return current_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            nested_depth = dict_depth(value)\n            if nested_depth > max_depth:\n                max_depth = nested_depth + 1\n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a counter variable\n    depth = 0\n    # Loop through each key in the dictionary\n    for key in d:\n        # If the value is a dictionary, recursively call the function with the value as the argument\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]))\n        # Increment the depth counter by 1\n        depth += 1\n    # Return the depth counter\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    stack = [d]\n    depth = 1\n    while stack:\n        item = stack.pop()\n        if isinstance(item, dict):\n            stack.extend(item.values())\n            depth += 1\n        elif isinstance(item, list):\n            for subitem in item:\n                stack.append(subitem)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Base case: if the dictionary is empty, return 0\n    if not d:\n        return 0\n    # Recursive case: add 1 to the depth of the dictionary's key, and recursively call the function on its value\n    return 1 + dict_depth(d.values()[0])"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize the depth to 0\n    depth = 0\n    # Loop through each key in the dictionary\n    for key in d:\n        # If the value of the key is a dictionary, increment the depth by 1\n        if isinstance(d[key], dict):\n            depth += 1\n        # If the value of the key is a list, loop through each element and check if it's a dictionary\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth += 1\n    # Return the depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, 1 + dict_depth(value))\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # initialize variables\n    current_index = 0\n    result = []\n\n    # loop through each range and rotation\n    for i in range(len(ranges)):\n        current_rotation = 0\n        # loop through each rotation in the range\n        while rotations[i] > 0:\n            # increment current index after each rotation\n            current_index = (current_index + rotations[i]) % len(arr)\n            # decrement the current rotation count\n            rotations[i] -= 1\n            # append the element at the current index to the result list\n            result.append(arr[current_index])\n\n    # return the element at the given index after all rotations are applied\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, ranges of rotations and index as input and returns the element at the given index after rotating the array by the given number of rotations.\n    '''\n    # Finding the element at the given index after rotations\n    element = arr[index]\n    # Initializing the rotated array\n    rotated_arr = []\n    # Rotating the given array\n    for i in range(len(arr)):\n        if i!= index:\n            rotated_arr.append(arr[(i + rotations - 1) % len(arr)])\n    # Finding the element at the given index after rotating the array\n    for i in range(len(rotated_arr)):\n        if element == rotated_arr[i]:\n            return i\n    return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges and a number of rotations, and an index as inputs.\n    It then returns the element at the given index after the specified number of rotations.\n\n    Args:\n    arr (list): An array of integers.\n    ranges (list): A list of ranges representing the rotations that can be performed on the array.\n    rotations (int): The number of rotations to perform on the array.\n    index (int): The index at which the element should be found after the rotations.\n\n    Returns:\n    int: The element at the given index after the specified number of rotations.\n    \"\"\"\n\n    # Initialize variables to store the values of the array at different indices\n    values = [arr[0]]\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        if i % rotations == 0:\n            # Find the index where the range becomes greater than the current index\n            j = 0\n            while j < len(ranges) and ranges[j][0] <= i:\n                j += 1\n            # Perform the corresponding rotation on the array\n            values.append(arr[i] ^ arr[ranges[j-1][1]])\n        else:\n            values.append(arr[i])\n\n    # Find the value at the given index\n    if index == len(arr):\n        return values[len(arr)-1]\n    else:\n        return values[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize the element at index as the current element\n    current_element = arr[index]\n    \n    # Iterate over each rotation\n    for rotation in rotations:\n        # Calculate the index after rotation\n        new_index = (index + rotation) % len(arr)\n        # Calculate the element at the new index\n        new_element = arr[new_index]\n        \n        # If the new element is present in the range, update the current element\n        if new_element in ranges[rotation]:\n            current_element = new_element\n            \n    return current_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array of size n and a list of ranges and rotations.\n    The ranges represent the indices to be rotated, and the rotations represent the number of rotations to be done.\n    The function returns the element at the given index after rotating the array.\n    \"\"\"\n    # initialize a list to store the rotated array\n    rotated = []\n\n    # iterate over each range and rotate the corresponding part of the array\n    for r in ranges:\n        if index >= r:\n            # rotate the part of the array starting from index r\n            start = index - r + 1\n            end = r\n            rotated.extend(arr[start:end])\n            # move the index to the end of the rotated part of the array\n            index -= r\n        else:\n            # append the part of the array starting from index 0 to index r\n            end = index\n            rotated.extend(arr[0:end])\n            break\n\n    # rotate the array by rotations number of times\n    for _ in range(rotations):\n        rotated = rotated[-1:] + rotated\n\n    # return the element at the given index after rotating the array\n    return rotated[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Find the range of elements that need to be rotated\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if mid < ranges[rotations[mid]]:\n            low = mid + 1\n        elif mid > ranges[rotations[mid]]:\n            high = mid - 1\n        else:\n            low, high = mid, mid\n    # Check if the element at the given index lies within that range\n    if index >= low and index <= high:\n        # Calculate the sum of the rotated array and the index\n        rot_sum = sum(arr[i] for i in range(low, index+1))\n        if rot_sum == index:\n            return arr[index]\n        elif rot_sum > index:\n            return find_Element(arr, ranges, rotations, index - ranges[rotations[mid]])\n        else:\n            return find_Element(arr, ranges, rotations, index - ranges[rotations[mid]])\n    else:\n        # Element is not within the range\n        return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    def binary_search(arr,ranges,left,right) :\n        '''\n        Find element in the array using binary search.\n        '''\n\n        while left <= right :\n            middle = (left + right) // 2\n\n            if ranges[middle] == True :\n                if middle == index :\n                    return arr[middle]\n                elif middle < index :\n                    left = middle + 1\n                else :\n                    right = middle - 1\n            else :\n                left = middle + 1\n\n        return None\n\n    element = binary_search(arr,ranges,0,len(arr)-1)\n\n    if element!= None :\n        return element\n\n    else :\n        return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # Find the number of elements to rotate\n    n = len(arr)\n    \n    # Check if the index is within range\n    if index < 0 or index >= n:\n        return -1\n    \n    # Calculate the new index after rotations\n    new_index = (index - ranges[0] + rotations) % n\n    \n    # If the new index is outside range, rotate the array\n    if new_index < 0 or new_index >= n:\n        arr.extend(arr[:index] + arr[index+1:])\n        arr = arr[index-ranges[0]:]\n        arr.extend(arr[:index-ranges[0]] + arr[index:])\n        arr = arr[new_index:]\n        new_index = (new_index - ranges[0] + rotations) % n\n    \n    # Return the element at the new index\n    return arr[new_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Args:\n        arr (list): List of elements to be rotated.\n        ranges (list): List of pairs of integers representing the range of rotations.\n        rotations (int): Number of rotations to be performed.\n        index (int): Index of the element to be found.\n\n    Returns:\n        int: Element at the given index after rotating.\n    '''\n\n    # Find the starting position of the element to be found after rotations\n    start_index = index - ((index - 1) % rotations)\n\n    # If the starting position is less than the range of rotations,\n    # then move the starting position to the end of the range\n    if start_index < 0:\n        start_index = len(arr) + start_index\n\n    # Find the element at the starting position after rotations\n    element = arr[start_index % len(arr)]\n\n    # Find the element that the original element was replaced with\n    replaced_element = arr[(index - 1) % len(arr)]\n\n    # Find the element at the starting position after rotations and find its index\n    index_after_rotations = arr.index(element)\n\n    # If the original element was replaced with the element at the starting position,\n    # then return the element at the starting position\n    if replaced_element == element:\n        return element\n\n    # If the original element was not replaced with the element at the starting position,\n    # then return the element at the starting position which is between the original element\n    # and the element at the starting position after rotations.\n    else:\n        for i in range(index_after_rotations - 1, start_index - 1, -1):\n            if replaced_element <= arr[i]:\n                return arr[i]\n\n        # If no element between the original element and the element at the starting position after rotations\n        # is found, then return the element at the starting position itself.\n        return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize a variable to keep track of the current element\n    current_element = arr[index]\n    \n    # Perform rotations\n    for i in range(rotations):\n        # Find the index of the minimum element in the current range\n        min_index = index\n        for j in range(ranges[i]):\n            if arr[min_index] > arr[min_index+j]:\n                min_index += j\n            else:\n                break\n        # Find the index of the maximum element in the current range\n        max_index = index\n        for j in range(ranges[i]-1, -1, -1):\n            if arr[max_index] < arr[max_index+j]:\n                max_index += j\n            else:\n                break\n        # Swap the minimum and maximum element\n        arr[min_index], arr[max_index] = arr[max_index], arr[min_index]\n    \n    # Return the current element after rotations\n    return current_element"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = re.findall(r'\\b\\w+p\\b',''.join(words))\n    if len(p_words) > 1:\n        return p_words\n    else:\n        return None\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(\"^p\", word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    result = re.findall(pattern, words)\n\n    if len(result) < 2:\n        return None\n    else:\n        return result[0], result[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-zA-Z]*') # find words starting with letter 'p'\n    result = [word for word in words if pattern.search(word)] # filter the words starting with 'p'\n    if len(result) >= 2:\n        return result[0], result[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+$')\n    for word in words:\n        if pattern.match(word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w+')\n    matches = pattern.findall(words)\n    if len(matches) < 2:\n        return None\n    else:\n        return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define regular expression pattern to match words starting with letter 'p'\n    pattern = r'^p.*'\n    # Use regex.findall() method to find all words in the list that match the pattern\n    matches = re.findall(pattern,''.join(words))\n    # If there are at least two matches, return them as a tuple\n    if len(matches) >= 2:\n        return tuple(matches)\n    # Otherwise, return an error message\n    else:\n        return \"Error: No words starting with 'p' were found in the list.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    for word in words:\n        if pattern.match(word):\n            return word, word[1:]\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Define regular expression pattern to match words starting with letter 'p'\n    pattern = r'^p\\w+'\n\n    # Define list of words to search in\n    my_list = ['apple', 'pear', 'pinapp', 'pop', 'popcorn', 'pinapple', 'papaya', 'par']\n\n    # Initialize list to store matching words\n    matching_words = []\n\n    # Iterate through each word in my_list\n    for word in my_list:\n\n        # If word matches the pattern, add it to the matching_words list\n        if re.match(pattern, word):\n            matching_words.append(word)\n\n    # Check if there are at least two matching words, otherwise return None\n    if len(matching_words) >= 2:\n        return matching_words[0], matching_words[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^\\p{Ll}.*\\p{Ll}')\n    result = re.findall(pattern, words)\n    return result"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n\n    dp = [0] * n\n\n    for i in range(index + 1):\n        dp[i] = a[i]\n\n    for i in range(index + 1, n):\n        for j in range(i - index - 1):\n            dp[i] = max(dp[i], dp[j] + a[i])\n\n    return dp[k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables for the dynamic programming\n    max_sum = float('-inf')\n    dp = [[0 for j in range(n+1)] for i in range(n+1)]\n\n    # Fill dp array\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if a[i-1] > a[i-j]:\n                dp[i][j] = max(dp[i-1][j-1] + a[i-1], dp[i-1][j])\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    # Find maximum sum of increasing subsequence from 0 to index\n    for i in range(index+1):\n        max_sum = max(max_sum, dp[i][k])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # If k is greater than or equal to index, then it can't be part of the increasing subsequence\n    if k >= index:\n        return 0\n\n    # Initialize a list to store the maximum sum of increasing subsequence found so far\n    max_sum = [0] * (n + 1)\n\n    # Initialize the first element of the list as the maximum sum of a single increasing subsequence\n    max_sum[1] = a[0]\n\n    # Initialize the list to store the length of the increasing subsequence found so far\n    length = [1] * (n + 1)\n\n    # Fill the list with the length of the increasing subsequence found so far\n    for i in range(2, n + 1):\n        if a[i - 1] <= a[i]:\n            max_sum[i] = max_sum[i - 1] + a[i]\n            length[i] = length[i - 1] + 1\n        else:\n            max_sum[i] = max_sum[i - 1]\n            length[i] = length[i - 1]\n\n    # Initialize the list to store the sum of the increasing subsequence found so far\n    subseq_sum = [0] * (n + 1)\n\n    # Fill the list with the sum of the increasing subsequence found so far\n    for i in range(n, 0, -1):\n        if a[i - 1] <= a[i]:\n            subseq_sum[i] = subseq_sum[i + 1] + max_sum[i + 1]\n        else:\n            subseq_sum[i] = subseq_sum[i + 1]\n\n    # Initialize the variable to store the maximum sum of the increasing subsequence including kth element\n    max_sum_with_k = max_sum[index]\n\n    # Iterate over the increasing subsequence found so far and check if k is included in it\n    for i in range(index - 1, -1, -1):\n        if a[i] <= a[k - 1]:\n            max_sum_with_k = max(max_sum_with_k, subseq_sum[i + 1] - a[k])\n        else:\n            max_sum_with_k = max(max_sum_with_k, subseq_sum[i + 1])\n\n    # Return the maximum sum of increasing subsequence including kth element\n    return max_sum_with_k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize the maximum sum as 0 and the prefix sum as 0\n    max_sum = 0\n    prefix_sum = 0\n\n    # Iterate from 0 to i-1\n    for i in range(index):\n        # Check if the element at i is greater than the element at index\n        if a[i] > a[index]:\n            # If yes, update the prefix sum with the current element and update the maximum sum if the current sum is greater than the previous maximum sum\n            prefix_sum = max(a[i], prefix_sum + a[i])\n            max_sum = max(max_sum, prefix_sum)\n\n    # If the current element is greater than k, update the prefix sum with the current element and update the maximum sum if the current sum is greater than the previous maximum sum\n    if a[index] > k:\n        prefix_sum = max(a[index], prefix_sum + a[index])\n        max_sum = max(max_sum, prefix_sum)\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the sum array and current maximum sum and start index of the subsequence\n    sum_array = [0] * n\n    max_sum = 0\n    start_index = 0\n    \n    # Iterate through the array and calculate the sum of increasing subsequence from prefix until index\n    for i in range(index):\n        sum_array[i] = max(sum_array[i], a[i])\n        max_sum = max(max_sum, sum_array[i])\n    \n    # If the current index is greater than or equal to k, update the sum of increasing subsequence from prefix until k\n    if index >= k:\n        sum_array[index-1] += a[k-1]\n        max_sum = max(max_sum, sum_array[index-1])\n    \n    # Return the maximum sum of increasing subsequence from prefix until index\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    dp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if a[i] > a[index - 1]:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + a[i])\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][k]\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize a variable to store the maximum sum of increasing subsequence till now\n    max_sum = float('-inf')\n    \n    # Initialize an array to store the length of increasing subsequence till now\n    subseq_len = [0] * n\n    \n    # Initialize an array to store the starting index of increasing subsequence till now\n    subseq_start = [0] * n\n    \n    # Initialize a variable to store the current sum of increasing subsequence\n    curr_sum = 0\n    \n    # Iterate through the array of indexes of the array\n    for i in range(index):\n        # If the current element is greater than k, check if its prefix sum is greater than max sum of increasing subsequence till now\n        if a[i] > k:\n            if curr_sum + a[i] > max_sum:\n                max_sum = curr_sum + a[i]\n                # Update the starting index of the increasing subsequence\n                subseq_start[i] = index - 1\n                # Update the length of the increasing subsequence\n                subseq_len[i] = 1\n            else:\n                # If the prefix sum is not greater than max sum of increasing subsequence till now, check if the current element is part of the increasing subsequence\n                if a[i] - k > subseq_start[i] and a[i] - k < subseq_start[i] + subseq_len[i]:\n                    # If it is part of the increasing subsequence, update its length and starting index\n                    subseq_len[i] += 1\n                    subseq_start[i] = i\n                else:\n                    # If it is not part of the increasing subsequence, append the current element to the increasing subsequence and update its length and starting index\n                    subseq_len[i] = 1\n                    subseq_start[i] = i\n                    curr_sum += a[i]\n                    \n    # Check if the kth element is part of the increasing subsequence\n    if k > index and a[k] - k > subseq_start[k] and a[k] - k < subseq_start[k] + subseq_len[k]:\n        # If it is part of the increasing subsequence, update its length and starting index\n        subseq_len[k] += 1\n        subseq_start[k] = k\n    else:\n        # If it is not part of the increasing subsequence, append the kth element to the increasing subsequence and update its length and starting index\n        subseq_len[k] = 1\n        subseq_start[k] = k\n        curr_sum += a[k]\n    \n    # Initialize a variable to store the maximum sum of increasing subsequence starting from i till the end\n    curr_sum = 0\n    for i in range(index, n):\n        if a[i] > k:\n            curr_sum += a[i]\n        else:\n            curr_sum += a[i] - k\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    \n    # Initialize a variable to store the maximum sum of increasing subsequence starting from i till the end and including the kth element\n    curr_sum = 0\n    for i in range(index, n):\n        if a[i] > k:\n            curr_sum += a[i]\n        else:\n            curr_sum += a[i] - k\n        if curr_sum + a[k] > max_sum:\n            max_sum = curr_sum + a[k]\n    \n    return max_sum, subseq_start, subseq_len"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Step 1: Initialize a table to store the maximum sum of increasing subsequence till each index\n    table = [[0] * (n+1) for _ in range(index+1)]\n\n    # Step 2: Fill the first row of the table with the first element of the prefix\n    for i in range(1, index+1):\n        table[i][0] = a[i-1]\n\n    # Step 3: Fill the remaining rows of the table\n    for i in range(1, index+1):\n        for j in range(1, n+1):\n            if a[j-1] < a[i-1]:\n                table[i][j] = max(table[i-1][j], table[i][j-1]) + a[j-1]\n            else:\n                table[i][j] = table[i-1][j]\n\n    # Step 4: Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n    max_sum = table[index][n]\n\n    # Step 5: Iterate through the table and find the maximum sum of increasing subsequence including kth element\n    k_index = -1\n    for i in range(index, n+1):\n        if a[i-1] == k:\n            k_index = i-1\n            break\n\n    if k_index == -1:\n        return None\n\n    for i in range(index, n+1):\n        if a[i-1] < k:\n            continue\n\n        subseq_sum = table[i-1][k_index]\n        max_sum = max(max_sum, subseq_sum)\n\n        if subseq_sum == table[i-1][k_index]:\n            break\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the maximum sum to the first element\n    max_sum = a[0]\n\n    # Initialize the current sum to the first element\n    current_sum = a[0]\n\n    # Iterate over the elements from 1 to index\n    for i in range(1, index + 1):\n        # If the current element is greater than the kth element, add it to the sum and update the maximum sum\n        if a[i] > k:\n            current_sum += a[i]\n        else:\n            # If the current element is less than or equal to the kth element, subtract the element from the current sum and update the maximum sum\n            current_sum -= a[i - 1]\n\n        # Update the maximum sum if the current sum is greater\n        max_sum = max(max_sum, current_sum)\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize dp table\n    dp = [[0] * (k+1) for i in range(n+1)]\n    # Initialize max_sum\n    max_sum = float('-inf')\n    # Traverse the array from 0 to n-1\n    for i in range(n):\n        # Traverse the array from 0 to i-1\n        for j in range(i+1):\n            # Calculate the sum of increasing subsequence from prefix until j and also including the ith element after j\n            if j < k:\n                dp[i+1][j+1] = max(dp[i+1][j], dp[i][j]) + a[i]\n            else:\n                dp[i+1][j+1] = max(dp[i+1][j], dp[i][j-1]) + a[i]\n        # Update max_sum if current sum is greater\n        max_sum = max(max_sum, dp[i+1][k])\n    # Return the max_sum\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(len(tuplex)):\n        if i % m == 0:\n            result.append(tuplex[i])\n            if n > 0:\n                n -= 1\n                if n == 0:\n                    break\n    return tuple(result)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Get the original tuple\n    original_tuplex = deepcopy(tuplex)\n\n    # Split the tuple into rows\n    rows = [original_tuplex[i::m] for i in range(m)]\n\n    # Split the tuple into columns\n    columns = [list(row) for row in rows]\n\n    # Concatenate the columns to form a colon\n    colon = [\":\".join(row) for row in columns]\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = new_tuplex[1:]\n    for i in range(n):\n        new_tuplex = new_tuplex[:-1]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # make a deep copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    # get the length of the input tuple\n    length = len(new_tuplex)\n    # get the index of the last element in the new tuple\n    last_index = length - m\n    # get a slice of the new tuple\n    colon = tuple(new_tuplex[last_index-i:last_index+n] for i in range(n))\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > len(tuplex) or n > len(tuplex[m-1]):\n        return None\n    \n    new_tuplex = deepcopy(tuplex)\n    new_tuplex[m-1] = new_tuplex[m-1][:n] + (None,) + new_tuplex[m-1][n:]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex[m] = deepcopy(tuplex[n])\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a deep copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    # create a list of lists to store the colon\n    colon = []\n    # loop over the rows\n    for i in range(m):\n        # create a new row and append it to the colon\n        row = []\n        for j in range(n):\n            # get the element at position (i,j) from the tuple\n            elem = tuplex_copy[i][j]\n            # check if it's a tuple and if so, recursively call colon_tuplex on it\n            if type(elem) == tuple:\n                elem = colon_tuplex(elem,m,n)\n            # append the element to the row\n            row.append(elem)\n        # append the row to the colon\n        colon.append(row)\n    # return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the given tuple\n    tuplex = deepcopy(tuplex)\n\n    # Get the length of the tuple\n    length = len(tuplex)\n\n    # Check if the length of the tuple is greater than or equal to the given number of rows\n    if length >= m:\n        # Get the indices of the colon\n        colon_indices = [i for i in range(length) if i % n == 0]\n\n        # Create a new tuple with the colon\n        colon = tuple(tuplex[i] for i in colon_indices)\n\n        return colon\n    else:\n        return None"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Create a copy of the input tuple with the m-th element replaced by the n-th element.\n\n    Args:\n    tuplex: a tuple\n    m: the index of the element to replace\n    n: the index of the replacement element\n\n    Returns:\n    a tuple with the m-th element replaced by the n-th element\n    \"\"\"\n\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex[m] = new_tuplex.pop(n)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    -----------\n    tuplex : tuple\n        The input tuple.\n    m : int\n        The number of rows to return in the colon.\n    n : int\n        The number of columns to return in the colon.\n\n    Returns:\n    --------\n    list\n        A list of tuples representing the colon.\n    '''\n\n    # Check if the input is a tuple\n    if not isinstance(tuplex, tuple):\n        raise TypeError('Input must be a tuple')\n\n    # Check if the input has the correct number of elements\n    if len(tuplex)!= m * n:\n        raise ValueError('Incorrect number of elements in the input tuple')\n\n    # Create a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Split the tuple into separate rows and columns\n    rows = [new_tuplex[i:i + n] for i in range(0, len(new_tuplex), n)]\n    cols = [[new_tuplex[j] for j in range(m * i, m * i + n)] for i in range(m)]\n\n    # Combine the rows and columns into a colon\n    colon = []\n    for i in range(m):\n        for j in range(n):\n            colon.append(rows[i][j])\n            colon.append(cols[i][j])\n\n    # Return the colon\n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    product1 = 1\n    product2 = 1\n    for i in range(N):\n        product1 *= nums1[i]\n        product2 *= nums2[i]\n    return product1, product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    This function finds the specified number of largest products from two given lists,\n    selecting one factor from each list.\n    \n    Args:\n    - nums1 (list[int]): A list of integers.\n    - nums2 (list[int]): A list of integers.\n    - N (int): The number of largest products to find.\n    \n    Returns:\n    - list[int]: A list of the largest products.\n    \"\"\"\n    \n    # Initialize variables\n    products = []\n    index1 = 0\n    index2 = 0\n    count = 0\n    \n    # Iterate through the input lists\n    while count < N:\n        # Calculate the product of the current factor from nums1 and nums2\n        current_product = nums1[index1] * nums2[index2]\n        \n        # If the product is the largest seen so far, add it to the list and increment the counters\n        if not products or current_product > max(products):\n            products.append(current_product)\n            index1 += 1\n            index2 += 1\n            count += 1\n        # If the product is smaller than any previous product, increment the counters\n        else:\n            index1 += 1\n            index2 += 1\n    \n    # Return the list of largest products\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the two lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # initialize the result list\n    result = []\n    \n    # select the first N largest factors from each list\n    for i in range(N):\n        result.append(nums1[i] * nums2[i])\n        \n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # initialize the largest products and their indices\n    largest_products = []\n    largest_indices = []\n\n    # iterate through the lists and find the largest products\n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[i] * nums2[N-i-1]\n\n        # add the largest product to the list and its index\n        if product1 > product2:\n            largest_products.append(product1)\n            largest_indices.append(i)\n        else:\n            largest_products.append(product2)\n            largest_indices.append(N-i-1)\n\n    # return the largest products and their indices\n    return largest_products, largest_indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2) or len(nums1)!= N:\n        raise ValueError('The lists should have the same length and be N elements long.')\n    \n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n    \n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create an empty list to store the largest products\n    largest_products = []\n\n    # Loop through each element in the second list\n    for i in range(N):\n        # Initialize a variable to store the maximum product\n        max_product = 0\n        # Loop through each element in the first list\n        for j in range(N):\n            # Calculate the current product of the two elements\n            product = nums1[j] * nums2[i]\n            # If the product is greater than the current maximum, update the maximum\n            if product > max_product:\n                max_product = product\n        # Append the maximum product to the list of largest products\n        largest_products.append(max_product)\n\n    # Sort the list of largest products in descending order\n    largest_products.sort(reverse=True)\n\n    # Return the first N largest products\n    return largest_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    # Sort the input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the largest products\n    largest_product1 = 0\n    largest_product2 = 0\n\n    # Iterate through the sorted lists and calculate the largest products\n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[N-i-1] * nums2[N-i-1]\n        if product1 > largest_product1:\n            largest_product1 = product1\n        if product2 > largest_product2:\n            largest_product2 = product2\n\n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max1 = max2 = float('-inf')\n    for i in range(N):\n        if nums1[i] > max1:\n            max1 = nums1[i]\n        if nums2[i] > max2:\n            max2 = nums2[i]\n    max_product = max(max1 * max2, max2 * max1)\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(N):\n        max_product = max(max_product, nums1[i] * nums2[i])\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the largest products and the number of factors selected\n    largest_product = [0] * N\n    factors_selected = 0\n\n    # Iterate through the sorted lists and add the largest products and factors selected to the result list\n    for i in range(N):\n        largest_product[i] = nums1[i] * nums2[i]\n        factors_selected += 1\n\n    return largest_product, factors_selected"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the given string to a list of characters\n    lst = list(str1)\n    # Convert the list of characters to a tuple\n    tup = tuple(lst)\n    # Return the tuple of characters\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # initialize an empty tuple\n    tup = ()\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # add the character to the tuple\n        tup += (str1[i],)\n    # return the tuple of characters\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Converts a given string to a tuple of characters.\n\n    Parameters:\n    str1 (str): A string to be converted to a tuple of characters.\n\n    Returns:\n    A tuple containing the characters of the input string.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize a variable to store the leftmost unset bit\n    left_most_unset_bit = 0\n\n    # Iterate over each bit in the binary representation of n\n    for i in range(32):\n        # If the i-th bit is 1\n        if (n >> i) & 1 == 1:\n            # Set the leftmost unset bit to i\n            left_most_unset_bit = i\n            break\n\n    # Calculate the index of the first bit to be set to 1\n    first_set_bit_index = 32 - left_most_unset_bit\n\n    # Set the first set bit of n to 1\n    n |= 1 << first_set_bit_index\n\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    n |= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n\n    Parameters:\n    n: int - a positive integer\n\n    Returns:\n    int - the set left most unset bit of n\n    \"\"\"\n    # Initialize the count of set bits\n    count = 0\n\n    # Loop through each bit in the binary representation of n\n    for i in range(32):\n        # If the i-th bit is 1, increment the count by 1\n        if (n >> i) & 1:\n            count += 1\n\n    # Calculate the right shift amount to set the leftmost unset bit\n    shift = count - 1\n\n    # Return the shifted binary representation of n\n    return n << shift"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in a given integer.\n    '''\n    # Initialize the leftmost unset bit to 1\n    leftmost_unset_bit = 1\n    \n    # Iterate through all possible values of the leftmost unset bit\n    while (leftmost_unset_bit & n)!= 0:\n        leftmost_unset_bit <<= 1\n    \n    # Set the leftmost unset bit in the given integer\n    return n | leftmost_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the result variable with 0\n    result = 0\n\n    # Iterate through the bits in reverse order\n    for bit in bin(n)[2:]:\n        # If the bit is 0, set the result variable to the current bit\n        if bit == '0':\n            result = int(bit)\n        \n        # If the bit is 1, stop iterating and return the result\n        else:\n            break\n\n    # Return the result variable\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a number.\n    \"\"\"\n    # Find the number of set bits in the binary representation of n.\n    count = 0\n    while n > 0:\n        n &= n - 1\n        count += 1\n    # Shift the number to the left by the count of set bits, and set the leftmost bit to 1.\n    return n << count | 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the leftmost unset bit to 1\n    leftmost_unset_bit = 1\n\n    # Iterate over the binary representation of n\n    for i in range(31, -1, -1):\n        # Check if the ith bit is set\n        if (n >> i) & 1:\n            # If it is, break out of the loop\n            break\n        # Otherwise, set the leftmost unset bit to the current i\n        leftmost_unset_bit = i\n\n    # Set the leftmost unset bit in n\n    n |= (1 << leftmost_unset_bit)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert n to binary representation\n    binary_repr = bin(n)[2:]\n    # Find the length of the binary representation\n    binary_length = len(binary_repr)\n    # Find the index of the first unset bit\n    leftmost_unset_bit = binary_length - binary_repr.index('1')\n    # Set the leftmost unset bit to 1\n    n |= (1 << leftmost_unset_bit)\n    # Return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a given number.\n    \"\"\"\n    # Initialize the bit count to 0\n    bit_count = 0\n    \n    # Loop through the bits in the number and count the number of set bits\n    while n > 0:\n        if n & 1:\n            bit_count += 1\n        n >>= 1\n    \n    # If the number of set bits is even, set the leftmost unset bit\n    if bit_count % 2 == 0:\n        n |= 1\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*(r**2)*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r ** 2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes the radius and height of a cone as input\n    and returns the volume of the cone.\n    \"\"\"\n    return math.pi * r ** 2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * r * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the volume of the cone\n    volume = (1/3) * math.pi * r * r * h\n    \n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r * r * h\n    return volume\n\nprint(volume_cone(5,6))"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2\n    volume = area * h/3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the volume of a cone\n    V = math.pi * r**2 * h / 3\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3 * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Find the highest power of 2 that is less than or equal to n\n    while n > 1:\n        n = n // 2\n    \n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Convert n to binary representation\n    binary_n = bin(n)[2:]\n\n    # Initialize highest power of 2 as 1\n    highest_power_of_2 = 1\n\n    # Loop through all bits in binary representation of n\n    for i in range(len(binary_n)): \n        # If the bit is 1, multiply current highest power of 2 by 2\n        if binary_n[i] == '1': \n            highest_power_of_2 *= 2\n\n    # Return highest power of 2\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        if i == 1:\n            return i\n        else:\n            i <<= 1\n    return None"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    highest_power_of_2 = 1\n    \n    while highest_power_of_2 <= n:\n        highest_power_of_2 <<= 1\n        \n    return highest_power_of_2 - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # find the highest power of 2 that is less than or equal to n\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n\n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # If n is 0 or 1, return 0\n    if n <= 1:\n        return 0\n    \n    # If n is 2^k, return k\n    power = 0\n    while n > 1:\n        n //= 2\n        power += 1\n    \n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize variables\n    power = 0\n    num = 1\n\n    # Loop until the number is less than or equal to n\n    while num <= n:\n        power += 1\n        num <<= 1\n\n    # Return the highest power of 2 that is less than or equal to n\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        if i >= 2**31-1:\n            i = i - 2**31\n        else:\n            i = i - 1\n    return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n = n // 2\n    return n\n\nn = int(input(\"Enter a number: \"))\nprint(\"The highest power of 2 less than or equal to\", n, \"is\", highest_Power_of_2(n))"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Convert n to an integer to work with integer arithmetic\n    n = int(n)\n\n    # Initialize the highest power of 2 to be less than or equal to 0\n    highest_power = 0\n\n    # While n is not equal to 0\n    while n!= 0:\n        # Extract the last bit of n\n        bit = n & 1\n\n        # If the last bit is 1, set the highest power of 2 to the current power\n        if bit == 1:\n            highest_power = highest_power + 1\n\n        # Shift the number one bit to the left\n        n = n >> 1\n\n    # Return the highest power of 2 found\n    return highest_power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    if n <= 0:\n        return None\n    \n    # Initialize the first two Lucas numbers\n    a = 2\n    b = 1\n    \n    # Compute the (n-1)'th Lucas number by adding the (n-1)'th and (n-2)'th Lucas numbers\n    for i in range(2, n):\n        a, b = b, a + b\n        \n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # initialize the first two lucas numbers\n    a, b = 2, 1\n    # iterate through the remaining numbers\n    for i in range(2, n+1):\n        # calculate the next lucas number\n        c = a + b\n        # update the values of a and b for the next iteration\n        a = b\n        b = c\n    # return the nth lucas number\n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1: \n        return 2\n    elif n == 2: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # create a list of formatted strings\n    formatted_list = [string.format(element) for element in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n\n    Parameters:\n    list_ (list): a list of strings\n    string (str): a format string\n\n    Returns:\n    A list of formatted strings\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_item = string.format(item)\n        formatted_list.append(formatted_item)\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Loop through each element in the list\n    for i in range(len(list_)):\n        # Apply the format string to the element and add it to the new list\n        new_list.append(string.format(list_[i]))\n    return new_list"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n    \n    # iterate through the lists\n    for i in range(len(l1)):\n        # iterate through the elements in the lists\n        for j in range(len(l2[i])):\n            # create the key for the nested dictionary\n            key = l1[i] + '_' + str(l2[i][j])\n            \n            # add the value to the nested dictionary\n            if key in result:\n                result[key].append(l3[i][j])\n            else:\n                result[key] = [l3[i][j]]\n                \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n    \n    # loop through the lists and add their elements as keys and values to the result dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n    \n    for i in range(len(l3)):\n        result[l3[i]] = l3[i]\n    \n    # return the nested dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Convert the first list to a dictionary\n    d1 = dict(zip(l1[0], l1[1]))\n\n    # Convert the second list to a list of dictionaries\n    d2 = [dict(zip(l2[i][0], l2[i][1])) for i in range(len(l2))]\n\n    # Convert the third list to a list of dictionaries\n    d3 = [dict(zip(l3[i][0], l3[i][1])) for i in range(len(l3))]\n\n    # Create a list of dictionaries containing the converted lists\n    d4 = [d1] + d2 + d3\n\n    # Return the list of dictionaries\n    return d4"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n\n    # iterate over each list and add each element to the dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i][j]\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {}\n        for j in range(len(l2[i])):\n            nested_dict[l1[i]][l2[i][j]] = l3[i][j]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for index, lst in enumerate(lists):\n        for item in lst:\n            if isinstance(item, list):\n                for subitem in item:\n                    result = {**result, subitem: index}\n            else:\n                result = {**result, item: index}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # Combine all the lists into one list of tuples\n    tuples = list(zip(l1, l2, l3))\n    \n    # Create an empty dictionary\n    result = {}\n    \n    # Loop through all the tuples\n    for tup in tuples:\n        \n        # Get the first element of the tuple\n        key = tup[0]\n        \n        # Get the remaining elements of the tuple\n        values = tup[1:]\n        \n        # If the key is already present in the result dictionary, append the values to the existing list\n        if key in result:\n            result[key].append(values)\n        # Otherwise, create a new list with the values and add it to the result dictionary\n        else:\n            result[key] = values\n    \n    # Return the result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # Create an empty dictionary to store the nested dictionary\n    result = {}\n    \n    # Loop through the lists and add the elements to the nested dictionary\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                result[l1[i]][l2[j]][l3[k]] = i + j + k\n    \n    # Return the nested dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    - l1: a list of lists\n    - l2: a list of lists\n    - l3: a list of lists\n\n    Returns:\n    - a nested dictionary where each key is a list from l1, l2 and l3, and the value is the corresponding element from each list.\n\n    Example:\n    >>> convert_list_dictionary([['a', 'b', 'c'], ['d', 'e', 'f']], [['1', '2', '3'], ['4', '5', '6']], [['7', '8', '9'], ['10', '11', '12']])\n    {'[['a', 'b', 'c'], ['d', 'e', 'f']][0]': [['1', '2', '3'], ['4', '5', '6']], 'l3[0]': [['7', '8', '9'], ['10', '11', '12']]}\n    '''\n    result = {}\n    for lst1 in l1:\n        for lst2 in l2:\n            for lst3 in l3:\n                key = '[' + str(lst1) + '][' + str(lst2) + '][' + str(lst3) + ']'\n                value = lst1[lst2[lst3]]\n                result[key] = value\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create a dictionary to hold all the lists\n    dictionary = {}\n    \n    # Add the first list to the dictionary with the key \"list1\"\n    dictionary[\"list1\"] = l1\n    \n    # Add the second list to the dictionary with the key \"list2\"\n    dictionary[\"list2\"] = l2\n    \n    # Add the third list to the dictionary with the key \"list3\"\n    dictionary[\"list3\"] = l3\n    \n    # Return the dictionary\n    return dictionary\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n <= 1:\n        return n\n\n    # Recursive case\n    else:\n        return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return n\n\n    # Recursive case\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 5:\n        return n\n    else:\n        max_sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n        return max_sum + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Base case: if n is 1, return 1\n    if n == 1:\n        return 1\n    \n    # Recursive case: compute the sum of the first n/2 numbers and add the nth number\n    else:\n        return get_max_sum(n/2) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_len = len(input_list)\n    max_index = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_index = i\n    return input_list[max_index]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    \n    return input_list[input_list.index(input_list[input_list.index(max_length):])]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize a variable to store the maximum length\n    max_length = 0\n\n    # Iterate through each element of the input list\n    for element in input_list:\n        # Update the maximum length if the current element is longer than the maximum length found so far\n        if len(element) > max_length:\n            max_length = len(element)\n\n    # Return the list with the maximum length\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize variables to store the maximum length and the list with maximum length\n    max_length = 0\n    max_list = []\n    # Loop through each element in the input list\n    for elem in input_list:\n        # Get the length of the element\n        length = len(elem)\n        # If the length is greater than the current maximum length, update the maximum length and the list with maximum length\n        if length > max_length:\n            max_length = length\n            max_list = [elem]\n        # If the length is the same as the current maximum length, add the element to the list with maximum length\n        elif length == max_length:\n            max_list.append(elem)\n    # Return the list with maximum length\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to eliminate duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert tuple to set to remove duplicates\n    unique_set = set(test_tup)\n    # Check if set is empty\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # Create a set of the tuple's elements\n    set_elems = set(test_tup)\n\n    # Check if the set is empty (i.e., all elements are distinct)\n    if len(set_elems) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set to store unique values\n    unique_vals = set()\n    # loop through the tuple\n    for val in test_tup:\n        # if the value is already in the set, return False\n        if val in unique_vals:\n            return False\n        # otherwise, add it to the set\n        unique_vals.add(val)\n    # if no duplicates were found, return True\n    return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # find the first non-repeated character by iterating through the dictionary and checking if the value is 1\n    for char in freq:\n        if freq[char] == 1:\n            return char\n\n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function will find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    first_char = None\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n        if first_char is None:\n            first_char = char\n        elif char_count[char] == 1:\n            first_char = char\n            \n    return first_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # find the first non-repeating character in the dictionary\n    for char in freq:\n        if freq[char] == 1:\n            return char\n\n    # if all characters are repeating, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in it.\n    '''\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Convert the string to a set to remove duplicates\n    set1 = set(str1)\n    # Initialize the index of the first non-repeating character\n    first_non_repeating_index = -1\n    # Loop through the set of characters\n    for index, character in enumerate(set1):\n        # If the character is the first non-repeating character, update the index and break the loop\n        if first_non_repeating_index == -1:\n            first_non_repeating_index = index\n            break\n    # Return the first non-repeating character\n    return set1[first_non_repeating_index]"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character in the string.\n\n    If no non-repeated character is found, it returns None.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Iterate over the string and update the count of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate over the string again to find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function finds the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # Loop through the string and update the frequency of each character\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n            \n    # Find the first non-repeated character\n    for char, count in freq.items():\n        if count == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    # iterate through the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # if the character is not in the dictionary, add it and set its frequency to 1\n        else:\n            freq[char] = 1\n    # find the first character that appears only once in the dictionary\n    for char, freq in freq.items():\n        if freq == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    return \"No non-repeating character found.\""
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_char(string):\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    return pattern.match(string) is not None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a, b, c])\n    mid = len(sorted_numbers) // 2\n    if len(sorted_numbers) % 2 == 0:\n        return (sorted_numbers[mid-1] + sorted_numbers[mid]) / 2\n    else:\n        return sorted_numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    sorted_numbers = sorted([a,b,c])\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers)//2 - 1] + sorted_numbers[len(sorted_numbers)//2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # get the length of the list\n    length = len(sorted_numbers)\n    # find the middle index of the list\n    middle_index = length // 2\n    # calculate the median\n    if length % 2 == 0:\n        # if the length is even, return the average of the two middle numbers\n        median = (sorted_numbers[middle_index-1] + sorted_numbers[middle_index]) / 2\n    else:\n        # if the length is odd, return the middle number\n        median = sorted_numbers[middle_index]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import random\n\ndef partition(arr, low, high):\n    pivot_index = random.randint(low, high)\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[high] = arr[high], arr[pivot_index]\n    i = low\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n    arr[i], arr[high] = arr[high], arr[i]\n    return i\n\ndef quickselect(arr, low, high, k):\n    if low == high:\n        return arr[low]\n    pivot_index = partition(arr, low, high)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, low, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, high, k)\n\ndef median_numbers(a, b, c):\n    return quickselect([a, b, c], 0, 2, 1)"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n//2-1] + numbers[n//2])/2\n    else:\n        median = numbers[n//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    # sort the numbers in descending order\n    sorted_numbers = sorted([a, b, c], reverse=True)\n\n    # calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        # if the length of the sorted list is even, the median is the average of the two middle numbers\n        median = (sorted_numbers[1] + sorted_numbers[0]) / 2\n    else:\n        # if the length of the sorted list is odd, the median is the middle number\n        median = sorted_numbers[1]\n\n    # return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the length of the array\n    length = len(numbers)\n\n    # Determine the median based on the length of the array\n    if length % 2 == 0:\n        # If the length is even, take the average of the two middle numbers\n        median = (numbers[length//2] + numbers[length//2 - 1]) / 2\n    else:\n        # If the length is odd, take the middle number\n        median = numbers[length//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers in ascending order\n    numbers = sorted([a,b,c])\n\n    # Calculate the median\n    mid = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        median = (numbers[mid-1] + numbers[mid]) / 2\n    else:\n        median = numbers[mid]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    # Find the sum of the three numbers\n    total = a + b + c\n\n    # Find the average of the three numbers\n    avg = total / 3\n\n    # Find the middle index of the list (index 1)\n    mid = 1\n\n    # Create an empty list to store the sorted numbers\n    sorted_numbers = []\n\n    # Check if the average is an integer or decimal\n    if avg.is_integer():\n        # If it's an integer, find the middle integer number and add it to the list\n        if a > b and a > c:\n            sorted_numbers.append(a)\n        elif b > a and b > c:\n            sorted_numbers.append(b)\n        elif c > a and c > b:\n            sorted_numbers.append(c)\n\n        # Add the middle integer number to the list\n        sorted_numbers.append(a)\n\n    else:\n        # If it's a decimal, find the two middle decimal numbers and add them to the list\n        if a > b:\n            sorted_numbers.append(a)\n            sorted_numbers.append(b)\n        elif b > a:\n            sorted_numbers.append(b)\n            sorted_numbers.append(a)\n        else:\n            sorted_numbers.append(a)\n\n        if c > b:\n            sorted_numbers.append(c)\n            sorted_numbers.append(b)\n        elif b > c:\n            sorted_numbers.append(b)\n            sorted_numbers.append(c)\n        else:\n            sorted_numbers.append(b)\n\n        if c > a:\n            sorted_numbers.append(c)\n            sorted_numbers.append(a)\n        elif a > c:\n            sorted_numbers.append(a)\n            sorted_numbers.append(c)\n        else:\n            sorted_numbers.append(a)\n\n    # Sort the sorted_numbers list and return the middle value (index 1)\n    return sorted_numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Calculate the length of the list\n    length = len(sorted_list)\n\n    # If the length is odd, the median is the middle number\n    if length % 2 == 1:\n        median = sorted_list[length // 2]\n\n    # If the length is even, the median is the average of the two middle numbers\n    else:\n        mid_index = length // 2\n        median = (sorted_list[mid_index - 1] + sorted_list[mid_index]) / 2\n\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        # convert the number to string and split it into digits\n        digits = list(str(num))\n        # convert the list of digits to integer and add to total sum\n        total_sum += sum(map(int, digits))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        # Convert the number to a string and convert each character to an integer\n        num_list = [int(i) for i in str(num)]\n        # Sum up the digits of each number\n        num_sum = sum(num_list)\n        # Append the sum to the result list\n        result.append(num_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        # convert the number to a string and convert each character to an integer\n        # sum up the digits of the number and add it to the result\n        digits = sum(int(digit) for digit in str(num))\n        result += digits\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        sum_list.append(sum)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(map(int, str(num))) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        if type(num) == int:\n            # convert number to string and convert each digit to int\n            digits = [int(digit) for digit in str(num)]\n            # add up the digits\n            sum_digits += sum(digits)\n        else:\n            sum_digits = -1\n            break\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    digit_sum = 0\n    for num in nums:\n        # convert the number to a string\n        num_str = str(num)\n        # loop through each character in the string\n        for char in num_str:\n            # convert the character to an integer\n            digit = int(char)\n            # add the integer to the running sum\n            digit_sum += digit\n    return digit_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # Define a function to perform the mathematical bitwise xor operation across two numbers\n    def bitwise_xor_num(num1, num2):\n        return num1 ^ num2\n\n    # Use list comprehension to apply the bitwise_xor_num function to each element of the tuples\n    xor_result = [bitwise_xor_num(num1, num2) for num1, num2 in zip(test_tup1, test_tup2)]\n\n    # Return the xor_result list as a tuple\n    return tuple(xor_result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Check if the input tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples must have the same length.\")\n    \n    # Initialize an empty list to store the results\n    xor_results = []\n    \n    # Perform the mathematical bitwise xor operation on each element of the input tuples\n    for i in range(len(test_tup1)):\n        xor_results.append(test_tup1[i] ^ test_tup2[i])\n    \n    # Return the results as a tuple\n    return tuple(xor_results)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_value = 0\n    for i in range(len(test_tup1)):\n        xor_value ^= test_tup1[i] ^ test_tup2[i]\n    return xor_value"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # check if the length of both tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuple lengths are not equal\")\n        return None\n    \n    # perform bitwise xor operation across all elements of the tuples\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n    \n    # return the result\n    return test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n\n    Inputs:\n    test_tup1: tuple of integers (can be negative)\n    test_tup2: tuple of integers (can be negative)\n\n    Output:\n    An integer representing the bitwise xor of the two input tuples.\n    '''\n\n    # iterate through the tuples and perform the bitwise xor operation\n    result = 0\n    for i in range(len(test_tup1)):\n        result |= test_tup1[i] ^ test_tup2[i]\n\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result\n"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(bin(x ^ y) for x, y in zip(test_tup1, test_tup2))\n    return ''.join(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # Convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # Perform bitwise xor on each list\n    xor_list = [x ^ y for x, y in zip(list1, list2)]\n    \n    # Convert the lists back to tuples\n    xor_tup = tuple(xor_list)\n    \n    return xor_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a set to store unique tuples\n    unique_tuples = set()\n    \n    # loop through the list to add unique tuples to the set\n    for tup in test_list:\n        unique_tuples.add(tup)\n    \n    # return the length of the set (which is the number of unique tuples)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a set of tuples from the list\n    set_of_tuples = set(test_list)\n    \n    # Calculate the length of the set\n    unique_tuple_count = len(set_of_tuples)\n    \n    return unique_tuple_count"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for i in test_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    freq_set = set()\n    for item in test_list:\n        freq_set.add(tuple(item))\n    freq_list = list(freq_set)\n    return len(freq_list)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Create an empty set to store unique tuples\n    unique_tuples = set()\n    \n    # Iterate over the list and add each unique tuple to the set\n    for tup in test_list:\n        unique_tuples.add(tup)\n    \n    # Return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            count += 1\n    return count"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Initialize a list to store the result\n    result = []\n\n    # Iterate over each element in both tuples\n    for i in range(len(test_tup1)):\n        # Append the sum of corresponding elements to the result list\n        result.append(test_tup1[i] + test_tup2[i])\n\n    # Return the result list\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize the result tuple\n    result = []\n    # iterate over both tuples using nested loops\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            # add the elements at indices i, j of both tuples\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n    # return the result tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples should have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple:\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            try:\n                result.append(test_tup1[i] + test_tup2[i])\n            except TypeError:\n                print(\"Error: Both tuples should have the same types.\")\n                return\n            \n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result of the addition\n    result = []\n    \n    # Loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Add the element at the current index of the first tuple with the element at the current index of the second tuple\n        result.append(test_tup1[i] + test_tup2[i])\n    \n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return [[x+y for x in tup1] for tup1, tup2 in zip(test_tup1, test_tup2)]"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a new empty list to store the result\n    result = []\n\n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # loop through each element in the second tuple\n        for j in range(len(test_tup2[i])):\n            # add the corresponding elements from the two tuples and append the result to the result list\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n\n    # return the result list\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Check if the input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The number of elements in the input tuples is not same.\")\n        return\n\n    # Initialize the result tuple\n    result_tup = []\n\n    # Iterate through the elements of each tuple\n    for i in range(len(test_tup1)):\n        # Check if the element is a tuple\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            # Recursively add the two tuples and add the result to the result tuple\n            result_tup.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            # If the element is not a tuple, add them directly to the result tuple\n            result_tup.append(test_tup1[i] + test_tup2[i])\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a, b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of those numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function finds the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of them.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:  \n        return a  \n    else:  \n        return b "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for item in tuplex:\n        if item in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"The element\", tuplex, \"exists in the tuple\")\n    else:\n        print(\"The element\", tuplex, \"does not exist in the tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for tup in tuplex:\n        if tup in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"The element exists within the tuple.\")\n    else:\n        print(\"The element does not exist within the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print(f\"{tuple1} exists in {tuplex}\")\n    else:\n        print(f\"{tuple1} does not exist in {tuplex}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex: \n        if element in tuple1: \n            return True \n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd or even.\n    \"\"\"\n    if x % 2 == 0:\n        return \"The parity of {} is even.\".format(x)\n    else:\n        return \"The parity of {} is odd.\".format(x)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return bool(x & 1)\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    # Initialize the parity variable to True\n    parity = True\n\n    # Loop through each digit in the number\n    for digit in str(x):\n        # If the digit is odd, set the parity to False\n        if int(digit) % 2!= 0:\n            parity = False\n\n    # Return the parity\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2!= 0: \n        return \"The parity of this number is odd.\"\n    else: \n        return \"The parity of this number is even.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 1\n    while x > 1:\n        x //= 2\n        parity *= 2\n    return parity % 2 == 1"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the number\", x, \"is even.\"\n    else:\n        return \"The parity of the number\", x, \"is odd.\"\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0: # if x is even \n        print(x,\"is an even number.\")\n        return \"even\"\n    else: # if x is odd \n        print(x,\"is an odd number.\")\n        return \"odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'The parity of {} is even'.format(x)\n    else:\n        return 'The parity of {} is odd'.format(x)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n\n    # Check if the input is an integer\n    if type(x)!= int:\n        print(\"The input must be an integer.\")\n        return\n    \n    # Check if the number is negative\n    if x < 0:\n        print(\"The number cannot be negative.\")\n        return\n    \n    # Check if the number is even or odd\n    if x % 2 == 0:\n        print(\"The parity of the number is even.\")\n    else:\n        print(\"The parity of the number is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0: # if the number is even, parity is even\n        return \"Even\"\n    else: # if the number is odd, parity is odd\n        return \"Odd\""
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # initialize a list to store the digits of the given number\n    digits = []\n    # loop through each digit of the number\n    while n:\n        # append the digit to the digits list\n        digits.append(n % 10)\n        # divide the number by 10 to remove the last digit\n        n //= 10\n    # reverse the digits list\n    digits.reverse()\n    # convert the digits list to a number\n    number = int(''.join(str(digit) for digit in digits))\n    # add 1 to the number and return it\n    return number + 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    # convert number to string and sort it\n    s = str(n)\n    s.sort(reverse=True)\n    # create the next bigger number by rearranging the digits\n    next_bigger = 0\n    for digit in s:\n        next_bigger += int(digit) * (10**len(s) - int(digit))\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize variables\n    num = str(n)\n    next_num = \"\"\n    temp_num = \"\"\n    # Check if the number is already the largest possible number\n    if int(num) == 999999999:\n        return 999999999\n    # Rearrange digits in descending order\n    for digit in num:\n        temp_num = temp_num + digit\n    for digit in temp_num:\n        next_num = next_num + digit\n    next_num = int(next_num)\n    return next_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Create the next bigger number by rearranging the digits of a given number.\n\n    :param n: the number to rearrange.\n    :type n: int\n    :return: the next bigger number.\n    :rtype: int\n    \"\"\"\n\n    # Convert the number to a string and split it into a list of digits\n    num_str = str(n)\n    num_list = list(num_str)\n\n    # Iterate through the digits of the number and swap each with the next larger digit\n    for i in range(len(num_list)):\n        if num_list[i] == '9':\n            num_list[i] = '0'\n        elif int(num_list[i]) < 9:\n            num_list[i] = str(int(num_list[i]) + 1)\n        else:\n            num_list[i] = '0'\n\n    # Convert the list of digits back to a string and return the result as an integer\n    next_bigger = int(''.join(num_list))\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # reverse the list of digits\n    digits.reverse()\n    # find the index of the maximum digit\n    max_index = digits.index(max(digits))\n    # reverse the digits up to and including the maximum digit\n    digits[:max_index+1] = digits[:max_index+1][::-1]\n    # convert the list of digits back to a number\n    result = int(''.join(str(digit) for digit in digits))\n    # return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Initialize variables for the digits of the number\n    digits = [int(digit) for digit in num_str]\n\n    # Initialize the next bigger number\n    next_bigger = 0\n\n    # Iterate through the digits of the number\n    for digit in digits:\n\n        # Check if the current digit is even or odd\n        if digit % 2 == 0:\n\n            # If the current digit is even, add 1 to the next bigger number\n            next_bigger += 2**digit - 1\n\n        # If the current digit is odd, subtract 1 from the next bigger number\n        else:\n\n            # If the current digit is odd, subtract 1 from the next bigger number\n            next_bigger -= 2**digit\n\n    # Convert the next bigger number to a string and return it\n    return str(next_bigger)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Find the length of the number string\n    num_length = len(num_str)\n\n    # Initialize an empty string to store the digits of the next bigger number\n    next_bigger_str = ''\n\n    # Loop through each digit of the number string\n    for digit in num_str:\n\n        # Check if the current digit is the last digit\n        if digit == num_str[num_length-1]:\n\n            # If it is, check if there is a digit to the left that is smaller than the current digit\n            for i in range(num_length-2, -1, -1):\n\n                if num_str[i] < digit:\n                    break\n\n            # If there is a digit to the left that is smaller than the current digit, add it to the next bigger number\n            if i!= -1:\n                next_bigger_str += num_str[i]\n\n        # Otherwise, add the current digit to the next bigger number\n        else:\n            next_bigger_str += digit\n\n    # Convert the next bigger number string to an integer and return it\n    return int(next_bigger_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # function to reverse the digits of a number\n    def reverse_digits(num):\n        return int(str(num)[::-1])\n    \n    # find the maximum possible number with the same digits as n\n    max_num = 10 ** len(str(n))\n    while reverse_digits(max_num) > reverse_digits(n):\n        max_num *= 10\n    \n    # find the next bigger number\n    next_bigger = max_num\n    while reverse_digits(next_bigger) > reverse_digits(n):\n        next_bigger *= 10\n    \n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # Convert the number to a string\n    num_str = str(n)\n    \n    # Initialize variables to store the digits and the length of the original number\n    num_digits = [int(d) for d in num_str]\n    original_length = len(num_str)\n    \n    # Find the index of the first digit that is smaller than the next number to create\n    for i in range(original_length - 1, -1, -1):\n        if num_digits[i] > num_digits[i+1]:\n            next_bigger_index = i\n            break\n    \n    # Reverse the digits from the next bigger index to the end of the string\n    num_digits[next_bigger_index:] = num_digits[next_bigger_index:][::-1]\n    \n    # Convert the digits list back to a string and return the number as an integer\n    num_str = ''.join(map(str, num_digits))\n    next_bigger_num = int(num_str)\n    \n    return next_bigger_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize variables\n    num_str = str(n)\n    num_list = list(num_str)\n    next_bigger = -1\n    \n    # Find the largest digit\n    max_digit = max(num_list, key=num_list.index)\n    \n    # Check if the next digit is the biggest digit\n    if num_list.index(max_digit) == len(num_list)-1:\n        return -1\n    \n    # Rearrange the digits\n    num_list[num_list.index(max_digit)] = num_list[len(num_list)-1]\n    num_list.pop(len(num_list)-1)\n    \n    # Convert the list to a string and check if the result is a valid number\n    next_bigger_str = ''.join(num_list)\n    if int(next_bigger_str) < 10**(len(next_bigger_str)) and int(next_bigger_str) >= 10**(len(next_bigger_str)-1):\n        next_bigger = int(next_bigger_str)\n    \n    return next_bigger"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    # create a min heap to store the smallest k pairs\n    min_heap = []\n\n    # iterate over the second array and add each element as a priority\n    for num2 in nums2:\n        heapq.heappush(min_heap, (num2, -nums1.index(num2)))\n\n    # initialize two variables to keep track of the k smallest pairs\n    k_smallest = []\n    k_smallest_index = 0\n\n    # iterate over the first array and add each element as a priority\n    for num1 in nums1:\n        # if the min heap has k elements or less, add the current pair as a priority\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (num1, -nums1.index(num1)))\n            k_smallest.append((num1, -nums1.index(num1)))\n\n        # otherwise, if the min heap has more than k elements, pop the smallest k-1 elements from it and add the current pair as a priority\n        elif len(min_heap) > k:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (num1, -nums1.index(num1)))\n            k_smallest.append((num1, -nums1.index(num1)))\n\n    # return the k smallest pairs\n    return k_smallest[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the smallest pairs\n    min_heap = []\n\n    # Iterate over the two arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # Check if the current pair is the kth smallest\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            # If the current pair is already in the heap, remove the smallest pair and add the new pair\n            else:\n                smallest_pair = heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n                if smallest_pair[0] > min_heap[0][0]:\n                    heapq.heappush(min_heap, smallest_pair)\n\n    # Extract the k smallest pairs from the heap\n    result = []\n    while len(min_heap) > 0:\n        result.append(min_heap[0][1])\n        min_heap = heapq.heappop(min_heap)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a priority queue to store the smallest k numbers\n    min_heap = []\n    # Iterate over the first array\n    for num1 in nums1:\n        # Iterate over the second array\n        for num2 in nums2:\n            # Calculate the sum of the two elements and add it to the priority queue\n            heapq.heappush(min_heap, num1 + num2)\n            # If the size of the priority queue is greater than k, remove the smallest number from the priority queue\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    # Return the smallest k numbers\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    # Sort the first array in non-decreasing order\n    nums1.sort()\n    # Create a min heap of size k\n    min_heap = []\n    # Initialize the result list\n    result = []\n    # Loop through the second array\n    for num2 in nums2:\n        # Loop through the first array and add the current pair to the result list if it is the kth smallest pair\n        for i in range(len(nums1)):\n            if len(result) < k:\n                # Check if the current pair is the kth smallest pair\n                pair = (nums1[i], num2)\n                if len(result) == 0 or pair < result[-1]:\n                    heapq.heappush(min_heap, pair)\n                else:\n                    # If the current pair is not the kth smallest pair, remove the pair with the lowest value from the heap\n                    heapq.heappop(min_heap)\n            else:\n                # If the result list is full, check if the current pair is the kth smallest pair and add it to the result list if it is\n                pair = (nums1[i], num2)\n                if len(result) == k or pair < result[-1]:\n                    heapq.heappush(min_heap, pair)\n        # If the result list is not full, remove the pair with the lowest value from the heap\n        if len(result) < k:\n            heapq.heappop(min_heap)\n    # Return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    result = []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, (num1, num2)))\n\n            if len(result) == k:\n                return result\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    heap1, heap2 = [], []\n    for i in range(len(nums1)):\n        while len(heap1) < k and len(heap2) < k:\n            if nums2[i] < nums1[len(heap1)]:\n                heapq.heappush(heap1, -nums1[len(heap1)])\n            else:\n                heapq.heappush(heap2, -nums2[len(heap2)])\n        if len(heap1) >= k:\n            heapq.heappop(heap1)\n        if len(heap2) >= k:\n            heapq.heappop(heap2)\n        if len(heap1) >= k and len(heap2) >= k:\n            break\n    ans = []\n    for i in range(len(heap1)):\n        ans.append((-heap1[i], -heap2[i]))\n    return ans"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap of size k to store the smallest k elements from the two arrays\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[i]+nums2[j], (i, j)))\n            else:\n                if (nums1[i]+nums2[j]) > min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (nums1[i]+nums2[j], (i, j)))\n\n    # initialize an empty list to store the result\n    result = []\n    # while there are k elements left in the min heap, add the smallest element to the result list and remove it from the min heap\n    while len(min_heap) > 0:\n        result.append(min_heap[0][1][0])\n        heapq.heappop(min_heap)\n\n    # return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    for num in nums1:\n        heapq.heappush(heap, -num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    for num in nums2:\n        if -num in heap:\n            heapq.heappush(heap, -num)\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(heap) == k:\n                return [-heap[0]-heap[1], -heap[0], -heap[1]]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # create a min heap to store the pairs\n    min_heap = []\n\n    # loop through both arrays\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # add the current pair to the min heap\n            heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n\n            # if the min heap has more than k elements, pop the smallest element\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # extract the pairs from the min heap and return them\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    \n    # Add all the elements from nums1 and nums2 to the heap\n    for num in nums1:\n        heapq.heappush(heap, num)\n    for num in nums2:\n        heapq.heappush(heap, num)\n    \n    # Find the k smallest pairs\n    result = []\n    while len(result) < k:\n        pair = (heapq.heappop(heap), heapq.heappop(heap))\n        result.append(pair)\n    \n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k] * list1[j][k]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    min_product = float('inf')\n    temp_product = 1\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            temp_product *= list1[i][0] * list1[j][1]\n\n            if temp_product < min_product:\n                min_product = temp_product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product to be infinity\n    min_product = float('inf')\n\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Compute the product of the i-th tuple and the j-th tuple\n            product = list1[i][0] * list1[j][1]\n\n            # If the product is less than the minimum product, update the minimum product\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product and two pointers for the first and second tuple in the list\n    min_product = float('inf')\n    first_pointer = 0\n    second_pointer = 1\n\n    # Iterate through the list and compare the products of the tuples and update the minimum product if necessary\n    for i in range(2, len(list1)):\n        first_tuple = list1[first_pointer]\n        second_tuple = list1[second_pointer]\n        product = first_tuple[0] * second_tuple[1]\n        if product < min_product:\n            min_product = product\n\n        # Increment the pointers for the next iteration\n        first_pointer += 1\n        second_pointer += 1\n\n    # Return the minimum product found\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    \n    # initialize variables for minimum product and current minimum\n    min_product = float('inf')\n    current_min = float('inf')\n    \n    # iterate through the list and find the minimum product from pairs of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < current_min:\n                current_min = product\n                min_product = product\n                \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples as input and returns the minimum product of all tuples in the list.\n    \"\"\"\n    # Get the length of the list\n    n = len(lst)\n\n    # Initialize a variable to store the minimum product\n    min_prod = float('inf')\n\n    # Loop through all pairs of tuples in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the product of the i-th tuple with the j-th tuple\n            prod = lst[i][0] * lst[j][1]\n\n            # Update the minimum product if the current product is smaller\n            if prod < min_prod:\n                min_prod = prod\n\n    # Return the minimum product of all tuples\n    return min_prod"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if not list1:\n        return None\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product1 = 1\n            for x in list1[i]:\n                product1 *= x\n            product2 = 1\n            for x in list1[j]:\n                product2 *= x\n            if product1 < product2:\n                min_product = min(min_product, product1)\n            else:\n                min_product = min(min_product, product2)\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize variables\n    min_product = float('inf')\n    product = 1\n\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        # Loop through the remaining tuples\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the current tuple and the remaining tuples\n            product = 1\n            for k in range(j+1, len(list1)):\n                product *= list1[k][j]\n            # Update the minimum product if the current tuple produces a smaller product\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(lst):\n    \"\"\"\n    This function finds the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not lst:\n        return None\n    min_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise ValueError('Input must be a list')\n    elif len(listval) == 0:\n        raise ValueError('List must not be empty')\n    \n    min_val = listval[0]\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = float('inf')\n    for val in listval:\n        if val < minval:\n            minval = val\n    return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError(\"List is empty.\")\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    else:\n        min_value = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_value:\n                min_value = listval[i]\n        return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = float('inf')\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize the minimum value variable\n    min_val = listval[0]\n    \n    # Loop through the list and update the minimum value variable\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n            \n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('_(.)', lambda match: match.group(1).upper(), word)\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert to snake case\n    snake_case = re.sub('([A-Z])', r'_\\1', word)\n    # convert to camel case\n    camel_case = ''.join(word.title().split('_'))\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub('(_[a-z])', lambda x: x.group(1).upper(), word)\n    return camel_case.lstrip('_')"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    regex = re.compile(r'_(.)?') # matches either an underscore followed by a letter or an underscore\n    matches = regex.findall(word) # finds all matches in the word using the regex pattern\n    \n    # checks if the matches contain only two or more underscores\n    if len(matches) > 1:\n        return word.lower()\n    \n    # if there are only one or zero underscores, convert the first letter to uppercase and the rest to lowercase\n    first_letter = matches[0]\n    if first_letter == '_':\n        return word\n    else:\n        return first_letter.upper() + word[1:].lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert all underscores to spaces to match Python syntax\n    word = re.sub(r'(_)','', word)\n    # capitalize the first letter of the first word\n    first_word, *words = word.split()\n    camel_case_word = ''.join(words)\n    return first_word.lower() + camel_case_word.capitalize()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # split the input word into individual words\n    words = word.split('_')\n\n    # capitalize the first letter of each word\n    result = []\n    for word in words:\n        if len(word) > 0:\n            first_letter = word[0].upper()\n            rest_of_word = word[1:]\n            result.append(first_letter + rest_of_word)\n\n    # join the words into a camel case string\n    return ''.join(result)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'_(\\w)'\n    replacement = lambda match: match.group(1).upper()\n    return re.sub(pattern, replacement, word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case_word = ''.join(word.title().split('_'))\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Convert the snake case string to camel case string\n    camel_case = re.sub('([a-z])([A-Z])', r'\\1_\\2', word)\n\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_numbers = [num for num in l if num % 2!= 0]\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if list is empty\n    if not list1:\n        return None\n    # check if n is valid\n    if n <= 0:\n        return None\n    # iterate through the list and extract the nth element\n    for i, tup in enumerate(list1):\n        if i == n-1:\n            return tup[1]\n    # if n is greater than the list length, return None\n    return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if n < 1 or n > len(list1):\n        return \"Invalid input. n must be a positive integer between 1 and the length of the list.\"\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        print(\"Error: n must be a positive integer.\")\n        return\n    \n    # Check if the input list is a list of tuples\n    if type(list1)!= list or not all(isinstance(t, tuple) for t in list1):\n        print(\"Error: Input list must be a list of tuples.\")\n        return\n    \n    # Check if the input list has at least n elements\n    if len(list1) < n:\n        print(\"Error: Input list must have at least n elements.\")\n        return\n    \n    # Extract the nth element from the input list\n    result = list1[n-1]\n    \n    return result"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i, tup in enumerate(list1):\n        if i == n-1:\n            return tup"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if n > len(list1):\n        raise ValueError(\"n is greater than the length of the list\")\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n\n    # Initialize the result list\n    result = []\n\n    # Loop through each tuple in the list\n    for tup in list1:\n        # Append the nth element of each tuple to the result list\n        result.append(tup[n-1])\n\n    # Return the result list\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # loop through list1 and check if each value exists in list2\n    for value in list1:\n        if value in list2:\n            return True\n    # if no values in list1 exist in list2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Use set intersection to find the overlapping elements between the two sequences\n    overlapping_set = set(list1) & set(list2)\n\n    # Check if there are any overlapping elements in the two sequences\n    if overlapping_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and checks whether any value in the first sequence\n    exists in the second sequence or not.\n    \"\"\"\n    # iterate over the first list and check if any element exists in the second list\n    for item in list1:\n        if item in list2:\n            return True\n    # if no element is found in the second list, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there is any common element between the two lists,\n    otherwise it returns False.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # initializing a set to store the values of list1\n    set1 = set(list1)\n    # iterating over each value in list2\n    for value in list2:\n        # checking if the value is present in set1\n        if value in set1:\n            # returning True if the value is present in set1\n            return True\n    # returning False if no value is present in set1\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as arguments and returns True if there is any value in the first list that exists in the second list and vice versa.\n    '''\n    # Initialize two empty lists to store the common values\n    common_values = []\n    \n    # Iterate through the first list and check if each value exists in the second list\n    for value in list1:\n        if value in list2:\n            common_values.append(value)\n    \n    # If there are any common values, return True\n    if len(common_values) > 0:\n        return True\n    \n    # If there are no common values, return False\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n\n    for i in list1:\n        if i in list2:\n            return True\n\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns the pair with the highest product.\n    '''\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n        if i < min1:\n            min2 = min1\n            min1 = i\n        elif i < min2:\n            min2 = i\n    return (max1, min2)\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    # Initialize variables to keep track of the maximum product and its indices\n    max_product = float('-inf')\n    max_product_index = 0\n    second_max_product = float('-inf')\n    second_max_product_index = 0\n\n    # Loop through the array and update the maximum and second maximum products accordingly\n    for i in range(len(arr)):\n        if arr[i] * arr[i] > max_product:\n            second_max_product = max_product\n            max_product = arr[i] * arr[i]\n            second_max_product_index = max_product_index\n        elif arr[i] * arr[i] > second_max_product and arr[i]!= max_product:\n            second_max_product = arr[i] * arr[i]\n            second_max_product_index = i\n\n    # Return the indices of the two products with the highest product\n    return max_product_index, second_max_product_index"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) <= 1:\n        return arr[0] * arr[1] if len(arr) == 1 else None\n    \n    # Initialize variables to store the maximum product and the index of the maximum product\n    max_product = arr[0] * arr[1]\n    max_product_index = 0\n    \n    # Iterate through the array and update the maximum product and its index\n    for i in range(2, len(arr)):\n        if arr[i] > 0:\n            product = arr[i] * arr[len(arr)-i]\n            if product > max_product:\n                max_product = product\n                max_product_index = i\n    \n    return max_product, max_product_index"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Find the pair with highest product\n    max_product = arr[0] * arr[1]\n    second_max_product = 0\n\n    for i in range(2, len(arr)):\n        if arr[i] * arr[i - 1] > second_max_product:\n            second_max_product = arr[i] * arr[i - 1]\n\n    # Return the pair with highest product\n    return max(max_product, second_max_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1, max2 = float('-inf'), float('-inf') # initialize the maximum values\n    \n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n    \n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the pair with the highest product.\n    \"\"\"\n    # Initialize variables\n    max1 = max2 = float('-inf')\n    max3 = float('-inf')\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Check if the element is greater than max1\n        if arr[i] > max1:\n            # Update max3 and max2\n            max3 = max2\n            max2 = max1\n            # Update max1\n            max1 = arr[i]\n\n        # Check if the element is greater than max2 and less than max1\n        elif arr[i] > max2 and arr[i] < max1:\n            # Update max3\n            max3 = max2\n            # Update max2\n            max2 = arr[i]\n\n        # Check if the element is greater than max3 and less than max2\n        elif arr[i] > max3 and arr[i] < max2:\n            # Update max3\n            max3 = arr[i]\n\n    return max1, max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    # Find the maximum value in the array\n    max_val = max(arr)\n    # Initialize two variables to store the minimum and maximum values\n    min_val = max_val\n    max_prod = arr[0]\n    \n    # Iterate through the array and update the minimum and maximum values and their products\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n        if arr[i] * min_val > max_prod:\n            max_prod = arr[i] * min_val\n        if arr[i] * max_val < max_prod:\n            max_prod = arr[i] * max_val\n    \n    # Return the pair with the highest product\n    return [min_val, max_val]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    This function takes a list of integers as input and returns the pair with the highest product.\n    '''\n    max_pair = []\n    min_pair = []\n\n    # Find the minimum and maximum value of the array\n    min_val = min(arr)\n    max_val = max(arr)\n\n    # Find the pairs with the highest product\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_val:\n                max_pair = [arr[i], arr[j]]\n            elif arr[i] * arr[j] < min_val:\n                min_pair = [arr[i], arr[j]]\n\n    # Return the maximum product pair\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_1 = float('-inf')\n    max_2 = float('-inf')\n    min_1 = float('inf')\n    min_2 = float('inf')\n    for num in arr:\n        if num > max_1:\n            max_2 = max_1\n            max_1 = num\n        elif num > max_2:\n            max_2 = num\n        elif num < min_1:\n            min_2 = min_1\n            min_1 = num\n        elif num < min_2:\n            min_2 = num\n    return max_1 * max_2, max_1 * min_2, min_1 * min_2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i][0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = None\n    for tuple in Input:\n        if tuple[0] == common:\n            return tuple[0]\n    return None"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for item in Input:\n        if common_element is None:\n            common_element = item[0]\n        elif item[0] == common_element:\n            continue\n        else:\n            return common_element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    # Initialize an empty dictionary to store the common elements\n    common_dict = {}\n\n    # Loop through the list of tuples\n    for tup in Input:\n        # Extract the first element of the tuple\n        first_element = tup[0]\n\n        # Check if the first element is already in the dictionary\n        if first_element in common_dict:\n            # If yes, add the tuple to the corresponding list\n            common_dict[first_element].append(tup)\n        else:\n            # If not, add the tuple to the dictionary with a list as its value\n            common_dict[first_element] = [tup]\n\n    # Extract the list of common elements from the dictionary\n    common_elements = common_dict.keys()\n\n    # Create an empty list to store the output\n    output_list = []\n\n    # Loop through the list of common elements\n    for element in common_elements:\n        # Loop through the list of tuples with the same first element\n        for tup in common_dict[element]:\n            # Add the tuple to the output list\n            output_list.append(tup)\n\n    # Return the output list\n    return output_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize an empty dictionary to store the count of each element\n    count = {}\n\n    # Iterate through the list of tuples and count the number of occurrences of each element\n    for tup in Input:\n        for elem in tup:\n            if elem in count:\n                count[elem] += 1\n            else:\n                count[elem] = 1\n\n    # Find the element with the highest count\n    max_count = max(count.values())\n\n    # Create a list of elements with the highest count\n    max_elems = [k for k, v in count.items() if v == max_count]\n\n    # Find the common elements between the tuples with the highest count\n    common_elems = set(max_elems[0]) & set(max_elems[1])\n\n    # Return the common elements as a list\n    return list(common_elems)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for i in range(len(Input)):\n        if len(set([t[0] for t in Input[0:i]])) == 1:\n            common.append(Input[0:i])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = None\n    for tuple_ in Input:\n        if common_first is None:\n            common_first = tuple_[0]\n        elif tuple_[0] == common_first:\n            continue\n        else:\n            common_first = None\n            break\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = []\n    for item in Input:\n        for element in item:\n            if element not in common_elements:\n                common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns the group of tuples where the common first element is the same.\n    '''\n    common_elements = []\n    for i in range(len(Input)-1):\n        if Input[i][0] in common_elements:\n            common_elements.remove(Input[i][0])\n        else:\n            common_elements.append(Input[i][0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize an empty dictionary to store common elements\n    common_elements = {}\n    # Iterate over each tuple in the list\n    for tuple1 in Input:\n        # Extract the first element of the tuple\n        element1 = tuple1[0]\n        # Iterate over each tuple in the list\n        for tuple2 in Input:\n            # Extract the first element of the second tuple\n            element2 = tuple2[0]\n            # Check if the first elements of the two tuples are equal\n            if element1 == element2:\n                # Check if the first element is already a key in the dictionary\n                if element1 in common_elements:\n                    # If it is, append the second tuple to the list of tuples associated with that key\n                    common_elements[element1].append(tuple2)\n                else:\n                    # If it is not, add the key-value pair to the dictionary with a list of tuples as the value\n                    common_elements[element1] = [tuple2]\n    # Return the dictionary containing common elements as keys and lists of tuples as values\n    return common_elements"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for item in lst:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_element = item\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # initialize a variable to store the maximum length\n    max_length = 0\n    \n    # loop through each element in the list\n    for i in range(len(lst)):\n        \n        # calculate the length of the current element\n        current_length = len(str(lst[i]))\n        \n        # check if the current element has a greater length\n        if current_length > max_length:\n            \n            # update the maximum length with the current element's length\n            max_length = current_length\n    \n    # return the maximum length element\n    return lst[lst.index(max(lst))]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = \"\"\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list \n    having the maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n\n    # iterate through the list\n    for elem in lst: \n        # if the length of the current element is greater than the maximum length \n        if len(elem) > max_length: \n            # update the maximum length and maximum element\n            max_length = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_length = 0\n    max_elem = ''\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_elem = i\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = max(len(i) for i in lst)\n    max_element = [i for i in lst if len(i) == max_len][0]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_str = ''\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_str = str(i)\n    return max_str"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0 \n    max_element = None \n    for element in lst: \n        if len(str(element)) > max_length: \n            max_length = len(str(element)) \n            max_element = element \n    return max_element "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(lst):\n    # Round each number in the list\n    rounded_list = [round(num) for num in lst]\n    \n    # Calculate the total sum\n    total_sum = sum(rounded_list)\n    \n    # Print the result\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        rounded_num = round(num)\n        total += rounded_num\n    print(total*len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(lst):\n    \"\"\"\n    This function takes a list of numbers as input and rounds it to the nearest integer.\n    It then calculates the sum of the rounded numbers and prints the result multiplied by the length of the list.\n    \"\"\"\n    sum_of_rounded_numbers = sum(round(num) for num in lst)\n    print(sum_of_rounded_numbers * len(lst))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        if type(num) == float:\n            total += round(num)\n        else:\n            total += num\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    This function takes an integer n as input and returns the sum of first n even natural numbers cube.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        num = 2*i+1\n        sum += num**3\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nresult = cube_Sum(n)\nprint(\"The cube sum of first\", n, \"even natural numbers is:\", result)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initializing the sum variable to 0\n    sum_cubes = 0\n    \n    # iterating through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculating the cube of i\n        cube_i = i**3\n        \n        # adding the cube to the sum variable\n        sum_cubes += cube_i\n    \n    # returning the sum of cubes\n    return sum_cubes"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return_string = ''\n    for item in test_tup:\n        return_string += str(item)\n    return return_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    result = []\n    for item in test_tup:\n        result.append(str(item))\n    return delimiter.join(result)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return ','.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # defining the delimiter\n    delimiter = \",\"\n    \n    # creating an empty string variable to store the concatenated string\n    concatenated_string = \"\"\n    \n    # iterating over each element of the tuple\n    for element in test_tup:\n        # adding the element to the concatenated string\n        concatenated_string += str(element)\n        \n        # adding the delimiter to the concatenated string if not the last element\n        if element!= test_tup[-1]:\n            concatenated_string += delimiter\n    \n    # returning the concatenated string\n    return concatenated_string"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    average = 0\n    for i in range(1, n+1):\n        cube = i*i*i\n        average += cube\n    average /= n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum += i*i*i\n        count += 1\n\n    if count == 0:\n        return 0\n    else:\n        return sum/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    average = sum_of_cubes / n\n    print(\"The average of cubes of the first {} natural numbers is {:.2f}\".format(n, average))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i*i*i\n    average = sum_of_cubes/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i ** 3\n    average = total / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        count += 1\n    return sum_of_cubes/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(1, n+1):\n        sum_cube += i**3\n    average_cube = sum_cube/n\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average_cube)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    count = 0\n    \n    # iterate through the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n    \n    # calculate the average of cubes\n    average_of_cubes = sum_of_cubes / count\n    \n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total / (n**3)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_tuple = []\n    for i in range(len(test_tuple)):\n        rear_index_tuple.append(test_tuple[i][-1])\n    return rear_index_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[1:-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for string in test_tuple:\n        rear_index_elements.append(string[len(string)-1])\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        rear_index = len(item) - 1\n        rear_char = item[rear_index]\n        result.append(rear_char)\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_indices = []\n    for i, string in enumerate(test_tuple):\n        rear_indices.append(i)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, string in enumerate(test_tuple):\n        if i % 2 == 0:\n            rear_indices.append(i - 1)\n    return rear_indices"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    count = 0 \n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            filtered_nums.append(num)\n    return filtered_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Define the date pattern\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Match the pattern in the date string\n    matches = re.findall(pattern, dt)\n\n    # If there are no matches, return the original date string\n    if not matches:\n        return dt\n\n    # Extract the year, month, and day from the matches\n    year, month, day = matches[0].split('-')\n\n    # Convert the day, month, and year to dd-mm-yyyy format\n    new_date_str = f'{day}-{month}-{year}'\n\n    # Return the new date string\n    return new_date_str"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # convert the date to yyyy-mm-dd format\n    dt_str = str(dt)\n    yyyy_mm_dd_format = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt_str)\n    \n    # convert the date to dd-mm-yyyy format\n    dd_mm_yyyy_format = re.sub(r'(\\d{2})-(\\d{2})-(\\d{4})', r'\\3-\\1-\\2', yyyy_mm_dd_format)\n    \n    return dd_mm_yyyy_format"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define regular expression pattern to match date format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n\n    # match the pattern with the input date string\n    match = re.match(pattern, dt)\n\n    # if match is found, use sub to replace the date format from yyyy-mm-dd to dd-mm-yyyy\n    if match:\n        return re.sub('-', '/', match.group(0))\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match a date in yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Use re.sub() method to replace the pattern in the date with the desired format\n    new_dt = re.sub(pattern, r'\\g<2>-\\g<1>-\\g<3>', dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert yyyy-mm-dd format to dd-mm-yyyy format\n    dt = dt.replace('-', '/')\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd_regex = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    dd_mm_yyyy_regex = r'(\\d{2})-(\\d{2})-(\\d{4})'\n\n    yyyy_mm_dd_match = re.match(yyyy_mm_dd_regex, dt)\n    dd_mm_yyyy_match = re.match(dd_mm_yyyy_regex, dt)\n\n    if yyyy_mm_dd_match:\n        yyyy, mm, dd = yyyy_mm_dd_match.groups()\n        return f'{dd}-{mm}-{yyyy}'\n    elif dd_mm_yyyy_match:\n        dd, mm, yyyy = dd_mm_yyyy_match.groups()\n        return f'{dd}-{mm}-{yyyy}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    repl = r'\\3-\\2-\\1'\n    return re.sub(pattern, repl, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = date_format.search(dt)\n    if match:\n        year, month, day = match.groups()\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # remove any non-numeric characters from the date string\n    dt = re.sub('[^0-9]', '', dt)\n\n    # split the date string into parts\n    parts = dt.split('-')\n\n    # convert each part to integer\n    year = int(parts[0])\n    month = int(parts[1])\n    day = int(parts[2])\n\n    # create a new date string in dd-mm-yyyy format\n    new_date = '{:02d}-{:02d}-{:04d}'.format(day, month, year)\n\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # regular expression to match date format\n    regex = r'\\d{4}-\\d{2}-\\d{2}'\n    # pattern to find date format in the input string\n    pattern = re.compile(regex)\n    # match the date format in the input string\n    match = pattern.match(dt)\n    # if there is a match, convert the date to dd-mm-yyyy format\n    if match:\n        # split the date into month, day, and year components\n        month, day, year = match.group().split('-')\n        # create a new date string in dd-mm-yyyy format\n        new_date = f'{day}-{month}-{year}'\n        # return the new date string\n        return new_date\n    # if there is no match, return the input string\n    else:\n        return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    \n    # Find the largest gap\n    gap = n//2\n    \n    # Perform insertion sort on gap size elements\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Finding the maximum element in the array\n    max_element = my_list[0]\n    for i in range(1, len(my_list)):\n        if my_list[i] > max_element:\n            max_element = my_list[i]\n            \n    # Performing shell sort\n    gap = max_element // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Step 1: Find the largest gap\n    gap = n // 2\n    while gap > 0:\n        # Step 2: Perform insertion sort for this gap size\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        # Step 3: Decrease the gap size\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Perform insertion sort on smaller arrays\n    for gap in range(n//2):\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap//2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Calculate the increment for each gap size\n    gap = len(my_list) // 2\n    while gap > 0:\n        # Shift elements smaller than the current gap size to the left\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        # Decrease the gap size for the next iteration\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (test_tup1[i], test_tup2[i])\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to hold the elementwise and tuples\n    result_lst = []\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Extract the i-th element from the first tuple\n        elem1 = test_tup1[i]\n        # Extract the i-th element from the second tuple\n        elem2 = test_tup2[i]\n        # Compute the elementwise and of the two elements\n        and_elem = elem1 & elem2\n        # Append the and element to the result list\n        result_lst.append(and_elem)\n    # Return the result list\n    return result_lst"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n    \n    # create a new tuple with the elementwise and tuples\n    and_tup = tuple(x & y for x, y in zip(test_tup1, test_tup2))\n    \n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] & test_tup2[i])\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Get the number of elements in each tuple\n    num_elements = len(test_tup1)\n    \n    # Initialize the result tuple\n    result_tup = ()\n    \n    # Loop through each element in the first tuple\n    for i in range(num_elements):\n        # Extract the corresponding elements from the second tuple\n        element1 = test_tup1[i]\n        element2 = test_tup2[i]\n        \n        # Calculate the elementwise and\n        and_element = element1 & element2\n        \n        # Add the and element to the result tuple\n        result_tup = result_tup + (and_element,)\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # initialize the result tuple with the same length as the two input tuples\n    result_tup = ()\n\n    # loop through each element in the input tuples\n    for i in range(len(test_tup1)):\n        # extract the corresponding elements from the input tuples\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n\n        # calculate the elementwise and of the corresponding elements\n        and_elem = tup1_elem & tup2_elem\n\n        # append the and element to the result tuple\n        result_tup += (and_elem,)\n\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length!\")\n        return None\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        if b == 0:\n            return \"No real solution.\"\n        else:\n            return \"There is no directrix.\"\n    else:\n        return (-c / a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return x1, x2\n    else:\n        x = -b/(2*a)\n        return x\n\na = float(input(\"Enter the value of a: \"))\nb = float(input(\"Enter the value of b: \"))\nc = float(input(\"Enter the value of c: \"))\n\nx1, x2 = parabola_directrix(a, b, c)\n\nprint(\"The directrix of the parabola is:\", x1)\nprint(\"The other directrix is:\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return x1, x2\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return x, x\n    else:\n        return \"The equation has no real roots.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        return root1, root2\n    else:\n        print(\"There are no real roots for this equation.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + math.sqrt(discriminant)) / (2*a)\n        x2 = (-b - math.sqrt(discriminant)) / (2*a)\n    elif discriminant == 0:\n        x1 = x2 = -b / (2*a)\n    else:\n        x1 = x2 = None\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Define the quadratic equation in the form ax^2 + bx + c = 0\n    quadratic = a**2 + b**2 - 4*a*b*c\n\n    # If the quadratic equation has real roots, the directrix is the point where the equation crosses the x-axis\n    if quadratic >= 0:\n        return (-b + quadratic**0.5) / (2*a)\n    else:\n        return (-b - quadratic**0.5) / (2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return None\n    elif delta == 0:\n        return (-b)/(2*a)\n    else:\n        return (-b + delta**0.5)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    # calculate the discriminant\n    delta = b**2 - 4*a*c\n    \n    # check if the discriminant is zero\n    if delta == 0:\n        # the directrix is the root of the discriminant\n        return -b/(2*a)\n    \n    # check if the discriminant is positive\n    elif delta > 0:\n        # the directrix is the midpoint of the two real roots\n        x1 = (-b + (delta**0.5))/(2*a)\n        x2 = (-b - (delta**0.5))/(2*a)\n        return (x1+x2)/2\n    \n    # otherwise, the discriminant is negative\n    else:\n        # the directrix is half the distance from the point (a,c) to the line passing through (a,b)\n        return -c/(2*b)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Calculate the root of the discriminant\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n\n    # Sort the roots in ascending order\n    roots = sorted([root1, root2])\n\n    return roots[1]"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    return directrix"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set from the first list to remove duplicates\n    list1_set = set(list1)\n    # Loop through the second list and check if any element is in the set\n    for item in list2:\n        if item in list1_set:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1.intersection(set2))"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # First, we check if the two lists have the same length\n    if len(list1)!= len(list2):\n        return False\n\n    # We iterate through each element in the first list\n    for element in list1:\n        # If the element is in the second list, we return True\n        if element in list2:\n            return True\n    \n    # If we reach this point, we know that there are no common elements\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n\n    # Initialize an empty set to store common elements\n    common = set()\n\n    # Iterate through each element in list1\n    for element1 in list1:\n        # Check if the element exists in list2\n        if element1 in list2:\n            # If it does, add it to the common set\n            common.add(element1)\n\n    # Return true if there are any common elements, false otherwise\n    return len(common) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Find the intersection of the two lists\n    intersection = list(set(list1) & set(list2))\n    \n    # If the intersection is not empty, return True\n    if intersection:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates\n    list1 = set(list1)\n    list2 = set(list2)\n\n    # Find the intersection of the sets\n    intersection = list1.intersection(list2)\n\n    # If the intersection is not empty, return True\n    if len(intersection) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Convert the lists to sets to remove duplicates\n    list1 = set(list1)\n    list2 = set(list2)\n\n    # Find the intersection of the two sets\n    common = list1.intersection(list2)\n\n    # Return True if the intersection is not empty, otherwise return False\n    if common:\n        return True\n    else:\n        return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n\n    # Calculate the sum of the sides\n    sides_sum = base1 + base2 + height\n\n    # Calculate the sum of the squares of the sides\n    sides_sum_squared = (base1 ** 2 + base2 ** 2 + height ** 2) / 2\n\n    # Calculate the area of the trapezium\n    area = 0.5 * sides_sum * height\n\n    # Calculate the midpoint of the trapezium\n    midpoint = 0.5 * sides_sum_squared\n\n    # Calculate the difference between the area and the midpoint\n    difference = area - midpoint\n\n    # Calculate the median length of the trapezium\n    median_length = abs(difference)\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium given its base and height.\n    '''\n    # Calculate the areas of the trapezium\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    \n    # Calculate the lengths of the sides of the trapezium\n    s1 = base1 / 2\n    s2 = base2 / 2\n    \n    # Calculate the median length of the trapezium\n    median = (area1 + area2 + abs(area1 - area2)) / 2\n    \n    # Return the median length of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculates the median length of a trapezium using the given parameters.\n\n    Parameters:\n    base1 (float): The length of the first base.\n    base2 (float): The length of the second base.\n    height (float): The height of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n    \"\"\"\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the length of the smaller base\n    if base1 < base2:\n        smaller_base = base1\n    else:\n        smaller_base = base2\n\n    # Calculate the area of the smaller base\n    area_smaller_base = 0.5 * smaller_base * height\n\n    # Calculate the area of the trapezium with the smaller base removed\n    area_trapezium = 0.5 * base2 * height + 0.5 * base1 * height\n\n    # Calculate the difference between the two areas\n    area_difference = area_trapezium - area_smaller_base\n\n    # Calculate the median length of the trapezium\n    median_length = area_difference / 2\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    trapezium = base1 + base2 + height\n    midpoint = 0.5 * (base1 + base2)\n\n    if trapezium < midpoint:\n        return trapezium\n    elif trapezium > midpoint:\n        return height\n    else:\n        return 0"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # calculate the length of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # calculate the length of the shorter base\n    shorter_base = min(base1, base2)\n\n    # calculate the length of the longer base\n    longer_base = max(base1, base2)\n\n    # calculate the length of the trapezium with longer base\n    longer_trapezium = 0.5 * longer_base * height\n\n    # calculate the length of the trapezium with shorter base\n    shorter_trapezium = 0.5 * shorter_base * height\n\n    # find the distance between the two trapeziums\n    distance = shorter_trapezium - longer_trapezium\n\n    # divide the distance by 2 to find the distance between the midpoints of the trapeziums\n    midpoint_distance = distance / 2\n\n    # calculate the midpoints of the trapeziums\n    midpoint1 = longer_trapezium - midpoint_distance\n    midpoint2 = shorter_trapezium + midpoint_distance\n\n    # find the median of the two midpoints\n    median = (midpoint1 + midpoint2) / 2\n\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n\n    # Calculate the lengths of the parallelograms\n    l1 = base1 / 2\n    l2 = base2 / 2\n\n    # Calculate the lengths of the other side of the trapezium\n    l3 = (base1 + base2 + height) / 2\n\n    # Calculate the median of the three lengths\n    median = (l1 + l2 + l3) / 3\n\n    # Return the median length\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium given the base lengths and height of the trapezium.\n    '''\n    # Calculate the length of the first half of the trapezium\n    half_base1 = base1 / 2\n    \n    # Calculate the length of the second half of the trapezium\n    half_base2 = base2 / 2\n    \n    # Calculate the length of the third side of the trapezium\n    third_side = height / 2\n    \n    # Calculate the length of the fourth side of the trapezium\n    fourth_side = height / 2\n    \n    # Calculate the sum of the first half, second half, third side, and fourth side of the trapezium\n    total = half_base1 + half_base2 + third_side + fourth_side\n    \n    # Find the median of the sum of the four sides\n    median = total / 4\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the areas of the trapezium\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    \n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2\n    \n    # Calculate the area of the semi-perimeter\n    semi_perimeter = 2 * perimeter\n    \n    # Calculate the area of the base of the trapezium\n    base_area = 0.5 * base1 * 0.5 * height\n    \n    # Calculate the area of the higher base of the trapezium\n    higher_base_area = 0.5 * base2 * 0.5 * height\n    \n    # Calculate the area of the trapezium\n    trapezium_area = area1 + area2 + base_area + higher_base_area\n    \n    # Calculate the areas of the midpoints of the trapezium\n    midpoint1_area = 0.5 * base1 * 0.5 * height\n    midpoint2_area = 0.5 * base2 * 0.5 * height\n    \n    # Calculate the midpoints of the trapezium\n    midpoint1 = base1 + base2\n    midpoint2 = 0.5 * (base1 + base2)\n    \n    # Calculate the areas of the lower and upper halves of the trapezium\n    lower_half_area = area1 + midpoint1_area\n    upper_half_area = area2 + midpoint2_area\n    \n    # Calculate the areas of the trapezium in each half\n    half1_area = lower_half_area + area2\n    half2_area = area1 + upper_half_area\n    \n    # Calculate the areas of the trapezium in both halves\n    trapezium_areas = [half1_area, half2_area]\n    \n    # Calculate the length of the trapezium in each half\n    half1_length = perimeter - base1 - base2\n    half2_length = perimeter - 0.5 * (base1 + base2)\n    \n    # Calculate the length of the trapezium\n    trapezium_length = 0.5 * (half1_length + half2_length)\n    \n    # Calculate the areas of the trapezium on the outside of the midpoints\n    outside1_area = 0.5 * midpoint1_area\n    outside2_area = 0.5 * midpoint2_area\n    \n    # Calculate the area of the outside of the trapezium\n    outside_area = outside1_area + outside2_area\n    \n    # Calculate the median length of the trapezium\n    median_length = 0.5 * (trapezium_length + (2 * trapezium_length - trapezium_areas[0] - trapezium_areas[1]) / 3)\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    a = base1 + base2\n    b = height\n    c = (a + b) / 2\n    d = (a - b) / 2\n    if (a >= b and a >= c) or (b >= a and b >= c):\n        median = a\n    elif (b >= a and b >= d) or (c >= a and c >= d):\n        median = b\n    else:\n        median = c\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    s1 = (base1 + base2) / 2\n    s2 = height / 2\n    return (s1 + s2) / 2"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    for num in arr:\n        if num > number:\n            print(True)\n            return\n    print(False)\n    return"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if number > i:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # initialize a list to store the greater elements\n    greater = []\n    \n    # iterate over the array and check whether each element is greater than the entered number\n    for i in arr:\n        if i > number:\n            # if an element is greater than the entered number, append it to the list\n            greater.append(i)\n    \n    # return the list of greater elements\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(f\"{arr[i]} is greater than {number}\")\n            break\n    else:\n        print(f\"{number} is not greater than any element in the array\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    # check if the number is greater than the first element of the array\n    if number > arr[0]:\n        # loop through the rest of the array\n        for i in range(1, len(arr)):\n            # if the number is greater than the current element, return True\n            if number > arr[i]:\n                return True\n        # if the number is not greater than any element, return False\n        return False\n    # if the number is not greater than the first element, return False\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n\n    pattern = r'a(?=\\w*b)'\n\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a(?!$)[b]*')\n    match = pattern.search(text)\n\n    if match:\n        print('Match found at index {}: \"{}\"'.format(match.start(), text[match.start():match.end()]))\n    else:\n        print('No match found in the text.')"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def text_match_one(text):\n    pattern = r'a\\w*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*?b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[bB]*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return False\n    else:\n        return matches[0]"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns its last digit.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    num = str(n)\n    # Return the last digit of the string\n    return num[-1]"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as an input and returns the last digit of that number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list of integers as input and returns a new list of negative integers.\n    \"\"\"\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a list containing only the negative numbers.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns the negative numbers in the list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_list = []\n    for char in str1:\n        if ord(char) % 2 == 1:\n            odd_list.append(char)\n    return ''.join(odd_list)\n"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isalpha():\n            if char.islower():\n                if int(char) % 2!= 0:\n                    result += char\n            else:\n                if int(char) % 2!= 1:\n                    result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = []\n    for char in str1:\n        if char % 2 == 0:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            if int(char) % 2 == 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Convert string to list\n    lst1 = list(str1)\n    # Create an empty list to store the even characters\n    lst2 = []\n    # Loop through the list and add even characters to the new list\n    for i in lst1:\n        if i.isalpha():\n            lst2.append(i)\n    # Convert the new list to a string and return it\n    return ''.join(lst2)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters from a string.\n    \"\"\"\n    # initialize an empty string to store the even characters\n    even_string = \"\"\n    \n    # iterate through each character in the string\n    for char in string:\n        # if the character is odd, add it to the even_string\n        if char % 2!= 0:\n            even_string += char\n            \n    # return the even_string\n    return even_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Convert the string to a list of characters\n    str_list = list(str1)\n\n    # Use list comprehension to remove odd characters\n    new_str_list = [char for char in str_list if int(char) % 2 == 0]\n\n    # Convert the new list of characters back to a string and return it\n    return ''.join(new_str_list)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(string):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in string:\n        if char.isdigit() or (char.isalpha() and char.lower() in ['a', 'e', 'i', 'o', 'u']):\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(char for char in str1 if ord(char) % 2 == 0)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Count bidirectional tuple pairs.\n\n    Parameters:\n    test_list (list): A list of tuples.\n\n    Returns:\n    int: The number of bidirectional tuple pairs in the list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] in test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list or (test_list[j], test_list[i]) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list[j] or (test_list[j][0], test_list[i][1]) in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[i] and (test_list[j][0], test_list[i][0]) in test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list[j][0] and (test_list[j][0], test_list[i][1]) in test_list[i][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] in test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through each element in the list\n    for num in L:\n        # Check if the number is a multiple of 10\n        if num % 10 == 0:\n            # If it is, add it to the sum variable\n            sum += num\n            \n    # Return the sum\n    return sum"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    multiple = 1\n    result = 0\n    for num in L:\n        result += num * multiple\n        multiple *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize the single integer variable\n    result = 0\n    \n    # loop through the list of integers and add each integer to the result\n    for num in L:\n        result += num\n    \n    # return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total = total * num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    # Loop through each element in the list\n    for i in L:\n        # Append the first digit of the integer to the result\n        result += str(i)[0]\n    # Convert the result string to an integer and return it\n    return int(result)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Convert the list of integers to a string and join them with '+'\n    joined_numbers = ''.join(map(str, L))\n    # Convert the string to integer and return it\n    return int(joined_numbers)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b\\w+ly\\b'\n    # Use the `re.findall()` function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Loop through the matches and print the adverb and its position in the sentence\n    for i, match in enumerate(matches):\n        print(f\"{i+1}. {match}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*[A-Za-z]+\\b', text)\n    \n    # Check if there is at least one adverb in the sentence\n    if not adverbs:\n        return 'No adverbs found in the sentence.'\n    \n    # Find the first adverb and its position\n    first_adverb = adverbs[0]\n    first_adverb_position = text.index(first_adverb)\n    \n    # Return the adverb and its position\n    return f'The first adverb is \"{first_adverb}\" and it occurs at position {first_adverb_position}.'"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all instances of adverbs\n    matches = re.findall(r'\\b\\w+\\b', text)\n\n    # Sort the matches in descending order of their position in the text\n    matches.sort(key=lambda x: text.index(x), reverse=True)\n\n    # Iterate over the sorted matches and find their positions in the text\n    adverbs = []\n    for i, match in enumerate(matches):\n        adverbs.append((match, text.index(match)))\n\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Split the sentence into individual words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Initialize variables to store the adverb and its position\n    adverb = None\n    adverb_position = None\n    \n    # Loop through each word in the sentence\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if re.match(r'\\b(?:quickly|slowly|quick|slow|hardly|hard|slightly|slight|rather|mostly|most|well|fairly|fair|nearly|near|very|seldom|rarely|rare|frequently|frequent|somewhat|sometimes|mostly|often|oft|less|occasionally|occasionally|rarely|rarely|frequently|frequently|sometimes|sometimes|very|very|extremely|extremely|considerably|considerably|extremely|extremely)\\b', word, re.IGNORECASE):\n            # If it's an adverb, update the adverb and position variables\n            adverb = word\n            adverb_position = i\n    \n    # Return the adverb and its position in the sentence\n    return adverb, adverb_position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the text\n    matches = re.findall(r'\\b\\w*[A-Za-z]+\\w*[-']?\\b', text)\n\n    # Sort the adverbs by their position in the text\n    sorted_matches = sorted(matches, key=lambda x: len(x), reverse=True)\n\n    # Return the first adverb and its position\n    if sorted_matches:\n        return sorted_matches[0], text.index(sorted_matches[0])\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regex pattern to match adverbs and their positions in a sentence\n    pattern = r'\\b(?:[A-Z][a-z]|(?:[A-Z]+\\b))\\b(?:(?:[.,;?!]|$)\\s*)*(?:[a-z]|d|n|r|s|t|v)(?:\\b[A-Z][a-z]|(?:[A-Z]+\\b))\\b(?:[.,;?!]|$)'\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n\n    # Iterate over matches and extract the first adverb and its position\n    for match in matches:\n        # Get the text between the adverbs and the first punctuation mark\n        adverb_text = match.group(0).strip('.,;?! ')\n        # Get the index of the first character of the adverb text\n        adverb_start = match.start()\n        # Get the index of the last character of the adverb text\n        adverb_end = match.end()\n\n        # Print the adverb and its position\n        print(f'Adverb: {adverb_text}\\nPosition: {adverb_start}-{adverb_end}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a list of adverbs and their positions\n    adverbs = ['very','so', 'well', 'well-known', 'well-knownly','very-well','very-well-known','so-well','so-well-known', 'well-so', 'well-so-known', 'well-known-so', 'well-known-so-known','very-well-so','very-well-so-known','so-well-so','so-well-so-known', 'well-so-so', 'well-so-so-known', 'well-known-so-so', 'well-known-so-so-known','very-well-so-so','very-well-so-so-known','so-well-so-so','so-well-so-so-known', 'well-so-so-so', 'well-so-so-so-known', 'well-known-so-so-so', 'well-known-so-so-so-known']\n\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(' + '|'.join(adverbs) + r')\\b'\n\n    # Use the re.findall() method to find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # Check if there are any matches and return a tuple of adverb and its positions\n    if matches:\n        return matches[0], text.find(matches[0])\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern for adverbs\n    pattern = r'\\b(really|really?)\\b'\n    \n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Check if any matches were found\n    if len(matches) > 0:\n        # Return the first match and its position in the text\n        return matches[0], text.find(matches[0])\n    else:\n        # If no matches were found, return None and 0 as default values\n        return None, 0"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Split the text into individual words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n    # Loop over the words\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if re.match(r'\\b(really|really?)\\b', word, re.IGNORECASE):\n            # If it is, add its position to the list of adverbs\n            adverbs.append(i)\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Use regex to find all adverbs in the sentence\n    pattern = r'\\b(?:the|a|an|an?)\\s*(?:and|or)\\s*(?:the|a|an|an?)\\s*'\n    matches = re.findall(pattern, text)\n\n    # Loop through all matches and find their positions in the sentence\n    position = 0\n    adverbs = []\n    for match in matches:\n        if match[0] == 'the' and match[1] == 'a':\n            adverb_position = position\n            adverbs.append((match, adverb_position))\n        elif match[0] == 'an':\n            adverb_position = position\n            adverbs.append((match, adverb_position))\n        elif match[0] == 'a' and match[1] == 'an':\n            adverb_position = position\n            adverbs.append((match, adverb_position))\n        position += len(match) + 1\n\n    return adverbs"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    # Calculate surface area of a cube\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of a cube using the formula:\n    # surface area = 6 * l^2\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l\n    surface_area = 2 * area\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Define the base of the cube\n    base = l\n    \n    # Calculate the surface area of the cube\n    surface_area = 6 * l**2\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    s = 6 * (l ** 2)\n    return s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l ** 2\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0] * len(nums))\n    for num in nums:\n        if num > 0:\n            count[num - 1] += 1\n    return sum(count) / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n    \n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        else:\n            negative_count += 1\n    \n    positive_ratio = positive_count / (positive_count + negative_count)\n    \n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = array('i', [0])\n    neg_count = array('i', [0])\n    \n    for num in nums:\n        if num > 0:\n            pos_count.append(1)\n        elif num < 0:\n            neg_count.append(1)\n            \n    if pos_count[0] > 0 and neg_count[0] > 0:\n        pos_ratio = pos_count[0] / (pos_count[0] + neg_count[0])\n    elif pos_count[0] > 0:\n        pos_ratio = pos_count[0] / pos_count[0]\n    elif neg_count[0] > 0:\n        pos_ratio = neg_count[0] / neg_count[0]\n    else:\n        pos_ratio = 0\n    \n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n    zero_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n        else:\n            zero_count += 1\n    print(f\"Positive count: {positive_count}\")\n    print(f\"Negative count: {negative_count}\")\n    print(f\"Zero count: {zero_count}\")\n    print(f\"Ratio of positive numbers: {positive_count/len(nums)}\")"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = array('i')\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n    total_nums = len(nums)\n    positive_ratio = positive_nums.count(0) / total_nums\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = array('i')\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n    \n    if len(positive_nums) > 0:\n        ratio = len(positive_nums) / len(nums)\n        return ratio\n    else:\n        return 0"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0])\n    for num in nums:\n        if num > 0:\n            count[0] += 1\n    return count[0] / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Initialize variables to count positive and negative numbers\n    positive = 0\n    negative = 0\n\n    # Convert the array to a list of integers to avoid modifying the original array\n    nums_list = list(nums)\n\n    # Iterate over each element of the list\n    for num in nums_list:\n        # Check if the element is positive or negative\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n\n    # Calculate the ration of positive numbers and return it as a float\n    return float(positive) / (positive + negative)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_numbers = array('i', [1 if num > 0 else 0 for num in nums])\n    positive_count = sum(positive_numbers)\n    total_count = len(nums)\n    ratio = positive_count / total_count\n\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    This function finds the largest negative number from the given list.\n    \"\"\"\n    # Initializing max_num variable with the first element of the list.\n    max_num = list1[0]\n\n    # Iterating over the list from the second element to the last.\n    for num in list1[1:]:\n        # If the current number is negative, then updating max_num variable.\n        if num < 0:\n            max_num = num\n\n    # Returning the max_num.\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0] \n    for num in list1: \n        if num < 0 and num > largest: \n            largest = num \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -10**10 # initialize largest to negative infinity\n    \n    for num in list1:\n        if num < 0: # check if number is negative\n            if num > largest: # if number is larger than largest, update largest\n                largest = num\n                \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Find the largest negative number in a list of numbers.\n    \"\"\"\n    largest = -float('inf')  # initialize largest variable to negative infinity\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num  # update largest if a new positive number is found\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_num = 0\n    for num in list1:\n        if num < 0 and num > neg_num:\n            neg_num = num\n    return neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for num in list1: \n        if num < 0 and num > max_neg: \n            max_neg = num \n    return max_neg "
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    '''\n    largest = lst[0]\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[:K])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    # initialize the result list\n    result = []\n    # loop through each tuple in the test list\n    for i in range(len(test_list)):\n        # initialize a variable to store the count of occurrences of k in the tuple\n        count = 0\n        # loop through each element in the tuple\n        for j in range(len(test_list[i])):\n            # check if the element is equal to k\n            if test_list[i][j] == K:\n                # increment the count of occurrences of k\n                count += 1\n        # if the count of occurrences of k is greater than or equal to K, add the trimmed tuple to the result list\n        if count >= K:\n            result.append(test_list[i])\n    # return the result list\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    # Iterate through the list of tuples and trim each tuple by K\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_list.append(tup[:K])\n    \n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + test_list[i][-K:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        new_tuple = tuple(test_list[i])\n        new_tuple = new_tuple[K:]\n        trimmed_list.append(new_tuple)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tuple = (tup[0], tup[1][K:])\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    \n    for tup in test_list:\n        trimmed_tup = (tup[0], tup[1][:K])\n        trimmed_list.append(trimmed_tup)\n    \n    return trimmed_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Initialize the result tuple with the same length as the second tuple\n    result = tuple([0] * len(test_tup2))\n    # Iterate over the indices of the first tuple\n    for i in range(len(test_tup1)):\n        # Iterate over the indices of the second tuple\n        for j in range(len(test_tup2)):\n            # Multiply the i-th element of the first tuple with the j-th element of the second tuple\n            result[j] += test_tup1[i] * test_tup2[j]\n    # Return the result tuple\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have same length.\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements.\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have same length\")\n    result_tup = tuple(i*j for i,j in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]*test_tup2[i])\n    return result\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes in a tuple and a list and returns a dictionary where the keys are the elements of the list and the values are the number of times the element appears in the tuple.\n    '''\n    count_dict = {}\n    for elem in lst:\n        count = tup.count(elem)\n        count_dict[elem] = count\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert the tuple into a dictionary\n    tup_dict = Counter(tup)\n    # Initialize an empty dictionary\n    count_dict = {}\n    # Iterate over each element in the list and increment the count in the dictionary\n    for elem in lst:\n        count_dict[elem] = tup_dict[elem]\n    # Return the dictionary with the counts of each element in the list\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(tup)\n    for i in lst:\n        if i in cnt:\n            cnt[i] += 1\n        else:\n            cnt[i] = 1\n    return cnt"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_dict = Counter(lst)\n    count_dict = dict(count_dict)\n\n    for key, value in count_dict.items():\n        if key in lst:\n            count_dict[key] += 1\n\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # create a dictionary to store the count of each element in the tuple\n    count_dict = Counter(tup) \n\n    # initialize an empty list to store the count of each element in the list\n    lst_count = [] \n\n    # loop through the tuple and list and update the count of each element in the list\n    for i in range(len(lst)):\n        if lst[i] in count_dict:\n            lst_count.append(count_dict[lst[i]])\n        else:\n            lst_count.append(0)\n\n    return lst_count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Create a Counter object to store the count of each element in the list\n    count = Counter(lst)\n\n    # Use the Counter object to count the occurrences of each element in the tuple\n    result = tuple(count[i] for i in tup)\n\n    # Return the result\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes in a tuple and a list as arguments. \n    The function counts the number of times each element of the list appears in the tuple.\n    The function returns a dictionary with the count of each element in the list.\n    '''\n    # Create a Counter object to count the occurrences of each element of the list in the tuple.\n    count_dict = Counter(tup)\n    \n    # Create a dictionary to store the count of each element in the list in the tuple.\n    result_dict = {}\n    \n    # Loop through the Counter object and add the count of each element in the list to the dictionary.\n    for elem in lst:\n        result_dict[elem] = count_dict[elem]\n    \n    # Return the dictionary with the count of each element in the list in the tuple.\n    return result_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    count = Counter(tup)\n\n    return count.most_common(len(lst))"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    # Create a dictionary to store the counts of each element in the tuple\n    counts = {}\n    \n    # Iterate over each element in the list\n    for element in lst:\n        # If the element is already in the dictionary, increment its count\n        if element in counts:\n            counts[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            counts[element] = 1\n    \n    # Iterate over each element in the tuple and subtract the count from the dictionary value\n    for element in tup:\n        if element in counts:\n            counts[element] -= 1\n    \n    # Return the dictionary containing the counts of each element in the tuple\n    return counts"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = {}\n    for i in tup:\n        if i in count:\n            result[i] = count[i]\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i * i) - (i - 1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * i * i * i * i * i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return sum(perrin[0:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    perrin_sum = 0\n    for i in range(1, n+1):\n        perrin_sum += i**2\n    return perrin_sum\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255]\n    sum = 0\n    for num in perrin_numbers:\n        sum += num\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * (i + 1) // 2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize the sum variable to 0\n    total = 0\n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # Calculate the perrin number and add it to the total\n        total += i**3\n    # Return the total sum\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Loop through the numbers 1 to n\n    for i in range(1, n+1):\n        # If the number is a perrin number, add it to the sum\n        if perrin_check(i):\n            sum += i\n    \n    # Return the sum of the perrin numbers\n    return sum\n\ndef perrin_check(num):\n    '''\n    Check if a number is a perrin number.\n    '''\n    # Check if the number is divisible by 13 or 7\n    if num % 13 == 0 or num % 7 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize the sum to 0\n    total = 0\n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate the perrin number for this number\n        p = 1\n        for j in range(1, i+1):\n            p = p * (i - j + 1) // j\n        # add the perrin number to the total\n        total += p\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += perrin(i)\n    return sum\n\ndef perrin(n): \n    '''\n    Write a function to calculate the nth perrin number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return n + perrin(n-1)"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size and returns a new list containing\n    the specified size strings from the original list.\n    '''\n    return str_list[:size]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, l):\n    '''\n    Extracts a specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in l:\n        if len(s) <= l:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a size of string to extract as arguments. \n    It returns a list of extracted strings.\n    '''\n    # Create an empty list to store extracted strings\n    extracted_str = []\n    # Loop through the list of string values\n    for i in range(len(str_list)):\n        # If the length of the current string value is equal to the size, extract it\n        if len(str_list[i]) == size:\n            extracted_str.append(str_list[i])\n    # Return the list of extracted strings\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str_list[i:i+size] for i in range(0, len(str_list), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        extracted_strings.append(str_list[i][:l])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a size as input and returns a new list containing\n    the specified number of strings from the original list.\n    \"\"\"\n    # Initialize an empty list to store the extracted strings\n    extracted_list = []\n    \n    # Iterate over each string in the input list\n    for string in str_list:\n        # Check if the length of the current string is greater than or equal to the specified size\n        if len(string) >= size:\n            # Extract the required number of characters from the string and append it to the extracted list\n            extracted_list.append(string[:size])\n    \n    # Return the extracted list\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    This function takes a list of string values and a specified size as input and returns a new list of the\n    extracted strings.\n    \"\"\"\n    extracted_strings = []\n    for i in range(len(str_list)):\n        extracted_strings.append(str_list[i][:l])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_list = []\n    for i in range(len(l)):\n        new_list.append(l[i][:l[i].index(str)])\n    return new_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Remove all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # Remove all whitespaces from the text using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    # Remove any remaining whitespace at the end of the string\n    text3 = text2.strip()\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expression to remove all whitespaces from the given string\n    text1 = re.sub('\\s+','', text1)\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = sale_amount / actual_cost\n    if loss_percentage > 0.05:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return sale_amount - actual_cost \n    else: \n        return 0 "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    \n    if loss >= 0:\n        return 0\n    else:\n        return loss"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount >= actual_cost:\n        loss_amount = sale_amount - actual_cost\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost >= sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = actual_cost / sale_amount\n    loss_amount = sale_amount - actual_cost\n    if loss_percentage > 0.05:\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize sum variable\n    sum = 0\n    # iterate through odd numbers between 3 and n-2 (inclusive)\n    for i in range(3, n-2, 2):\n        # check if i is even\n        if i % 2 == 0:\n            # if it is, add it to sum\n            sum += i\n    # return the sum\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # loop through numbers from 2 to n\n    for i in range(2, n+1):\n        # check if number is even\n        if i%2 == 0:\n            # if even, add to sum\n            sum += i\n    # return the sum\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    evenFactors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (i+2) == 0:\n            evenFactors += i+2\n    return evenFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    sum_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            count += 1\n            sum_even_factors += i\n    if count == 0:\n        return 0\n    else:\n        return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0 and i % 2 == 0: \n            sum += i \n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    even_factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors.append(i)\n    total_sum = 0\n    for factor in even_factors:\n        total_sum += factor\n    return total_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n % (2*i) == 0:\n                even_sum += n // (2*i)\n            else:\n                even_sum += n // i\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a positive integer `n` as input and returns the sum of its even factors.\n    \"\"\"\n    sum_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes an integer n as input and returns the sum of even factors of n.\n    '''\n    total = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and i % 2 == 0:\n            total += i\n            \n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i%2 == 0:\n                even_factors += i\n    return even_factors"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w+z\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r'\\b[a-zA-Z]+\\b'\n    word_pattern = re.compile(word_pattern)\n    words = word_pattern.findall(text)\n    for word in words:\n        if 'z' in word:\n            print(word)\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w+z\\b')\n    return pattern.search(text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b[a-zA-Z]*z[a-zA-Z]*\\b', text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        print(\"February has 28 or 29 days.\")\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(\"These months have 30 days.\")\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(\"All other months have 31 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 % 30 == 0:\n        return \"31\"\n    elif monthnum2 % 30 == 1:\n        return \"30\"\n    elif monthnum2 % 30 == 2:\n        return \"29\"\n    elif monthnum2 % 30 == 3:\n        return \"28\"\n    elif monthnum2 % 30 == 4:\n        return \"31\"\n    elif monthnum2 % 30 == 5:\n        return \"30\"\n    elif monthnum2 % 30 == 6:\n        return \"31\"\n    elif monthnum2 % 30 == 7:\n        return \"30\"\n    elif monthnum2 % 30 == 8:\n        return \"31\"\n    elif monthnum2 % 30 == 9:\n        return \"30\"\n    elif monthnum2 % 30 == 10:\n        return \"31\"\n    elif monthnum2 % 30 == 11:\n        return \"30\"\n    elif monthnum2 % 30 == 12:\n        return \"31\"\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 % 2 == 0:\n        if monthnum2 in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    else:\n        if monthnum2 % 100 == 0:\n            if monthnum2 % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in ['01', '03', '05', '07', '08', '10', '12']:\n        return True\n    elif monthnum2 in ['04', '06', '09', '11']:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    if monthnum2 in days_in_month:\n        if days_in_month[monthnum2] == 31:\n            print(\"The given month number contains 31 days.\")\n        else:\n            print(\"The given month number does not contain 31 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 0:\n        if monthnum2 in [4, 6, 9, 11]:\n            return True\n        elif monthnum2 == 2:\n            return False\n    elif monthnum2 % 2 == 1:\n        if monthnum2 in [3, 5, 7, 8, 10, 12]:\n            return True\n        elif monthnum2 == 2:\n            return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check if month number is between 1 and 12\n    if 1 <= monthnum2 <= 12:\n        # check if month number has 31 days or not\n        if monthnum2 == 2:\n            return True if (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)) else False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    This function takes a month number as input and returns True if the month contains 31 days, otherwise False.\n    '''\n    if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Create a new list to store the reversed strings\n    reversed_list = []\n    \n    # Loop through each string in the list\n    for string in stringlist:\n        # Reverse the string and add it to the new list\n        reversed_list.append(string[::-1])\n    \n    # Return the reversed list\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = None\n    min_sublist = None\n    for sublist in lst:\n        if min_length is None or len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with the smallest length.\n    '''\n    min_length = float('inf') # Initialize minimum length to positive infinity\n    min_sublist = [] # Initialize an empty list to store the sublist with minimum length\n    \n    for sublist in lst:\n        if len(sublist) < min_length: # If the current sublist is shorter than the minimum length so far\n            min_length = len(sublist) # Update the minimum length\n            min_sublist = sublist # Store the current sublist in the minimum sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as an input and returns the sublist with the minimum length.\n    '''\n    min_lst = []\n    min_len = len(lst[0])\n    \n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_lst = lst[i]\n            min_len = len(lst[i])\n    \n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublist_with_min_length = []\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            sublist_with_min_length = sublist\n            min_length = len(sublist)\n    return sublist_with_min_length"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as an input and returns the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function takes a list as input and returns the sublist having minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    \n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for uppercase substrings\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n    # Find all uppercase substrings in the given string\n    substrings = pattern.findall(str1)\n    # Remove the uppercase substrings from the string\n    str1 = re.sub(r'\\b[A-Z]+\\b', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub(r'[A-Z]', '', str1)\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    str1 = re.sub('[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'(?i)[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a pattern to match uppercase letters\n    pattern = re.compile(r'[A-Z]+')\n    # Find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n    # Remove all uppercase substrings from the string\n    result = pattern.sub('', str1)\n    # Return the modified string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Remove all uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings in the string\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    \n    # Iterate through the list of uppercase substrings and remove them from the string\n    for substring in uppercase_substrings:\n        str1 = re.sub(substring, '', str1)\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase characters\n    pattern = re.compile(r'[A-Z]+')\n    # use the re.sub() method to replace all uppercase substrings in str1 with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'[A-Z]+'\n\n    # Use the re.sub() method to remove uppercase substrings from the string\n    result = re.sub(pattern, '', str1)\n\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a new list with the first element of each sublist.\n    '''\n    # Initialize an empty list to store the first elements of the sublists\n    first_elements = []\n\n    # Loop through each sublist in the input list\n    for sublist in lst:\n        # Append the first element of the current sublist to the first_elements list\n        first_elements.append(sublist[0])\n\n    # Return the first_elements list as the output\n    return first_elements"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst: \n        result.append(sublist[0]) \n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in lst:\n        if isinstance(i, list):\n            res.append(Extract(i)[0])\n        else:\n            res.append(i)\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    extracted_lst = []\n    for sublist in lst:\n        extracted_lst.append(sublist[0])\n    return extracted_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist: # check if the sublist is not empty\n            result.append(sublist[0])\n        else: # if the sublist is empty, append None instead\n            result.append(None)\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(tuple(list1[i:j]))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()  # Sort the list in ascending order\n    n = len(list1)  # Get the length of the list\n    for i in range(n):\n        for j in range(i+1, n+1):\n            print(tuple(list1[i:j]))  # Print each combination as a tuple"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initialize an empty list to store the combinations\n    combinations = []\n\n    # loop through the list and find all possible combinations\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            # append the combination to the list of combinations\n            combinations.append(list1[i:j])\n\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(lst):\n    '''\n    Given a list, returns a list of all possible combinations of its elements.\n    '''\n    if len(lst) == 1:\n        return lst\n    else:\n        return [lst[0]] + combinations_list(lst[1:])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(lst):\n    n = len(lst)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    def backtrack(start, curr_comb, result):\n        if start == len(list1):\n            result.append(curr_comb)\n            return\n\n        for i in range(start, len(list1)):\n            backtrack(i + 1, curr_comb + [list1[i]], result)\n            backtrack(i + 1, curr_comb, result)\n\n    result = []\n    backtrack(0, [], result)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            print(list1[j-1], end=' ')"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                result.append([list1[i], list1[j]])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    This function takes a list as input and returns all possible combinations of the elements of the list.\n    \n    Example:\n    >>> list1 = [1, 2, 3]\n    >>> combinations_list(list1)\n    [[1, 2, 3], [1, 2], [1, 3], [2, 3], [1], [2], [3]]\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            rest = list1[:i] + list1[i+1:]\n            for combo in combinations_list(rest):\n                result.append([list1[i]] + combo)\n        return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product *= num\n        if current_product > max_product:\n            max_product = current_product\n        if current_product < 0:\n            current_product = 1\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function finds the maximum product subarray of the given array.\n    \"\"\"\n    # Initialize variables for maximum subarray and its ending index\n    max_product = arr[0]\n    max_ending_index = 0\n    \n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Calculate the product of the current element and the previous maximum product\n        current_product = arr[i] * max_product\n        \n        # If the current product is greater than the maximum product so far, update the maximum product and its ending index\n        if current_product > max_product:\n            max_product = current_product\n            max_ending_index = i\n    \n    # Return the maximum subarray\n    return arr[max_ending_index:]"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0], arr[1])\n    else:\n        max_so_far = max_ending_here = arr[0]\n        min_ending_here = arr[0]\n        for i in range(1, len(arr)):\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            min_ending_here = min(arr[i], min_ending_here * arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_product = arr[0]\n    current_product = 1\n    negative_product = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            current_product = negative_product\n            negative_product = 1\n        else:\n            current_product *= arr[i]\n            negative_product *= arr[i]\n\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray.\n\n    Example:\n    >>> max_subarray_product([2, 3, -2, 4])\n    6\n\n    >>> max_subarray_product([-2, 0, -1])\n    0\n\n    >>> max_subarray_product([1, 2, 3])\n    6\n\n    \"\"\"\n    max_product = 1\n    current_product = 1\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Returns the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for num in arr:\n        max_ending_here = max(num, max_ending_here * num)\n        min_ending_here = min(num, min_ending_here * num)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables\n    max_product = arr[0]\n    current_product = 1\n    start = 0\n\n    # Loop through the array\n    for i in range(1, len(arr)):\n        # If the current element is negative, reset the current product\n        if arr[i] < 0:\n            current_product = 1\n            start = i\n\n        # Update the current product\n        current_product *= arr[i]\n\n        # Update the maximum product\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if len(set(i))!= 1:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Iterate through the dictionary and compare the values\n    for i in range(len(dict)):\n        if dict[i]!= dict[0]:\n            return False\n    # If all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict[value]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        if dict[i]!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and an integer n as input and returns True if all values are same in the dictionary and False otherwise.\n    '''\n    if len(dict) < n:\n        return False\n    else:\n        for i in range(n):\n            if dict[i]!= dict[n]:\n                return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # initialize the variable to store the first value of the dictionary\n    first_value = next(iter(dict.values()))\n    # loop through the dictionary and compare each value to the first value\n    for value in dict.values():\n        if value!= first_value:\n            return False\n    # if all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for value in dict.values():\n        values.append(value)\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # initialize a variable to store the count of unique values in the dictionary\n    count = len(dict.values())\n    # loop through each key-value pair in the dictionary\n    for key, value in dict.items():\n        # if the count of unique values is greater than one, return False\n        if count > 1:\n            return False\n    # if no key-value pair has been found with a different value, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == n:\n        value = dict.values()\n        for i in range(len(value)):\n            if value[i]!= value[0]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    return {key: value for key, value in dict1.items() if value is not None and value!= '' and value!= []}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n\n    :param dict1: The dictionary to drop empty items from.\n    :type dict1: dict\n\n    :return: A new dictionary with empty items removed.\n    :rtype: dict\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    n = len(arr)\n    # Calculate the maximum subarray ending at index i\n    max_ending_at_i = [0] * n\n\n    # Initialize the maximum product as the first element of the array\n    max_product = arr[0]\n\n    # Calculate the maximum product formed by multiplying numbers of increasing subsequence ending at index i\n    for i in range(1, n):\n        max_ending_at_i[i] = max(arr[i], arr[i] * max_ending_at_i[i-1])\n        max_product = max(max_product, max_ending_at_i[i])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    previous_product = 1\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Update the current product and previous product\n        current_product *= arr[i]\n        previous_product = max(previous_product, current_product)\n\n        # Update the maximum product\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Create a 2D array to store the maximum product of all possible subsequences\n    max_product_matrix = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # Fill the first row and column of the matrix with 1\n    for i in range(1, n + 1):\n        max_product_matrix[i][0] = max_product_matrix[i - 1][0] = 1\n\n    # Fill the rest of the matrix\n    for j in range(1, n + 1):\n        for i in range(1, j + 1):\n            max_product_matrix[i][j] = max(max_product_matrix[i - 1][j] * arr[j - 1], max_product_matrix[i][j - 1] * arr[i - 1])\n\n    return max_product_matrix[1][n]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum product formed by multiplying numbers of the increasing subsequence.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Initialize variables\n    max_product = float('-inf')\n    curr_product = 1\n\n    # Find the maximum product of the first element of the increasing subsequence\n    for i in range(1, n):\n        curr_product *= arr[i]\n        if curr_product > max_product:\n            max_product = curr_product\n\n    # Calculate the maximum product of the increasing subsequence\n    for i in range(n):\n        for j in range(i+1, n+1):\n            subseq = arr[i:j]\n            prod = 1\n            for num in subseq:\n                prod *= num\n            curr_product = max(curr_product, prod)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) <= 1:\n        return 0\n    \n    max_product_so_far = float('-inf')\n    max_product_ending_here = 1\n    \n    for i in range(1, len(arr)):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n        \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    if not arr:\n        return 0\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    \n    max_product_ending_here = max(arr[0], arr[1])\n    max_product_so_far = max_product_ending_here\n    \n    for i in range(2, len(arr)):\n        max_product_ending_here = max(max_product_ending_here * arr[i], arr[i], max_product_so_far)\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n        \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    # Initialize variables\n    max_ending_here = max_so_far = arr[0]\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # Update max_ending_here and max_so_far\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    # Return max_so_far\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_ending_here = arr[i]\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n\n        max_so_far = max(max_so_far, max_ending_here * min_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Initialize variables\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    # Traverse the array and update the maximum and minimum ending here\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        # Update the maximum and minimum so far\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    n = len(arr)\n\n    # Initialize max product as first element of the array\n    max_product = arr[0]\n\n    # Initialize two pointers, left and right, to the first element\n    left = 0\n    right = 0\n\n    # Initialize a temporary variable to store the current subarray product\n    current_product = arr[0]\n\n    # Iterate through the array and update the max product and subarray product\n    # at each step\n    for i in range(1, n):\n        current_product *= arr[i]\n\n        # Update the max product if the current product is greater\n        if current_product > max_product:\n            max_product = current_product\n\n        # If the product is negative, reset the product and move the right pointer\n        if current_product < 0:\n            current_product = arr[right]\n            right += 1\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    for i in range(1, len(test_tup)-1):\n        total += test_tup[i]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) <= 1:\n        return test_tup\n    else:\n        return (test_tup[0] + test_tup[1]) + add_pairwise(test_tup[2:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    n = len(test_tup)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            pair_sum = test_tup[i] + test_tup[j]\n            yield pair_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize variables\n    sum_n = 0\n    n = len(test_tup)\n    # loop through the tuple and add each pair to the sum\n    for i in range(1, n-1):\n        sum_n += test_tup[i] + test_tup[i-1]\n    # return the sum of all pairwise additions\n    return sum_n"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Find the sum of the neighboring elements of the given tuple.\n\n    Args:\n    test_tup (tuple): tuple containing integers\n\n    Returns:\n    int: sum of the neighboring elements of the tuple\n    \"\"\"\n    return sum(test_tup) + test_tup[1] + test_tup[-2]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n < 2:\n        return 0\n    elif n == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        return add_pairwise(test_tup[1:]) + test_tup[0]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    size = len(test_tup)\n    if size % 2 == 1:\n        return None\n    else:\n        return sum(test_tup[i:i+2] for i in range(size-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize a variable to store the sum of the neighboring elements\n    pairwise_sum = 0\n    # Loop through the tuple using a for loop\n    for i in range(1, len(test_tup)):\n        # Calculate the sum of the current element and the neighboring element\n        pairwise_sum = test_tup[i] + test_tup[i-1]\n    # Return the pairwise sum\n    return pairwise_sum"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for num in arr:\n        prod = (prod * num) % n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    # Initialize the result variable with 1\n    result = 1\n    \n    # Iterate through each element in the array\n    for num in arr:\n        # Multiply the result by the number modulo n\n        result = (result * num) % n\n    \n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    product = 1\n\n    for i in range(len(arr)):\n        product *= arr[i]\n        product %= n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in two parameters:\n    arr: a list of integers\n    n: an integer representing the modulo value\n    \n    This function calculates the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the result variable\n    result = 1\n    \n    # Loop through each element of the array\n    for num in arr:\n        # Calculate the product of the current element and the result\n        result = (result * num) % n\n    \n    # Return the result modulo n\n    return result % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    # Initialize the variable to keep track of whether all the numbers in the list are consecutive or not\n    is_consecutive = True\n\n    # Loop through the list of numbers\n    for i in range(len(l) - 1): \n        # If the current number is not equal to the next number, then it's not consecutive\n        if l[i]!= l[i+1]: \n            is_consecutive = False\n            break\n\n    # Return the result of the function\n    return is_consecutive"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] == l[i+1]+1:\n            return True\n    \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are consecutive,\n    and False otherwise.\n    '''\n    i = 0\n    while i < len(l)-1:\n        if l[i] + 1 == l[i+1]:\n            i += 1\n        else:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 1\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            count += 1\n        else:\n            count = 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = []\n    # Create a dictionary to store the frequency of each element in the first list\n    freq_dict = {}\n    for element in test_list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    # Iterate over the second list and check if each element is present in the frequency dictionary\n    for element in test_list2:\n        if element in freq_dict and freq_dict[element] > 0:\n            intersection.append(element)\n            freq_dict[element] -= 1\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = set()\n    for item in test_list1:\n        if item in test_list2 and item not in intersection:\n            intersection.add(item)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    # Sort the tuples in list1\n    test_list1 = sorted(test_list1)\n    \n    # Initialize an empty set to store the common elements\n    common_elements = set()\n    \n    # Iterate over the tuples in list2\n    for tuple2 in test_list2:\n        # Check if tuple2 is a subset of tuple1\n        if tuple2 in test_list1:\n            # If it is, add it to the common set\n            common_elements.add(tuple2)\n    \n    # Return the common elements as a tuple\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    common_set = set1.intersection(set2)\n    return list(common_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Use set operations to find the common elements between the two lists\n    common_elements = set(test_list1) & set(test_list2)\n    # Convert the set back to a list and sort it in ascending order\n    result = sorted(list(common_elements))\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Creating a set of elements from both lists to avoid duplicates\n    set_elements1 = set(test_list1)\n    set_elements2 = set(test_list2)\n\n    # Finding the intersection of elements in the set\n    intersection_set = set_elements1.intersection(set_elements2)\n\n    # Converting the set to a list and returning it\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set of the second list to remove duplicates\n    unique_set = set(test_list2)\n\n    # Initialize an empty set to store the intersection of elements\n    intersection = set()\n\n    # Iterate through the first list and add any elements that are present in the second list\n    for element in test_list1:\n        if element in unique_set:\n            intersection.add(element)\n\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert both lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # find the intersection of both sets\n    intersection = set1.intersection(set2)\n\n    # convert the intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert the lists to sets so that we can perform set intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Convert the sets back to tuples and return the intersection of tuples\n    return tuple(set1.intersection(set2))"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert test_list1 and test_list2 to sets for efficient membership testing\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the sets using the intersection_update() method of sets\n    set1.intersection_update(set2)\n    \n    # Convert the set back to a list and return it\n    return list(set1)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # initialize an empty string to hold the modified string\n    newstr = ''\n    \n    # iterate through each character in the input string\n    for char in str1:\n        # if the current character is equal to the target character, replace it with the new character\n        if char == ch:\n            newstr += newch\n        # otherwise, simply add the character to the new string\n        else:\n            newstr += char\n            \n    # return the new string\n    return newstr"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function takes in two arguments: the string and the character to be replaced and the character to replace it with.\n    It returns the modified string with the character replaced.\n    '''\n    return str1.replace(ch,newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # if the current character matches the character to be replaced, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    # return the modified string\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces the first occurrence of a given character with another character in a given string.\n    \n    :param str1: The input string.\n    :param ch: The character to be replaced.\n    :param newch: The character to replace the first occurrence of `ch`.\n    :return: The modified string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    This function takes a dictionary as input and returns a sorted dictionary in descending order based on its values.\n    \"\"\"\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n    # Sort the Counter object by values in descending order\n    sorted_counter = counter.most_common(len(dict1))\n    # Return the sorted Counter object\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n\n    # Create a Counter object to count the frequency of each element in the dictionary\n    count = Counter(dict1)\n\n    # Sort the dictionary based on the count in descending order\n    sorted_count = count.most_common()\n\n    # Create a new dictionary with the sorted keys and values\n    sorted_dict = {}\n    for key, value in sorted_count:\n        sorted_dict[key] = value\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function sorts a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as an input and returns a dictionary with the elements sorted by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict) # converting Counter to dictionary\n    sorted_dict = dict(sorted(sorted_dict.items(), key=lambda item: item[1], reverse=True)) # sorting by value\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    # create a counter object from the dictionary\n    c = Counter(dict1)\n    \n    # sort the counter object by values in descending order\n    sorted_c = sorted(c.items(), key=lambda x: x[1], reverse=True)\n    \n    # create a new dictionary with keys as tuples of sorted items\n    new_dict = {}\n    for item in sorted_c:\n        new_dict[item[0]] = item[1]\n    \n    return new_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as input and sorts the dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(counter):\n    sorted_counter = Counter(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_counter"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the largest and smallest values in the array\n    max_num = max(nums)\n    min_num = min(nums)\n    \n    # calculate the sum of the largest and smallest values\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    # Calculate the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = min(nums)\n    smallest = max(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize variables for smallest and largest values\n    smallest = float('inf')\n    largest = float('-inf')\n    # loop through the array to find the smallest and largest values\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    # return the sum of the smallest and largest values\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initializing variables\n    min_val = float('inf')\n    max_val = float('-inf')\n    total_sum = 0\n    \n    # iterating over the array\n    for num in nums:\n        # updating minimum and maximum values\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n        # adding the sum of the minimum and maximum values to the total sum\n        total_sum += (min_val + max_val)\n    \n    # returning the total sum\n    return total_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Check if the array is empty\n    if not nums:\n        return None\n    # Initialize the largest and smallest values to the first element of the array\n    largest = nums[0]\n    smallest = nums[0]\n    # Loop through the array and update the largest and smallest values\n    for num in nums[1:]:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    if len(nums) < 2:\n        return None\n\n    # Sort the array in ascending order\n    nums.sort()\n\n    # Find the largest and smallest values\n    largest = nums[-1]\n    smallest = nums[0]\n\n    # Find the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize variables\n    largest = nums[0]\n    smallest = nums[0]\n    total = 0\n    \n    # loop through the array and update largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    # calculate the total sum\n    total = largest + smallest\n    \n    return total"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and converts it to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define pattern for lowercase substrings\n    pattern = r'[a-z]+'\n    # find all lowercase substrings in the given string using re.findall() function\n    lower_substrings = re.findall(pattern, str1)\n    # loop through the list of lowercase substrings\n    for lower_substring in lower_substrings:\n        # remove the lowercase substring from the original string using replace() function\n        str1 = str1.replace(lower_substring, '')\n    # return the modified string\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # Define regex pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n\n    # Find all occurrences of lowercase substrings using regex pattern\n    matches = re.findall(pattern, str1)\n\n    # Remove all lowercase substrings from the original string\n    str1 = re.sub(pattern, '', str1)\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    # Use the re.findall() method to find all the lowercase substrings in the string\n    matches = re.findall(pattern, string)\n    # Remove the lowercase substrings from the string using the replace() method\n    result = string.replace(matches[0], '')\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Split the string into words\n    words = str1.split()\n    \n    # Initialize an empty list to store the cleaned words\n    cleaned_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        \n        # Check if the word contains only letters\n        if re.match(r'^[a-zA-Z]+$', word):\n            \n            # If the word contains only letters, append it to the cleaned words list\n            cleaned_words.append(word)\n    \n    # Join the cleaned words into a single string and return it\n    return''.join(cleaned_words)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expressions to find all lowercase substrings\n    substrings = re.findall(r'\\b[a-z]+\\b', str1)\n    # Remove lowercase substrings from the string\n    str2 = re.sub(r'\\b[a-z]+\\b', '', str1)\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    lowercase_substrings = re.findall(r'\\b\\w*[a-z]\\w*\\b', str1)\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'\\b\\w*[a-z]\\w*\\b', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # convert the string to lowercase\n    string = string.lower()\n    # create a regular expression to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    # find all lowercase substrings using the regular expression\n    matches = re.findall(pattern, string)\n    # remove the matches from the string\n    for match in matches:\n        string = string.replace(match, '')\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'(?<=\\w)([a-z])')\n    # Find all lowercase substrings in the given string using the pattern\n    matches = pattern.findall(str1)\n    # Remove all lowercase substrings from the original string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Define a regular expression pattern for lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    \n    # Use search() method to find all lowercase substrings in the string\n    matches = pattern.findall(string)\n    \n    # Loop through the matches and remove them from the string\n    for match in matches:\n        string = string.replace(match, '')\n    \n    # Return the modified string\n    return string"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = int(str(n)[0])\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Extracting the first digit from the number\n    first_digit = n % 10\n    # Returning the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer n as input and returns the first digit of n.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of that integer.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the first digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n // 10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10 ** len(str(n))"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # check if the input is a number\n    if not n.isdigit():\n        return \"Invalid input. Please enter a number.\"\n    \n    # convert the input number to an integer\n    num = int(n)\n    \n    # find the first digit of the number using the modulus operator\n    first_digit = num % 10\n    \n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers\n"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns only the odd ones.\n    \"\"\"\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n\n    # Creating an empty list to store odd integers\n    odd_list = []\n\n    # Looping through the list\n    for num in list: \n        # Checking if the number is odd\n        if num % 2 == 1: \n            # Appending odd integers to the odd_list\n            odd_list.append(num)\n\n    # Returning the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2 == 1:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2 == 1:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers as input and returns a new list containing only the odd integers from the input list.\n    '''\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_natural += i\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # defining the sum of cubes of the first n natural numbers\n    sum_cubes = 0\n    for i in range(n):\n        sum_cubes += i**3\n    \n    # defining the sum of the first n natural numbers\n    sum_natural = 0\n    for i in range(n):\n        sum_natural += i\n    \n    # finding the difference between the two sums\n    difference = sum_cubes - sum_natural\n    \n    # returning the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    # Calculate the sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    # Calculate the sum of first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    # Find the difference between the two sums\n    difference = abs(sum_cubes - sum_natural)\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([x**3 for x in range(1, n+1)])\n\n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # Return the difference between the two sums\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n        sum_natural += i\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    # initialize variables\n    cube_sum = 0\n    num_sum = 0\n    # loop through first n natural numbers\n    for i in range(1, n+1):\n        # add cube of number to cube_sum\n        cube_sum += i*i*i\n        # add number to num_sum\n        num_sum += i\n    # calculate difference\n    diff = cube_sum - num_sum\n    # return the difference\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # find the sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    # find the sum of first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    # calculate the difference between the two sums\n    diff = abs(sum_cubes - sum_natural)\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculating the sum of cubes of first n natural numbers\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    # Calculating the sum of first n natural numbers\n    sum_of_natural = 0\n    for i in range(1, n+1):\n        sum_of_natural += i\n\n    # Calculating the difference between the two sums\n    diff = abs(sum_of_cubes - sum_of_natural)\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    # sum of cubes of first n natural numbers\n    cubes = n * (n + 1) * (2 * n + 1) // 6\n    # sum of first n natural numbers\n    first_n = n * (n + 1) // 2\n    return cubes - first_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # sum of cubes of first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # sum of first n natural numbers\n    sum_of_natural_numbers = sum(range(1, n+1))\n\n    # difference between the two sums\n    difference = sum_of_cubes - sum_of_natural_numbers\n\n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        xor_sum = 0\n        for j in range(N):\n            if i!= j:\n                xor_sum ^= A[i] ^ A[j]\n        if xor_sum % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes in an array A and its length N and returns the count of odd pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes in two lists A and N, where A is the list of integers and N is the length of the list A.\n    It returns the count of odd xor values in the list A.\n    '''\n    count = 0\n    for i in range(len(A)):\n        xor_value = 0\n        for j in range(len(A)):\n            xor_value ^= A[j]\n        if xor_value % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes an array A and an integer N as input, and returns the number of pairs whose XOR value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # If the character is uppercase, convert to lowercase\n        if string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # If the character is lowercase, convert to uppercase\n        elif string[i].islower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n    \n    # Convert each character to its opposite case (upper or lower)\n    for i in range(len(string)):\n        if string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n        else:\n            string = string[:i] + string[i].upper() + string[i+1:]\n    \n    # Convert the string back to uppercase\n    string = string.upper()\n    \n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    while n1!= 0 or n2!= 0:\n        d1 = n1 % 10\n        d2 = n2 % 10\n        sum_diff += abs(d1 - d2)\n        n1 //= 10\n        n2 //= 10\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings to make it easier to work with them\n    str1 = str(n1)\n    str2 = str(n2)\n\n    # Initialize the sum of the per-digit differences to zero\n    total_diff = 0\n\n    # Loop through each character in the strings\n    for i in range(len(str1)):\n        # Subtract the corresponding characters in the strings\n        diff = int(str1[i]) - int(str2[i])\n\n        # Add the difference to the total sum of differences\n        total_diff += diff\n\n    # Return the total sum of differences\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function takes two integers as input, n1 and n2, and calculates the sum of the per-digit\n    difference between them. For example, if n1 is 1234 and n2 is 5678, the function will return 36.\n    \"\"\"\n    # Initialize an empty string to store the digits of each number\n    digits1 = str(n1)\n    digits2 = str(n2)\n\n    # Initialize a variable to store the sum of per-digit differences\n    sum_diff = 0\n\n    # Iterate through each digit of the first number\n    for i in range(len(digits1)):\n        # Convert the current digit to an integer and subtract it from the corresponding digit of the second number\n        diff = int(digits1[i]) - int(digits2[i])\n        # Add the per-digit difference to the sum\n        sum_diff += diff**2\n\n    # Return the sum of per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    # Initialize the sum of differences to zero\n    diff_sum = 0\n    # Loop over the digits of both numbers\n    for i in range(max(len(digits1), len(digits2))):\n        # If the digits are different, add the absolute difference to the sum\n        if digits1[i]!= digits2[i]:\n            diff_sum += abs(digits1[i] - digits2[i])\n    # Return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize the sum to zero\n    sum_of_digit_difference = 0\n    \n    # convert the two integers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n    \n    # loop through each digit in the strings\n    for i in range(max(len(str1), len(str2))):\n        # compare the digits at the current index of the strings\n        if str1[i]!= str2[i]:\n            # calculate the per-digit difference\n            digit_difference = abs(int(str1[i]) - int(str2[i]))\n            # add the per-digit difference to the sum\n            sum_of_digit_difference += digit_difference\n    \n    # return the sum of the per-digit difference\n    return sum_of_digit_difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Get the digits of the two numbers\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n    \n    # Calculate the per-digit difference between the two numbers\n    per_digit_diff = sum([abs(n1_digit - n2_digit) for n1_digit, n2_digit in zip(n1_digits, n2_digits)])\n    \n    # Return the sum of the per-digit difference\n    return per_digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 - n2\n    distance = 0\n    while diff!= 0:\n        distance += diff % 10\n        diff //= 10\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n\n    Args:\n        n1 (int): An integer.\n        n2 (int): Another integer.\n\n    Returns:\n        int: The sum of the per-digit difference between n1 and n2.\n    \"\"\"\n    # Convert the integers to lists of digits\n    digit_list1 = list(str(n1))\n    digit_list2 = list(str(n2))\n\n    # Calculate the per-digit difference\n    digit_diff_sum = 0\n    for i in range(len(digit_list1)):\n        digit_diff_sum += abs(int(digit_list1[i]) - int(digit_list2[i]))\n\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert integers to lists of digits\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n    # Calculate the sum of the absolute differences between the lists of digits\n    digit_distance = sum([abs(d1 - d2) for d1, d2 in zip(n1_digits, n2_digits)])\n    return digit_distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n\n    # Convert the integers to lists of digits\n    digit_list1 = [int(digit) for digit in str(n1)]\n    digit_list2 = [int(digit) for digit in str(n2)]\n\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Iterate over the digits of the two integers\n    for i in range(len(digit_list1)):\n        # Calculate the difference between the two digits\n        diff = abs(digit_list1[i] - digit_list2[i])\n\n        # Add the difference to the total sum\n        total_sum += diff\n\n    return total_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate over the list\n    for i in range(size):\n        # Add the element to the current sum\n        current_sum += a[i]\n\n        # Update the max sum if the current sum is greater than the max sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum becomes negative, start a new sum\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')  # Initialize max sum to negative infinity\n    current_sum = 0  # Initialize current sum to zero\n\n    # Iterate through the list and update the current sum\n    for i in range(size):\n        current_sum += a[i]\n\n        # If current sum is greater than max sum, update max sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If current sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    # Return the max sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    max_subarray = []\n\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        max_subarray.append(current_sum)\n\n    return max_sum, max_subarray"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        \n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf') # initialize max sum to negative infinity\n    current_sum = 0 # initialize current sum to 0\n\n    # loop through the list and update the current sum and max sum\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # return the max sum found\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Find the maximum sum of a contiguous sublist of size `size` in the given list `a`.\n    \"\"\"\n    if size > len(a):\n        raise ValueError(\"size must be less than or equal to the length of a\")\n\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n\n    for i in range(len(a) - size + 1):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n\n    return max_sum, start, start + size - 1"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples and convert it to a set\n    combined_set = set(test_tup1 + test_tup2)\n    # Convert the set back to a list and sort it\n    sorted_list = sorted(list(combined_set))\n    # Print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Get the union of the two input tuples using the set union method\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the set to a list and sort it in ascending order\n    sorted_union_list = sorted(list(union_set))\n\n    # Print the sorted union list\n    print(sorted_union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # concatenate the tuples and sort them\n    combined_tup = test_tup1 + test_tup2\n    sorted_tup = sorted(combined_tup)\n    # convert the sorted tuple to a list and return it\n    return list(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples to get a single list of all elements\n    all_elements = test_tup1 + test_tup2\n    \n    # Sort the list of all elements in ascending order\n    all_elements.sort()\n    \n    # Print the sorted list of all elements\n    print(all_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n\n    # Find the unique elements in the combined list\n    unique_elements = list(set(combined_list))\n\n    # Sort the unique elements in ascending order\n    unique_elements.sort()\n\n    # Output the unique elements\n    print(unique_elements)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n    # Convert the list into a set to remove duplicates\n    unique_elements = list(set(combined_list))\n    # Sort the list in ascending order\n    sorted_elements = sorted(unique_elements)\n    # Output the sorted list\n    print(sorted_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # create a set from the elements of both tuples\n    union_set = set(test_tup1 + test_tup2)\n\n    # convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n\n    # return the sorted list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # Concatenate the two tuples\n    combined_tup = test_tup1 + test_tup2\n    \n    # Use a set to remove duplicates, then sort the result\n    unique_elements = sorted(list(set(combined_tup)))\n    \n    # Print the result\n    print(unique_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Get the union of the two tuples\n    union = list(set(test_tup1 + test_tup2))\n    \n    # Sort the union in ascending order\n    union.sort()\n    \n    # Output the sorted union\n    print(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Initialize empty set to store union of tuples\n    union_set = set()\n    \n    # Add all elements of first tuple to the set\n    union_set.update(test_tup1)\n    \n    # Add all elements of second tuple to the set\n    union_set.update(test_tup2)\n    \n    # Convert the set to list and sort it\n    union_list = sorted(list(union_set))\n    \n    # Print the sorted list of union elements\n    print(union_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)+1):  \n            if lst[i:j] == sorted(lst[i:j]):  \n                max_len = max(max_len, j-i)  \n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j-i <= max_length:\n                break\n            max_length = max(max_length, len(lst[i:j]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list as input and finds the length of the longest sublist.\n    '''\n    max_length = 0\n    current_length = 0\n\n    for num in lst:  \n        current_length += 1  \n        if current_length > max_length:  \n            max_length = current_length  \n        elif current_length == max_length:  \n            max_length = current_length  \n            break  \n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n    sublist_start = 0\n    \n    # Loop over the list and update max_length and current_length accordingly\n    for i, item in enumerate(lst):\n        if i == 0 or lst[i-1]!= item:\n            current_length += 1\n            sublist_start = i\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            current_length -= 1\n    \n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):  \n        if i > max_len:  \n            max_len = 0  \n        for j in range(i+1,len(lst)):  \n            if j > max_len:  \n                max_len = j  \n                break  \n            max_len += 1  \n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)  \n    max_length = 1  \n    max_start = 0  \n    for i in range(1, n):  \n        if lst[i] >= lst[i-1]:  \n            max_length += 1  \n        else:  \n            max_length = 1  \n            max_start = i  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    curr_length = 0\n\n    for i in range(len(lst)):\n        if i == 0 or lst[i]!= lst[i-1]:\n            curr_length = 1\n        else:\n            curr_length += 1\n\n        if curr_length > max_length:\n            max_length = curr_length\n\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    currentLength = 0\n    start = 0\n    maxEnd = 0\n\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            currentLength += 1\n        else:\n            if currentLength > maxLength:\n                maxLength = currentLength\n            currentLength = 1\n            start = i - currentLength\n            maxEnd = i\n\n        if i == len(lst) - 1:\n            if currentLength > maxLength:\n                maxLength = currentLength\n            if maxLength > maxEnd - start + 1:\n                print(\"The length of the longest sublists is:\", maxLength)\n            else:\n                print(\"The length of the longest sublists is:\", maxEnd - start + 1)\n\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list as input and returns the length of the longest sublist.\n    '''\n    max_length = 0\n    current_length = 0\n    \n    for i in lst:\n        if i == lst[-1]: # for the last element in the list\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n            \n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n\n    pattern = r'\"(.+?)\"'\n    values = re.findall(pattern, text)\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\\\".*?\\\"')  # find values between double quotes\n    matches = pattern.findall(text)  # find all matches in text\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"((?:.(?!\\2))*?)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    # use a regular expression to match quotation marks with values inside\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # define the regular expression pattern to match values between quotation marks\n    pattern = r'\".*?\"'\n    # use the re.findall() function to find all the values between quotation marks in the string\n    values = re.findall(pattern, text)\n    # return the list of values\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Using a dictionary to store the frequency of elements in the list\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # Counting the number of pairs where both elements are unequal\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if freq[arr[i]] + freq[arr[j]] == 1:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    This function takes a string argument and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split('')"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Convert the input string to a list of characters\n    char_list = list(word)\n    # Return the list of characters\n    return char_list"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n = n // 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    \n    # Loop through each digit in the number\n    while n > 0:\n        # Get the rightmost digit\n        digit = n % 10\n        \n        # Add the digit to the sum of digits\n        sum_of_digits += digit\n        \n        # Remove the rightmost digit from the number\n        n //= 10\n        \n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Get the digits of n\n    digits = [int(digit) for digit in str(n)]\n    # Sum up the digits\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum to 0\n    total = 0\n    # Iterate over each digit of the number and add it to the sum\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the integer to a string\n    num_str = str(n)\n    # initialize the sum variable to zero\n    sum_value = 0\n    # iterate through each digit of the integer\n    for digit in num_str:\n        # convert the digit to an integer\n        digit_int = int(digit)\n        # add the digit to the sum\n        sum_value += digit_int\n    # return the sum of the digits\n    return sum_value"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the integer to a string\n    num_str = str(n)\n    # initialize the sum variable to 0\n    total = 0\n    # loop through each character in the string\n    for char in num_str:\n        # add the integer value of the character to the sum\n        total += int(char)\n    # return the sum of the digits\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function checks whether a given list is sorted or not.\n    \"\"\"\n    n = len(lst)\n    for i in range(n):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function checks whether a given list is sorted or not.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n    elif lst[0] < lst[1]:\n        return issort_list(lst[1:])\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    if n == 1:\n        return True\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function checks whether the specified list is sorted or not.\n    \"\"\"\n    n = len(lst)\n    for i in range(1, n):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n        elif num in unique_nums:\n            unique_nums.remove(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    if not nums:\n        return []\n    elif len(nums) == 1:\n        return nums\n    elif nums[0] not in nums[1:]:\n        return [nums[0]] + two_unique_nums(nums[1:])\n    else:\n        return two_unique_nums(nums[1:])"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty set to store unique numbers\n    unique_nums = set()\n    # iterate over each list in the given number of lists\n    for lst in nums:\n        # iterate over each number in the list\n        for num in lst:\n            # add the number to the unique_nums set only if it's not already in the set\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # convert the unique_nums set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with only the unique numbers from the original list.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set to hold the unique elements\n    unique_set = set()\n    # loop through the lists and add unique elements to the set\n    for lst in nums:\n        for num in lst:\n            if num not in unique_set:\n                unique_set.add(num)\n    # convert the set back to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n\n    # Remove duplicates from each list\n    for i in range(len(nums)):\n        nums[i] = list(set(nums[i]))\n\n    # Find the common elements in all lists\n    common_elems = set.intersection(*nums)\n\n    # Remove duplicates from the common elements\n    unique_elems = list(set(common_elems))\n\n    # Return the unique elements\n    return unique_elems"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create an empty set to store unique numbers\n    unique_set = set()\n    # Loop through each list in the input list\n    for num_list in nums:\n        # Loop through each number in the current list\n        for num in num_list:\n            # If the number is not in the unique set, add it to the set and continue the loop\n            if num not in unique_set:\n                unique_set.add(num)\n                continue\n            # If the number is already in the unique set, remove it from the list and continue the loop\n            num_list.remove(num)\n    # Return the list with unique numbers\n    return [num_list for num_list in nums if len(num_list) > 1]"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Remove duplicate numbers from a given number of lists.\n    '''\n    # Use a set to keep track of unique numbers\n    unique_nums = set()\n    # Iterate over all lists in the input\n    for lst in nums:\n        # Iterate over all elements in the list\n        for num in lst:\n            # Add each unique number to the set\n            unique_nums.add(num)\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = sorted(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data) # get the unique numbers from the list\n    product = 1 # initialize the product to 1\n    for num in unique_numbers: # iterate over the unique numbers\n        product *= num # multiply the product by each unique number\n    return product # return the product of the unique numbers"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))  # find the unique numbers in the list\n    product = 1  # initialize the product to 1\n    for number in unique_numbers:  # iterate over the unique numbers\n        product *= number  # multiply the product with each number\n    return product  # return the final product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    unique_set = set(list_data)\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n\n    for num in unique_numbers:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return 1 if len(unique_nums) == 0 else list_data.count(unique_nums[0])*unique_product(unique_nums[1:])"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)  # convert the list to a set of unique numbers\n    product = 1  # initialize the product to 1\n    \n    for number in unique_numbers:\n        product *= number  # multiply the product by each unique number\n    \n    return product  # return the final product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return 2*math.pi*r*r + 2*math.pi*r + 2*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    pi = 3.14159265359\n    surface_area = 2 * pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Formula for surface area of a cylinder\n    area = 2 * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r * r  # Formula for surface area of a cylinder\n    volume = math.pi * r * r * h  # Formula for volume of a cylinder\n    return area - 2 * volume  # Subtracting the two formulas gives the surface area of the cylinder"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function finds the surface area of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder.\n    h (float): height of the cylinder.\n\n    Returns:\n    float: the surface area of the cylinder.\n\n    \"\"\"\n\n    # Calculate the surface area of the cylinder using the formula:\n    # 2 * pi * r * h\n    surface_area = 2 * 3.14 * r * h\n\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = math.pi * r**2 + 2 * math.pi * r * h + 2 * math.pi * h**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    area = (2 * pi * r**2) + (pi * r * h) + (2 * pi * h**2)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = 2 * (r * h) + 2 * r * h + 2 * h * r\n    return s"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r**2 + 2*pi*h*r"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if B is a sublist of A\n    for i in A:\n        if i in B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        return False \n    i = 0\n    j = 0 \n    while j < len(B): \n        if B[j] == A[i]: \n            i += 1 \n            j += 1 \n        else: \n            i = 0 \n            j += 1 \n    if i == len(A): \n        return True \n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists A and B as input and returns True if B is a sublist of A, else False.\n    '''\n    for i in range(len(A)): \n        if A[i:i+len(B)] == B: \n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not B:   # if B is empty list\n        return True\n    elif not A: # if A is empty list\n        return False\n    elif A[0] in B:  # if first element of A is in B\n        if A[0] == B[0]:  # if first elements are same\n            if len(A) == len(B):  # if length of A is same as length of B\n                return True\n            else:\n                return is_Sub_Array(A[1:],B)\n        else:\n            return is_Sub_Array(A[1:],B)\n    else:\n        return is_Sub_Array(A[1:],B)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function takes two lists A and B as input, and returns True if B is a sublist of A, else False.\n    \"\"\"\n    # check if B is a sublist of A\n    if len(B) > len(A):\n        return False\n\n    # iterate through A and check if B is present in it\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        A = sorted(A) \n    i = 0\n    j = 0\n    n = len(B)\n    while j < len(A): \n        if A[j] == B[i]: \n            if i == n-1: \n                return True\n            i += 1\n            j += 1\n        elif i < n and A[j] < B[i]: \n            j += 1\n        else: \n            i = i - j + 1\n            j = i + 1\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    This function takes two lists as input and checks whether the first list is a sublist of the second list or not.\n    '''\n    \n    if len(B) > len(A):\n        return False\n    \n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    \n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if all elements in A are present in B\n    if set(A) <= set(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0 # index for A\n    j = 0 # index for B\n\n    while i < len(A) and j < len(B): \n        if A[i] == B[j]: \n            i += 1 \n            j += 1 \n        else: \n            i = i - j + 1 \n            j = 0\n\n    if j == len(B): \n        return True\n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    i = 0\n    j = 0\n    while i < len(A):\n        if A[i] == B[j]:\n            if j == len(B) - 1:\n                return True\n            j += 1\n            i += 1\n        else:\n            j = 0\n            i += 1\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # initialize a variable to store the last digit of the factorial\n    last_digit = 0\n\n    # loop through each digit of the factorial\n    while n > 0:\n        # get the last digit of n\n        last_digit = n % 10\n        # divide n by 10 to remove the last digit\n        n = n // 10\n\n    # return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize the factorial of n\n    fact = 1\n    # Traverse through each digit of n\n    while n > 0:\n        # Extract the last digit of n\n        last_digit = n % 10\n        # Multiply the factorial by the last digit\n        fact *= last_digit\n        # Remove the last digit of n\n        n //= 10\n    # Return the last digit of the factorial\n    return fact"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the input number to a string\n    str_n = str(n)\n\n    # Convert the string to a list of digits\n    lst_n = [int(digit) for digit in str_n]\n\n    # Calculate the factorial of the number\n    factorial = 1\n    for i in range(len(lst_n)):\n        factorial *= lst_n[i]\n\n    # Extract the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function finds the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return str(factorial)[-1]"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Calculate the factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Get the last digit of the factorial\n    last_digit = factorial % 10\n    \n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize variables\n    factorial = 1\n    current_digit = 0\n\n    # calculate the factorial\n    for i in range(1, n+1):\n        factorial *= i\n\n    # calculate the last digit of the factorial\n    while factorial > 0:\n        current_digit = factorial % 10\n        factorial = factorial // 10\n\n    return current_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # use a list to store the factorial\n    factorial = []\n    # initialize the factorial with 1\n    factorial.append(1)\n    # loop through each number from 2 to n\n    for i in range(2, n+1):\n        # multiply the current number with the previous factorial and append the result to the list\n        factorial.append(i*factorial[-1])\n    # find the last digit in the factorial and return it\n    return factorial[-1] % 10"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and returns a single flat list that contains the elements of all three lists interleaved.\n    \"\"\"\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # concatenate the 3 lists\n    merged_list = list1 + list2 + list3\n    # flatten the list using list comprehension\n    flattened_list = [i for sublist in merged_list for i in sublist]\n    # return the flattened list\n    return flattened_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes 3 lists of the same length and returns a single flat list.\n    \"\"\"\n    # Create an empty list to hold the interleaved list\n    interleaved = []\n    \n    # Iterate through each element of each list\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    \n    return interleaved"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    This function takes 3 lists of the same length and interleaves them into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n\n    # initialize a new empty list to hold the interleaved list\n    interleaved_list = []\n\n    # iterate over the lists and append each element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate through each list and append each element to the result list\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    # Return the flattened list\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Define a set for storing the elements in both tuples\n    common_set = set(test_tup1 + test_tup2)\n\n    # Iterate through the common set and return the dissimilar elements\n    for element in common_set:\n        if test_tup1.count(element)!= test_tup2.count(element):\n            return element"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of elements that are different between the two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # loop through each element in the first tuple\n    for elem in test_tup1:\n        # if the element is not in the second tuple, append it to the dissimilar list\n        if elem not in test_tup2:\n            dissimilar_list.append(elem)\n\n    # return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # Loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # If the element is not equal to the corresponding element in the second tuple\n        if test_tup1[i]!= test_tup2[i]:\n            # Add the element to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar = []\n\n    # Iterate through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # If the element at the current index is not equal to the corresponding element in the second tuple\n        if test_tup1[i]!= test_tup2[i]:\n            # Add the element to the list of dissimilar elements\n            dissimilar.append(test_tup1[i])\n\n    # Return the list of dissimilar elements\n    return dissimilar"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Create a new list to store the even elements\n    new_list = []\n\n    # Loop through each element in the tuple\n    for item in test_tuple:\n        # If the item is even, add it to the new list\n        if even_fnc(item):\n            new_list.append(item)\n\n    # Return the new list as the result\n    return new_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for tup in test_tuple:\n        if type(tup) == tuple:\n            new_tup = even_ele(tup, even_fnc)\n            if len(new_tup) > 0:\n                new_tuple.append(new_tup)\n        else:\n            if even_fnc(tup):\n                new_tuple.append(tup)\n    return new_tuple\n\n\ndef is_even(x):\n    \"\"\"\n    A function to check if a number is even or not.\n    \"\"\"\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    filtered_list = []\n    for item in test_tuple:\n        if even_fnc(item):\n            filtered_list.append(item)\n    return filtered_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    even_list = []\n    for element in test_tuple:\n        if type(element) == tuple:\n            even_list.extend(even_ele(element, even_fnc))\n        else:\n            if even_fnc(element):\n                even_list.append(element)\n    return even_list\n\n\ndef is_even(num):\n    \"\"\"\n    Write a function to check if a number is even.\n    \"\"\"\n    return num % 2 == 0\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            new_tuple.append(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            new_tuple.append(elem)\n    return new_tuple\n\ndef is_odd(x): \n    return x % 2 == 1\n\ndef is_even(x): \n    return x % 2 == 0\n\ntest_tuple = (1, (2, 3, (4, 5, 6)), 7, (8, 9))\nprint(even_ele(test_tuple, is_odd))  # Output: [1, 3, 7, 9]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    # remove uneven elements by filtering out even elements with filter()\n    even_elements = list(filter(even_fnc, test_tuple))\n    \n    # remove even elements by using a list comprehension to remove the even elements\n    test_tuple = [elem for elem in test_tuple if not even_fnc(elem)]\n    \n    # return the test tuple with uneven elements removed\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    result_list = []\n\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result_list.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result_list.append(item)\n\n    return result_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    uneven_elements = []\n    for tup in test_tuple:\n        for ele in tup:\n            if not even_fnc(ele):\n                uneven_elements.append(ele)\n                break\n    return uneven_elements\n\ndef is_even(num):\n    \"\"\"\n    Check if a number is even or not.\n    \"\"\"\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for sub_tuple in test_tuple:\n        even_sub_tuple = []\n        for elem in sub_tuple:\n            if even_fnc(elem):\n                even_sub_tuple.append(elem)\n        new_tuple.append(even_sub_tuple)\n    return new_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s * 2) + ((b * s) ** 2)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the pyramid using Heron's formula\n    area = (b * s * 0.5) ** 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the length of the base and height of the pyramid\n    l = b + s\n    \n    # Calculate the area of the base and the height of the pyramid\n    area_base = b * b\n    area_height = s * s\n    \n    # Calculate the surface area of the pyramid\n    surface_area = 2 * area_base + 2 * l * area_height\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    # find the surface area of a square pyramid\n    surface_area = b * s + s * s + s * b + b * b\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the base\n    base_area = (b**2)\n    \n    # Calculate the height of the pyramid\n    pyramid_height = s\n    \n    # Calculate the surface area of the pyramid\n    surface_area = base_area * pyramid_height\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = 2 * b * s + 2 * b * b + 6 * b * b * s + 2 * b * b * b * b\n    print(\"The surface area of the square pyramid is:\", surface)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (b * b * 3) + (s * s * 2) + (b * s * 2)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    This function takes in two parameters, b and s, which represent the base and height of the square pyramid.\n    The function calculates and returns the surface area of the square pyramid.\n    '''\n    # Calculate the surface area of the square base\n    base_area = b**2\n    \n    # Calculate the surface area of the top face\n    top_face_area = 4*s\n    \n    # Calculate the total surface area of the pyramid\n    total_area = base_area + top_face_area\n    \n    # Return the total surface area of the pyramid\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * b * s + 2 * b * b + 6 * s * s"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function checks if a dictionary is empty.\n\n    :param dict1: The dictionary that needs to be checked.\n    :return: True if the dictionary is empty, else False.\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    if n < 0:\n        raise ValueError(\"Catalan numbers are defined for non-negative integers.\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    catalan = 1\n    for i in range(1, n+1):\n        catalan = (2*n-1)*catalan + n-1\n        catalan = catalan // i\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) * 2**(num-1) // (1-2**(num-1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2) * catalan_number(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Calculate the nth Catalan number using the formula:\n    C(n) = (2n)! / ((n+1)! * (n-1)!)\n\n    Args:\n    n (int): The index of the Catalan number to calculate.\n\n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return 0\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        n = num\n        catalan_list = [1] * num\n        for i in range(1, num):\n            catalan_list[i] = (i * catalan_list[i-1] + n * catalan_list[i-2]) / (i + 1)\n        return catalan_list[num-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize the first two terms of the series\n    catalan_numbers = [1, 1]\n\n    # Compute the remaining terms of the series\n    for i in range(2, n+1):\n        # Compute the next term of the series\n        next_term = 2 * catalan_numbers[i-1] - catalan_numbers[i-2]\n\n        # Add the next term to the list\n        catalan_numbers.append(next_term)\n\n    # Return the nth term of the series\n    return catalan_numbers[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    c = [0] * (n + 1)\n    c[0] = 1\n    for i in range(1, n + 1):\n        c[i] = 4 * c[i - 1] - (i - 1) * c[i - 2]\n    return c[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)\n\nprint(catalan_number(0))\nprint(catalan_number(1))\nprint(catalan_number(2))\nprint(catalan_number(3))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        n = 2*num - 1\n        return catalan_number(n) / catalan_number(num-1)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all instances of the word \"ly\" at the beginning of a line\n    lines = re.findall(r'^\\w+ly\\b', text, re.MULTILINE)\n    # Find all instances of the word \"ly\" at the end of a line\n    lines += re.findall(r'\\b\\w+ly\\b', text, re.MULTILINE)\n    # Find all instances of the word \"ly\" in the middle of a line\n    lines += re.findall(r'\\b\\w+\\b\\s*ly\\b\\s*|\\b\\w+\\b\\s*,\\s*ly\\b', text, re.MULTILINE)\n    # Loop through each line and find the adverb ending with \"ly\"\n    adverbs = []\n    for line in lines:\n        # Look for the adverb ending with \"ly\" at the beginning of the line\n        m = re.search(r'\\b\\w+ly\\b', line)\n        if m:\n            # Extract the position of the adverb and add it to the list of adverbs\n            adverbs.append((m.start(), m.end()))\n        # Look for the adverb ending with \"ly\" at the end of the line\n        m = re.search(r'\\b\\w+ly\\b\\s*(,|$)', line)\n        if m:\n            # Extract the position of the adverb and add it to the list of adverbs\n            adverbs.append((m.start(), m.end()))\n        # Look for the adverb ending with \"ly\" in the middle of the line\n        m = re.search(r'\\b\\w+\\b\\s*ly\\b\\s*|\\b\\w+\\b\\s*,\\s*ly\\b', line)\n        if m:\n            # Extract the position of the adverb and add it to the list of adverbs\n            adverbs.append((m.start(), m.end()))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    adverbs = []\n    # Use regular expression to find all occurrences of adverb ending with ly\n    matches = re.findall('\\bly\\b', text)\n    # Iterate through matches and create a tuple for each match\n    for match in matches:\n        # Use string slicing to get the adverb and its position in the text\n        start_pos = text.index(match)\n        end_pos = start_pos + len(match)\n        # Add the tuple to the list of adverbs\n        adverbs.append((match, (start_pos, end_pos)))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to find adverbs ending with \"ly\"\n    pattern = r'\\b(?:ly|y)$'\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the positions of the adverbs\n    positions = []\n    # Loop through the matches and append their positions to the positions list\n    for match in matches:\n        positions.append(text.index(match))\n    # Return a tuple containing the adverbs and their positions\n    return tuple(zip(matches, positions))"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b[a-z]+ly\\b'\n    matches = re.findall(pattern, text.lower())\n    return [(match.start(), match.end()) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b[a-zA-Z]*ly\\b'\n    matches = re.findall(pattern, text)\n    adverbs = []\n    for match in matches:\n        start, end = match.span()\n        adverb = text[start:end]\n        adverbs.append(adverb)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b(ly|lys|lyse|lysed|lyses|lysing|lyst|lyster|lystes|lysting|lysterly|lysterlys|lysterlyse|lysterlysed|lysterlyses|lysterlysing|lysterlyst|lysterlyster|lysterlystes|lysterlysting|lysterlysterly|lysterlysterlys|lysterlysterlyse|lysterlysterlysed|lysterlysterlyses|lysterlysterlysing|lysterlysterlyst|lysterlysterlyster|lysterlysterlystes|lysterlysterlysting)\\b'\n    # Regular expression search object to find matches in the text\n    matches = re.finditer(pattern, text)\n    # List to store the positions of the adverbs\n    adverbs_positions = []\n    # Loop through the matches and append their positions to the list\n    for match in matches:\n        adverbs_positions.append(match.start())\n    # Sort the list of adverb positions in ascending order\n    adverbs_positions.sort()\n    # Return the list of adverb positions\n    return adverbs_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(\"Adverbs found:\")\n        for i, match in enumerate(matches):\n            print(f\"{i+1}. {match}\")\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    else:\n        for match in matches:\n            position = text.find(match)\n            yield (match, position)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression to match adverbs ending with ly\n    pattern = r'\\bly\\b'\n    # Use the re.findall() function to find all matches in the text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the positions of adverbs ending with ly\n    ly_positions = []\n    # Loop through the matches and append their positions to the ly_positions list\n    for match in matches:\n        ly_positions.append(text.index(match))\n    # Return the list of positions of adverbs ending with ly\n    return ly_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # create a pattern to match adverbs ending with ly\n    pattern = r'\\b(\\w+)\\s*ly\\b'\n\n    # find all occurrences of adverbs in the text using the pattern\n    matches = re.findall(pattern, text)\n\n    # initialize an empty dictionary to store the adverbs and their positions\n    adverbs = {}\n\n    # iterate over the matches and store the adverbs and their positions in the dictionary\n    for match in matches:\n        # split the match into its parts using whitespace\n        parts = match.split()\n        # get the first part of the match (the adverb)\n        adverb = parts[0]\n        # get the index of the last word in the match\n        index = len(parts) - 1\n        # check if the first word in the match is a preposition\n        if index == 0 and parts[0] in ('of', 'by', 'to', 'in', 'from'):\n            # if the first word is a preposition, increment the index by 1\n            index -= 1\n            # check if the second word in the match is a demonstrative article\n            if index == 0 and parts[1] in ('a', 'an', 'the'):\n                # if the second word is a demonstrative article, increment the index by 1\n                index -= 1\n        # check if the second word in the match is a preposition\n        if index == 1 and parts[1] in ('of', 'by', 'to', 'in', 'from'):\n            # if the second word is a preposition, increment the index by 1\n            index -= 1\n            # check if the third word in the match is a demonstrative article\n            if index == 1 and parts[2] in ('a', 'an', 'the'):\n                # if the third word is a demonstrative article, increment the index by 1\n                index -= 1\n        # check if the third word in the match is a preposition\n        if index == 2 and parts[2] in ('of', 'by', 'to', 'in', 'from'):\n            # if the third word is a preposition, increment the index by 1\n            index -= 1\n        # get the positions of all the adverbs in the match\n        positions = [i for i in range(len(parts) - 1, index - 1, -1)]\n        # store the adverbs and their positions in the dictionary\n        adverbs[adverb] = positions\n\n    # return the dictionary of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items in descending order of price\n    items.sort(reverse=True)\n    # Return the top n items\n    return items[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of n most expensive items\n    heap = [(-price, item) for price, item in items[:n]]\n    heapq.heapify(heap)\n\n    # Remove the minimum price item from the heap\n    for i in range(n):\n        if heap[0][0] < 0:\n            heapq.heappop(heap)\n\n    # Extract the n most expensive items from the heap\n    return [item for _, item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, items[i][1])\n    \n    # Iterate over the remaining items and update the heap\n    for i in range(n, len(items)):\n        if items[i][1] < heapq.heappop(min_heap):\n            heapq.heappush(min_heap, items[i][1])\n    \n    # Return the n most expensive items\n    return [items[i][0] for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    This function takes in a list of items and an integer n.\n    It returns a list of the n most expensive items in the dataset.\n    '''\n    \n    # create a min heap to store the n most expensive items\n    min_heap = []\n    \n    # loop through each item in the dataset\n    for item in items:\n        \n        # if the heap is full and the current item is more expensive than the smallest item in the heap, \n        # remove the smallest item from the heap and add the current item to the heap\n        if len(min_heap) < n and item < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, item)\n        \n        # if the heap is not full and the current item is more expensive than the smallest item in the heap, \n        # add the current item to the heap\n        elif len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        \n        # if the heap is full and the current item is less expensive than the smallest item in the heap, \n        # remove the smallest item from the heap and add the current item to the heap\n        elif item < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, item)\n    \n    # return the top n items in the heap\n    return min_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap of size n to store the n most expensive items\n    max_heap = []\n    # iterate over the dataset and add each item to the min heap\n    for item in items:\n        heapq.heappush(max_heap, item)\n        # if the size of the min heap exceeds n, remove the smallest item from it\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # return the n most expensive items from the min heap\n    return max_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item, item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    return [item for _, item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to keep track of the n most expensive items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the n most expensive items\n    return heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    \n    for item in items:\n        heapq.heappush(heap, item)\n        \n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n\n    # Iterate through the items in the dataset and add them to the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n        # If the heap size exceeds n, remove the smallest item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Return the n most expensive items from the heap\n    return min_heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return None\n    return l[:n] + [l[n]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) >= n:\n        return [l[n:], l[:n]]\n    else:\n        return None"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n > len(l):\n        return \"Invalid input\"\n    elif n == 0:\n        return l\n    else:\n        mid = len(l)//2\n        l1 = l[:mid]\n        l2 = l[mid:]\n        return l2 + l1"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l = l.split()\n    l.append(l.pop(n-1))\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    mid = len(l)//2\n    part1 = l[:mid]\n    part2 = l[mid:]\n    part1.extend(part2)\n    return part1"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n >= len(l):\n        return \"Error: index out of range\"\n    else:\n        part1 = l[:n+1]\n        part2 = l[n+1:]\n        return part2 + part1"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the list is empty\n    if len(l) == 0:\n        return []\n    \n    # Check if the nth element is valid\n    if n < 0 or n >= len(l):\n        return \"Invalid index\"\n    \n    # Split the list at the nth element\n    mid = n // 2\n    left = l[:mid]\n    right = l[mid+1:]\n    \n    # Add the first part to the end\n    l = right + left\n    \n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the length of the list is greater than or equal to n\n    if len(l) >= n:\n        # Create an empty list to store the first part of the list\n        first = []\n        # Loop through the list until the nth element is reached\n        for i in range(n):\n            # Append the current element to the first list\n            first.append(l[i])\n        # Append the remaining elements to the first list\n        first.extend(l[n:])\n        # Return the concatenated first list and the original list\n        return first, l\n    else:\n        # If the length of the list is less than n, return None\n        return None, None"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Args:\n        listx (list): List to be converted to a tuple.\n\n    Returns:\n        tuple: The converted tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n\n    min_val = float('inf')\n    max_val = float('-inf')\n\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n\n    diff = max_val - min_val\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the maximum value in the list\n    max_val = max(nums)\n    # find the minimum value in the list\n    min_val = min(nums)\n    # calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Calculate the difference between the largest and smallest values\n    diff = max_val - min_val\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"Error: list must have at least 2 elements\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize variables for smallest and largest values\n    smallest = nums[0]\n    largest = nums[0]\n\n    # iterate through the list and update smallest and largest values\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n\n    # calculate the difference between smallest and largest values\n    diff = largest - smallest\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"Error: List is empty.\"\n    if len(nums) == 1:\n        return \"Error: List has only one element.\"\n    \n    min_val = min(nums)\n    max_val = max(nums)\n    \n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            perfect_squares.append(i)\n    return perfect_squares\n\na = int(input(\"Enter the lower limit of the range: \"))\nb = int(input(\"Enter the upper limit of the range: \"))\n\nprint(\"The perfect squares between\", a, \"and\", b, \"are:\", perfect_squares(a, b))"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == i:\n            print(i)\n"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b + 1):\n        square = i * i\n        if square == i:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        if square == i*i and square > a:\n            return square"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for num in range(int(a), int(b)+1):\n        if num == int(num**0.5 + 0.5)**2:\n            perfect_squares.append(num)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through all possible squares between a and b\n    for i in range(int(a**(0.5))+1):\n        j = int(i**2)\n        if j >= a and j <= b:\n            # print the square if it is a perfect square\n            print(i**2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize two variables to store the perfect squares found\n    square_a = 0\n    square_b = 0\n\n    # Loop through the numbers between a and b and check if each number is a perfect square\n    for num in range(a, b+1):\n        # Check if the current number is a perfect square\n        is_square = True\n        sqrt = num\n        while sqrt * sqrt <= num:\n            if num % sqrt!= 0:\n                is_square = False\n                break\n            sqrt += 1\n\n        # If the number is a perfect square, add it to the sum\n        if is_square:\n            square_a += num\n            square_b += num\n\n    # Return the sum of the squares found\n    return square_a + square_b"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Check if both a and b are positive integers\n    if type(a)!= int or type(b)!= int or a < 0 or b < 0:\n        return \"Error: Both a and b must be positive integers.\"\n\n    # Check if a is smaller than b\n    if a > b:\n        a, b = b, a\n\n    # Initialize count variable\n    count = 0\n\n    # Iterate through all possible perfect squares between a and b\n    for i in range(a, b+1):\n        # Calculate square root of i\n        sqrt_i = i ** 0.5\n\n        # Check if square root is an integer and within range of a and b\n        if sqrt_i.is_integer() and a <= sqrt_i <= b:\n            count += 1\n\n    # Return count of perfect squares\n    return count"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes in two parameters, r and theta, which are the\n    polar coordinates of a point in a circle. The function returns the\n    corresponding rectangular coordinates of the point in the form\n    (x, y). The angle theta is measured in radians.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n    x (float): The radius of the point in polar coordinates.\n    y (float): The angle of the point in polar coordinates.\n\n    Returns:\n    tuple: The tuple containing the rectangular coordinates (x,y).\n    \"\"\"\n    r = cmath.sqrt(x**2+y**2)\n    theta = cmath.phase(y/x)\n    if theta < 0:\n        theta += 2*cmath.pi\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return (x.real,x.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to cartesian coordinates\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    \n    # Convert cartesian coordinates to rectangular coordinates\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    \n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes the polar coordinates (r, theta) as inputs and returns the corresponding rectangular coordinates (x, y).\n    \n    Args:\n    r: The radius of the point.\n    theta: The angle (in radians) measured from the x-axis to the point.\n    \n    Returns:\n    x: The x-coordinate of the point.\n    y: The y-coordinate of the point.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n        rho (float): the radial component of the coordinates\n        theta (float): the angle of the coordinate system with the positive x-axis, in radians\n    \n    Returns:\n        (x, y): the rectangular coordinates (x, y)\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x.real, y.real)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the input list is empty or not\n    if not newList:\n        return None\n    \n    # If the list has only one element, simply return it\n    elif len(newList) == 1:\n        return newList\n    \n    # If the list has more than one element, swap the first and last elements\n    else:\n        # Get the length of the list\n        length = len(newList)\n        \n        # Swap the first and last elements\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        \n        # Return the modified list\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    for i in range(length//2):\n        newList[i], newList[length-i-1] = newList[length-i-1], newList[i]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # set the first and last index of the list\n    first = 0\n    last = len(newList) - 1\n    \n    # swap the first and last elements\n    newList[first], newList[last] = newList[last], newList[first]\n    \n    # return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Check if the input list is empty\n    if not newList:\n        return None\n    \n    # Set the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n    \n    # Create a new list with the first and last elements swapped\n    newList = [last] + newList[:-1] + [first]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    \n    # Loop through all possible combinations of k values\n    for i in range(k, n+1):\n        # Calculate the binomial coefficient using the formula C(n,i) = n! / (i! * (n-i)!)\n        bin_coeff = factorial(n) / (factorial(i) * factorial(n-i))\n        # Multiply the current binomial coefficient with i and add to the sum variable\n        sum += i * bin_coeff\n    \n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) * n // (k+1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize a variable to store the sum of product of consecutive binomial coefficients\n    sum_prod = 0\n\n    # Initialize variables to store the values of n and k\n    n_k = n + k\n\n    # Loop through values of i from 1 to n_k\n    for i in range(1, n_k + 1):\n        # Calculate the binomial coefficient and multiply it with i\n        bin_coeff = binom(n, i - 1) * i\n        # Add the binomial coefficient to the sum of product of consecutive binomial coefficients\n        sum_prod += bin_coeff\n\n    return sum_prod\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    # Initialize the sum variable as 0\n    sum = 0\n    \n    # Calculate the factorial of n\n    factorial_n = 1\n    for i in range(1, n+1):\n        factorial_n *= i\n        \n    # Calculate the factorial of k\n    factorial_k = 1\n    for i in range(1, k+1):\n        factorial_k *= i\n        \n    # Calculate the factorial of n-k\n    factorial_n_minus_k = 1\n    for i in range(1, n-k+1):\n        factorial_n_minus_k *= i\n        \n    # Calculate the sum of the product of consecutive binomial co-efficients\n    sum = factorial_n_minus_k // factorial_k\n    \n    # Return the sum of the product of consecutive binomial co-efficients\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # initialize sum to zero\n    coeff_sum = 0\n\n    # iterate through all possible values of k\n    for i in range(0,n): \n        coeff_sum += (n-i) * binomial_Coeff(n-1,k-1)\n\n    # return the sum\n    return coeff_sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize variables\n    sum_coeff = 0\n    term1 = 1\n    term2 = 1\n    \n    # Calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(1, n+1):\n        sum_coeff += term1 * term2\n        term1 *= (n-i+1)\n        term2 *= i\n    \n    # Return the sum of the product of consecutive binomial co-efficients\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # initializing the sum of consecutive product of binomial coefficients\n    sum_consec_coeff = 0\n\n    # iterating through all possible values of k from 0 to n-1\n    for i in range(k, n): \n        # finding the number of possible combinations of i objects taken k at a time\n        nCr = 1 \n        for j in range(i, n): \n            nCr *= (n - j) // (j - k) \n\n        # multiplying the previous sum with the number of possible combinations and adding it to the sum\n        sum_consec_coeff += nCr * i\n\n    return sum_consec_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the first two co-efficients\n    C_k = 1\n    C_k_1 = k\n    # Initialize the sum of consecutive co-efficients\n    sum_C = 0\n    # Calculate the sum of consecutive co-efficients\n    for i in range(2,n+1):\n        C_k = C_k_1 * (n-i+1) // i\n        C_k_1 = C_k\n        sum_C += C_k\n    return sum_C"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n or k < 0:\n        print(\"Invalid Input\")\n        return\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    # Compute the binomial coefficient using the formula: (n+k)! / k!(n-k)!\n    factorial = lambda n: 1 if n == 0 else n * factorial(n-1)\n    return factorial(n+1) // factorial(k+1) // factorial(n-k)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'(\\d+)(\\.\\d+)*'\n    ip_with_zero = re.sub(pattern, r'\\1', ip)\n    return ip_with_zero"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+\\.0\\.0\\.0', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    pattern = r\"^([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}$\"\n    ip = re.sub(pattern, r\"\\1\\3\", ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d*\\.\\d*\\.\\d*\\.\\d*$', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+(\\/.*)?$'\n    match = re.match(pattern, ip)\n\n    if match:\n        ip_list = ip.split('.')\n        ip_list = [ip_list[i] for i in range(4) if ip_list[i]!= '0']\n        ip = '.'.join(ip_list)\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})'\n    match = re.match(pattern, ip)\n    if match:\n        for i in range(1, 5):\n            if match.group(i) == '0':\n                ip = ip.replace(match.group(i), '', 1)\n            else:\n                break\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove any leading zeroes from the ip address\n    ip = re.sub(r'^\\d*(\\d)\\d*(\\d)\\d*(\\d)\\d*', r'\\1.\\2.\\3.\\4', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\b0\\.0\\.0\\.0\\b)|(\\b0\\.0\\.0\\b)|(\\b0\\.0\\b)|(\\b0\\b)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    ip = re.sub(r'^\\d+\\.0\\.0\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+\\.0\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.0', '', ip)\n    ip = re.sub(r'^0\\.0\\.0\\.0', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from octets\n    pattern = r'^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])){2}$'\n    ip_list = re.findall(pattern, ip)\n    result = []\n    for octet in ip_list[0]:\n        if octet!= '0':\n            result.append(octet)\n    return ''.join(result)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            count += 1\n        elif list1[i] % 2 == 1:\n            if count > 0:\n                return abs(list1[i] - list1[i-count]) - abs(list1[i] - list1[i-count+1])\n    return 0"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = list1[0]\n    first_odd = list1[1]\n    if first_even % 2 == 0 and first_odd % 2 == 1:\n        diff = first_even - first_odd\n    elif first_even % 2 == 1 and first_odd % 2 == 0:\n        diff = first_odd - first_even\n    else:\n        diff = 'The list should contain at least two even and two odd numbers.'\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        even_num = 2 * int(list1[0])\n        odd_num = 3 * int(list1[1])\n    else:\n        even_num = 2 * int(list1[0])\n        odd_num = 2 * int(list1[1]) + 1\n    \n    diff = even_num - odd_num\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    even_index = 0\n    odd_index = 1\n    while even_index < len(list1) and odd_index < len(list1):\n        if list1[even_index] % 2 == 0:\n            even_index += 1\n        else:\n            odd_index += 1\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                return abs(even - num)\n        elif odd is None:\n            odd = num\n        else:\n            return abs(odd - num)\n    return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = 0\n    odd_first = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_first += num\n        else:\n            odd_first += num\n            \n    return odd_first - even_first"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    even = None\n    odd = None\n\n    for num in list1:\n        if num % 2 == 0:\n            count += 1\n            if even is None:\n                even = num\n            elif count == 1:\n                odd = num\n                break\n        else:\n            count = 0\n\n    if even is None or odd is None:\n        print(\"No even or odd number found in the list\")\n    else:\n        return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    even_num = 0\n    odd_num = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n            \n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as an input and returns the difference of the first even and first odd number of the list.\n    '''\n    even_lst = [num for num in lst if num % 2 == 0]\n    odd_lst = [num for num in lst if num % 2!= 0]\n\n    if len(even_lst) == 0:\n        return None\n    else:\n        return odd_lst[0] - even_lst[0]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Function to count number of swaps required to convert two binary strings\n    def count_swaps(str1, str2):\n        # Initialize count of swaps to zero\n        swaps = 0\n        \n        # Loop through each character in the strings\n        for i in range(len(str1)):\n            # If the characters are not equal, increment count of swaps\n            if str1[i]!= str2[i]:\n                swaps += 1\n        \n        # Return count of swaps\n        return swaps\n    \n    # Initialize count of swaps to zero\n    swaps = 0\n    \n    # Loop through each character in the two strings\n    for i in range(len(str1)):\n        # If the characters are equal, skip to the next character\n        if str1[i] == str2[i]:\n            continue\n        \n        # If the characters are not equal, swap the characters and increment count of swaps\n        str1 = str1[:i] + str2[i] + str1[i+1:]\n        str2 = str2[:i] + str1[i] + str2[i+1:]\n        swaps += 1\n    \n    # Return count of swaps\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number \n    represented as a string to another.\n\n    Args:\n    str1 (str): binary string \n    str2 (str): binary string\n\n    Returns:\n    int: minimum number of swaps required to convert binary string to another\n    \"\"\"\n    # Convert binary string to list of integers\n    arr1 = list(map(int, bin(int(str1, 2))[2:].zfill(len(str1))))\n    arr2 = list(map(int, bin(int(str2, 2))[2:].zfill(len(str2))))\n\n    # Initialize swap count as 0\n    swap_count = 0\n\n    # Iterate through the lists of integers and compare their elements\n    for i in range(len(arr1)):\n        if arr1[i]!= arr2[i]:\n            # If the elements are not equal, swap the elements and increment swap count by 1\n            arr1[i], arr2[i] = arr2[i], arr1[i]\n            swap_count += 1\n\n    # Return the minimum number of swaps required to convert binary strings\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    swaps = 0\n    i, j = 0, n-1\n    while i < j:\n        if str1[i]!= str2[j]:\n            # swap the characters at the current positions\n            str1[i], str1[j] = str1[j], str1[i]\n            str2[i], str2[j] = str2[j], str2[i]\n            swaps += 1\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    if len(str1)!= len(str2):\n        return \"Both binary strings should have the same length.\"\n\n    swaps = 0\n    str1_list = [int(digit) for digit in str1]\n    str2_list = [int(digit) for digit in str2]\n\n    for i in range(len(str1_list)):\n        if str1_list[i]!= str2_list[i]:\n            if str1_list[i] > str2_list[i]:\n                str1_list[i], str2_list[i] = str2_list[i], str1_list[i]\n                swaps += 1\n            else:\n                str1_list[i], str2_list[i] = str1_list[i], str2_list[i]\n                swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the given strings into binary format\n    binary_str1 = bin(int(str1, 2))[2:]\n    binary_str2 = bin(int(str2, 2))[2:]\n\n    # Get the lengths of both binary strings\n    n1, n2 = len(binary_str1), len(binary_str2)\n\n    # Initialize an array to store the minimum number of swaps\n    min_swaps = [0] * (n1 + 1)\n\n    # Initialize an array to store the maximum number of swaps\n    max_swaps = [0] * (n2 + 1)\n\n    # Initialize an array to store the maximum number of swaps that can be made\n    max_swaps_no_swaps = [0] * (n2 + 1)\n\n    # Initialize an array to store the count of swaps required for each position\n    count_swaps = [0] * (n1 + 1)\n\n    # Initialize an array to store the position of each digit in the binary string\n    position_arr = [0] * 8\n\n    # Iterate over each position in the binary string\n    for i in range(n1):\n        # If the current binary digit in str1 is 0, swap the digit with the next 1 in str2\n        if binary_str1[i] == '0':\n            count_swaps[i + 1] = min_swaps[i] + 1\n            max_swaps[count_swaps[i + 1]] = max(max_swaps[count_swaps[i + 1]], count_swaps[i])\n            min_swaps[count_swaps[i + 1]] = min(min_swaps[count_swaps[i + 1]], min_swaps[i] + 1)\n            max_swaps_no_swaps[count_swaps[i + 1]] = max(max_swaps_no_swaps[count_swaps[i + 1]], max_swaps_no_swaps[i])\n        # If the current binary digit in str1 is 1, do not swap the digit with any other digit\n        else:\n            count_swaps[i + 1] = 0\n            max_swaps[count_swaps[i + 1]] = max(max_swaps[count_swaps[i + 1]], max_swaps[i])\n            min_swaps[count_swaps[i + 1]] = min(min_swaps[count_swaps[i + 1]], min_swaps[i])\n            max_swaps_no_swaps[count_swaps[i + 1]] = max(max_swaps_no_swaps[count_swaps[i + 1]], max_swaps_no_swaps[i])\n\n    # Iterate over each position in the binary string\n    for i in range(n2):\n        # If the current binary digit in str2 is 0, swap the digit with the next 1 in str1\n        if binary_str2[i] == '0':\n            count_swaps[n1 + i] = max_swaps[n1 + i] + 1\n            max_swaps[count_swaps[n1 + i]] = max(max_swaps[count_swaps[n1 + i]], count_swaps[n1 + i])\n            min_swaps[count_swaps[n1 + i]] = min(min_swaps[count_swaps[n1 + i]], max_swaps[n1 + i] + 1)\n            max_swaps_no_swaps[count_swaps[n1 + i]] = max(max_swaps_no_swaps[count_swaps[n1 + i]], max_swaps_no_swaps[n1 + i])\n        # If the current binary digit in str2 is 1, do not swap the digit with any other digit\n        else:\n            count_swaps[n1 + i] = 0\n            max_swaps[count_swaps[n1 + i]] = max(max_swaps[count_swaps[n1 + i]], max_swaps[n1 + i])\n            min_swaps[count_swaps[n1 + i]] = min(min_swaps[count_swaps[n1 + i]], max_swaps[n1 + i])\n            max_"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both strings to integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n    # Initialize a dictionary to store the count of each digit in the binary numbers\n    digit_count = {}\n    # Iterate over each digit in the binary numbers and update the dictionary with the count\n    for i in range(len(str1)):\n        if str1[i] in digit_count:\n            digit_count[str1[i]] += 1\n        else:\n            digit_count[str1[i]] = 1\n    # Iterate over each digit in the binary numbers and check if there is a difference between the two digits\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            # Check if the difference is present in the dictionary\n            if abs(digit_count[str1[i]] - digit_count[str2[i]]) in digit_count:\n                # If it is, update the count of the digits in the binary numbers\n                digit_count[str1[i]] -= 1\n                digit_count[str2[i]] -= 1\n            else:\n                # If it is not, return -1 as no minimum number of swaps can be found\n                return -1\n    # If the loop completes without returning -1, it means all the digits in the binary numbers are equal.\n    # In this case, we return 0 as no swaps are required.\n    return 0"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2):\n    # Convert the binary strings to lists of bits\n    list1 = [int(bit) for bit in str1[::-1]]\n    list2 = [int(bit) for bit in str2[::-1]]\n    \n    # Initialize variables\n    count = 0\n    i = 0\n    j = 0\n    \n    # Compare the lists of bits and count swaps\n    while i < len(list1) and j < len(list2):\n        if list1[i]!= list2[j]:\n            count += 1\n            if list1[i] > list2[j]:\n                # Swap the bits\n                list1[i], list1[j] = list1[j], list1[i]\n            else:\n                list2[j], list2[i] = list2[i], list2[j]\n            i += 1\n            j += 1\n        elif list1[i] == list2[j]:\n            i += 1\n            j += 1\n    \n    # Return the count of swaps\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    if n!= len(str2):\n        return \"Invalid input strings\"\n    diff = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            diff += 1\n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers represented as strings as input\n    and returns the minimum number of swaps required to convert them.\n\n    The swaps are made such that the first binary number becomes the second binary number.\n    \"\"\"\n    # Check if both binary numbers have the same length\n    if len(str1)!= len(str2):\n        return \"Both binary numbers must have the same length\"\n    \n    # Initialize an empty list to store the count of swaps\n    swap_count = []\n    \n    # Iterate through each digit of the first binary number\n    for i in range(len(str1)):\n        # If the digits are different, add 1 to the count of swaps\n        if str1[i]!= str2[i]:\n            swap_count.append(1)\n        # If the digits are the same, add 0 to the count of swaps\n        else:\n            swap_count.append(0)\n            \n    # Calculate the minimum number of swaps required to convert the binary numbers\n    min_swaps = min(swap_count)\n    \n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert both binary strings to lists\n    bin1 = [int(i) for i in str1]\n    bin2 = [int(i) for i in str2]\n    # make sure they have the same length\n    if len(bin1)!= len(bin2):\n        return \"Error: The binary strings have different lengths.\"\n    # check if the binary strings are of equal length\n    if len(bin1) % 2 == 0:\n        # iterate through the binary strings and swap even and odd digits\n        for i in range(len(bin1)):\n            if bin1[i] % 2!= bin2[i] % 2:\n                # swap the digits\n                temp = bin1[i]\n                bin1[i] = bin2[i]\n                bin2[i] = temp\n                # count the number of swaps\n                count = 0\n                for j in range(len(bin1)):\n                    if bin1[j]!= bin2[j]:\n                        count += 1\n                return count\n    else:\n        # iterate through the binary strings and swap even and odd digits\n        for i in range(len(bin1)):\n            if bin1[i] % 2!= bin2[i] % 2:\n                # swap the digits\n                temp = bin1[i]\n                bin1[i] = bin2[i]\n                bin2[i] = temp\n                # count the number of swaps\n                count = 0\n                for j in range(len(bin1)):\n                    if bin1[j]!= bin2[j]:\n                        count += 1\n                return count\n    # if no swaps are found, return -1\n    return -1"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        if isinstance(element, tuple):\n            size += tuple_size(element)\n        else:\n            size += sys.getsizeof(element)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # convert tuple to byte string\n    byte_str = bytearray(str(tuple_list))\n\n    # calculate size in bytes\n    size_bytes = sys.getsizeof(byte_str)\n\n    return size_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Get the size of the tuple in bytes\n    tuple_size_bytes = sys.getsizeof(tuple_list)\n    \n    # Convert the size to a more readable format\n    tuple_size_formatted = format(tuple_size_bytes, ',d')\n    \n    # Print the size of the tuple in bytes\n    print(\"Size of the tuple:\", tuple_size_formatted)"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_of_tuple = sys.getsizeof(tuple_list)\n    return size_of_tuple"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Find the size of the tuple in bytes using sys.getsizeof()\n    size = sys.getsizeof(tuple_list)\n    # Return the size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    sys.stdout.write(\"Enter the size of the tuple: \")\n    size = int(input())\n    tuple_size = 0\n    for i in range(len(tuple_list)):\n        tuple_size += sys.getsizeof(tuple_list[i])\n    return tuple_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize the size of the tuple to 0\n    size = 0\n    \n    # Iterate through each element in the tuple and add its size to the total size\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    \n    # Return the total size of the tuple\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Find the total number of elements in both arrays\n    total = len(arr1) + len(arr2)\n\n    # Find the number of elements that can be included in the first half of the total\n    half_of_total = kth_element_from_first_half(total, k)\n\n    # Initialize variables to keep track of the remaining elements in both arrays\n    remaining_in_arr1 = total - half_of_total\n    remaining_in_arr2 = total - remaining_in_arr1\n\n    # Initialize variables to keep track of the current index for each array\n    i = 0\n    j = 0\n\n    # Iterate through both arrays until one of them is exhausted\n    while remaining_in_arr1 > 0 and remaining_in_arr2 > 0:\n        # If the current element in arr1 is smaller, add it to the result and decrement the remaining elements in arr1\n        if arr1[i] < arr2[j]:\n            result.append(arr1[i])\n            i += 1\n            remaining_in_arr1 -= 1\n        # If the current element in arr2 is smaller, add it to the result and decrement the remaining elements in arr2\n        else:\n            result.append(arr2[j])\n            j += 1\n            remaining_in_arr2 -= 1\n\n    # Add the remaining elements in arr1 to the result\n    result += arr1[i:]\n\n    # Add the remaining elements in arr2 to the result\n    result += arr2[j:]\n\n    return result\n\n\ndef kth_element_from_first_half(total, k):\n    '''\n    Find the number of elements that can be included in the first half of the total.\n    '''\n\n    # If k is less than the total, kth element can be found in the first half\n    if k < total:\n        return k\n\n    # Otherwise, kth element can be found in the second half\n    else:\n        return total - k"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i, j = 0, 0\n    n1, n2 = len(arr1), len(arr2)\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n\n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    i = j = 0\n    \n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n    \n    if k == 1:\n        if i < n1:\n            return arr1[i]\n        else:\n            return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth smallest element in arr1 and arr2.\n\n    Parameters:\n    arr1 (list): a sorted list\n    arr2 (list): a sorted list\n    k (int): the kth smallest element to find\n\n    Returns:\n    int: the kth smallest element\n\n    \"\"\"\n    i = j = 0  # Initialize pointers\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n    if k == 1:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            \n            # if we have already found kth element, then we can break the loop\n            if k == 1:\n                return arr1[i]\n                \n            # if we have not found kth element, then we need to increment k and continue the loop\n            k -= 1\n            \n            i += 1\n            j += 1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Find the length of the arrays\n    n1, n2 = len(arr1), len(arr2)\n\n    # If k is greater than the sum of the lengths, then k must be greater than the smaller array\n    if k > n1 + n2:\n        arr1, arr2 = arr2, arr1\n        k -= n1 + n2\n        n1, n2 = n2, n1\n\n    # Calculate the starting index of the kth element\n    if k < n1:\n        start = 0\n    else:\n        start = n1 - k\n\n    # Find the kth element from the two sorted arrays\n    i, j = start, start + k - 1\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            return arr1[i]\n        elif arr1[i] > arr2[j]:\n            i += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n\n    # If k is less than the length of the first array, then the kth element is in the first array\n    if i == n1:\n        return arr1[start:start+k]\n    else:\n        return arr2[start+k-1:]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in three parameters, arr1, arr2, and k, and returns the kth smallest element in the array.\n    \"\"\"\n    i = 0\n    j = len(arr1) - 1\n    \n    while i <= j:\n        pivot = (i + j) // 2\n        \n        if arr1[pivot] < arr2[pivot]:\n            if k == 1:\n                return arr1[pivot]\n            i = pivot + 1\n        elif arr1[pivot] > arr2[pivot]:\n            if k == 1:\n                return arr2[pivot]\n            j = pivot - 1\n        else:\n            return arr1[pivot]\n        \n        k -= 1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    sum = 0\n    for digit in num_str:\n        power = len(num_str)\n        sum += int(digit) ** power\n    \n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong_number(num):\n    \"\"\"\n    Checks if a given number is an Armstrong number or not.\n    \"\"\"\n    num = int(num)\n    sum_of_squares = 0\n    temp = num\n\n    while temp > 0:\n        digit = temp % 10\n        sum_of_squares += digit ** 3\n        temp //= 10\n\n    return num == sum_of_squares\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # converting the given number to a string\n    num_str = str(number)\n    # initializing the sum variable\n    sum = 0\n    # loop to calculate the sum of the digits raised to the power of the number of digits\n    for i in range(len(num_str)):\n        digit = int(num_str[i])\n        sum += digit**len(num_str)\n    # checking if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # initialize variables\n    total = 0\n    num_str = str(number)\n    # loop through each digit in the number and add it to the total\n    for digit in num_str:\n        total += int(digit) ** len(num_str)\n    # check if the total is equal to the original number\n    if total == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(number):\n    '''\n    Check if the given number is an Armstrong number or not.\n    '''\n    # Get the length of the number\n    n = len(str(number))\n    # Initialize the sum of the squares\n    s = 0\n    # Loop through each digit in the number\n    for digit in str(number):\n        # Multiply the digit by the square of the next digit\n        s += int(digit) ** n\n        # Decrement the exponent\n        n -= 1\n    # Return True if the sum of the squares is equal to the original number,\n    # False otherwise.\n    return s == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    This function checks if a given number is an Armstrong number or not.\n    \"\"\"\n    num_str = str(num)\n    # Truncate all non-integer characters from the string\n    num_str = ''.join(filter(str.isdigit, num_str))\n    # Convert the string to an integer and calculate its sum of the cube of each digit\n    num_sum = sum(int(d**3) for d in num_str)\n    # Compare the sum of the cube of each digit with the original number\n    return num == num_sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Initialize the sum of the digits to 0\n    sum_of_digits = 0\n\n    # Convert the input number to a string and loop through each character\n    for digit in str(number):\n        # Convert each digit to an integer and add it to the sum\n        sum_of_digits += int(digit) ** len(str(number))\n\n    # Return whether the sum is equal to the original number or not\n    return sum_of_digits == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if number == sum:\n        print(f\"{number} is an Armstrong number.\")\n    else:\n        print(f\"{number} is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Remove any leading zeros from the number\n    number = str(number)\n    while number[0] == '0':\n        number = number[1:]\n    # Check if the number is an integer\n    if number.isnumeric() and int(number) == number:\n        # Convert the number to a list of digits\n        digits = [int(digit) for digit in number]\n        # Calculate the sum of the digits raised to the power of the number of digits\n        result = sum(digit**len(digits) for digit in digits)\n        # Check if the result is equal to the original number\n        if result == int(number):\n            return True\n    return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n\n    # Function to check if a number is armstrong or not\n    def is_armstrong(num):\n        if num < 10:\n            return False\n        else:\n            num_str = str(num)\n            num_len = len(num_str)\n            sum = 0\n            temp = num\n\n            while temp > 0:\n                digit = temp % 10\n                sum += digit ** num_len\n                temp //= 10\n\n            return num == sum\n\n    # Checking if the given number is armstrong or not\n    if is_armstrong(number):\n        print(f\"{number} is an armstrong number.\")\n    else:\n        print(f\"{number} is not an armstrong number.\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count to zero\n    sum = 0\n    count = 0\n    \n    # loop through the first n numbers and add them to sum\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n        \n    # calculate and return the average\n    average = sum / count\n    \n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 1\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # Initialize sum and count to 0\n    sum = 0\n    count = 0\n\n    # Calculate the sum of first n natural numbers\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    \n    # Calculate the average of the first n natural numbers\n    average = sum / count\n    \n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find the sum and average of the first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    average = total / count\n    print(\"Sum of the first {} natural numbers is: {}\".format(n, total))\n    print(\"Average of the first {} natural numbers is: {:.2f}\".format(n, average))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum/count\n    print(\"Sum:\", sum)\n    print(\"Average:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_count = 0\n    total = 0\n    count = 0\n    while count < number:\n        total += count\n        sum_count += count\n        count += 1\n    average = total / number\n    return sum_count, average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count variables to zero\n    sum = 0\n    count = 0\n    \n    # loop until count reaches n\n    while count < number:\n        # add a random number to sum\n        sum += random.randint(1, 100)\n        \n        # increment count\n        count += 1\n    \n    # calculate and return average\n    return sum / count"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    while count < number:\n        total += count\n        count += 1\n    average = total / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    avg = total / count\n    return total, avg"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The given number is even.\")\n    else:\n        print(\"The given number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n\n    :param n: An integer representing the number to be checked.\n    :return: A boolean value indicating whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    This function checks whether the given number is even or odd.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even.\")\n    else:\n        print(n, \"is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = {}\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    for char in char_freq:\n        if char_freq[char] > 1:\n            return char\n    \n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Initialize an empty dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Loop through each character in the string again\n    for char in str1:\n        # If the character is already in the dictionary and its count is greater than 1,\n        # return its index\n        if char in char_count and char_count[char] > 1:\n            return str1.index(char)\n\n    # If no repeated character is found, return -1\n    return -1"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    # iterate through the string and count the frequency of each character\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # initialize a variable to keep track of the first repeated character\n    first_rep = None\n\n    # iterate through the frequency dictionary to find the first repeated character\n    for char in freq:\n        if freq[char] > 1:\n            if first_rep is None:\n                first_rep = char\n            elif first_rep == char:\n                first_rep = None\n                break\n\n    return first_rep"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    \n    # Loop through the dictionary again to find the first repeated character\n    for char in str1:\n        if freq[char] > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    for char, freq in char_freq.items():\n        if freq > 1:\n            return char\n\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n\n    lucids = []\n\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            lucids.append(i)\n        else:\n            continue\n\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = [1]\n    current_number = 2\n\n    while current_number <= n:\n        ludic_numbers.append(current_number)\n        current_number += 1\n\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            lucid_numbers.append(i)\n        else:\n            lucid_numbers.append(3*i + 1)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_list = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            lucid_list.append(i)\n    return lucid_list\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number or not.\n    '''\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_nums = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_nums.append(i)\n    return lucid_nums\n\ndef is_lucid(n):\n    \"\"\"\n    Write a function to check if a given integer is a lucid number.\n    \"\"\"\n    return all(n % i == 0 for i in range(2, int(n**0.5)+1))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(n):\n        is_lucid = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_set = set()\n    for i in range(1, n+1):\n        lucid_set.add(lucid_number(i))\n    return lucid_set\n\ndef lucid_number(n):\n    '''\n    This is a helper function to generate lucid numbers.\n    '''\n    while True:\n        is_lucid = True\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            return n\n        n += 1"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        if i == 1 or i == 4 or i == 7 or i == 11 or i == 15 or i == 18 or i == 21:\n            lucids.append(i)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 0:\n        return []\n    else:\n        return [n] + get_ludic(n - 1)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the reversed words back into a string\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word\n    words = [word[::-1] for word in words]\n    # join the reversed words back into a string\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string by spaces\n    words = s.split()\n    # Reverse each word in the list\n    words = [word[::-1] for word in words]\n    # Join the reversed words back together\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n\n    # split the string into words\n    words = s.split()\n\n    # reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n\n    # join the words back into a string\n    result = \" \".join(words)\n\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    # Convert the string into a list of words\n    words = s.split()\n    \n    # Reverse each word in the list using slicing\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n        \n    # Join the words back into a string and return the result\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()  # Split the string into a list of words\n    words.reverse()  # Reverse the order of the words in the list\n    return''.join(words)  # Join the reversed words back into a string with spaces between"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back into a string\n    reversed_string =''.join(reversed_words)\n    # return the reversed string\n    return reversed_string"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given integer is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Returns True if the given integer is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Initialize a boolean variable to keep track of whether the number is prime or not\n    is_prime = True\n\n    # Check if the number is less than or equal to 1\n    if num <= 1:\n        is_prime = False\n        return is_prime\n\n    # Check if the number is equal to 2\n    if num == 2:\n        is_prime = True\n        return is_prime\n\n    # Check if the number is divisible by any number from 3 to sqrt(num)\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            is_prime = False\n            break\n\n    # If the number is prime, return True\n    if is_prime:\n        return is_prime\n\n    # If the number is not prime, return False\n    else:\n        return is_prime"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given integer is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Returns True if the given integer is a prime number, False otherwise.\n    \"\"\"\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    # Find all occurrences of the pattern in the string\n    matches = re.findall(pattern, text)\n\n    # Loop through all matches and return them with their start and end indices\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        yield match, start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    literals = re.findall(pattern, text)\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None, None, None\n    else:\n        return matches[0], 0, len(matches[0])"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    else:\n        start_index = matches[0].start()\n        end_index = matches[-1].end()\n        return matches[0].group(0), start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        literal = match.group()\n        start = match.start()\n        end = match.end()\n        return literal, start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    if m:\n        return m.group(), m.start(), m.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Check if there are any matches\n    if not matches:\n        return None, None, None\n    \n    # Extract the first match\n    match = matches[0]\n    \n    # Calculate the start and end indices\n    start = text.find(match)\n    end = start + len(match)\n    \n    # Return the match, start and end indices\n    return match, start, end"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    This function calculates the nth Bell number using the formula:\n        B_n = (phi^n - (1-phi)^n)/phi^2\n\n    Where phi = (1 + sqrt(5))/2.\n    '''\n\n    phi = (1 + 5**0.5) / 2\n    return round((phi**n - (1-phi)**n) / (phi**2))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 1:\n        print(\"Please enter a positive integer greater than or equal to 1\")\n    else:\n        count = 0\n        while count < n:\n            count += 1\n            print(count)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(2, n+1):\n        bell.append(bell[-1] + bell[-2])\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return n*(n+1)//2"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Negative values are not allowed.\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    return (-1)**n + (1/factorial(n+1))"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and k, and returns a list with the same elements, but the k'th element removed.\n    '''\n    # create a copy of the original list\n    list2 = list1[:]\n    # remove the kth element from the copy\n    del list2[k-1]\n    # return the modified copy\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 0:\n        return list1[1:]\n    elif L == len(list1)-1:\n        return list1[:L]\n    else:\n        return [x for x in list1 if x!= list1[L-1]]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L-1\n    for i in range(len(list1)):\n        if i==k:\n            list1.pop(i)\n        else:\n            temp = list1[i]\n            list1[i] = list1[i+1]\n            list1[i+1] = temp\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and a number L as input.\n    It returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    if L > n or L < 1:\n        return \"Invalid input. L should be between 1 and the length of the list.\"\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(L-1):\n        list1.append(list1.pop(0))\n    return list1[1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and an integer L and returns a list with the same elements but the k'th element removed.\n    '''\n    n = len(list1)\n    if L > n:\n        return list1\n    elif L == 1:\n        return list1[:L-1] + list1[L:]\n    else:\n        first = list1[:L-1]\n        second = list1[L:]\n        return first + remove_kth_element(second, L-1)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i!= L-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(max_val, max(test_list[i]))\n        elif i < N-1:\n            continue\n        else:\n            max_val = max(max_val, max(test_list[i]))\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(matrix, N):\n    max_value = float('-inf')\n    max_index = None\n    for i, row in enumerate(matrix):\n        if i == 0:\n            max_index = N - 1\n        elif N <= len(row):\n            if row[N-1] > max_value:\n                max_value = row[N-1]\n                max_index = i\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initializing the maximum value to be 0\n    max_val = 0\n    \n    # loop through the rows of the matrix\n    for i in range(len(test_list)):\n        # loop through the columns of the matrix and check if the current column is equal to the N'th column\n        for j in range(len(test_list[0])):\n            # check if the current column is equal to the N'th column\n            if j == N-1:\n                # if it is, then check if the value at the current position is greater than the current maximum value\n                if test_list[i][j] > max_val:\n                    max_val = test_list[i][j]\n    \n    # return the maximum value of the N'th column\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # check if the input is a list of lists\n    if not all(isinstance(row, list) for row in test_list):\n        raise ValueError(\"Input must be a list of lists.\")\n    \n    # check if the input is a matrix\n    if not all(len(row) == len(test_list[0]) for row in test_list):\n        raise ValueError(\"Input must be a matrix.\")\n    \n    # find then'th column\n    max_col = [row[N-1] for row in test_list]\n    \n    # find the maximum value in the column\n    max_value = max(max_col)\n    \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the number of rows in the matrix\n    rows = len(test_list)\n    \n    # Check if the index is valid\n    if N < 1 or N > rows:\n        return None\n    \n    # Initialize the max value to 0\n    max_val = 0\n    \n    # Loop through each row and find then'th column value\n    for i in range(rows):\n        if i == 0:\n            max_val = test_list[i][N-1]\n        elif i == rows - 1:\n            max_val = max(max_val, test_list[i][N-1])\n        else:\n            max_val = max(max_val, test_list[i][N-1])\n            \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if N < 1 or N > len(test_list[0]):\n        return 'Invalid N value. N must be between 1 and the length of the first row of the matrix.'\n    max_value = 0\n    for row in test_list:\n        if N <= len(row):\n            max_value = max(max_value, row[N-1])\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_list = []\n    for row in test_list:\n        max_list.append(max(row[N-1]))\n    return max(max_list)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    n = len(test_list[0])\n    col = [row[N-1] for row in test_list]\n    return max(col)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    \n    # Initialize max value to negative infinity\n    max_val = float('-inf')\n    \n    # Loop through each row in the matrix\n    for row in test_list:\n        # Check if then'th column value is greater than the current max value\n        if row[N] > max_val:\n            # Update the max value\n            max_val = row[N]\n    \n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        first_elem = sublist[0]\n        second_elem = sublist[1]\n        merged_lst.append([first_elem, second_elem])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for item in test_list:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                total_sum += sub_item\n        else:\n            total_sum += item\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns the cumulative sum of all the values in the list.\n\n    Parameters:\n    test_list (list): List of tuples. Each tuple contains values to be summed up.\n\n    Returns:\n    int: The cumulative sum of all the values in the list.\n    \"\"\"\n    total_sum = 0\n    for i, val in enumerate(test_list):\n        total_sum += val[0]\n    return total_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cumulative_sum = 0\n    for tup in test_list:\n        for num in tup:\n            cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cum_sum += val\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize the cumulative sum as 0\n    cumulative_sum = 0\n\n    # Iterate over each tuple in the list\n    for tup in test_list:\n\n        # Extract the values from the tuple and add them to the cumulative sum\n        cumulative_sum += tup[0]\n\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for val in test_list:\n        cum_sum += val\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in test_list:\n        total += i\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize a list to store the cumulative sum\n    cum_sum = []\n    # loop through each tuple in the list\n    for tup in test_list:\n        # loop through each value in the tuple and add it to the cum_sum\n        for val in tup:\n            cum_sum.append(val)\n    # return the cum_sum list\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        temp_sum = 0\n        for j in range(len(nums[i])):\n            temp_sum += nums[i][j]\n        temp_avg = temp_sum / len(nums[i])\n        result.append(temp_avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        total = 0\n        count = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n            count += 1\n        averages.append(total/count)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Convert the input tuple into a list of tuples\n    list_of_tuples = list(nums)\n    # Initialize an empty list to store the average values\n    avg_list = []\n    # Loop through each tuple in the list\n    for i in list_of_tuples:\n        # Compute the average of the tuple values\n        avg = sum(i) / len(i)\n        # Append the average value to the list\n        avg_list.append(avg)\n    # Return the list of average values\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for num in nums:\n        for i in num:\n            total += i\n            count += 1\n    averages = [total/count for i in range(count)]\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        average = sum(num_tuple) / len(num_tuple)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for sublist in nums:\n        sum_sublist = 0\n        for num in sublist:\n            sum_sublist += num\n        avg_list.append(sum_sublist/len(sublist))\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for tup in nums:\n        total = sum(tup)\n        average = total / len(tup)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Convert the tuple of tuples to a list of lists\n    nums_list = list(nums)\n    # Initialize an empty list to store the averages\n    averages = []\n    # Iterate through each tuple in the list of lists\n    for tup in nums_list:\n        # Initialize a counter to keep track of the number of values in the tuple\n        count = 0\n        # Iterate through each value in the tuple\n        for num in tup:\n            # Increment the counter\n            count += 1\n        # Calculate the average value\n        avg = count / len(tup)\n        # Append the average value to the list of averages\n        averages.append(avg)\n    # Return the list of averages\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths.\")\n        return\n\n    # Perform element-wise modulo\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n\n    # Print the result\n    print(\"Element-wise modulo of tuples:\", test_tup1)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs element wise modulo operation.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length!\")\n        return\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple lengths do not match!\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The input tuples must have the same length.\"\n    \n    # perform element wise modulo\n    modulo_tup = []\n    for i in range(len(test_tup1)):\n        modulo_tup.append(test_tup1[i] % test_tup2[i])\n    \n    # return the modulo tuple\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length\")\n        return None\n\n    # Perform element-wise modulo\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables to store the minimum number of jumps and current position\n    min_jumps = steps\n    pos = 0\n\n    # Iterate until the position is not greater than or equal to the length of the steps list\n    while pos < len(steps):\n        # If the current position is greater than or equal to the length of the steps list, break out of the loop\n        if pos >= len(steps):\n            break\n\n        # Check if the current position is at the target position (d, 0)\n        if steps[pos] == (d, 0):\n            # If the position is at the target position, return the minimum number of jumps required\n            return min_jumps\n\n        # Calculate the next position\n        next_pos = pos + steps[pos][0]\n\n        # Check if the next position is within the length of the steps list\n        if next_pos < len(steps):\n            # If the next position is within the length of the steps list, update the minimum number of jumps required if the next position is less than the current position\n            if steps[next_pos][0] < steps[pos][0]:\n                min_jumps = min(min_jumps, next_pos - pos)\n\n        # Move the position to the next position\n        pos = next_pos\n\n    # If the position is not at the target position, return the minimum number of jumps required\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Parameters:\n    steps (int): The number of steps needed to reach the target.\n    d (int): The distance between the start point and the target point.\n\n    Returns:\n    int: The minimum number of jumps required to reach the target.\n\n    Example:\n    steps = 5, d = 3\n    Output: 3\n\n    steps = 6, d = 4\n    Output: 3\n    \"\"\"\n\n    # Initialize variables\n    min_jumps = 0\n    current_pos = 0\n    current_jumps = 0\n\n    # Iterate through the given number of steps\n    for _ in range(steps):\n        # Check if the current position is at the target point\n        if current_pos == 0:\n            # If the current position is at the target point, add the minimum number of jumps to the total number of jumps\n            min_jumps += current_jumps + 1\n            break\n\n        # If the current position is not at the target point, check if the current position is within the range of the target point\n        if current_pos + d >= 0:\n            # If the current position is within the range of the target point, add the current number of jumps to the total number of jumps\n            min_jumps += current_jumps\n            # Update the current position and the current number of jumps\n            current_pos += d\n            current_jumps = 0\n        else:\n            # If the current position is not within the range of the target point, increment the current number of jumps\n            current_jumps += 1\n\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    # check if all steps are less than or equal to d\n    if all(step <= d for step in steps):\n        return 0\n    \n    # count number of jumps required for each step\n    jumps = []\n    step = 0\n    while step < len(steps):\n        if steps[step] <= d:\n            jumps.append(1)\n            d -= steps[step]\n        else:\n            jumps.append(2)\n            d -= steps[step]\n            d -= d - steps[step] + 1\n        step += 1\n    \n    # check if last jump is required\n    if jumps[-1] == 1:\n        jumps.append(1)\n    \n    # return minimum number of jumps required\n    return min(jumps)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    # Calculate the number of jumps required to reach (d, 0) from origin\n    jumps = steps // d\n    # If there are not enough jumps, add 1 more jump to reach (d, 0) from origin\n    if steps % d!= 0:\n        jumps += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    def binary_search(start, end):\n        mid = (start + end) // 2\n        if mid == steps:\n            return mid\n        elif steps - mid >= d:\n            return binary_search(start, mid)\n        else:\n            return binary_search(mid, end)\n\n    start = 0\n    end = steps\n    result = binary_search(start, end)\n    return result"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    i = 0\n    j = 0\n    jumps = 0\n    while j < len(steps):\n        if steps[j][0] == d:\n            return jumps\n        elif steps[j][0] > d:\n            i += 1\n            j += 1\n        else:\n            j += 1\n        jumps += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Given the number of steps needed to reach the point (d, 0) from origin,\n    calculate the minimum number of jumps required to reach that point.\n    \"\"\"\n\n    # Calculate the number of jumps needed to reach (d, 0) from origin\n    jumps = 0\n    current_x = 0\n    while current_x < d:\n        current_x += steps\n        jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    # Calculate the maximum number of jumps required for the given length and d\n    max_jumps = (steps - 1) // d\n\n    # Initialize variables to store the number of jumps required for each length\n    jumps = [0] * (max_jumps + 1)\n\n    # Initialize the initial position as 0\n    pos = 0\n\n    # Initialize the number of jumps required for the length of 0\n    jumps[0] = 0\n\n    # Fill the jumps array\n    for i in range(1, max_jumps + 1):\n        # Calculate the next position after taking the i-th jump\n        next_pos = pos + i * d\n\n        # If the next position is greater than or equal to the number of steps, we have reached the goal point\n        if next_pos >= steps:\n            break\n\n        # Otherwise, update the jumps for the length of i\n        jumps[i] = 1 + jumps[i - 1]\n\n    return jumps[-1]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize variables\n    x, y = 0, 0\n    jump_count = 0\n    step_count = 0\n    \n    # loop through the steps\n    while step_count < steps:\n        # update the position\n        x += 1\n        y += 1\n        step_count += 1\n        \n        # check for destination\n        if y == d:\n            return jump_count\n        \n        # check if next step is a jump\n        if x == d:\n            x += 1\n            jump_count += 1\n    \n    # if no destination is reached\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    jump = 0\n    steps_taken = 0\n    while steps_taken < steps:\n        if d == 0:\n            return steps_taken\n        steps_taken += 1\n        if steps_taken > 1:\n            jump += 1\n        d -= 1\n    return jump + 1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists have different lengths\")\n        return None\n    else:\n        result = []\n        for i in range(len(nums1)):\n            if nums2[i] == 0:\n                print(\"Division by zero is not allowed\")\n                return None\n            else:\n                result.append(nums1[i]/nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the length of both lists are equal\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should have the same length\")\n        return\n    \n    # create a new empty list to store the result\n    result = []\n    \n    # iterate over each element of the lists\n    for i in range(len(nums1)):\n        # check if both elements are numbers\n        if isinstance(nums1[i], (int, float)) and isinstance(nums2[i], (int, float)):\n            # divide the elements element-wise\n            result.append(nums1[i] / nums2[i])\n        else:\n            print(\"Error: Both elements should be numbers\")\n            return\n    \n    # return the result\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 / num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and divides the elements of the first list by the corresponding elements of the second list element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"The lists must have the same length.\"\n\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            return \"Cannot divide by zero.\"\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length!\")\n        return\n    \n    # Divide each element of the lists\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort(reverse=True)\n    new_str = \"\"\n    for num in nums:\n        new_str += num\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty string to store the numbers\n    num_str = ''\n\n    # Loop through each character in the original string\n    for char in test_str:\n        # Check if the character is a number\n        if char.isdigit():\n            # Append the number to the number string\n            num_str += char\n\n    # Reverse the number string\n    num_str = num_str[::-1]\n\n    # Loop through each character in the original string\n    for char in test_str:\n        # Check if the character is a number\n        if char.isdigit():\n            # Replace the original number with the number string\n            test_str = test_str.replace(char, num_str.pop(0))\n\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Create a list to store the numbers in the string\n    num_list = []\n\n    # Loop through each character in the string\n    for char in test_str:\n\n        # If the character is a number, append it to the list\n        if char.isdigit():\n            num_list.append(char)\n\n    # Join the list of numbers into a string and return it\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    return ''.join(nums) + test_str.replace(nums[0], '')"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Use a loop to iterate through each character in the string\n    for i in range(len(test_str)):\n        # Check if the character is a number\n        if test_str[i].isdigit():\n            # If it is, move it to the end of the string by replacing it with an empty string\n            test_str = test_str[:i] + '' + test_str[i:]\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    num_list = []\n    new_str = ''\n    \n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, add it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            # otherwise, add the character to the new_str\n            new_str += char\n    \n    # loop through each number in the num_list and add it to the end of the new_str\n    for num in num_list:\n        new_str += num\n    \n    # return the new_str with all the numbers at the end\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    num_count = 0\n    num_start = -1\n    num_end = -1\n\n    # iterate through the string\n    for i, char in enumerate(test_str):\n        if char.isdigit():\n            num_count += 1\n            num_start = i\n        else:\n            if num_count > 0:\n                test_str = test_str[:num_start] + test_str[num_start:num_start+num_count] + test_str[num_start+num_count:]\n                num_count = 0\n                num_start = -1\n\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty list to store the numbers\n    num_list = []\n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the character is a number\n        if char.isdigit():\n            # Append the number to the num_list\n            num_list.append(char)\n        # If the character is not a number, append it to the end of the string\n        else:\n            test_str += char\n    # Reverse the order of the numbers in the num_list\n    num_list.reverse()\n    # Join the numbers in the num_list together and return the result\n    return ''.join(num_list)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n    dp = [1] * n  # initialize the dp array with 1\n    \n    # fill the dp array with the size of the largest subsets\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n                \n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    size = 0\n    i = 0\n    while i < len(a):\n        j = i + 1\n        while j < len(a) and a[j] % a[i]!= 0:\n            j += 1\n        size = max(size, j - i)\n        i = j\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    largest = 1\n    curr = 1\n\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            curr += 1\n        else:\n            if curr > largest:\n                largest = curr\n            curr = 1\n\n    if curr > largest:\n        largest = curr\n\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize variables\n    max_size = 0\n    current_size = 0\n    \n    # Sort the list of numbers in ascending order\n    a.sort()\n    \n    # Loop through the list of numbers\n    for i in range(len(a)):\n        # Check if the current number is divisible by the previous number\n        if a[i] % a[i-1] == 0:\n            # If it is, increment the current size\n            current_size += 1\n        else:\n            # If it's not, update the max size and set the current size to 1\n            if current_size > max_size:\n                max_size = current_size\n            current_size = 1\n    \n    # Check if the current size is larger than the max size\n    if current_size > max_size:\n        max_size = current_size\n    \n    # Return the maximum size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pairs = {}\n    max_subset = 0\n\n    # create a dictionary that maps every number in the list to its index\n    num_indices = {num: i for i, num in enumerate(a)}\n\n    # loop through the list, for each number:\n    for i, num in enumerate(a):\n        # check if there is a pair that could be included in the subset\n        j = num_indices[num]\n        if j > i and (i - j) % 2 == 0:\n            # check if the pair is already in the subset\n            pair = (a[i], a[j])\n            if pair in pairs and pairs[pair] > max_subset:\n                max_subset = pairs[pair]\n        # update the maximum subset size\n        if max_subset < len(a) - i:\n            max_subset = len(a) - i\n        # update the pairs dictionary with the new maximum subset size\n        pairs[pair] = max_subset\n\n    return max_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create a new list to store the subset\n    subset = []\n    # Initialize the maximum size of the subset\n    max_size = 0\n    # Iterate through the list\n    for i in range(len(a)):\n        # Initialize the current size of the subset\n        cur_size = 0\n        # Iterate through the remaining elements in the list\n        for j in range(i+1, len(a)):\n            # Check if the current element is divisible by the next element\n            if a[i] % a[j] == 0:\n                # Add the next element to the subset\n                subset.append(a[j])\n                # Increment the current size of the subset\n                cur_size += 1\n        # If the current size is greater than the maximum size, update the maximum size\n        if cur_size > max_size:\n            max_size = cur_size\n    # Return the maximum size of the subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    def is_divisible(a, b):\n        '''\n        Helper function to check if two numbers are divisible.\n        '''\n        return a % b == 0 and b % a == 0\n\n    max_size = 1\n    current_size = 1\n\n    for num in a:\n        if num % 2 == 0:\n            current_size += 1\n        else:\n            current_size -= 1\n\n        if is_divisible(current_size, max_size):\n            max_size = current_size\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    max_size = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                max_size = max(max_size, j-i+1)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_size = 0\n    current_size = 1\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            current_size += 1\n        else:\n            max_size = max(max_size, current_size)\n            current_size = 1\n    max_size = max(max_size, current_size)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    # Initialize two pointers to keep track of the current subsets\n    i = 0  # pointer for the current subset\n    j = 1  # pointer for the next subset\n    max_length = 1  # initialize max_length as 1\n    # Loop through the list of numbers\n    while j < len(a):\n        # Check if the next element can be added to the current subset\n        if a[j] % a[i] == 0:\n            # If it can be added, increase the length of the subset and move the pointers\n            i += 1\n            max_length = max(max_length, i)\n        else:\n            # If it cannot be added, move the pointer for the current subset to the next element\n            i = j\n        # Move the pointer for the next subset to the next element\n        j += 1\n    # Return the maximum length of the subset\n    return max_length"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # If the length of the two lists is even, the median is the average of the two middle elements\n        mid1 = n//2\n        mid2 = n//2 + n//2 - 1\n        \n        # Find the middle elements of the two input lists\n        mid1_elem = arr1[mid1]\n        mid2_elem = arr2[mid2]\n        \n        # Find the two middle elements of the two input lists\n        mid1_elem1 = arr1[mid1 - 1] if mid1 > 0 else float('-inf')\n        mid2_elem1 = arr2[mid2 - 1] if mid2 > 0 else float('-inf')\n        \n        # Find the two middle elements of the two input lists\n        mid1_elem2 = arr1[mid1 + 1] if mid1 + 1 < n else float('inf')\n        mid2_elem2 = arr2[mid2 + 1] if mid2 + 1 < n else float('inf')\n        \n        # Combine the two middle elements of the two input lists\n        mid_elem = (max(mid1_elem, mid2_elem) + min(mid1_elem1, mid2_elem1, mid1_elem2, mid2_elem2)) / 2\n        \n        # Combine the two input lists\n        combined = arr1[:mid1] + [mid_elem] + arr1[mid1+1:mid2] + arr2[mid2+1:n] + arr2[:mid2]\n        \n        # Sort the combined list\n        combined.sort()\n        \n        # Return the median\n        return combined[n//2]\n    else:\n        # If the length of the two lists is odd, the median is the middle element\n        mid = n//2\n        mid_elem = arr1[mid]\n        \n        # Combine the two input lists\n        combined = arr1[:mid] + [mid_elem] + arr1[mid+1:n] + arr2\n        \n        # Sort the combined list\n        combined.sort()\n        \n        # Return the median\n        return combined[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two arrays and sort it in O(n) time complexity\n    arr = arr1 + arr2\n    arr.sort()\n\n    # Calculate the size of the median array\n    if n % 2 == 0:\n        median_size = n // 2\n        left_median = arr[median_size - 1]\n        right_median = arr[median_size]\n        return (left_median + right_median) / 2\n    else:\n        median_size = (n + 1) // 2\n        median = arr[median_size - 1]\n        return median\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Sort the lists\n    arr1.sort()\n    arr2.sort()\n    \n    # Calculate the median\n    if n % 2 == 0:\n        # Even number of elements\n        median = (arr1[n//2-1] + arr1[n//2] + arr2[n//2-1] + arr2[n//2]) / 4\n    else:\n        # Odd number of elements\n        median = arr1[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both arrays must have the same length\")\n    else:\n        arr1.sort()\n        arr2.sort()\n        mid = n // 2\n        if n % 2 == 0:\n            return (arr1[mid-1] + arr1[mid]) / 2\n        else:\n            return arr1[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    if n % 2 == 0:\n        # Find the median of even-sized lists\n        mid = n // 2\n        median1 = get_median_helper(arr1, mid)\n        median2 = get_median_helper(arr2, mid)\n        return (median1 + median2) / 2\n\n    else:\n        # Find the median of odd-sized lists\n        mid = n // 2\n        median = get_median_helper(arr1, mid)\n        return median\n\ndef get_median_helper(arr, mid):\n    '''\n    Helper function to find the median of a sorted list.\n    '''\n    if len(arr) % 2 == 0:\n        # Find the median of even-sized lists\n        return (arr[mid] + arr[mid - 1]) / 2\n    else:\n        # Find the median of odd-sized lists\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes in two sorted lists of size n and returns the median.\n    \"\"\"\n    # Find the size of both lists\n    m = len(arr1)\n    # Check if the lists are of equal size\n    if m!= len(arr2):\n        raise ValueError(\"Both lists should have the same size.\")\n    # Concatenate the two lists\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    merged_list.sort()\n    # Find the median index\n    median_index = n // 2\n    # Check if the length of the list is odd or even\n    if n % 2 == 0:\n        # If even, return the average of the two middle elements\n        return (merged_list[median_index-1] + merged_list[median_index]) / 2\n    else:\n        # If odd, return the middle element\n        return merged_list[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted arrays into a single sorted array\n    merged_arr = arr1 + arr2\n    \n    # Get the length of the merged array\n    m = len(merged_arr)\n    \n    # Find the middle index of the merged array\n    mid = m // 2\n    \n    # If the length of the merged array is odd, the median is the middle element\n    if m % 2 == 1:\n        return merged_arr[mid]\n    \n    # If the length of the merged array is even, the median is the average of the two middle elements\n    else:\n        # Get the two middle elements of the merged array\n        mid1 = merged_arr[mid]\n        mid2 = merged_arr[mid-1]\n        \n        # Calculate the average of the two middle elements\n        median = (mid1 + mid2) / 2\n        \n        return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two sorted lists\n    combined_list = arr1 + arr2\n\n    # Sort the combined list in ascending order\n    combined_list.sort()\n\n    # Calculate the median\n    median = n // 2\n    if n % 2 == 0:\n        median = (combined_list[median-1] + combined_list[median]) / 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # concatenate the two arrays\n    merged_arr = arr1 + arr2\n    # find the length of the merged array\n    length = len(merged_arr)\n    # find the middle index of the array\n    mid = length // 2\n    # find the middle element of the merged array\n    middle_element = merged_arr[mid]\n    # sort the array\n    sorted_arr = sorted(merged_arr)\n    # find the index of the middle element in the sorted array\n    sorted_mid = length // 2\n    # return the middle element\n    return sorted_arr[sorted_mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes in two sorted arrays of size n and returns the median of the two arrays.\n    '''\n\n    # Merge the two arrays\n    arr = arr1 + arr2\n\n    # Sort the merged array\n    arr.sort()\n\n    # Find the middle element\n    mid = n // 2\n\n    # If the length of the array is odd, the median is the middle element\n    if n % 2 == 1:\n        return arr[mid]\n\n    # If the length of the array is even, the median is the average of the middle two elements\n    else:\n        return (arr[mid - 1] + arr[mid]) / 2"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n        nums (list): List of numbers to compute the n-th power for.\n        n (int): The power to compute.\n\n    Returns:\n        list: List of n-th powers of each number in the input list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Loop through the list and compute the nth power for each number\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Check if the string contains only uppercase characters\n    if all(c.isupper() for c in string):\n        return string.upper()\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) < 2:\n        print(\"List should have at least two elements to swap.\")\n    else:\n        # swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"Swapped List:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    if length > 1:\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return \"Error: List has less than two elements.\"\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # get the length of the list\n    length = len(newList)\n\n    # if the list has odd length, swap the second last and last elements\n    if length % 2!= 0:\n        newList[length - 2], newList[length - 1] = newList[length - 1], newList[length - 2]\n\n    # if the list has even length, swap the second last and second to last elements\n    elif length % 2 == 0:\n        newList[length - 4], newList[length - 2] = newList[length - 2], newList[length - 4]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        print(\"Error: List should have at least two elements.\")\n        return None"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    \n    if length <= 1:\n        return newList\n    \n    # swap the first and last elements\n    first = newList[0]\n    last = newList[length-1]\n    newList[0] = last\n    newList[length-1] = first\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # initializing the length of the list\n    length = len(newList)\n\n    # checking if the list has only one element\n    if length == 1:\n        return newList\n\n    # swapping the first and last element of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the input list is empty or not\n    if len(newList) == 0:\n        return \"The input list is empty.\"\n    # Check if the input list has only one element or not\n    elif len(newList) == 1:\n        return \"The input list has only one element.\"\n    else:\n        # Swap the first and last element in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        # Print the updated list\n        print(\"Updated list:\", newList)\n        # Return the updated list\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    if len(newList) >= 2:\n        # swap first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        return None"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (3 * r ** 2) / (4 * (1 + r ** 2))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n\n    # Calculate the semi-perimeter of the circle\n    semicircle_perimeter = 2 * math.pi * r\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (3 * r ** 2) / (4 * math.tan(math.pi / 3))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the area of the largest triangle inscribed in a semicircle with radius r\n    area = 0.5 * r ** 2\n    \n    # calculate the area of the smallest triangle inscribed in a semicircle with radius r\n    s = 2 * r ** 2\n    \n    # calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    triangle_area = area * s / (s - area)\n    \n    return triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Radius of the semicircle\n    R = 2 * r\n\n    # Perimeter of the triangle\n    p = 3 * r\n\n    # Area of the triangle\n    area = (p * (p - R) * (p - 2 * r)) / 2\n\n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # calculate the radius of the circle\n    circle_r = r / 2\n\n    # calculate the semi-perimeter of the largest triangle\n    s = 3 * r\n\n    # calculate the area of the largest triangle\n    area = 0.5 * circle_r * (s ** 2)\n\n    # return the area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula to calculate the area of a triangle given its base and height\n    def area_of_triangle(b, h):\n        return 0.5 * b * h\n    \n    # Calculate the semi-circle radius given the given radius\n    s = r - math.sqrt(r**2 - (2 * r * math.sin(math.pi/3)))\n    \n    # Find the area of the largest triangle that can be inscribed in the semicircle\n    a1 = area_of_triangle(r, math.sin(math.pi/3))\n    a2 = area_of_triangle(s, math.sin(math.pi/6))\n    a3 = area_of_triangle(s, math.sin(2 * math.pi/3))\n    \n    # Find the maximum area of any triangle\n    max_area = max(a1, a2, a3)\n    \n    # Return the area of the largest triangle\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Formula for area of a right triangle given the semi-perimeter\n    area = 0.5 * r * r\n\n    # Find the semi-perimeter of the largest triangle\n    s = math.sqrt(r**2 - area**2)\n\n    return s"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def semicircle_area(radius):\n        '''\n        Function to find the area of a semicircle with given radius.\n        '''\n        return math.pi * radius ** 2\n    \n    def triangle_vertices(radius, angle):\n        '''\n        Function to find the vertices of a triangle with given radius and angle.\n        '''\n        x = math.sin(angle) * radius\n        y = math.cos(angle) * radius\n        return (x, y)\n    \n    def largest_triangle(radius, angle):\n        '''\n        Function to find the area and vertices of the largest triangle that can be inscribed in a semicircle with a given radius and angle.\n        '''\n        area1 = triangle_area(radius)\n        area2 = triangle_area(radius - math.sin(angle))\n        area3 = triangle_area(radius - math.sin(angle + math.pi / 3))\n        area4 = triangle_area(radius - math.sin(angle + 2 * math.pi / 3))\n        max_area = max(area1, area2, area3, area4)\n        vertex1 = triangle_vertices(radius, angle)\n        vertex2 = triangle_vertices(radius - math.sin(angle), angle + math.pi / 3)\n        vertex3 = triangle_vertices(radius - math.sin(angle + math.pi / 3), angle + 2 * math.pi / 3)\n        return max_area, (vertex1, vertex2, vertex3)\n    \n    radius = float(input(\"Enter the radius of the semicircle: \"))\n    angle = float(input(\"Enter the angle (in degrees) of the triangle: \"))\n    area, vertices = largest_triangle(radius, angle)\n    print(\"The area of the largest triangle is:\", area)\n    print(\"The vertices of the largest triangle are:\")\n    for vertex in vertices:\n        print(vertex)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    return 2 * r**2 * math.sin(math.pi/3)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # formula for area of a triangle\n    a = r * (r - 1) / 2\n    # formula for area of a right triangle\n    s = (3 * r * r) / 4\n    # find the square of the smallest side\n    b = s / (a + s)\n    # calculate the height of the triangle\n    c = (3 * r * r) / (4 * b)\n    # calculate the area of the triangle\n    area = (a * b * c) ** 0.5\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if i == array[i]:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Check if array is sorted\n    if not all(array[i] <= array[i+1] for i in range(len(array)-1)):\n        return None\n    \n    # Initialize missing number to start value\n    missing_num = start\n    \n    # Iterate through array and update missing number\n    for num in array:\n        if num!= missing_num:\n            missing_num += 1\n            break\n    \n    return missing_num"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the first missing number in a sorted list of natural numbers.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + start + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if array[mid] == mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the first missing number.\n    \"\"\"\n\n    # Check if the array is sorted\n    if not all(x <= y for x, y in zip(array, array[1:])):\n        raise ValueError(\"The input array must be sorted.\")\n\n    # Find the range of missing numbers\n    if end is None:\n        end = max(array)\n\n    for i in range(start, end + 1):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if array[mid] == mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    missing_number = start\n    for num in array:\n        if missing_number!= num:\n            break\n        missing_number += 1\n    return missing_number"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the input list.\n    '''\n    new_list = []\n    for num in list:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers and returns a list of even numbers.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_numbers = []\n\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers and returns a list of even numbers.\n    '''\n\n    # Define an empty list to store even numbers\n    even_list = []\n\n    # Loop through each number in the list\n    for num in list:\n\n        # Check if the number is even\n        if num % 2 == 0:\n\n            # If it is even, add it to the even_list\n            even_list.append(num)\n\n    # Return the even_list\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele \n    res = [] \n    if x-1 >= 0: \n        res.append((x-1, y)) \n    if x+1 < 3: \n        res.append((x+1, y)) \n    if y-1 >= 0: \n        res.append((x, y-1)) \n    if y+1 < 3: \n        res.append((x, y+1)) \n    res.extend(sub) \n    return res"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \n    Parameters:\n    ele: a tuple representing a coordinate (x, y)\n    sub: an optional list to store the sub-lists of adjacent coordinates\n    \n    Returns:\n    A list of tuples representing the adjacent coordinates of the input coordinate.\n    \"\"\"\n    # Extract x and y coordinates from the tuple\n    x, y = ele\n    \n    # Define a list to store the adjacent coordinates\n    adj_coords = []\n    \n    # Define the possible directions in which we can move\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    # Loop over the possible directions and add adjacent coordinates to the list\n    for dx, dy in directions:\n        new_x, new_y = x + dx, y + dy\n        if (new_x, new_y)!= ele:\n            adj_coords.append((new_x, new_y))\n    \n    # Return the list of adjacent coordinates\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    adj = [(ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adj = []\n    if x-1 >= 0:\n        adj.append((x-1, y))\n    if x+1 < len(sub):\n        adj.append((x+1, y))\n    if y-1 >= 0:\n        adj.append((x, y-1))\n    if y+1 < len(sub[x]):\n        adj.append((x, y+1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Extract x and y coordinates from the tuple\n    x, y = ele\n    \n    # Define a list of adjacent coordinates\n    adj = []\n    \n    # Define a set of visited coordinates\n    visited = set()\n    \n    # Iterate through each direction and check if the adjacent coordinate is not already in the set of visited coordinates\n    for dx, dy in [(-1, 0), (0, -1), (1, 0), (0, 1)]:\n        nx, ny = x + dx, y + dy\n        \n        # Check if the adjacent coordinate is within the grid boundaries\n        if 0 <= nx < 10 and 0 <= ny < 10 and (nx, ny) not in visited:\n            # Add the adjacent coordinate to the list of adjacent coordinates and mark it as visited\n            adj.append((nx, ny))\n            visited.add((nx, ny))\n    \n    # Return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    i, j = ele\n    adj = []\n    if i > 0 and j > 0:\n        adj.append((i-1, j-1))\n    if i > 0:\n        adj.append((i-1, j))\n    if i > 0 and j < len(sub)-1:\n        adj.append((i-1, j+1))\n    if i < len(sub)-1:\n        adj.append((i+1, j))\n    if i < len(sub)-1 and j < len(sub[i])-1:\n        adj.append((i+1, j+1))\n    if i < len(sub)-1 and j > 0:\n        adj.append((i+1, j-1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function will extract all the adjacent coordinates of the given coordinate tuple.\n\n    Parameters:\n    ele: Tuple of coordinates (x,y)\n\n    Returns:\n    A list containing all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent_coords = []\n    if x-1>=0:\n        adjacent_coords.append((x-1,y))\n    if x+1<9:\n        adjacent_coords.append((x+1,y))\n    if y-1>=0:\n        adjacent_coords.append((x,y-1))\n    if y+1<9:\n        adjacent_coords.append((x,y+1))\n    if x-1>=0 and y-1>=0:\n        adjacent_coords.append((x-1,y-1))\n    if x+1<9 and y-1>=0:\n        adjacent_coords.append((x+1,y-1))\n    if x-1>=0 and y+1<9:\n        adjacent_coords.append((x-1,y+1))\n    if x+1<9 and y+1<9:\n        adjacent_coords.append((x+1,y+1))\n    adjacent_coords = list(set(adjacent_coords))\n    return adjacent_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x == 0 or y == 0:\n        return []\n    elif x == len(grid)-1 or y == len(grid[0])-1:\n        return []\n    elif x < len(grid)-1 and y < len(grid[0])-1:\n        sub.append((x+1,y+1))\n        sub.append((x+1,y))\n        sub.append((x,y+1))\n        return sub\n    elif x == len(grid)-1 and y < len(grid[0])-1:\n        sub.append((x,y+1))\n        return sub\n    elif x < len(grid)-1 and y == len(grid[0])-1:\n        sub.append((x+1,y))\n        return sub\n    elif x == len(grid)-1 and y == len(grid[0])-1:\n        return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # extract the x and y coordinates of the element\n    x, y = ele\n    \n    # iterate over all the rows and columns of the grid\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            # skip the diagonal elements\n            if i == j == 0:\n                continue\n            \n            # create the new coordinate tuple\n            new_x = x + i\n            new_y = y + j\n            \n            # add the new coordinate to the list of sub-elements\n            sub.append((new_x, new_y))\n    \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if type(ele) == tuple:\n        sub.append(ele)\n        for x in range(len(ele)):\n            for y in range(len(ele)):\n                if x == y: continue\n                if (x+1, y) in sub or (x-1, y) in sub or (x, y+1) in sub or (x, y-1) in sub:\n                    sub.append((x, y))\n    else:\n        for x in range(len(ele)):\n            for y in range(len(ele)):\n                if x == y: continue\n                sub.append((x, y))\n    return sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    # replace all spaces with underscores\n    text = text.replace(' ', '_')\n    # replace all underscores with spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the string to lowercase\n    text = text.lower()\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    # Replace all underscores with spaces\n    text = text.replace('_','')\n    # Return the modified string\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    This function replaces whitespaces with underscores and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    # Replace spaces with underscores\n    new_text = text.replace(\" \", \"_\")\n    # Replace underscores with spaces\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    return new_text.replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the string into words\n    words = text.split()\n\n    # Replace spaces with underscores\n    for i in range(len(words)):\n        if'' in words[i]:\n            words[i] = words[i].replace(' ', '_')\n\n    # Replace underscores with spaces\n    for i in range(len(words)):\n        if '_' in words[i]:\n            words[i] = words[i].replace('_','')\n\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # replace whitespaces with underscores\n    new_text = text.replace(\" \", \"_\")\n    # replace underscores with whitespaces\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Use two pointers to swap zeroes with non-zero elements\n    left = 0\n    right = 0\n    while right < len(num_list):\n        if num_list[right]!= 0:\n            num_list[left], num_list[right] = num_list[right], num_list[left]\n            left += 1\n        right += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # create an empty list to store the non-zero numbers\n    non_zero_list = []\n\n    # iterate over the input list\n    for num in num_list:\n        # if the number is not zero, add it to the non-zero list\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # move the non-zero numbers to the end of the input list\n    num_list[-len(non_zero_list):] = non_zero_list\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # create a new list to store the non-zero values\n    non_zero_list = []\n    # iterate over the input list\n    for num in num_list:\n        # check if the number is not zero\n        if num!= 0:\n            # add the number to the non-zero list\n            non_zero_list.append(num)\n    # add all the zeroes to the end of the non-zero list\n    non_zero_list += [0] * (len(num_list) - len(non_zero_list))\n    # return the updated list\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a copy of the original list\n    temp_list = num_list.copy()\n\n    # loop through the list\n    for i in range(len(temp_list)):\n        # check if the current element is zero\n        if temp_list[i] == 0:\n            # if it is, move it to the end of the list\n            temp_list[i], temp_list[len(temp_list)-1] = temp_list[len(temp_list)-1], temp_list[i]\n\n    # return the modified list\n    return temp_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            for j in range(len(num_list)-1, i-1, -1):\n                num_list[j+1] = num_list[j]\n            num_list[i] = 0\n            return num_list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            break\n        i += 1\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            num_list[i], num_list[i-1] = num_list[i-1], num_list[i]\n        i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n            num_list.pop()\n        else:\n            i += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Loop through the list backwards, starting from the second last element\n    for i in range(len(num_list)-2, -1, -1):\n        # If the current element is zero, swap it with the next element and the element before that\n        if num_list[i] == 0:\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = None\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n\n    if zero_index is not None:\n        for j in range(len(num_list)-1, zero_index, -1):\n            num_list[j], num_list[j-1] = num_list[j-1], num_list[j]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        for i in range(len(num_list)-1, zero_index-1, -1):\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor = arr[i] ^ arr[j]\n            sum_xor += xor\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    # initialize the sum of xor of all pairs to zero\n    xor_sum = 0\n\n    # loop through all pairs of numbers in the list\n    for i in range(n):\n        for j in range(i+1,n):\n            # calculate the xor of the pair of numbers and add it to the total sum\n            xor_sum += arr[i] ^ arr[j]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n): \n    # Create an empty dictionary to store the xor of all pairs of numbers\n    xor_dict = {} \n    # Iterate through the list of numbers\n    for i in range(n): \n        # Calculate the xor of the number and the current index\n        xor = arr[i] ^ i \n        # Check if the xor is already present in the dictionary\n        if xor in xor_dict: \n            # If it is, add the current index to the list of indices for the xor\n            xor_dict[xor].append(i) \n        else: \n            # If it is not, add the current index as a new key with a list of indices as its value\n            xor_dict[xor] = [i] \n    # Calculate the sum of all xor values in the dictionary\n    sum_xor = sum(xor_dict.values()) \n    return sum_xor "
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers arr and its size n as input.\n    It returns the sum of xor of all pairs of numbers in the list.\n    '''\n\n    # Initialize the sum variable to 0\n    xor_sum = 0\n    \n    # Iterate over all pairs of numbers in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Compute the xor of the current pair and add to the sum\n            xor_sum += arr[i] ^ arr[j]\n\n    # Return the sum of xor of all pairs of numbers in the list\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes an array and an integer n as inputs and returns the sum of xor of all pairs of numbers in the array.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_val = arr[i] ^ arr[j]\n            sum += xor_val\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize sum variable to 0\n    xor_sum = 0\n    # Traverse the list of numbers\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Calculate xor of i and j\n            xor = arr[i] ^ arr[j]\n            # Add xor to sum\n            xor_sum += xor\n    # Return the sum\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a min heap\n    heap = [h for h in iterable]\n    hq.heapify(heap)\n    # Extract elements from heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using a max-heap.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # Convert the list into a min heap\n    min_heap = []\n    for num in iterable:\n        heapq.heappush(min_heap, num)\n\n    # Extract the minimum element from the heap and insert it into a new list\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    while iterable:\n        iterable[0], iterable[-1] = iterable[-1], iterable[0]\n        hq.heappop(iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable[0])\n        hq.heappop(iterable)\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heapsort algorithm.\n    '''\n    arr = list(iterable)\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        hq.heapify(arr, n, i)\n    \n    for i in range(n-1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        hq.heapify(arr, i, 0)\n        \n    return arr"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    # Convert the iterable to a list\n    iterable = list(iterable)\n\n    # Build a max heap from the iterable\n    for i in range(len(iterable) // 2 - 1, -1, -1):\n        hq.heapify(iterable, i, len(iterable))\n\n    # Extract elements from the heap one by one and append to the result list\n    result = []\n    for _ in range(len(iterable)):\n        result.append(hq.heappop(iterable))\n\n    # Return the sorted list\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    return [heapq.heappop(heap) for _ in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # create a min heap from the given iterable\n    hq.heapify(iterable)\n\n    # extract the min element from the heap and append it to a new list\n    sorted_list = [hq.heappop(iterable)]\n\n    # repeat until the heap is empty\n    while iterable:\n        # extract the min element from the heap and append it to the sorted list\n        sorted_list.append(hq.heappop(iterable))\n\n    # return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n\n    # Convert the given list into a heap using heapify\n    heap = list(iterable)\n    for i in range(len(heap) // 2 - 1, -1, -1):\n        hq.heapify(heap, i, len(heap))\n\n    # Extract and append elements from the heap one by one\n    sorted_list = []\n    for _ in range(len(heap)):\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Check if the sale amount is greater than the actual cost\n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Calculate the profit margin\n    profit_margin = (actual_cost - sale_amount) / sale_amount\n    \n    # Check whether the profit margin is less than 0\n    if profit_margin < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost - sale_amount >= 0:\n        return False, \"No profit or no loss\"\n    else:\n        return True, \"Profit or loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # check if the profit is greater than the loss\n    if profit > loss:\n        return \"No Profit\"\n    else:\n        return \"No Loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss.\n\n    Args:\n        actual_cost (int): The actual cost of the sale.\n        sale_amount (int): The amount of the sale.\n\n    Returns:\n        bool: True if the sale has no profit and no loss, else False.\n    '''\n\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return True\n    elif sale_amount < actual_cost:\n        return False\n    else:\n        return \"The amount is equal to the actual cost\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    \"\"\"\n    This function takes two parameters, actual_cost and sale_amount, and checks whether the given amount has no profit and no loss.\n    \"\"\"\n\n    if sale_amount >= actual_cost:\n        print(\"No profit and no loss possible.\")\n    else:\n        print(\"Profit and no loss possible.\")"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v * 1.60934 # convert from km/h to m/s\n    tc = t - 273.15 # convert from celsius to kelvin\n    wc = math.log((wind_speed + 0.16) / (0.16 + tc / 298.15))\n    wc_rounded = round(wc)\n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 13.12 + 0.6215 * t - 11.37 * math.pow(t, 0.16) + 0.3965 * math.pow(t, 0.16) * math.pow(v, 0.16)\n    w = math.degrees(math.atan2(v, c))\n    if w < 0:\n        w += 360\n    wchill = round(w)\n    return wchill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer\n    given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if v <= 1.2:  # if wind speed is less than or equal to 1.2 km/h\n        w = 0.62197 * math.log(t) + 35.74  # calculate wind chill in degrees Celsius\n        w_chill = math.ceil(w)  # round to nearest integer\n    else:  # if wind speed is greater than 1.2 km/h\n        w = 0.42759 * math.log(t) + 34.15  # calculate wind chill in degrees Celsius\n        w_chill = math.ceil(w)  # round to nearest integer\n    return w_chill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    if t < 0:\n        print(\"Invalid temperature. Temperature must be non-negative.\")\n        return\n\n    # Calculate the wind chill index using the formulae for wind speed and temperature\n    w = math.sqrt(0.6219718*(math.pow(v, 1.16))/(math.pow(t, 0.16) + 273.15))\n\n    # Round the wind chill index to the next integer\n    w_chill = int(w + 0.5)\n\n    return w_chill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = v * math.sin(math.radians(t)) * 1.8 + 32\n    return math.ceil(w)\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill index using the formula\n    # W = 13.12 + 0.6215 T - 11.37 * math.log(t) + 0.3965 * v - 0.1463 * t\n    # We will round the result to the nearest integer using the `math.ceil()` function\n    W = math.ceil((13.12 + 0.6215*t - 11.37*math.log(t) + 0.3965*v - 0.1463*t))\n    return W"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Wind speed conversion factor\n    conversion_factor = 3.6\n\n    # Convert wind speed from km/h to m/s\n    wind_speed = v * conversion_factor\n\n    # Calculate the wind chill temperature\n    wind_chill_temp = math.degrees(math.atan((5.67e-8 * (t - 273.15) * (wind_speed ** 1.5)) + (35.74 + 0.6215 * (t - 273.15) + (0.4275 * t) ** 2) / (1 + (0.14 * t) ** 0.23)))\n\n    # Convert the wind chill temperature to a Celcius scale\n    wind_chill_temp = (wind_chill_temp - 273.15) * 1.8 + 32\n\n    # Round the wind chill temperature to the nearest integer\n    wind_chill_temp = int(wind_chill_temp + 0.5)\n\n    return wind_chill_temp"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert temperature to kelvin\n    T = t + 273.15\n\n    # Convert wind velocity to m/s\n    v = v * 1.609344  # convert to m/s\n\n    # Calculate the heat capacity at constant pressure\n    cp = 0.014  # kg/m/K\n\n    # Calculate the heat capacity at constant temperature\n    cv = 0.0065  # kg/m/K\n\n    # Calculate the heat capacity ratio\n    cr = cp / cv\n\n    # Calculate the specific enthalpy\n    h = 0.5 * cp * T\n\n    # Calculate the specific enthalpy at constant pressure\n    h_p = h + cp * (T - 273.15) / 2\n\n    # Calculate the specific enthalpy at constant temperature\n    h_t = h + cv * (T - 273.15) / 2\n\n    # Calculate the enthalpy difference\n    delta_h = h - h_p\n\n    # Calculate the specific volume\n    V = 0.5 * cp * T / math.pi\n\n    # Calculate the specific volume at constant pressure\n    V_p = 0.5 * cp * (T - 273.15) / 2 / math.pi\n\n    # Calculate the specific volume at constant temperature\n    V_t = 0.5 * cp * (T - 273.15) / 2 / math.pi\n\n    # Calculate the volume difference\n    delta_V = V - V_p\n\n    # Calculate the temperature difference\n    delta_T = T - T_p\n\n    # Calculate the relative humidity ratio\n    r = delta_h / delta_T\n\n    # Calculate the specific heat\n    Q = delta_h / (delta_V * (1 - r))\n\n    # Calculate the absolute temperature\n    Ta = T - 0.0065 * (Q + 273.15) * (V_t / V) ** 0.16\n\n    # Calculate the wind chill index\n    wc = round(23.42 * ((Ta + 273.15) / 2) ** 1.5 - 32.16)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wind_speed_in_mph = v * 1609.34  # Convert km/h to miles per hour\n    celsius_to_fahrenheit = 1.8 * math.pi * math.pow(math.tan(math.radians(75)), 2)  # Convert celsius to fahrenheit\n\n    # Calculate the wind chill index\n    wind_chill_in_celsius = math.sqrt((13.12 + (0.6215 * celsius_to_fahrenheit) - (11.37 * math.pow(celsius_to_fahrenheit, 2)) + (0.3965 * math.pow(celsius_to_fahrenheit, 3))) * (wind_speed_in_mph / 1609.34))\n\n    # Convert the wind chill index to an integer\n    wind_chill_index = round(wind_chill_in_celsius)\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Formula for wind chill index\n    wc = round((t - 273.15) * (68.1 + 0.14 * v - 35.75 * math.log(t) + 0.0065 * v * v) / 2.0 + 273.15)\n\n    return wc"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the names that start with a lowercase letter\n    lowercase_names = []\n    \n    # loop through each name in the sample_names list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if the name starts with a lowercase letter, append it to the lowercase_names list\n            lowercase_names.append(name)\n    \n    # sum the lengths of the names in the lowercase_names list\n    total_length = sum(len(name) for name in lowercase_names)\n    \n    # return the total length of the names in the lowercase_names list\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if not name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Filter out the names that start with a lowercase letter\n    filtered_names = [name for name in sample_names if name[0].isupper()]\n\n    # Calculate the sum of the lengths of the remaining names\n    total_length = sum([len(name) for name in filtered_names])\n\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if name[0].isupper()]\n    return sum(len(name) for name in names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_with_lowercase = [name for name in sample_names if name[0].isupper()]\n    sum_of_lengths = sum([len(name) for name in names_with_lowercase])\n    return sum_of_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    def remove_lowercase(name):\n        \"\"\"\n        Helper function to remove lowercase letters from a name.\n        \"\"\"\n        return ''.join([char for char in name if char.isupper() or char.islower()])\n    \n    sum_length = 0\n    for name in sample_names:\n        if remove_lowercase(name).startswith(remove_lowercase(name)[0]):\n            continue\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Filter the names that start with a lowercase letter\n    filtered_names = list(filter(lambda x: not x.startswith('a'), sample_names))\n\n    # Calculate the sum of the lengths of the filtered names\n    sum_length = sum(len(name) for name in filtered_names)\n\n    return sum_length\n"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)' # regular expression pattern to match parenthesis\n    items = re.sub(pattern, '', items) # use re.sub() to remove all matches of pattern from items\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define a regular expression to match any parenthesis that is not inside quotes\n    pattern = re.compile(r'\\([^)]*\\)')\n    \n    # Loop through each item in the list and apply the pattern to remove the parenthesis and what is inside them\n    for item in items:\n        # Remove the parenthesis and what is inbetween them using the pattern\n        item = pattern.sub('', item)\n        # Remove any spaces around the parenthesis\n        item = re.sub(r'\\s*\\([^)]*\\)\\s*', '', item)\n        # Replace any remaining spaces with a single space\n        item = item.replace('  ','')\n        # Add the modified item back to the list\n        items[items.index(item)] = item\n    \n    # Return the modified list of items\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Using regular expressions to find all the parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n    \n    # Splitting the string into list of words\n    words = pattern.split(items)\n    \n    # Joining the words back into a string with no parenthesis\n    result = \"\".join(words)\n    \n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Replace the parenthesis with an empty string\n    items = re.sub(r'\\(.*?\\)', '', items)\n    # Remove any extra spaces\n    items = re.sub(r'\\s+','', items)\n    # Convert the remaining string into a list of words\n    words = items.split()\n    # Remove any single-character words\n    words = [word for word in words if len(word) > 1]\n    # Join the remaining words into a string\n    return''.join(words)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Removes the parenthesis from a string and returns the remaining string.\n    \"\"\"\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n\n    # Initialize counter variable and check for valid input\n    counter = 1\n    if n <= 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n\n    # Calculate nth nonagonal number\n    nth_nonagonal = (n * (n + 1)) / 2\n\n    # Print result\n    print(f\"The {n}th nonagonal number is: {nth_nonagonal}\")\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    This function will check if the input number is a nonagonal number or not.\n    A nonagonal number is a number that can be written as the sum of two nonagonal numbers.\n    For example: 6 is a nonagonal number because 2 + 4 = 6.\n    7 is not a nonagonal number because 2 + 6 = 8.\n    '''\n\n    # First, we'll find all the nonagonal numbers up to n.\n    nonagonal_numbers = []\n    current_number = 1\n    while current_number <= n:\n        if current_number * (current_number + 1) == 2 * current_number * (current_number - 1) + current_number:\n            nonagonal_numbers.append(current_number)\n        current_number += 1\n\n    # Now, we'll find the nth nonagonal number.\n    nth_nonagonal = 0\n    for i in range(1, len(nonagonal_numbers)):\n        nth_nonagonal = nonagonal_numbers[i]\n        break\n\n    return nth_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        for i in range(2, n):\n            nonagonal = 2 * i * (i - 1)\n            yield nonagonal\n\nfor i, num in enumerate(is_nonagonal(10)):\n    print(f\"The {i+1}th nonagonal number is {num}\")"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # calculate the number of rows for the nth nonagonal number\n    num_rows = n * (n + 1) // 2\n\n    # initialize the result to 0\n    result = 0\n\n    # iterate over the rows and columns\n    for i in range(1, num_rows + 1):\n        # add the current row and column to the result\n        result += i * i\n\n    # return the result\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is a nonagonal number, False otherwise.\n    A nonagonal number is a number whose sum of its right and left neighbours is not equal to n.\n    \"\"\"\n    # check if n is an odd number\n    if n % 2!= 0:\n        return False\n    \n    # initialize variables for sum of right and left neighbours\n    right_sum = left_sum = 0\n    \n    # iterate through the first n/2 numbers and check if their sum of right and left neighbours is equal to n\n    for i in range(n//2):\n        right_sum += i\n        left_sum += n-i-1\n        \n        # if sum of right and left neighbours is equal to n, return True\n        if right_sum == n and left_sum == n:\n            return True\n    \n    # if the loop completes without finding a nonagonal number, return False\n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return 'Invalid input!'\n    else:\n        return (n*n) - (2*n - 1)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # initialize the first number to 1\n    num = 1\n\n    # loop through each row of the pyramid\n    for i in range(n):\n        # loop through each column of the pyramid\n        for j in range(i+1):\n            # calculate the nonagonal number\n            num += 1\n        # move to the next row of the pyramid\n        num += 1\n\n    return num\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    else:\n        return (n * (n + 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer `n` as input and returns `True` if the number is a nonagonal number, otherwise it returns `False`.\n    A nonagonal number is a positive integer whose sum of its proper divisors is equal to its sum of its proper divisors plus 1.\n    '''\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n\n    return sum(divisors) == sum(divisors) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 2 * (n - 1) + 1"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[z]\\w*\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]+[zZ][a-zA-Z]+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define the regular expression pattern to match 'z' at the middle of a word\n    pattern = r'(?<=[^\\w\\s])(z)(?=[^\\w\\s])'\n    \n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # If the pattern is found, return True\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    words = re.findall(pattern, text)\n    for word in words:\n        if len(word) >= 4 and len(word) <= 10:\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # remove punctuation and convert to lowercase\n    text = re.sub(r'[^\\w\\s]', '', text.lower())\n\n    # split the text into words\n    words = text.split()\n\n    # loop through the words\n    for i in range(len(words)):\n        # check if the current word contains 'z' except at the start and end\n        if (i == 0 or i == len(words) - 1) and 'z' in words[i]:\n            return True\n\n    # if no 'z' is found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![\\w\\s])z(?![\\w\\s])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[zZ]\\w+\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Remove all non-alphanumeric characters and convert to lowercase\n    text = re.sub(r'[^a-zA-Z0-9]', '', text).lower()\n    # Split the text into words\n    words = text.split()\n    # Check if each word contains 'z' except at the start and end of the word\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            continue\n        else:\n            return False\n    # If all words contain 'z' except at the start and end of the word, return True\n    return True"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*[z]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)(.*)z\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(2)\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from start to k-1\n    input[:] = input[::-1][:k-1][::-1]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Splitting the array into two parts\n    left = input[:k-1]\n    right = input[k-1:]\n\n    # Reversing the left part\n    left = left[::-1]\n\n    # Merging the two parts\n    output = left + right\n\n    return output"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 1 or k > len(input):\n        return \"Invalid position\"\n    else:\n        start = 0\n        end = k - 1\n        temp = []\n        while start < end:\n            temp.append(input[start])\n            input[start] = input[end]\n            input[end] = temp[0]\n            start += 1\n            end -= 1\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    left = 0\n    right = n - 1\n    temp = 0\n\n    while left < right:\n        if left == k - 1:\n            break\n        temp = input[left]\n        input[left] = input[right]\n        input[right] = temp\n        left += 1\n        right -= 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # initialize two pointers, one for the start of the array and one for the end of the array\n    start = 0\n    end = len(input) - 1\n    \n    # while the start pointer is less than the end pointer and the number of reverses so far is less than k\n    while start < end and k > 0:\n        # if the element at the start pointer is greater than or equal to the element at the end pointer, swap them\n        if input[start] >= input[end]:\n            input[start], input[end] = input[end], input[start]\n            k -= 1\n        # move the start pointer one step to the right and the end pointer one step to the left\n        start += 1\n        end -= 1\n        \n    # return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        return \"Error: K is greater than the length of the array.\"\n    \n    n = len(input)\n    reverse = []\n    \n    for i in range(k-1, -1, -1):\n        reverse.append(input[i])\n    \n    return reverse"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # Check if k is within range of input array\n    if k < 0 or k >= len(input):\n        return \"Invalid input\"\n    \n    # Reverse the array up to position k\n    for i in range(k, len(input)):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n        \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k-1, -1, -1):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k-1, len(input)-1):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input) \n    reverse = [0]*n \n\n    # Reverse the first k elements of the array \n    for i in range(k): \n        reverse[i] = input[n-k+i] \n        input[n-k+i] = input[i]\n\n    # Reverse the remaining elements of the array \n    for i in range(k, n): \n        reverse[i] = input[i-k] \n        input[i-k] = input[i]\n\n    # Print the reversed array \n    print(\"Reversed array: \", reverse) "
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the tuple to a dictionary\n    test_dict_obj = dict(test_dict)\n    # Add the dictionary to the tuple\n    new_tup = (test_tup, test_dict_obj)\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_dict = {**test_dict}\n    new_tup = (test_tup, new_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Convert the dictionary to a tuple\n    tuple_dict = tuple(test_dict.items())\n    # Combine the tuple and the dictionary into a new tuple\n    result_tup = tuple(test_tup + tuple_dict)\n    return result_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list of tuples\n    test_list = list(test_dict.items())\n    # Concatenate the tuple and the list\n    output_list = test_tup + test_list\n    # Convert the list back to a tuple\n    output_tup = tuple(output_list)\n    return output_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_dict = dict(test_dict)\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Add the dictionary to the tuple\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Add the dictionary to the tuple\n    result_tup = (test_tup, test_dict)\n    return result_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # convert dictionary to list of tuples\n    test_dict_list = list(test_dict.items())\n    # convert the list of tuples to tuple\n    test_dict_tuple = tuple(test_dict_list)\n    # concatenate the tuple and the dictionary\n    test_tuple = test_tup + test_dict_tuple\n    # return the concatenated tuple\n    return test_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return (test_tup, test_dict)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    paths = [[0]*N for _ in range(N)]\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                paths[i][j] = cost[i][j]\n                max_avg = max(max_avg, paths[i][j])\n            else:\n                paths[i][j] = cost[i][j] + paths[i-1][j] + paths[i][j-1] - paths[i-1][j-1]\n                max_avg = max(max_avg, paths[i][j])\n    return max_avg/N**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * (N+1) for _ in range(N+1)]\n    max_avg = 0\n\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i-1][j-1]\n            max_avg = max(max_avg, dp[i][j])\n\n    return max_avg/N**2\n\nWe first initialize the dp table and max_avg variable with zeros. Then, for each cell (i, j), we compute the maximum average of a path that starts from the cell (i, j) and ends on the cell (N, N) using the recurrence relation. We also update the maximum average if it is greater than the current value of max_avg.\n\nFinally, we return the maximum average divided by N**2, since each cell of the matrix is visited only once to compute the average."
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n\n    # base cases\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        dp[i][0] = cost[i][0]\n\n    # DP algorithm\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find the maximum path\n    max_path = [None] * N\n    max_path[N-1][N-1] = 0\n    i, j = N-1, N-1\n    while i > 0 and j > 0:\n        max_path[i-1][j-1] = dp[i-1][j-1]\n        if max_path[i-1][j-1] == dp[i-1][j-1]:\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Compute the maximum average\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                max_avg = dp[i][j]\n            else:\n                max_avg = max(max_avg, dp[i][j] - max_path[i-1][j-1])\n\n    return max_avg / (N**2 - N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def dfs(i, j, path_cost, paths, total_cost):\n        if i == N-1 and j == N-1:\n            paths.append(path_cost)\n            return (max(total_cost/len(path_cost), total_cost), paths)\n\n        if i < N-1 and j < N-1:\n            if cost[i][j] <= min(cost[i+1][j], cost[i][j+1]):\n                total_cost += cost[i][j]\n                path_cost.append((i, j))\n                if paths[i+1][j]!= (i, j):\n                    paths[i+1][j] = (i, j)\n                dfs(i+1, j, path_cost, paths, total_cost)\n                total_cost -= cost[i][j]\n                path_cost.pop()\n\n        if i > 0 and j < N-1:\n            if cost[i][j] <= min(cost[i-1][j], cost[i][j+1]):\n                total_cost += cost[i][j]\n                path_cost.append((i, j))\n                if paths[i-1][j]!= (i, j):\n                    paths[i-1][j] = (i, j)\n                dfs(i-1, j, path_cost, paths, total_cost)\n                total_cost -= cost[i][j]\n                path_cost.pop()\n\n        if i < N-1 and j > 0:\n            if cost[i][j] <= min(cost[i+1][j], cost[i][j-1]):\n                total_cost += cost[i][j]\n                path_cost.append((i, j))\n                if paths[i+1][j]!= (i, j):\n                    paths[i+1][j] = (i, j)\n                dfs(i+1, j, path_cost, paths, total_cost)\n                total_cost -= cost[i][j]\n                path_cost.pop()\n\n        if i > 0 and j > 0:\n            if cost[i][j] <= min(cost[i-1][j], cost[i][j-1]):\n                total_cost += cost[i][j]\n                path_cost.append((i, j))\n                if paths[i-1][j]!= (i, j):\n                    paths[i-1][j] = (i, j)\n                dfs(i-1, j, path_cost, paths, total_cost)\n                total_cost -= cost[i][j]\n                path_cost.pop()\n\n    N = len(cost)\n    paths = [[None]*N for _ in range(N)]\n    paths[0][0] = (0, 0)\n    total_cost = cost[0][0]\n    max_avg = 0\n    for i in range(N):\n        paths[i][i] = (i, i)\n        total_cost += cost[i][i]\n        max_avg = max(max_avg, total_cost/len(paths[i][i]))\n    for _ in range(N-1):\n        for i in range(N-1):\n            paths[i][N-1], paths[N-1][i] = paths[N-1][i], paths[i][N-1]\n            max_avg = max(max_avg, dfs(i, N-1, [], paths, 0)[0])\n            paths[i][N-1], paths[N-1][i] = paths[N-1][i], paths[i][N-1]\n            max_avg = max(max_avg, dfs(N-1, i, [], paths, 0)[0])\n            paths[i][N-1], paths[N-1][i] = paths[N-1][i], paths[i][N-1]\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    N = len(cost)\n    max_avg = 0\n    max_path = None\n\n    # Iterate over all paths\n    for i in range(N):\n        for j in range(N):\n            # Check if this is the last cell\n            if i == N-1 and j == N-1:\n                max_avg = max(max_avg, cost[i][j])\n                continue\n\n            # Compute the possible paths\n            paths = [0, 0]  # 0: right, 1: down\n            paths[0] = paths[1] = float('inf')\n            paths[0] = max(paths[0], cost[i][j] + max_avg)  # Add the current cost to the maximum average\n\n            if i > 0:\n                paths[0] = max(paths[0], paths[1] + cost[i][j])  # Add the cost to the previous path\n\n            if j > 0:\n                paths[1] = max(paths[1], paths[0] + cost[i][j])  # Add the cost to the previous path\n\n            # Update the maximum average\n            max_avg = max(paths[0], paths[1])\n            max_path = paths\n\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[False] * N for _ in range(N)]\n    visited[0][0] = True\n    total_cost = 0\n    max_avg = float('-inf')\n\n    def dfs(i, j, path):\n        nonlocal total_cost, max_avg\n        visited[i][j] = True\n        total_cost += cost[i][j]\n\n        if i == N-1 and j == N-1:\n            avg = total_cost / (i+1)\n            max_avg = max(avg, max_avg)\n            return\n\n        if i < N-1:\n            dfs(i+1, j, path)\n        if j < N-1:\n            dfs(i, j+1, path)\n\n        total_cost -= cost[i][j]\n        visited[i][j] = False\n\n    dfs(0, 0, [])\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_sum = float('-inf')\n    \n    for i in range(N):\n        # Check the path from top-left to i-th row\n        if i == 0:\n            path = [0]\n        else:\n            path = [path[-1] + 1]\n        j = 0\n        while j < N:\n            if j == 0:\n                path.append(i + 1)\n            else:\n                path.append(path[-1] + 1)\n            if j == N-1:\n                break\n            j += 1\n        \n        # Compute the sum of the path's costs\n        path_cost = 0\n        for k in range(1, len(path)):\n            path_cost += cost[path[k-1]][path[k]]\n        \n        # Update the maximum sum if necessary\n        max_sum = max(max_sum, path_cost)\n    \n    return max_sum"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    def dfs(r, c, path_sum, max_sum):\n        if r == len(cost) - 1 and c == len(cost[0]) - 1:\n            if path_sum > max_sum:\n                max_sum = path_sum\n            return path_sum, max_sum\n\n        path_sum += cost[r][c]\n\n        if c < len(cost[0]) - 1:\n            path_sum, max_sum = dfs(r, c + 1, path_sum, max_sum)\n        if r < len(cost) - 1:\n            path_sum, max_sum = dfs(r + 1, c, path_sum, max_sum)\n\n        path_sum -= cost[r][c]\n        return path_sum, max_sum\n\n    path_sum, max_sum = dfs(0, 0, 0, float('-inf'))\n    return max_sum / (len(cost) * len(cost[0]))"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def get_next_cell(i, j):\n        if i == N-1 and j == N-1:\n            return -1\n        if i == N-1:\n            return j\n        if j == N-1:\n            return i\n        if cost[i+1][j] < cost[i][j+1]:\n            return i+1, j\n        else:\n            return i, j+1\n    \n    N = len(cost)\n    max_avg = 0\n    max_path = []\n    \n    for i in range(N):\n        for j in range(N):\n            if cost[i][j] == 0:\n                continue\n            path = [(i, j)]\n            visited = {(i, j)}\n            while True:\n                next_i, next_j = get_next_cell(i, j)\n                if next_i == -1:\n                    break\n                if (next_i, next_j) in visited:\n                    break\n                visited.add((next_i, next_j))\n                path.append((next_i, next_j))\n                i = next_i\n                j = next_j\n            total_cost = sum([cost[i][j] for i, j in path])\n            num_cells = len(path)\n            avg_cost = total_cost/num_cells\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n                max_path = path\n    \n    return max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # We will create a 2D array to store the possible paths\n    dp = [[float('-inf')] * N for _ in range(N)]\n    \n    # Initialize the first row and first column\n    for i in range(N):\n        dp[0][i] = float('-inf')\n        dp[i][0] = float('-inf')\n    dp[0][0] = 0\n    \n    # Fill the rest of the array using dynamic programming\n    for i in range(1, N):\n        for j in range(1, N):\n            # We can either move right or down\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i-1][j]\n    \n    # Find the maximum average path\n    max_avg = dp[N-1][N-1]\n    max_path = [(N-1, N-1)]\n    while max_avg >= 0:\n        i, j = max_path[-1]\n        if i == 0 and j == 0:\n            break\n        if i > 0:\n            max_path.append((i-1, j))\n            max_avg -= dp[i-1][j]\n        if j > 0:\n            max_path.append((i, j-1))\n            max_avg -= dp[i][j-1]\n    \n    # Compute the average of the maximum path\n    max_cost = 0\n    for i, j in max_path:\n        max_cost += cost[i][j]\n    max_cost /= len(max_path)\n    \n    return max_cost"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for student, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k: v for k, v in students.items() if v[0] > h and v[1] > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            result[name] = info\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[i]) for j in range(i+1, len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[i]) for j in range(len(nums1))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], num) for num in nums2):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += int(base[-i-1])\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    power = power % len(str(base))\n    for _ in range(power):\n        base_str = str(base)\n        for digit in base_str:\n            result += int(digit)\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_of_digits += digit\n        power -= 1\n        base //= 10\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    base_digits = [int(d) for d in str(base)]\n    base_sum = sum(base_digits) ** power\n    return base_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit ** power\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    digits = list(str(base))\n    total = 0\n    for digit in digits:\n        total += int(digit) ** power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        \n        # Calculate the sum of the digits raised to the power\n        digit_sum = digit_int ** power\n        \n        # Add the sum to the total sum\n        total_sum += digit_sum\n        \n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum variable to 0\n    sum_digits = 0\n\n    # Loop through all digits of the base\n    for digit in str(base):\n        # Add the digit to the sum variable\n        sum_digits += int(digit)\n\n    # Calculate the sum to the specified power\n    result = sum_digits ** power\n\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expression to match any text between quotation marks\n    pattern = r'\"(.+?)\"'\n    # Use re.findall() method to extract all matching substrings\n    matches = re.findall(pattern, text1)\n    # Print all matching substrings\n    print(\"Matching substrings:\", matches)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    result = re.findall(pattern, text1)\n    return result\n\ntext = \"The quick brown fox jumps over the lazy dog. \"\nresult = extract_quotation(text)\nprint(result)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"' # extract anything between the double quotes\n    result = re.findall(pattern, text1) # find all the matches using the pattern\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # define the regular expression pattern to match the quotation marks\n    pattern = r'\\\"(.+?)(?=\\\"|\\s|\\$)'\n    # use re.findall() to find all occurrences of the pattern in the text1 string\n    matches = re.findall(pattern, text1)\n    # if there are matches, return the values between the quotation marks\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    # Find all occurrences of quotation marks \" \" in the given string\n    matches = re.findall(r'\"([^\"]*)\"', text1)\n    # Iterate through each match and extract the values between the quotation marks\n    extracted_values = []\n    for match in matches:\n        extracted_values.append(match.strip('\"'))\n    # Return the extracted values\n    return extracted_values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")[^\"]*?(?=\")'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i]*test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2], test_tup[2] * test_tup[3], test_tup[3] * test_tup[4], test_tup[4] * test_tup[5], test_tup[5] * test_tup[6], test_tup[6] * test_tup[7], test_tup[7] * test_tup[8], test_tup[8] * test_tup[9])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    result_tup = []\n    for i in range(len(test_tup)-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # initializing the new tuple with the same length as test_tup\n    new_tup = tuple([0] * len(test_tup))\n    \n    # iterating through the tuple and multiplying each pair of elements\n    for i in range(len(test_tup)-1):\n        new_tup[i] = test_tup[i] * test_tup[i+1]\n    \n    # returning the new tuple\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize an empty list to store the result\n    result_list = []\n    # Loop through the input tuple\n    for i in range(len(test_tup)-1):\n        # Multiply the current element and the next element and append the result to the result list\n        result_list.append(test_tup[i]*test_tup[i+1])\n    # Return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = tuple([t_i * t_i+1 for i in range(N)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Input lists must have the same length.\")\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if key == nums[0]:\n            yield from group\n        else:\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the numbers by their previous value\n    grouped = groupby(enumerate(nums), lambda x: x[0] - x[1])\n\n    # filter out the groups where the second number is equal to the first number\n    return [num for _, group in grouped if not any(i == j for i, j in zip(group, group[1:]))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Remove consecutive duplicates\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i+1]:\n            nums.pop(i)\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if len(list(group)) > 1:\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped = groupby(sorted(nums))\n    return [k for k, g in grouped if not g]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [num for group in groupby(nums) if not group[1] and not next(group, None)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) < 2:\n        return nums\n\n    def key(num):\n        return num // 1000\n\n    nums_sorted = sorted(nums, key=key)\n    i = 0\n    result = []\n\n    while i < len(nums_sorted):\n        prev_num = nums_sorted[i]\n        prev_key = key(prev_num)\n        j = i + 1\n        while j < len(nums_sorted) and key(nums_sorted[j]) == prev_key:\n            j += 1\n        if j > i + 1:\n            result.extend(nums_sorted[i:j])\n        i = j\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group adjacent duplicates by their keys\n    grouped = groupby(enumerate(nums), lambda x: x[0] - x[1])\n    # remove duplicates from each group using set\n    return set(x[1] for x in grouped if len(list(x[1])) == 1)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Create a dictionary to store the previous element and its index\n    prev_dict = {}\n    # Iterate through the list and add the current element and its index to the dictionary\n    for index, num in enumerate(nums):\n        prev_dict[num] = index\n    # Create a new list to store the unique elements\n    unique_list = []\n    # Iterate through the dictionary and add the unique elements to the new list\n    for key, group in groupby(sorted(prev_dict.keys())):\n        unique_list.append(list(group))\n    # Flatten the new list into a single list\n    unique_list = [num for sublist in unique_list for num in sublist]\n    # Iterate through the original list and remove the unique elements from the list\n    for index, num in enumerate(nums):\n        if num not in unique_list:\n            nums.pop(index)\n    return nums"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r ** 2 # using the formula for the area of a circle\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cone given its radius r and height h.\n    \"\"\"\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Calculate the lateral surface area using the formula: lateral surface area = 1/2 * pi * r^2 * h\n    lateral_surface_area = 0.5 * math.pi * r**2 * h\n\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function takes the radius r and the height h as input and returns the lateral surface area of a cone.\n    '''\n    lateral_area = math.pi * r**2 * h\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r**2*h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Formula for lateral surface area of a cone\n    lateral_surface_area = 2 * math.pi * r * h\n\n    return lateral_surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cone.\n\n    Args:\n        r (float): The radius of the cone.\n        h (float): The height of the cone.\n\n    Returns:\n        float: The lateral surface area of the cone.\n    \"\"\"\n    area = math.pi * r ** 2  # formula for the lateral surface area of a cone\n    area_lateral = area * math.sin(math.pi / 2)  # lateral surface area of the cone\n    return area_lateral"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Formula for lateral surface area of a cone\n    lateral_surface_area = math.pi * r**2 * h / 3\n\n    return lateral_surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'([,\\. ])'\n    replacement = ':'\n    return re.sub(pattern, replacement, text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+|\\\\.|,|\\.+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match any occurrence of space, comma, or dot\n    pattern = re.compile(r'[\\s,\\.]+')\n\n    # Replace all occurrences of the pattern with a colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # define a regular expression pattern to match any of the special characters\n    pattern = re.compile(r'[\\s,\\.]')\n\n    # replace all occurrences of the special characters with a colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[,\\. ]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = r'[,.]'\n    pattern = r'({})'.format(special_chars)\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match all occurrences of spaces, commas, or dots\n    pattern = re.compile(r'[\\s.,]+')\n    # Use the pattern to replace all occurrences of spaces, commas, or dots with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,\\. ]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = re.compile(r'[,\\. ]')\n    result = special_chars.sub(':', text)\n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Using regular expression to replace special characters with colon\n    text = re.sub(r'[\\s,\\.]', ':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the left and right pointers\n    left = 0\n    right = len(A) - 1\n\n    # Perform binary search on the array\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            # We found the first occurrence of x in the array\n            return mid\n        elif A[mid] < x:\n            # The element in the middle is greater than x, so we must search the right half of the array\n            left = mid + 1\n        else:\n            # The element in the middle is less than x, so we must search the left half of the array\n            right = mid - 1\n\n    # We couldn't find x in the array\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the index variable to -1\n    index = -1\n    # Initialize a counter variable to 0\n    count = 0\n    \n    # Loop through the array and check if the current element is equal to the given number\n    for i in range(len(A)):\n        if A[i] == x:\n            # If the current element is equal to the given number, increment the counter variable\n            count += 1\n            # If the counter variable is equal to the index variable, return the current index\n            if count == index + 1:\n                return i\n    # If no occurrence of the given number is found in the array, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0  # start at the beginning of the array\n    while i < len(A) and A[i] < x:\n        i += 1  # move to the next element if the current element is less than the target\n    if i == len(A) or A[i]!= x:  # if we didn't find the target or if the current element is not the target\n        return -1\n    else:\n        while i > 0 and A[i-1] == x:  # search backwards to find the first occurrence\n            i -= 1\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1  # return -1 if not found"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i if i < len(A) and A[i] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            while mid > 0 and A[mid-1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # binary search\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1  # If element is not present in array"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # binary search for the first occurrence of x in A\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    subarray_products = [1] * n\n    max_product = 1\n\n    for i in range(1, n):\n        subarray_products[i] = subarray_products[i-1] * arr[i]\n        max_product = max(max_product, subarray_products[i])\n\n    return sum([max_product] + subarray_products)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    def product_of_sublist(arr, start, end):\n        res = 1\n        for i in range(start, end):\n            res *= arr[i]\n        return res\n\n    n = len(arr)\n    sublists = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            sublists[i][j - 1] = product_of_sublist(arr, i, j)\n\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            res += sublists[i][j - 1] * sublists[j - 1][n - 1]\n\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    m = len(arr[0])\n\n    dp = [[0] * (m+1) for _ in range(n+1)]\n\n    for i in range(n):\n        for j in range(m):\n            if j == 0:\n                dp[i+1][j+1] = arr[i]\n            elif i == 1:\n                dp[i+1][j+1] = dp[i][j-1] * arr[0]\n            else:\n                dp[i+1][j+1] = dp[i-1][j-1] + dp[i-1][j]\n\n    return dp[n][m]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * n  # initialize the dp array with 0's\n    \n    for i in range(1, n):\n        dp[i] = dp[i-1] + arr[i-1] * arr[i]  # update the dp array\n    \n    # now calculate the sum of products of all sublists\n    product_sum = 0\n    for i in range(n):\n        product_sum += dp[i]\n    \n    return product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [1]*n\n    \n    # Initialize the last element in the dp array as 1\n    dp[n-1] = 1\n    \n    # Calculate the products of all possible sublists\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            dp[i] *= arr[j]\n            \n    # Initialize the sum of products to 0\n    sum_prod = 0\n    \n    # Calculate the sum of products of all sublists\n    for i in range(n):\n        sum_prod += dp[i]\n        \n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    prefix_sum[0] = arr[0]\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    result = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            prod = 1\n            for k in range(i, j + 1):\n                prod *= arr[k - 1]\n            result += prefix_sum[j] * prod\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n\n    def helper(start, end):\n        if start == end:\n            return 0\n        elif start + 1 == end:\n            return arr[start] * arr[end]\n        else:\n            return arr[start] * arr[end] + helper(start + 1, end - 1)\n\n    total_sum = 0\n    for i in range(n):\n        total_sum += helper(i, n - 1)\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum_prod = 0\n    product = 1\n\n    for i in range(n):\n        product *= arr[i]\n        sum_prod += product\n\n        for j in range(i + 1, n):\n            product *= arr[j]\n            sum_prod -= arr[i] * product\n\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Create a 2D list to store sum of products of sublists\n    sub_array_prod = [[0]*(n-i+1) for i in range(n)]\n\n    # Initialize the first element of the first row\n    for i in range(n):\n        sub_array_prod[0][i] = arr[i]\n\n    # Fill the rest of the rows\n    for i in range(1, n):\n        for j in range(n-i):\n            sub_array_prod[i][j] = arr[j]*sub_array_prod[i-1][j+1] + arr[j+i]*sub_array_prod[i-1][j]\n\n    # Initialize the first element of the last row\n    for i in range(n-1, -1, -1):\n        sub_array_prod[n-1][i] = sub_array_prod[n-2][i]*arr[i]\n\n    # Initialize the sum of products of all sublists\n    total = 0\n    for i in range(n):\n        for j in range(n-i):\n            total += sub_array_prod[i][j]\n\n    return total"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0]*(2*n)\n\n    for i in range(1, 2*n):\n        dp[i] = dp[i-1] + arr[i-1]*arr[i]\n\n    ans = dp[2*n-1]\n\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if k+i-j < n:\n                    continue\n                prod = dp[j] * dp[k]\n                ans -= dp[j] * dp[k] * dp[n-1]\n                ans += prod\n\n    return ans"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    \"\"\"\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length() - 1))\n    \n    middle_bits = n ^ first_bit ^ last_bit\n    \n    return middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # get the length of the binary representation of n\n    n_bit_len = len(bin(n)[2:])\n    \n    # initialize the new number\n    new_n = 0\n    \n    # loop through the bits from left to right\n    for i in range(n_bit_len):\n        \n        # if the current bit is not the first or last bit, toggle it\n        if i not in [0, n_bit_len - 1]:\n            new_n += (n & 1) << i\n        \n        # shift the bits to the right\n        n >>= 1\n        \n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Set the first bit to 1\n    n = n | (1 << 0)\n    # Set the last bit to 1\n    n = n | (1 << 31)\n    # XOR all the middle bits\n    n = n ^ (n >> 1)\n    # Return the new number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # XOR the binary representation of n with a bitmask of 10000000111111110000000011111111\n    # This will set all the bits except the first and the last bit to 1 and all other bits to 0.\n    n = n ^ 0x5555555555555555\n    # Reverse the binary representation of n using the bitwise NOT operator ~\n    # This will set all the bits to 1 except the first and the last ones.\n    n = ~n & 0x3333333333333333\n    # Reverse the binary representation of n using the bitwise NOT operator ~\n    # This will set all the bits to 1 except the second and the third ones.\n    n = ~n & 0x0F0F0F0F0F0F0F0F\n    # Reverse the binary representation of n using the bitwise NOT operator ~\n    # This will set all the bits to 1 except the fourth and the fifth ones.\n    n = ~n & 0x00FF00FF00FF00FF\n    # Reverse the binary representation of n using the bitwise NOT operator ~\n    # This will set all the bits to 1 except the sixth and the seventh ones.\n    n = ~n & 0x0000FFFF0000FFFF\n    # Reverse the binary representation of n using the bitwise NOT operator ~\n    # This will set all the bits to 1 except the eighth and the ninth ones.\n    n = ~n & 0x00000000FFFFFFFF\n    # Reverse the binary representation of n using the bitwise NOT operator ~\n    # This will set all the bits to 1 except the tenth and the eleventh ones.\n    n = ~n & 0x00000000000000FF\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize the result\n    result = 0\n    # iterate through the bits of the number\n    for i in range(32):\n        # set the bit to 1 if the position is 0 or 31\n        if i == 0 or i == 31:\n            result |= 1 << i\n        # otherwise, toggle the bit\n        else:\n            result ^= 1 << i\n    # return the result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Split the number into two parts: the first part excluding the last bit, and the second part including the last bit\n    first_part = n & ~(1 << (n.bit_length() - 1))\n    second_part = n ^ first_part\n\n    # Toggle the middle bit of the first part\n    middle_bit = 1 << ((first_part.bit_length() // 2) % first_part.bit_length())\n    if middle_bit in first_part:\n        first_part ^= middle_bit\n    else:\n        first_part |= middle_bit\n\n    # Toggle the middle bit of the second part\n    middle_bit = 1 << ((second_part.bit_length() // 2) % second_part.bit_length())\n    if middle_bit in second_part:\n        second_part ^= middle_bit\n    else:\n        second_part |= middle_bit\n\n    # Combine the two parts and return the result\n    return first_part | second_part"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = bin(n)[2:] # convert integer to binary\n    mid = int(len(n) / 2)\n    first_bit = int(n[0])\n    last_bit = int(n[-1])\n    if first_bit == 0:\n        n = '0' + n\n    else:\n        n = '1' + n\n    if last_bit == 0:\n        n = n[:-1] + '0'\n    else:\n        n = n[:-1] + '1'\n    return int(n, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Bitwise AND of the number with -1 (which gives us all 1's in binary form) and then subtracting 1 gives us the opposite bits of the number\n    n = n & (-n)\n    \n    # Bitwise XOR of the number with 0 (which gives us all 0's in binary form) and then adding 1 gives us the first and last bits of the number toggled\n    n = n ^ 1\n    \n    # Bitwise AND of the number with -2 (which gives us all 0's in binary form) and then adding 1 gives us the middle bits of the number toggled\n    n = n & (-2)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the number of bits in the binary representation of the input number\n    num_bits = len(bin(n)[2:])\n\n    # Find the index of the first and last bits\n    first_bit_index = 0\n    last_bit_index = num_bits - 1\n\n    # Initialize a list of indices to toggle\n    indices_to_toggle = [first_bit_index, last_bit_index]\n\n    # Iterate through the binary representation of the input number\n    for bit_index in range(num_bits - 2):\n        # If the current bit is 1, add the index to the list of indices to toggle\n        if n & (1 << bit_index):\n            indices_to_toggle.append(bit_index)\n\n    # Toggle the bits of the input number\n    for index in indices_to_toggle:\n        n ^= (1 << index)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # XOR with the first and last bits to get the number with middle bits toggled\n    n = n ^ (n & ((1 << (31 - i)) - 1))\n    \n    # XOR with the middle bits to get the final number\n    return n ^ (n & ((1 << (31 - i - 2)) - 1))"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        return -1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n\n    # Use binary search to find the index of the leftmost element greater than or equal to x\n    index = bisect.bisect_left(a, x)\n\n    # If x is greater than all elements in the list, index will be the length of the list\n    if index == len(a):\n        return len(a)\n\n    # If x is equal to the leftmost element, return 0\n    if a[index] == x:\n        return 0\n\n    # If x is less than the leftmost element, return index\n    if a[index-1] < x:\n        return index\n\n    # If x is greater than the leftmost element, return index-1\n    else:\n        return index-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Check if the list is empty\n    if len(a) == 0:\n        return 0\n    # Find the insertion point using binary search\n    index = bisect.bisect_left(a, x)\n    # If the value is not found, return the index where it would be inserted\n    if index == len(a) or a[index]!= x:\n        return index\n    # If the value is found, return the index where it would be inserted\n    else:\n        return index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    elif index == 0:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    This function takes a list a and a value x, and returns the left insertion point for x in a sorted list a.\n\n    Args:\n    a (list): A sorted list.\n    x (int): A value to be inserted into a.\n\n    Returns:\n    int: The left insertion point for x in a.\n    \"\"\"\n    # Use binary search to find the left insertion point for x in a.\n    left_index = bisect.bisect_left(a, x)\n    # If the element x is already present in a, left_index will be the index of the last occurrence of x.\n    # Therefore, we increment left_index by 1 to get the correct left insertion point for x.\n    return left_index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match: \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n\nstring = input(\"Enter a string: \")\nresult = check_str(string)\nif result:\n    print(\"The string starts with a vowel.\")\nelse:\n    print(\"The string does not start with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return 1 + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) + n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nprint(geometric_sum(10))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    def helper(k):\n        if k == 1:\n            return 1\n        else:\n            return n * helper(k-1)\n\n    return helper(n)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * (1 + geometric_sum(n-1))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Function to generate all triangular numbers up to n\n    def generate_triangular_numbers(n):\n        triangular_numbers = []\n        for i in range(1, n+1):\n            triangular_numbers.append(int(i*(i+1)/2))\n        return triangular_numbers\n\n    # Function to find the smallest triangular number with n digits\n    def find_smallest_triangular_number(n):\n        triangular_numbers = generate_triangular_numbers(n)\n        smallest_triangular_number = min(triangular_numbers)\n        return smallest_triangular_number\n\n    # Function to find the index of smallest triangular number with n digits\n    def find_Index(n):\n        smallest_triangular_number = find_smallest_triangular_number(n)\n        for i in range(len(smallest_triangular_number)):\n            if smallest_triangular_number[-(i+1)] < 0:\n                return len(smallest_triangular_number) - i\n        return -1\n\n    # Call the function to find the index of smallest triangular number with n digits\n    print(find_Index(5)) # Output: 6"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    This function takes an integer n and returns the index of the smallest triangular number with n digits.\n    The index is defined as the number of digits in the triangular number.\n    '''\n    # Initialize variables for the triangular number and the count of digits\n    triangular_number = 0\n    count_digits = 1\n\n    # Loop until we find the smallest triangular number with n digits\n    while count_digits < n:\n        # Increment the triangular number by 1 and update count_digits\n        triangular_number += 1\n        count_digits = len(str(triangular_number))\n\n    # Return the index of the smallest triangular number with n digits\n    return count_digits"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find the smallest triangular number with n digits\n    triangular = int(math.sqrt(5) * n + 0.5)\n    # Calculate the number of digits in the triangular number\n    num_digits = len(str(triangular))\n    # Calculate the first index of the smallest triangular number with n digits\n    first_index = triangular - (triangular // (10 ** (num_digits - n)))\n    # Return the first index\n    return first_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # calculate the smallest triangular number with n digits \n    triangular = int(math.pow(10, n-1) + math.pow(10, n-2) + math.pow(10, n-3))\n    \n    # calculate the number of digits of the triangular number \n    count = len(str(triangular))\n    \n    # return the index of the smallest triangular number with n digits \n    return count - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    def triangular_number(n):\n        return int(math.factorial(n) / (math.factorial(n-1) * math.factorial(n-2)))\n    \n    def smallest_triangular_number(n):\n        return triangular_number(n) * 10**(n-1)\n    \n    index = 0\n    smallest = smallest_triangular_number(n)\n    while smallest < 10**n:\n        index += 1\n        smallest = smallest_triangular_number(n)\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    This function will find the index of smallest triangular number with n digits. \n    '''\n    # Function to find the sum of digits of a number \n    def sum_of_digits(n): \n        sum = 0 \n        while n > 0: \n            sum += n % 10 \n            n //= 10 \n        return sum\n    \n    # Function to find the index of the smallest triangular number with n digits \n    def find_Index(n): \n        # Check for zero and one digit numbers \n        if n == 0 or n == 1: \n            return n \n        \n        # Find the smallest number with n digits \n        smallest = 10**(n-1)\n        \n        # Keep dividing the smallest number by 10 until the sum of digits of the number becomes n \n        while sum_of_digits(smallest) < n: \n            smallest *= 10\n        \n        # Return the index of the smallest triangular number with n digits \n        return int(math.log10(smallest) + 1)\n    \n    return find_Index(n)\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    # Check if the given number of digits is valid \n    if n <= 0 or n > 9: \n        return \"Invalid input\"\n    \n    # Initialize the first triangular number as 1 \n    tri_num = 1 \n    \n    # Initialize the list to store the index of the smallest triangular number \n    index_list = [] \n    \n    # Loop until we reach the given number of digits \n    while len(str(tri_num)) <= n: \n        \n        # Append the index of the current triangular number to the list \n        index_list.append(len(str(tri_num))) \n        \n        # Calculate the next triangular number by adding the previous two numbers \n        tri_num = tri_num + tri_num - 1 \n        \n    # Find the index of the smallest triangular number \n    min_index = index_list[index_list.index(min(index_list))] \n    \n    return min_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_triangular(n):\n        return (n * (n + 1)) // 2\n\n    i = 1\n    while True:\n        index = len(str(nth_triangular(i)))\n        if index == n and is_prime(index):\n            return i\n        i += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    a = 0\n    b = 1\n    c = 2\n    for i in range(2, n+1):\n        if i <= n//2:\n            a = b\n            b = c\n        else:\n            c = a\n            a = b\n            b = c\n        c = a + b + c\n    return c\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers = [1]\n    for i in range(1, n+1):\n        triangular_numbers.append(triangular_numbers[-1] + triangular_numbers[-2])\n    return triangular_numbers[n]"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    d = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        d[key] = value\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create an empty dictionary\n    dict_obj = {}\n    # Use a for loop to iterate over the tuple\n    for i in range(len(test_tup)):\n        # If the current index is less than the length of the tuple minus one, then we have a pair\n        if i < len(test_tup) - 1:\n            # Use the current index and add 1 to it to get the key and the next index to get the value\n            key = i\n            value = test_tup[i+1]\n            # Add the key-value pair to the dictionary\n            dict_obj[key] = value\n    # Return the dictionary\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # create an empty dictionary\n    my_dict = {}\n    # iterate over the tuple and add the corresponding key-value pairs\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as input and returns a dictionary that maps adjacent elements to their indices in the tuple.\n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"Error: Input tuple length should be even\")\n        return None\n    result = {}\n    for i in range(len(test_tup)-1):\n        result[test_tup[i], test_tup[i+1]] = i\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    n = len(test_tup)\n    # Create an empty dictionary\n    dict_ = {}\n    # Iterate through the tuple\n    for i in range(n):\n        # If the index is odd, then append the current element to the key of the dictionary\n        if i % 2 == 1:\n            dict_[test_tup[i]] = None\n        # If the index is even, then append the next element to the value of the dictionary\n        elif i % 2 == 0:\n            if i < n - 1:\n                dict_[test_tup[i-1]] = test_tup[i]\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_items = []\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            key = test_tup[i]\n            value = test_tup[i + 1]\n            dict_items.append((key, value))\n    return dict(dict_items)"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)):\n        if i+1 < len(test_tup):\n            key = test_tup[i]\n            value = test_tup[i+1]\n            test_dict[key] = value\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    d = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        d[key] = value\n    return d"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    count = 0\n    for char in s:\n        if char!= s[0]:\n            count += 1\n            if count == len(s):\n                return True\n    return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as an argument and returns True if all the characters in the string are the same, otherwise False.\n    \"\"\"\n    # check if the string has at least one character\n    if len(s) < 1:\n        return True\n    \n    # iterate over all the characters in the string\n    for i in range(len(s)):\n        # if any two characters are not equal, return False\n        if s[i]!= s[0]:\n            return False\n    \n    # if all the characters are equal, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters in the string are same or not.\n    \"\"\"\n\n    # Initialize the first character of the string to first_char\n    first_char = s[0]\n\n    # Loop through the rest of the string\n    for char in s[1:]:\n\n        # If the current character is not equal to the first character, return False\n        if char!= first_char:\n            return False\n\n    # If all the characters in the string are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 1:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[2:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Initialize a variable to store the first character of the string\n    first_char = s[0]\n    # Loop through each character in the string\n    for char in s:\n        # If the current character is not equal to the first character, return False\n        if char!= first_char:\n            return False\n    # If the loop completes without returning False, all the characters are the same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Initialize a variable to store the first character of the string\n    first_char = s[0]\n    \n    # Loop through the string and check if all characters are the same as the first character\n    for char in s:\n        if char!= first_char:\n            return False\n    \n    # If the loop completes without returning False, then all characters are the same as the first character\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function will check whether all the characters in a given string are same or not.\n    \"\"\"\n    # check if the length of the string is 0 or 1\n    if len(s) <= 1:\n        # if the length is 0 or 1, then all the characters are same\n        return True\n    else:\n        # if the length is greater than 1, then check if the first two characters are same\n        if s[0] == s[1]:\n            # if they are same, then check the remaining characters recursively\n            return all_Characters_Same(s[2:])\n        else:\n            # if they are not same, then return False\n            return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter of the tetrahedron\n    s = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** 0.25\n    \n    # calculate the area of the tetrahedron\n    A = (1 / 6) * s * (side ** 3 + side ** 3 + side ** 3)\n    \n    return A"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 1/3 * side * side * side\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side / 2\n    s = (1 + math.sqrt(5)) / 2\n    return (1 / 6) * a * s * s"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula for the area of a tetrahedron\n    area = (1/6)*side**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1/3)*side**2\n    area = math.sqrt(s*(1-s))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = 1/3 * side * side * side\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6)*side**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes a side of the tetrahedron and calculates its area using the formula:\n    \n    area = (1/6) * side * (side^2 + side^2 + side^2 + side^2)\n    \n    where side is the length of one of its sides.\n    \n    This formula is derived from the definition of a tetrahedron and is accurate to 2 decimal places.\n    '''\n    area = (1/6) * side * (side**2 + side**2 + side**2 + side**2)\n    return round(area, 2)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula for area of tetrahedron\n    area = (1/6) * side ** 3\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (3*side**2)/12\n    return math.sqrt(s)"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Initialize two pointers to the beginning of the list\n    i = 0\n    j = len(list) - 1\n\n    # Traverse the list from the end to the middle until j becomes the first element\n    while j > 0:\n        # Move i pointer to the next element\n        i = (i + 1) % len(list)\n\n        # Move j pointer to the next element\n        j = (j - 1) % len(list)\n\n        # Swap the elements at i and j pointers\n        list[i], list[j] = list[j], list[i]\n\n    # Traverse the list from the beginning to the middle until i becomes the last element\n    while i < len(list) // 2:\n        # Move i pointer to the next element\n        i = (i + 1) % len(list)\n\n        # Move j pointer to the next element\n        j = (j - 1) % len(list)\n\n        # Swap the elements at i and j pointers\n        list[i], list[j] = list[j], list[i]\n\n    # Print the rotated list\n    print(list)"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list by n items to the right direction.\n\n    Parameters:\n    lst (list): List to be rotated.\n    n (int): Number of items to rotate by.\n\n    Returns:\n    list: Rotated list.\n    \"\"\"\n    # Check if n is valid\n    if n % len(lst) == 0:\n        return lst\n    else:\n        # Calculate the number of items to rotate\n        num_items = len(lst) - n\n        # Calculate the number of rotations required\n        rotations = num_items // len(lst)\n        # Reverse the first n items\n        lst[:n] = lst[-n:][::-1]\n        # Reverse the rest of the items\n        lst[n:] = lst[:-n][::-1]\n        # Rotate the list by the required number of rotations\n        lst[:num_items] = lst[-num_items:][::-1]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(lst, m):\n    n = len(lst)\n    # If the list is already rotated, return the same list\n    if m >= n:\n        return lst\n    # Reverse the list\n    lst = lst[::-1]\n    # Traverse the list from the second last element and start from m-1\n    for i in range(m-1, n-1, -1):\n        # Swap the i-th and m-th element of the reversed list\n        lst[i], lst[m-1] = lst[m-1], lst[i]\n    # Reverse the list again\n    lst = lst[::-1]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if m>=n:\n        m = m % n\n    \n    # reverse first m elements of the list\n    for i in range(m):\n        list[i], list[n-i-1] = list[n-i-1], list[i]\n    \n    # reverse the remaining elements of the list\n    for i in range(m, n//2):\n        list[i], list[n-i-1] = list[n-i-1], list[i]\n    \n    # reverse the remaining elements of the list\n    for i in range(n//2, n):\n        list[i], list[n-i-1] = list[n-i-1], list[i]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Append the first m items to the end of the list\n    for i in range(m):\n        list.append(list.pop(0))\n    # Reverse the first m items of the list\n    list[:m] = reversed(list[:m])\n    # Reverse the last n-m items of the list\n    list[m:] = reversed(list[m:])\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(lst, m):\n    '''\n    This function rotates the given list by the specified number of items to the right direction.\n    '''\n    n = len(lst)\n    m = m % n\n    lst.reverse()\n    lst[-n:] = lst[:-n]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    # Initialize variables\n    n = len(list)\n    temp = []\n\n    # Copy elements from list to temp list\n    for i in range(n):\n        temp.append(list[i])\n\n    # Move elements from end of list to beginning of list\n    for i in range(n - m):\n        list[i] = list[n - i - 1]\n\n    # Move remaining elements from beginning of temp list to end of list\n    for i in range(m):\n        list[n - i - 1] = temp[i]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function takes a list and a number m as input and returns the rotated list.\n    The rotated list is obtained by shifting all the elements of the original list to the right by m places.\n    \"\"\"\n    n = len(lst)\n    # If m is greater than n, return the original list\n    if m > n:\n        return lst\n    \n    # Create a new list to store the rotated elements\n    rotated_lst = []\n    \n    # Traverse through the list and append the elements to the new list\n    for i in range(n):\n        if i < m:\n            rotated_lst.append(lst[i])\n        else:\n            rotated_lst.append(lst[(i-m)%n])\n    \n    # Return the new list\n    return rotated_lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Find the length of the list\n    n = len(list)\n    \n    # If the rotation is greater than the length of the list, reverse the entire list\n    if m > n:\n        reverse(list)\n        m = n - m\n    \n    # Rotate the list by m items using slicing\n    rotated_list = list[-m:] + list[:-m]\n    return rotated_list\n\ndef reverse(list):\n    '''\n    Write a function to reverse a given list in-place.\n    '''\n    for i in range(len(list) // 2):\n        j = len(list) - i - 1\n        list[i], list[j] = list[j], list[i]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[-m:] = list[:m] + list[-m:]\n    list[:m] = list[:m][-n:]"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_present = False\n    for item in test_tup:\n        if item is None:\n            none_present = True\n            break\n    return none_present"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_value = None\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_value = None\n    for item in test_tup:\n        if item == none_value:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_value = None\n    for item in test_tup:\n        if item is none_value:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible(n, d):\n        \"\"\"\n        A helper function to check if a number is divisible by a digit.\n        \"\"\"\n        return n % d == 0\n\n    return filter(lambda x: all(is_divisible(x, i) for i in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(digit) in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n\n    def is_divisible(num):\n        '''\n        Checks if a number is divisible by every digit it contains.\n        '''\n        digit_set = set(str(num))\n        for digit in digit_set:\n            if int(digit) == 0:\n                continue\n            if num % int(digit)!= 0:\n                return False\n        return True\n\n    result = list(filter(is_divisible, range(startnum, endnum+1)))\n\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible(num):\n        return all(int(digit) in str(num) for digit in str(num))\n\n    return list(filter(is_divisible, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    digit_counts = {}\n    for num in range(startnum, endnum+1):\n        for digit in str(num):\n            if digit not in digit_counts:\n                digit_counts[digit] = 0\n            digit_counts[digit] += 1\n    divisible_count = 0\n    for count in digit_counts.values():\n        if count % len(digit_counts) == 0:\n            divisible_count += 1\n    return divisible_count"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % y == 0 for d in str(x)) for y in range(1, 10)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Define a lambda function to check if a number is divisible by a certain digit\n    is_divisible_by = lambda x, digit: x % digit == 0\n\n    # Loop through the range of numbers and check if they are divisible by every digit\n    for i in range(startnum, endnum + 1):\n        if all(is_divisible_by(i, j) for j in str(i)):\n            print(i)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digit_nums = [int(d) for d in str(startnum)]\n    digit_sum = sum(digit_nums)\n    digit_count = len(str(startnum))\n    \n    is_divisible = lambda x: sum(int(d) for d in str(x)) == digit_sum and len(str(x)) == digit_count\n    \n    return filter(is_divisible, range(startnum, endnum+1))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * math.sin(math.radians(a))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Error: angle is larger than 360 degrees.\")\n        return None\n    \n    area = math.pi * r ** 2 * a / 360\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is valid\n    if a <= 0 or a > 360:\n        return None\n    \n    # Calculate area of sector\n    area = r * r * math.sin(math.radians(a))\n    \n    # Return area of sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # check if the angle is larger than 360 degrees\n    if a > 360:\n        print(\"Angle cannot be greater than 360 degrees.\")\n        return None\n    \n    # calculate area of the sector using formula A = pi r^2 cos(a)\n    A = math.pi * r ** 2 * math.cos(math.radians(a))\n    \n    # return the area of the sector\n    return A"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    area = math.pi * r**2 * (a/360)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Converting angle to radians\n    angle = math.radians(a)\n    # Checking if angle is within valid range (0-360 degrees)\n    if angle < 0 or angle > math.pi * 2:\n        return None\n    # Calculating area using formula A = (r^2 * sin(a/2)^2)\n    area = r**2 * math.sin(angle/2)**2\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        print(\"The angle is greater than 360 degrees.\")\n        return None\n    \n    else:\n        area = math.pi * r * r * a / 360\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Initialize the length of the three strings as variables\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n\n    # Create a 2D table to store the lengths of longest common subsequences\n    L = [[0] * (p + 1) for i in range(n + 1)]\n\n    # Fill in the table row by row\n    for i in range(n + 1):\n        for j in range(p + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # Find the longest common subsequence\n    i = n\n    j = p\n   lcs = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the list to get the lcs\n    lcs = lcs[::-1]\n\n    # Return the lcs\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Base case\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0:\n        return []\n\n    # Create a table to store the lengths of LCS for all prefixes of X and Y\n    lcs_table = [[0 for _ in range(len(Y)+1)] for _ in range(len(X)+1)]\n\n    # Fill in the table using dynamic programming\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                lcs_table[i][j] = lcs_table[i-1][j-1] + 1\n            else:\n                lcs_table[i][j] = max(lcs_table[i-1][j], lcs_table[i][j-1])\n\n    # Initialize variables for the LCS\n    i = len(X)\n    j = len(Y)\n    lcs_X = \"\"\n    lcs_Y = \"\"\n\n    # Trace the LCS back through the table\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs_X = X[i-1] + lcs_X\n            lcs_Y = Y[j-1] + lcs_Y\n            i -= 1\n            j -= 1\n        elif lcs_table[i-1][j] > lcs_table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Return the LCS\n    return lcs_X[::-1], lcs_Y[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n, p = len(X), len(Y), len(Z) # Find lengths of strings\n    # Create a table to store lengths of longest common subsequences of prefixes of X, Y, Z\n    L = [[0] * (p+1) for i in range(m+1)] \n    # Build the table L[][] in bottom up fashion\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(p+1): \n                if i==0 or j==0 or k==0: # Base cases\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: # If current characters are same\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: # If current characters are different\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    # Find the length of the longest common subsequence \n    # by following the last column of the table\n    lcs = L[m][n][p] \n    # Initialize an empty list to store the lcs \n    lcs_list = [] \n    # Reconstruct the lcs by traversing the table\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] == Z[k-1]: # If current characters are same\n            lcs_list.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]: # If current character in Y is common to LCS\n            i -= 1\n        elif L[i][j-1][k] == L[i][j][k-1]: # If current character in Z is common to LCS\n            j -= 1\n        else: # If current character in X is common to LCS\n            k -= 1\n    # Reverse the list and return the lcs \n    return ''.join(reversed(lcs_list))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    def lcs(X, Y, Z): \n        m = len(X) \n        n = len(Y) \n        p = [[0] * (n+1) for i in range(m+1)] \n\n        for i in range(1, m+1): \n            for j in range(1, n+1): \n                if X[i-1] == Y[j-1]: \n                    p[i][j] = p[i-1][j-1] + 1 \n                else: \n                    p[i][j] = max(p[i-1][j], p[i][j-1]) \n\n        return p[m][n] \n\n    return lcs(X, Y, Z) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Initialize a 3D table to store the length of the LCS for all possible prefixes of X, Y, Z\n    LCS_table = [[[0 for j in range(len(Y)+1)] for i in range(len(X)+1)] for k in range(len(Z)+1)]\n\n    # Fill the LCS table using dynamic programming\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    LCS_table[i][j][k] = LCS_table[i-1][j-1][k-1] + 1\n                else:\n                    LCS_table[i][j][k] = max(LCS_table[i-1][j][k], LCS_table[i][j-1][k], LCS_table[i][j][k-1])\n\n    # Backtrack the LCS using the table and return the result\n    i, j, k = len(X), len(Y), len(Z)\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS_table[i-1][j][k] == LCS_table[i][j-1][k]:\n            i -= 1\n        elif LCS_table[i][j-1][k] == LCS_table[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    return ''.join(lcs[::-1])\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Step 1: Create a list of tuples (i, j) where i and j are indices of X and Y respectively\n    M = len(X)\n    N = len(Y)\n    T = [[0] * (N+1) for i in range(M+1)]\n    for i in range(M+1):\n        for j in range(N+1):\n            if i == 0 or j == 0:\n                T[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                T[i][j] = T[i-1][j-1] + 1\n            else:\n                T[i][j] = max(T[i-1][j], T[i][j-1])\n    \n    # Step 2: Starting from the bottom-right corner, extract the lcs\n    i = M\n    j = N\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif T[i-1][j] > T[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    # Step 3: Reverse the lcs and return it\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    This function returns the length of the longest common subsequence (LCS) for the given three string sequences X, Y and Z.\n    \"\"\"\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n  \n    # create a 3D table to store LCS lengths for all prefixes of X, Y and Z \n    dp = [[[0 for j in range(o+1)] for k in range(m+1)] for i in range(n+1)] \n  \n    # Fill in the LCS lengths using dynamic programming approach \n    for i in range(1, n+1): \n        for j in range(1, m+1): \n            for k in range(1, o+1): \n                if X[j-1] == Y[i-1] and Y[i-1] == Z[k-1]: \n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else: \n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1]) \n  \n    # Return the length of the LCS \n    return dp[n][m][o] "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a table to store lengths of longest common subsequences for prefixes of X, Y and Z\n    L = [[0] * (o+1) for _ in range(m+1)]\n\n    # Fill L[][] in bottom up fashion. Note that L[i][j] contains length of LCS of X[0:i] and Y[0:j] and Z[0:k]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # Construct the LCS by following the above L[]\n    i = m\n    j = n\n    k = o\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        elif L[i-1][j][k] == L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    lcs.reverse()\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    # length of X, Y and Z \n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n\n    # create a table to store lengths of common subsequences of prefixes of X[], Y[] and Z[] \n    L = [[0] * (p + 1) for i in range(m + 1)] \n\n    # Fill in the table L[][] in bottom up manner \n    for i in range(1, m + 1): \n        for j in range(1, p + 1): \n\n            if X[i - 1] == Y[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1 \n            else: \n                L[i][j] = max(L[i - 1][j], L[i][j - 1]) \n\n    # Now L[m][p] contains the length of the longest common subsequence \n    # of X[0..m-1], Y[0..n-1] and Z[0..p-1]. \n    i = m \n    j = p \n    lcs = \"\" \n    while i > 0 and j > 0: \n        if X[i - 1] == Y[j - 1]: \n            lcs = X[i - 1] + lcs \n            i -= 1 \n            j -= 1 \n        elif L[i - 1][j] > L[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    # remove the first character of the lcs \n    return lcs[1:] "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    n, m, l = len(X), len(Y), len(Z)\n\n    # Create a table to store lengths of LCS for subproblems\n    L = [[0]*(m+1) for i in range(n+1)]\n\n    # Fill L[i][j] with length of LCS of X[0:i] and Y[0:j]\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Print the LCS table\n    for i in range(n+1):\n        for j in range(m+1):\n            print(L[i][j], end=' ')\n        print()\n\n    # Backtrack to find the actual LCS\n    i, j = n, m\n    lcs = ''\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # replace all non-alphanumeric characters with spaces\n    str1 = re.sub(r'[^\\w\\s]','', str1)\n    # split the string into words\n    words = str1.split()\n    # capitalize the first word and add spaces between it and the remaining words\n    result = words[0] +''\n    for i in range(1, len(words)):\n        word = words[i]\n        if word[0].isupper():\n            result += word +''\n        else:\n            result += word\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Replace all non-alphanumeric characters with spaces\n    str1 = re.sub(r'[^\\w\\s]','', str1)\n    # Split the string into words\n    words = str1.split()\n    # Capitalize the first letter of each word and join them with spaces\n    result =''.join(word.capitalize() for word in words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into a list of words\n    words = str1.split()\n\n    # Initialize an empty list to store the modified words\n    modified_words = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the first letter of the word is uppercase\n        if word[0].isupper():\n            # If it is, add a space before the word\n            modified_words.append(''+ word)\n        else:\n            # If it isn't, add the word as it is\n            modified_words.append(word)\n\n    # Join the modified words back into a string and return it\n    return''.join(modified_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # remove all special characters and convert the string to lowercase\n    str1 = re.sub('[^a-zA-Z\\s]', '', str1).lower()\n    # split the string into words using whitespace as a delimiter\n    words = str1.split()\n    # loop through the words and capitalize the first letter of each word if it is capitalized\n    new_words = []\n    for word in words:\n        if word[0].isupper():\n            new_words.append(word)\n        else:\n            new_words.append(word[0].upper() + word[1:])\n    # join the new words back into a string with spaces between them\n    result =''.join(new_words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    words = re.findall(r'\\b\\w+\\b', str1.lower())  # find all words in string in lowercase\n    result = []\n    for word in words:\n        if word[0].isupper():\n            result.append(word)\n        else:\n            result.append(word[0] + \" \" + word[1:])\n    return \" \".join(result)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall('\\b[A-Z][a-z]+\\b', str1)\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expression\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Join the words with spaces\n    result =''.join(words)\n    # Capitalize the first letter of each word\n    result =''.join([word.capitalize() for word in words])\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\b\\w+\\b', lambda m: m.group().capitalize(), str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Iterate over the words and replace capital letters with spaces\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n\n    # Join the words back into a string and return it\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into a list of words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    \n    # Iterate through the list of words and capitalize the first letter of each word\n    for i in range(len(words)):\n        words[i] = words[i].capitalize()\n    \n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Create a list of numeric strings only\n    nums = [num for num in nums_str if num.isdigit()]\n\n    # Sort the list numerically\n    nums.sort(key=lambda x: int(x))\n\n    # Return the sorted list of numeric strings\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: tuple(int(i) for i in x.split('.')))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all the strings in the list to integers\n    nums_int = [int(num_str) for num_str in nums_str]\n    # Sort the list numerically using the built-in sorted function\n    sorted_nums = sorted(nums_int)\n    # Convert the sorted list back to strings and return it\n    return [str(num) for num in sorted_nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = sorted(nums_str)\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert all strings to float\n    nums_float = [float(num) for num in nums_str]\n    # Sort the float list\n    nums_float.sort()\n    # Convert the float list back to string and join them with comma\n    sorted_nums_str = ', '.join(str(num) for num in nums_float)\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Splitting the strings into separate numeric strings and converting them to integers\n    nums = [int(num_str) for num_str in nums_str if num_str.isdigit()]\n\n    # Sorting the numeric strings in ascending order\n    nums.sort()\n\n    # Converting the sorted numeric strings back to strings\n    sorted_nums = [str(num) for num in nums]\n\n    # Joining the sorted numeric strings back into a single string\n    return ''.join(sorted_nums)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    # convert all the strings to int\n    nums = [int(num) for num in nums_str]\n    # sort the list in ascending order using the sorted() function\n    nums.sort()\n    # convert the sorted list back to a list of strings\n    nums_str = [str(num) for num in nums]\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings of numbers to float values\n    nums_float = [float(num_str) for num_str in nums_str]\n\n    # Sort the float values in ascending order\n    nums_float.sort()\n\n    # Convert sorted float values back to strings and return the sorted list\n    sorted_nums_str = [str(num_float) for num_float in nums_float]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = []\n    for num_str in nums_str:\n        nums_list.append(float(num_str))\n    nums_list.sort()\n    return [str(num) for num in nums_list]"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Append the tuple elements to the list\n    for item in test_tup:\n        test_list.append(item)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n\n    Args:\n        test_list (list): A list to which we want to add the given tuple.\n        test_tup (tuple): A tuple to be added to the given list.\n\n    Returns:\n        list: A new list with the added tuple.\n    \"\"\"\n    return test_list + test_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], tuple):\n            for j in range(len(test_tup)):\n                test_list[i] = test_list[i] + test_tup[j]\n        else:\n            continue"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i >= len(arr):\n        return True\n\n    if arr[i] < arr[i//2]:\n        return False\n\n    return check_min_heap_helper(arr, 2*i+1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 1:\n        return True\n    if i > len(arr) - 1:\n        return False\n    if arr[i] >= arr[i // 2]:\n        return False\n    return check_min_heap_helper(arr, i // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return False\n    if i == 0:\n        if arr[i] > arr[i+1]:\n            return False\n        return True\n    if arr[i] < arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return False\n    \n    if i == 0:\n        return True\n    \n    parent = (i - 1) // 2\n    if arr[i] < arr[parent]:\n        return False\n    \n    return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    \n    for i in range(n - 1, 0, -1):\n        if arr[i] < arr[i // 2]:\n            return False\n        \n        if not check_min_heap_helper(arr, i // 2):\n            return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr) // 2:\n        # If i is at the end of the array, then the array is already a min heap\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[i] > arr[left]:\n        # If left child is greater than parent, return False\n        return False\n    elif right < len(arr) and arr[i] > arr[right]:\n        # If right child is greater than parent, return False\n        return False\n    # If both children are less than or equal to parent, check left and right child recursively\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    # Check if array is already a min heap\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if arr[i] > arr[i*2+1]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # If i is the last node, then the parent node is the root node\n    if i == len(arr) // 2:\n        return True\n    \n    # Check if the left child is smaller than the parent node\n    if arr[i] > arr[2 * i]:\n        return False\n    \n    # Check if the right child is smaller than the parent node\n    if i < len(arr) // 2:\n        if arr[i] > arr[2 * i + 1]:\n            return False\n    \n    # Recursively check the left and right child nodes\n    return check_min_heap_helper(arr, 2 * i) and check_min_heap_helper(arr, 2 * i + 1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Call the helper function to check if the array represents min heap or not\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        return check_min_heap_helper(arr, smallest)\n    return False"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 3 * jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n // 2)\n    else:\n        return 2 * jacobsthal_num(n // 2) + 1\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return 4 * jacobsthal_num(n - 1) - jacobsthal_num(n - 2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth Jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    for i in range(n):\n        if i == 0 or i == 1:\n            j += 1\n        else:\n            j += 2 * (2 * i - 1)\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    else:\n        jacob = 2\n        lucas = 1\n        for i in range(n-3):\n            jacob = jacob * (n-i) // (i+1) + lucas\n            lucas = jacob - lucas\n        return jacob"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    j = 0\n    a = 1\n    b = 0\n    \n    while a < n:\n        a, b = b, a + b\n        j += 1\n        \n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ \n    \"\"\"\n    jacobsthal_numbers = [0, 1, 1]\n    for _ in range(n - 3):\n        jacobsthal_numbers.append(jacobsthal_numbers[-1] + jacobsthal_numbers[-2])\n    return jacobsthal_numbers[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (2 * (n - 1) + 1) * jacobsthal_num(n // 2)\n    else:\n        return (4 * n - 1) * jacobsthal_num((n + 1) // 2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list in ascending order based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize variables to store the minimum k records found\n    min_k_records = []\n    min_k_records_count = 0\n\n    # Iterate through the sorted list of tuples and count the number of records\n    # that satisfy the criteria of having the minimum value for k\n    for i in range(len(test_list)):\n        if i >= K - 1:\n            break\n\n        if test_list[i][0] == test_list[i - 1][0]:\n            min_k_records_count += 1\n\n        else:\n            if min_k_records_count >= K:\n                min_k_records = []\n                min_k_records_count = 0\n\n            min_k_records.append(test_list[i])\n            min_k_records_count = 1\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    # sort the list in ascending order based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # initialize an empty list to store the minimum k records\n    min_k_list = []\n\n    # iterate through the sorted list\n    for i in range(K):\n        # append the minimum k record to the list\n        min_k_list.append(test_list[i])\n\n    return min_k_list\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the tuple list based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize variables for minimum number of records and minimum record\n    min_records = float('inf')\n    min_record = None\n\n    # Iterate over the first K elements of the sorted tuple list\n    for i in range(K):\n        # Check if the current record is less than the minimum record\n        if sorted_list[i][1] < min_records:\n            # Update the minimum number of records and minimum record\n            min_records = sorted_list[i][1]\n            min_record = sorted_list[i]\n        # Check if the current record is equal to the minimum record\n        elif sorted_list[i][1] == min_records:\n            # Check if the current record is smaller than the minimum record\n            if sorted_list[i][0] < min_record[0]:\n                # Update the minimum record\n                min_record = sorted_list[i]\n\n    # Return the minimum record\n    return min_record"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        else:\n            if min(test_list[i]) < min(min_list):\n                min_list.remove(min(min_list))\n                min_list.append(test_list[i])\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Create a dictionary to store the frequency of each record\n    freq_dict = {}\n\n    # Iterate through the list of tuples and update the frequency dictionary\n    for record in test_list:\n        freq_dict[record] = freq_dict.get(record, 0) + 1\n\n    # Find the minimum k records in the dictionary\n    min_k_records = [record for record, freq in freq_dict.items() if freq == min(freq_dict.values())][:K]\n\n    # Print the minimum k records\n    print(\"Minimum k records:\", min_k_records)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    \n    # Sort the list in ascending order\n    test_list.sort()\n    \n    # Initialize minimum k records to infinity\n    min_k_records = float('inf')\n    \n    # Iterate through the list and check if the number of k records is less than or equal to minimum k records\n    for i in range(len(test_list)):\n        if i <= K:\n            min_k_records = min(min_k_records, test_list[i][1])\n    \n    # Return minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer K and returns the minimum K records from the list.\n    \"\"\"\n    min_list = []\n    # Sorting the list of tuples based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Traversing through the sorted list and adding the first K elements to the min_list\n    for i in range(K):\n        if len(min_list) < K:\n            min_list.append(sorted_list[i])\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a tuple list and a positive integer K as input and returns the minimum K records from the list.\n    '''\n    min_list = []\n\n    # Iterate through the tuple list and check if the record is already in the min_list\n    for record in test_list:\n        if len(min_list) < K:\n            min_list.append(record)\n        else:\n            # If the record is not already in the min_list, compare it with the current min_list\n            for min_record in min_list:\n                if record < min_record:\n                    min_list.remove(min_record)\n                    min_list.append(record)\n                    break\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create a dictionary to store the minimum k records\n    min_k_dict = {}\n    # Initialize min_k_dict as None\n    min_k_dict = None\n    # Loop through the list of tuples and append each tuple to the dictionary\n    for i in range(len(test_list)):\n        if min_k_dict is None:\n            min_k_dict = {test_list[i]}\n        else:\n            if len(min_k_dict) < K:\n                min_k_dict.add(test_list[i])\n            else:\n                min_k_dict.remove(min(min_k_dict))\n                min_k_dict.add(test_list[i])\n    # Convert the dictionary to a list of tuples\n    min_k_list = list(min_k_dict.items())\n    # Return the minimum k records\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    # Sorting the list of tuples in ascending order of the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initializing variables to keep track of minimum number of records found so far and current index of minimum number of records found so far\n    min_count = len(test_list)\n    index = 0\n    \n    # Checking if the length of the list is less than k, in which case we return all the records in the list\n    if len(test_list) < K:\n        return test_list\n    \n    # Starting from the first index of the list, we check if the count of records found so far is less than k, if yes, we add the next record to our minimum count and index\n    for i in range(len(test_list)):\n        if i == index:\n            index += 1\n        if index == K:\n            min_count = i + 1\n            break\n    \n    # Returning the minimum count of records found so far\n    return test_list[:min_count]"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # create a dictionary to store common elements for each index in each list\n    common_dict = {}\n\n    # loop through each index in each list\n    for i in range(len(l1)):\n        # if the element at this index is not in the common_dict yet, add it and set its count to 1\n        if l1[i] not in common_dict:\n            common_dict[l1[i]] = [1]\n        # if the element at this index is already in the common_dict, increment its count by 1\n        else:\n            common_dict[l1[i]].append(1)\n\n        if l2[i] not in common_dict:\n            common_dict[l2[i]] = [1]\n        else:\n            common_dict[l2[i]].append(1)\n\n        if l3[i] not in common_dict:\n            common_dict[l3[i]] = [1]\n        else:\n            common_dict[l3[i]].append(1)\n\n    # create a list to store the common elements\n    common_list = []\n\n    # loop through the dictionary and add the elements that appear multiple times to the common_list\n    for key, value in common_dict.items():\n        if len(value) > 1:\n            common_list.append(key)\n\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create a dictionary to store the count of each element in each list\n    count_dict = {}\n    for i in range(len(l1)):\n        if l1[i] in count_dict:\n            count_dict[l1[i]] += 1\n        else:\n            count_dict[l1[i]] = 1\n    \n    for i in range(len(l2)):\n        if l2[i] in count_dict:\n            count_dict[l2[i]] += 1\n        else:\n            count_dict[l2[i]] = 1\n    \n    for i in range(len(l3)):\n        if l3[i] in count_dict:\n            count_dict[l3[i]] += 1\n        else:\n            count_dict[l3[i]] = 1\n    \n    # Extract the common elements from the count dictionary\n    common_elements = []\n    for key, value in count_dict.items():\n        if value == 3:\n            common_elements.append(key)\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i] and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Create a set to store common elements\n    common = set()\n\n    # Loop through each index in the lists\n    for i in range(len(l1)):\n        # Check if the element at the current index is in all lists\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.add(l1[i])\n\n    return list(common)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create a dictionary to store the frequency of elements in each list\n    freq_dict = {}\n    for item in l1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    for item in l2:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    for item in l3:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    # Find common elements and return a list\n    common_list = []\n    for item, freq in freq_dict.items():\n        if freq == 3:\n            common_list.append(item)\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3:\n            common_elements.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    numbers.sort()\n    \n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    numbers.sort()\n    \n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n    \"\"\"\n    smallest = float('inf')  # initialize smallest as large positive value\n    second_smallest = float('inf')  # initialize second smallest as large positive value\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest:\n            second_smallest = number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    # First, sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    # Then, return the second element (index 1) of the sorted list\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    if second_smallest == float('inf'):\n        return None\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for number in numbers[2:]:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers to find the second smallest of.\n\n    Returns:\n        int: The second smallest number in the list.\n\n    Raises:\n        ValueError: If the list is empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Cannot find the second smallest of an empty list\")\n    elif len(numbers) == 1:\n        return None\n    else:\n        return min(numbers[1:], key=lambda x: x)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"a(?=b.*b)\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b.*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a(?=b*b)\"\n    match = re.search(pattern, text)\n    if match:\n        return \"Match found\"\n    else:\n        return \"No match found\""
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab(?:[bc]+)*'\n    match = re.search(pattern, text)\n    if match:\n        print(f\"Found '{match.group()}' in the text.\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b){0,1}'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b?'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\b*b'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j:\n                if test_list[i][::-1] in test_list[j:]:\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1] and test_list[j]!= test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # Initialize a set to store the count of reverse pairs\n    reverse_pairs = set()\n\n    # Iterate through the list of strings\n    for string in test_list:\n\n        # Convert the string to a list of characters\n        string_list = list(string)\n\n        # Reverse the list of characters\n        string_list.reverse()\n\n        # Convert the reversed list of characters back to a string\n        reversed_string = ''.join(string_list)\n\n        # Check if the reversed string is the same as the original string\n        if string!= reversed_string:\n\n            # Add 1 to the count of reverse pairs if the strings are not the same\n            reverse_pairs.add(1)\n\n    # Return the count of reverse pairs\n    return len(reverse_pairs)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # Count the number of characters in each string\n    count_list = [0] * len(test_list)\n    for s in test_list:\n        count_list[len(s) - 1] += 1\n\n    # Create a boolean list to mark whether a substring is reverse or not\n    is_reverse = [False] * len(test_list)\n\n    # Iterate through the list and check the pairs of reverse substrings\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if count_list[i] == count_list[j] and not is_reverse[i] and not is_reverse[j]:\n                count += 1\n                is_reverse[i] = True\n                is_reverse[j] = True\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the counts of each unique sublist\n    sublist_counts = {}\n    # Loop through each element of the list\n    for element in list1:\n        # If the element is a list, convert it to a tuple and use it as a key in the sublist_counts dictionary\n        if isinstance(element, list):\n            sublist_counts[tuple(element)] = sublist_counts.get(tuple(element), 0) + 1\n        # Otherwise, ignore the element\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list and returns a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # create a dictionary to store counts of sublists\n    counts = {}\n    \n    # loop through each list in the input list\n    for i in lst:\n        # convert the list to a tuple\n        tup = tuple(i)\n        # if the tuple is not already in the dictionary, add it with a count of 1\n        if tup not in counts:\n            counts[tup] = 1\n        # otherwise, increment the count of the tuple by 1\n        else:\n            counts[tup] += 1\n    \n    return counts\n"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublist_count:\n                sublist_count[sublist] = 1\n            else:\n                sublist_count[sublist] += 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist_count[tuple(list1[i:j])] = sublist_count.get(tuple(list1[i:j]), 0) + 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Initialize an empty dictionary to store the count of each tuple in list1\n    counts = {}\n\n    # Loop through each list in list1\n    for i in range(len(list1)):\n        # Convert the i-th list to a tuple\n        tuple1 = tuple(list1[i])\n\n        # Check if the tuple is already in the dictionary\n        if tuple1 in counts:\n            # Increment its count in the dictionary\n            counts[tuple1] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            counts[tuple1] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create a dictionary to store the count of unique sublists\n    unique_sublist_count = {}\n\n    # Loop through each element in the list\n    for element in list1:\n        # Convert the element to a tuple and check if it's in the dictionary\n        tuple_element = tuple(sorted(element))\n        if tuple_element in unique_sublist_count:\n            # If it's in the dictionary, increment its count by 1\n            unique_sublist_count[tuple_element] += 1\n        else:\n            # If it's not in the dictionary, add it with a count of 1\n            unique_sublist_count[tuple_element] = 1\n\n    return unique_sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            if tuple(sublist) in list_dict:\n                list_dict[tuple(sublist)] += 1\n            else:\n                list_dict[tuple(sublist)] = 1\n    return list_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create a dictionary to store the count of each unique sublist\n    count_dict = {}\n\n    # Loop through each element in the list\n    for element in list1:\n\n        # Convert the element to a tuple and check if it's in the dictionary\n        if tuple(element) in count_dict:\n            count_dict[tuple(element)] += 1\n        else:\n            count_dict[tuple(element)] = 1\n\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the number of times each sublist occurs\n    sublist_count = {}\n    # loop through each sublist in the list\n    for sublist in list1:\n        # convert the sublist to a tuple and add it to the dictionary\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for lst in list1:\n        lst = tuple(sorted(lst)) # sort the list in ascending order\n        if lst in count_dict:\n            count_dict[lst] += 1 # increment the count for the tuple\n        else:\n            count_dict[lst] = 1 # add the tuple to the dictionary with a count of 1\n    return count_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    # Check if input string is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Remove any non-numeric characters from the input string\n    num = ''.join(filter(str.isdigit, num))\n    \n    # Check if the number of characters in the string is less than 2\n    if len(num) < 2:\n        return False\n    \n    # Check if the number of digits in the string is less than 2\n    if len(num) > 2:\n        return False\n    \n    # Check if the number of digits in the string is equal to 2\n    if len(num) == 2:\n        # Check if the string contains a decimal point\n        if '.' in num:\n            # Check if the number after the decimal point is less than 10\n            if float(num[num.index('.')+1:]) < 10:\n                return True\n    \n    # If the number is not a decimal number with precision of 2, return False\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the string contains only digits\n    if not num.isdigit():\n        return False\n\n    # Check if the string has a precision of 2\n    if len(num)!= 1 or num[0] == 0:\n        return False\n\n    # Convert the string to an integer and check if it's a decimal number\n    num = int(num)\n    if num % 1!= 0:\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    \n    if '.' in num and len(num.split('.')[1])!= 2:\n        return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n\n    # Check if the string contains any non-numeric characters\n    if any(char.isdigit() for char in num) is False:\n        return False\n\n    # Check if the string contains more than 2 non-numeric characters\n    if len(num) > 2:\n        return False\n\n    # Check if the string starts with a decimal point\n    if num[0]!= '.':\n        return False\n\n    # Check if the string contains a decimal point\n    if '.' in num:\n        # Split the string into parts before and after the decimal point\n        parts = num.split('.')\n\n        # Check if the parts have more than 2 characters\n        if len(parts[0]) > 2 or len(parts[1]) > 2:\n            return False\n\n        # Check if the parts contain only numeric characters\n        if any(char.isdigit() for char in parts[0]) is False or any(char.isdigit() for char in parts[1]) is False:\n            return False\n\n    # Check if the string contains any non-numeric characters after the decimal point\n    if any(char.isdigit() for char in num[num.index('.')+1:]) is False:\n        return False\n\n    # If all checks passed, the string is a decimal number with a precision of 2\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.replace(',', '')\n    if '.' in num and num.count('.')!= 1:\n        num = num.replace('.', '')\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    if num.count('.') > 1:\n        return False\n    if '.' in num and num.split('.')[1].isdigit() and len(num.split('.')[1]) > 2:\n        return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    try:\n        num = float(num)\n        if int(num) == num:\n            if str(num)[-2:].startswith(\"0\"):\n                return False\n            else:\n                return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str):\n        num = num.replace(',', '')\n        if '.' in num and len(num.split('.')) == 2:\n            decimal_part = num.split('.')[1]\n            if len(decimal_part) == 2:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        if len(str(float(num)).split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    if '.' in num:\n        parts = num.split('.')\n        if len(parts) == 2 and parts[1].isnumeric() and len(parts[1]) <= 2:\n            return True\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = False\n    for i in arr:\n        if arr.count(i) == 1:\n            unique = True\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element,\n    False otherwise.\n    '''\n\n    # create a dictionary to store the count of each number in the array\n    count = {}\n\n    # iterate over each number in the array\n    for num in arr:\n        # check if the number is already in the dictionary\n        if num in count:\n            # if it is, increment the count of the number by 1\n            count[num] += 1\n        else:\n            # if it's not, add the number to the dictionary with a count of 1\n            count[num] = 1\n\n    # if the dictionary has only one key, it means all the numbers in the array are distinct\n    if len(count) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        return True\n    elif arr[0] == arr[-1]:\n        return False\n    else:\n        return unique_Element(arr[1:-1])"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    unique = set(arr)\n    return len(unique) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # initialize a set to store the unique elements of the list\n    unique_set = set()\n\n    # loop through the list and add each element to the set\n    for num in arr:\n        unique_set.add(num)\n\n    # check if the length of the unique set is equal to the length of the list\n    if len(unique_set) == len(arr):\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains multiple distinct elements.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        return True\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] == arr[i-1]:\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum = monthnum3 + 0 # Convert month number from string to int\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        print(monthnum, \"is a leap year\")\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        print(monthnum, \"is not a leap year\")\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13) and monthnum3 in days_in_month:\n        print(f\"{monthnum3} has 30 days\")\n    else:\n        print(f\"{monthnum3} does not have 30 days\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum == 2:\n        # February has 29 days if the year is a leap year, and 28 otherwise.\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return 29\n        else:\n            return 28\n    elif monthnum in [4, 6, 9, 11]:\n        # Non-leap years have 30 days in April, June, September, and November.\n        return 30\n    else:\n        # All other months have 31 days.\n        return 31"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_months = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum3 in days_in_months:\n        if days_in_months[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 % 3 == 0:\n        return \"The month has 30 days\"\n    else:\n        return \"The month does not have 30 days\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        print(monthnum3, \"contains 30 days\")\n    else:\n        print(monthnum3, \"does not contain 30 days\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        # Check for even numbered months\n        if monthnum3 in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    else:\n        # Check for odd numbered months\n        if monthnum3 in [3, 5, 7, 8, 10, 12]:\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    if monthnum3 in month:\n        if month[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1,n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize two pointers i and j to 0 and n-1 respectively\n    i = 0\n    j = n - 1\n\n    # Initialize minimum difference as infinity\n    min_diff = float('inf')\n\n    # While i is less than j, loop through array\n    while i < j:\n        # Calculate the difference between the current elements and the next element\n        diff = arr[i] - arr[j]\n\n        # If the difference is less than the minimum difference, update minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n        # If the difference is positive, move j to the right\n        if diff > 0:\n            j -= 1\n        # If the difference is negative, move i to the right\n        else:\n            i += 1\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import random\n\ndef find_min_diff(arr, n):\n    def partition(arr, low, high):\n        pivot_index = random.randint(low, high)\n        arr[pivot_index], arr[high] = arr[high], arr[pivot_index]\n        pivot = arr[high]\n        i = low\n        for j in range(low, high):\n            if arr[j] < pivot:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n        arr[i], arr[high] = arr[high], arr[i]\n        return i\n\n    def quick_select(arr, low, high, k):\n        if low == high:\n            return arr[low]\n\n        pivot_index = partition(arr, low, high)\n        if k == pivot_index:\n            return arr[k]\n        elif k < pivot_index:\n            return quick_select(arr, low, pivot_index - 1, k)\n        else:\n            return quick_select(arr, pivot_index + 1, high, k)\n\n    def find_min_diff_helper(arr, low, high):\n        if low == high:\n            return abs(arr[low])\n\n        pivot_index = partition(arr, low, high)\n        min_diff = abs(arr[pivot_index])\n\n        if pivot_index > low:\n            min_diff = min(min_diff, find_min_diff_helper(arr, low, pivot_index - 1))\n\n        if pivot_index + 1 < high:\n            min_diff = min(min_diff, find_min_diff_helper(arr, pivot_index + 1, high))\n\n        return min_diff\n\n    return find_min_diff_helper(arr, 0, n - 1)"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize variables to keep track of minimum and maximum difference\n    min_diff = arr[1] - arr[0]\n    max_diff = arr[n - 1] - arr[n - 2]\n    # Iterate over the array and update minimum and maximum differences\n    for i in range(1, n - 1):\n        diff = arr[i + 1] - arr[i - 1]\n        min_diff = min(diff, min_diff)\n        max_diff = max(diff, max_diff)\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its length n and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # sort the array in ascending order\n    min_diff = float('inf')  # initialize minimum difference as infinity\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]  # find the difference between the current element and the next element\n        if diff < min_diff:  # if the difference is smaller than the current minimum difference, update it\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(1, n-1):\n        diff = abs(arr[i] - arr[i+1])\n        min_diff = min(min_diff, diff)\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    '''\n    if len(arr) < 2:\n        return \"Array length must be greater than 1\"\n\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(1, len(arr)):\n        diff = abs(arr[i] - arr[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    # sorting the array\n    arr.sort()\n\n    # keeping track of the minimum difference\n    min_diff = float('inf')\n\n    # iterating through the array and comparing adjacent elements\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n\n    Args:\n    arr (list): An array of integers.\n    n (int): The size of the array.\n\n    Returns:\n    int: The minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    diff = float('inf')\n    for i in range(n-1):\n        diff = min(diff, arr[i+1] - arr[i])\n    return diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 1\n    count = 0\n    while num!= 1:\n        if count == n:\n            return True\n        num = (num + 1) ** 2\n        count += 1\n    return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        Check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_prime(n):\n        \"\"\"\n        Find the nth prime number.\n        \"\"\"\n        i = 2\n        while True:\n            if is_prime(i):\n                i += 1\n                if i == n:\n                    return i\n\n    def nth_polite_number(n):\n        \"\"\"\n        Find the nth polite number.\n        \"\"\"\n        i = 1\n        while True:\n            if i == n:\n                return nth_prime(i)\n            i += 1\n\n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize the first two polite numbers as 1 and 5\n    polite_numbers = [1, 5]\n    # Initialize the index variable\n    index = 0\n    # Initialize the variable to store the nth polite number\n    nth_polite_number = 0\n    # Loop till we reach the nth polite number\n    while index < n: \n        # Calculate the nth polite number by summing the previous two polite numbers\n        nth_polite_number = polite_numbers[index] + polite_numbers[index - 1]\n        # If the nth polite number is less than or equal to 5, add 5 to it\n        if nth_polite_number <= 5: \n            nth_polite_number += 5\n        # If the nth polite number is greater than 5, subtract 1 from it\n        else: \n            nth_polite_number -= 1\n        # Add the nth polite number to the list of polite numbers\n        polite_numbers.append(nth_polite_number)\n        # Increment the index variable\n        index += 1\n    # Return the nth polite number\n    return nth_polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        Returns True if a number is prime, False otherwise.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_valid_polite(num):\n        \"\"\"\n        Returns True if a number is a valid polite number, False otherwise.\n        \"\"\"\n        return is_prime(num) and is_prime(int(num ** 0.5) + 1)\n\n    polite_count = 0\n    i = 1\n    while polite_count < n:\n        if is_valid_polite(i):\n            polite_count += 1\n        i += 1\n\n    return i"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    This function takes a positive integer n and returns the nth polite number.\n    A polite number is a positive integer that is a palindrome with a certain number of digits.\n    \"\"\"\n    polite_numbers = {}  # dictionary to store polite numbers\n\n    def is_palindrome(n):\n        \"\"\"\n        This function checks if a given number n is a palindrome or not.\n        \"\"\"\n        if n < 0:\n            return False\n        else:\n            temp = n\n            reversed_temp = 0\n            while temp!= 0:\n                remainder = temp % 10\n                reversed_temp = reversed_temp * 10 + remainder\n                temp //= 10\n            return n == reversed_temp\n\n    for i in range(1, 1000000):\n        if is_palindrome(i):\n            polite_numbers[i] = i\n            if len(str(i)) == len(str(i).replace(\"0\", \"\")):\n                break\n\n    if n in polite_numbers:\n        return polite_numbers[n]\n    else:\n        return \"Invalid input.\""
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0:\n        return None\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return is_polite(n // 2) + 1\n    else:\n        return is_polite((n - 1) // 2) + 2"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initializing the first 5 polite numbers\n    polite = [2, 4, 6, 8, 10]\n\n    # Finding the nth polite number using binary search\n    low, high = 0, len(polite) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if polite[mid] == n:\n            return polite[mid]\n        elif polite[mid] < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    # If the nth polite number is not found, then the function returns None\n    return None"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth polite number.\n    The nth polite number is a number that satisfies the following conditions:\n\n    1. The sum of the digits of the number is divisible by 11.\n    2. The sum of the squares of the digits of the number is divisible by 11.\n\n    If the above conditions are satisfied, the function returns the nth polite number.\n    Otherwise, the function returns -1.\n\n    Example:\n    is_polite(5) -> 16 (the 5th polite number)\n    \"\"\"\n\n    def sum_of_digits(n):\n        \"\"\"\n        This function takes an integer n as input and returns the sum of its digits.\n        \"\"\"\n        return sum(int(digit) for digit in str(n))\n\n    def sum_of_squares(n):\n        \"\"\"\n        This function takes an integer n as input and returns the sum of the squares of its digits.\n        \"\"\"\n        return sum(int(digit) ** 2 for digit in str(n))\n\n    if n < 1:\n        return -1\n\n    if n == 1:\n        return 1\n\n    if sum_of_digits(n) % 11 == 0 and sum_of_squares(n) % 11 == 0:\n        return n\n\n    if sum_of_digits(n) % 11 == 0:\n        return n + is_polite(n)\n\n    if sum_of_squares(n) % 11 == 0:\n        return n + is_polite(n)\n\n    return -1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n == 1:\n        return \"First\"\n    elif n == 2:\n        return \"Second\"\n    elif n == 3:\n        return \"Third\"\n    else:\n        polite = \"Fourth\"\n        for i in range(4, n+1):\n            polite = str(math.factorial(i)) + \" \" + polite\n        return polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n == 0:\n        return \"Not a polite number\"\n\n    # Check if n is a multiple of 5\n    if n % 5 == 0:\n        return \"Not a polite number\"\n\n    # Find the number of polite numbers before n\n    count = 0\n    i = 1\n    while i < n:\n        if i % 5 == 1:\n            count += 1\n        i += 1\n\n    # Calculate the nth polite number\n    polite_number = (math.factorial(n) * (10 ** 15)) // math.factorial(count)\n\n    return polite_number"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        if i == len(l1)-1:\n            l2.append(l1[i])\n        else:\n            l2.append(l1[i] + l1[i+1])\n    return l2"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 1:\n        return []\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    for i in range(len(l1)-1):\n        pair_list.append((l1[i], l1[i+1]))\n    return pair_list"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    \"\"\"\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a list containing the elements of li1 that are not present in li2.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing the elements of list1 that are not in list2.\n    '''\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1).symmetric_difference(set(li2)))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing the elements that are present in the first list but not the second list.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer as input n and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 0\n    else:\n        sum_of_powers = 0\n        for i in range(1, n+1):\n            if i % 2 == 1:\n                sum_of_powers += i**4\n        return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize the sum of fourth power to 0\n    sum_fourth_pow = 0\n    \n    # Iterate from 0 to n-1 and add fourth power of each odd number to the sum\n    for i in range(n):\n        # Calculate the fourth power of the current odd number\n        fourth_pow = i*i*i*i\n        \n        # Add the fourth power to the sum\n        sum_fourth_pow += fourth_pow\n    \n    return sum_fourth_pow"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    num = 1\n    \n    while count < n:\n        if num % 2!= 0:\n            sum += num ** 4\n            count += 1\n        num += 2\n    \n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    sum = 0\n    count = 1\n    \n    while count <= n:\n        sum += count ** 4\n        count += 1\n    \n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1]!= '(':\n                return False\n            if char == ']' and stack[-1]!= '[':\n                return False\n            if char == '}' and stack[-1]!= '{':\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i.isalpha():\n            if i in {'(', '{', '['}:\n                stack.append(i)\n            elif i in {')', '}', ']'}:\n                if not stack:\n                    return False\n                if i == ')' and stack[-1] == '(':\n                    stack.pop()\n                elif i == '}' and stack[-1] == '{':\n                    stack.pop()\n                elif i == ']' and stack[-1] == '[':\n                    stack.pop()\n                else:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for token in exp:\n        if token == '(':\n            stack.append(token)\n        elif token == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return \"Not balanced\"\n            top = stack.pop()\n            if top!= '(':\n                return \"Not balanced\"\n    return \"Balanced\" if not stack else \"Not balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the remaining words\n    remaining_words = []\n    # Iterate over the words\n    for word in words:\n        # Check if the length of the word is greater than K\n        if len(word) > K:\n            # Add the remaining word to the list\n            remaining_words.append(word)\n    # Join the remaining words into a single string and return it\n    return''.join(remaining_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    \n    # Loop through each word and remove words with length K\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            del words[i]\n            \n    # Join the list of words into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    # loop through the words and remove words with length K\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    # join the new words into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the final words\n    final_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than or equal to K\n        if len(word) < K:\n            # Add the word to the final words list\n            final_words.append(word)\n    \n    # Join the final words into a string and return it\n    return''.join(final_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npattern = \"dog\"\nresult = occurance_substring(text, pattern)\nprint(\"Match found: {}\".format(result))"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n\n    result = []\n    for match in matches:\n        pos = text.find(match)\n        result.append((match, pos))\n\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        match = re.search(pattern, text)\n        if match:\n            return (match.group(), match.start(), match.end())\n        else:\n            return None\n    except Exception as e:\n        print(\"Error: \", e)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            continue\n        elif i % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0: # even index\n            continue\n        count = 0\n        for j in range(i+1, len(nums), 2): # odd index\n            if nums[j] % 2 == 0: # even number\n                continue\n            count += 1\n            if count == 2: # two odd numbers found\n                return True\n        if count!= 2: # odd number not found\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # loop through every odd index of the list\n    for i in range(1, len(nums), 2):\n        # check if the current index contains odd numbers\n        if not any(num % 2 == 0 for num in nums[i:]):\n            # if not, return False\n            return False\n    # if no odd index is found, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n\n    Args:\n    - nums (list): A list of integers.\n\n    Returns:\n    - bool: True if every odd index contains odd numbers, False otherwise.\n    '''\n\n    # iterate through the list\n    for i in range(len(nums)):\n        # check if the current index is odd\n        if i % 2!= 0:\n            # iterate through the odd numbers in the current index\n            for j in range(len(nums[i])):\n                # check if the current number is odd\n                if nums[i][j] % 2!= 0:\n                    # if a number is not odd, return False\n                    return False\n    # if all the numbers in the list are odd, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if not all(nums[i-1] % 2 == 1 or nums[i] % 2 == 1):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and i >= len(nums)//2:\n            count = 0\n            for num in nums[i:]:\n                if num % 2!= 0:\n                    count += 1\n                else:\n                    break\n            if count == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    for i in range(len(test_str) - 2):\n        if test_str[i] in vowels and test_str[i+1] in vowels and test_str[i+2] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0:\n            prev_char = test_str[i-1]\n            curr_char = test_str[i]\n            if curr_char in vowels and prev_char in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            count += test_str.count(test_str[i])\n        else:\n            if test_str[i] in vowels:\n                count += test_str.count(test_str[i])\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str)-1:\n            if test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a dictionary to store the count of each element\n    counts = {}\n    for elem in arr:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n\n    # find the sum of non-repeated elements\n    non_repeated_sum = 0\n    for elem, count in counts.items():\n        if count == 1:\n            non_repeated_sum += elem\n\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to keep track of the non-repeated elements\n    unique_elements = set(arr)\n    # Initialize the sum variable to 0\n    sum_non_repeated = 0\n    # Iterate over the unique elements\n    for element in unique_elements:\n        # Add the element to the sum\n        sum_non_repeated += element\n    # Return the final sum\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the count of each element in the list\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    \n    # Create a list to store the non-repeated elements\n    non_repeated = []\n    for i in arr:\n        if count[i] == 1:\n            non_repeated.append(i)\n    \n    # Calculate the sum of non-repeated elements\n    sum_non_repeated = sum(non_repeated)\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set of unique elements in the list\n    unique_set = set(arr)\n\n    # initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n\n    # iterate over the unique elements in the set\n    for num in unique_set:\n        # add the unique element to the non-repeated sum\n        non_repeated_sum += num\n\n    # return the non-repeated sum\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements in the list\n    unique_set = set(arr)\n    # convert the set to a list to get the elements in the original order\n    unique_list = list(unique_set)\n    # initialize a variable to store the sum\n    sum_sum = 0\n    # iterate over the unique_list to calculate the sum of non-repeated elements\n    for num in unique_list:\n        # calculate the sum of non-repeated elements\n        sum_sum += num\n    # return the sum of non-repeated elements\n    return sum_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_arr = list(set(arr))\n    return sum(unique_arr)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as an argument and returns the sum of all non-repeated elements in the list.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # calculate the sum of unique elements\n    sum_of_unique = sum(unique_set)\n    # return the sum of unique elements\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Remove duplicates from the list using a set\n    arr = list(set(arr))\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    # Loop through the list and add non-repeated elements to the sum\n    for num in arr:\n        if arr.count(num) == 1:\n            sum_non_repeated += num\n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n\n    # Initialize the sum variable to 0\n    sum_var = 0\n\n    # Iterate through the unique set and add its sum to the sum_var\n    for element in unique_set:\n        sum_var += element\n\n    # Return the sum of non-repeated elements\n    return sum_var"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    This function takes a list as input and returns the sum of all the non-repeated elements in the list.\n    '''\n    seen = set() # Create a set to store the elements in the list\n    result = 0 # Initialize the result variable to zero\n    \n    for num in arr: # Iterate over each element in the list\n        if num not in seen: # Check if the element is already in the set\n            seen.add(num) # Add the element to the set\n            result += num # Add the element to the result variable\n            \n    return result # Return the result variable"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    def pack_duplicates(group):\n        \"\"\"\n        Helper function to pack consecutive duplicates of elements from a group into a single sublist.\n        \"\"\"\n        sublist = list(group)\n        while len(sublist) > 1 and sublist[-1] == sublist[-2]:\n            sublist.pop()\n        return sublist\n\n    grouped_list = groupby(list1)\n    packed_list = [pack_duplicates(group) for key, group in grouped_list]\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if len(list(group)) > 1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[k] for k, g in groupby(list1) if len(list(g)) > 1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(zip(*[list(g) for k, g in groupby(lst)]))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1)\n    packed_list = []\n    for item in grouped_list:\n        if len(list(item)) == 1:\n            continue\n        packed_list.append(list(item))\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        if key!= list1[0]:\n            yield list(group)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group the list by consecutive duplicates\n    groups = groupby(list1)\n    # initialize an empty list to store the sublists\n    sublists = []\n    # iterate over the groups and append the sublists to the final result list\n    for group in groups:\n        if not any(len(list(group)) == 1 for group in groups):\n            # if the sublist is not empty, append it to the result list\n            sublists.append(list(group))\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        if isinstance(item, list):\n            item = tuple(item)\n        if item in sublists:\n            sublists[item] += 1\n        else:\n            sublists[item] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            item_tuple = tuple(item)\n            if item_tuple in count:\n                count[item_tuple] += 1\n            else:\n                count[item_tuple] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary\n    count_dict = {}\n    # Loop through each list in the original list\n    for sublist in list1:\n        # Convert the list to a tuple\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple already exists in the dictionary\n        if sublist_tuple in count_dict:\n            # If it does, increment its value by 1\n            count_dict[sublist_tuple] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a value of 1\n            count_dict[sublist_tuple] = 1\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create a dictionary to store the counts of each sublist\n    sublist_counts = {}\n\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it already exists in the dictionary\n        if tuple(sublist) in sublist_counts:\n            # Increment the count if it does\n            sublist_counts[tuple(sublist)] += 1\n        else:\n            # Otherwise, add the sublist to the dictionary with a count of 1\n            sublist_counts[tuple(sublist)] = 1\n\n    # Return the dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list lst and returns a dictionary where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Initialize an empty dictionary to store the counts\n    counts = {}\n    \n    # Loop through each element of the list\n    for i in range(len(lst)):\n        # Turn each element into a tuple\n        tup = tuple(lst[i])\n        \n        # Check if the tuple is already in the dictionary\n        if tup in counts:\n            # If it is, increment its count by 1\n            counts[tup] += 1\n        else:\n            # If not, add it to the dictionary with a count of 1\n            counts[tup] = 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        item_tuple = tuple(item)\n        if item_tuple not in sublists:\n            sublists[item_tuple] = 1\n        else:\n            sublists[item_tuple] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # create a dictionary to store the unique lists and their occurrences\n    unique_lists = {}\n\n    # loop through each element of the list\n    for element in list1:\n        # if the element is a list, turn it to a tuple and check if it exists in the dictionary\n        if isinstance(element, list):\n            element = tuple(element)\n            if element in unique_lists:\n                # if it does, increment its count by 1\n                unique_lists[element] += 1\n            else:\n                # otherwise, add the tuple and count it as 1\n                unique_lists[element] = 1\n\n    return unique_lists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts of unique sublists\n    counts = {}\n    # Loop through each list in the input list\n    for i in list1:\n        # Turn the list into a tuple\n        tup = tuple(i)\n        # Check if the tuple is already in the dictionary\n        if tup in counts:\n            # Increment the count for the tuple\n            counts[tup] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            counts[tup] = 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Create an empty dictionary\n    count = {}\n    # Iterate through the list\n    for item in lst:\n        # If the item is not a list, skip it\n        if not isinstance(item, list):\n            continue\n        # Convert the list to a tuple and check if it's already in the dictionary\n        tup = tuple(item)\n        if tup in count:\n            count[tup] += 1\n        else:\n            count[tup] = 1\n    # Return the dictionary\n    return count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    combs = []\n    for i in range(1, total_sum+1):\n        for tup in combinations(test_list, len(test_list)):\n            if sum(tup) == i:\n                combs.append(tup)\n    return combs\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    combinations_list = []\n    for i in range(1, total_sum+1):\n        combinations_list.extend(combinations(test_list, i))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Find all possible combinations of tuples in the test_list\n    combs = combinations(test_list, len(test_list[0]))\n\n    # Find the combinations with sums equal to the given sum\n    sums = set()\n    for combo in combs:\n        sum_ = sum(combo)\n        if sum_ == target_sum:\n            sums.add(tuple(combo))\n    return sums"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    # convert the tuple list into a set to remove duplicates\n    test_list = set(test_list)\n    # find all possible combinations of sums with length 2\n    combinations_of_sums_2 = combinations(test_list, 2)\n    # create a set to store the combinations of sums with length 3 or more\n    combinations_of_sums_3_or_more = set()\n    # iterate over the combinations of sums with length 2\n    for combo_2 in combinations_of_sums_2:\n        # check if the second tuple in the combination is a subset of the first tuple in the combination\n        if combo_2[1] in combo_2[0]:\n            # if the second tuple is a subset of the first tuple, add the combination to the set of combinations of sums with length 3 or more\n            combinations_of_sums_3_or_more.add(combo_2)\n    # convert the set of combinations of sums with length 3 or more back to a list and return it\n    return list(combinations_of_sums_3_or_more)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    # Get the length of the list of tuples\n    len_list = len(test_list)\n    # Create a list of tuples to store the sums of each combination\n    sums = []\n    # Iterate over all possible combinations of tuples\n    for i in range(len_list):\n        for j in range(i+1, len_list):\n            # Get the sum of the current combination of tuples\n            sum_combination = sum(test_list[i] + test_list[j])\n            # Add the current sum to the list of sums\n            sums.append(sum_combination)\n    return sums"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    \"\"\"\n    # Iterate through each tuple in the list\n    for i in range(len(test_list)):\n        # Sort the tuples in the list\n        test_list[i] = sorted(test_list[i])\n        # Calculate the sum of the first tuple in the list\n        total = sum(test_list[i][0])\n        # Check if the sum is equal to the sum of the second tuple in the list\n        if total == sum(test_list[i][1]):\n            # Find all the combinations of sums between the first and second tuple in the list\n            for comb in combinations(test_list[i][0], len(test_list[i][1])):\n                print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    total_sum = sum(test_list)\n    print(\"Total sum:\", total_sum)\n\n    for i in range(1, total_sum+1):\n        for tup in combinations(test_list, r=2):\n            if i == sum(tup):\n                print(\"Pair found:\", tup)\n\n    for i in range(2, total_sum+1):\n        for tup in combinations(test_list, r=3):\n            if i == sum(tup):\n                print(\"Triple found:\", tup)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # create a list of tuples from the test list\n    test_tuple_list = []\n    for tup in test_list:\n        test_tuple_list.append(tuple(tup))\n    \n    # find all combinations of sums using itertools.combinations\n    combinations_list = []\n    for i in range(1, len(test_tuple_list[0])+1):\n        for comb in combinations(test_tuple_list, i):\n            combinations_list.append(tuple(comb))\n    \n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a set to store the sums of all tuples\n    sums = set()\n    for tup in test_list:\n        sums.add(sum(tup))\n    \n    # Find the unique combinations of sums\n    unique_combinations = set()\n    for i in range(len(test_list)+1):\n        for tup in combinations(test_list, i):\n            if sum(tup) in sums:\n                unique_combinations.add(tup)\n    \n    # Return the unique combinations of sums\n    return list(unique_combinations)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #sort the tuple list\n    test_list.sort()\n\n    #initialize a list to store the combinations\n    combinations_list = []\n\n    #loop through each pair of tuples in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            #combine the tuples and calculate the sum\n            sum_tuple = (test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1])\n            #add the sum to the list if it is greater than or equal to the target sum\n            if sum_tuple >= target_sum:\n                combinations_list.append(sum_tuple)\n\n    return combinations_list"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            count += 1\n    \n    if count % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisors = []\n    i = 1\n    while i <= math.sqrt(n):\n        if n % i:\n            i += 1\n        else:\n            divisors.append(i)\n            n //= i\n    if n > 1:\n        divisors.append(n)\n    divisors.sort()\n    count_divisors_even = len(divisors) % 2 == 0\n    return count_divisors_even\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    This function will check whether the count of divisors is even or odd.\n    '''\n    # Find the count of divisors of n\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    \n    # If the count is odd, it means the number has an odd count of divisors\n    if count % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0 \n    divisor = 2 \n    while divisor <= math.sqrt(n): \n        if n % divisor == 0: \n            count += 1 \n            if n // divisor == divisor: \n                count += 1 \n        divisor += 1 \n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n//i!= i:\n                divisors.append(n//i)\n    count = len(divisors)\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n    divisors.append(n)\n    return (len(divisors) % 2 == 0)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Calculate the number of divisors\n    divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors += 1\n            if n // i!= i:\n                divisors += 1\n\n    # Check if the count of divisors is even\n    if divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n > 1:\n        count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    #calculate the number of divisors of the number n\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(f\"{n} has an even count of divisors\")\n    else:\n        print(f\"{n} has an odd count of divisors\")\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. \n    \"\"\"\n    # Initialize sum to 0\n    sum_of_subarrays = 0\n\n    # Loop through the array and calculate the sum of odd length subarrays\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j - i + 1 % 2 == 1:\n                sum_of_subarrays += sum(arr[i:j+1])\n\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize the sum variable\n    sum = 0\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the length of the current subarray is odd\n        if i % 2!= 0:\n            # Add the current subarray's sum to the sum variable\n            sum += arr[i:i+2].sum()\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    sum_odd = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            sum_odd += sum(arr[i:j])\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    sum_odd = 0\n    n = len(arr)\n    for i in range(1, n-1):\n        if i == 0 or i == n-1:\n            continue\n        if i % 2 == 0:\n            continue\n        left = i - 1\n        right = i + 1\n        while left >= 0 and right < n and arr[left] == arr[right]:\n            left -= 1\n            right += 1\n        sum_odd += right - left - 1\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum_odd = sum_odd + arr[i]\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    odd_sum = 0\n    # calculate sum of first odd length subarray\n    for i in range(n):\n        if i % 2 == 1:\n            odd_sum += arr[i]\n    # calculate sum of remaining odd length subarrays\n    for i in range(1, n):\n        if i % 2 == 1:\n            odd_sum -= arr[i-1]\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    # create a dictionary to store the sum of odd length subarrays\n    sum_dict = {}\n    # loop through the array\n    for i in range(len(arr)):\n        # check if the current length is odd\n        if i == 0 or arr[i] % 2!= 0:\n            # if it is, add the current element to the sum\n            if i in sum_dict:\n                sum_dict[i] += arr[i]\n            else:\n                sum_dict[i] = arr[i]\n    # calculate the sum of the odd length subarrays\n    sum_odd_length = sum(sum_dict.values())\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    \n    for i in range(n-2):\n        left = i\n        right = i + 3\n        while left >= 0 and right < n and arr[left] % 2 == 0 and arr[right] % 2 == 0:\n            left -= 1\n            right += 1\n        if right - left - 1 % 2 == 1:\n            sum_odd += arr[left+1:right].sum()\n            \n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize the sum variable\n    sum_odd_len = 0\n\n    # Iterate over the array\n    for i in range(len(arr)):\n\n        # If the current element is odd, add it to the sum_odd_len variable\n        if arr[i] % 2!= 0:\n            sum_odd_len += arr[i]\n\n    return sum_odd_len"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_arr = [0] * (len(arr) + 1)\n    sum_arr[0] = 0\n    for i in range(1, len(arr) + 1):\n        sum_arr[i] = sum_arr[i-1]\n        if i % 2!= 0:\n            sum_arr[i] += arr[i-1]\n    return sum_arr[len(arr)]"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n\n    # Convert the RGB values to HSV values\n    r = r / 255\n    g = g / 255\n    b = b / 255\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    h = 0\n    s = 0\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = h * 60\n\n    if h < 0:\n        h += 360\n\n    v = cmax\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * cmax - 1))\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert the input rgb color to hsv color using the following formula:\n    # h = (max(r, g, b) + min(r, g, b))/2\n    # s = (max(r, g, b) - min(r, g, b))/max(r, g, b)\n    # v = max(r, g, b)\n    # hsv = [h, s, v]\n\n    # Find the maximum and minimum values of the r, g, and b color components.\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n\n    # Calculate the hue, saturation, and value components based on the input rgb color.\n    if max_rgb == min_rgb:\n        h = 0\n    elif max_rgb == r and g >= b:\n        h = (g - b) / (max_rgb - min_rgb)\n    elif max_rgb == r and g < b:\n        h = (g - b) / (max_rgb - min_rgb) + 6\n    elif max_rgb == g:\n        h = (b - r) / (max_rgb - min_rgb) + 2\n    elif max_rgb == b:\n        h = (r - g) / (max_rgb - min_rgb) + 4\n    else:\n        h = (r - g) / (max_rgb - min_rgb)\n\n    if max_rgb == 0:\n        s = 0\n    else:\n        s = (max_rgb - min_rgb) / max_rgb\n\n    v = max_rgb\n\n    # Convert the hsv color components to hsv color model and return it as a list.\n    hsv = [h * 60, s, v]\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    r, g, b = r/255, g/255, b/255\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    h = 0\n    s = 0\n    v = max_val\n\n    if max_val!= min_val:\n        delta = max_val - min_val\n        s = delta / max_val\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h *= 60\n        if h < 0:\n            h += 360\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Find delta value\n    delta = max_val - min_val\n    \n    # Find the hue\n    if max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    # Find the saturation\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_val\n    \n    # Find the value\n    v = max_val\n    \n    # Find the hue in degrees\n    h *= 60\n    if h < 0:\n        h += 360\n    \n    # Convert to hsv\n    hsv = (h, s, v)\n    \n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = (g - b) / delta\n    elif cmax == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n        \n    h = h * 60 if h < 0 else h * 60\n    \n    if h < 0:\n        h += 360\n    \n    v = cmax\n    \n    s = delta / (1 - abs(2 * cmax - 1)) if delta!= 0 else 0\n    \n    return int(h * 255), int(s * 255), int(v * 255)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # calculate max and min values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # calculate the difference between the max and min values\n    delta = max_value - min_value\n\n    # calculate the value of hsv based on the type of color\n    if max_value == min_value:\n        h = 0 # grayscale\n    else:\n        if r == max_value:\n            h = (g - b) / delta\n        elif g == max_value:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        # convert to degrees and correct for 360 degrees\n        if h < 0:\n            h += 6\n\n        # calculate the value of s based on the value of h\n        if max_value == 0:\n            s = 0\n        else:\n            s = delta / max_value\n\n        # calculate the value of v based on the value of h and the type of color\n        if max_value == r:\n            v = (g - b) / delta\n        elif max_value == g:\n            v = (b - r) / delta\n        else:\n            v = (r - g) / delta\n\n    # return the hsv values as a tuple\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert r, g, b values to float\n    r, g, b = float(r)/255, float(g)/255, float(b)/255\n    # Find the maximum and minimum values of r, g, b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    # Find the distance between max and min values\n    delta = max_val - min_val\n    # Find the hue\n    if max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    # Find the saturation\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_val\n    # Find the value\n    v = max_val\n    # Convert hue to degrees and normalize it\n    if h < 0:\n        h += 6\n    hue = h * 60\n    # Convert hue and saturation to percentages\n    hue, s = round(hue), round(s*100)\n    # Convert value to percentage\n    v = round(v*100)\n    # Return the hsv tuple\n    return (hue, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert r, g, and b to floats\n    r, g, b = map(float, (r, g, b))\n\n    # Find the maximum and minimum values of r, g, and b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    delta = max_val - min_val\n\n    # Calculate the value of h\n    if max_val == 0:\n        h = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h *= 60\n\n    # Calculate the value of s\n    if max_val == 0:\n        s = 0\n    else:\n        if delta == 0:\n            s = 0\n        else:\n            s = delta / max_val\n\n    # Calculate the value of v\n    v = max_val\n\n    # Return the hsv values as a tuple\n    return (int(h), int(s * 100), int(v * 100))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert the RGB values to HSV values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = 60 * ((g-b)/delta)\n    elif max_val == g:\n        h = 60 * (2 + (b-r)/delta)\n    elif max_val == b:\n        h = 60 * (4 + (r-g)/delta)\n    \n    if delta == 0:\n        s = 0\n    else:\n        s = delta/max_val\n    \n    v = max_val\n    \n    # Convert the HSV values to RGB values\n    if s == 0:\n        h_rgb = [h, h, h]\n    else:\n        h_rgb = []\n        h_i = int(h/60)\n        f = h/60 - h_i\n        \n        p = v*(1-s)\n        q = v*(1-(s*f))\n        t = v*(1-(s*(1-f)))\n        \n        if 0 <= h_i < 1:\n            h_rgb = [v, t, p]\n        elif 1 <= h_i < 2:\n            h_rgb = [q, v, p]\n        elif 2 <= h_i < 3:\n            h_rgb = [p, v, t]\n        elif 3 <= h_i < 4:\n            h_rgb = [p, q, v]\n        elif 4 <= h_i < 5:\n            h_rgb = [t, p, v]\n        elif 5 <= h_i:\n            h_rgb = [v, p, q]\n    \n    return h_rgb"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes in RGB values and converts them to HSV values.\n\n    Args:\n        r (int): Red value\n        g (int): Green value\n        b (int): Blue value\n\n    Returns:\n        h (float): Hue\n        s (float): Saturation\n        v (float): Value\n    '''\n    # Convert RGB to HSV\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if delta == 0:\n        h = 0\n        s = 0\n        v = max_val\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        if h < 0:\n            h += 6\n\n        h *= 60\n        if h < 0:\n            h += 360\n\n        s = delta / max_val\n\n        v = max_val\n\n    return h, s, v"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n            \n    if even_count == 0 or odd_count == 0:\n        return \"There are no even or odd numbers in the list.\"\n    else:\n        return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even = 1\n    odd = 1\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even *= num\n            product *= even\n        else:\n            odd *= num\n            product *= odd\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns their product of the first even and odd numbers.\n    \"\"\"\n    # Initialize variables\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    # Iterate through the list\n    for num in lst:\n        # If the number is even, increment the even count\n        if num % 2 == 0:\n            even_count += 1\n        # If the number is odd, increment the odd count\n        elif num % 2!= 0:\n            odd_count += 1\n            \n        # If the even count is equal to odd count, multiply the product\n        if even_count == odd_count:\n            product *= num\n            \n    # Return the product\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            break\n\n    if even_count > 0 and odd_count > 0:\n        product = even_count * odd_count\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    product = 1\n    for num in lst:\n        if num % 2 == 0:\n            product *= num\n        else:\n            product *= num + 1\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers and returns the product of the first even and odd number in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            break\n            \n    if even_count > 0 and odd_count > 0:\n        product = lst[0] * lst[1]\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # initialize variables\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    # loop through the list\n    for num in lst:\n        # check if the number is even\n        if num % 2 == 0:\n            even_count += 1\n        # check if the number is odd\n        else:\n            odd_count += 1\n            \n        # check if the product of even and odd counts has been reached\n        if even_count * odd_count == 0:\n            # if so, multiply the even and odd counts and set the product to the result\n            product = even_count * odd_count\n            break\n            \n    # return the product\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = odd_num = 1\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_num = even_num * num\n            product = product * even_num\n        else:\n            odd_num = odd_num * num\n            product = product * odd_num\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n        elif num % 2 == 1:\n            product *= num\n\n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = tuple(int(x) for x in test_str.split(','))\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string by comma and space\n    str_list = test_str.split(', ')\n    # Convert each string in the list to integer\n    int_list = [int(x) for x in str_list]\n    # Return the converted integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_int_tuple = []\n    for i in test_str:\n        try:\n            int_num = int(i)\n            str_int_tuple.append(int_num)\n        except ValueError:\n            pass\n    return tuple(str_int_tuple)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    int_list = []\n    for string in str_list:\n        int_list.append(int(string))\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n    \n    # Initialize an empty list to store the integer values\n    int_list = []\n    \n    # Loop through each character in the list\n    for char in char_list:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Convert the character to an integer and append it to the list\n            int_list.append(int(char))\n    \n    # Return the integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(i) for i in test_str.split()])"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of strings\n    lst = test_str.split(',')\n    # Convert each string to an integer\n    int_lst = [int(x) for x in lst]\n    # Convert the list of integers to a tuple\n    tup = tuple(int_lst)\n    return tup"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert a tuple string to an integer tuple.\n\n    Parameters:\n    test_str (str): a tuple string in the format \"(a,b,c)\"\n\n    Returns:\n    int_tuple (tuple): an integer tuple representation of the input tuple string.\n    \"\"\"\n    # convert the string to a list of strings\n    str_list = test_str.strip('()').split(',')\n\n    # convert each string to an integer and append it to a list\n    int_list = []\n    for str_elem in str_list:\n        int_list.append(int(str_elem.strip()))\n\n    # return the integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # Split the string into a tuple of strings\n    test_tuple = test_str.split(',')\n\n    # Convert each string in the tuple to an integer\n    int_tuple = tuple([int(x) for x in test_tuple])\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert string to list\n    str_list = list(test_str)\n    # initialize integer list\n    int_list = []\n    # iterate over list and convert each element to integer\n    for item in str_list:\n        int_list.append(int(item))\n    # convert integer list to tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    :param a: sorted list of elements\n    :param x: the value to be inserted\n    :return: the index of the right insertion point\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    idx = bisect.bisect_right(a, x)\n    return idx"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    This function takes a list 'a' and a value 'x' as input, and returns the index where\n    the value should be inserted to maintain the sorted order of the list.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n\n    # Use bisect to find the insertion point\n    index = bisect.bisect_right(a, x)\n\n    # Return the insertion point or -1 if not found\n    return index if index < len(a) and a[index] == x else -1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    if idx == len(a):\n        return idx\n    elif idx == 0 or a[idx-1]!= x:\n        return idx\n    else:\n        return idx - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i if i!= len(a) and a[i] == x else None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b.*'\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return 'No matches found'\n    else:\n        return matches[0]"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{3}b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    matches = re.findall(pattern, text, re.DOTALL)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\bb{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[^b]*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a.*?b{3}.\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str, test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # convert the string to a list\n    test_list = list(test_str)\n    # create the new tuple\n    new_tup = tuple(test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Create a new tuple by combining the two lists and the string\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the given list and string to tuples\n    tup_list = tuple(test_list)\n    tup_str = tuple(test_str)\n    # Combine the tuples into a new tuple\n    new_tup = tup_list + tup_str\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple((test_list, test_str))"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple_list = [test_list, test_str]\n    new_tuple = tuple(new_tuple_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple((test_list + [test_str]))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the list to a tuple and join it with the string\n    new_tuple = tuple(test_list)\n    new_tuple_str = str(test_str)\n    # Split the new tuple string into a list\n    new_tuple_list = new_tuple_str.split(',')\n    # Create a new tuple from the list\n    new_tuple = tuple(new_tuple_list)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if sum([1 for num in nums if num == nums[i]]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    \n    if even_count == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([x for x in nums[i:i+2] if x%2 == 0])) == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if not all(nums[i:i+2] % 2 == 0):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        if even_count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(filter(lambda x: x % 2 == 0, nums[i:i+2])))!= 2:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    # initialize a counter for the even numbers in the list\n    even_count = 0\n    # iterate over the indices of the list\n    for i in range(len(nums)):\n        # if the current index is even, check if the number at that index is even\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            # if so, increment the even_count\n            even_count += 1\n    # return whether all even indices contain even numbers\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(x % 2 == 0 for x in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            for j in i:\n                new_tup.append(j)\n        else:\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = []\n    for elem in test_tup:\n        if type(elem)!= tuple:\n            test_list.append(elem)\n    return tuple(test_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # initialize an empty list to store the non-tuple elements of the input tuple\n    non_tuple_elements = []\n    # iterate through each element of the input tuple\n    for element in test_tup:\n        # if the element is a tuple, recursively call the function on it\n        if type(element) == tuple:\n            non_tuple_elements.extend(remove_nested(element))\n        # if the element is not a tuple, add it to the non_tuple_elements list\n        else:\n            non_tuple_elements.append(element)\n    # return the non_tuple_elements list as the result of the function\n    return non_tuple_elements"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            while test_tup[i]:\n                del test_tup[i]\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [i for tup in test_tup for i in tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [x for x in test_tup if not isinstance(x, tuple)]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_list = []\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            result_list.extend(elem)\n        else:\n            result_list.append(elem)\n    return tuple(result_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for subitem in item:\n                new_tup.append(subitem)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = [num for tup in test_tup for num in tup]\n    return [tup for tup in flat_list if not isinstance(tup, tuple)]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # check if the given tuple is a tuple or not\n    if isinstance(test_tup, tuple):\n        # loop through each element in the tuple\n        for elem in test_tup:\n            # check if the element is also a tuple or not\n            if isinstance(elem, tuple):\n                # remove the nested tuple\n                test_tup = test_tup[:test_tup.index(elem)]\n            else:\n                # remove the element from the tuple\n                test_tup = tuple(elem for elem in test_tup if elem!= elem)\n    return test_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_lists(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n\n    # Initialize last index as -1\n    last_index = -1\n\n    # Iterate through the array and check if the current element is equal to the target element\n    for i in range(len(arr)):\n        if arr[i] == x:\n            # If it is, update the last index\n            last_index = i\n\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes an array and an element x as input, and returns the last position of the element in the sorted array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments:\n    - arr: the sorted array of integers\n    - x: the integer element to search for\n\n    This function returns the index of the last occurrence of x in the array.\n    If the element is not found, the function returns -1.\n    \"\"\"\n    # find the index of the last occurrence of x in the array\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i == -1:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes an array and an element x and returns the last position of the element x in the array.\n    \"\"\"\n    i = 0\n    while i < len(arr):\n        if arr[i] == x:\n            return i\n        i += 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    This function takes in an array and a value x. It returns the last index of the element in the array that is equal to x.\n    '''\n    i = len(arr) - 1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    \n    if arr[0] == x:\n        return 0\n    \n    if arr[len(arr)-1] == x:\n        return len(arr)-1\n    \n    for i in range(1,len(arr)-1):\n        if arr[i] == x:\n            return i\n    \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a Python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # initialize last position\n    last_position = -1\n    # initialize flag to check if element is present or not\n    is_present = False\n    # loop through array and check if element is present\n    for i in range(len(arr)):\n        if arr[i] == x:\n            # if element is present, update last position and flag\n            last_position = i\n            is_present = True\n            break\n    # if element is not present, return -1\n    if not is_present:\n        return -1\n    # otherwise, return last position\n    else:\n        return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    j = len(arr) - 1\n\n    while i <= j:\n        mid = (i + j) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            i = mid + 1\n        else:\n            j = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes an array and a target value as inputs and returns the index of the last occurrence of the target value.\n\n    Args:\n    arr (list): A sorted list.\n    x (int): The target value.\n\n    Returns:\n    int: The last index of the target value in the sorted array.\n\n    Raises:\n    ValueError: If the target value is not found in the sorted array.\n    \"\"\"\n    # Initialize the last index to -1\n    last_index = -1\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element matches the target value, update the last index\n        if arr[i] == x:\n            last_index = i\n    \n    # Raise a ValueError if the target value is not found in the sorted array\n    if last_index == -1:\n        raise ValueError(f\"{x} not found in the array\")\n    \n    # Return the last index of the target value\n    return last_index"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a\\w*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*?b$'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key in dict:\n        total_sum += dict[key]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dictionary):\n    '''\n    This function takes a dictionary as input and returns the sum of all its items.\n    '''\n    total = 0\n    for item in dictionary:\n        total += dictionary[item]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for item in dict.values():\n        sum_of_items += item\n    return sum_of_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 0, n\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    print(\"The sum of odd natural numbers within the range\", l, \"and\", r, \"is\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize variables\n    total = 0\n    i = 1\n    # loop until i is greater than or equal to n\n    while i <= n:\n        # check if i is odd\n        if i % 2!= 0:\n            # add i to the total\n            total += i\n        # increment i\n        i += 1\n    # return the total\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n    \n    total = 0\n    \n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    \n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    odd_sum = 0\n    \n    while l <= r:\n        if l % 2!= 0:\n            odd_sum += l\n        l += 1\n    \n    return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    print(\"The sum of all odd natural numbers within the given range is:\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    total = 0\n    \n    for i in range(l, r+1, 2):\n        total += i\n        \n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:  # check if the number is odd\n            sum += i  # add it to the sum if it is odd\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0  \n    for i in arr:  \n        sum += i  \n    return sum  "
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through the array\n    for i in arr:\n        # add each element to the sum variable\n        sum += i\n    # return the sum\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_array(arr):\n    '''\n    This function takes an array as input and returns the sum of the array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Use bitwise operators to rotate the number\n    n = (n << d) | (n >> (32-d))\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    n = n >> (32 - d)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Calculate the maximum number of bits that can be shifted\n    max_shift = 32 - d % 32\n\n    # Calculate the number of bits to be shifted and the number of bits to be shifted by\n    bits_to_shift = d % 32\n    shift_amount = d // 32\n\n    # Shift the number to the left by shift_amount bits\n    shifted_n = (n << shift_amount) & 0xffffffff\n\n    # Shift the shifted number to the left by bits_to_shift bits\n    rotated_n = (shifted_n << bits_to_shift) & 0xffffffff\n\n    # Return the rotated number\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return ((n << d) & 0xFFFFFFFF) | ((n >> (32 - d)) & 0xFFFFFFFF)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    result = 0\n    count = 0\n    \n    while d > 0:\n        if d & 1:\n            result = (result << 1) | (n & mask)\n        else:\n            result = result << 1\n        n = n >> 1\n        d = d >> 1\n        count += 1\n    \n    return result, count"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    shift = d % 32\n    return ((n << shift) | (n >> (32-shift)))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d) | (n>>(32-d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    while d > 31:\n        d = d - 32\n    for i in range(d):\n        n = (n << 1) | ((n >> 31) & 1)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Create a new number by shifting the bits of the original number to the left by d positions.\n    new_num = (n << d) & 0xffffffff\n    # Return the new number.\n    return new_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    while d > 31:\n        n = (n << 1) ^ (n >> 31)\n        d -= 32\n    if d == 0:\n        return n\n    else:\n        return (n << d) | (n >> (32-d))"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    This function removes all whitespaces from a string using regular expressions.\n    \"\"\"\n    # Use regular expressions to replace all whitespaces with an empty string\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # remove all occurrences of multiple consecutive spaces\n    text = re.sub(' +','', text)\n    # remove all occurrences of single spaces\n    text = re.sub(' +', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expression to remove all whitespaces\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    # Regular expression to match all spaces in the string\n    pattern = re.compile(r'\\s+')\n    \n    # Use the match() method to find all occurrences of the pattern in the string\n    matches = re.findall(pattern, text)\n    \n    # Loop through the matches and remove each one by concatenating the adjacent characters\n    result = ''\n    for match in matches:\n        result += ''.join(match)\n    \n    # Return the modified string\n    return result"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(x + 1):\n        if i == x:\n            continue\n        elif i == y:\n            continue\n        elif i == z:\n            continue\n        elif i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and z == x:\n        count += 1\n    if y == z and x == y:\n        count += 1\n    if z == x and y == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if x == y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and y == z and x == z:\n        count += 1\n    if x!= y and y!= z and x!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        for j in range(i+1, y+1):\n            for k in range(j+1, y+1):\n                if i == x or j == y or k == z:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and y == z and x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(min(x, y), max(x, y)):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(max(x, y, z)):\n        if i == x and x == y and x == z:\n            count += 1\n        elif i == y and y == x and y == z:\n            count += 1\n        elif i == z and z == x and z == y:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(x, y + 1):\n        if i == x:\n            continue\n        elif i == y:\n            continue\n        elif i == z:\n            continue\n        elif i == x + 1 or i == y - 1 or i == z + 1:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Traverse the array to find the smallest element\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    # If the smallest element is the last element, no rotations are required\n    if min_val == arr[n-1]:\n        return 0\n    # Find the first occurrence of the smallest element in the array\n    first_occurrence = -1\n    for i in range(n):\n        if arr[i] == min_val:\n            first_occurrence = i\n            break\n    # If the smallest element is not the first element, find the last occurrence of the smallest element\n    if first_occurrence!= 0:\n        last_occurrence = -1\n        for i in range(first_occurrence-1, -1, -1):\n            if arr[i] == min_val:\n                last_occurrence = i\n                break\n    # If the smallest element is the first element, there is only one rotation\n    elif first_occurrence == 0:\n        return 1\n    # Count the number of rotations required to generate the sorted array\n    count = 0\n    if first_occurrence == n-1:\n        count += 1\n    else:\n        count += 1\n        count += n-first_occurrence-1\n    if last_occurrence == n-1:\n        count += 1\n    else:\n        count += 1\n        count += n-last_occurrence-1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "The time complexity of this approach is O(n log n) as we are rotating the array by shifting the elements one position to the right. The space complexity is also O(n) as we are creating a new array to store the rotated array."
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Mark the first element as 1\n    arr[0] = 1\n\n    # Traverse the array\n    for i in range(1, n):\n        # Check if the current element is already 1\n        if arr[i] == 1:\n            continue\n\n        # Find the smallest element that is greater than the current element\n        j = i\n        while j > 0 and arr[j] < arr[j-1]:\n            arr[j], arr[j-1] = arr[j-1], arr[j]\n            j -= 1\n\n        # If the current element is greater than the smallest element, swap it with the next element\n        if arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]\n\n    # Traverse the array from the end and count the number of 1's\n    count = 0\n    for i in range(n-2, -1, -1):\n        if arr[i] == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return 0\n    return 1\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    n = len(arr)\n    # Find the smallest element in the array\n    min_val = min(arr)\n    # Find the largest element in the array\n    max_val = max(arr)\n    # Initialize a variable to count the number of rotations\n    count = 0\n    # Loop through all possible rotations\n    for i in range(n):\n        # Create a new array by rotating the original array\n        new_arr = arr[(i + min_val) % n:(i + max_val) % n+1]\n        # Check if the new array is sorted\n        if new_arr == sorted(new_arr):\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the minimum and maximum elements in the array\n    min_val = min(arr)\n    max_val = max(arr)\n    # Find the gap between two adjacent elements in the array\n    gap = max_val - min_val\n    # Find the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(gap, n):\n        # Calculate the new position of the first element\n        new_pos = (i - gap) % n\n        # If the new position is not equal to the current position, increment the count of rotations\n        if arr[new_pos] < arr[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. \n    '''\n    n = len(arr)\n    # check if the array is already sorted\n    if is_sorted(arr):\n        return 0\n    \n    # if not, perform binary search to find the pivot index\n    lo = 0\n    hi = n - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if arr[mid] < arr[hi]:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    \n    # use the pivot index to find the minimum element\n    min_elem = arr[hi]\n    # move the pivot element to the end of the array\n    arr[hi], arr[n - 1] = arr[n - 1], arr[hi]\n    # count the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(n):\n        if arr[i] < min_elem:\n            min_elem = arr[i]\n            count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i+1\n        while j < n and arr[j] < arr[i]:\n            j += 1\n        count += j-i-1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function counts the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # Initialize two pointers, one for each side of the array\n    left = 0\n    right = n - 1\n\n    # Initialize a counter to keep track of the number of rotations required\n    count = 0\n\n    # While the left pointer is less than the right pointer\n    while left < right:\n        # If the left element is greater than the right element, swap them\n        if arr[left] > arr[right]:\n            arr[left], arr[right] = arr[right], arr[left]\n            count += 1\n        # Move the left pointer to the right\n        left += 1\n        # Move the right pointer to the left\n        right -= 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # count rotations to sort the array\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return i+1\n    return 0\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n\n    if n < 0:\n        return False\n\n    # calculate square root of n\n    root = int(n ** 0.5) + 1\n\n    # check if root is a perfect square\n    if root * root == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    import math\n    \n    # check if the number is a perfect square\n    root = math.sqrt(n)\n    if root == int(root):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check if the given number is a perfect square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    # base case: square root of 1 is 1\n    if n == 1:\n        return True\n    # check if square root of n is an integer\n    sqrt_n = int(n**0.5)\n    # if it is, check if the square root of n is equal to the original n\n    if sqrt_n**2 == n:\n        return True\n    # if not, then check if the square root of n is less than the original n\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 0\n    num = n\n    while num > 0:\n        i += 1\n        num //= 10\n    return i == 1"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Checks if a given number is a perfect square or not.\n    \"\"\"\n    sqrt_n = int(n ** 0.5) + 1 if n % int(n ** 0.5) == 0 else int(n ** 0.5)\n    return sqrt_n ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Check if the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n\n    # Check if the square root of n is an integer\n    sqrt_n = int(math.sqrt(n))\n    if sqrt_n**2 == n:\n        return True\n\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if n is a perfect square, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    sqrt_n = int(n ** 0.5)\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # Initialize the square root to 1\n    square_root = 1\n\n    # Initialize the variable to store the difference between the square root and the given number\n    difference = n - square_root * square_root\n\n    # Continue checking until the difference between square root and given number is zero\n    while difference > 0:\n        # Update the square root\n        square_root += difference / square_root\n\n        # Update the difference between square root and given number\n        difference = n - square_root * square_root\n\n    # If the loop completes without finding any difference, then the given number is a perfect square\n    return True if difference == 0 else False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n    else:\n        a = 0\n        b = n\n        while b - a > 1:\n            mid = (a + b) // 2\n            if mid * mid == n:\n                return True\n            elif mid * mid < n:\n                a = mid\n            else:\n                b = mid\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Checks whether a given number is a perfect square or not.\n    \"\"\"\n    # Helper function to check if a given number is a perfect square or not\n    def is_square(x):\n        \"\"\"\n        Checks whether a given number x is a perfect square or not.\n        \"\"\"\n        if x < 2:\n            return True\n        y = int(x ** 0.5)\n        return y * y == x\n\n    # Check if the input number is a perfect square\n    if is_square(n):\n        print(f\"{n} is a perfect square.\")\n    else:\n        print(f\"{n} is not a perfect square.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return arr[0] % 2 == 0\n    \n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    product = 1\n\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        print(\"The product of numbers in the list is even.\")\n    else:\n        print(\"The product of numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n    for i in lists:\n        for j in i:\n            if j > max_sum:\n                max_sum = j\n                result = [j]\n            elif j == max_sum and j not in result:\n                result.append(j)\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_lists = []\n\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_lists = [lst]\n        elif sum(lst) == max_sum:\n            max_lists.append(lst)\n\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')  # Initialize max sum to negative infinity\n    max_list = []  # Initialize max list to empty list\n\n    # Loop through each list in the input list of lists\n    for sublist in lists:\n        # Calculate the sum of the elements in the sublist\n        sublist_sum = sum(sublist)\n\n        # Check if the sum of the sublist is greater than the current max sum\n        if sublist_sum > max_sum:\n            # If yes, update the max sum and max list\n            max_sum = sublist_sum\n            max_list = sublist\n\n    # Return the max list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = -float('inf')\n    max_list = []\n\n    # Iterate through each sublist in the outer list\n    for sublist in lists:\n        # Calculate the sum of the elements in the sublist\n        current_sum = sum(sublist)\n\n        # If the current sum is greater than the maximum sum, update max_sum and max_list\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n\n    # Return the maximum sum and the corresponding sublist\n    return max_sum, max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    # Find the maximum sum in the list\n    max_sum = max([sum(row) for row in lists])\n\n    # Initialize an empty list to store the final result\n    result = []\n\n    # Iterate over the lists and add the elements of the row that add up to the maximum sum\n    for row in lists:\n        if sum(row) == max_sum:\n            result.extend(row)\n\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n\n    for i, sublist in enumerate(lists):\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    \n    for lst in lists:\n        sum = 0\n        for num in lst:\n            sum += num\n        if sum > max_sum:\n            max_sum = sum\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the maximum sum and list as None\n    max_sum = None\n    max_list = None\n    \n    # Loop through each list in the input list of lists\n    for lst in lists:\n        # Initialize a variable to store the current sum\n        current_sum = 0\n        \n        # Loop through each element in the list\n        for num in lst:\n            # Add the element to the current sum\n            current_sum += num\n            \n            # If the current sum is greater than the maximum sum so far, update the maximum sum and list\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lst\n    \n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize variables\n    max_sum = 0\n    max_list = []\n\n    # loop through each list in the input list\n    for lst in lists:\n        # calculate the sum of the elements in the list\n        total_sum = sum(lst)\n        # if the sum is greater than the current max sum, update max_sum and max_list\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_list = lst\n\n    # return the max_list\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    curr_run = 0\n    curr_upper = False\n\n    # Loop through the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            # If it is, increment the current run and reset the current uppercase flag\n            curr_run += 1\n            curr_upper = True\n        else:\n            # If it's not, check if the current run is longer than the previous longest run\n            if curr_run > max_run and curr_upper:\n                max_run = curr_run\n            # Reset the current run and uppercase flag\n            curr_run = 0\n            curr_upper = False\n\n    # Check if the last character was uppercase\n    if curr_upper:\n        max_run += 1\n\n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 1\n    curr_run = 1\n    prev_char = test_str[0]\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            if test_str[i].isupper() and not test_str[i].islower():\n                curr_run += 1\n            elif test_str[i].islower() and test_str[i].isupper():\n                if curr_run > max_run:\n                    max_run = curr_run\n                curr_run = 1\n        else:\n            if test_str[i].isupper() and not test_str[i].islower():\n                curr_run = 1\n            elif test_str[i].islower() and test_str[i].isupper():\n                curr_run = 1\n        prev_char = test_str[i]\n\n    if curr_run > max_run:\n        max_run = curr_run\n\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n\n    # Loop through the string\n    for i in range(len(test_str)):\n        # If the character is uppercase, add it to the current run\n        if test_str[i].isupper():\n            current_run += 1\n        # If the character is not uppercase, reset the current run and move on to the next character\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    max_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n            if uppercase_count > max_run:\n                max_run = uppercase_count\n        else:\n            uppercase_count = 0\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isupper():\n            curr_run += 1\n            max_run = max(max_run, curr_run)\n        else:\n            curr_run = 0\n        i += 1\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    # initialize variables\n    count = 0\n    start = 0\n    max_run = 0\n\n    # iterate through the string\n    for i in range(len(test_str)):\n        # check if the current character is uppercase\n        if test_str[i].isupper():\n            # increment the count of uppercase characters\n            count += 1\n            # check if the count of uppercase characters is greater than the current max_run\n            if count > max_run:\n                # update max_run\n                max_run = count\n                # update start position\n                start = i - count + 1\n        else:\n            # reset count to 0 if the current character is not uppercase\n            count = 0\n\n    # return the maximum run of uppercase characters\n    return test_str[start:start+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 0\n    start = 0\n    max_count = 0\n    max_start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_start = start\n        else:\n            count = 0\n            start = i + 1\n    return test_str[max_start:max_start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers and returns the first odd number in the list.\n    If there is no odd number in the list, it returns None.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a list of numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The first odd number in the list.\n\n    Raises:\n        ValueError: If the list is empty.\n    \"\"\"\n    if not nums:\n        raise ValueError(\"The list is empty.\")\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    elif len(set(test_tup)) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_set = set(K)\n    for tup in test_tup:\n        if set(tup) == k_set:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes two parameters:\n    - test_tup: a tuple of strings to be checked for the K value\n    - K: the value to be searched for in the tuple\n    The function returns a boolean value indicating whether the K value is present in the tuple or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return False\n    \n    for tup in test_tup:\n        if len(tup)!= K:\n            return False\n    \n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    \n    for i in range(K):\n        if test_tup[i] not in K:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two input tuples must have the same length.')\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] >= test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same number of elements.\")\n        return None\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if the length of both tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must be of equal length!\")\n        return\n    \n    # Loop through each element in the second tuple\n    for i in range(len(test_tup2)):\n        # Check if the element in the second tuple is smaller than the element in the first tuple\n        if test_tup2[i] < test_tup1[i]:\n            print(\"The element in the second tuple is smaller than the corresponding element in the first tuple!\")\n            return\n    \n    # If all elements in the second tuple are smaller than or equal to their corresponding elements in the first tuple, print a success message\n    print(\"All elements in the second tuple are smaller than or equal to their corresponding elements in the first tuple.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    }
]