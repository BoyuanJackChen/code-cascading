[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup1[i] == test_tup2[i]:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Given two tuples, returns a tuple containing all the elements that are common to both tuples.\n    \"\"\"\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return tuple(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.append(item)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # create a set of unique elements from the two tuples\n    unique_set1 = set(test_tup1)\n    unique_set2 = set(test_tup2)\n    \n    # find the intersection of the two sets\n    shared_set = unique_set1.intersection(unique_set2)\n    \n    # convert the set to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared.append(element)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Find the intersection of the two lists\n    intersection = set(test_tup1) & set(test_tup2)\n    \n    # Return the shared elements as a list\n    return list(intersection)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_list.append(element)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Initialize an empty set to store the shared elements\n    shared_set = set()\n\n    # Iterate through the first tuple and check if each element is in the second tuple\n    for elem in test_tup1:\n        if elem in test_tup2:\n            # Add the element to the shared_set\n            shared_set.add(elem)\n\n    # Convert the shared_set to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers using the Sieve of Eratosthenes algorithm.\n    '''\n    # create a boolean list of size n+1 and initialize all elements as True\n    is_prime = [True] * (n+1)\n    # start with 2 as the first prime number\n    is_prime[0] = is_prime[1] = False\n    # use the Sieve of Eratosthenes algorithm to identify non-prime numbers\n    for i in range(2, int(math.sqrt(n))+1):\n        if is_prime[i]:\n            for j in range(i*i, n+1, i):\n                is_prime[j] = False\n    # return a list of all non-prime numbers\n    return [x for x in range(2, n+1) if is_prime[x]]"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer 'n' as input and returns True if 'n' is not a prime number, otherwise False.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a min heap\n    heap = nums[:]\n    hq.heapify(heap)\n    # Remove the first n elements from the heap and return them in descending order\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return [-num for num in max_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of the n largest numbers\n    min_heap = []\n    for num in nums:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, num)\n        else:\n            if num > min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, num)\n\n    # return the min-heap\n    return min_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # build max heap from nums\n    hq.heapify(nums)\n    # pop and return n largest integers from heap\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of size n\n    hq.heapify(nums[:n])\n    # Extract the n largest elements from the heap\n    result = []\n    for _ in range(n):\n        result.append(hq.heappop(nums[:n]))\n    # Return the list of the n largest elements\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Given a list of numbers, return the n largest integers in descending order.\n    \"\"\"\n    # Create a min-heap of size n to store the n largest numbers\n    min_heap = []\n    # Iterate through the list of numbers\n    for num in nums:\n        # If the size of the min-heap is less than n, add the current number to the heap\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, num)\n        # If the size of the min-heap is greater than or equal to n,\n        # compare the current number with the smallest number in the heap\n        else:\n            # If the current number is greater than the smallest number in the heap, replace it with the current number\n            if num > min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, num)\n    # Return the n largest numbers in descending order\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of numbers and an integer n and returns a list of the n largest integers\n    in descending order.\n    '''\n\n    # Use a min heap to keep track of the n largest numbers\n    min_heap = []\n    for num in nums:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, num)\n        elif num > min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num)\n\n    # Return the n largest numbers in descending order\n    return sorted(min_heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        raise ValueError('n must be less than or equal to the length of the input list')\n    \n    # Build a max heap from the input list\n    max_heap = nums[:n]\n    for i in range(n, len(nums)):\n        if nums[i] > max_heap[0]:\n            hq.heappushpop(max_heap, nums[i])\n\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return [-num for num in max_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap of the first n elements of the list\n    hq.heapify(nums[:n])\n    # Iterate over the remaining elements of the list\n    for i in range(n,len(nums)):\n        # Find the minimum value in the heap and replace it with the current value\n        if nums[i] > hq.heappop(nums[:n]):\n            hq.heappush(nums[:n],nums[i])\n        # Add the current value to the heap\n        else:\n            hq.heappush(nums[:n],nums[i])\n    # Return the n largest integers from the heap in descending order\n    return nums[:n]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    This function takes an integer x as input and returns True if x is a power of two, and False otherwise. \n    A power of two is a positive integer that has no positive integer that is a factor of it. \n    A bit position is a position in a number where a 1 occurs. \n    So, for example, 8 is a power of two because 2^3 = 8. \n    16 is not a power of two because 2^4 = 16. \n    '''\n\n    # Check if x is a positive integer\n    if x <= 0:\n        return False\n\n    # Convert x to binary\n    binary_x = bin(x)[2:]\n\n    # Check if the length of binary_x is 1\n    if len(binary_x) == 1:\n        return True\n\n    # If the length of binary_x is greater than 1, return False\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n\n    # Convert the input numbers to binary strings\n    binary_str_x = bin(x)[2:]\n    binary_str_y = bin(y)[2:]\n\n    # Check if the binary strings differ at one bit position only\n    if binary_str_x!= binary_str_y:\n        print(\"The two numbers differ at one bit position only.\")\n    else:\n        print(\"The two numbers do not differ at one bit position only.\")"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and returns True if there is at least one bit position where x and 2^n have a different value, else False.\n    '''\n    # convert x to binary string\n    binary_str = bin(x)[2:]\n    # count the number of bit positions where x and 2^n have a different value\n    count = 0\n    for i in range(len(binary_str)-1):\n        if binary_str[i]!= binary_str[i+1]:\n            count += 1\n    # return True if count is greater than 0, else False\n    return count > 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or x == 1:\n        return True\n    elif x & (x-1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return bin(x).count('1') == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert the given number to binary\n    bin_x = bin(x)[2:]\n\n    # Check whether the length of the binary representation of the given number is odd or even\n    if len(bin_x) % 2 == 0:\n        # If the length of the binary representation is even, then the given number is a power of two\n        return True\n    else:\n        # If the length of the binary representation is odd, then the given number is not a power of two\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes a number as input and returns True if it is a power of 2, False otherwise.\n    \"\"\"\n    if x == 0:\n        return False\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes an integer x as input and returns True if it is a power of two, False otherwise.\n    \"\"\"\n\n    # Check if x is 0 or 1\n    if x == 0 or x == 1:\n        return False\n\n    # Check if x is a power of 2\n    while x % 2 == 0:\n        x //= 2\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    while x!= 1:\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            x = 3 * x + 1\n    return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into individual words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Create an empty list to store the words which are at least 4 characters long\n    long_words = []\n    \n    # Loop through the list of words and check if each word is at least 4 characters long\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n            \n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern to match words which are at least 4 characters long\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n\n    # Find all non-overlapping matches of the pattern in the input text\n    matches = pattern.findall(text)\n\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Regular expression pattern to match words with at least 4 characters long\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    # Find all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Splitting the string into words\n    words = text.split()\n    # Initializing an empty list to store the long words\n    long_words = []\n    # Looping through all the words in the string\n    for word in words:\n        # Checking if the length of the word is at least 4 characters long\n        if len(word) >= 4:\n            long_words.append(word)\n    # Returning the list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Find all words in the given text\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words with less than 4 characters\n    filtered_words = [word for word in words if len(word) >= 4]\n    # Return the filtered words\n    return filtered_words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if str[j] > str[i]:\n                return j - i\n    return n - 1\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = n\n    \n    # Check for palindromes\n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            continue\n        # Check for odd length palindromes\n        if n % 2 == 1 and i == n//2 - 1 and str[i] == str[i+1]:\n            min_rotations = min(min_rotations, 1)\n        # Check for even length palindromes\n        else:\n            min_rotations = min(min_rotations, 2)\n    \n    # Check for other rotations\n    for i in range(n//2, n):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                min_rotations = min(min_rotations, 1)\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    # initialize a dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n\n    # check if the frequency of each character in the string is 1\n    if all(freq[char] == 1 for char in str):\n        return 0\n\n    # initialize the minimum number of rotations required\n    min_rotations = float('inf')\n\n    # iterate through all possible rotations of the string\n    for i in range(1, len(str)):\n        for j in range(i):\n            # check if the frequency of characters in the two substrings are equal\n            if freq[str[i]] == freq[str[j]]:\n                # check if the two substrings are the same\n                if str[i] == str[j]:\n                    # check if the resulting string is the same as the input string\n                    if str[i:] == str[:i]:\n                        # update the minimum number of rotations required if the two substrings are the same\n                        min_rotations = min(min_rotations, j + 1)\n\n    # return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    freq = [0] * 26\n    for i in str:\n        freq[ord(i) - ord('a')] += 1\n    min_rotations = float('inf')\n    start = 0\n    end = n - 1\n    while start < end:\n        mid = (start + end) // 2\n        freq_mid = [0] * 26\n        for i in str[:mid]:\n            freq_mid[ord(i) - ord('a')] += 1\n        count = 0\n        for i in range(26):\n            if freq[i]!= freq_mid[i]:\n                count += 1\n        if count < min_rotations:\n            min_rotations = count\n            start = mid + 1\n        else:\n            end = mid\n    if min_rotations == float('inf'):\n        return 0\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    # Find the length of the string\n    n = len(str)\n    \n    # Initialize a variable to keep track of the minimum number of rotations required\n    min_rotations = n\n    \n    # Initialize a variable to keep track of the minimum length of a rotation\n    min_length = n\n    \n    # Loop through all possible rotations of the string\n    for i in range(n):\n        # Find the length of the current rotation\n        current_length = n - i\n        \n        # Check if the current rotation is equal to the desired string\n        if str[:current_length] == str[i:]:\n            # Update the minimum number of rotations required\n            min_rotations = min(min_rotations, i)\n            \n            # Update the minimum length of a rotation\n            min_length = min(min_length, current_length)\n            \n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = float('inf')\n    \n    # Loop through all possible rotations\n    for i in range(n):\n        # Create a new string with the current character at the end\n        new_str = str[i:] + str[i]\n        # Calculate the number of rotations\n        rotations = new_str.count(str[i])\n        # Update the minimum number of rotations if the current rotation is smaller\n        if rotations < min_rotations:\n            min_rotations = rotations\n    \n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize a dictionary to store the frequency of each character\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Iterate through each character in the string\n    for char in str:\n        # If the frequency of the character is greater than 1, it means it needs to be removed\n        if freq[char] > 1:\n            # Remove the character from the dictionary\n            del freq[char]\n        else:\n            # If the frequency of the character is 1, it means we can rotate it to get the same string\n            return 0\n    \n    # If we reach here, it means the string is already unique\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    n = len(str)\n    max_len = n // 2\n\n    while max_len > 0:\n        count = 0\n        for i in range(n - max_len):\n            if str[i]!= str[i + max_len]:\n                count += 1\n        if count == 0:\n            rotations += max_len\n        max_len //= 2\n\n    if n % 2 == 1:\n        rotations += 1\n\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n\n    # find the length of the string\n    length = len(str)\n\n    # find the frequency of each character\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # sort the characters by frequency and alphabetically\n    sorted_chars = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n\n    # rotate the characters to get the same string\n    rotations = 0\n    for i in range(length):\n        if str[i]!= sorted_chars[i][0]:\n            rotations += 1\n            # rotate the characters to get the same string\n            sorted_str = sorted_chars[i][0]\n            for j in range(i, length):\n                sorted_str += sorted_chars[j][0]\n            # sort the characters by frequency and alphabetically\n            sorted_chars = sorted(sorted_str.items(), key=lambda x: (-x[1], x[0]))\n\n    return rotations + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Check if the string is empty or contains only one character\n    if len(str) <= 1:\n        return 0\n    \n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Initialize variables to keep track of the minimum number of rotations and the current rotation\n    min_rotations = 1\n    current_rotation = 1\n    \n    # Iterate through the string multiple times to find the minimum number of rotations\n    while True:\n        # Check if the rotated string is the same as the original string\n        if str == str[::-1]:\n            break\n        \n        # Find the next rotation of the string\n        new_str = \"\"\n        for char in str:\n            # Get the frequency of the character after the current rotation\n            next_freq = freq[char] - 1\n            # If the frequency is less than or equal to 0, add the character to the new string and increment the frequency\n            if next_freq <= 0:\n                new_str += char\n                freq[char] = 0\n            # Otherwise, decrement the frequency of the character and add it to the new string\n            else:\n                freq[char] = next_freq\n        \n        # Increment the minimum number of rotations and the current rotation\n        min_rotations += 1\n        current_rotation += 1\n    \n    # Return the minimum number of rotations found\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch):\n    new_s = ''\n    if s.find(ch) == 0:\n        new_s += s[1:]\n    elif s.rfind(ch) == len(s)-1:\n        new_s += s[:len(s)-1]\n    else:\n        for i in range(len(s)):\n            if s[i]!= ch:\n                new_s += s[i]\n    return new_s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, \"\")\n    s = s.replace(ch, \"\", 1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # Check if the string contains the character to be removed\n    if ch in s:\n        # Find the first occurrence of the character\n        index = s.index(ch)\n        # Find the last occurrence of the character\n        last_index = s.rindex(ch)\n        # Remove the first occurrence\n        s = s[:index] + s[index+1:]\n        # Remove the last occurrence\n        s = s[:last_index-1] + s[last_index:]\n    \n    # Return the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Removing first occurrence\n    if s.find(ch) == 0:\n        s = s[1:]\n    # Removing last occurrence\n    if s.rfind(ch) == len(s)-1:\n        s = s[:len(s)-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '')"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Check if the character is present in the string\n    if ch in s:\n        # Find the first occurrence of the character and its index\n        index = s.index(ch)\n        # Find the length of the string\n        length = len(s)\n        # Remove the first occurrence of the character\n        s = s[:index] + s[index+1:]\n        # Remove the last occurrence of the character\n        if index == length-1:\n            # If the character is the last character, return an empty string\n            return ''\n        else:\n            index = s.rindex(ch)\n            # Remove the last occurrence of the character\n            s = s[:index] + s[index+1:]\n        return s\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch): \n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Initialize two pointers to the beginning of the string\n    i = 0\n    j = len(s)-1\n    # Loop until we find the first occurrence of the character\n    while i < j and s[i]!= ch:\n        i += 1\n    # If we found the character, then loop until we find the last occurrence of the character\n    if i < j:\n        while i < j and s[j]!= ch:\n            j -= 1\n        # If we found the character, then remove it from both pointers\n        if i < j:\n            s = s[:i] + s[j+1:]\n    # Return the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch,'')\n        s = s.strip()\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, '')\n    s = s[1:] if s[0] == ch else s\n    s = s[:-1] if s[-1] == ch else s\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the rows in ascending order\n    sorted_rows = sorted(range(len(M)), key=lambda i: row_sums[i])\n\n    # Create a new matrix with the sorted rows\n    sorted_matrix = [[0]*len(M[0]) for _ in range(len(sorted_rows))]\n    for i, j in sorted_rows:\n        sorted_matrix[i] = M[j]\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # sort the row_sums in ascending order\n    row_sums.sort()\n    # create a list of indices for sorting the rows in ascending order\n    sorted_indices = [i for i in range(n)]\n    # sort the rows in ascending order based on the row_sums\n    for i in range(n):\n        for j in range(i+1, n):\n            if row_sums[i] + row_sums[j] < row_sums[sorted_indices[i]]:\n                sorted_indices[i], sorted_indices[j] = sorted_indices[j], sorted_indices[i]\n    # create a new matrix with the sorted rows\n    sorted_M = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        for j in sorted_indices:\n            sorted_M[i][j] = M[i][j]\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1,n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Compute the sum of each row of the matrix\n    sums = [sum(row) for row in M]\n\n    # Sort the matrix in ascending order based on the sums\n    sorted_M = sorted(M, key=lambda x: sums.index(sum(x)))\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the rows in ascending order\n    sorted_rows = [row for row in M if sum(row) == max(row_sums)]\n    \n    # Sort the columns in ascending order\n    sorted_cols = [sorted(row) for row in sorted_rows]\n    \n    # Return the sorted matrix\n    return sorted_cols"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the length of the matrix\n    n = len(M)\n    \n    # Sort the matrix in descending order of row sums\n    for i in range(n):\n        row_sum = sum(M[i])\n        for j in range(n):\n            M[i][j] *= -1 if i == j else 1\n            if sum(M[i]) > row_sum:\n                M[i], M[j] = M[j], M[i]\n                row_sum = sum(M[i])\n    \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # sort the row sums in ascending order\n    row_sums.sort()\n    \n    # create a new matrix with the same dimensions as the original matrix\n    sorted_matrix = [[0 for j in range(len(M))] for i in range(len(M[0]))]\n    \n    # sort the original matrix based on the row sums\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            sorted_matrix[i][j] = M[i][j]\n            for k in range(len(row_sums)):\n                if row_sums[k] == sorted_matrix[i][j]:\n                    sorted_matrix[i][j] = k\n                    break\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] > M[i][i] + M[j][j]:\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] > M[i][i] + M[j][j]:\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculate the volume of the prism\n    V = (1/3) * l * b * h\n    \n    # return the volume\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5*l*b*h   # formula for calculating volume\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculating the volume using formula\n    volume = l * b * h / 6\n    print(\"The volume of the triangular prism is: \", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function calculates the volume of a triangular prism.\n\n    Parameters:\n        l (float): length of the base of the prism\n        b (float): width of the prism\n        h (float): height of the prism\n\n    Returns:\n        float: volume of the triangular prism\n    '''\n\n    return l * b * h / 3"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h  # formula to find volume of triangular prism\n    print(\"The volume of a triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    V = l*b*h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculate the volume of the prism using the formula V = lbh/3\n    V = l*b*h/3\n    \n    # round off the volume to 2 decimal places\n    V = round(V,2)\n    \n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+)_+[a-z]'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z](?:[a-z]|[\\s_]*[a-z])+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+(_[a-z]+)*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # define the regular expression pattern to match lowercase sequences of letters\n    pattern = r'(?<![_a-zA-Z])(?=[a-z])(?<![a-z])[a-z]+'\n    # use re.findall to find all lowercase sequences of letters in the input string\n    matches = re.findall(pattern, text)\n    # return true if there are lowercase sequences of letters and false otherwise\n    return True if len(matches) > 0 else False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+[_a-z]*'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![\\w])([a-z])(?![\\w]|$)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r'[a-z]+[_-][a-z]+'\n    matches = re.findall(regex, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r'(?<![a-z])[a-z](?=[a-z])|(?<![A-Z])[A-Z](?=[A-Z])'\n    return bool(re.search(regex, text))"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    result = []\n    for char in range(NO_OF_CHARS):\n        if char not in char_set:\n            result.append(chr(char))\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_list = list(string)\n\n    # Remove characters present in the second string\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n\n    # Remove duplicate characters from the list\n    char_list = list(set(char_list))\n\n    # Convert the list to a string\n    result = ''.join(char_list)\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert the strings to lists\n    list_1 = list(string)\n    list_2 = list(NO_OF_CHARS * string)\n    # Create a new list without the characters in list_2\n    new_list = [char for char in list_1 if char not in list_2]\n    # Convert the new list back to a string\n    result = ''.join(new_list)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    no_of_chars = 256\n    first_list = [0] * no_of_chars\n    second_list = [0] * no_of_chars\n    for char in string:\n        second_list[ord(char)] = 1\n    for i in range(no_of_chars):\n        if second_list[i] == 1 and first_list[i] == 0:\n            first_list[i] = 1\n    result = \"\"\n    for char in string:\n        if first_list[ord(char)] == 1:\n            result += char\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n    \n    # Remove the characters present in the second string from the list of characters\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n    \n    # Convert the list of characters back to a string\n    result_string = ''.join(char_list)\n    \n    return result_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    for i in range(len(char_list)):\n        if char_list[i] in string:\n            char_list.remove(char_list[i])\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    This function takes a string as input and removes all the characters present in the second string.\n    '''\n    list_string = list(string)\n    for char in list_string:\n        if char in string:\n            list_string.remove(char)\n    return ''.join(list_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list to store the modified string\n    modified_string = []\n    \n    # Iterate through the string\n    for char in string:\n        # Check if the character is not present in the second string\n        if char not in string:\n            # Append the modified character to the modified string\n            modified_string.append(char)\n    \n    # Convert the modified string to a list and return it\n    return list(modified_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_list = list(string)\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n    return char_list\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    unique_chars = set(string)\n    if len(unique_chars) > NO_OF_CHARS:\n        raise ValueError('Number of unique characters in the first string exceeds the limit of {} characters.'.format(NO_OF_CHARS))\n    \n    first_str = ''\n    second_str = ''\n    for char in string:\n        if char not in unique_chars:\n            first_str += char\n        else:\n            second_str += char\n    \n    return first_str, second_str"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n    \n    # Loop through the array\n    for num in arraynums:\n        # If the element is already in the set, return True\n        if num in unique_set:\n            return True\n        # Otherwise, add the element to the set\n        else:\n            unique_set.add(num)\n    \n    # If the loop completes without finding a duplicate, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the values and their indices\n    dictionary = {}\n    for i in range(len(arraynums)):\n        # Check if the value is already in the dictionary\n        if arraynums[i] in dictionary:\n            # If it is, return True\n            return True\n        else:\n            # If it's not, add it to the dictionary with its index as the key\n            dictionary[arraynums[i]] = i\n    # If all the values are unique, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if len(arraynums) == 0:\n        return False\n    elif len(arraynums) == 1:\n        return False\n    else:\n        for i in range(len(arraynums)):\n            if i == 0:\n                for j in range(i+1, len(arraynums)):\n                    if arraynums[i] == arraynums[j]:\n                        return True\n            else:\n                for j in range(i):\n                    if arraynums[i] == arraynums[j]:\n                        return True\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the count of each element in the array\n    count = {}\n\n    # Iterate through the array\n    for num in arraynums:\n        # If the element is already in the dictionary, increment the count\n        if num in count:\n            count[num] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            count[num] = 1\n\n    # Iterate through the dictionary to check for duplicate elements\n    for num in count:\n        if count[num] > 1:\n            return True\n\n    # If no duplicate elements are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in the array\n    freq_dict = {}\n\n    # loop through the array and update the frequency of each element in the dictionary\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # loop through the dictionary and check if any element has a frequency greater than 1\n    for key, value in freq_dict.items():\n        if value > 1:\n            return True\n\n    # if no element has a frequency greater than 1, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the index of each element in the array\n    index_dict = {}\n\n    # loop through the array and check if each element is already in the dictionary\n    for index, num in enumerate(arraynums):\n        if num in index_dict:\n            # if it is, return True (indicating that there is a duplicate)\n            return True\n        else:\n            # otherwise, add the index to the dictionary\n            index_dict[num] = index\n\n    # if we make it through the loop without finding a duplicate, return False (indicating no duplicates)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arraynums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Loop through the dictionary to find any duplicate elements\n    for num in freq:\n        if freq[num] > 1:\n            return True\n\n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = {}\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store the count of each element\n    counts = {}\n    \n    # Loop through the array and count the occurrences of each element\n    for num in arraynums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # Loop through the dictionary and check if any element has a count greater than 1\n    for count in counts.values():\n        if count > 1:\n            return True\n    \n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        return is_woodall(x-1)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # initialize the list of possible answers\n    possible_answers = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    # loop through the possible answers and check if the number is in the list\n    for answer in possible_answers:\n        if x % answer == 0:\n            return True\n    \n    # if the number is not in the list, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 3 == 0: \n        return \"Woodball\" \n    else: \n        return \"Not a woodball\" "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    This function takes a number as input and checks if it is a Woodall number or not.\n    A Woodall number is a positive integer that is divisible by all of its digits.\n    '''\n    # convert the number to a string\n    num = str(x)\n    # initialize a list to store the divisors of each digit in the number\n    divisors = []\n    # loop through each digit in the number\n    for digit in num:\n        # if the digit is not 0, check if its divisor is already in the list\n        if digit!= '0':\n            if digit in divisors:\n                return False\n            else:\n                divisors.append(digit)\n    # if we have made it through the loop without finding any divisors that are not 0, then the number is a Woodall number\n    return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 1 or x % 10 == 2 or x % 10 == 3 or x % 10 == 4 or x % 10 == 5:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0 or x == 2 or x == 7:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n\n    # Check if the number is a positive integer\n    if not isinstance(x, int) or x <= 0: \n        return False\n    \n    # Check if the number has at least three digits\n    if len(str(x)) < 3: \n        return False\n    \n    # Check if the digits of the number are arranged in a specific way\n    if str(x)[0] == str(x)[1] == str(x)[2]:\n        return True\n    elif str(x)[0] == str(x)[2] == str(x)[1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2 or x == 3 or x == 4:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 1 and x <= 10:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 100:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Find the reverse of the number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    # Check if the number is one less than twice its reverse\n    return num == reverse - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    temp = num\n    \n    # Convert the number to string and reverse it\n    while temp > 0:\n        digit = temp % 10\n        rev_num = rev_num * 10 + digit\n        temp //= 10\n        \n    # Check if the reverse of the number is one less than twice the original number\n    if abs(num - (2 * rev_num)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num!= 0:\n        reverse = reverse * 10 + num % 10\n        num = num // 10\n    return reverse == 2 * reverse - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string\n    num_str = str(num)\n    # reverse the string\n    rev_str = num_str[::-1]\n    # convert the reversed string back to a number\n    rev_num = int(rev_str)\n    # check if the original number is one less than twice its reverse\n    if num - rev_num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n    # convert the reversed number to an integer and check if it is one less than twice the original number\n    if int(reversed_num) - num < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Calculate the reverse of the given number\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        rev_num = (rev_num * 10) + digit\n        temp //= 10\n    \n    # Check if the given number is one less than twice its reverse\n    if (num == (rev_num - 1)) or (num == (rev_num - 2)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    \n    return rev_num == 2 * rev_num - 1\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # get the reverse of the input number\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n\n    # check if the input number is one less than twice its reverse\n    if rev_num - 2*num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Get the reverse of the given number\n    rev_num = str(num)[::-1]\n    # Convert the reverse number to an integer\n    rev_num = int(rev_num)\n    # Check if the reverse number is one less than twice the given number\n    if rev_num == num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num < int(str(num)[::-1][1:][::-1])\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    # Initialize variables to store the max number and its corresponding power of 10\n    max_num = 0\n    max_pow = 0\n\n    # Iterate through the list of digits\n    for digit in arr:\n        # Check if the digit is greater than the current max number\n        if int(digit) > max_num:\n            # Update the max number and its corresponding power of 10\n            max_num = int(digit)\n            max_pow = len(str(max_num))\n\n    # Return the max number with the corresponding power of 10\n    return max_num * 10**max_pow"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits and returns the largest number that can be formed with those digits.\n    \n    :param arr: A list of digits.\n    :return: The largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Initialize the maximum number to be formed with any single digit.\n    max_num = 0\n    \n    # Loop over each digit in the list.\n    for digit in arr:\n        # Add the digit to the maximum number.\n        max_num += int(digit)\n        \n    # Return the maximum number that can be formed with the given digits.\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the maximum number that can be formed with those digits.\n    \"\"\"\n\n    # Initialize maximum number and the index of the last digit in the list\n    max_num = 0\n    last_digit = len(arr) - 1\n\n    # Loop through the digits in the list\n    while last_digit >= 0:\n\n        # Calculate the current digit with the previous digits\n        current_digit = 0\n        for i in range(last_digit+1):\n            current_digit += arr[i] * 10**(i)\n\n        # Update the maximum number if the current digit is greater\n        if current_digit > max_num:\n            max_num = current_digit\n\n        # Move to the previous digit in the list\n        last_digit -= 1\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        if i==0:\n            max_num = max_num * 10 + arr[i]\n        else:\n            max_num = max_num * 10 + arr[i] + i\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    # Initialize max_num with the first element of the list\n    max_num = arr[0]\n    # Traverse the list and check if each element can be formed with the previous number\n    for i in range(1, len(arr)):\n        # Find the sum of the current element and the previous number\n        current_num = arr[i] + max_num\n        # Update max_num if the current element can be formed with the previous number\n        if current_num > max_num:\n            max_num = current_num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)-i-1):\n            for k in range(len(arr)-i-j-1):\n                if arr[j]+arr[k+i] == arr[len(arr)-1]:\n                    max_num = max(max_num, arr[j] + arr[k+i] + arr[len(arr)-1])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed with those digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                num = int(''.join(sorted(str(arr[i])+str(arr[j]))))\n                if num > max_num:\n                    max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the given list of digits\n    arr.sort()\n    # Initialize the largest number with the first digit\n    max_num = arr[0]\n    # Initialize the maximum length of the number\n    max_len = 1\n    # Iterate through the digits in the sorted list\n    for i in range(1, len(arr)):\n        # Check if the length of the number will be less than or equal to the current length\n        if i <= max_len:\n            # If the length of the number will be less than or equal to the current length,\n            # add the current digit to the number and check if the length will be greater\n            if max_len + 1 <= len(str(max_num + arr[i])):\n                max_num += arr[i]\n                max_len += 1\n        # If the length of the number will be greater than the current length,\n        # reset the number to the current digit and update the length to 1\n        else:\n            max_num = arr[i]\n            max_len = 1\n    # Return the largest number formed with the given digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                return -1\n\n    max_num = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if arr[i] < arr[j] and arr[j] < arr[k] and arr[i] < arr[k]:\n                    max_num = max(max_num, arr[i] + arr[j] + arr[k])\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    # Initialize variables to keep track of the current number being considered and the maximum number formed so far\n    current_num = 0\n    max_num = 0\n    \n    # Iterate over the list of digits\n    for digit in arr:\n        # Add the digit to the current number\n        current_num = current_num * 10 + int(digit)\n        # Update the maximum number formed so far if necessary\n        max_num = max(max_num, current_num)\n    \n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0:\n        return \"Both numbers are zero.\"\n    elif x > 0 and y > 0:\n        return \"Both numbers have positive signs.\"\n    elif x < 0 and y < 0:\n        return \"Both numbers have negative signs.\"\n    else:\n        return \"Both numbers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x == 0:\n        return \"Both numbers are zero.\"\n    elif x == y:\n        return \"Both numbers have the same sign.\"\n    elif x < 0 and y > 0:\n        return \"Both numbers have opposite signs.\"\n    elif x > 0 and y < 0:\n        return \"Both numbers have opposite signs.\"\n    else:\n        return \"Neither number has the opposite sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        print(\"The two numbers have opposite signs.\")\n    else:\n        print(\"The two numbers have the same sign.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x >= 0 and y >= 0:\n        return \"Both numbers have same or positive signs.\"\n    elif x >= 0 and y < 0:\n        return \"The first number has positive sign and the second number has negative sign.\"\n    elif x < 0 and y < 0:\n        return \"Both numbers have negative signs.\"\n    elif x < 0 and y >= 0:\n        return \"The first number has negative sign and the second number has positive sign.\"\n    else:\n        return \"The given numbers are not valid.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0: \n        return True\n    elif x > 0 and y > 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return 2 * (n * n) - 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) ** 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_divisible_by_12(num):\n        return num % 12 == 0\n\n    def is_divisible_by_13(num):\n        return num % 13 == 0\n\n    if is_divisible_by_13(n):\n        return n - 12\n    elif is_divisible_by_12(n):\n        return n + 13\n    else:\n        return n + 8\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 8\n    c = 27\n    d = 64\n\n    octagonal_count = 0\n    while a <= n:\n        while b <= n:\n            c = (a**3 + b**3) % d\n            if c == 8:\n                octagonal_count += 1\n                print(b)\n            b += 1\n        a += 1\n        b = 8\n\n    if octagonal_count == 0:\n        return 'No octagonal number exists for n = {}'.format(n)\n    else:\n        return 'The {}th octagonal number is {}'.format(octagonal_count, b - 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0: \n        return False\n    if n == 1: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2): \n        if n % i == 0: \n            return False\n    return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Find the square of the octagonal number\n    oct_square = n ** 3\n\n    # Find the sum of the squares of the first n positive integers\n    sum_of_squares = sum(i ** 2 for i in range(1, n + 1))\n\n    # Check if the sum of the squares is equal to the octagonal number\n    if sum_of_squares == oct_square:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    for i in range(1, n+1):\n        a = a + 2 * i ** 2\n    return a"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    \"\"\"\n    This function takes an integer n as input and returns True if n is a valid octagonal number, False otherwise.\n    A valid octagonal number is a positive integer whose square is an integer.\n    \"\"\"\n    # Check if the square of the number is an integer\n    if int(n**0.5)**2 == n:\n        # Check if the number is a multiple of 8\n        if n % 8 == 0:\n            return True\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    This function takes a positive integer n and returns True if the number is an octagonal number and False otherwise. \n    An octagonal number is a positive integer whose square is equal to its cube. \n    '''\n    if n < 1: \n        return False\n    else:\n        num = n*n*n*n*n\n        if num == n*n:\n            return True\n        else:\n            return False"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of characters and their corresponding count of substrings\n    count = defaultdict(int)\n\n    # Calculate the sum of digits for each character\n    for i in range(len(s)):\n        count[sum(int(c) for c in s[:i+1])] += 1\n\n    # Return the count of substrings with sum of digits equal to their length\n    return count[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[sum(int(d[j-k]) for j in range(i+1, len(s)+1))-k] += 1\n    return sum(d.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Create a dictionary to store the count of substrings with sum of digits equal to length\n    count_dict = defaultdict(int)\n    \n    # Iterate over each character in the string\n    for i in range(len(s)):\n        \n        # Iterate over each possible substring starting from index i\n        for j in range(i, len(s)+1):\n            \n            # Check if the sum of digits in the substring is equal to the length of the substring\n            if sum(map(int, s[i:j])) == j-i:\n                count_dict[j-i] += 1\n    \n    # Return the dictionary containing the count of substrings with sum of digits equal to length\n    return count_dict\n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Create a dictionary to store the count of substrings with length i\n    count_dict = defaultdict(int)\n    \n    # Loop through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in s[i:j+1])\n            \n            # Update the count of substrings with length i\n            count_dict[i] += substring_sum\n    \n    # Return the count of substrings with the sum of digits equal to their length\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    freq = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        freq[s[i]] += 1\n        j = i\n        while j < n:\n            freq[s[j]] += 1\n            if sum(freq.values()) - len(freq.values()) == j - i:\n                count += 1\n            freq[s[j]] -= 1\n            j += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # initialize a dictionary to store the count of substrings\n    count_dict = defaultdict(int)\n\n    # iterate through all possible substrings of the given string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # check if the sum of digits of the substring is equal to its length\n            if sum(int(digit) for digit in s[i:j]) == len(s[i:j]):\n                # increment the count of substrings in the dictionary\n                count_dict[j-i] += 1\n\n    # return the count of substrings\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i:j+1].isdigit():\n                digit_sum = sum(int(d) for d in s[i:j+1])\n                if digit_sum == len(s[i:j+1]):\n                    count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    dp = defaultdict(int)\n\n    for i in range(n):\n        dp[i] = sum(int(digit) for digit in s[i])\n\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            substring = s[i:j+1]\n            if dp[j] - dp[i] == len(substring):\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Initialize a dictionary to store the count of characters with a sum of digits equal to their length\n    count_dict = defaultdict(int)\n\n    # Iterate through each character of the string\n    for i in range(len(s)):\n        # Calculate the sum of digits of the current character\n        digit_sum = sum(int(d) for d in str(i+1))\n\n        # If the digit sum is equal to the length of the substring, increment the count of characters with this sum\n        if digit_sum == len(s[i]):\n            count_dict[i+1] += 1\n\n    # Return the total count of characters in the dictionary\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[int(s[i])] += 1\n    total_count = 0\n    for i in range(1, 10):\n        total_count += digit_count[i] * (digit_count[i] - 1) // 2\n    return total_count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        return None\n    \n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    \n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs:\n        return min(xs)\n    else:\n        return None"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs:\n        return min(xs)\n    else:\n        return None"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs:\n        return min(xs)\n    else:\n        return None\n"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs:\n        return min(xs)\n    else:\n        return None\n"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # initialize variables\n    max_diff = 0\n\n    # loop through the list and compare adjacent pairs\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns the maximum difference between available pairs in the list.\n    \"\"\"\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            max_diff = max(diff, max_diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) <= 1:\n        return 0\n\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return \"List must have at least two elements.\"\n    \n    # Sort the list of tuples in ascending order based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initialize variables to store the maximum and minimum differences\n    max_diff = test_list[1][1] - test_list[0][1]\n    min_diff = test_list[1][1] - test_list[0][1]\n    \n    # Loop through the sorted list of tuples and calculate the maximum and minimum differences\n    for i in range(1, len(test_list)-1):\n        curr_diff = test_list[i+1][1] - test_list[i][1]\n        max_diff = max(max_diff, curr_diff)\n        min_diff = min(min_diff, curr_diff)\n        \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Find the maximum difference between available pairs in a given tuple list.\n\n    Parameters:\n    test_list (list): A list of tuples representing available pairs. Each tuple should contain two integers, which represent the values for the first and second elements of a pair.\n\n    Returns:\n    int: The maximum difference between available pairs in the given tuple list.\n\n    Examples:\n    >>> max_difference([(1, 2), (3, 4), (5, 6)])\n    4\n\n    \"\"\"\n    if len(test_list) < 2:\n        return 0\n\n    pairs = set(test_list)\n    pairs.remove(min(test_list))\n    pairs.remove(max(test_list))\n\n    if len(pairs) < 2:\n        return 0\n\n    max_diff = max(pairs) - min(pairs)\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the given list in ascending order\n    test_list.sort()\n    \n    # Initialize two variables to store the maximum difference and the index of the first element in the list\n    max_diff = test_list[1] - test_list[0]\n    first_index = 0\n    \n    # Loop through the sorted list to find the maximum difference\n    for i in range(1, len(test_list)):\n        if test_list[i] - test_list[i-1] > max_diff:\n            max_diff = test_list[i] - test_list[i-1]\n            first_index = i\n    \n    # Return the maximum difference and the index of the first element in the list\n    return max_diff, first_index"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Convert the list of tuples to a list of lists\n    subject_list = [list(x) for x in subjectmarks]\n    \n    # Sort the list of lists using the second value of each tuple\n    subject_list.sort(key=lambda x: x[1])\n    \n    # Convert the sorted list of lists back to a list of tuples\n    sorted_subjectmarks = [tuple(x) for x in subject_list]\n    \n    return sorted_subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n\n    # Sort the list of tuples based on the second value\n    subjectmarks.sort(key=lambda x: x[1])\n\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    # sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    \n    # Print the sorted list of tuples\n    for mark in sorted_marks:\n        print(mark)"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples by second value\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples by second value\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: empty list\n    if not data_list:\n        return 0\n\n    # Recursive case: append first element to sublist and sum it\n    else:\n        first_element = data_list[0]\n        sublist = data_list[1:]\n        sublist_sum = recursive_list_sum(sublist)\n        return first_element + sublist_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: sum the first element and the sum of the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if type(item) == list:\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(recursive_list_sum(item) for item in data_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(data_list):\n        '''\n        Flatten a list recursively.\n        '''\n        flat_list = []\n        for item in data_list:\n            if type(item) == list:\n                flat_list += flatten(item)\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    def sum_flattened_list(flat_list):\n        '''\n        Sum all elements in a flattened list.\n        '''\n        total = 0\n        for item in flat_list:\n            total += item\n        return total\n\n    flattened_list = flatten(data_list)\n    return sum_flattened_list(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        result = 0\n        for item in data_list:\n            result += recursive_list_sum(item)\n        return result\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum([recursive_list_sum(x) for x in data_list])\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        first_item = data_list[0]\n        if isinstance(first_item, list):\n            return recursive_list_sum(first_item) + recursive_list_sum(data_list[1:])\n        else:\n            return first_item + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Define a recursive function to flatten the list and sum all of its elements\n    def flatten_and_sum(data):\n        # Base case: if the data is a number, return the number\n        if isinstance(data, int) or isinstance(data, float):\n            return data\n\n        # Recursive case: if the data is a list, flatten it and sum all of its elements\n        elif isinstance(data, list):\n            flattened_sum = 0\n            for item in data:\n                flattened_sum += flatten_and_sum(item)\n            return flattened_sum\n\n        # If the data is neither a number nor a list, return 0 (in case it's None, etc.)\n        else:\n            return 0\n\n    # Call the recursive function with the input list\n    return flatten_and_sum(data_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    count = 0\n    for item in lst:\n        if item > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a 2D array to store the number of ways to partition the set of Bell numbers\n    ways = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    # Initialize the first row and column to 1\n    ways[0][0] = 1\n    # Fill in the rest of the array using dynamic programming\n    for i in range(1, n+1):\n        ways[i][0] = 1\n        ways[0][i] = 1\n        for j in range(1, i+1):\n            ways[i][j] = ways[i-1][j] + ways[i-1][j-1]\n    return ways[n][n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    def fact(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * fact(n-1)\n    \n    def bell_number(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return 2 * bell_number(n-1) + n - 1\n    \n    def partition(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fact(n) // (fact(n-1) * bell_number(n-1))\n    \n    return partition(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    \n    # Initialize the number of ways to partition to 1\n    ways_to_partition = 1\n    \n    # Iterate through all the possible partitions of the Bell numbers\n    for i in range(1, n+1):\n        ways_to_partition *= (i * (n - i + 1))\n    \n    # Return the final number of ways to partition\n    return ways_to_partition"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # Base case: if n is 0 or 1, there is only one way to partition the set\n    if n == 0 or n == 1:\n        return 1\n    \n    # Initialize the memoization array\n    memo = [0] * (n+1)\n    \n    # Fill the memoization array\n    memo[0] = 1\n    memo[1] = 1\n    \n    # Iterate through the rest of the array\n    for i in range(2, n+1):\n        for j in range(i):\n            # If j is less than or equal to i, it can be partitioned into i-j\n            if j <= i:\n                memo[i] += memo[j]\n    \n    # Return the final value in the memoization array\n    return memo[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 587869, 2203160, 75295096, 295232797, 10922789877, 47900163946, 196418877924, 7936748433969, 33452526613120, 137637530912891, 5502622159813648, 23084369733924160, 942473348811725312, 4294967296, 18446744073709551615, 73786976294838206464, 304888344611713860501, 12164510040883297369300, 531422407666066907724961, 22517998136852480769762049, 891761561063885764222667521, 39555617216582408185089237760, 169093209212599086709866974721, 6710886423942816976417284976640, 275295421092656611760154883458561, 10824728969245808287874406592629760, 45035996273704960000000000000000001, 18446744073709551615, 73786976294838206464, 304888344611713860501, 12164510040883297369300, 531422407666066907724961, 22517998136852480769762049, 891761561063885764222667521, 39555617216582408185089237760, 169093209212599086709866974721, 6710886423942816976417284976640, 275295421092656611760154883458561, 10824728969245808287874406592629760, 4503"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    def helper(k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return 1\n        else:\n            return helper(k - 1) + helper(k - 2)\n\n    return helper(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def count_ways(A, n, k):\n        if k == 1:\n            return 1\n        elif k == 0:\n            return 0\n        elif n == 0:\n            return 0\n        elif A[n - 1] == k:\n            return count_ways(A, n - 1, k) + count_ways(A, n - 1, k - 1)\n        else:\n            return count_ways(A, n - 1, k)\n\n    B = [1]\n    A = []\n    for i in range(2, n + 1):\n        B.append(B[i - 1] + B[i - 2])\n        A.append(B[i - 1])\n    return count_ways(A, n, B[n])"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables to store the count and current partition\n    count = 0\n    curr_part = 1\n\n    # Iterate through the set of Bell numbers\n    for i in range(1, n + 1):\n        # Add 1 to the current partition\n        curr_part += 1\n\n        # If the current partition is greater than n, reset it to 1\n        if curr_part > n:\n            curr_part = 1\n\n        # If the current partition is equal to n, increment the count\n        if curr_part == n:\n            count += 1\n\n    # Return the count of ways to partition the set of Bell numbers\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2 * bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty\n    if len(A) == 0:\n        return True\n\n    # initialize the first and last elements\n    first = A[0]\n    last = A[-1]\n\n    # loop through the array\n    for i in range(1, len(A) - 1):\n        # check if the current element is greater than the previous element\n        if A[i] > A[i - 1]:\n            # if it is greater, check if the current element is less than or equal to the next element\n            if A[i] > A[i + 1]:\n                return False\n        elif A[i] < A[i - 1]:\n            # if it is less, check if the current element is greater than or equal to the previous element\n            if A[i] < A[i + 1]:\n                return False\n\n    # if no inversion is found, the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    # If the array contains only one element, it is always monotonic\n    if n == 1:\n        return True\n    # Check if the array is monotonic in increasing order\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    # If the array is monotonic in increasing order, check if it is monotonic in decreasing order\n    for i in range(n-2, -1, -1):\n        if A[i] < A[i+1]:\n            return False\n    # If all elements are either equal or in the right order, then the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n < 2:\n        return True\n    else:\n        for i in range(1, n):\n            if A[i] >= A[i-1] and A[i]!= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    else:\n        if A[0] <= A[1]:\n            for i in range(1, len(A)-1):\n                if A[i] > A[i+1]:\n                    return False\n            return True\n        else:\n            for i in range(1, len(A)-1):\n                if A[i] < A[i+1]:\n                    return False\n            return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # Get the direction of increasing elements\n    increasing = 1\n    decreasing = 1\n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            increasing = 0\n        elif A[i] > A[i+1]:\n            decreasing = 0\n    \n    # Check if the direction of increasing elements and decreasing elements is same\n    if increasing == decreasing:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array has at least two elements\n    if len(A) < 2: \n        return False\n    \n    # Initialize the first element as the current minimum\n    current_min = A[0]\n    \n    # Loop through the array from the second element\n    for i in range(1, len(A)): \n        # Check if the current element is less than the previous minimum\n        if A[i] < current_min: \n            return False\n        \n        # Update the current minimum if the current element is greater than the previous minimum\n        current_min = A[i]\n        \n    # If we've made it through the loop without returning False, the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if array is empty or contains only one element\n    if len(A) <= 1:\n        return True\n\n    # initialize variables to keep track of the first and last elements of the array\n    first = A[0]\n    last = A[-1]\n\n    # iterate through the array and check if it is monotonic or not\n    for i in range(len(A)-1):\n        # if current element is less than the previous element, the array is not monotonic\n        if A[i] < A[i+1]:\n            return False\n\n        # if current element is greater than the previous element, update the first and last elements\n        if A[i] > A[i+1]:\n            first = A[i]\n            last = A[i+1]\n\n    # if the loop completes without finding any inequality, the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    if len(A) <= 1: \n        return True\n    \n    if A[0] <= A[-1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    if len(A) <= 1:\n        return True\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(s)):\n        if s[i] not in l[len(s)-i-1:]:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    # Check if the given sublist is empty\n    if not s:\n        return True\n\n    # Traverse through the list and check if the sublist is present or not\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n\n    # If no sublist is found, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s: # base case\n        return True\n    if l[0] in s and is_sublist(l[1:], s):\n        return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Check whether a list contains the given sublist or not.\n\n    Args:\n        l (list): the list to search in\n        s (list): the sublist to search for\n\n    Returns:\n        bool: True if the sublist is found in the list, False otherwise\n    '''\n\n    # If the list is empty, the sublist must be empty as well\n    if not l:\n        return True\n\n    # If the first element of the list is the same as the first element of the sublist,\n    # check if the sublist is contained in the rest of the list\n    if l[0] == s[0] and is_sublist(l[1:], s[1:]):\n        return True\n\n    # If the first element of the list is different from the first element of the sublist,\n    # check if the sublist is contained in the rest of the list or if there's a match in the list\n    if is_sublist(l[1:], s):\n        return True\n\n    # If we reach this point, the sublist is not contained in the list\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for sub in s:\n        if sub not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in l:\n        if s in i:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for tuple in Input:\n        if len(tuple) == len(Input[0]):\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    if len(Input[0]) == len(set(len(x) for x in Input)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # loop through the list of tuples and check if all tuples have equal length\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    # if all tuples have equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # loop through all the tuples in the list\n    for tup in Input:\n        # check if all the elements of the tuple have the same length\n        if len(tup)!= len(set(tup)):\n            return False\n    # if all the tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if the input is a list of tuples\n    if not all(isinstance(item, tuple) for item in Input):\n        print(\"Input is not a list of tuples\")\n        return\n    \n    # Initialize a variable to store the length of the first tuple\n    first_length = len(Input[0])\n    \n    # Iterate through the list of tuples and check if all tuples have the same length\n    for item in Input:\n        if len(item)!= first_length:\n            print(\"Tuples have different lengths\")\n            return\n    \n    # If all tuples have the same length, print a message\n    print(\"All tuples have the same length\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a boolean variable to keep track of whether all the tuples have equal length or not\n    all_tuples_have_same_length = True\n    \n    # Iterate through each tuple in the input list\n    for tuple1 in Input:\n        \n        # If the length of the current tuple is not equal to the length of the first tuple, then return False\n        if len(tuple1)!= len(Input[0]):\n            return False\n    \n    # If we've made it this far, then all the tuples have equal length so return True\n    return all_tuples_have_same_length"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(set(i))!= len(i):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for t in Input:\n        if len(t)!= len(set(t)):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    This function implements the Comb sort algorithm to sort a list of elements.\n\n    Args:\n        nums (list): A list of elements to be sorted.\n\n    Returns:\n        The sorted list.\n    \"\"\"\n\n    # Helper function to swap elements\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Helper function to partition the array\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] <= pivot:\n                i += 1\n                swap(arr, i, j)\n        swap(arr, i + 1, high)\n        return i + 1\n\n    # Main function to implement Comb sort\n    def comb_sort_iter(arr, n):\n        gap = n\n        while gap > 1:\n            gap = comb_sort_inner(arr, gap)\n            n = gap * 10\n\n        return arr\n\n    # Inner function to perform the actual sorting\n    def comb_sort_inner(arr, gap):\n        for i in range(gap, len(arr)):\n            for j in range(len(arr) - i, i - 1, -1):\n                if arr[j] > arr[j + gap]:\n                    swap(arr, j, j + gap)\n\n        return gap\n\n    # Perform the actual sorting\n    nums = comb_sort_iter(nums, len(nums))\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Define parameters\n    gap = len(nums)\n    max_iter = len(nums) * 2\n    swapped = True\n\n    while swapped and gap > 1:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap //= 1\n        max_iter //= 1\n\n        if max_iter == 0:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    swapped = True\n    n = len(nums)\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = (gap*10)//10"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = min(gap * 2, n)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    This is the Comb Sort algorithm implementation in Python.\n    The algorithm has a worst-case time complexity of O(n^2)\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    step = 1\n    while swapped:\n        swapped = False\n        for i in range(step, n):\n            if nums[i] < nums[i-step]:\n                nums[i], nums[i-step] = nums[i-step], nums[i]\n                swapped = True\n        step = step * 3 + 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = (gap * 10) // 13\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = (gap * 10) // 13\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j] > nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n            else:\n                break\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    The Comb Sort algorithm is a simple sorting algorithm that works by repeatedly sorting a sublist of the\n    unsorted list in each iteration. The length of each sublist is chosen as a function of the previous\n    sublist length.\n\n    The algorithm works by iterating over the list and comparing each adjacent pair of elements. If they are in\n    the wrong order, they are swapped. This process is repeated a set number of times, usually the size of the\n    list.\n\n    The best time complexity of Comb Sort is O(n^2), but it can be very slow for some input sizes.\n    '''\n\n    n = len(nums)\n\n    # Set the minimum increment value\n    min_inc = 1\n\n    # Initialize the gap value\n    gap = n\n\n    # Start the swapping loop\n    while gap > 1 or nums[0]!= nums[n-1]:\n        if gap == n:\n            gap = min_inc\n\n        # Set the new minimum increment value\n        min_inc = min_inc * 3 // 2\n\n        # Start the swapping process\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n\n        # Decrease the gap value\n        gap = gap // 2\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    gap = n\n\n    while swapped:\n        swapped = False\n        gap = min(gap, n)\n        i = 0\n        while i < n-gap:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n            i += 1"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # If the given number is 1, it can be represented as the difference of two squares\n    if n == 1:\n        return True\n    # If the given number is less than or equal to 2, it cannot be represented as the difference of two squares\n    elif n <= 2:\n        return False\n    # Otherwise, we check if the difference of two squares can be formed from the given number\n    else:\n        # Loop through all possible values of the first square\n        for i in range(2, n//2 + 1):\n            # Check if the difference of the first square and the given number can be formed as the second square\n            if n - i*i == i*i:\n                return True\n    # If we reach here, it means that the given number cannot be represented as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,int(n**0.5)+1):\n        if n == i**2 or n == (n-i**2):\n            print(n,\"is a difference of two squares\")\n            return True\n    print(n,\"is not a difference of two squares\")\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if n is a positive integer\n    if n <= 0:\n        print(\"Number should be positive.\")\n        return\n    \n    # check if n can be represented as the difference of two squares\n    for i in range(1, int(n**0.5)+1):\n        if n - i*i == i*i:\n            print(\"The number can be represented as the difference of two squares.\")\n            return\n    else:\n        print(\"The number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square_root = int(n ** 0.5)\n    if n == (square_root ** 2) ** 2:\n        return True\n    elif n == (square_root ** 2) + (square_root ** 2):\n        return True\n    elif n == (square_root ** 2) - (square_root ** 2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1): \n        if n == i**2 + i or n == i**2 - i: \n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n//2+1):\n        if (n-i*i) % (2*i) == 0:\n            print(True)\n            return\n    print(False)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the number can be represented as a square root of an integer\n    def is_square(num):\n        return num == int(num ** 0.5) ** 2\n\n    # Check if the number can be represented as the difference of two squares\n    def can_be_square_diff(num):\n        if is_square(num):\n            return True\n\n        for i in range(1, int(num ** 0.5) + 1):\n            if is_square(num - i ** 2) and is_square(num + i ** 2):\n                return True\n\n        return False\n\n    # Check if the given number can be represented as the difference of two squares or not\n    if can_be_square_diff(n):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Using the math library to calculate the square of the number\n    sq = int(n**0.5)\n\n    # Using the formula to check whether the difference is a square or not\n    if n == 2*sq**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = int(n**0.5)\n    y = int(n - x**2)\n    if x**2 + y**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    def is_square(num):\n        '''\n        Helper function to check if a number is a square or not.\n        '''\n        for i in range(int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sqrt_helper(num):\n        '''\n        Helper function to calculate the square root of a number using the babylonian method.\n        '''\n        x1, x2 = 0, 1\n        while abs(x2 - x1) > 0.00000001:\n            x3 = x1 - (x1 ** 2 - num) / (2 * x1)\n            x1, x2 = x2, x3\n        return x2\n\n    def square(x):\n        '''\n        Helper function to calculate the square of a number.\n        '''\n        return x ** 2\n\n    def check_square(x):\n        '''\n        Helper function to check if a number can be represented as the difference of two squares or not.\n        '''\n        if not is_square(x):\n            return False\n        s = sqrt_helper(x)\n        if s % 1 == 0:\n            return False\n        s1 = int(s)\n        s2 = int(s1 + 1)\n        return (square(s1) - square(s2)) == x\n\n    return check_square(n)"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if colors[i] == patterns[j]:\n            i += 1\n            j += 1\n        else:\n            j = 0\n    return i == n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    sequence = []\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            sequence.append(colors[i])\n    return sequence == patterns"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Create a dictionary to store the counts of each color in the given colors array\n    color_counts = {}\n    for color in colors:\n        if color in color_counts:\n            color_counts[color] += 1\n        else:\n            color_counts[color] = 1\n\n    # Check whether each color is present in the patterns array\n    for pattern in patterns:\n        if pattern not in color_counts:\n            return False\n        color_counts[pattern] -= 1\n        if color_counts[pattern] == 0:\n            del color_counts[pattern]\n\n    # If no color is missing, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize a variable to keep track of the index of the current pattern\n    pattern_index = 0\n\n    # Initialize a variable to keep track of the current pattern\n    current_pattern = patterns[pattern_index]\n\n    # Loop through each color in the colors list\n    for color in colors:\n\n        # If the color matches the current pattern color, move to the next pattern\n        if color == current_pattern[0]:\n            pattern_index += 1\n\n            # If we've reached the end of the patterns list, the sequence is not valid\n            if pattern_index == len(patterns):\n                return False\n\n            # Set the current pattern to the next pattern in the list\n            current_pattern = patterns[pattern_index]\n\n        # If the color doesn't match the current pattern color, the sequence is not valid\n        else:\n            return False\n\n    # If we've reached the end of the colors list and the sequence is valid, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    n = len(colors)\n    for i in range(n - 1):\n        if colors[i]!= colors[i+1]:\n            return False\n    if len(patterns)!= 1:\n        for i in range(len(patterns) - 1):\n            if patterns[i]!= patterns[i+1]:\n                return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    pattern_map = {}  # dictionary to keep track of pattern occurrences\n    current_pattern = ''  # current pattern\n    for color in colors:\n        if color in pattern_map:\n            current_pattern = pattern_map[color]\n        else:\n            pattern_map[color] = current_pattern = patterns.pop(0)\n        if current_pattern == patterns[0]:\n            patterns.pop(0)  # remove the first pattern from the sequence if it matches\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if patterns[i] == colors[i]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function checks whether it follows the sequence given in the patterns array.\n    It returns True if all the patterns in the array follow the sequence and False otherwise.\n    '''\n    # Check if the number of patterns is same as number of colors\n    if len(patterns)!= len(colors):\n        return False\n    \n    # Initialize the pattern index and current color index\n    pattern_index = 0\n    color_index = 0\n    \n    # Loop through the colors and patterns arrays\n    while True:\n        # Check if the pattern index is at the end of the patterns array\n        if pattern_index == len(patterns):\n            # If pattern index is at the end, return True\n            return True\n        \n        # If the current color matches the pattern at the pattern index\n        if colors[color_index] == patterns[pattern_index]:\n            # Increment the pattern index\n            pattern_index += 1\n            \n            # If the pattern index reaches the end, return False\n            if pattern_index == len(patterns):\n                return False\n            \n            # Increment the color index\n            color_index += 1\n            \n            # If the color index reaches the end, return False\n            if color_index == len(colors):\n                return False\n        else:\n            # If the current color does not match the pattern at the pattern index, return False\n            return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    sequence = [colors[0]]\n    for i in range(1, len(colors)):\n        if colors[i] == sequence[-1]:\n            sequence.append(colors[i])\n        else:\n            sequence = [colors[i]]\n            if sequence == patterns[i]:\n                return True\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create a set to store the tuples that have all elements divisible by K\n    result = set()\n    # loop through each tuple in the list\n    for tup in test_list:\n        # check if the tuple has all elements divisible by K\n        if all(num % K == 0 for num in tup):\n            # if it does, add the tuple to the result set\n            result.add(tup)\n    # return the result set\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Find all tuples in the given list of tuples that have all elements divisible by K.\n    \"\"\"\n    # create an empty list to store the result\n    result = []\n\n    # loop through each tuple in the input list\n    for tup in test_list:\n        # check if all elements in the tuple are divisible by K\n        if all(num % K == 0 for num in tup):\n            # if all elements are divisible by K, add the tuple to the result list\n            result.append(tup)\n\n    # return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K == 0:\n                count += 1\n        if count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if sum([j for j in range(K)]) == sum([j for j in range(K) if test_list[i][j] % K == 0]):\n            result.append(test_list[i])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        if all(i % K == 0 for i in tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        divisible = True\n        for e in t:\n            if e % K!= 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # loop through each element in the tuple\n        for j in range(len(test_list[i])):\n            # check if the element is divisible by K\n            if test_list[i][j] % K == 0:\n                # if it is, check if all elements in the tuple are divisible by K\n                is_divisible = True\n                for k in range(len(test_list[i])):\n                    if k!= j and test_list[i][k] % K!= 0:\n                        is_divisible = False\n                        break\n                # if all elements are divisible, add the tuple to the result list\n                if is_divisible:\n                    result.append(test_list[i])\n    # return the result list\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as input and returns True if it is divisible by 11, False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string into words\n    for word in words:\n        if len(word)%2 == 1: # check if the length of the word is odd\n            print(\"The length of the word is odd\")\n            break # exit the loop if the length of the word is odd"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word)"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Splitting the string into words\n    words = s.split()\n    # Initializing count variable to 0\n    count = 0\n    # Iterating through the words list\n    for word in words:\n        # Checking the length of the word\n        if len(word) % 2 == 1:\n            count += 1\n    # Returning the value of the count variable\n    return count"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # Split the string into a list of words\n    for word in words:\n        if len(word) % 2 == 0:  # If the length of the word is even\n            print(f\"{word} is even-length.\")\n        else:  # If the length of the word is odd\n            print(f\"{word} is odd-length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(\"The length of the word is even.\")\n        else:\n            print(\"The length of the word is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word)%2!= 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return (2 * n * (n - 1) * (n - 2)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 5\n    elif n == 2:\n        return 14\n    elif n == 3:\n        return 26\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    tetrahedral = 0\n\n    for i in range(1, n+1):\n        tetrahedral += (4*i*i-3*i)\n\n    return tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Define the base tetrahedron\n    base = [(1,0,0), (0,1,0), (0,0,1)]\n    \n    # Create a list to store the tetrahedrons\n    tetrahedrons = []\n    for i in range(1, n+1):\n        # Calculate the vertices of the tetrahedron\n        vertices = [(x**i, y**i, z**i) for x, y, z in base]\n        # Add the tetrahedron to the list\n        tetrahedrons.append(vertices)\n    \n    # Return the nth tetrahedron\n    return tetrahedrons[n-1]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def helper(n, count):\n        if n == 0:\n            return count\n        else:\n            return helper(n-1, 4*count + 6*count**2 - 2*count**3)\n    \n    return helper(n, 0)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize the result to 0\n    result = 0\n    \n    # Initialize the value of n\n    num = 0\n    \n    # Loop through the range of n\n    for i in range(1, n+1):\n        # Increment num by 1 on each iteration\n        num += 1\n        \n        # Check if the current num is a tetrahedral number\n        if num == 4*i - 3:\n            # If it is, add it to the result\n            result += num\n    \n    # Return the result\n    return result"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 0\n    for i in range(n, 0, -1):\n        t += 4 * i * (i - 1) // 2\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize the variables\n    a = 1\n    b = 4\n    c = 6\n    d = 10\n\n    # Calculate the nth tetrahedral number\n    tetrahedral_number = a * (a + 1) * (a + 2) // 6 + b * (b + 1) * (b + 2) // 6 + c * (c + 1) * (c + 2) // 6 + d * (d + 1) * (d + 2) // 6\n\n    # Return the nth tetrahedral number\n    return tetrahedral_number"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1: \n        return None\n    elif n == 1: \n        return 1\n    else: \n        return n * 2 + 1"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r ** 3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius as input and returns the volume of a sphere with that radius.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * (r ** 3)\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of the sphere as input and returns the volume of the sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*math.pow(r,3)\n\nprint(\"Volume of a sphere of radius 3:\", volume_sphere(3))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr(sum_ascii % 26 + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Convert the string to a list of characters\n    char_list = list(strr)\n\n    # Initialize the sum of ASCII values to 0\n    sum_ascii = 0\n\n    # Loop through each character of the list\n    for char in char_list:\n\n        # Convert the character to its ASCII value\n        ascii_value = ord(char)\n\n        # Add the ASCII value to the sum\n        sum_ascii += ascii_value\n\n    # Find the character made by adding the ASCII values modulo 26\n    char = chr((sum_ascii % 26) + ord('a'))\n\n    # Return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    char_value = (ascii_value % 26) + 65\n    return chr(char_value)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    # initialize the sum to zero\n    char_sum = 0\n\n    # iterate through each character in the string\n    for char in strr:\n        # get the ASCII value of the character\n        ascii_value = ord(char)\n\n        # add the ASCII value of the character to the sum modulo 26\n        char_sum = (char_sum + ascii_value) % 26\n\n    # get the character made by adding the ASCII values of all the characters modulo 26\n    char = chr(char_sum)\n\n    # return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    #initialize the result string with an empty string\n    result = ''\n\n    #iterate through each character of the given string\n    for char in strr:\n\n        #convert the character to its ASCII value\n        ascii_val = ord(char)\n\n        #add the ASCII value to the result string modulo 26\n        result += chr((ascii_val + ord('a') - 1) % 26 + ord('a'))\n\n    #return the result string\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_ascii = 0\n    for char in strr:\n        char_ascii += ord(char)\n\n    char = chr((char_ascii % 26) + 65)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr((sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for i in range(len(strr)):\n        total += ord(strr[i])\n    return chr((total % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n\n    return chr((char % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # initialize variables\n    ascii_value = 0\n    char = \"\"\n\n    # loop through the characters of the string and add their ASCII values\n    for i in strr:\n        ascii_value = ord(i)\n        char += chr((ascii_value + ascii_value) % 26)\n\n    return char"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0: \n        return None \n    elif n == 1: \n        return 1\n    else: \n        return sequence(n-1) + sequence(n-2) "
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n):\n        if sequence[i-1] == 0:\n            sequence.append(0)\n        else:\n            sequence.append(1)\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 691408733, 1124903170, 1816311903, 2941215073, 4757526976, 7708742049, 12466269025, 20175011074, 32641280099, 52816291173, 85457571272, 138273862445, 223731433717, 362005296162, 585736729879, 947742026041, 1533478755920, 2481220781961, 4014699537881, 6495919319842, 10510618857723, 17006538177565, 27517157035288, 44523695212853, 72040852248141, 116564547460994, 188605400209135, 305169947670129, 493775347879264, 808945295559393, 1302720643438657, 2111665943747892, 3414386587186549, 5526052530934441, 8940439118120990, 14466491649055431, 23406930767176421, 37873422416231852, 61279353183408273, 99152775599639125, 160432128783047398, 259584894382686523, 420016997653733921, 679599858194"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = 1\n    for i in range(1, n+1):\n        seq = 3 * seq + 1\n    return seq\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(1, n):\n        new_sequence = [1]\n        for j in range(len(sequence)):\n            if sequence[j] == 1 and len(new_sequence) < i:\n                new_sequence.append(1)\n            elif sequence[j] == 1 and len(new_sequence) == i:\n                new_sequence.append(0)\n            elif sequence[j] == 0:\n                new_sequence.append(0)\n        sequence = new_sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return 3 * (sequence(n-1) - sequence(n-2))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]  # start with 0 and 1\n    for i in range(2, n):\n        if i % 2 == 0:\n            sequence.append(sequence[-2] + sequence[-1])\n        else:\n            sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 2, 3, 4, 5, 7, 9, 12, 16, 22, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325, 351, 378, 406, 435, 465, 496, 528, 561, 595, 630, 666, 703, 741, 780, 820, 861, 903, 946, 990, 1035, 1081, 1128, 1176, 1225, 1275, 1326, 1378, 1431, 1485, 1540, 1596, 1653, 1711, 1770, 1830, 1891, 1953, 2016, 2080, 2145, 2211, 2278, 2346, 2415, 2485, 2556, 2628, 2701, 2775, 2850, 2926, 3003, 3081, 3160, 3240, 3321, 3403, 3486, 3570, 3655, 3741, 3828, 3916, 4005, 4095, 4186, 4278, 4371, 4465, 4560, 4656, 4753, 4851, 4950, 5050, 5151, 5253, 5356, 5460, 5565, 5671, 5778, 5886, 5995, 6105, 6216, 6328, 6441, 6555, 6670, 6786, 6903, 7021, 7140, 7260, 7381, 7503, 7626, 7750, 7875, 8001, 8128, 8256, 8385, 8515, 8646, 8778, 8911, 9045, 9180, 9316, 9453, 9591, 9730, 9870, 10011, 10153, 10296, 10440, 10585, 10731, 10878, 11026, 11175, 11325, 11476, 11628, 11781, 11935, 12090, 12246, 12403, 12561, 12720, 12880, 13041, 13203, 13366, 13530, 13695, 13861,"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 1\n    elif n == 5:\n        return 1\n    elif n == 6:\n        return 1\n    elif n == 7:\n        return 1\n    elif n == 8:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n\nn = int(input(\"Enter a number to find its newman conway sequence: \"))\nprint(\"The\", n, \"number in the newman conway sequence is:\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * (r**3)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**3  # using formula for surface area of sphere\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of the sphere\n    A = 4 * math.pi * r**2\n    return A"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4 * math.pi * r ** 2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*(r**2)\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Centered hexagonal numbers are obtained by adding the product of the number and the golden ratio to 2\n    golden_ratio = (1 + 5 ** 0.5) / 2\n    return n * golden_ratio + 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case: if n=0, then the first centered hexagonal number is 0\n    if n == 0:\n        return 0\n    # Base case: if n=1, then the first centered hexagonal number is 2\n    elif n == 1:\n        return 2\n    # Base case: if n=2, then the second centered hexagonal number is 6\n    elif n == 2:\n        return 6\n    # Base case: if n=3, then the third centered hexagonal number is 14\n    elif n == 3:\n        return 14\n    # Recursive case:\n    # Calculate the centered hexagonal number for n-1 and add 6 to it\n    else:\n        return centered_hexagonal_number(n-1) + 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagon_numbers = [1, 6, 15, 28, 45, 66, 91, 120, 153, 190, 231, 276, 325, 378, 435, 496, 561, 630, 703, 780, 861, 946, 1035, 1128, 1225, 1326, 1431, 1540, 1653, 1770, 1891, 2016, 2145, 2278, 2415, 2556, 2701, 2850, 3003, 3160, 3321, 3486, 3655, 3828, 4005, 4186, 4371, 4560, 4753, 4950, 5151, 5356, 5565, 5778, 6005, 6236, 6471, 6710, 6953, 7200, 7451, 7706, 7965, 8228, 8495, 8766, 9041, 9320, 9603, 9890, 10181, 10476, 10775, 11078, 11385, 11696, 12011, 12330, 12653, 12980, 13311, 13646, 13985, 14328, 14675, 15026, 15381, 15740, 16103, 16470, 16841, 17216, 17595, 17978, 18365, 18756, 19151, 19550, 19953, 20360, 20771, 21186, 21605, 22028, 22455, 22886, 23321, 23760, 24203, 24650, 25101, 25556, 26015, 26478, 26945, 27416, 27891, 28370, 28853, 29340, 29831, 30326, 30825, 31328, 31835, 32346, 32861, 33380, 33903, 34430, 34961, 35496, 36035, 36578, 37125, 37676, 38231, 38790, 39353, 39920, 40491, 41066, 41645, 42228, 42815, 43406, 44001, 44600, 45203, 45810, 46421, 47036, 47655,"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2*n - 1)) // 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 1\n    count = 0\n    for i in range(1, n+1):\n        if count == n:\n            return b\n        elif count < n:\n            a += b\n            count += 1\n        else:\n            a -= b\n            count -= 1\n        b += 2\n    return 0"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 1\n    while a <= n:\n        while b <= n:\n            print(\"{:^2d}\".format(a), end=\" \")\n            b += 1\n        b = 1\n        a += 1\n        print()"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 0\n    b = 1\n    c = 0\n    \n    for i in range(1, n+1):\n        a, b, c = b, c, a + b + c\n        \n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find the nth centered hexagonal number.\n    \"\"\"\n    # Convert n to the corresponding centered hexagonal number.\n    # First, find the smallest centered hexagonal number greater than or equal to n.\n    # Then, subtract n from the centered hexagonal number and divide by 3.\n    # This is the correct centered hexagonal number.\n    centered_hex = (n - 1) // 3\n    \n    # Calculate the corresponding centered hexagonal number in terms of the number of right triangles.\n    # We can use the formula for the number of right triangles of a hexagon:\n    #   n = 2h - 1 (where h is the side length of a hexagon)\n    # To find the side length of a centered hexagon, we need to find the base length.\n    # We can use the formula:\n    #   b = \u221a3 / 2 (where \u221a3 is the square root of 3)\n    # Using this formula, we have:\n    #   b = \u221a3 / 2 = 1.7320508075688772 (approximately)\n    # So the base length of a centered hexagon is approximately 1.7320508075688772.\n    # We need to find the side length of the hexagon using the formula:\n    #   h = \u221a(\u221a3 / 2)^2 (where \u221a3 is the square root of 3)\n    # Using this formula, we have:\n    #   h = \u221a(\u221a3 / 2)^2 = 1.324717957244746 (approximately)\n    # So the side length of the hexagon is approximately 1.324717957244746.\n    # Therefore, we can calculate the number of right triangles in terms of the side length:\n    #   n = 2h - 1 = 2(1.324717957244746) - 1 = 102 - 1 = 101\n    # We can use this value of n to find the corresponding centered hexagonal number.\n    # Finally, we can return the centered hexagonal number.\n    return centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2) + centered_hexagonal_number(n-3) + centered_hexagonal_number(n-4)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables for the centered hexagonal number\n    centered_hex = 0\n    hex_sides = 0\n    \n    # Calculate the number of hexagons needed to reach nth hexagonal number\n    hex_num = n + 1\n    hex_sides = int(hex_num/2)\n    \n    # Add the number of hexagons to the centered hexagonal number\n    for i in range(1, hex_sides+1):\n        centered_hex += i*i*i\n    \n    # Return the centered hexagonal number\n    return centered_hex"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n    - dict1: Dictionary with key-value pairs\n    - dict2: Dictionary with key-value pairs\n    - dict3: Dictionary with key-value pairs\n\n    Returns:\n    - merged_dict: Dictionary with all the key-value pairs from all the dictionaries\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create a new dictionary to store the merged results\n    merged_dict = {}\n    # Loop through each key in the first dictionary\n    for key in dict1:\n        # If the key already exists in the merged dictionary, add the value from the first dictionary\n        if key in merged_dict:\n            merged_dict[key] = dict1[key]\n        # If the key doesn't exist in the merged dictionary, add the key and value from the first dictionary\n        else:\n            merged_dict[key] = dict1[key]\n    # Loop through each key in the second dictionary\n    for key in dict2:\n        # If the key already exists in the merged dictionary, add the value from the second dictionary\n        if key in merged_dict:\n            merged_dict[key] = dict2[key]\n        # If the key doesn't exist in the merged dictionary, add the key and value from the second dictionary\n        else:\n            merged_dict[key] = dict2[key]\n    # Loop through each key in the third dictionary\n    for key in dict3:\n        # If the key already exists in the merged dictionary, add the value from the third dictionary\n        if key in merged_dict:\n            merged_dict[key] = dict3[key]\n        # If the key doesn't exist in the merged dictionary, add the key and value from the third dictionary\n        else:\n            merged_dict[key] = dict3[key]\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # Combine the dictionaries using a new dictionary type that preserves insertion order\n    merged_dict = ct.OrderedDict(dict1.items() + dict2.items() + dict3.items())\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict and key not in dict2:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def freq_count(list1):\n    # Create a dictionary to store the frequency of each element in the list\n    freq = collections.defaultdict(int)\n\n    # Iterate over the elements in the list and increment their frequency in the dictionary\n    for elem in list1:\n        freq[elem] += 1\n\n    # Return the dictionary of frequency counts\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Use a dictionary to store the frequency of each element in the list\n    freq_dict = collections.defaultdict(int)\n\n    # Loop through the list and update the frequency count for each element\n    for item in list1:\n        freq_dict[item] += 1\n\n    # Return the dictionary with the frequency counts\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    for i in range(1, N+1):\n        if abs(N-i) < smallest:\n            smallest = abs(N-i)\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # initialize variables to store the smallest and largest numbers\n    smallest = float('inf')\n    largest = float('-inf')\n    \n    # loop through the numbers from 1 to n\n    for i in range(1, N+1):\n        # check if the current number is smaller than the current smallest number\n        if i < smallest:\n            # if it is, update the smallest number\n            smallest = i\n        \n        # check if the current number is larger than the current largest number\n        elif i > largest:\n            # if it is, update the largest number\n            largest = i\n    \n    # calculate the closest smaller number and return it\n    return smallest if N-smallest <= largest-N else smallest if smallest-N <= largest-N else largest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    \n    for i in range(1, N):\n        if N - i < i:\n            closest = N - i\n            break\n        \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    def closest_smaller(n):\n        if n < 2:\n            return n\n        else:\n            return closest_smaller(n-1)\n    \n    def closest_larger(n):\n        if n > 1:\n            return n\n        else:\n            return closest_larger(n+1)\n    \n    smaller = closest_smaller(N)\n    larger = closest_larger(N)\n    return min(smaller, larger)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    if N < 0:\n        return closest_num(-N)\n    elif N < 10:\n        return N\n    else:\n        return closest_num(N - 1)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    while True:\n        if n-1 < 0:\n            return n\n        else:\n            n -= 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_list = list(range(1, N+1)) # generate a list of numbers from 1 to N\n    closest_num = num_list[0] # initialize the closest number to be the smallest number\n    \n    # loop over the remaining numbers in the list\n    for num in num_list[1:]:\n        # if the current number is smaller than the closest number, update the closest number\n        if num < closest_num:\n            closest_num = num\n    \n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    num = N\n    while True:\n        if num - 1 == -1:\n            print(\"No smaller numbers to find.\")\n            break\n        else:\n            print(num-1)\n            num -= 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 1\n    elif N % 2 == 0:\n        return closest_num(int(N/2)) + 1\n    else:\n        return closest_num(int(N/2)) - 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    left, right = 1, N\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if mid == N:\n            left = mid + 1\n        elif mid > N:\n            left = mid\n        else:\n            right = mid - 1\n\n    return left"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize variables to keep track of the length of the longest word and its index\n    max_len = 0\n    max_index = 0\n    \n    # Loop through the list\n    for i in range(len(list1)):\n        # Split the current word into a list of characters\n        word = list1[i].split()\n        # Get the length of the longest word\n        curr_len = max(len(w) for w in word)\n        # If the current word is longer than the longest, update the variables\n        if curr_len > max_len:\n            max_len = curr_len\n            max_index = i\n    \n    # Return the length of the longest word\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of strings as input and returns the length of the longest word in the list.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    longest_word = ''\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n            longest_word = word\n    return longest_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list of strings.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list.\n    '''\n    \n    # initialize variables\n    max_length = 0\n    longest_word = \"\"\n    \n    # loop through the list\n    for word in list1:\n        \n        # check if the word is longer than the previous longest word\n        if len(word) > max_length:\n            max_length = len(word)\n            longest_word = word\n            \n    return longest_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize variable to store the length of the longest word\n    longest_len = 0\n\n    # Iterate through each word in the list\n    for word in list1:\n        # Convert the word to lowercase and split it into a list of characters\n        word_list = list(word.lower())\n        # Find the length of the longest word in the list\n        if len(word_list) > longest_len:\n            longest_len = len(word_list)\n\n    # Return the length of the longest word found\n    return longest_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Check if the sub_str is present in any of the values of the list str1\n    for value in str1:\n        if sub_str in value:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list) and isinstance(sub_str, str):\n        for s in str1:\n            if s.find(sub_str)!= -1:\n                return True\n        return False\n    else:\n        print(\"Both parameters must be of type list and string.\")\n        return None"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, str) and isinstance(sub_str, str):\n        for s in str1:\n            if s in sub_str:\n                return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if str1 in sub_str:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    return str1 in sub_str"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    sub_str_list = sub_str.split()\n    for word in str1.split():\n        if all(word in sub_str_list for sub_str_list in word.split()):\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:  # even number\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the number is positive\n    if n <= 0: \n        return \"The number should be a positive integer.\"\n\n    # Check if the number is divisible by 2\n    if n % 2 == 0: \n        return \"The number should not be divisible by 2.\"\n\n    # Check if the number is divisible by 3\n    if n % 3 == 0: \n        return \"The number should not be divisible by 3.\"\n\n    # Check if the number is divisible by 4\n    if n % 4 == 0: \n        return \"The number should not be divisible by 4.\"\n\n    # Check if the number is divisible by 5\n    if n % 5 == 0: \n        return \"The number should not be divisible by 5.\"\n\n    # Check if the number is divisible by 6\n    if n % 6 == 0: \n        return \"The number should not be divisible by 6.\"\n\n    # Check if the number is divisible by 7\n    if n % 7 == 0: \n        return \"The number should not be divisible by 7.\"\n\n    # Check if the number is divisible by 8\n    if n % 8 == 0: \n        return \"The number should not be divisible by 8.\"\n\n    # Check if the number is divisible by 9\n    if n % 9 == 0: \n        return \"The number should not be divisible by 9.\"\n\n    # Check if the number is divisible by 10\n    if n % 10 == 0: \n        return \"The number should not be divisible by 10.\"\n\n    # Check if the number is divisible by 11\n    if n % 11 == 0: \n        return \"The number should not be divisible by 11.\"\n\n    # Check if the number is divisible by 12\n    if n % 12 == 0: \n        return \"The number should not be divisible by 12.\"\n\n    # Check if the number is divisible by 13\n    if n % 13 == 0: \n        return \"The number should not be divisible by 13.\"\n\n    # Check if the number is divisible by 14\n    if n % 14 == 0: \n        return \"The number should not be divisible by 14.\"\n\n    # Check if the number is divisible by 15\n    if n % 15 == 0: \n        return \"The number should not be divisible by 15.\"\n\n    # Check if the number is divisible by 16\n    if n % 16 == 0: \n        return \"The number should not be divisible by 16.\"\n\n    # Check if the number is divisible by 17\n    if n % 17 == 0: \n        return \"The number should not be divisible by 17.\"\n\n    # Check if the number is divisible by 18\n    if n % 18 == 0: \n        return \"The number should not be divisible by 18.\"\n\n    # Check if the number is divisible by 19\n    if n % 19 == 0: \n        return \"The number should not be divisible by 19.\"\n\n    # Check if the number is divisible by 20\n    if n % 20 == 0: \n        return \"The number should not be divisible by 20.\"\n\n    # Check if the number is divisible by 21\n    if n % 21 == 0: \n        return \"The number should not be divisible by 21.\"\n\n    # Check if the number is divisible by 22\n    if n % 22 == 0: \n        return \"The number should not be divisible by 22.\"\n\n    # Check if the number is divisible by 23\n    if n % 23 == 0: \n        return \"The number should not be divisible by 23.\"\n\n    # Check if the number is divisible by 24\n    if n % 24 == 0: \n        return \"The number should not be divisible by 24.\"\n\n    # Check if"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"The number is even and undulating.\"\n    else:\n        return \"The number is odd and undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    \"\"\"\n    This function takes an integer as input and returns True if it is undulating, else it returns False.\n    An undulating number is a number whose sum of digits is equal to the original number.\n    \"\"\"\n    original_number = n\n    sum_digits = 0\n    while n > 0:\n        digit = n % 10\n        sum_digits += digit\n        n //= 10\n    return original_number == sum_digits"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_undulating(n // 2)\n    else:\n        return is_undulating((3 * n) + 1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    This function takes an integer n as input and returns True if the number is undulating, and False otherwise.\n    An undulating number is a number that when raised to the power of 3 is equal to n.\n    '''\n    if n == (n ** 3):\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    This function checks whether a given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        a *= a\n        b //= 2\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b > 0:\n        return a * power(a, b-1)\n    else:\n        return 1 / power(a, -b)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n\n    :param a: The base number.\n    :type a: int or float\n\n    :param b: The exponent.\n    :type b: int or float\n\n    :return: The result of 'a' to the power of 'b'.\n    :rtype: int or float\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples by the second value (index 1)\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # sort the list by the second element of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the first element of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second element (the second value)\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    min_index = 0\n    min_value = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Use the built-in min() function to find the index of the smallest second value\n    min_index = min(range(len(test_list)), key=lambda i: itemgetter(1)(test_list[i]))\n    # Return the first value of the tuple with the smallest second value\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: (test_list[i][1]))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_index = 0\n    minimum = test_list[0][1]\n    for i in range(len(test_list)):\n        if test_list[i][1] < minimum:\n            minimum_index = i\n            minimum = test_list[i][1]\n    return test_list[minimum_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list of tuples based on the second element of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the first element of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for sublist in lst:  \n        if len(sublist) < min_length:  \n            min_length = len(sublist)  \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 99999\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for item in lst:\n        if len(item) < min_length:\n            min_length = len(item)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = None\n    for sub_lst in lst:\n        if not min_len:\n            min_len = len(sub_lst)\n        elif len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = 1000000000  #initialize minimum length to a very large value\n    for item in lst:\n        if len(item) < min_length:\n            min_length = len(item)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for sublist in lst:  \n        if len(sublist) < min_length:  \n            min_length = len(sublist)  \n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of that integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\nprint(divisor(20))  # Output: 4"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # Define an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Loop through each element in the list\n    for item in list1:\n        \n        # If the item is a list, flatten it and recursively call the function\n        if isinstance(item, list):\n            flattened_list = flatten(item)\n            freq_dict = merge_dicts(freq_dict, frequency_lists(flattened_list))\n        # If the item is not a list, check if it is already in the dictionary\n        elif item in freq_dict:\n            freq_dict[item] += 1\n        # If the item is not in the dictionary yet, add it with a frequency of 1\n        else:\n            freq_dict[item] = 1\n            \n    return freq_dict\n\ndef flatten(lst):\n    '''\n    Flatten a list of lists.\n    '''\n    return [item for sublist in lst for item in sublist]\n\ndef merge_dicts(dict1, dict2):\n    '''\n    Merge two dictionaries.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    frequency = {}\n\n    # iterate over each element of the list1\n    for element in list1:\n        # check if the element is already in the dictionary\n        if element in frequency:\n            # if it is, increment its frequency by 1\n            frequency[element] += 1\n        else:\n            # if it's not, add it to the dictionary with a frequency of 1\n            frequency[element] = 1\n\n    # return the dictionary\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for elem in item:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        for j in i:\n            if j in freq:\n                freq[j] += 1\n            else:\n                freq[j] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Loop through the list of lists\n    for lst in list1:\n        # Loop through each element in the current list\n        for elem in lst:\n            # If the element is not already in the dictionary, add it with a count of 1\n            if elem not in freq_dict:\n                freq_dict[elem] = 1\n            # If the element is already in the dictionary, increment its count by 1\n            else:\n                freq_dict[elem] += 1\n    \n    # Return the dictionary of frequencies\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency = {}\n    for item in flattened_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store frequency of each element\n    freq_dict = {}\n    # flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    # iterate through the flattened list\n    for item in flat_list:\n        # if the item is already in the dictionary, increment its frequency by 1\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # if the item is not in the dictionary, add it to the dictionary with frequency 1\n        else:\n            freq_dict[item] = 1\n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Initialize an empty dictionary\n    freq = {}\n    \n    # Loop over all elements in the list\n    for item in list1:\n        # Check if the item is a list\n        if isinstance(item, list):\n            # Recursively call the function with the list as argument\n            sub_freq = frequency_lists(item)\n            # Merge the sub-frequency dictionary into the main one\n            freq = {**freq, **sub_freq}\n        else:\n            # Check if the item is already in the dictionary\n            if item not in freq:\n                # If not, add it with a frequency of 1\n                freq[item] = 1\n            else:\n                # If it is, increment its frequency by 1\n                freq[item] += 1\n                \n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product // len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert a decimal number to its binary equivalent.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_string = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_string = str(remainder) + binary_string\n        n = n // 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Convert decimal to binary\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    # Remove leading zeros\n    return binary.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize an empty string to store the binary equivalent\n    binary = \"\" \n\n    # loop until the decimal number becomes 0\n    while n > 0: \n        # find the remainder of n divided by 2\n        rem = n % 2\n\n        # convert the remainder to a string and append it to the binary string\n        binary = str(rem) + binary\n\n        # shift the decimal number to the right by 1 bit\n        n = n // 2\n\n    # return the binary string without leading zeros\n    return binary.lstrip(\"0\")"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    else:\n        binary_num = ''\n        while n > 0:\n            remainder = n % 2\n            binary_num = str(remainder) + binary_num\n            n = n // 2\n        return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    # Convert the given decimal number to binary using bitwise operations.\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Convert decimal number to binary string\n    binary_str = bin(n)[2:]\n\n    # Remove leading zeros from binary string\n    while binary_str[0] == '0':\n        binary_str = binary_str[1:]\n\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    if num_str[0] == '0':\n        return None\n    num_str = ''.join(sorted(num_str, reverse=True))\n    if int(num_str) > 10 ** 9:\n        return None\n    next_num = int(num_str)\n    if next_num > 10 ** 9:\n        return None\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the smallest integer that is also a palindrome.\n    \"\"\"\n    if num < 10:\n        return num + 1\n    else:\n        for i in range(10, 100):\n            if is_palindrome(i + num):\n                return i + num\n        return None\n\ndef main():\n    try:\n        num = int(input(\"Enter an integer: \"))\n        if num < 10:\n            print(next_smallest_palindrome(num))\n        else:\n            print(next_smallest_palindrome(num))\n    except ValueError:\n        print(\"Invalid input. Please enter an integer.\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Initialize the two variables to store the current and next smallest palindrome\n    current = num\n    next_smallest = num * 10\n    \n    # Iterate until we find the next smallest palindrome\n    while True:\n        # Find the next palindrome by adding 1 to the current palindrome and converting it to a string\n        next_palindrome = str(int(current) + 1)\n        \n        # Check if the next palindrome is a palindrome\n        if int(next_palindrome) == int(next_palindrome[::-1]):\n            # If it is a palindrome, update the variables accordingly\n            current = next_palindrome\n            next_smallest = int(current)\n        \n        # If the next palindrome is greater than the current palindrome, we have found the next smallest palindrome\n        else:\n            break\n    \n    # Return the next smallest palindrome\n    return next_smallest"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    def is_palindrome(n):\n        '''\n        Helper function to check if a number is a palindrome.\n        '''\n        if n < 0:\n            return False\n        s = str(n)\n        return s == s[::-1]\n    \n    def next_palindrome(n):\n        '''\n        Helper function to find the next palindrome of a given number.\n        '''\n        if is_palindrome(n+1):\n            return n+1\n        return next_palindrome(n+10)\n    \n    def next_smallest_palindrome(num):\n        '''\n        Main function to find the next smallest palindrome of a specified integer.\n        '''\n        n = next_palindrome(num)\n        while not is_palindrome(n):\n            n = next_palindrome(n)\n        return n\n    \n    return next_smallest_palindrome(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    if num < 10:\n        return num + 1\n\n    for i in range(10, 1, -1):\n        temp = str(num) + str(i)\n        if is_palindrome(int(temp)):\n            return int(temp)\n\n    return 0"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_palindrome(n):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    num_str = str(n)\n    return num_str == num_str[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num):\n        # If the input number is already a palindrome, increment it by 1\n        return num + 1\n    else:\n        # If the input number is not a palindrome, find the next smallest palindrome\n        if num < 10:\n            # If the input number is less than 10, increment it by 1\n            return num + 1\n        else:\n            # Otherwise, multiply the input number by 10 and keep dividing by 10 until we get a palindrome\n            while not is_palindrome(num):\n                num *= 10\n            return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def palindrome_to_int(s):\n        return int(s)\n\n    def int_to_palindrome(n):\n        return str(n)\n\n    def get_next_smallest_palindrome(n):\n        for i in range(n, 1, -1):\n            if is_palindrome(i):\n                return palindrome_to_int(str(i))\n        return 0\n\n    return get_next_smallest_palindrome(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    \n    def is_palindrome(n):\n        \"\"\"\n        Returns True if the input number is a palindrome, False otherwise.\n        \"\"\"\n        return str(n) == str(n)[::-1]\n    \n    # Check if the input number is already a palindrome\n    if is_palindrome(num):\n        return num + 1\n    \n    # Convert the input number to a string and reverse it\n    num_str = str(num)[::-1]\n    \n    # Iterate through all possible numbers between 10 and the input number, and check if they are palindromes\n    for i in range(9, num + 1):\n        if is_palindrome(i):\n            return int(num_str + str(i))\n    \n    # If no palindromes are found, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        # if it is, return it\n        return num\n\n    # initialize variables for checking palindromes\n    min_num = 10**(len(str(num))+1) - 1\n    max_num = 10**(len(str(num))+1) - 2\n\n    # iterate over the range of possible palindromes\n    for i in range(max_num, min_num - 1, -1):\n        # check if the current number is a palindrome\n        if str(i) == str(i)[::-1]:\n            # if it is, return it\n            return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize the smallest palindrome to be the maximum integer value\n    smallest_palindrome = sys.maxsize\n    \n    # Loop through all numbers from 1 to the specified integer\n    for i in range(1, num+1):\n        # Convert the current number to a string and reverse it\n        reversed_num = int(str(i)[::-1])\n        \n        # Check if the reversed number is a palindrome and is smaller than the smallest palindrome found so far\n        if reversed_num < smallest_palindrome:\n            smallest_palindrome = reversed_num\n    \n    # Return the smallest palindrome found\n    return smallest_palindrome"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if array is empty or k is negative\n    if not arr or k < 1:\n        return \"Invalid input\"\n    # check if k is equal to the length of the array\n    elif k == len(arr):\n        return arr[-1]\n    # find the index of the element at k-1\n    index = k - 1\n    # check if the element at index is the kth element\n    if index < len(arr) // 2:\n        return arr[index]\n    # check if the element at index is greater than the kth element\n    elif index == len(arr) // 2:\n        # check if the array is odd\n        if len(arr) % 2 == 1:\n            return arr[index]\n        # check if the array is even\n        else:\n            return (arr[index - 1] + arr[index]) / 2\n    # check if the element at index is less than the kth element\n    else:\n        # check if the array is odd\n        if len(arr) % 2 == 1:\n            return arr[index]\n        # check if the array is even\n        else:\n            return (arr[index] + arr[index - 1]) / 2"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        for i in range(len(arr)):\n            if i == k - 1:\n                return arr[i]\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    for i in range(1, n + 1):\n        if k == i:\n            return arr[k - 1]\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Find the length of the array\n    n = len(arr)\n    \n    # If k is less than 1 or greater than the length of the array, return None\n    if k < 1 or k > n:\n        return None\n    \n    # Initialize two pointers, one at the beginning of the array and the other at the end\n    left = 1\n    right = n\n    \n    # While there are still elements in the array to be searched\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n        \n        # If the middle element is equal to k, return it\n        if arr[mid] == k:\n            return arr[mid]\n        \n        # If k is greater than the middle element, ignore the left half of the array\n        elif k > arr[mid]:\n            left = mid + 1\n        \n        # If k is less than the middle element, ignore the right half of the array\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        raise ValueError(\"Array length must be greater than or equal to k.\")\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        print(\"Error: The value of k is greater than the number of elements in the array.\")\n        return\n    \n    for i in range(1, n+1):\n        if i == k:\n            return arr[i-1]\n        elif i < k:\n            continue\n        else:\n            arr.pop(i-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if len(arr) < k:\n        print(\"Error: The length of the array is less than the kth element to find.\")\n    elif k < 1:\n        print(\"Error: k is less than 1, so the kth element cannot be found.\")\n    else:\n        for i in range(len(arr)):\n            if i == k - 1:\n                return arr[i]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        print(\"Invalid input! The array should have at least\", k, \"elements.\")\n    else:\n        return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the snake case string into a list of words\n    snake_words = word.split('_')\n    # Convert the first letter of each word to uppercase\n    camel_words = [word[0].upper() + word[1:] for word in snake_words]\n    # Join the camel case words back together\n    camel_case = ''.join(camel_words)\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case = ''\n    for i in range(len(words)):\n        if i == 0:\n            camel_case += words[i].lower()\n        else:\n            camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = []\n    for char in word:\n        if char.isupper():\n            camel_case.append(char)\n        else:\n            camel_case.append(char.upper())\n    return ''.join(camel_case)\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        else:\n            if char.isupper():\n                camel_case += \"_\" + char.lower()\n            else:\n                camel_case += char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif word[i-1] == \"_\":\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for letter in word:\n        if letter.isupper():\n            camel_case += letter\n        else:\n            camel_case += \"_\" + letter.lower()\n    return camel_case.lstrip(\"_\")"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_part = word.split('_')[0].lower()\n    rest_of_word = word.split('_')[1:]\n    camel_case_word = first_part + ''.join(rest_of_word).capitalize()\n    return camel_case_word"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return -1\n    elif n == 1:\n        return m\n    elif m == 1:\n        return n\n    else:\n        return eulerian_num(n-1, m-1) + eulerian_num(n-1, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return 0\n    elif n > m:\n        n, m = m, n\n    count = 0\n    for i in range(1, n + 1):\n        if i % m == 0:\n            count += 1\n    return count"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize a list to store the Eulerian numbers\n    a_list = []\n\n    # Iterate over all pairs of numbers (n, m) and (m, n)\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            # Check if the two numbers form a valid triangular number\n            if (i * (i + 1) + j * (j + 1)) == (n * (n + 1) + m * (m + 1)):\n                # If they do, add the Eulerian number to the list\n                a_list.append((i, j))\n\n    # Return the maximum Eulerian number in the list\n    return max(a_list)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize a 2D list to store the positions of the figures\n    positions = [[0 for j in range(m)] for i in range(n)]\n\n    # Define the starting position and mark it as visited\n    current_row = n - 1\n    current_col = m - 1\n    visited = [True] * (m * n)\n    visited[m * (n - 1) + m - 1] = True\n\n    # Initialize the Eulerian number a(n, m)\n    a = 0\n\n    # Loop until all the cells have been visited\n    while True:\n        # Get the adjacent positions of the current cell\n        up_pos = (current_row - 1, current_col)\n        left_pos = (current_row, current_col - 1)\n        down_pos = (current_row + 1, current_col)\n        right_pos = (current_row, current_col + 1)\n\n        # If the current cell has no adjacent cells, we have reached the end of the tour\n        if up_pos not in positions[0] and left_pos not in positions[current_row] and down_pos not in positions[n - 1] and right_pos not in positions[m - 1]:\n            break\n\n        # If the current cell has no unvisited neighboring cells, we have reached a dead end\n        if not any(visited[m * row + col] for row in range(n) for col in range(m)):\n            break\n\n        # If the current cell has exactly one unvisited neighboring cell, we visit the neighboring cell\n        if any(visited[m * row + col] for row in range(n) for col in range(m)) and (not visited[m * current_row + current_col] or visited[m * row + col] for row in range(n) for col in range(m)):\n            visited[m * current_row + current_col] = True\n            positions[current_row][current_col] = a + 1\n\n            # Update the Eulerian number a(n, m)\n            a += 1\n\n            # Update the current position and continue the tour\n            current_row += 1\n            current_col = (current_col + 1) % m\n        else:\n            # Otherwise, we continue the tour without visiting the current cell\n            current_row -= 1\n            current_col = (current_col - 1) % m\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Euler's formula for the nth prime\n    def nth_prime(n):\n        count = 0\n        num = 1\n        while True:\n            count += 1\n            if is_prime(num):\n                if count == n:\n                    return num\n                num += 1\n\n    # Helper function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Helper function to compute the sum of the first n prime numbers\n    def sum_of_primes(n):\n        count = 0\n        total = 0\n        num = nth_prime(1)\n        while count < n:\n            total += num\n            count += 1\n            num = nth_prime(count + 1)\n        return total\n\n    # Compute the value of a(n, m)\n    a = sum_of_primes(m) - sum_of_primes(m - 1) + nth_prime(n)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(1, n+1):\n        a += (1 - (2*i-1)*(2*i-1)) * 1/(2*i-1)\n    \n    for j in range(1, m+1):\n        a += 1/(2*j-1)\n    \n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    for i in range(1, n + 1):\n        a *= i\n    for j in range(1, m + 1):\n        a *= j\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            a *= i + j\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 1\n    elif n == 1 and m == 0:\n        return 1\n    elif n == 0 and m == 1:\n        return 1\n    elif n == 1 and m == 1:\n        return 1\n    elif n > 1 and m > 1:\n        return eulerian_num(n-1, m-1) + eulerian_num(n-1, m) - eulerian_num(n, m-1) - eulerian_num(n, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = n + 1\n    b = m + 1\n\n    while a <= n and b <= m:\n        a *= (n - a)\n        b *= (m - b)\n    \n    return a // b"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the diagonal to 1\n    diagonal = [[1] * m for _ in range(n)]\n\n    # Fill the rest of the diagonal with 0\n    for i in range(1, n - 1):\n        diagonal[i][i] = 0\n        diagonal[i][m - i - 1] = 0\n\n    # Fill the rest of the diagonal with 2\n    for i in range(2, n):\n        for j in range(2, m):\n            diagonal[i - 1][j - 1] = 2\n\n    # Sum the diagonal\n    a = 0\n    for row in diagonal:\n        a += sum(row)\n\n    return a"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist in the input_list\n    for sublist in input_list:\n        # sort the sublist using the sorted() function\n        sorted_sublist = sorted(sublist)\n        # overwrite the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sorted_sublist\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, bool) and element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n    return test_tup + test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Append the given list to the given tuples.\n    \"\"\"\n    new_tup = test_tup + tuple(test_list)\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n    # Append the list to the tuple\n    test_tup += (test_list,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_tup)  # convert the tuple to a list\n    test_list.extend(test_tup)  # add the list to the tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the tuple\n    test_tup = test_tup + test_list\n\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n\n    # Combine all three lists into one sorted list\n    combined_list = sorted(num1 + num2 + num3)\n\n    # Create a min-heap from the combined list\n    heap = [combined_list[0]]\n    for i in range(1, len(combined_list)):\n        if heap[0] > combined_list[i]:\n            heapq.heappushpop(heap, combined_list[i])\n        else:\n            heapq.heappush(heap, combined_list[i])\n\n    # Convert the heap back to a sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Concatenate all three lists into one\n    combined_list = num1 + num2 + num3\n    # Create a min heap from the combined list\n    min_heap = []\n    for num in combined_list:\n        heapq.heappush(min_heap, num)\n    # Merge the sorted lists from the min heap\n    merged_list = []\n    while min_heap:\n        merged_list.append(heapq.heappop(min_heap))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Create a min heap of the three input lists\n    heap1 = [num1[0]]\n    heap2 = [num2[0]]\n    heap3 = [num3[0]]\n\n    # Push the remaining elements from the input lists onto the heap\n    for i in range(1, len(num1)):\n        heapq.heappush(heap1, num1[i])\n    for i in range(1, len(num2)):\n        heapq.heappush(heap2, num2[i])\n    for i in range(1, len(num3)):\n        heapq.heappush(heap3, num3[i])\n\n    # Merge the heaps into a single sorted list\n    merged_list = []\n    while heap1 and heap2 and heap3:\n        if heap1[0] <= heap2[0] and heap1[0] <= heap3[0]:\n            merged_list.append(heap1[0])\n            heapq.heappop(heap1)\n        elif heap2[0] <= heap1[0] and heap2[0] <= heap3[0]:\n            merged_list.append(heap2[0])\n            heapq.heappop(heap2)\n        else:\n            merged_list.append(heap3[0])\n            heapq.heappop(heap3)\n\n    # Add the remaining elements from the heaps to the merged list\n    while heap1:\n        merged_list.append(heap1[0])\n        heapq.heappop(heap1)\n    while heap2:\n        merged_list.append(heap2[0])\n        heapq.heappop(heap2)\n    while heap3:\n        merged_list.append(heap3[0])\n        heapq.heappop(heap3)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Convert the input lists to lists of tuples\n    tuples1 = [(x, idx) for idx, x in enumerate(num1)]\n    tuples2 = [(x, idx) for idx, x in enumerate(num2)]\n    tuples3 = [(x, idx) for idx, x in enumerate(num3)]\n\n    # Merge the sorted tuples using a min heap\n    heap = [(-x[0], x) for x in tuples1 + tuples2 + tuples3]\n    heapq.heapify(heap)\n\n    # Extract the sorted values from the heap and construct a new list\n    merged_list = []\n    while heap:\n        value, idx = heapq.heappop(heap)\n        merged_list.append(value)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Combine three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Sort the combined list using a max-heap\n    heapq.heapify(merged_list)\n\n    # Remove duplicates from the merged list\n    unique_list = []\n    while len(merged_list) > 0:\n        max_val = heapq.heappop(merged_list)\n        if max_val not in unique_list:\n            unique_list.append(max_val)\n\n    return unique_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the lists into one list using list concatenation\n    all_nums = num1 + num2 + num3\n    # Sort the combined list in ascending order\n    all_nums.sort()\n    # Use a min heap to extract the minimum element at each iteration\n    min_heap = []\n    for num in all_nums:\n        heapq.heappush(min_heap, num)\n    # Build the final sorted list by popping the minimum element from the heap\n    final_sorted_list = []\n    while min_heap:\n        final_sorted_list.append(heapq.heappop(min_heap))\n    # Return the final sorted list\n    return final_sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a list of all three input lists\n    input_list = [num1, num2, num3]\n    \n    # create an empty list to store the merged sorted list\n    merged_list = []\n    \n    # create a min heap to keep track of the current smallest element in each list\n    min_heap = []\n    \n    # iterate through each element in the input list\n    for num in input_list:\n        # if the current element is less than or equal to the smallest element in the min heap, add it to the merged list and remove the smallest element from the min heap\n        if len(min_heap) == 0 or num <= min_heap[0]:\n            heapq.heappush(min_heap, num)\n            merged_list.append(heapq.heappop(min_heap))\n        # otherwise, if the current element is greater than the smallest element in the min heap, remove the smallest element from the min heap and add the current element to the merged list\n        else:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num)\n            merged_list.append(heapq.heappop(min_heap))\n    \n    # return the merged sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Use heapq to sort the merged list in ascending order\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while len(merged_list) > 0:\n        sorted_list.append(heapq.heappop(merged_list))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Concatenate the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Use heapq module to sort the merged list\n    heapq.heapify(merged_list)\n    \n    # Return the sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # concatenate all three lists into one\n    merged_list = num1 + num2 + num3\n    # create a min-heap from the merged list\n    heap = []\n    for num in merged_list:\n        heapq.heappush(heap, num)\n    # extract and return the elements from the min-heap\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string s and an integer n, and returns the number of odd numbers in the string after rotating it n times.\n    \"\"\"\n    odd_count = 0\n    for i in range(n):\n        s = s[::-1]\n    for i in range(len(s)):\n        if s[i] == '1':\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n): \n    # Convert the binary string to a list of binary digits\n    digits = [int(d) for d in s]\n    \n    # Initialize a count variable to 0\n    count = 0\n    \n    # Iterate through the list of digits n times\n    for i in range(n): \n        # Rotate the list of digits by one position to the right\n        digits.append(digits.pop(0))\n        \n    # Iterate through the list of digits and count the number of odd digits\n    for digit in digits: \n        if digit % 2!= 0: \n            count += 1\n            \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s) % 2 == 0:\n        s = s[::-1] # rotate the string to odd length by reversing it\n    count = 0\n    for i in range(n):\n        count += s.count('1') # count the number of '1' in the string\n        s = s[-2:] + s[:-2] # rotate the string by 1 bit to get the next bit\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if int(s[i]) % 2 == 1:\n            count += 1\n    return count % n"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    odd_count = 0\n    for i in range(n):\n        s = s[-1] + s[:-1]\n        if s.count('1') % 2 == 1:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # convert binary string to list of digits\n    s = list(map(int,list(s)))\n    # initialize count to 0\n    count = 0\n    # rotate the binary string n times\n    for i in range(n):\n        # convert binary string to list of digits\n        s = list(map(int,list(s)))\n        # rotate the list of digits by one index\n        s = s[-1:] + s[:-1]\n        # count the number of odd values\n        count += sum(1 for x in s if x % 2!= 0)\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Convert binary string to a list of integers\n    s = list(s)\n\n    # Check if the binary string is of even length\n    if len(s) % 2 == 0:\n        return \"Error: Binary string length should be odd.\"\n\n    # Rotate the binary string the given number of times\n    for _ in range(n):\n        s.append(s.pop(0))\n\n    # Count the number of odd numbers in the rotated string\n    count = 0\n    for i in s:\n        if i % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s_binary = bin(int(s, 2))[2:]  # convert string to binary and remove prefix \"0b\"\n    s_binary_list = list(s_binary)  # convert binary to list of characters\n    if n == 0:\n        return len(s_binary_list)\n    else:\n        for i in range(n):\n            s_binary_list.append(s_binary_list.pop(0))\n        count = 0\n        for i in s_binary_list:\n            if int(i) % 2!= 0:\n                count += 1\n        return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of odd numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    n = n % len(s) # To keep the number of rotations within the length of the binary string\n    for i in range(n):\n        count += s.count('1')\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    if n == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        if int(s) % 2!= 0:\n            return 1\n        else:\n            return 0\n    s = s.replace('0', '')\n    s = s.replace('1', '')\n    if len(s) == 1:\n        return odd_Equivalent(s, n-1)\n    if len(s) == 2:\n        if int(s) % 2!= 0:\n            return 1 + odd_Equivalent(s, n-1)\n        else:\n            return odd_Equivalent(s, n-1)\n    s = s.replace('0', '')\n    s = s.replace('1', '')\n    if len(s) == 1:\n        return odd_Equivalent(s, n-1)\n    if len(s) == 2:\n        if int(s) % 2!= 0:\n            return 1 + odd_Equivalent(s, n-1)\n        else:\n            return odd_Equivalent(s, n-1)\n    s = s.replace('0', '')\n    s = s.replace('1', '')\n    if len(s) == 1:\n        return odd_Equivalent(s, n-1)\n    if len(s) == 2:\n        if int(s) % 2!= 0:\n            return 1 + odd_Equivalent(s, n-1)\n        else:\n            return odd_Equivalent(s, n-1)\n    return odd_Equivalent(s, n-1)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n\n    common_elements = []\n    for i in range(len(nestedlist[0])):\n        for j in range(len(nestedlist)):\n            if nestedlist[j][i] not in common_elements:\n                common_elements.append(nestedlist[j][i])\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    common_elements = []\n\n    for item in nestedlist:\n        if item in common_elements:\n            common_elements.append(item)\n        else:\n            common_elements.append(item)\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize a set to store the common elements\n    common_elements = set()\n\n    # Loop through the nested lists\n    for sublist in nestedlist:\n\n        # Loop through the elements of the sublist\n        for element in sublist:\n\n            # Add the element to the common elements set\n            common_elements.add(element)\n\n    # Return the common elements set\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] not in common:\n                    common.append(nestedlist[i][j][k])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if j == 0:\n                common.append(nestedlist[i][j])\n            elif nestedlist[i][j] in common:\n                common.remove(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty dictionary to store the common elements\n    common = {}\n    # iterate over each list in the nested list\n    for lst in nestedlist:\n        # iterate over each element in the list and add it to the common dictionary if it doesn't exist\n        for elem in lst:\n            if elem not in common:\n                common[elem] = 1\n    # return the dictionary of common elements\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if j == 0:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for lst in nestedlist:\n        common_elements.update(lst)\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common.append(nestedlist[i])\n                break\n            elif nestedlist[j] in nestedlist[i]:\n                common.append(nestedlist[j])\n                break\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    \n    # If the string contains any non-numeric characters, return False\n    if any(char not in '0123456789' for char in text):\n        return False\n    \n    # If the string contains any leading zeroes, return False\n    if text[0] == '0' and len(text) > 1:\n        return False\n    \n    # If the string contains any trailing zeroes, return False\n    if text[-1] == '0' and len(text) > 1:\n        return False\n    \n    # If the string contains any multiple-digit integers, return False\n    if len(text) > 1 and int(text) == 0:\n        return False\n    \n    # If the string contains any decimal points, return False\n    if '.' in text:\n        return False\n    \n    # If the string contains any negative sign, return False\n    if text.startswith('-'):\n        return False\n    \n    # If the string contains any non-numeric characters after the last numeric character, return False\n    for i in range(len(text) - 1, -1, -1):\n        if text[i] not in '0123456789':\n            return False\n    \n    # If all the checks pass, return True\n    return True"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    # remove any non-digit characters from the string\n    text = ''.join(filter(str.isdigit, text))\n    \n    # check if the string is empty or contains only digits\n    if not text or all(c.isdigit() for c in text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Check if the string contains any non-numeric characters\n    if any(char.isdigit() == False for char in text):\n        return False\n\n    # Convert the string to an integer and check if it is an integer\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    # Check if the string is empty\n    if len(text) == 0:\n        return False\n\n    # Check if the string consists of only digits\n    for char in text:\n        if char.isdigit() == False:\n            return False\n\n    # If the string is a valid integer, return True\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    This function takes a list of dictionaries as input and returns a boolean value indicating whether all dictionaries in the list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_flag = True\n    for dic in list1:\n        if dic:\n            empty_flag = False\n            break\n    return empty_flag"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Convert all elements in the list to integers\n    nums_list = [int(x) for x in nums_list]\n    # Calculate the sum of the integers in the list\n    result = sum(nums_list)\n    # Return the sum as an integer\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Iterate over the list and add each integer to a variable\n    int_sum = 0\n    for num in nums_list:\n        int_sum += num\n    # Return the sum as an integer\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total = total * 10 + num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n\n    # Initialize the sum variable to zero\n    sum_num = 0\n\n    # Iterate through the list and add the numbers to the sum\n    for num in nums_list:\n        sum_num += num\n\n    # Return the sum as an integer\n    return int(sum_num)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    new_list = []\n    for row in test_list:\n        new_row = []\n        for element in row:\n            try:\n                new_element = float(element)\n                new_row.append(new_element)\n            except ValueError:\n                continue\n        new_list.append(new_row)\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            if isinstance(item, (int, float, complex)):\n                try:\n                    test_list[row.index(item)][row.index(item)] = float(item)\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Iterate through each row in the list\n    for row in test_list:\n        # Iterate through each element in the row\n        for element in row:\n            # Try to convert the element to float\n            try:\n                float_element = float(element)\n            # If the conversion fails, leave it as a string\n            except ValueError:\n                float_element = element\n            # Replace the element in the row with the converted value\n            row[row.index(element)] = float_element\n    # Return the modified list\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # loop through each sublist of the list\n    for sublist in test_list:\n        # loop through each element of the sublist\n        for element in sublist:\n            # if the element is a string, try to convert it to a float\n            try:\n                element = float(element)\n            except ValueError:\n                pass # if the element is not a string, do nothing\n            else: # if the element was successfully converted to a float\n                sublist[sublist.index(element)] = element # replace the original element with the new float element"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, row in enumerate(test_list):\n        for j, item in enumerate(row):\n            try:\n                test_list[i][j] = float(item)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n            except ValueError:\n                pass\n            else:\n                row[row.index(element)] = float(element)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (str, int, float)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on space character\n    list_of_strings = string.split()\n    # return the list of strings\n    return list_of_strings"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Loop through each element in the array\n    for num in arr:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if num in freq:\n            freq[num] += 1\n        # If the element is not in the dictionary, add it with frequency 1\n        else:\n            freq[num] = 1\n    \n    # Loop through the dictionary to find the element that appears only once\n    for num in freq:\n        # If the frequency of the element is 1, return the element\n        if freq[num] == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if mid > 0 and arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        elif mid < len(arr) - 1 and arr[mid] == arr[mid + 1]:\n            right = mid\n        else:\n            return arr[mid]\n\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a variable to store the element that appears only once in the array\n    only_once = None\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is equal to the previous element, it means that we have found the element that appears only once\n        if i > 0 and arr[i] == arr[i-1]:\n            only_once = arr[i]\n            break\n    \n    return only_once"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Find the first and last indices of the element that appears only once\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            # If the current element is the same as the previous element, it appears only once\n            if i == len(arr)-1:\n                return arr[i]\n            else:\n                return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i-1]:\n            count = 1\n            for j in range(i+1, n):\n                if arr[j] == arr[i]:\n                    count += 1\n            if count == 1:\n                return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize a set to store unique elements\n    unique_set = set()\n\n    # Traverse the sorted array\n    for i in range(len(arr)):\n        # If the element is not already in the set, add it\n        if arr[i] not in unique_set:\n            unique_set.add(arr[i])\n\n    # Check if the set only contains one element\n    if len(unique_set) == 1:\n        return list(unique_set)[0]\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return \"Duplicate element not found.\"\n\n    # Traverse the array and check if the element appears only once\n    for i in range(len(arr)):\n        if arr[i]!= arr[arr.index(arr[i], i + 1)]:\n            return arr[i]\n\n    # If the loop completes, it means that all elements in the array appeared only once\n    return \"All elements appeared only once.\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # create a dictionary to store the frequency of each element\n    freq = {}\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # find the maximum frequency\n    max_freq = max(freq.values())\n\n    # iterate over the dictionary and return the element with maximum frequency\n    for key, value in freq.items():\n        if value == max_freq:\n            return key\n\n    # if no element is found with maximum frequency, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    unique_element = None\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i - 1]:\n            if unique_element is None:\n                unique_element = arr[i]\n            elif unique_element!= arr[i]:\n                return unique_element\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    \"\"\"\n    Returns the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to keep track of the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        # If the element is not already in the dictionary, add it with a frequency of 1\n        if num not in freq:\n            freq[num] = 1\n        # If the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq[num] += 1\n    \n    # Iterate over the dictionary, finding the element that appears only once\n    for num, count in freq.items():\n        if count == 1:\n            return num\n    \n    # If no such element is found, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and finds the maximum absolute product between numbers in pairs of tuples.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0]) * abs(list1[i][1]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    # iterate through the list\n    for i in range(len(list1)-1):\n        # check if the current product is negative\n        if current_product < 0:\n            current_product = abs(list1[i])\n        # if the current product is positive, update the max_product\n        else:\n            current_product *= abs(list1[i])\n        # update the max_product if it is greater than the current one\n        if abs(current_product) > max_product:\n            max_product = abs(current_product)\n    # return the max_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    max_product = 0\n    \n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            abs_product = abs(product)\n            if max_product < abs_product:\n                max_product = abs_product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    max_product = -float('inf')\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            temp_product = max(abs(list1[i][0]*list1[j][1]), abs(list1[i][1]*list1[j][0]))\n            if temp_product > max_product:\n                max_product = temp_product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Parameters:\n    lst (list): A list of tuples.\n\n    Returns:\n    max_product (int): The maximum absolute product between numbers in pairs of tuples within the given list.\n    \"\"\"\n\n    max_product = float('-inf')\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n\n            if abs(product) > max_product:\n                max_product = abs(product)\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][1] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    max_product = 0\n    length = len(list1)\n\n    for i in range(length):\n        for j in range(i+1, length):\n            product = abs(list1[i][0]*list1[j][0]) * abs(list1[i][1]*list1[j][1])\n            if product > max_product:\n                max_product = product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            abs_product = abs(list1[i][0] * list1[j][1])\n            if abs_product > max_product:\n                max_product = abs_product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # initialize a set to store the sum of an amicable pair\n    amicable_sum = set()\n\n    # loop through all numbers from 1 to limit\n    for i in range(1, limit + 1):\n        # check if the current number is an amicable number\n        if i == 1:\n            amicable_sum.add(1)\n        else:\n            # loop through all numbers from 2 to i-1\n            for j in range(2, i):\n                # check if i and j are both divisible by each other\n                if j * i == i:\n                    # add the sum of i and j to the set\n                    amicable_sum.add(i + j)\n\n    # return the sum of all amicable numbers\n    return sum(amicable_sum)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable = 0\n    for i in range(1, limit+1):\n        if i == sum_of_amicable:\n            continue\n        if is_amicable(i, sum_of_amicable):\n            sum_of_amicable += i\n        elif is_amicable(sum_of_amicable, i):\n            sum_of_amicable += i\n    return sum_of_amicable\n\ndef is_amicable(a, b):\n    '''\n    Write a function to check if two numbers are amicable or not.\n    '''\n    if a == b:\n        return False\n    elif a > b:\n        return is_amicable(b, a)\n    for i in range(2, int(b/2)+1):\n        if a%i == 0 and b%i == 0:\n            return True\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to the specified limit.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num in amicable_numbers:\n            continue\n        if num in amicable_numbers:\n            continue\n        if num in amicable_numbers:\n            continue\n        if num in amicable_numbers:\n            continue\n        if is_prime(num) and num!= 1:\n            amicable_numbers.append(num)\n            for i in range(1, int(num**0.5)+1):\n                if num % i == 0:\n                    amicable_numbers.append(num/i)\n                    break\n    return sum(amicable_numbers)\n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    return sum_amicable_numbers(limit)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize variables\n    sum_of_amicable = 0\n    i = 1\n    # loop through the numbers from 1 to the specified limit\n    while i <= limit:\n        # check if the number is amicable\n        if is_amicable(i):\n            # add the number to the sum\n            sum_of_amicable += i\n        i += 1\n    return sum_of_amicable\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable to any number from 1 to itself.\n    '''\n    # check if the number is equal to 1\n    if num == 1:\n        return False\n    # check if the number is equal to itself\n    if num == num:\n        return True\n    # check if the number is divisible by any number from 2 to its square root\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_amicable(num):\n    '''\n    Check if a given number is amicable or not.\n    '''\n    for i in range(1, num):\n        if (num % i) == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    '''\n    Sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit+1):\n        if is_amicable(i) and is_amicable(sum(i, limit)):\n            total += i + sum(i, limit)\n    return total\n\nlimit = int(input(\"Enter a number: \"))\nprint(\"Sum of amicable numbers from 1 to\", limit, \"is:\", sum_amicable_numbers(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function takes a limit as an input and returns the sum of all amicable numbers between 1 and the limit.\n    \"\"\"\n    # Initialize variables for the sum and amicable number pairs\n    amicable_sum = 0\n    current_number = 2\n    \n    # Iterate through the numbers from 2 to the limit\n    while current_number <= limit:\n        # Check if the current number is amicable to any other number between 2 and the square root of the current number\n        for other_number in range(2, int(current_number**0.5)+1):\n            if current_number % other_number == 0 and other_number % current_number == 0:\n                # If the current number is amicable, add it to the sum and break out of the loop\n                amicable_sum += current_number\n                break\n        \n        # Increment the current number for the next iteration\n        current_number += 1\n    \n    # Return the sum of the amicable numbers\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        if i == sum_of_divisors(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef sum_of_divisors(num):\n    divisors_sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            divisors_sum += i\n    return divisors_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    # iterate through numbers from 1 to limit\n    for num in range(1, limit):\n        # if the number is divisible by 2 and not a prime, add it to the sum\n        if num % 2 == 0 and num > 2:\n            sum += num\n        # if the number is divisible by 2 and is prime, then check if the sum of the two factors is also prime\n        elif num > 2:\n            # find the factors of the number\n            factors = []\n            for i in range(1, num):\n                if num % i == 0:\n                    factors.append(i)\n            # check if the sum of the factors is prime\n            prime_sum = sum(factors)\n            if is_prime(prime_sum):\n                # add the sum of the factors to the sum\n                sum += prime_sum\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(1, limit):\n        if i < 10:\n            continue\n        elif i % 2 == 0:\n            continue\n        else:\n            num1 = i\n            num2 = sum_of_divisors(num1)\n            if num2 == i:\n                amicable_numbers.add(num1)\n    return sum(amicable_numbers)\n\n\ndef sum_of_divisors(num):\n    '''\n    Write a function to calculate the sum of divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum = 0\n    for num in range(1, limit):\n        if num == sum_of_proper_divisors(num):\n            sum += num\n    return sum\n\ndef sum_of_proper_divisors(n):\n    \"\"\"\n    Return the sum of the proper divisors of a number n.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i == n//i:\n                sum += i\n            else:\n                sum += i + n//i\n    return sum\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the magnitude of the complex number\n    mag = cmath.sqrt(a**2 + b**2)\n\n    # Calculate the phase of the complex number\n    phase = cmath.phase(complex(a,b))\n\n    # Convert the phase to degrees and return the angle\n    angle = phase * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = round(angle.real, 3)\n    \n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle_rad = cmath.phase(a+b*1j)\n    angle_deg = angle_rad * 180 / cmath.pi\n    return round(angle_deg, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_number = a + b * 1j\n    angle = cmath.phase(complex_number)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    This function takes in two complex numbers as input and returns the angle of the complex number.\n    '''\n    return cmath.phase(a+b)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a + bj * b\n    angle = cmath.phase(c)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return round(angle, 2)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n\n    for char in string:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n\n        diff = abs(zero_count - one_count)\n\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    n = len(string)\n    # Initialize variables to store count of 0s and 1s\n    count_0 = 0\n    count_1 = 0\n    # Initialize variables to store maximum count difference\n    max_diff = 0\n    # Initialize variables to store current count difference\n    current_diff = 0\n    # Loop through each character in the string\n    for i in range(n):\n        # If the current character is 0, increment count of 0s and update maximum count difference if current difference is greater than current maximum difference\n        if string[i] == '0':\n            count_0 += 1\n            current_diff = count_1 - count_0\n            if current_diff > max_diff:\n                max_diff = current_diff\n        # If the current character is 1, increment count of 1s and update maximum count difference if current difference is greater than current maximum difference\n        else:\n            count_1 += 1\n            current_diff = count_1 - count_0\n            if current_diff > max_diff:\n                max_diff = current_diff\n    # Return maximum count difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        diff = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                diff += 1\n            else:\n                diff -= 1\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # initialize a dictionary to store the count of 0s and 1s\n    zero_count = {}\n    one_count = {}\n\n    # loop through each character in the string\n    for char in string: \n        # if the character is a 0, update the count for 0s\n        if char == '0':\n            if '0' not in zero_count:\n                zero_count['0'] = 1\n            else:\n                zero_count['0'] += 1\n        # if the character is a 1, update the count for 1s\n        elif char == '1':\n            if '1' not in one_count:\n                one_count['1'] = 1\n            else:\n                one_count['1'] += 1\n\n    # initialize a list to store the maximum difference between the number of 0s and 1s\n    max_diff = []\n\n    # loop through each substring of the string\n    for i in range(len(string)):\n        # loop through each possible substring length between i and len(string)\n        for j in range(i, len(string) + 1):\n            # if the substring length is greater than 1, calculate the count of 0s and 1s\n            if j > 1:\n                zero_count_sub = sum(zero_count.values())\n                one_count_sub = sum(one_count.values())\n                diff = abs(zero_count_sub - one_count_sub)\n            # if the substring length is 1, calculate the count of 0s and 1s directly\n            else:\n                char_sub = string[i]\n                if char_sub == '0':\n                    diff = zero_count['0']\n                else:\n                    diff = one_count['1']\n\n            # if the maximum difference found so far is greater than the current difference, update the maximum difference\n            if len(max_diff) == 0 or diff > max_diff[-1]:\n                max_diff.append(diff)\n\n    # return the maximum difference between the number of 0s and 1s in any sub-string of the given binary string\n    return max(max_diff)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Initialize variables\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    \n    # Loop through each character in the binary string\n    for char in string:\n        \n        # Update count of 0s and 1s\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n            \n        # Calculate the maximum difference between the count of 0s and 1s\n        diff = abs(count_0 - count_1)\n        max_diff = max(diff, max_diff)\n        \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(1, len(string)):\n        if string[i-1] == string[i]:\n            max_diff += 1\n            if max_diff > 1:\n                max_diff = 1\n        else:\n            max_diff = 0\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    max_diff = 0\n\n    for i in range(length):\n        for j in range(i+1, length+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    count = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            if count > max_diff:\n                max_diff = count\n            count = 0\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Initialize variables\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    # Loop through each character in the string\n    for char in string:\n        # Check if the character is a 0 or a 1\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        # Calculate the difference between the counts\n        diff = abs(count_0 - count_1)\n\n        # Update the maximum difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    This function takes two integers as input and returns their sum of common divisors.\n    '''\n\n    # calculate the sum of common divisors of the two numbers\n    common_divisors = sum_of_common_divisors(a,b)\n    \n    # return the sum of common divisors\n    return common_divisors\n\n\ndef sum_of_common_divisors(a,b):\n    '''\n    This function takes two integers as input and returns their sum of common divisors.\n    '''\n\n    # initialize the sum variable to 0\n    sum_of_divisors = 0\n    \n    # loop through all numbers from 1 to the smaller number\n    for i in range(1, min(a,b)+1):\n        \n        # if the smaller number is divisible by the current number\n        if a % i == 0 and b % i == 0:\n            \n            # add the current number to the sum of divisors\n            sum_of_divisors += i\n    \n    # return the sum of divisors\n    return sum_of_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function calculates the sum of the common divisors of two given numbers using the Euclidean algorithm.\n\n    Args:\n        a (int): The first number.\n        b (int): The second number.\n\n    Returns:\n        int: The sum of the common divisors of a and b.\n    \"\"\"\n\n    # Finding the GCD using the Euclidean algorithm\n    while b:\n        a, b = b, a % b\n\n    return a\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Calculate the sum of common divisors using a for loop\n    sum_common_divisors = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum_common_divisors += i\n    \n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisor = []\n    for i in range(1, a+1): \n        if a % i == 0 and b % i == 0: \n            common_divisor.append(i)\n    return sum(common_divisor)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, b + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find common divisors of a and b\n    common_divisors = []\n    divisor = 1\n    while divisor <= a:\n        if a % divisor == 0 and b % divisor == 0:\n            common_divisors.append(divisor)\n        divisor += 1\n    # Find the sum of common divisors\n    sum_of_divisors = sum(common_divisors)\n    # Return the sum of common divisors\n    return sum_of_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the common divisors of two given numbers.\n    \"\"\"\n    # initialize sum variable\n    sum = 0\n    # iterate over all numbers between 1 and the smaller of the two numbers\n    for i in range(1, min(a, b) + 1):\n        # check if the smaller number is divisible by the current number\n        if a % i == 0 and b % i == 0:\n            # if it is, add it to the sum variable\n            sum += i\n    # return the sum of common divisors\n    return sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    Find the sum of the common divisors of two given numbers.\n    \"\"\"\n    # Helper function to find the common divisor of two numbers\n    def gcd(a, b):\n        \"\"\"\n        Compute the greatest common divisor of two numbers.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Find the GCD of the two numbers\n    gcd_ab = gcd(a, b)\n\n    # Calculate the sum of the GCD and the two original numbers\n    sum_ab = gcd_ab * (a // gcd_ab) + b // gcd_ab\n\n    # Return the sum of the common divisors\n    return sum_ab"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_divisors(a, b):\n    \"\"\"\n    Calculate the sum of common divisors of two given numbers.\n\n    :param a: The first number.\n    :param b: The second number.\n    :return: The sum of common divisors.\n    \"\"\"\n    common = 0\n    divisor_set = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common += i\n            divisor_set.add(i)\n\n    return common, divisor_set\n\n\ndef sum(a, b):\n    \"\"\"\n    Calculate the sum of common divisors of two given numbers.\n\n    :param a: The first number.\n    :param b: The second number.\n    :return: The sum of common divisors.\n    \"\"\"\n    common, divisor_set = common_divisors(a, b)\n    return common"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of common divisors.\n    \"\"\"\n    # Finding all the factors of a and b\n    factors_a = []\n    factors_b = []\n    for i in range(1, a + 1):\n        if a % i == 0:\n            factors_a.append(i)\n    for j in range(1, b + 1):\n        if b % j == 0:\n            factors_b.append(j)\n\n    # Finding the common factors of both lists\n    common_factors = list(set(factors_a) & set(factors_b))\n\n    # Finding the sum of common factors\n    sum_common_factors = 1\n    for factor in common_factors:\n        sum_common_factors *= factor\n\n    return sum_common_factors\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    while y!= 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    carry = 0\n    \n    while y!= 0:\n        carry = x & y\n        result = result ^ carry\n        x = x ^ y\n        y = carry << 1\n    \n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    while y!= 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n        result += x\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n\n    # Split the string into words\n    words = str.split()\n\n    # Initialize an empty list to store the long words\n    long_words_list = []\n\n    # Loop through each word in the list\n    for word in words:\n\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n\n            # Append the word to the long_words_list\n            long_words_list.append(word)\n\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into words\n    long_words = [] # empty list to store longer words\n    \n    for word in words: # iterate over each word in the list\n        if len(word) > n: # check if the length of the word is greater than n\n            long_words.append(word) # append the word to the list if it is longer than n\n        \n    return long_words # return the list of longer words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    '''\n    Find words that are longer than n characters from a list of words.\n\n    Parameters:\n    n: int, maximum length of words to consider\n    words: list of strings, words to search for long words in\n\n    Returns:\n    list of strings, words that are longer than n characters in the input list\n    '''\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix contains all zeros\n    for row in my_matrix:\n        if not all(x == 0 for x in row):\n            return False\n\n    # Check if the matrix contains all unique values\n    unique_values = set(sum(my_matrix, ()))\n    if len(unique_values)!= len(my_matrix) ** 2:\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            # Check if the element in the matrix is equal to the sum of the elements in the row above it and the column to its left\n            if my_matrix[i][j]!= sum(my_matrix[k][j] for k in range(i)) and my_matrix[j][i]!= sum(my_matrix[i][k] for k in range(i)) and my_matrix[i][j]!= sum(my_matrix[k][i] for k in range(i)) and my_matrix[j][i]!= sum(my_matrix[i][k] for k in range(i)):\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if all rows have the same length\n    if not all(len(row) == n for row in my_matrix):\n        return False\n    # Check if all columns have the same length\n    if not all(len(row) == n for row in zip(*my_matrix)):\n        return False\n    # Check if the sum of each row is equal to the sum of the matrix\n    for row in my_matrix:\n        if sum(row)!= sum(my_matrix[i][j] for i in range(n) for j in range(n)):\n            return False\n    # Check if the sum of each column is equal to the sum of the matrix\n    for j in range(n):\n        col_sum = sum(row[j] for row in my_matrix)\n        if col_sum!= sum(row[j] for row in my_matrix):\n            return False\n    # Check if the sum of each diagonal is equal to the sum of the matrix\n    diag_sum = sum(row[i] for i in range(n))\n    if diag_sum!= sum(row[i] for i in range(n)):\n        return False\n    # Check if the sum of each diagonal is equal to the sum of the matrix\n    diag_sum = sum(row[n-i-1] for i in range(n))\n    if diag_sum!= sum(row[n-i-1] for i in range(n)):\n        return False\n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check the dimensions of the matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return \"Matrix is not square\"\n    \n    # Check if all elements in the matrix are distinct\n    seen = set()\n    for row in my_matrix:\n        if len(seen)!= len(row):\n            return \"Matrix contains repeated elements\"\n        seen.update(row)\n    \n    # Check if each element in the diagonal is distinct\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i] in seen:\n            return \"Matrix contains repeated elements in the diagonal\"\n    \n    # Check if each element in the off-diagonal is distinct\n    for i in range(len(my_matrix)):\n        for j in range(i+1, len(my_matrix)):\n            if my_matrix[i][j] in seen or my_matrix[j][i] in seen:\n                return \"Matrix contains repeated elements in the off-diagonal\"\n    \n    # If we get here, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix is a square matrix\n    if n!= n**2:\n        return False\n    # Check if the sum of the elements in the matrix is equal to n^2\n    sum_elements = sum(sum(row) for row in my_matrix)\n    if sum_elements!= n**2:\n        return False\n    # Check if the elements in the matrix are unique\n    for row in my_matrix:\n        if len(set(row))!= n:\n            return False\n    # Check if the elements in the matrix form a magic square\n    for i in range(n):\n        row1 = [my_matrix[j][i] for j in range(n)]\n        row2 = [my_matrix[i][j] for j in range(n)]\n        row3 = [my_matrix[i + (j//n)*n][j%n] for j in range(n)]\n        if row1!= row2!= row3:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    magic_sum = sum(sum(row) for row in my_matrix)\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i]) for i in range(n)]\n\n    for i in range(n):\n        if row_sums[i]!= magic_sum:\n            return False\n        if col_sums[i]!= magic_sum:\n            return False\n\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= magic_sum - (i + j):\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the input is a list of lists\n    if not all(isinstance(row, list) for row in my_matrix):\n        print(\"Input must be a list of lists\")\n        return\n\n    # Check if the number of rows is equal to the number of columns\n    if len(my_matrix[0])!= len(my_matrix):\n        print(\"Number of rows must be equal to number of columns\")\n        return\n\n    # Initialize the sum of each row\n    row_sum = [0] * len(my_matrix[0])\n\n    # Calculate the sum of each row\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            row_sum[j] += my_matrix[i][j]\n\n    # Check if the sum of each row is equal to the sum of the matrix\n    if row_sum == [sum(row_sum), sum(row_sum)] * len(my_matrix[0]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # check if the row and column sums are equal to the magic square constant\n    magic_square_sum = 15\n    if row_sums == [magic_square_sum] * len(my_matrix) or col_sums == [magic_square_sum] * len(my_matrix):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        row_sum = 0\n        col_sum = 0\n        for j in range(len(my_matrix[0])):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        if row_sum!= col_sum or row_sum!= i + 1 or col_sum!= i + 1:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n    \n    # Check if all rows and columns have the same sum\n    row_sum = [sum(row) for row in my_matrix]\n    col_sum = [sum(col) for col in zip(*my_matrix)]\n    if row_sum == col_sum:\n        return True\n    else:\n        return False\n    \n    # Check if the main diagonal has the same sum\n    diagonal_sum = [sum(my_matrix[i][i] for i in range(n))]\n    if diagonal_sum == [sum(my_matrix[j][i] for i in range(n)) for j in range(n)]:\n        return True\n    else:\n        return False\n    \n    # Check if the secondary diagonal has the same sum\n    for i in range(n):\n        diagonal_sum = [sum(my_matrix[i][j] for j in range(n)) for k in range(i+1, n)]\n        if diagonal_sum == [sum(my_matrix[j][i] for j in range(i+1, n)) for k in range(n)]:\n            return True\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix is 3x3\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return \"Invalid matrix dimensions\"\n    \n    # Check if the matrix has all integers\n    for row in my_matrix:\n        for elem in row:\n            if not isinstance(elem, int):\n                return \"Invalid matrix elements\"\n    \n    # Calculate the sum of each row and each column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i][j] for j in range(len(my_matrix))) for i in range(len(my_matrix))]\n    \n    # Check if the sum of each row and each column is equal to the matrix's total sum\n    if row_sums == col_sums == sum(sum(x) for x in my_matrix):\n        return True\n    else:\n        return False"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        frequency_dict[num] += 1\n        if frequency_dict[num] > max_freq:\n            max_freq = frequency_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n\n    # Iterate over the list of numbers\n    for num in nums:\n        # Increment the frequency of the current item in the dictionary\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    \n    for num in nums:\n        freq[num] += 1\n        \n    max_num = None\n    max_freq = 0\n    \n    for num, count in freq.items():\n        if count > max_freq:\n            max_num = num\n            max_freq = count\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the highest frequency\n    max_freq = max(freq.values())\n    item = [num for num, freq in freq.items() if freq == max_freq][0]\n\n    return item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = None\n    max_freq = 0\n    for num, count in freq.items():\n        if count > max_freq:\n            max_num = num\n            max_freq = count\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    max_frequency = 0\n    max_item = None\n    \n    for num in nums:\n        frequency[num] += 1\n        \n        if frequency[num] > max_frequency:\n            max_frequency = frequency[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in str1:\n        if char in vowels:\n            result += char\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels:\n            if char.isupper():\n                reversed_str += char.lower()\n            else:\n                reversed_str += char.upper()\n        else:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u']) # create a set of vowels\n    result = '' # initialize an empty string for the result\n    for char in str1:\n        if char in vowels: # check if the character is a vowel\n            result = char + result # add the vowel to the result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = []\n    for i, c in enumerate(str1):\n        if c.lower() in vowels:\n            vowel_indices.append(i)\n    vowel_indices.reverse()\n    return str1[vowel_indices]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    result = []\n\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result.append(str1[i])\n\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = [i for i in vowels]\n    result = \"\"\n    for i in str1:\n        if i not in vowels_list:\n            result += i\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str2 = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            str2 += char\n    return str2[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    vowels_set = set(vowels)\n    result = \"\"\n    for i in range(len(string)-1, -1, -1):\n        if string[i] in vowels_set:\n            result = string[i] + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = 'AEIOUaeiou'\n    vowel_reverse = ''\n    for char in str1:\n        if char.upper() not in vowels:\n            vowel_reverse += char\n    return vowel_reverse[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for char in str1:\n        if char in vowels:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    tup_str = str(tup1)\n    return tup_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total_sum = 0\n    for num in nums:\n        if num < 0:\n            total_sum += num\n    return total_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize a variable to store the sum of negative numbers\n    total_sum = 0\n\n    # Loop through each number in the list\n    for num in nums:\n        # If the number is negative, add it to the total_sum\n        if num < 0:\n            total_sum += num\n\n    # Return the total sum of negative numbers\n    return total_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    sum = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum_of_negatives = 0\n    for num in nums:\n        if num < 0:\n            sum_of_negatives += num\n    return sum_of_negatives"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize the sum variable to 0\n    negative_sum = 0\n    # Loop through the list of numbers and add the negative values to the sum variable\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    # Return the sum of the negative values\n    return negative_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))//2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((n*(2*n-1))//2) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (5 * n * n) - (3 * n)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 6 * (n * (n + 1)) - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * ((3 * n) - 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 0\n    for i in range(1, n+1):\n        hex_num += 6*i*i\n    return hex_num\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return (n * ((3 * n) - 1)) // 2"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    nonzeros = array('i')\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            nonzeros.append(1)\n    zero_ratio = nonzeros[0] / zeros[0] if zeros[0]!= 0 else 0\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    arr = array('i', nums)\n    zeros = sum(arr == 0)\n    non_zeros = len(nums) - zeros\n    return zeros / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count_arr = array('i', [0] * len(nums))\n\n    for num in nums:\n        if num == 0:\n            zero_count_arr.append(1)\n        else:\n            zero_count_arr.append(0)\n\n    non_zero_count = sum(zero_count_arr)\n\n    return non_zero_count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n    zero_count = len(nums) - non_zero_count\n    ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = [0]*256\n    ones = [0]*256\n\n    for num in nums:\n        ones[num] += 1\n        zeros[0] += num == 0\n\n    for i in range(1, 256):\n        ones[i] += ones[i-1]\n        zeros[i] += zeros[i-1]\n\n    non_zeros = sum(ones)\n    zero_count = sum(zeros)\n\n    if non_zeros == 0:\n        return 0\n\n    return zero_count / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zero_count = array('i', [0])\n    for num in nums:\n        if num == 0:\n            zero_count[0] += 1\n    non_zero_count = array('i', [len(nums)])\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            non_zero_count[0] -= 1\n    return zero_count[0] / non_zero_count[0]"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list to iterate over it\n    nums_list = list(nums)\n    # Initialize two counters to keep track of the number of non-zeroes and zeroes\n    non_zero_count = 0\n    zero_count = 0\n    \n    # Iterate over the list of numbers\n    for num in nums_list:\n        # Check if the number is zero\n        if num == 0:\n            # Increment the zero counter\n            zero_count += 1\n        else:\n            # Increment the non-zero counter\n            non_zero_count += 1\n            \n    # Calculate the ratio of zeroes to non-zeroes\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Create a list of all the unique integers in the array\n    unique_nums = list(set(nums))\n\n    # Find the length of the unique integers\n    unique_length = len(unique_nums)\n\n    # Create an array to store the counts of zeros and ones\n    counts = array('i', [0]*unique_length)\n\n    # Iterate through the array and count the zeros and ones\n    for num in nums:\n        counts[unique_nums.index(num)] += 1\n\n    # Find the ratio of zeros to non-zeroes\n    nonzero_count = sum(counts)\n    zero_count = len(counts) - nonzero_count\n    ratio = zero_count / nonzero_count\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # create an array to store non-zero values\n    non_zero_values = array('i')\n\n    # iterate through the array and add non-zero values to the array\n    for num in nums:\n        if num!= 0:\n            non_zero_values.append(num)\n\n    # calculate the total number of non-zero values\n    total_non_zero_values = len(non_zero_values)\n\n    # calculate the ratio of zeroes to non-zeroes\n    ratio = (non_zero_values.count(0) / total_non_zero_values) * 100\n\n    # return the ratio as a float\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeros = 0\n    count_ones = 0\n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_ones += 1\n    ratio = count_zeros / count_ones\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    \n    # Find the number of bits required to represent n\n    bits = 0\n    while n > 0:\n        n = n >> 1\n        bits += 1\n    \n    # Check whether the number of bits required to represent n is even or odd\n    if bits % 2 == 0:\n        return False\n    \n    # Calculate the sum of non-zero powers of 2\n    power_sum = 0\n    power_two = 1\n    while power_two <= n:\n        if power_two == n:\n            power_sum += power_two\n        power_two <<= 1\n    \n    # Check if the number is equal to the sum of non-zero powers of 2\n    return n == power_sum"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    def is_power_of_two(num):\n        \"\"\"\n        Helper function to check if a number is a power of 2.\n        \"\"\"\n        return (num & (num - 1)) == 0\n\n    def has_powers_of_two(num):\n        \"\"\"\n        Helper function to check if a number has non-zero powers of 2.\n        \"\"\"\n        for i in range(1, 32):\n            if (num & (1 << i))!= 0:\n                return True\n        return False\n\n    if is_power_of_two(n) and has_powers_of_two(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 4 == 0:\n        return False\n\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the number is 1 or 2\n    if n == 1 or n == 2:\n        return True\n\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # Initialize a variable to store the sum of powers of 2\n    sum_of_powers = 0\n\n    # Loop through the digits of the number and add the powers of 2 to the sum_of_powers variable\n    while n > 0:\n        if n % 2 == 1:\n            sum_of_powers += 1\n        n = n // 2\n\n    # Check if the sum_of_powers variable is equal to n\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Helper function to check whether the given number is a power of 2\n    def is_power_of_two(num):\n        return (num & (num - 1)) == 0\n\n    # Helper function to calculate the power of 2\n    def power_of_two(num):\n        return 1 << num\n\n    # Helper function to check whether the given number is a sum of powers of 2\n    def is_sum_of_powers_of_two(num):\n        if num == 0:\n            return False\n        if num == 1:\n            return True\n        power = 0\n        while num > 0:\n            if num & 1 == 1:\n                if power == 0:\n                    return False\n                power -= 1\n            else:\n                power += 1\n            num >>= 1\n        return power == 0\n\n    # Helper function to check whether the given number is a sum of non-zero powers of 2\n    def is_sum_of_non_zero_powers_of_two(num):\n        return is_power_of_two(num) and is_sum_of_powers_of_two(power_of_two(num))\n\n    # Check if the given number is a sum of non-zero powers of 2\n    if is_sum_of_non_zero_powers_of_two(n):\n        print(\"The given number can be represented as sum of non-zero powers of 2.\")\n    else:\n        print(\"The given number cannot be represented as sum of non-zero powers of 2.\")"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes a number n as input and returns True if it can be represented as a sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    if n == 0:\n        return True\n    \n    # Initialize the result variable to True\n    result = True\n    \n    # Iterate through the bits of the number\n    for i in range(32):\n        # If the current bit is 1, check if the current power of 2 can be represented in the number\n        if (n & (1 << i))!= 0:\n            if (1 << i) > 2:\n                # If the current power of 2 is greater than 2, the number cannot be represented as a sum of non-zero powers of 2\n                return False\n            \n            # Calculate the power of 2 and check if it can be represented in the number\n            power_of_two = 1 << i\n            if power_of_two > n:\n                return False\n            \n            # Subtract the power of 2 from the number and check if it is a multiple of 2\n            n -= power_of_two\n            if n % 2 == 0:\n                result = False\n            \n    return result"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n    count = 0\n    while n!= 0:\n        count += 1\n        n >>= 1\n    if count < 2:\n        return False\n    for i in range(count-1):\n        if ((1 << i) & n) == 0:\n            return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def power_of_two(n): \n        if n <= 1: \n            return False \n        while n % 2 == 0: \n            n = n // 2 \n        return True \n\n    def check_sum_of_powers(target, n): \n        if n == 0: \n            return True \n        if n == target: \n            return False \n        if not power_of_two(n): \n            return check_sum_of_powers(target, n-1) \n        return check_sum_of_powers(target, n//2) and check_sum_of_powers(target, n-n//2) \n        \n    def can_represent_as_sum_of_powers(n): \n        return check_sum_of_powers(n, n) "
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count >= 2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check for even number of set bits in binary representation of n\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    if count & 1:  # if odd number of set bits, n cannot be represented as sum of powers of 2\n        return False\n    # Check if all the set bits are consecutive powers of 2\n    for i in range(2, int(count / 2) + 1):\n        if (n >> i) & 1:  # check if i-th power of 2 is set in n\n            return False\n    # If all the conditions are true, n can be represented as sum of powers of 2\n    return True"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # using formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # converting radius to meters and using the formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    print(\"The circumference of a circle with radius\", r, \"is\", circumference)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    if not test_list:  # base case\n        return set()\n    elif isinstance(test_list[0], list):  # recursive case\n        return extract_singly(test_list[0]) | set(extract_singly(test_list[1:]))\n    else:\n        return set([test_list[0]]) | set(extract_singly(test_list[1:]))\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [num for sublist in test_list for num in sublist]\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if type(item) == list:\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sub_list in test_list:\n        flat_list.extend(sub_list)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = set()\n    for item in test_list:\n        for sub_item in item:\n            result.add(sub_item)\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [num for sublist in test_list for num in sublist]"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    def flatten(lst):\n        return [item for sublist in lst for item in sublist]\n\n    return flatten(test_list)\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    # create a list of indices representing the pancakes\n    pancake_indices = [i for i in range(n)]\n\n    # create a sorted list of the pancakes\n    sorted_nums = sorted(pancake_indices)\n\n    # iterate through the sorted pancakes, swapping elements with their pancake indices\n    for i in range(n):\n        # get the index of the current pancake\n        j = sorted_nums[i]\n        # swap the current element with the element at the pancake index\n        nums[i], nums[j] = nums[j], nums[i]\n        # decrement the remaining pancakes\n        pancake_indices.pop(sorted_nums.pop(i))\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    This function sorts a list of elements using the pancake sort algorithm.\n\n    The pancake sort algorithm works by repeatedly \"flipping\" the smallest element\n    to the end of the list. This is done by swapping the first and last elements,\n    then the second and second-to-last elements, and so on, until the list is sorted.\n\n    This algorithm has an average and worst-case time complexity of O(n^2).\n    '''\n\n    # Start with the largest number as the last element\n    for i in range(len(nums)-1, 0, -1):\n        # Find the index of the smallest number in the remaining unsorted part of the array\n        smallest_index = 0\n        for j in range(1, i+1):\n            if nums[j] < nums[smallest_index]:\n                smallest_index = j\n\n        # Swap the smallest number with the last element\n        nums[i], nums[smallest_index] = nums[smallest_index], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # generate a list of numbers from 1 to n\n    indices = list(range(1, n+1))\n    # reverse the order of the indices to sort the list in descending order\n    indices.reverse()\n    # perform the pancake sort algorithm\n    while indices:\n        # pick the first index in the list\n        index = indices.pop()\n        # reverse the order of the list starting from the picked index\n        nums[index-1], nums[index] = nums[index], nums[index-1]\n        # decrement the remaining indices in the list by 1\n        for i in range(index):\n            if nums[i] < nums[index]:\n                indices.append(i+1)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Perform one pancake sort on each sublist of length 1 to n-1\n    for start in range(n-1):\n        # Find the maximum element in the unsorted part of the list\n        max_index = start\n        for end in range(start+1, n):\n            if nums[end] > nums[max_index]:\n                max_index = end\n        # Swap the maximum element with the first element of the sublist\n        nums[start], nums[max_index] = nums[max_index], nums[start]\n        # Reverse the sublist from the second element to the end\n        reverse_list(nums, start+1, n-1)\n    return nums\n\ndef reverse_list(nums, start, end):\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # find the largest and second largest elements\n    largest = second_largest = float('-inf')\n    for num in nums:\n        if num > largest:\n            second_largest = largest\n            largest = num\n        elif num > second_largest and num!= largest:\n            second_largest = num\n    # move largest and second largest elements to the front of the list\n    nums.remove(second_largest)\n    nums.insert(0, second_largest)\n    nums.remove(largest)\n    nums.insert(0, largest)\n    # sort the remaining elements using BFS\n    for i in range(n-1):\n        # find the largest element in the unsorted part of the list\n        largest = second_largest = float('-inf')\n        for num in nums[i+1:]:\n            if num > largest:\n                second_largest = largest\n                largest = num\n            elif num > second_largest and num!= largest:\n                second_largest = num\n        # move largest and second largest elements to the front of the list\n        nums.remove(second_largest)\n        nums.insert(i+1, second_largest)\n        nums.remove(largest)\n        nums.insert(i+1, largest)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort algorithm.\n    '''\n\n    def bubble_sort(nums):\n        n = len(nums)\n        for i in range(n):\n            for j in range(n-i-1):\n                if nums[j] > nums[j+1]:\n                    nums[j], nums[j+1] = nums[j+1], nums[j]\n        return nums\n\n    def reverse_pancake_sort(nums):\n        n = len(nums)\n        while n > 1:\n            max_idx = 0\n            for i in range(1, n):\n                if nums[i] > nums[max_idx]:\n                    max_idx = i\n            nums[0], nums[max_idx] = nums[max_idx], nums[0]\n            n = max_idx\n\n    bubble_sort(nums)\n    reverse_pancake_sort(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    def sort(nums, start, end):\n        '''\n        Sort the sublist nums[start:end] in ascending order.\n        '''\n        for i in range(start, end):\n            for j in range(start, end - i - 1):\n                if nums[j] > nums[j + 1]:\n                    nums[j], nums[j + 1] = nums[j + 1], nums[j]\n\n    def pancake_sort_helper(nums, start, end):\n        '''\n        Recursively sort the entire list nums[start:end] using the pancake sort algorithm.\n        '''\n        if start >= end:\n            return\n\n        # Choose the pivot element as the last element of the sublist\n        pivot_index = start\n        pivot = nums[end - 1]\n\n        # Partition the sublist nums[start:end] into three parts:\n        # nums[start:pivot_index] <= pivot\n        # pivot_index <= nums[pivot_index+1:end] <= nums[end-1]\n        # nums[pivot_index+1:end] > pivot\n\n        # Choose a pivot element in the sublist nums[start:end]\n        for i in range(start, end):\n            if nums[i] < pivot:\n                pivot_index += 1\n                nums[i], nums[pivot_index] = nums[pivot_index], nums[i]\n\n        # Recursively sort the sublist nums[start:pivot_index]\n        pancake_sort_helper(nums, start, pivot_index)\n\n        # Recursively sort the sublist nums[pivot_index+1:end]\n        pancake_sort_helper(nums, pivot_index + 1, end)\n\n    # Sort the entire list nums[0:len(nums)-1] using the pancake sort algorithm\n    pancake_sort_helper(nums, 0, len(nums) - 1)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    This function sorts a list of elements using the pancake sort algorithm.\n\n    This algorithm works by repeatedly interchanging adjacent elements in the list until the list is sorted.\n    '''\n    n = len(nums)\n    # Initialize a boolean array to keep track of swaps made during a single iteration\n    swapped = [False] * n\n    # Initialize the swaps made during the last iteration\n    last_swaps = 0\n\n    # Loop until no swaps are made during a single iteration\n    while last_swaps!= n:\n        # Initialize the number of swaps made during a single iteration\n        swaps = 0\n        # Iterate over the list from the first element to the second last element\n        for i in range(n-2, -1, -1):\n            # If the element at index i is greater than the element at index i+1, swap them\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                # Increment the number of swaps made\n                swaps += 1\n                # Set the boolean array to True to indicate that a swap was made\n                swapped[i] = True\n                swapped[i+1] = True\n        # Update the number of swaps made during the last iteration\n        last_swaps = swaps\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    def recursive_pancake_sort(nums, temp_list):\n        if len(nums) <= 1:\n            return temp_list\n        pivot_index = len(nums) - 1\n        nums[pivot_index], nums[0] = nums[0], nums[pivot_index]\n        temp_list.append(nums[0])\n        pivot_index = 0\n        for i in range(1, len(nums)):\n            if nums[i] < nums[0]:\n                nums[pivot_index], nums[i] = nums[i], nums[pivot_index]\n                temp_list.append(nums[i])\n                pivot_index += 1\n        return recursive_pancake_sort(nums[pivot_index+1:], temp_list)\n\n    nums_sorted = recursive_pancake_sort(nums, [])\n    return nums_sorted"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Initialize the list of remaining pancakes\n    pancakes = [n for _ in range(n)]\n    # Sort the list of remaining pancakes in descending order\n    pancakes.sort(reverse=True)\n    # Iterate through the sorted pancakes and swap each element with its corresponding index in the list\n    for i in range(n):\n        j = n-1-i\n        nums[i], nums[j] = nums[j], nums[i]\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and counts the number of items that are identical in the same position of each list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n\n    # Initialize a counter variable\n    count = 0\n\n    # Iterate through each item in list1\n    for item1 in list1:\n\n        # Check if the item is present in all other lists\n        for list2_item in list2:\n            if item1 == list2_item:\n                for list3_item in list3:\n                    if item1 == list3_item:\n                        count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes in an array and finds the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    '''\n    max_diff = float('-inf') # initializing the maximum difference variable to negative infinity\n    for i in range(len(arr)): # iterating over each element in the array\n        for j in range(i+1, len(arr)): # iterating over each element in the array excluding the current element\n            diff = arr[j] - arr[i] # calculating the absolute difference between the current and the next element\n            if diff > max_diff: # updating the maximum difference if the current difference is greater than the current maximum\n                max_diff = diff # updating the maximum difference variable to the current difference\n    return max_diff # returning the maximum difference"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the maximum difference\n    max_diff = 0\n    # Traverse through the array\n    for i in range(1, len(arr)):\n        # Calculate the absolute difference between the current element and the next element\n        diff = abs(arr[i] - arr[i+1])\n        # Update the maximum difference if the difference is greater than the current maximum\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(1, n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    if a == 0 or b == 0:\n        return None\n    \n    x = 0\n    y = 0\n    while y < n:\n        x = y\n        y = a * x + b\n    \n    if y == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Find the discriminant\n    d = b**2 - 4*a*n\n    \n    # Check if there is a solution\n    if d < 0:\n        return None\n    elif d == 0:\n        x = -b/2/a\n        return (x, x)\n    else:\n        # If there is a solution, then find the two roots\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(b, -b-1, -1):\n        if a*x + b*n == 0:\n            return (x, -a*x)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize the values of x and y\n    x = 0\n    y = 0\n    \n    # check if x1 and y1 are equal to zero\n    if a == 0:\n        # check if y1 can be divided by b\n        if n % b == 0:\n            x = n // b\n            return x, y\n        else:\n            return None\n    \n    # check if y1 can be divided by b\n    if n % b == 0:\n        y = n // b\n        return x, y\n    else:\n        # check if y1 can be divided by a\n        if y % a == 0:\n            x = y // a\n            return x, y\n        else:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n\n    x0 = -n / b\n    y0 = a * x0\n\n    if x0.is_integer() and y0.is_integer():\n        return (int(x0), int(y0))\n\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Find the discriminant\n    discriminant = b**2 - 4*a*n\n\n    # Check if the discriminant is negative or zero\n    if discriminant < 0:\n        return None\n    \n    # Check if the discriminant is positive\n    elif discriminant == 0:\n        x1 = -b / (2*a)\n        return (x1, x1)\n    \n    # Check if the discriminant is positive\n    else:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        if i*a + b*i == n:\n            return (i, n/i)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        # If b is zero, the equation can be simplified to ax = -n/a\n        if a == 0:\n            return None\n        elif n % a == 0:\n            return (-n//a, -n//a)\n        else:\n            return None\n    else:\n        # Use the quadratic formula to find the roots\n        d = b**2 - 4*a*n\n        if d < 0:\n            return None\n        else:\n            x1 = (-b + d**0.5) / (2*a)\n            x2 = (-b - d**0.5) / (2*a)\n            return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = (-b + (b**2 - 4*a*n) ** 0.5) / (2*a)\n    y = (-b - (b**2 - 4*a*n) ** 0.5) / (2*a)\n    if x**2 + y**2 == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # calculate the discriminant\n    d = b**2 - 4*a*n\n    \n    # if the discriminant is positive, there is a solution\n    if d > 0:\n        # calculate the two solutions\n        x1 = (-b + d**0.5) / (2*a)\n        x2 = (-b - d**0.5) / (2*a)\n        y1 = x1 / b\n        y2 = x2 / b\n        \n        # return the two solutions as a tuple\n        return (x1, x2), (y1, y2)\n    # if the discriminant is zero, there is only one solution\n    elif d == 0:\n        x = -b / (2*a)\n        y = x / b\n        return (x, y), (y, x)\n    # if the discriminant is negative, there are no solutions\n    else:\n        return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Loop through the list2 and remove all elements that are present in list1\n    for element in list2:\n        if element in list1:\n            list2.remove(element)\n    return list2"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a set from the first list\n    set1 = set(list1)\n    # iterate over the second list\n    for item in list2:\n        # if the item is in the set1, remove it from the set1\n        if item in set1:\n            set1.remove(item)\n    # convert the set back to a list and return it\n    return list(set1)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = [x for x in list1 if x not in list2]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # loop through the list1 and remove elements present in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Iterate through the first list\n    for i in range(len(list1)):\n        # Check if the element is present in the second list\n        if list1[i] in list2:\n            # Remove the element from the first list\n            del list1[i]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # iterate over list2 and remove all elements present in list1\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_value = 0\n    for i in range(n // 2):\n        sum_value += n - 2 * i\n    return sum_value"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize sum to 0\n    sum = 0\n    # loop through i from 0 to n // 2\n    for i in range(n // 2):\n        # calculate the value of n - 2*i\n        value = n - 2 * i\n        # add the value to the sum\n        sum += value\n        # check if n - value =< 0, if so, break the loop\n        if n - value <= 0:\n            break\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        for i in range(n // 2):\n            result += n - 2 * i\n        return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n//2):\n        result += (n - 2*i)\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    i = 0\n    while n - 2*i >= 0:\n        result += n - 2*i\n        i += 1\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += (n - 2*i)\n    return total"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * (1 - tan(i*pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2 * pi / l * i\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((i * 2 * pi) / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        r = s / tan(pi/l)\n        area += r * (i + 1) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(2 * pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of the polygon using Heron's formula\n    area = (s * l) / 2\n\n    # Calculate the perimeter of the polygon\n    perimeter = s * l\n\n    return area, perimeter"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of the polygon using Heron's formula\n    area = (s * l * (s + l)) / 4\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l)/2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of a polygon using Heron's formula\n    area = (s * l) / 2\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        r = s/l\n        angle = i*2*pi/l\n        area += r*tan(angle)\n    return area*s/2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the sum of the divisors of n using the helper function div_sum_helper\n    div_sum_n = div_sum_helper(n)\n\n    # Calculate the sum of the divisors of n using the math library\n    math_sum_n = math.sum(math.factorial(n))\n\n    # Check if the sum of the divisors of n and the sum of the divisors of n using the math library are the same\n    if div_sum_n == math_sum_n:\n        print(\"True\")\n    else:\n        print(\"False\")\n\n\ndef div_sum_helper(n):\n    '''\n    Helper function to find the sum of the divisors of an integer.\n    '''\n\n    # Initialize the divisor list with the number itself\n    divisors = [n]\n\n    # Iterate through the range of numbers from 2 to n-1\n    for i in range(2, n):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            # If i is a divisor of n, add it to the divisor list\n            divisors.append(i)\n\n    # Return the sum of the divisors\n    return sum(divisors)\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 10:\n        return False\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    if len(divisors) == 2:\n        sum_div = sum(divisors)\n        return sum_div == n // 2\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = sum(divisors(n))\n    return divisor_sum\n\ndef divisors(n):\n    '''\n    Write a function to determine the divisors of a given integer.\n    '''\n    divisors_list = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors_list.append(i)\n            if i!= n // i:\n                divisors_list.append(n // i)\n    return divisors_list"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum1 += i\n        if n % (i+1) == 0:\n            sum1 += i+1\n        if i**2 > n:\n            break\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum2 += i\n        if n % (i+1) == 0:\n            sum2 += i+1\n        if i**2 > n:\n            break\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    if n < 1:\n        return False\n\n    divisors_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors_sum += i\n            if n // i!= i:\n                divisors_sum += n // i\n\n    return divisors_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # function to calculate the sum of divisors\n    def sum_divisors(num):\n        div_sum = 0\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                div_sum += i + (num//i)\n        return div_sum\n\n    # calculating the sum of divisors of two integers\n    div1 = sum_divisors(n)\n    div2 = sum_divisors(n)\n\n    # comparing the sum of divisors\n    if div1 == div2:\n        print(\"The sum of the divisors of\", n, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 1:\n        return True\n    else:\n        div_sum = 0\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                div_sum += i + n//i\n        return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    for i in range(int(math.sqrt(n))+1, n+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of \n    n and the sum of the divisors of n-1 are the same.\n    '''\n\n    def sum_divisors(num):\n        '''\n        This function takes an integer num as input and returns a list of its divisors.\n        '''\n        divisors = []\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                if num // i == i:\n                    divisors.append(i)\n                else:\n                    divisors.append(i)\n                    divisors.append(num // i)\n        return divisors\n\n    def sum_of_divisors(num):\n        '''\n        This function takes an integer num as input and returns the sum of its divisors.\n        '''\n        divisors = sum_divisors(num)\n        return sum(divisors)\n\n    div1 = sum_divisors(n)\n    div2 = sum_divisors(n - 1)\n    return div1 == div2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2:\n        return False\n    \n    # calculate the sum of the divisors\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            div_sum += n//i\n    \n    return div_sum == n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    count = 0\n    for i in range(26): \n        if str1[i].lower() == chr(i+97).lower(): # comparing lowercase characters\n            count += str1.count(chr(i+97)) # counting occurrences of the character\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    # create a dictionary to store the character frequencies\n    freq_dict = {}\n    \n    # convert the string to lowercase and loop through each character\n    for char in str1.lower():\n        # if the character is in the dictionary, increment its count\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # otherwise, add it to the dictionary with a count of 1\n        else:\n            freq_dict[char] = 1\n    \n    # create a list of tuples containing the character and its position in the string\n    char_positions = []\n    for char in freq_dict:\n        for i, c in enumerate(str1):\n            if c.lower() == char.lower():\n                char_positions.append((char, i))\n                break\n    \n    # count the number of occurrences of each character at the same position in the string\n    count = 0\n    for pos_tuple in char_positions:\n        count += freq_dict[pos_tuple[0]]\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for char in str1.lower():\n        if char in alphabet:\n            index = alphabet.index(char.lower())\n            if index == alphabet.index(char):\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        \n        # Convert the character to lowercase\n        char = char.lower()\n        \n        # If the character is a letter, add it to the dictionary with a count of 1\n        if char.isalpha():\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    \n    # Initialize a counter to keep track of the total number of characters\n    total_count = 0\n    \n    # Loop through each character in the string\n    for char in str1:\n        \n        # Convert the character to lowercase\n        char = char.lower()\n        \n        # If the character is a letter, add it to the counter\n        if char.isalpha():\n            total_count += char_count[char]\n    \n    return total_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n\n    # Initialize a dictionary to store the character positions and their counts\n    char_positions = {}\n\n    # Loop through each character in the string\n    for i, char in enumerate(str1.lower()):\n\n        # Check if the character is in the English alphabet\n        if char.isalpha():\n\n            # If the character is already in the dictionary, increment its count\n            if char in char_positions:\n                char_positions[char] += 1\n            else:\n                char_positions[char] = 1\n\n    # Return the dictionary of character positions and counts\n    return char_positions"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    \n    for char in str1:\n        if char.lower() in english_alphabet.lower():\n            count += 1\n            \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1:\n        if char.isalpha():\n            index = 'abcdefghijklmnopqrstuvwxyz'.index(char.lower())\n            if index % 26 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is a lowercase letter\n        if char.islower():\n            # If it is, check if it is already in the dictionary\n            if char in char_count:\n                # If it is, increment its count\n                char_count[char] += 1\n            else:\n                # If it's not, add it to the dictionary with a count of 1\n                char_count[char] = 1\n    # Loop through the dictionary and count the number of characters that occur at the same position in the English alphabet\n    same_position_count = 0\n    for char, count in char_count.items():\n        # If the count is equal to 1 and the character is a lowercase letter, increment the count of same-position letters\n        if count == 1 and char.islower():\n            same_position_count += 1\n    return same_position_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Initialize a dictionary to store the count of characters at the same position in the string as in the English alphabet\n    char_dict = {}\n\n    # Loop through each character in the string\n    for char in str1:\n\n        # Convert the character to lowercase\n        char = char.lower()\n\n        # Check if the character is already in the dictionary\n        if char in char_dict:\n\n            # Increment the count of the character in the dictionary\n            char_dict[char] += 1\n\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_dict[char] = 1\n\n    # Initialize a counter variable to keep track of the count of characters at the same position in the string as in the English alphabet\n    count = 0\n\n    # Loop through each character in the English alphabet (case insensitive)\n    for i in range(len(str1)):\n        char = chr(ord('a') + i)\n\n        # Check if the character is already in the dictionary\n        if char in char_dict:\n\n            # Increment the count of the character in the dictionary\n            char_dict[char] -= 1\n\n            # If the count of the character is 0, remove the character from the dictionary\n            if char_dict[char] == 0:\n                del char_dict[char]\n\n            # If the count is still greater than 0, increment the count of characters at the same position in the string as in the English alphabet\n            count += 1\n\n    # Return the count of characters at the same position in the string as in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower()[i] == str(chr(i+97)).lower():\n            count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] + A[j]) % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if (A[i] + A[j]) % 2 == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    n -= 1\n    n |= (n >> 1)\n    n |= (n >> 2)\n    n |= (n >> 4)\n    n |= (n >> 8)\n    n |= (n >> 16)\n    return n + 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the smallest power of 2 greater than or equal to n as n\n    smallest_power_of_2 = n\n    \n    # Loop while smallest_power_of_2 is not a power of 2\n    while smallest_power_of_2 & (smallest_power_of_2 - 1)!= 0:\n        # Increment the smallest power of 2\n        smallest_power_of_2 <<= 1\n    \n    # Return the smallest power of 2 greater than or equal to n\n    return smallest_power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the variable to store the result\n    result = 1\n    \n    # Loop until the result is greater than or equal to n\n    while result < n:\n        # Increment the result by 1\n        result = result + 1\n    \n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Initialize a flag variable to keep track of whether the number is a power of 2 or not\n    is_power_of_2 = False\n\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # If the number is a power of 2, set the flag to True and break out of the loop\n        if i == 1:\n            is_power_of_2 = True\n            break\n        elif i & (i - 1) == 0:\n            is_power_of_2 = True\n            break\n\n    # If the number is not a power of 2, return the smallest power of 2 greater than or equal to n\n    if not is_power_of_2:\n        return 2**((n.bit_length() - 1).bit_length())\n\n    # Return the next power of 2\n    return 1 << (n.bit_length() - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # convert n to binary and find the highest bit set\n    highest_bit = len(bin(n)[2:])\n    # compute 2^highest_bit\n    highest_power = 1 << highest_bit\n    # if n is already a power of 2, return n\n    if n >= highest_power:\n        return n\n    # if n is not a power of 2, return the next power of 2\n    return highest_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    This function finds the smallest power of 2 greater than or equal to n.\n    '''\n    # Check if n is 0\n    if n == 0:\n        return 1\n\n    # Find the last set bit in n\n    last_set_bit = 0\n    while n & (1 << last_set_bit) == 0:\n        last_set_bit += 1\n\n    # Return 2 raised to the power of last_set_bit\n    return 1 << last_set_bit"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power_of_2 = 2\n    while power_of_2 < n:\n        power_of_2 *= 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Set the initial value to n\n    power = n\n    \n    # Loop until power is a power of 2\n    while power & (power-1)!= 0:\n        power <<= 1\n        \n    # Return the power\n    return power"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes in a list `a` and a number `x` and returns the number of times `x` occurs in `a`.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for item in a:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x): \n    '''\n    This function takes a list `a` and a number `x` as inputs and returns the count of \n    occurrences of `x` in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Find the sum of numbers in a list between two indices (m and n)\n\n    Args:\n    lst (list): The list of numbers to sum\n    m (int): The index of the first number in the range to sum\n    n (int): The index of the last number in the range to sum\n\n    Returns:\n    int: The sum of the numbers in the list between the two indices (m and n)\n    \"\"\"\n    if m < 0 or m >= len(lst) or n < 0 or n >= len(lst) or m > n:\n        raise ValueError(\"Invalid indices\")\n    return sum(lst[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-m]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n\n    total = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total += i\n\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize sum to zero\n    sum = 0\n    # Loop through the list and add the numbers in the range to the sum\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_list += i\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_value = 0\n    for i in range(m, n+1):\n        sum_value += list1[i-1]\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_val = 0\n    for i in range(m, n+1):\n        sum_val += list1[i]\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # check if input indices are valid\n    if not (0 <= m < len(list1)) or not (0 <= n < len(list1)):\n        raise ValueError(\"Invalid input indices.\")\n    # check if input indices are within range of list length\n    if m > n:\n        raise ValueError(\"Invalid input indices.\")\n    # initialize sum variable\n    sum = 0\n    # iterate through the range of indices and add the numbers in the range to the sum\n    for i in range(m, n+1):\n        sum += list1[i]\n    # return the sum\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculate the semi-perimeter of the pentagon using the formula:\n    #   a^2 / 5\n    # where a is the length of the base of the pentagon.\n    semi_perimeter = (a**2) / 5\n\n    # Use the formula for the area of a regular pentagon to calculate the area of the pentagon:\n    #   (5/4) * pi * r^2\n    # where r is the semi-perimeter of the pentagon.\n    area = (5/4) * math.pi * semi_perimeter**2\n\n    # Calculate the perimeter of the pentagon by adding the semi-perimeter of the pentagon and its length.\n    perimeter = 2*semi_perimeter + a\n\n    # Return the value of the perimeter of the pentagon.\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the hypotenuse using the Pythagorean theorem\n    c = math.sqrt(5) * a\n    # calculate the perimeter using the formula for a regular polygon\n    p = (5 * a) + (4 * c)\n    return round(p, 2)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the semi-perimeter of the pentagon using the formula 2ab + 12ab^2\n    s = (4 * a * a) + (12 * a * a * a)\n    # Calculate the area of the pentagon using the formula 5a^2 + 6a + 10\n    area = (5 * a * a) + (6 * a) + 10\n    # Calculate the perimeter of the pentagon using the formula 5s + 6a + 10\n    perimeter = (5 * s) + (6 * a) + 10\n    # Return the perimeter of the pentagon\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    count = 0\n    for char in s:\n        if char =='s' or char == 't' or char == 'd':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += 1\n        s = s.replace('std', '')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurence of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += 1\n        s = s.replace('std', '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # check if all elements have same data type or not\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # check if the input is a tuple\n    if not isinstance(test_tuple, tuple):\n        return \"The input should be a tuple.\"\n    \n    # check if all the elements in the tuple have same data type\n    data_type = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= data_type:\n            return \"The tuple should have all the same data type.\"\n    \n    # all elements have same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Convert all elements in the tuple to a list\n    elements_list = list(test_tuple)\n    \n    # Initialize a boolean variable to keep track of the data type of the first element in the tuple\n    data_type_match = True\n    \n    # Loop through the list and check if all the elements have same data type\n    for i in range(len(elements_list)):\n        if not isinstance(elements_list[i], type(elements_list[0])):\n            data_type_match = False\n            break\n    \n    # Return True if all the elements have same data type, otherwise return False\n    return data_type_match"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= first_element:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    type_list = []\n    for item in test_tuple:\n        type_list.append(type(item))\n    return type_list[0] == type_list[-1]"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 1:\n        return True\n\n    first_elem = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= first_elem:\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize a list to store the data types of all elements in the tuple\n    data_types = []\n    # iterate through each element in the tuple\n    for element in test_tuple:\n        # check if the element is of type list or tuple\n        if isinstance(element, (list, tuple)):\n            # if it is, recursively call the function on the nested tuple\n            data_types.append(check_type(element))\n        else:\n            # if it's not, add its data type to the list\n            data_types.append(type(element).__name__)\n    # check if all the data types in the list are the same\n    if len(set(data_types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function takes a tuple as input and returns True if all the elements in the tuple have the same data type, False otherwise.\n    \"\"\"\n    # get the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n    # loop through the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        # check if the data type of the current element is the same as the data type of the first element\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if tuple has any elements at all\n    if not test_tuple:\n        return 'Error: Empty tuple'\n    \n    # Check if all elements have the same type\n    first_element = test_tuple[0]\n    for element in test_tuple:\n        if not isinstance(element, type(first_element)):\n            return 'Error: Different data types in tuple'\n    \n    # All elements have the same type, so return True\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize count and candidate\n    count = 0\n    candidate = arr[0]\n\n    # Loop through array\n    for i in range(1, n):\n        # If candidate matches current element, increment count\n        if candidate == arr[i]:\n            count += 1\n        # If count reaches n/2, return True (majority element)\n        elif count == n // 2:\n            return True\n        # If candidate does not match current element, reset count and candidate\n        else:\n            count = 0\n            candidate = arr[i]\n\n    # If count reaches n/2, return True (majority element)\n    if count == n // 2:\n        return True\n\n    # If no majority element is found, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count == n//2:\n                return True\n        else:\n            count = 0\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    i = 0\n    while i < n:\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n > 0): \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0: \n        n &= (n - 1) # clear the least significant set bit \n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    # Initialize a count variable to keep track of the number of set bits.\n    count = 0\n\n    # Iterate through each bit in the binary representation of the input number.\n    for bit in bin(n)[2:]:\n\n        # If the bit is a 1, increment the count.\n        if bit == '1':\n            count += 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0 \n    while n > 0: \n        count += n & 1 \n        n = n >> 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([str[i] if i % 2 == 0 else '' for i in range(len(str))])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([chr(ord(char) + 1) if (ord(char) + 1) % 2 == 0 else char for char in str])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove characters from a given string that have odd index values.\n\n    Parameters:\n    str: string\n\n    Returns:\n    new_str: string\n    \"\"\"\n\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([chr(int(c) % 256) for c in str])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Initialize an empty string to store the resulting string\n    result = \"\"\n    # Loop through each character of the input string\n    for char in str:\n        # Check if the index of the current character is odd\n        if str.index(char) % 2 == 1:\n            # If the index is odd, add the character to the result string\n            result += char\n    # Return the resulting string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum number.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function finds the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Convert binary values to int\n    n = int(n, 2)\n    l = int(l, 2)\n    r = int(r, 2)\n\n    # Initialize a mask with all 1's\n    mask = 1\n\n    # Check if all the bits are set in the range\n    for i in range(l, r+1):\n        # Check if the i-th bit is unset in n\n        if n & mask == 0:\n            return False\n\n        # Shift the mask to the left\n        mask <<= 1\n\n    # If we reach this point, it means all the bits are set in the range\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # initialize a variable to store the count of unset bits\n    unset_bits = 0\n    # loop through the bits of n\n    for i in range(l, r+1):\n        # if the bit is set, increment the unset bits count\n        if n & (1 << i):\n            unset_bits += 1\n    # if all the bits are unset, return True else False\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Check whether all the bits are unset in the given range or not.\n\n    Parameters:\n    n (int): an integer representing the binary number\n    l (int): the leftmost bit index of the range (inclusive)\n    r (int): the rightmost bit index of the range (inclusive)\n\n    Returns:\n    bool: True if all bits are unset in the given range, False otherwise.\n    \"\"\"\n    # Convert the integer to a binary string\n    binary_string = bin(n)[2:]\n\n    # Check whether all bits are unset in the range\n    all_bits_set = True\n    for i in range(l, r+1):\n        if binary_string[i] == '1':\n            all_bits_set = False\n            break\n\n    return all_bits_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes in three integers n, l and r and returns a boolean value indicating whether all the bits are set in the given range or not.\n    '''\n    mask = 0\n    for i in range(r - l + 1):\n        mask |= 1 << l + i\n        if n & mask!= mask:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Convert the given range to binary format\n    binary_l = bin(l)[2:]\n    binary_r = bin(r)[2:]\n\n    # Initialize a boolean variable to store the result\n    result = True\n\n    # Check if all the bits are set in the given range\n    for i in range(len(binary_l)):\n        if binary_l[i] == '0' and binary_r[i] == '1':\n            result = False\n            break\n\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the bitwise AND of all the numbers from l to r\n    mask = (1 << r) - 1\n    \n    # Iterate over all the numbers from l to r\n    for i in range(l, r+1):\n        # Compute the bitwise AND of the current number with the mask\n        current_and_mask = i & mask\n        \n        # If the result is not equal to the original number, then all the bits are set in the range\n        if current_and_mask!= i:\n            return False\n    \n    # If all the loops finish executing, then all the bits are unset in the given range\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the number of bits set to 1\n    count = 0\n    # Loop through the range of bits from l to r\n    for i in range(l, r+1):\n        # Check if the i-th bit is set to 1\n        if (n & (1<<i))!= 0:\n            count += 1\n        # If all the bits have been checked, then return False\n        if count == r-l+1:\n            return False\n    # If all the bits have been checked and all the bits are set, then return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize the count of unset bits to n-1\n    count = n-1\n\n    # Iterate through the range and unset the bits\n    for i in range(l, r+1):\n        count -= bin(i).count('1')\n\n    # Return True if all the bits are unset in the given range, False otherwise\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function will return True if all the bits are set in the given range, else it will return False.\n    '''\n    # Initialize a counter for the number of unset bits\n    unset_bits = 0\n    # Loop through the range of bits from left to right\n    for i in range(l, r + 1):\n        # Check if the i-th bit is set or not\n        if (n & (1 << i))!= 0:\n            # If the bit is set, increment the counter for unset bits\n            unset_bits += 1\n    # If the number of unset bits is equal to 0, it means all the bits are set in the given range\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize all bits as unset\n    count = 0\n\n    # Iterate through all bits in the range and check if they are set\n    for i in range(l, r+1):\n        if n & (1 << i):\n            count += 1\n\n    # If all bits are unset, return True\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers: one for positive elements and one for negative elements\n    pos = 0\n    neg = n - 1\n    # Traverse the array and swap the elements as required\n    for i in range(n):\n        if arr[i] >= 0:\n            # Swap with the next positive element\n            if pos < neg:\n                arr[pos], arr[i] = arr[i], arr[pos]\n            pos += 1\n        else:\n            # Swap with the next negative element\n            if pos < neg:\n                arr[neg], arr[i] = arr[i], arr[neg]\n            neg -= 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two empty arrays to store positive and negative elements respectively\n    positive = []\n    negative = []\n\n    # Iterate through the given array and add elements to the corresponding arrays\n    for element in arr:\n        if element >= 0:\n            positive.append(element)\n        else:\n            negative.append(element)\n\n    # Merge the two arrays into a single array\n    arr = []\n    for element in positive:\n        arr.append(element)\n    for element in negative:\n        arr.append(element)\n\n    # Sort the merged array in ascending order\n    arr.sort()\n\n    # Return the sorted array\n    return arr[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    \n    # Separate the array into positive and negative elements\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    # Sort the negative elements in ascending order\n    negatives.sort()\n    \n    # Re-arrange the array such that negative elements appear before positive ones\n    for i in range(n):\n        arr[i] = negatives[i] if arr[i] < 0 else positives.pop(0)\n    \n    # Reverse the order of the negative elements if necessary\n    if negatives[0] < 0:\n        negatives.reverse()\n    \n    return arr, negatives"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize two pointers, one at the beginning and one at the end of the array\n    i = 0\n    j = n - 1\n\n    # While i is less than j, swap the elements at i and j if they are not in the correct order\n    while i < j:\n        if arr[i] >= 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n        elif arr[i] < 0 and arr[j] >= 0:\n            arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n\n    # Print the final array\n    print(\"Rearranged array:\", arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    neg = []\n    pos = []\n    for i in arr:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    neg.extend(pos)\n    return neg[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # create a dictionary to store the count of negative and positive elements\n    count_dict = {'negative': 0, 'positive': 0}\n\n    # loop through the array\n    for num in arr:\n        # if the number is negative, increment the count of negative elements\n        if num < 0:\n            count_dict['negative'] += 1\n        # if the number is positive, increment the count of positive elements\n        else:\n            count_dict['positive'] += 1\n\n    # create a list of negative elements and a list of positive elements\n    negative_elements = []\n    positive_elements = []\n\n    # loop through the dictionary again to fill the lists\n    for key, value in count_dict.items():\n        # if the value is greater than 0, append the corresponding elements to the appropriate list\n        if value > 0:\n            for i in range(value):\n                if key == 'negative':\n                    negative_elements.append(arr[i])\n                else:\n                    positive_elements.append(arr[i])\n\n    # re-arrange the list of negative and positive elements so that all negative elements appear before positive ones\n    for i in range(n):\n        if negative_elements:\n            arr[i], arr[n+negative_elements.index(negative_elements.pop(0))] = arr[n+negative_elements.index(negative_elements.pop(0))], arr[i]\n        elif positive_elements:\n            arr[i], arr[n+positive_elements.index(positive_elements.pop(0))] = arr[n+positive_elements.index(positive_elements.pop(0))], arr[i]\n        else:\n            break\n\n    # return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    \n    # Create a list to store the negative elements\n    neg_list = []\n    \n    # Iterate over the array from the first n elements to the end\n    for i in range(n):\n        # If the element at i is negative, add it to the negative list\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        # If the element at i is not negative, add it to the end of the positive list\n        else:\n            arr.append(arr[i])\n    \n    # Add the negative elements to the beginning of the positive list\n    for i in range(len(neg_list)):\n        arr.insert(0, neg_list[i])\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Initialize two pointers for both negative and positive elements\n    neg_ptr = 0\n    pos_ptr = n\n\n    # Traverse the array from both pointers\n    while neg_ptr < pos_ptr:\n\n        # If the element at the negative pointer is negative, swap it with the element at the positive pointer\n        if arr[neg_ptr] < 0:\n            arr[neg_ptr], arr[pos_ptr] = arr[pos_ptr], arr[neg_ptr]\n\n            # If the element at the positive pointer is also negative, swap it with the element at the positive pointer\n            if arr[neg_ptr] < 0:\n                arr[neg_ptr], arr[pos_ptr] = arr[pos_ptr], arr[neg_ptr]\n\n            # Increment the positive pointer\n            pos_ptr += 1\n\n        # If the element at the positive pointer is positive, increment the negative pointer\n        else:\n            neg_ptr += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # count the number of negative and positive elements\n    neg_count = 0\n    pos_count = 0\n    for num in arr[:n]:\n        if num < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    \n    # if n is greater than the number of positive elements, swap the two arrays and reverse the order of the negative elements\n    if n > pos_count:\n        # swap the two arrays\n        arr[:n], arr[n:] = arr[n:], arr[:n]\n        # reverse the order of the negative elements\n        arr[:neg_count], arr[neg_count:] = arr[neg_count:][::-1], arr[:neg_count][::-1]\n    # if n is less than or equal to the number of positive elements, swap the two arrays and reverse the order of the positive elements\n    else:\n        # swap the two arrays\n        arr[:n], arr[n:] = arr[n:], arr[:n]\n        # reverse the order of the positive elements\n        arr[neg_count:n], arr[:neg_count] = arr[:neg_count][::-1], arr[neg_count:n][::-1]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    neg_index = []\n    pos_index = []\n    for i, val in enumerate(arr):\n        if val < 0:\n            neg_count += 1\n            neg_index.append(i)\n        else:\n            pos_count += 1\n            pos_index.append(i)\n    neg_index.sort()\n    pos_index.sort(reverse=True)\n    rearranged_index = neg_index + pos_index\n    result = [0] * n\n    for i in rearranged_index[:n]:\n        result[i] = arr[i]\n    for i in rearranged_index[n:]:\n        result[i] = -arr[i]\n    return result"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Using the replace() method to replace blank spaces with the character\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i]!= \" \":\n            new_str += str1[i]\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use a max-heap to keep track of the n largest elements in the list\n    max_heap = []\n    for num in list1:\n        heapq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    \n    # Extract the n largest elements from the heap and return them as a list\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    \n    for item in list1:\n        heapq.heappush(heap, item)\n        \n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use a min heap to store the n largest items\n    heap = []\n    for item in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    # Return the list of n largest items\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap to store the n largest elements from the list\n    heap = []\n    for i in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, i)\n        else:\n            if i > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, i)\n    # convert the heap to a list and return it\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Sort the list in descending order\n    list1.sort(reverse=True)\n    \n    # Return the top n elements of the sorted list\n    return list1[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1.pop())\n    # Add the remaining elements to the heap in decreasing order\n    for i in list1:\n        heapq.heappush(heap, i)\n    # Return the n largest elements from the heap in decreasing order\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Finding the lateral surface area of a cylinder\n    # using the formula (pi/4)*r^2*h\n    # where pi/4 is the value of pi divided by 4\n    return (3.14/4)*r*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the area of the cylinder using the formula:\n    # A = 2 * pi * r * h\n    area = 2 * 3.14 * r * h\n    # Return the area\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    area = 2 * 3.14159 * r * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface = 2*pi*(r**2+h**2)\n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = math.pi * (r**2 + h**2)\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Calculate the lateral surface area of a cylinder.\n\n    Args:\n    r (float): radius of the cylinder.\n    h (float): height of the cylinder.\n\n    Returns:\n    float: lateral surface area of the cylinder.\n    '''\n\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface = 2 * r * h\n\n    # Return the lateral surface area\n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area\n    area = 2*3.14*(r**2) + 2*3.14*r*h + (2*3.14*(r**2))/3 + (2*3.14*r*h)/3\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area of the cylinder\n    area = 2 * 3.14159265359 * r**2 + 2 * 3.14159265359 * h * r\n    # return the lateral surface area of the cylinder\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2*math.pi*r*h + 2*math.pi*h*r\n    return lateral_surface_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # loop through each bit in the binary representation of n\n    for i in range(len(bin(n)[2:])):\n        # set the i-th bit of the binary representation of n to 1\n        if i % 2 == 0:\n            n |= 1 << i\n    # return the updated binary representation of n\n    return bin(n)[2:]\n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to keep track of the bits we need to set\n    even_bits = 0\n    \n    # loop through each bit in the number\n    for bit in bin(n)[2:]:\n        # if the bit is even, set the corresponding bit in the even_bits variable\n        if int(bit) == 0:\n            even_bits = even_bits | (1 << (len(bin(n)[2:]) - int(bit)))\n    \n    # return the number with even bits set\n    return n | even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n >> 1)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result of bitwise AND with n \n    result = n\n    \n    # loop through each bit of the binary representation of n \n    for i in range(8): \n        # if the ith bit is an even bit, set it to 1 \n        if n & (1 << i) == (1 << i): \n            result = result | (1 << i)\n    \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # initialize an empty string to store the result\n    result = ''\n\n    # iterate over each bit of the input number\n    for bit in bin(n)[2:]:\n        # if the current bit is even, set it to 1\n        if bit == '0':\n            result += '0'\n        else:\n            result += '1'\n\n    # convert the result string back to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n & 1 == 0: # check if the number has only even bits\n        n >>= 1 # shift the number to the right\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function takes a positive integer as an argument and returns the same number with all even bits set to 1.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 0\n\n    # Iterate through each bit of the input number\n    for i in range(32):\n        # Get the current bit value\n        bit = n & (1 << i)\n\n        # If the bit is even (i.e., its binary representation ends with 0), set the result to 1 for that bit\n        if bit:\n            result |= (1 << i)\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bits of the number\n    even_bits = 0\n    \n    # Iterate through each bit of the number\n    for bit in bin(n)[2:]:\n        # If the bit is an even number, add it to the variable\n        if int(bit) % 2 == 0:\n            even_bits = even_bits + int(bit)\n    \n    # Return the modified number with all even bits set\n    return n ^ even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each bit of the given number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1\n        if int(bit) == 0:\n            result = result << 1\n        else:\n            result = result | 1\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize result to 0\n    result = 0\n    # iterate over each bit in the input number\n    for bit in bin(n)[2:]:\n        # if the current bit is even, set it in the result\n        if bit == '1':\n            result |= 1 << int(bit)\n    # return the result\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create an empty dictionary to store the result\n    result = {}\n\n    # Create a counter object to keep track of the occurrences of each tuple\n    counter = Counter(test_list)\n\n    # Iterate through the keys of the counter object and add them to the result dictionary with their value as the count\n    for key in counter.keys():\n        result[key] = counter[key]\n\n    # Return the result dictionary\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurrences = {}\n    for item in test_list:\n        if item in occurrences:\n            occurrences[item] += 1\n        else:\n            occurrences[item] = 1\n    return occurrences"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # Loop through each tuple in the test list\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n    \n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for item in test_list:\n        counter[item] += 1\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for item in test_list:\n        counter[item] += 1\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter()\n    for tup in test_list:\n        count_dict[tup] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # loop through each tuple in the list\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # if it is, increment its count by 1\n            count_dict[tup] += 1\n        else:\n            # if it isn't, add it to the dictionary with a count of 1\n            count_dict[tup] = 1\n    \n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # loop through the list of tuples\n    for tup in test_list:\n        # if the tuple is not already in the dictionary, add it with a count of 1\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        # if the tuple is already in the dictionary, increment its count by 1\n        else:\n            count_dict[tup] += 1\n    \n    # return the count dictionary\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str) - 1):\n        for j in range(i + 2, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    # Initialize variables\n    count = 0\n    n = len(str)\n\n    # Iterate through all substrings\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    \"\"\"\n    Counts the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(string):\n    \"\"\"\n    This function counts the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j-i!= 1 and string[i:j].strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            if str[i:j+1]!= '':\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid_sequence(seq):\n        for i in range(len(seq) - 1):\n            if seq[i] >= seq[i+1] and seq[i] >= 2 * seq[i+2]:\n                return True\n        return False\n\n    def count_valid_sequences(start, end):\n        count = 0\n        for i in range(start, end):\n            if is_valid_sequence(list(range(start, i+1))):\n                count += 1\n        return count\n\n    total_count = 0\n    for i in range(2, m+1):\n        total_count += count_valid_sequences(1, i)\n    return total_count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n\n    sequence_length = 2 * n - 1\n    total_sequences = 1\n\n    for i in range(2, m + 1):\n        for j in range(1, i + 1):\n            if j <= sequence_length:\n                total_sequences += 1\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize the number of possible sequences to 0\n    total_sequences = 0\n\n    # Initialize the variables for the current sequence and the previous element\n    current_sequence = []\n    prev_element = 1\n\n    # Loop until we have found all possible sequences\n    while prev_element <= m:\n        # If the current element is less than or equal to twice the previous element and greater than or equal to 2*prev_element, add it to the current sequence\n        if prev_element <= 2*prev_element and prev_element <= m:\n            current_sequence.append(prev_element)\n\n            # If the current sequence is of length n, increment the total number of sequences\n            if len(current_sequence) == n:\n                total_sequences += 1\n\n        # Move the previous element to the next position in the sequence\n        prev_element += 1\n\n        # If the current sequence is of length n and the next element is greater than or equal to twice the previous element and less than or equal to m, remove the first element from the sequence\n        if len(current_sequence) == n and prev_element <= 2*prev_element and prev_element <= m:\n            current_sequence = current_sequence[1:]\n\n    # Return the total number of sequences found\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(i, prev_prev, prev, curr):\n        if i == n:\n            return 1\n        if i == 0 or (prev >= m - 2 * prev_prev and prev <= m):\n            return helper(i + 1, prev, prev_prev, prev + 1) + helper(i + 1, prev, prev_prev, prev - 1)\n        return helper(i + 1, prev, prev_prev, prev)\n\n    if m < 1 or n < 1 or n > m:\n        return \"Invalid input\"\n    else:\n        return helper(0, -1, -1, 1)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    sequence = []\n    for i in range(n):\n        sequence.append(1)\n    for i in range(1, m):\n        for j in range(i, min(m, i + n - 1)):\n            sequence[j] = sequence[j] + 1\n        if all(sequence[i] >= 2 * sequence[i - 1] < min(m, i + n - 1) for i in range(n)):\n            total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize variables\n    count = 0\n    previous_element = None\n\n    # Iterate through all possible sequences of length n\n    for i in range(1, m+1):\n        if previous_element is None or i >= previous_element*2 and i <= m:\n            count += 1\n        previous_element = i\n\n    # Return the total number of sequences found\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(2, m + 1):\n        for j in range(i, m + 1):\n            if i * 2 <= j <= m:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1, m + 1):\n        if i % 2!= 0 and i <= n:\n            count += 1\n    for i in range(2, m + 1, 2):\n        if i > n:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_possible_sequences(m,n):\n        sequences = []\n        for i in range(m, m+n):\n            if i >= 2*n:\n                sequences.append(i)\n        return sequences\n    \n    sequences = get_possible_sequences(m,n)\n    return len(sequences)\n\nm = int(input(\"Enter the value of m: \"))\nn = int(input(\"Enter the value of n: \"))\nprint(\"Number of possible sequences of length\", n, \"is\", get_total_number_of_sequences(m,n))"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Function to count number of possible sequences\n    def count_sequences(n, m, count):\n        # Base case: if n is 0, return 1\n        if n == 0:\n            return 1\n        # If n is greater than 0 and m is less than or equal to twice the previous element, return 0 (no sequences with this condition)\n        if n > 0 and m <= 2 * count:\n            return 0\n        # If n is greater than 0 and m is greater than twice the previous element, return count (one sequence with this condition)\n        if n > 0 and m > 2 * count:\n            return count\n        # If n is greater than 0 and m is greater than twice the previous element and n is greater than 1, recursively add count to count_sequences(n-1, m, count)\n        if n > 0 and m > 2 * count and n > 1:\n            return count + count_sequences(n-1, m, count)\n\n    # Count the total number of sequences of length n such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m\n    total_sequences = count_sequences(n, m, 0)\n    return total_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.pop()\n    for element in list2:\n        list1.append(element)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # if the second list is empty, do nothing\n    if not list2:\n        return list1\n    \n    # calculate the number of elements to copy\n    num_to_copy = len(list2)\n    \n    # if the second list has fewer elements than the first list, \n    # use all of them\n    if num_to_copy > len(list1):\n        num_to_copy = len(list1)\n    \n    # copy the elements of the second list to the last position of the first list\n    list1[-num_to_copy:] = list2[-num_to_copy:]\n    \n    # return the modified list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        list1.append(list2.pop())\n    elif len(list1) > len(list2):\n        list2.extend(list1.pop())\n        list1.extend(list2)\n    else:\n        list1[:] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.pop()\n    list1.extend(list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    # Check if the length of the first list is equal to the length of the second list\n    if len(list1)!= len(list2):\n        raise ValueError(\"The length of the first list must be equal to the length of the second list\")\n    \n    # Loop through the second list and replace the last element of the first list with the elements of the second list\n    for i in range(len(list2)-1, -1, -1):\n        list1[-1] = list2[i]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # get the length of the first list\n    length1 = len(list1)\n    # get the length of the second list\n    length2 = len(list2)\n    # check if the second list has at least one element\n    if length2 == 0:\n        # if the second list is empty, return the first list\n        return list1\n    # if the second list has only one element, replace the last element of the first list with that element\n    elif length2 == 1:\n        list1[-1] = list2[0]\n        # return the modified first list\n        return list1\n    # if the second list has multiple elements, replace the last element of the first list with the first element of the second list\n    else:\n        list1[-1] = list2[0]\n        # remove the first element of the second list\n        list2 = list2[1:]\n        # recursively call the function with the modified first list and the remaining elements of the second list\n        return replace_list(list1, list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if both lists have the same length\n    if len(list1)!= len(list2):\n        print(\"Both lists must have the same length.\")\n        return\n    \n    # Iterate over the list to replace the last element of list1 with the elements of list2\n    for i in range(len(list1)-1):\n        list1[i] = list2[i]\n    \n    # Return the updated list\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(string):\n    \"\"\"\n    Returns the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in string:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_perfect_square(num):\n        return int(math.sqrt(num)) ** 2 == num\n    \n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def is_square_and_prime(num):\n        return is_perfect_square(num) and is_prime(num)\n    \n    def is_square_less_than_n(n):\n        return is_perfect_square(n-1) and is_prime(n-1)\n    \n    def is_square_greater_than_n(n):\n        return is_perfect_square(n+1) and is_prime(n+1)\n    \n    def next_square(n):\n        if is_perfect_square(n):\n            return n+1\n        elif n < 2:\n            return 1\n        elif n > 2 and n % 2 == 1:\n            return 3\n        else:\n            return 5\n    \n    n = int(N)\n    square = next_square(n)\n    while not is_square_greater_than_n(square):\n        square = next_square(square)\n    \n    return square\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a Python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if N % 4 == 0:\n        # if N is a multiple of 4, find the next multiple of 8\n        # (which is a multiple of 4 as well)\n        x = N + 8\n    else:\n        # if N is not a multiple of 4, find the next multiple of 4\n        x = N + 4\n\n    y = int(math.sqrt(x))\n    z = int(math.sqrt(x))\n\n    # check if y is a multiple of 4, if not, move to the next multiple of 4\n    while y % 4!= 0:\n        y += 4\n\n    # check if z is a multiple of 4, if not, move to the next multiple of 4\n    while z % 4!= 0:\n        z += 4\n\n    # if the square of y is greater than the square of N, return y\n    if y * y > N:\n        return y\n\n    # if the square of z is greater than the square of N, return z\n    elif z * z > N:\n        return z\n\n    # otherwise, N is not a perfect square, return None\n    else:\n        return None"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a given number as input and returns the next perfect square greater than it.\n    \n    Args:\n    N (int): The given number.\n    \n    Returns:\n    int: The next perfect square greater than the given number.\n    \"\"\"\n    # function to check if a number is a perfect square\n    def is_perfect_square(num):\n        return int(math.sqrt(num)) ** 2 == num\n    \n    # function to find the next perfect square\n    def find_next_perfect_square(N):\n        while True:\n            num = N + 1\n            while not is_perfect_square(num):\n                num += 1\n            return num\n    \n    # call the function and return the result\n    return find_next_perfect_square(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        x = int(math.sqrt(2*N)) + 1\n        y = int(math.sqrt(2*N) + 1)\n        if x*x == 2*N:\n            return y\n        elif x*x < 2*N:\n            return x"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrtN = math.sqrt(N)\n    intSqrtN = int(sqrtN)\n    square = intSqrtN*intSqrtN\n\n    # If the square is already a perfect square, the next one is the square root of the given number + 1\n    if square == N:\n        return int(math.sqrt(N+1))\n\n    # If the square is less than the given number, the next one is the square of the next greater perfect square\n    else:\n        return int(math.sqrt(square))"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Square root of N\n    sqrtN = int(math.sqrt(N))\n    # Check if N is already a perfect square\n    if sqrtN*sqrtN == N:\n        # Check if N is already the largest perfect square\n        if sqrtN*sqrtN == 2*sqrtN:\n            return 2*sqrtN\n        else:\n            return 2*sqrtN-1\n    else:\n        # Check if the square root of N is odd\n        if sqrtN % 2 == 1:\n            return 2*sqrtN-1\n        else:\n            return 2*sqrtN"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_perfect_square(num):\n        return int(math.sqrt(num))**2 == num\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_prime_square(num):\n        return is_perfect_square(num) and is_prime(int(math.sqrt(num)))\n\n    def is_prime_square_greater_than(num):\n        return is_prime_square(num) and num > 2\n\n    def next_prime_square_greater_than(num):\n        next_num = num + 1\n        while not is_prime_square_greater_than(next_num):\n            next_num += 1\n        return next_num\n\n    if is_perfect_square(N):\n        return N\n    else:\n        return next_prime_square_greater_than(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Initialize a variable to store the last perfect square found\n    last_square = 0\n    \n    # Check if the input number is already a perfect square\n    if math.isqrt(N) ** 2 == N:\n        # If the input number is already a perfect square, return the same number\n        return N\n    \n    # Initialize variables to store the square of the last perfect square found and the square of the current input number\n    last_square_square = 0\n    current_square = 0\n    \n    # Loop until the input number is greater than the last perfect square found\n    while current_square <= N:\n        # Update the variables to store the square of the current input number and the square of the current perfect square found\n        current_square_square = current_square ** 2\n        last_square_square = last_square ** 2\n        \n        # Check if the current input number is a perfect square and greater than the last perfect square found\n        if current_square_square > last_square_square and current_square_square > N:\n            # If the current input number is a perfect square greater than the last perfect square found, return the current input number\n            return current_square\n        \n        # Update the last perfect square found and the input number\n        last_square = current_square\n        current_square += 1\n    \n    # If the input number is greater than all perfect squares, the function will reach here and return the input number itself\n    return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math  \n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Initialize variables\n    p = math.sqrt(N) + 1\n    n = int(p * p)\n\n    # Check if the number is already a perfect square\n    while n <= N:\n        p += 1\n        n = int(p * p)\n\n    # Check if the next perfect square is greater than N\n    while n <= N:\n        p += 1\n        n = int(p * p)\n        if n > N:\n            return int(p * p)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Take the square root of the given number\n    root = math.sqrt(N)\n\n    # Initialize the result to the square root\n    result = root**2\n\n    # Check if the result is greater than the given number\n    while result > N:\n        # Increment the result by 1\n        result += 1\n\n    return result"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0] * 3 for _ in range(n)]\n\n    for i in range(n):\n        for j in range(3):\n            if j == 0:\n                dp[i][j] = arr[i]\n            elif j == 1:\n                dp[i][j] = max(arr[i], dp[i-1][2])\n            elif j == 2:\n                dp[i][j] = max(arr[i], dp[i-1][1])\n\n    return max(dp[n-1][1], dp[n-1][2])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate through the array\n    for num in arr:\n        \n        # If the number is increasing, add it to the current sum\n        if num < arr[0]:\n            current_sum += num\n        \n        # If the number is decreasing, subtract it from the current sum\n        else:\n            current_sum -= arr[0]\n        \n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n\n    # Check if the array is bitonic\n    if all(arr[i] < arr[i+1] for i in range(n-1)):\n        return sum(arr[i] for i in range(n-1))\n\n    # If the array is not bitonic, find the maximum subarray\n    elif all(arr[i] > arr[i+1] for i in range(n-1)):\n        max_so_far = max_ending_here = arr[0]\n        for i in range(1, n):\n            if arr[i] > max_ending_here:\n                max_ending_here = arr[i]\n            else:\n                max_ending_here += arr[i]\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n        return max_so_far\n\n    # If the array is not bitonic, find the maximum subarray (optimized)\n    else:\n        max_so_far = max_ending_here = arr[0]\n        for i in range(1, n):\n            if arr[i] < max_ending_here:\n                max_ending_here = arr[i]\n            else:\n                max_ending_here += arr[i]\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n        return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    A sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return max(arr)\n\n    dp = [0] * n\n\n    # Initialize the first two elements of the dp array\n    dp[0] = arr[0]\n    dp[1] = arr[1]\n\n    # Initialize the maximum sum of the first three elements\n    max_sum_first_three = max(dp[0], dp[1])\n\n    # Loop through the rest of the elements of the array\n    for i in range(2, n):\n        # If the current element is increasing, then add it to the first two elements of the dp array\n        if arr[i] > dp[i-2]:\n            dp[i] = dp[i-2] + arr[i]\n        # If the current element is decreasing, then add it to the last two elements of the dp array\n        elif arr[i] < dp[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        # If the current element is neither increasing nor decreasing, then add it to the middle of the dp array\n        else:\n            dp[i] = dp[i-1] + dp[i-2]\n\n        # Update the maximum sum of the first three elements\n        max_sum_first_three = max(max_sum_first_three, dp[i])\n\n    return max_sum_first_three"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # check if the array is bitonic\n    if arr[0] < arr[1] and arr[1] < arr[-1]:\n        return max_sum_increasing(arr)\n    elif arr[0] > arr[1] and arr[1] > arr[-1]:\n        return max_sum_decreasing(arr)\n    else:\n        return None\n\ndef max_sum_increasing(arr):\n    '''\n    Finds the maximum sum of a bitonic subsequence in which the array is increasing.\n    '''\n    \n    # initialize variables\n    max_sum = arr[0]\n    current_sum = arr[0]\n    \n    # loop through the array and calculate the current sum\n    for i in range(1, len(arr)):\n        current_sum += arr[i]\n        \n        # if the current sum becomes negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n        \n        # update the maximum sum if necessary\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum\n    \ndef max_sum_decreasing(arr):\n    '''\n    Finds the maximum sum of a bitonic subsequence in which the array is decreasing.\n    '''\n    \n    # initialize variables\n    max_sum = arr[0]\n    current_sum = arr[0]\n    \n    # loop through the array and calculate the current sum\n    for i in range(1, len(arr)):\n        current_sum += arr[i]\n        \n        # if the current sum becomes negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n        \n        # update the maximum sum if necessary\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    def is_bitonic(arr):\n        for i in range(1, len(arr)):\n            if arr[i] >= arr[i - 1] and arr[i] <= arr[i - 2]:\n                return True\n        return False\n\n    def bitonic_subsequence(arr):\n        subseq = []\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i - 1]:\n                subseq.append(arr[i])\n        return subseq\n\n    max_sum_bitonic = 0\n    max_subseq = []\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            if is_bitonic(arr[i - 1:i + 1]):\n                if max_sum_bitonic < sum(arr[i - 1:i + 1]):\n                    max_sum_bitonic = sum(arr[i - 1:i + 1])\n                    max_subseq = arr[i - 1:i + 1]\n\n    return max_sum_bitonic"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return max(arr[0], arr[1])\n    else:\n        # Initialize variables\n        max_left = arr[0]\n        max_right = arr[1]\n        curr_sum_left = arr[0]\n        curr_sum_right = arr[1]\n        max_sum = arr[0] + arr[1]\n\n        # Calculate the maximum sum for the subarrays\n        for i in range(2, n):\n            curr_sum_left = max(curr_sum_left + arr[i], arr[i])\n            curr_sum_right = max(curr_sum_right + arr[n - i - 1], arr[n - i - 1])\n\n            max_sum = max(max_sum, curr_sum_left, curr_sum_right)\n\n        return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    # Initialize variables\n    max_sum = float('-inf')\n    prev_sum = 0\n    curr_sum = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Calculate the current sum\n        curr_sum = arr[i]\n\n        # Check if the current sum is increasing\n        if i > 0 and arr[i] < arr[i-1]:\n            # If it is, check if it's a bitonic subsequence\n            if curr_sum - prev_sum > 0:\n                # If it is, update the maximum sum\n                max_sum = max(max_sum, curr_sum)\n\n        # Update the previous sum\n        prev_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    left_sum = 0\n    right_sum = 0\n    left_max = float('-inf')\n    right_max = float('-inf')\n\n    for i in range(n):\n        if i % 2 == 0:\n            left_sum += arr[i]\n            left_max = max(left_max, left_sum)\n        else:\n            right_sum += arr[i]\n            right_max = max(right_max, right_sum)\n        max_sum = max(max_sum, left_max + right_max)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize variables for max_sum and current_sum\n    max_sum = arr[0]\n    current_sum = arr[0]\n\n    # Loop through the array and check if the current element is increasing or decreasing\n    for i in range(1, len(arr)):\n        if arr[i] >= arr[i-1]:\n            current_sum += arr[i]\n        else:\n            max_sum = max(max_sum, current_sum)\n            current_sum = arr[i]\n\n    # Add the last element of the array to the current_sum and update max_sum\n    current_sum += arr[-1]\n    max_sum = max(max_sum, current_sum)\n\n    # Return the maximum sum of a bitonic subsequence\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a, b, c = 1, 2, 1\n    while b**2 - 4*a*c >= 0:\n        a, b, c = b, 2*b*b - 4*a*c, 1\n    return (b + a**0.5) / 2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    i = 0\n    x = number/2\n    while True:\n        i += 1\n        x = (x + number/x) / 2\n        if abs(x - x**2) < 1e-10:\n            return x, i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Define variables for the babylonian method\n    a = 1\n    b = 0.5 * number\n    c = 0.5 * number * (1 - b ** 2)\n\n    # Loop until the difference between b and c is less than some tolerance\n    while abs(c - b) > 1e-15:\n        # Update the values of a, b, and c\n        a = b\n        b = 0.5 * (b + c)\n        c = 0.5 * (b + c)\n\n    # Return the final value of b\n    return b"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    guess = number/2\n    # iterate until the guess is sufficiently close to the square root\n    while abs(guess**2 - number) > 0.0001:\n        guess = (guess + number/guess)/2\n    # return the final guess as the square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Check if the input is a float or an integer\n    if not isinstance(number, (int, float)):\n        raise TypeError('Input must be a float or an integer.')\n    \n    # Initialize the guess as 1\n    guess = 1\n    \n    # Initialize the previous guess and current guess as 0\n    previous_guess = 0\n    current_guess = 1\n    \n    # Iterate until the difference between the current and previous guesses is less than or equal to 0.00001\n    while abs(current_guess - previous_guess) > 0.00001:\n        # Compute the next guess as the average of the previous two guesses\n        next_guess = (previous_guess + current_guess) / 2\n        \n        # Check if the next guess is within the range of the input number\n        if next_guess > number:\n            # If it is, return the next guess as the square root\n            return next_guess\n        \n        # Update the previous guess and the current guess\n        previous_guess = current_guess\n        current_guess = next_guess\n    \n    # If the loop completes, return the last guess as the square root\n    return current_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    x = number / 2  # initial guess\n    y = x + (number / x) ** 0.5  # next guess\n\n    while abs(x - y) > 0.000001:  # until difference between x and y is less than 0.000001\n        x = y  # update x\n        y = x + (number / x) ** 0.5  # update y\n\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    i = 0\n    error = 0.0001\n    guess = number/2\n    square = guess*guess\n    \n    # iterate until the difference between the current guess and the square root is less than the desired error\n    while abs(guess*guess - number) > error:\n        i += 1\n        # compute the next guess using the babylonian method\n        guess = (square + number/square) / 2\n        square = guess*guess\n    \n    # print the number of iterations and the computed square root\n    print(\"Iterations:\", i)\n    print(\"Square root:\", guess)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    x0 = 1\n    x1 = number/x0\n    xn = x1\n    i = 0\n    while abs(xn - x0) > 0.00001:\n        xn = 0.5*(xn + x0/xn)\n        i += 1\n    return xn, i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        next_guess = (guess + number/guess) / 2\n        if abs(next_guess - guess) < 0.001:\n            break\n        guess = next_guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 1e-12 # The smallest number such that 1 + epsilon!= 1\n    low = 0\n    high = number\n    while abs(high - low) > epsilon:\n        mid = (low + high) / 2\n        if mid * mid == number:\n            return mid\n        elif mid * mid < number:\n            low = mid\n        else:\n            high = mid\n    return high"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str): \n    \"\"\"\n    This function takes a string as input and returns the length of the longest palindromic subsequence.\n    \"\"\"\n    n = len(str)\n    # Initialize a 2D table to store the length of the longest palindromic subsequence for all possible substrings\n    table = [[0] * n for _ in range(n)]\n\n    # Set the length of the longest palindromic subsequence for the empty string to 0\n    for i in range(n):\n        table[i][i] = 0\n\n    # Check all possible substrings and update the table\n    for length in range(2, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                table[start][end] = table[start + 1][end - 1] + 2\n            else:\n                table[start][end] = max(table[start + 1][end], table[start][end - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(string):\n    \"\"\"\n    This function finds the length of the longest palindromic subsequence in a given string.\n    \"\"\"\n    # Create a list of all possible subsequences of the given string\n    subsequences = [\"\".join(s) for s in itertools.product(string, repeat=len(string))]\n\n    # Initialize variables to keep track of the length and start index of the longest palindromic subsequence\n    longest_length = 0\n    start_index = 0\n\n    # Iterate through all subsequences and check if they are palindromes\n    for index in range(len(subsequences)):\n        # Check if the current subsequence is a palindrome\n        if subsequences[index] == subsequences[index][::-1]:\n            # If it is, update the longest length and start index\n            if len(subsequences[index]) > longest_length:\n                longest_length = len(subsequences[index])\n                start_index = index\n\n    # Return the length and start index of the longest palindromic subsequence\n    return longest_length, start_index\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    n = len(str)\n    # create a 2D array to store the lengths of longest palindromic subsequences of substrings of length i+1\n    dp = [[0] * n for i in range(n)]\n\n    # base case: if the length of the string is 1, then the length of the longest palindromic subsequence is 1\n    if n == 1:\n        return 1\n\n    # fill the 2D array with the lengths of longest palindromic subsequences of substrings of length i+1\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            # if the characters are the same, then the length of the longest palindromic subsequence is 2+dp[i-1][i-2]\n            dp[i][i] = 2 + dp[i-1][i-2]\n        else:\n            # if the characters are different, then the length of the longest palindromic subsequence is the maximum of \n            # the length of the longest palindromic subsequence of substrings of length i and the length of the \n            # longest palindromic subsequence of substrings of length i-1\n            dp[i][i] = max(dp[i-1][i], dp[i][i-1])\n\n    # return the length of the longest palindromic subsequence of the entire string\n    return dp[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D array to store the lengths of longest palindromic subsequences for all prefixes of the string\n    lps_array = [[0] * n for _ in range(n)]\n    # Initialize the first column and the first row of the array\n    for i in range(n):\n        lps_array[i][i] = 1\n    # Fill the rest of the array using dynamic programming\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                lps_array[i][j] = lps_array[i + 1][j - 1] + 2\n            else:\n                lps_array[i][j] = max(lps_array[i + 1][j], lps_array[i][j - 1])\n    # Return the length of the longest palindromic subsequence\n    return lps_array[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    # base case: if the string is empty or has length 1, it is a palindrome and has length 1\n    if len(str) <= 1:\n        return 1\n\n    # Initialize two variables to keep track of the length of the longest palindromic subsequence ending at each index\n    # of the input string.\n    # The first variable will keep track of the longest palindromic subsequence ending at the first index.\n    # The second variable will keep track of the longest palindromic subsequence ending at the last index.\n    lps_length1 = 1\n    lps_length2 = 1\n\n    # Initialize three variables to keep track of the indices of the current longest palindromic subsequence\n    # ending at each index of the input string.\n    # The first variable will keep track of the index of the first character of the longest palindromic\n    # subsequence ending at the first index.\n    # The second variable will keep track of the index of the last character of the longest palindromic\n    # subsequence ending at the first index.\n    # The third variable will keep track of the index of the first character of the longest palindromic\n    # subsequence ending at the last index.\n    # The fourth variable will keep track of the index of the last character of the longest palindromic\n    # subsequence ending at the last index.\n    start1 = 0\n    end1 = 0\n    start2 = 0\n    end2 = 0\n\n    # Iterate over the input string and for each character, check if it is a palindrome.\n    for i in range(1, len(str)):\n        # Check if the current character is the same as the previous character\n        if str[i] == str[i-1]:\n            # If it is, then check if it forms a palindrome that ends at the current index.\n            # If it does, then update the longest palindromic subsequence ending at the first index.\n            if i == len(str)-1 or str[i+1]!= str[i]:\n                if i-start1+1 > lps_length1:\n                    start1 = i-i%2\n                    end1 = i\n                    lps_length1 = i-start1+1\n\n            # Check if it forms a palindrome that ends at the last index.\n            # If it does, then update the longest palindromic subsequence ending at the last index.\n            if i-start2+1 > lps_length2:\n                start2 = i-i%2\n                end2 = i\n                lps_length2 = i-start2+1\n\n    # Return the length of the longest palindromic subsequence ending at the first index.\n    return lps_length1"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_palindrome(s):\n    \"\"\"\n    Helper function to check if a string is palindrome or not.\n    \"\"\"\n    return s == s[::-1]\n\ndef lps(s):\n    \"\"\"\n    Function to find the length of the longest palindromic subsequence in a given string.\n    \"\"\"\n    max_length = 1\n    start = 0\n    for i in range(len(s)):\n        if is_palindrome(s[start:i+1]):\n            max_length = i + 1\n            start = i\n        if is_palindrome(s[i:i+1]):\n            max_length = i + 1\n            start = i\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(s):\n    \"\"\"\n    This function takes a string as input and returns the length of the longest palindromic subsequence.\n    \"\"\"\n    n = len(s)\n    # Create a 2D table to store the lengths of longest palindromic subsequences of all substrings\n    # of the given string.\n    table = [[0] * n for _ in range(n)]\n    # Initialize the base case: for a single character string, its longest palindromic subsequence is 1.\n    table[0][0] = 1\n\n    # Fill in the table by filling in substrings of length i from the string.\n    for i in range(1, n):\n        for j in range(i):\n            if s[j] == s[i]:\n                # If the characters are same, extend the subsequence by including this character.\n                table[i][j] = table[j][i-1] + 2\n            else:\n                # If the characters are not same, extend the subsequence by excluding this character.\n                table[i][j] = max(table[i-1][j], table[j][i])\n\n    # Return the length of the longest palindromic subsequence in the string.\n    return table[n-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [1] * n\n\n    # length of longest palindromic subsequence ending at i\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            dp[i] = dp[i-1] + 2\n        else:\n            dp[i] = max(dp[i-1], dp[i-2])\n\n    return dp[-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    \n    # Initialize a 2D array to store the length of longest palindromic subsequence for each substring of the given string\n    # We will fill this array bottom up\n    lps_arr = [[0] * len(str) for _ in range(len(str))]\n\n    # Initialize the longest palindromic subsequence length as 0\n    max_length = 0\n\n    # Initialize two pointers, left and right, to start of the string\n    left = 0\n    right = 0\n\n    # Loop through each character of the string\n    for i in range(len(str)): \n        # Check if the character at index i is a palindrome\n        if str[i] == str[i][::-1]: \n            # If it is, update the longest palindromic subsequence length\n            max_length = max(max_length, 2)\n\n        # Check if the current character can be part of a palindromic subsequence\n        while right < len(str) - 1 and str[i] == str[right + 1]: \n            # If it can, update the longest palindromic subsequence length and move the right pointer\n            max_length = max(max_length, right - left + 2)\n            right += 1\n\n        # Move the left pointer to the next character\n        left += 1\n\n    # Return the length of the longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef longest_palindrome(s):\n    longest = \"\"\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if is_palindrome(s[i:j+1]):\n                if len(s[i:j+1]) > len(longest):\n                    longest = s[i:j+1]\n    return longest\n\ndef lps(s):\n    return len(longest_palindrome(s))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (2*n-1)/(n*(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 2*(n - 1)/n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(n-1):\n        harmonic_sum += 1 / (i+1)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # initialize variables\n    s = 1\n    count = 0\n    \n    # iterate through the range from 1 to n-1\n    for i in range(1, n):\n        # calculate the harmonic sum\n        s += 1 / i\n        count += 1\n    \n    # return the harmonic sum of n-1\n    return count * s"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the harmonic sum of n-1\n    harmonic_sum_n_1 = (1/n) + (1/n**2) + (1/n**3) + (1/n**4) + (1/n**5)\n    return harmonic_sum_n_1"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + ((1/n) * (n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    # Calculate the harmonic sum of n-1\n    harmonic_sum_n_minus_1 = 2*n - 1\n    \n    # Return the harmonic sum\n    return harmonic_sum_n_minus_1"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (2*n-1)/harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/n**2) + (1/n**3) +... + (1/n**(n-1))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    nums1_set = set(array_nums1)\n    nums2_set = set(array_nums2)\n    for num in nums1_set:\n        if num in nums2_set:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Initialize an empty set to store the intersection\n    intersection = set()\n\n    # Loop through the first array and check if each element is also present in the second array\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.add(num)\n\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set of the first array and store it in a new array\n    set_nums1 = list(set(array_nums1))\n    # create an empty list to store the intersection\n    intersection = []\n    # iterate through the second array and check if each element is in the set of the first array\n    for num in array_nums2:\n        if num in set_nums1:\n            # add the element to the intersection list\n            intersection.append(num)\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set for the first array\n    set1 = set(array_nums1)\n\n    # Create an empty list to hold the intersection\n    intersection = []\n\n    # Loop through the second array\n    for num in array_nums2:\n        # If the number is in the first array, append it to the intersection list\n        if num in set1:\n            intersection.append(num)\n\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input, `array_nums1` and `array_nums2`, and returns their intersection.\n    \"\"\"\n    if not array_nums1 or not array_nums2:\n        return []\n\n    # Create a dictionary to store the count of each number in the first array\n    count_dict = {}\n    for num in array_nums1:\n        count_dict[num] = count_dict.get(num, 0) + 1\n\n    # Create a set to store the common numbers\n    common_nums = set()\n\n    # Iterate through the second array and add common numbers to the set\n    for num in array_nums2:\n        if count_dict.get(num, 0) > 0:\n            common_nums.add(num)\n            count_dict[num] -= 1\n\n    # Return the common numbers as a list\n    return list(common_nums)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Initialize an empty list to store the intersection elements\n    intersection = []\n\n    # Loop through each element in the first array\n    for num1 in array_nums1:\n        # Initialize a flag to check if the element is present in the second array\n        flag = False\n        # Loop through each element in the second array\n        for num2 in array_nums2:\n            # If the two elements are equal, add the element to the intersection list and set the flag to True\n            if num1 == num2:\n                intersection.append(num1)\n                flag = True\n                break\n        # If the element is not present in the second array, set the flag to False\n        if not flag:\n            intersection.append(num1)\n\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create two dictionaries to store the count of each element in the arrays\n    dict1 = {}\n    dict2 = {}\n\n    # Iterate through the first array and count the occurrences of each element\n    for num in array_nums1:\n        if num in dict1:\n            dict1[num] += 1\n        else:\n            dict1[num] = 1\n\n    # Iterate through the second array and count the occurrences of each element\n    for num in array_nums2:\n        if num in dict2:\n            dict2[num] += 1\n        else:\n            dict2[num] = 1\n\n    # Find the intersection by iterating through both dictionaries and adding the common keys to a new list\n    intersection_list = []\n    for key in dict1:\n        if key in dict2 and dict1[key] == dict2[key]:\n            intersection_list.append(key)\n\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a dictionary to store the frequency of each element in array_nums1\n    freq_dict1 = {}\n    for num in array_nums1:\n        if num in freq_dict1:\n            freq_dict1[num] += 1\n        else:\n            freq_dict1[num] = 1\n            \n    # Create a dictionary to store the frequency of each element in array_nums2\n    freq_dict2 = {}\n    for num in array_nums2:\n        if num in freq_dict2:\n            freq_dict2[num] += 1\n        else:\n            freq_dict2[num] = 1\n            \n    # Find the intersection of the two dictionaries\n    intersection = []\n    for num in freq_dict1:\n        if num in freq_dict2 and freq_dict1[num] == freq_dict2[num]:\n            intersection.append(num)\n            \n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup: \n        if elem == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.append(element)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Iterate over the list\n    for i in range(len(list)):\n        # Insert the element at the beginning of the current element\n        list.insert(0, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        else:\n            result.append(list[i-1])\n            result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Insert an element before each element in a list.\n\n    :param lst: the list to modify\n    :param element: the element to insert\n    :return: the modified list\n    \"\"\"\n    return [element] + lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(elem)\n        new_lst.append(lst[i])\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        magnitude = cmath.abs(number)\n        angle = cmath.phase(number)\n        polar = (magnitude, angle)\n        result.append(polar)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates.\n\n    Parameters:\n    numbers (list): A list of complex numbers to be converted.\n\n    Returns:\n    list: A list of tuples containing the magnitude and angle of each complex number in the input list.\n    \"\"\"\n\n    # Create an empty list to store the polar coordinates\n    polar_coordinates = []\n\n    # Loop through each complex number in the input list\n    for number in numbers:\n\n        # Extract the real and imaginary parts of the complex number\n        real = number.real\n        imag = number.imag\n\n        # Calculate the magnitude of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n\n        # Calculate the angle of the complex number\n        angle = cmath.phase(number)\n\n        # Add the polar coordinate to the list of polar coordinates\n        polar_coordinates.append((magnitude, angle))\n\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(number)\n        print(f'({real:.2f} + {imag:.2f}j) = r = {magnitude:.2f}, phi = {angle:.2f}\u00b0')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(number)\n        polar = (magnitude, angle)\n        print(\"(%f, %f) -> (%f, %f)\" % (real, imag, magnitude, angle))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        print(\"({}, {})\".format(r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        polar_coordinates.append(complex_to_polar(number))\n    return polar_coordinates\n\ndef complex_to_polar(complex_number):\n    '''\n    Convert a complex number to polar coordinates.\n    '''\n    return cmath.polar(complex_number)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        if isinstance(num, complex):\n            x = cmath.sqrt(num.real**2 + num.imag**2)\n            y = cmath.phase(num)\n            result.append((x, y))\n        else:\n            result.append(num)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # convert complex number to polar coordinates\n        polar_coord = cmath.polar(number)\n        polar_coordinates.append(polar_coord)\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        r = cmath.abs(num)\n        theta = cmath.phase(num) * 180 / cmath.pi\n        polar_coords.append((r, theta))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        mag = cmath.sqrt(real**2 + imag**2)\n        phase = cmath.phase(num)\n        polar = (mag, phase)\n        result.append(polar)\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    This function counts the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all combinations with repetition using itertools.combinations_with_replacement\n    combs = list(combinations_with_replacement(l, n))\n    # Create a list of tuples for each combination\n    result = [tuple(comb) for comb in combs]\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(lst, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    '''\n    Generate all combinations (with repetition) of n elements from a list\n    and return a list with tuples for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(lst, n)]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'blue', 'green']\n    result = []\n    for comb in combinations_with_replacement(colors, n):\n        result.append(tuple(comb))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l) - n + 1):\n        temp = tuple(l[i:i+n])\n        result.append(temp)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Define a generator function to generate combinations with replacement\n    def combinations_with_replacement_gen():\n        for i in range(1, len(l) + 1):\n            for c in combinations_with_replacement(l, i):\n                yield tuple(c)\n\n    # Generate all combinations with replacement and convert them into tuples\n    result = list(combinations_with_replacement_gen())\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    # initialize a list to keep track of prime numbers\n    primes = []\n\n    # loop through all numbers from 2 to n-1\n    for i in range(2, n):\n        # check if i is prime\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # if i is prime, append it to the list of primes\n        if is_prime:\n            primes.append(i)\n\n    # return the length of the list of primes\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    # initialize variables\n    count = 0\n    i = 2\n\n    # loop through numbers until the square root of n is greater than i\n    while i * i <= n:\n        # check if i is a prime number\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n            i += 1\n\n    # check if n is a prime number\n    if n > 1:\n        count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if a number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    # Initialize a variable to keep track of the count of primes\n    count = 0\n\n    # Loop through each number from 2 to n-1\n    for i in range(2, n):\n        # Check if i is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # If i is prime, increment the count\n        if is_prime:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, i)):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Determine the length of the two tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n\n    # Initialize variables to hold the maximum values in each tuple\n    max1 = test_tup1[0]\n    max2 = test_tup2[0]\n\n    # Loop through the tuples and compare their values\n    for i in range(1, len1):\n        if test_tup1[i] > max1:\n            max1 = test_tup1[i]\n\n    for j in range(1, len2):\n        if test_tup2[j] > max2:\n            max2 = test_tup2[j]\n\n    # Return the maximum values in the two tuples\n    return max1, max2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize variables to store the maximum element from each tuple\n    max1 = test_tup1[0]\n    max2 = test_tup2[0]\n    max3 = max1 if max1 > max2 else max2\n    \n    # Check if the third element is greater than the maximum of the first two\n    if test_tup1[2] > max3:\n        max3 = test_tup1[2]\n    elif test_tup2[2] > max3:\n        max3 = test_tup2[2]\n    \n    # Check if the third element is greater than the maximum of the first two\n    if test_tup1[1] > max3:\n        max3 = test_tup1[1]\n    elif test_tup2[1] > max3:\n        max3 = test_tup2[1]\n    \n    # Return the tuple with the maximum element in the third position\n    return (max3, max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the maximum element of each tuple.\n    '''\n\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if the first tuple is greater than the second tuple\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple that contains\n    the maximum values from each tuple.\n    \"\"\"\n    max_tup = (0, 0)\n    if test_tup1[0] > test_tup2[0]:\n        max_tup = test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        max_tup = test_tup2\n    if test_tup1[1] > test_tup2[1]:\n        max_tup = test_tup1\n    elif test_tup1[1] < test_tup2[1]:\n        max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize the maximum value to be the first element in the first tuple\n    max_value = test_tup1[0]\n    # Loop through the second tuple and compare each element to the current maximum value\n    for element in test_tup2:\n        if element > max_value:\n            max_value = element\n    # Return the maximum value found in the second tuple\n    return max_value"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Find the maximum element in each tuple\n    max_elem1 = max(test_tup1)\n    max_elem2 = max(test_tup2)\n\n    # Compare the maximum elements and return the tuple with the highest element\n    if max_elem1 > max_elem2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # comparing the length of the two tuples\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        # checking if the elements of the tuples are greater than the maximum element of the first tuple\n        if test_tup1[0] > test_tup2[0]:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_1 = max(test_tup1)\n    max_2 = max(test_tup2)\n    if max_1 >= max_2:\n        return max_1, max_2\n    else:\n        return max_2, max_1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a list to store the newman-shanks-williams primes\n    new_primes = []\n    # Check the first two newman-shanks-williams primes (2 and 3)\n    new_primes.append(2)\n    new_primes.append(3)\n    # Iterate through the rest of the newman-shanks-williams primes\n    for i in range(5, n+1):\n        # Check if the i-th newman-shanks-williams prime is prime\n        is_prime = True\n        for j in range(2, int(i/2)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # If the i-th newman-shanks-williams prime is prime, add it to the list\n        if is_prime:\n            new_primes.append(i)\n    # Return the nth newman-shanks-williams prime\n    return new_primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a counter variable to keep track of the number of prime numbers found so far\n    count = 0\n    \n    # Initialize a list to keep track of the primes found so far\n    primes = []\n    \n    # Define a function to check if a number is prime\n    def is_prime(num):\n        '''\n        Define a function to check if a number is prime.\n        '''\n        # Initialize a counter variable to keep track of the number of divisors found so far\n        divisor_count = 0\n        \n        # Check if the number is greater than 1\n        if num <= 1:\n            return False\n        \n        # Check if the number is divisible by 2\n        if num % 2 == 0:\n            return False\n        \n        # Check if the number is divisible by 3\n        if num % 3 == 0:\n            return False\n        \n        # Check if the number is divisible by any odd number between 5 and sqrt(num)\n        for i in range(5, int(num**0.5)+1, 2):\n            if num % i == 0:\n                divisor_count += 1\n                if divisor_count == 2:\n                    break\n        \n        # If no divisors were found, then the number is prime\n        if divisor_count == 0:\n            return True\n        \n        # If divisors were found, then the number is not prime\n        else:\n            return False\n    \n    # Define a function to generate the next newman-shanks-williams prime number\n    def next_newman_prime():\n        '''\n        Define a function to generate the next newman-shanks-williams prime number.\n        '''\n        # Initialize a counter variable to keep track of the number of newman-shanks-williams primes found so far\n        newman_prime_count = 0\n        \n        # Initialize a list to keep track of the newman-shanks-williams primes found so far\n        newman_primes = []\n        \n        # Check if the list of primes is empty\n        if len(primes) == 0:\n            return False\n        \n        # Iterate through the list of primes and check if each prime is newman-shanks-williams prime\n        for prime in primes:\n            # Check if the number of newman-shanks-williams primes found so far is equal to the current prime\n            if len(newman_primes) == prime:\n                newman_prime_count += 1\n                \n            # If the number of newman-shanks-williams primes found so far is greater than the current prime, \n            # then break out of the loop\n            if len(newman_primes) > prime:\n                break\n        \n        # If the number of newman-shanks-williams primes found so far is less than the current prime, \n        # then the current prime is a newman-shanks-williams prime\n        if newman_prime_count < prime:\n            return prime\n        \n        # Otherwise, the current prime is not a newman-shanks-williams prime\n        else:\n            return False\n    \n    # Generate the first newman-shanks-williams prime number\n    newman_prime_num = next_newman_prime()\n    \n    # If the nth newman-shanks-williams prime number is not found, return False\n    if newman_prime_num is False:\n        return False\n    \n    # Otherwise, iterate through the remaining newman-shanks-williams primes and find the nth prime\n    while count < n:\n        # Check if the nth newman-shanks-williams prime number has been found\n        if newman_prime_num is not False:\n            # Add the nth newman-shanks-williams prime number to the list of primes found so far\n            primes.append(newman_prime_num)\n            \n            # Increment the counter variable\n            count += 1\n            \n            # Find the next newman-shanks-williams prime number\n            newman_prime_num = next_newman_prime()\n            \n        # If the nth newman-shanks-williams prime number has not been found, then return False\n        else:\n            return False\n    \n    # Return the nth newman-shanks-williams prime number\n    return newman_prime_num\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a variable to keep track of the nth newman prime number\n    nth_prime = 2\n\n    # Loop through each odd number less than or equal to the square root of n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        # Check if i is prime\n        is_prime = True\n        for j in range(3, int(i ** 0.5) + 1, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # If i is prime, check if it is the nth newman prime number\n            if nth_prime == n:\n                return i\n            # If i is not the nth newman prime number, increment nth_prime\n            else:\n                nth_prime += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_prime(n):\n        \"\"\"\n        Helper function to find the nth newman\u2013shanks\u2013williams prime number.\n        \"\"\"\n        count = 1\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    return nth_prime(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize variables for finding prime numbers\n    is_prime = True\n    count = 0\n    prime = 2\n    \n    # Loop through numbers until we have found n primes\n    while count < n:\n        # Check if the number is prime\n        if is_prime:\n            count += 1\n            prime += 1\n        else:\n            is_prime = True\n            prime += 1\n        \n        # Check if the number is a newman\u2013shanks\u2013williams prime\n        if prime % 2 == 1 and prime % 3 == 1:\n            count += 1\n        else:\n            is_prime = False\n    \n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        p = 5\n        count = 0\n        while count < n-2:\n            if p % 2!= 0 and p % 3!= 0:\n                p += 2\n                count += 1\n            elif p % 2 == 0:\n                p += 4\n                count += 1\n            else:\n                p += 6\n                count += 1\n        return p"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n <= 0:\n        return None\n    a, b = 0, 2\n    while a < n:\n        if is_prime(a):\n            if a == b:\n                return a\n            elif a == b + 2:\n                return b\n            a += 1\n        else:\n            if b == 2 or b == a - 1:\n                a += 1\n            else:\n                b += 1\n    return None\n\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize counter variable to 1\n    count = 1\n    \n    # Initialize prime flag to True\n    is_prime = True\n    \n    # Initialize current number to 2\n    current = 2\n    \n    # Loop until we have found the nth newman\u2013shanks\u2013williams prime number\n    while count < n:\n        # Check if current number is prime\n        for i in range(2, current):\n            if current % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n            print(current)\n        current += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    p = 2  # Initialize the first prime number\n    count = 0\n    while count < n:\n        # Check if the current number is prime\n        if all(p % i!= 0 for i in range(2, int(p**0.5)+1)):\n            count += 1\n        # Increment the current number by 1\n        p += 1\n    return p"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # initialize variables\n    count = 0\n    current_prime = 2\n    previous_prime = 1\n    \n    # loop until count reaches n\n    while count < n:\n        # check if current_prime is a newman\u2013shanks\u2013williams prime\n        if is_newman_prime(current_prime):\n            count += 1\n        else:\n            # if not, update previous_prime and try again\n            previous_prime = current_prime\n            current_prime += 1\n    \n    # if count is greater than n, the nth newman\u2013shanks\u2013williams prime is not found\n    if count > n:\n        return \"Newman\u2013Shanks\u2013Williams prime number not found\"\n    \n    # if count is equal to n, return the nth newman\u2013shanks\u2013williams prime\n    else:\n        return current_prime\n\ndef is_newman_prime(n):\n    \"\"\"\n    Check if a given number is a newman\u2013shanks\u2013williams prime.\n    \"\"\"\n    # check if n is divisible by 2\n    if n % 2 == 0:\n        return False\n    \n    # if n is odd, check if it is divisible by 3 or 5\n    if n % 3 == 0 or n % 5 == 0:\n        return True\n    \n    # if n is divisible by any of the above, it is not a newman\u2013shanks\u2013williams prime\n    return False"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    division_list = []\n    for i in range(len(test_tup1)):\n        division_list.append(test_tup1[i] / test_tup2[i])\n    return division_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # Define the output tuple\n    result_tup = ()\n    \n    # Loop through each element in the input tuples\n    for i in range(len(test_tup1)):\n        # Divide the first element of the first tuple by the first element of the second tuple\n        first_element = test_tup1[i] / test_tup2[0]\n        \n        # Divide the second element of the first tuple by the second element of the second tuple\n        second_element = test_tup1[i] / test_tup2[1]\n        \n        # Append the two divisions to the output tuple\n        result_tup = result_tup + (first_element, second_element)\n    \n    # Return the output tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Initialize an empty list to store the result of each division operation\n    result_list = []\n    \n    # Perform element-wise division of each element of the two input tuples\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n    \n    # Return the list of result of element-wise division\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            result_tup = result_tup + (None, )\n        else:\n            result_tup = result_tup + (test_tup1[i] / test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        return tuple(x/y for x, y in zip(test_tup1, test_tup2))\n    except ZeroDivisionError:\n        return None"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should have the same length.\")\n        return None\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            print(\"Error: The second tuple element cannot be zero.\")\n            return None\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            result_tup += (float('nan'),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from functools import reduce\n\ndef division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # apply the division operator to the elements of the two tuples element-wise\n    return list(reduce(lambda x, y: (x[0] / y[0], x[1] / y[1]), zip(test_tup1, test_tup2), (1, 1)))"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts of length L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts where the length of the first part is L\n    first_part = list1[:L]\n    second_part = list1[L:]\n    # Return the two parts in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L <= 0:\n        raise ValueError(\"L must be a positive integer.\")\n    elif len(list1) <= L:\n        return (list1, [])\n    else:\n        return ([], list1[:L])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts where the length of the first part is L.\n\n    Args:\n        lst: A list to be split.\n        L: An integer representing the length of the first part.\n\n    Returns:\n        A tuple containing two lists, one representing the first part of the original list and one representing the second part.\n    \"\"\"\n    if L > len(lst):\n        raise ValueError(\"Length of first part cannot be greater than length of list.\")\n    return lst[:L], lst[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Split a list into two parts of length L, and return the resulting lists in a tuple.\n    '''\n    if len(lst) < 2*L:\n        raise ValueError(\"The length of the list must be at least twice the length of the split\")\n    half_len = len(lst) // 2\n    return lst[:half_len], lst[half_len:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        print(\"List is too short to split into two parts.\")\n        return\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L <= 0 or L > len(list1):\n        return None\n    \n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Split a list into two parts with the given length.\n\n    Args:\n        lst (list): List to be split.\n        L (int): Length of the first part of the list.\n\n    Returns:\n        tuple: A tuple containing two lists, one with length L and the other with the remaining elements of the original list.\n    '''\n    return lst[:L], lst[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Splitting the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7) * 12"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert h_age from hours to days\n    days = h_age / 24\n    \n    # calculate dog's age in dog's years\n    dog_years = days / 7\n    \n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_years = 7\n    years = 0\n    \n    while h_age >= dogs_years:\n        h_age -= dogs_years\n        years += 1\n        \n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7\n    return h_age * dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    Args:\n        h_age (float): Height in inches.\n\n    Returns:\n        float: Age in dog's years.\n    \"\"\"\n    dog_years = h_age * 0.3527777778\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 + (365.25 * (h_age - 1))\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize an empty list to store the resulting lists\n    result = []\n    \n    # loop through the list S using a for loop\n    for i in range(0, len(S), step):\n        # create a slice of S starting at index i and ending at index i+step (exclusive)\n        slice_S = S[i:i+step]\n        # add the slice to the result list\n        result.append(slice_S)\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not isinstance(S, list):\n        raise ValueError(\"Input must be a list\")\n    if step <= 0:\n        raise ValueError(\"Step must be a positive integer\")\n    if len(S) % step!= 0:\n        raise ValueError(\"Input list length must be a multiple of step\")\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    L = []\n    for i in range(len(S)):\n        if i % n == 0:\n            L.append(S[i:])\n    return L"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if step > len(S):\n        step = len(S)\n    # Create an empty list to store the resulting lists\n    result = []\n    # Loop through the list and split it every nth element\n    for i in range(0, len(S), step):\n        # Slice the list to get the nth element from i to i+step\n        chunk = S[i:i+step]\n        # Add the resulting list to the result list\n        result.append(chunk)\n    # Return the result list of lists\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l**2) - (12 * l) + 8"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2*6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):  # iterate over odd natural numbers starting from 1\n        sum_of_squares += i**2  # compute square of each odd number and add to sum\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n, 0, -2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i*i\n        i += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    # initialize a variable to store the sum of squares of odd natural numbers\n    odd_squares_sum = 0\n    # iterate through the first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of each odd number to the sum of squares of odd natural numbers\n        odd_squares_sum += i*i\n    # return the sum of squares of odd natural numbers\n    return odd_squares_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    # Initialize a counter variable to keep track of the odd numbers\n    count = 1\n    # Loop through the first n odd natural numbers\n    while count <= n:\n        # Calculate the square of the current odd number\n        square = count * count\n        # Add the square to the sum of squares\n        sum_of_squares += square\n        # Increment the counter variable\n        count += 2\n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_squares = 0\n    for i in range(1, n+1, 2):\n        odd_squares += i*i\n    return odd_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 0:\n        return \"Invalid Input\"\n    else:\n        sum_of_squares = 0\n        num = 1\n        while num <= n:\n            sum_of_squares += num*num\n            num += 2\n        return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    \"\"\"\n    This function takes a positive integer n as input and returns then'th star number.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result = result * i\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Base case: if n is 1 or 0, return 1\n    if n == 1 or n == 0: \n        return 1\n    \n    # Recursive case: calculate the nth star number by adding the (n-1)th and (n-2)th star numbers\n    return find_star_num(n-1) + find_star_num(n-2)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    This function takes an integer n as input and returns then'th star number.\n    '''\n    # initialize the variable to store the result \n    result = \"\"\n    # loop from 1 to n \n    for i in range(1, n+1):\n        # add a star to the result string for each iteration \n        result += \"*\"\n    # return the result \n    return result "
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    num = 1\n    total_stars = 0\n    \n    # loop through the number of stars\n    for i in range(1, n+1):\n        # print the current star\n        print('*', end='')\n        # increment the total number of stars\n        total_stars += 1\n        \n        # add a space between stars if not last star\n        if i < n:\n            print(' ', end='')\n        \n        # check if it is a new line\n        if i % 10 == 0:\n            # print a new line after every 10 stars\n            print()\n    \n    # print the total number of stars\n    print('Total number of stars:', total_stars)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    num = 1\n    result = 0\n    \n    # Iterate through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Multiply the current number with the result\n        result = result * num\n        \n        # Update the current number\n        num = num + 1\n    \n    # Return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the variables\n    start = 1\n    end = 7\n    star_num = []\n\n    # Iterate through the range of numbers from 1 to 7\n    for i in range(1, end + 1):\n        # Add the current number to the star_num list\n        star_num.append(i)\n\n    # Get then'th number in the star_num list\n    result = star_num[n - 1]\n\n    # Return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    # Initialize an empty list to store the star numbers\n    star_num = []\n\n    # Loop n times to generate the star numbers\n    for i in range(1, n+1):\n        # Use a loop to generate each digit of the number\n        for j in range(1, i+1):\n            # Add a star to the list of digits of the number\n            star_num.append(\"*\")\n        # Add a newline character to separate each row of stars\n        star_num.append(\"\\n\")\n\n    # Join the list of digits of the number into a single string\n    star_str = \"\".join(star_num)\n\n    # Remove the last newline character added to separate each row of stars\n    star_str = star_str[:-1]\n\n    # Return then'th star number\n    return star_str"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 0:\n        return \"1\"\n    elif n == 1:\n        return \"*****\"\n    else:\n        return find_star_num(n-1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    result = \"\"\n    for i in range(1, n+1):\n        result += \"*\" * (n//i) + \"\\n\"\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return '*'\n    else:\n        return find_star_num(n-1) + '*'"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, str):\n        return ord(k)\n    else:\n        return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    print(f\"The ascii value of '{k}' is: {ascii_value}\")"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) == str:\n        return ord(k)\n    else:\n        return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {\n        'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,\n       'm': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122,\n        'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80, 'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90,\n        '0': 48, '1': 49, '2': 50, '3': 51, '4': 52, '5': 53, '6': 54, '7': 55, '8': 56, '9': 57\n    }\n    return ascii_dict.get(k, None)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index.append(i)\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = -1\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n            \n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    total_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            total_sum += arr[i]\n    return total_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    # Initialize sum to 0\n    sum_even = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n\n        # Check if the number at the current index is even\n        if arr[i] % 2 == 0:\n\n            # Check if the index is even\n            if i % 2 == 0:\n\n                # Add the number to the sum\n                sum_even += arr[i]\n\n    # Return the sum\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_power_sum = 0\n    for i in range(n):\n        even_power_sum += i * i * i * i * i\n    return even_power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n): \n        if i**5 % 2 == 0: \n            sum += i**5 \n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i ** 5\n    \n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, 2**n, 2):\n        sum += i ** 5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # initialize sum to zero\n    even_power_sum = 0\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the result to the sum\n        even_power_sum += i**5\n    # return the sum\n    return even_power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes an integer n and calculates the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # Initialize a variable to store the sum of the even numbers raised to the fifth power\n    power_sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Add the current number to the power_sum if it is even\n        if i % 2 == 0:\n            power_sum += i ** 5\n\n    # Return the final power_sum\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_list)):\n        rear_elements.append(test_list[i][-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should have the same length.\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        print(result_tup)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # If the elements are equal, subtract them and store the result in the new tuple\n        if test_tup1[i] == test_tup2[i]:\n            test_tup1[i] = test_tup1[i] - test_tup2[i]\n        # If the elements are not equal, skip the iteration and move to the next index\n        else:\n            pass\n    # Return the new tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # iterate through the first tuple\n    for i in range(len(test_tup1)):\n        # check if the index is present in the second tuple\n        if i < len(test_tup2):\n            # subtract the element of the first tuple by the element of the second tuple with the same index\n            result.append(test_tup1[i] - test_tup2[i])\n        else:\n            # add a 0 to the result list if the index is not present in the second tuple\n            result.append(0)\n    # return the result list\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # subtract the two tuples and store the result in a new tuple\n        new_tup = (test_tup1[i] - test_tup2[i])\n        # print the result and the original values\n        print(f\"Result: {new_tup} - Original values: {test_tup1[i]} and {test_tup2[i]}\")"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # initialize the sum of even index binomial coefficients to 0\n    sum_even_binomial_coeffs = 0\n\n    # loop through the even indices\n    for i in range(0, n+1, 2):\n        # calculate the binomial coefficient of i and n-i\n        binomial_coeff = math.comb(n, i)\n\n        # add the even index binomial coefficient to the sum\n        sum_even_binomial_coeffs += binomial_coeff\n\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum of even index binomial coefficients to 0\n    sum_even_binomial_coeffs = 0\n    \n    # Calculate the sum of even index binomial coefficients using the formula for n choose 2\n    # where n is the given positive integer n\n    for i in range(2, n+1, 2):\n        sum_even_binomial_coeffs += math.comb(n, i)\n        \n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of the even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if j % 2 == 0 and i % 2!= 0:\n                sum += math.comb(n, j)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize variables\n    total_sum = 0\n    even_index = 0\n    # Loop through all numbers from 0 to n\n    for i in range(n+1):\n        # Calculate the binomial coefficient for even_index and i\n        coefficient = math.comb(n, even_index) * math.comb(i, even_index)\n        # If the index is even, add the coefficient to total_sum\n        if even_index % 2 == 0:\n            total_sum += coefficient\n        # Increment even_index\n        even_index += 1\n    return total_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    even_sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_sum += math.factorial(2 * i - 1) // (math.factorial(i - 1) * math.factorial(2 * i - 2))\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math  \n  \ndef even_binomial_Coeff_Sum( n):  \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    i = 0  \n    while i <= n:\n        coeff_sum += math.comb(n, 2*i)\n        i += 2\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n\n    # Iterate through all even index values up to n\n    for i in range(0, n+1, 2):\n        # Calculate the binomial coefficient for this value\n        coeff = math.factorial(n) // math.factorial(i) // math.factorial(n-i)\n\n        # If the coefficient is even, add it to the sum\n        if coeff % 2 == 0:\n            sum += coeff\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize sum and count to 0\n    sum_even = 0\n    count = 0\n    \n    # Calculate the binomial coefficient using formula: binomial(n,k) = (n!) / (k!(n-k)!)\n    for i in range(1, n+1):\n        count += 1\n        if i % 2 == 0:\n            sum_even += math.factorial(i) // (math.factorial(i//2) * math.factorial(n-i//2))\n    \n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    # Initialize a variable to store the sum of even binomial coefficients\n    even_sum = 0\n\n    # Calculate the even binomial coefficients\n    for i in range(2, n+1):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            even_sum += coeff\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize variables\n    even_sum = 0\n    odd_sum = 0\n\n    # Loop through all indices from 0 to n\n    for i in range(n+1):\n        # If i is even, add its binomial coefficient to even_sum\n        if i % 2 == 0:\n            even_sum += math.comb(n, i)\n        # If i is odd, add its binomial coefficient to odd_sum\n        else:\n            odd_sum += math.comb(n, i)\n\n    # Return the sum of even_sum and odd_sum\n    return even_sum + odd_sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    V = 3.14159 * (r ** 2) * h  # formula to find the volume of a cylinder\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    '''\n    volume = (1/3) * (3.14 * r ** 2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    '''\n    volume = (1/3) * 3.14159 * r * r * h  # Formula for the volume of a cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r**2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * 3.14159 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 2*3.14159*(r**2)\n    volume = area*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * (r**2) * h"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n            if count > 1:\n                return count\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1 and test_tup[i] == test_tup[i + 1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i] == test_tup[i-1]:\n                count += 1\n            else:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n            break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif i == 1:\n            if test_tup[i] < test_tup[i-1]:\n                count += 1\n            else:\n                continue\n        else:\n            if test_tup[i] > test_tup[i-1]:\n                count += 1\n            else:\n                continue\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup)-1:\n            if test_tup[i]!= test_tup[i+1]:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        else:\n            count += 1\n            if test_tup[i] == test_tup[i-1]:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1] == test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            count += 1\n        elif test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    for i in range(1, n+1):\n        decagonal_num += (i * (2*i-1))\n    return decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        num += i*i\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables for counting number of decagonal numbers\n    num_decagonal = 0\n    # Initialize variable for the sum of decagonal numbers\n    sum_decagonal = 0\n    # Initialize variable for the current number\n    current_num = 1\n    # Loop through numbers 1 through n\n    for i in range(1, n+1):\n        # If the current number is odd, add it to the sum_decagonal variable\n        if i % 2!= 0:\n            sum_decagonal += current_num\n        # Increase the number of decagonal numbers\n        num_decagonal += 1\n        # Calculate the next number\n        current_num = (4*i*i - 6*i + 1)/2\n    # Check if the sum of decagonal numbers equals n\n    if sum_decagonal == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize variables\n    decagonal = 1\n    index = 1\n\n    # loop through the decagonal numbers\n    while index <= n:\n        # add the decagonal number to the total sum\n        decagonal += index\n\n        # increment the index and continue looping\n        index += 2\n\n    # return the nth decagonal number\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_number = 0\n    row = 1\n\n    for i in range(n):\n        decagonal_number += row\n        row += 2\n\n    return decagonal_number\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return \"Invalid input. Please enter an odd number.\"\n    else:\n        decagonal_sum = 0\n        for i in range(1, n+1):\n            decagonal_sum += i * (2*n-i)\n        return decagonal_sum\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * is_num_decagonal(n-1) - 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = 0\n    # Loop from 1 to n\n    for i in range(1, n+1):\n        # Calculate the decagonal number\n        decagonal = (i*i*5) // 2\n        # Check if the decagonal number is divisible by n\n        if decagonal % n == 0:\n            return True\n    # If no decagonal number is found, return False\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def decagonal(n): \n        # Check for base case\n        if n == 0:\n            return 0\n        # Calculate the first n terms of the sequence\n        term = 1\n        while term <= n:\n            yield term\n            term += 2\n    # Find the nth term of the sequence\n    for i, term in enumerate(decagonal(n)):\n        if i == n - 1:\n            return term"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = 1\n    b = 1\n    while n >= 1:\n        c = a + b\n        if n == c:\n            return a\n        a = b\n        b = c\n        n -= 1\n    return None\n\nn = int(input(\"Enter the value of n: \"))\nresult = is_num_decagonal(n)\nif result:\n    print(\"The\", n, \"th decagonal number is:\", result)\nelse:\n    print(\"Invalid input\")"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # Create a set to store unique elements from the list\n    unique_set = set(test_list)\n\n    # Check if the length of the unique set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    return len(unique_list) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Convert the list to set to remove duplicates\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the original list\n    return len(unique_set) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all its elements are unique,\n    and False otherwise.\n    \"\"\"\n    test_set = set(test_list)\n    if len(test_list) == len(test_set):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    set_test_list = set(test_list)\n    if len(set_test_list) == len(test_list):\n        print(\"The elements of the list are unique.\")\n    else:\n        print(\"The elements of the list are not unique.\")"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    This function checks if all elements in a given list are unique or not.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n\n    # Check if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if all elements of a list are unique.\n    \"\"\"\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the two lists are the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must be of the same length.')\n    # create an empty list to store the result\n    result = []\n    # loop through each element in the lists\n    for i in range(len(nums1)):\n        # subtract the corresponding elements and append the result to the result list\n        result.append(nums1[i] - nums2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists should have the same length.\")\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and subtracts their elements element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the lengths of the lists are equal\n    if len(nums1)!= len(nums2):\n        return \"Lists must have the same length.\"\n    # Initialize a new list to store the result\n    result = []\n    # Loop through the lists and subtract each element\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    # Return the resulting list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length')\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    # Define a dictionary to store the frequency of each digit\n    freq = {str(i): 0 for i in range(10)}\n\n    # Count the frequency of each digit in the integer\n    for digit in str(n):\n        freq[digit] += 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > n:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10 # initialize frequency list\n    \n    # count frequency of each digit in the integer\n    for i in str(n):\n        freq[int(i)] += 1\n        \n    # check whether the frequency of each digit in the integer is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > n:\n            return False\n        \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # create a dictionary to store the frequency of each digit in the integer\n    freq_dict = {}\n    # iterate over the digits in the integer\n    for digit in str(n):\n        # check if the digit is already in the dictionary\n        if digit in freq_dict:\n            # increment the count of the digit in the dictionary\n            freq_dict[digit] += 1\n        else:\n            # add the digit to the dictionary with a count of 1\n            freq_dict[digit] = 1\n    # iterate over the digits in the integer again and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in str(n):\n        if freq_dict[digit] > int(digit):\n            return False\n    # if all digits pass the check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    # convert the number into a list of digits\n    digits = list(map(int, str(n)))\n    # calculate the frequency of each digit in the number\n    freq = [0]*10 # initialize a list of size 10 with all zeros\n    \n    for digit in digits:\n        freq[digit] += 1\n    \n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if digit > 0 and digit > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # initialize the frequency dictionary\n    freq = {}\n\n    # count the frequency of each digit in the integer\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # check whether the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    This function takes an integer as input and returns True if the frequency of each digit in the integer is less than or equal to the digit itself, and False otherwise.\n    '''\n    count = [0] * 10  # creating a list of length 10 to store the count of each digit\n    \n    # iterating through each digit of the integer\n    for digit in str(n):\n        # incrementing the count of the current digit\n        count[int(digit)] += 1\n        \n        # checking if the frequency of the current digit is greater than or equal to the digit itself\n        if count[int(digit)] > int(digit):\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    # Convert the integer to a string to access each character in turn\n    str_n = str(n)\n    for digit in str_n:\n        # Check if the frequency of the digit is greater than the digit itself\n        if len(str_n.count(digit)) > 1:\n            return False\n    # If all digits have frequency less than or equal to themselves, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    # Convert integer to string\n    n_str = str(n)\n    \n    # Count the frequency of each digit\n    freq = [0] * 10\n    for digit in n_str:\n        freq[int(digit)] += 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if digit > n_str.count(str(digit)):\n            return False\n    \n    # If all digits have a valid frequency, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    # create a dictionary to store the frequency of each digit\n    freq = {}\n\n    # iterate over the digits of n\n    for d in str(n):\n        # check if the digit is already in the dictionary\n        if d in freq:\n            # if it is, increment its frequency\n            freq[d] += 1\n        else:\n            # if not, add it to the dictionary with a frequency of 1\n            freq[d] = 1\n\n    # iterate over the frequency dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for d, f in freq.items():\n        if f > d:\n            return False\n\n    # if no digits exceed the frequency of their digits, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes an integer as input and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n\n    # convert the integer to a string to make it easy to iterate over its digits\n    n = str(n)\n\n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # iterate over each digit in the string and update the frequency dictionary\n    for digit in n:\n        freq[digit] = freq.get(digit, 0) + 1\n\n    # iterate over the frequency dictionary to check if the frequency of each digit is less than or equal to its value\n    for digit, freq_digit in freq.items():\n        if freq_digit > digit:\n            return False\n\n    # if no errors are found, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    \n    if list[0]!= element:\n        return False\n    \n    for i in range(1, len(list)):\n        if list[i]!= element:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(lst) == 1:\n        return lst[0] == element\n    for i in range(len(lst)):\n        if lst[i]!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(item == element for item in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(list[i] == element for i in range(len(list))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list and an element and returns True if all elements in the list are equal to the given element, False otherwise.\n    '''\n    for item in lst:\n        if item!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[b]{2,3}')\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(a)\\1{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'\\b[ab]{2,3}\\b')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b){2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    \n    if match:\n        print(f\"Found the pattern: {text[match.start():match.end()]}\")\n    else:\n        print(\"Pattern not found in the text.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"a.*?(b{2,3})\"\n    matches = re.findall(pattern, text)\n    return bool(matches)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Find the maximum subarray sum of the first n elements of the array\n    max_sum = max(a[:n])\n    \n    # Find the maximum subarray sum of the first k elements of the array\n    max_subarray_sum_first_k = max(a[:k])\n    \n    # Find the maximum subarray sum of the rest of the array\n    max_subarray_sum_rest = max(a[n:])\n    \n    # Calculate the sum of the first n elements of the array\n    sum_first_n = sum(a[:n])\n    \n    # Calculate the sum of the first k elements of the array\n    sum_first_k = sum(a[:k])\n    \n    # Calculate the sum of the rest of the array\n    sum_rest = sum(a[n:])\n    \n    # Calculate the maximum sum of the modified array formed by repeating the given array k times\n    max_sum_modified = max(max_sum, max_subarray_sum_first_k, max_subarray_sum_rest)\n    \n    # Calculate the sum of the modified array formed by repeating the given array k times\n    sum_modified = max_sum_modified * k\n    \n    # Return the maximum sum of the modified array formed by repeating the given array k times\n    return max_sum_modified"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(k):\n        modified_array = a * (i+1)\n        current_sum = sum(modified_array)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n    end_index = 0\n\n    for i in range(k):\n        current_sum = max(0, a[0])\n        for j in range(1, n):\n            current_sum = max(current_sum + a[j], a[j])\n        max_sum = max(max_sum, current_sum)\n        start_index = i + 1\n        end_index = i + n\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the first n elements of the array\n    sum_first_n = sum(a[:n])\n\n    # Calculate the sum of the first k elements of the array\n    sum_first_k = sum(a[:k])\n\n    # Calculate the sum of the modified array\n    sum_modified = sum_first_k + k * sum_first_n\n\n    # Initialize the maximum sum and the maximum sum with a prefix sum of the modified array\n    max_sum = max(sum_modified, sum_modified - sum_first_n)\n    max_sum_with_prefix_sum = max_sum\n\n    # Iterate over the remaining elements of the array\n    for i in range(n, len(a)):\n        # Calculate the sum of the current element and the prefix sum of the modified array\n        sum_current_element = a[i] + sum_modified\n\n        # Check if the current sum is larger than the maximum sum\n        if sum_current_element > max_sum:\n            # If it is, update the maximum sum with the current sum and the prefix sum of the modified array\n            max_sum = sum_current_element\n            max_sum_with_prefix_sum = max_sum + i - k\n\n        # Check if the current sum is larger than the maximum sum with a prefix sum of the modified array\n        if sum_current_element > max_sum_with_prefix_sum:\n            # If it is, update the maximum sum with the current sum\n            max_sum_with_prefix_sum = sum_current_element\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_arr = a * k\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(n-k+1):\n        current_sum = sum(mod_arr[i:i+k])\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    total_sum = 0\n\n    # Iterate through the array\n    for i in range(k):\n        # Repeat the array k times\n        for j in range(n):\n            total_sum += a[j]\n\n        # Update the maximum sum if the current sum is greater\n        if total_sum > max_sum:\n            max_sum = total_sum\n\n        # Reset the total sum for the next iteration\n        total_sum = 0\n\n    # Return the maximum sum of the array\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize the result variable to the maximum integer value\n    result = float('-inf')\n\n    # Iterate over the first k elements of the array\n    for i in range(k):\n        # Compute the sum of the first k elements\n        partial_sum = a[0]\n        for j in range(1, n):\n            partial_sum += a[j]\n\n        # Update the result if the partial sum is greater than the result so far\n        if partial_sum > result:\n            result = partial_sum\n\n    # Initialize the sum of the first k elements to the maximum integer value\n    sum_of_first_k = float('-inf')\n    for i in range(k):\n        sum_of_first_k += a[i]\n\n    # Compute the largest sum of the first k elements\n    largest_sum_of_first_k = max(sum_of_first_k, result)\n\n    # Compute the sum of the modified array\n    sum_of_modified_array = sum_of_first_k + k * (sum(a) - sum_of_first_k)\n\n    # Return the largest sum of the first k elements and the modified array\n    return largest_sum_of_first_k, sum_of_modified_array"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Loop through the array\n    for i in range(k):\n        current_sum += a[0]\n        max_sum = max(max_sum, current_sum)\n        a = a[1:]\n    \n    # Add the remaining elements of the array to the current sum\n    for i in range(n-k):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    max_sum = float('-inf')\n    modified_array = [x for x in a]\n    for i in range(k):\n        modified_array.extend(a)\n    modified_array = modified_array[:n]\n    modified_array.extend(a)\n    for i in range(n):\n        for j in range(i + 1, n):\n            sub_array = modified_array[i:j+1]\n            if sub_array:\n                current_sum = sum(sub_array)\n                max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the maximum sum of any subarray that can be formed without repeating\n    max_sum = max(a)\n    \n    # Repeat the given array k times\n    for i in range(k):\n        # Find the maximum sum of any subarray that can be formed without repeating and repeating the same element k times\n        temp_sum = max_sum + a[0] + a[0]\n        for j in range(1, n-1):\n            temp_sum += a[j]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    \n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count**2\n        count += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # Initialize sum to 0\n    sum_of_squares = 0\n\n    # Loop through even natural numbers and add their squares to sum_of_squares\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n\n    # Return sum_of_squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum_of_squares += count**2\n        count += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    \n    # Initialize a variable sum to 0\n    sum = 0\n    \n    # Iterate n times\n    for i in range(n):\n        \n        # Calculate the square of the current even natural number and add it to the sum\n        sum += i*i*2\n        \n    # Return the sum\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(n):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**2\n    return total"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        if len(lst) > len(max_lengths):\n            max_lengths = lst\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for item in list1:\n        if len(item) > len(max_length_list):\n            max_length_list = item\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function takes a list of lists as input and returns a list of lists containing\n    the maximum length of each list in the input list.\n\n    Parameters:\n    list1 (list): A list of lists.\n\n    Returns:\n    list: A list of lists, where each inner list contains the maximum length of a list in\n    the input list.\n    \"\"\"\n\n    # Initialize an empty list to store the maximum length of each list in the input list.\n    max_lengths = []\n\n    # Loop over each list in the input list.\n    for lst in list1:\n\n        # Initialize a variable to store the current maximum length of the current list.\n        current_max_length = 0\n\n        # Loop over each element of the current list.\n        for element in lst:\n\n            # If the length of the current element is greater than the current maximum length,\n            # update the maximum length.\n            if len(str(element)) > current_max_length:\n                current_max_length = len(str(element))\n\n        # Add the current maximum length to the list of maximum lengths.\n        max_lengths.append(current_max_length)\n\n    # Return the list of maximum lengths.\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list) or max_list == []:\n            max_list = i\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length_list = []\n    for sublist in list1:\n        length_list.append(len(sublist))\n    return max(length_list)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        max_lengths.append(max(len(x) for x in lst))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return [i for i in range(max_length)]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_lengths.append(max([len(item) for item in sublist]))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths):\n            max_lengths = [len(sublist)]\n        elif len(sublist) == max(max_lengths):\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    # base cases\n    if n <= 0:\n        return 0\n    if n == 1:\n        return k\n\n    # array to store the count of ways for each number of adjacent same-color posts\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = k\n\n    # fill the array using dynamic programming\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 2] + k - dp[i - 1]\n\n    return dp[n]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    if n < 2 or k < 2:\n        return 0\n\n    # create a 2D array to store the count of ways for each combination of colors\n    count = [[0] * (n + 1) for _ in range(k + 1)]\n\n    # base case: if n is 1 or k is 1, there is only one way to paint the fence\n    count[1][1] = 1\n\n    # fill the count array using dynamic programming\n    for i in range(2, k + 1):\n        for j in range(2, n + 1):\n            count[i][j] = count[i - 1][j - 1] + count[i][j - 1]\n\n    return count[k][n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a list to store the number of ways for each color\n    ways = [0] * k\n\n    # Base case: if there is only one color, there is only one way\n    if k == 1:\n        ways[0] = 1\n        return ways[0]\n\n    # Base case: if there are no more colors to consider, there are 0 ways\n    if n == 0:\n        return 0\n\n    # If there are at least two colors, consider the first color\n    ways[0] = 1\n\n    # If there are at least three colors, consider the second color\n    if n > 1:\n        ways[1] = 1\n\n    # If there are at least four colors, consider the third color\n    if n > 2:\n        ways[2] = count_no_of_ways(n-3, k-1)\n\n    # If there are at least six colors, consider the fourth color\n    if n > 4:\n        ways[3] = count_no_of_ways(n-4, k-2)\n\n    # If there are at least eight colors, consider the fifth color\n    if n > 6:\n        ways[4] = count_no_of_ways(n-5, k-3)\n\n    # If there are at least ten colors, consider the sixth color\n    if n > 8:\n        ways[5] = count_no_of_ways(n-6, k-4)\n\n    # If there are at least twelve colors, consider the seventh color\n    if n > 10:\n        ways[6] = count_no_of_ways(n-7, k-5)\n\n    # If there are at least twenty colors, consider the eighth color\n    if n > 12:\n        ways[7] = count_no_of_ways(n-8, k-6)\n\n    # If there are at least thirty-two colors, consider the ninth color\n    if n > 14:\n        ways[8] = count_no_of_ways(n-9, k-7)\n\n    # If there are at least forty-eight colors, consider the tenth color\n    if n > 16:\n        ways[9] = count_no_of_ways(n-10, k-8)\n\n    # If there are at least eighteen colors, consider the eleventh color\n    if n > 18:\n        ways[10] = count_no_of_ways(n-11, k-9)\n\n    # If there are at least thirty-six colors, consider the twelfth color\n    if n > 20:\n        ways[11] = count_no_of_ways(n-12, k-10)\n\n    # If there are at least forty-two colors, consider the thirteenth color\n    if n > 22:\n        ways[12] = count_no_of_ways(n-13, k-11)\n\n    # If there are at least sixty-four colors, consider the fourteenth color\n    if n > 24:\n        ways[13] = count_no_of_ways(n-14, k-12)\n\n    # If there are at least seventy-two colors, consider the fifteenth color\n    if n > 26:\n        ways[14] = count_no_of_ways(n-15, k-13)\n\n    # If there are at least eighty-eight colors, consider the sixteenth color\n    if n > 28:\n        ways[15] = count_no_of_ways(n-16, k-14)\n\n    # If there are at least ninety-two colors, consider the seventeenth color\n    if n > 30:\n        ways[16] = count_no_of_ways(n-17, k-15)\n\n    # Return the total number of ways for all colors\n    total_ways = 1\n    for i in range(k):\n        total_ways *= ways[i]\n    return total_ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            if j == 0 or j == k:\n                dp[i] += dp[i - j]\n            elif i >= 2 and dp[i - 2]!= 0 and dp[i - 1]!= 0:\n                dp[i] += dp[i - 2]\n\n    return dp[-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    def count_no_of_ways_helper(n, k, colors, used_colors):\n        if n == 0 and len(used_colors) == k:\n            return 1\n        if n < 0 or len(used_colors) > k:\n            return 0\n        \n        total_ways = 0\n        for color in colors:\n            if color not in used_colors:\n                new_colors = used_colors.copy()\n                new_colors.append(color)\n                total_ways += count_no_of_ways_helper(n - 1, k, colors, new_colors)\n                \n        return total_ways\n\n    colors = list(range(1, k+1))\n    total_ways = count_no_of_ways_helper(n, k, colors, [])\n    return total_ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a 2D array to store the number of ways of painting the fence with different colors\n    # The outer array represents the number of posts in the fence\n    # The inner array represents the number of colors in the fence\n    ways = [[[0] * (k+1) for j in range(2)] for i in range(n+1)]\n\n    # Initialize the first row and column of the 2D array\n    for i in range(n+1):\n        ways[i][0][0] = 1\n        ways[i][0][k] = 0\n\n    # Fill in the remaining cells of the 2D array using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            ways[i][j][0] = ways[i-1][j][0]\n            ways[i][j][j] = ways[i][j-1][0]\n            for l in range(1, j):\n                ways[i][j][l] = ways[i][j][l-1] + ways[i-1][j][l] + ways[i][j-1][l] + ways[i][j][l-1]\n\n    # Return the value in the bottom-right corner of the 2D array, which represents the number of ways of painting the fence with k colors\n    return ways[n][k][0]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a list of lists to store the count of ways for each color\n    count = [[0] * (n + 1) for _ in range(k + 1)]\n\n    # Initialize the count of ways for k = 1 and n = 1\n    count[1][1] = 1\n\n    # Iterate through the remaining colors k from 2 to k\n    for color in range(2, k + 1):\n        # Iterate through the remaining number of posts n from 1 to n\n        for num in range(1, n + 1):\n            # If there are at most 2 adjacent posts of the same color,\n            # then the count is the sum of the count of ways for the colors on\n            # either side of the adjacent posts\n            if num <= 2:\n                count[color][num] = sum(count[color - 1][i] for i in range(num + 1))\n            # If there are at most 1 adjacent post of the same color,\n            # then the count is the sum of the count of ways for the colors on\n            # either side of the adjacent post\n            else:\n                count[color][num] = sum(count[color - 1][i] for i in range(1, num))\n\n    # Return the count of ways for the fence with n posts and k colors\n    return count[k][n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n\n    # Initialize a 2D array to store the number of ways for each possible configuration\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Base case: if there are no colors or one color, there is only one way\n    for i in range(n + 1):\n        dp[i][1] = 1\n\n    # Fill the rest of the array\n    for i in range(2, n + 1):\n        for j in range(2, k + 1):\n            if i == 2:\n                # For fences with only 2 posts, there is only one way to paint the fence\n                dp[i][j] = 1\n            else:\n                # For fences with more than 2 posts, there is a way to paint the fence if the color of the first post is different from the color of the second post\n                dp[i][j] = dp[i - 1][j] + dp[i - 2][j - 1]\n\n    # Return the number of ways to paint the fence\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    def count_ways(n, k, curr_color):\n        if n == 0:\n            return 1\n        ways = 0\n        for i in range(k):\n            if i!= curr_color:\n                ways += count_ways(n-1, k, i)\n        return ways\n\n    ways = count_ways(n, k, 0)\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * k for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(k):\n            if i == 0 or j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (i == 0 or j == 0) + dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n\n    return dp[n - 1][k - 1]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Error: division by zero\"\n    else:\n        return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Calculate the quotient of two numbers, rounding down to the nearest integer.\n\n    Parameters:\n    n (int): The first number.\n    m (int): The second number.\n\n    Returns:\n    int: The quotient of n and m, rounded down to the nearest integer.\n\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    if m == 0:\n        return n\n    else:\n        return find(n % m, m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n\n    if m == 0:\n        return None\n    else:\n        return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n    Parameters:\n    n: int\n        First number.\n    m: int\n        Second number.\n\n    Returns:\n    int\n        Quotient of n/m rounded down to the nearest integer.\n    \"\"\"\n    result = n // m\n    return result"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return int(n / m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w ** 2 + h ** 2) ** 0.5\n    a = math.sqrt(w ** 2 + h ** 2)\n    c = (w * h) / a\n    return c\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    return a"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    This function takes in the lengths of the other two sides of a right angled triangle and returns the third side.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter\n    s = (w + h) / 2\n    # Calculate the area of the triangle\n    a = math.sqrt(s * (s - w) * (s - h))\n    # Calculate the angle of the right triangle\n    angle = math.degrees(math.acos((w * h) / (2 * s)))\n    # Calculate the third side of the triangle\n    third_side = a * math.sin(math.radians(angle))\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    area = 0.5 * w * h\n    return s - area"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    \n    # calculate the area of the triangle\n    A = math.sqrt(s * (s - w) * (s - h))\n    \n    # calculate the third side\n    b = math.sqrt(A * h)\n    \n    # return the value of b\n    return b"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Formula to find the third side of a right angled triangle\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w ** 2 + h ** 2)\n    return c"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for item in listval:\n            if type(item)!= type(max_val):\n                max_val = max(max_val, item)\n            elif item > max_val:\n                max_val = item\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if type(listval[i])!= type(max_val):\n                return None\n            else:\n                if listval[i] > max_val:\n                    max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list as input and returns the maximum value in the list.\n    '''\n    max_num = None\n    for val in listval:\n        if max_num is None or val > max_num:\n            max_num = val\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if max_val < listval[i]:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    \n    max_val = listval[0]\n    for item in listval:\n        if type(item) > type(max_val):\n            max_val = item\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        print(\"Error: List is empty.\")\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval[1:]:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize a sum variable\n    sum_div = 0\n\n    # Loop through all numbers from 1 to the square root of the input number\n    for i in range(1, int(number ** 0.5) + 1):\n        # If the input number is divisible by i, add i to the sum\n        if number % i == 0:\n            sum_div += i\n\n    # Return the sum of all divisors\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # initialize sum to 0\n    total_sum = 0\n\n    # loop through all numbers from 1 to number\n    for i in range(1, number + 1):\n\n        # check if number is divisible by i\n        if number % i == 0:\n\n            # add i to total_sum\n            total_sum += i\n\n    # return total_sum\n    return total_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = [i for i in range(1, number+1) if number % i == 0]\n    return sum(div)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divs.append(i)\n    return sum(divs)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Iterate through the sorted array and count inversions\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j - i)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the count variable\n    count = 0\n    # Iterate through the array elements\n    for i in range(1, n):\n        # Calculate the inversion count for the current element and all previous elements\n        count += (i - 1) * ((n - i) // 2)\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Initialize two pointers to the start of the array\n    i, j = 0, len(arr) - 1\n    # Initialize the count of inversions to 0\n    inv_count = 0\n    # Loop until the pointers meet in the middle of the array\n    while i < j:\n        # Find the pivot element from the left side of the array\n        pivot_index = partition(arr, i, j)\n        # Count the number of inversions between the left and right partitions\n        inv_count += pivot_index - i + 1\n        # If the pivot is on the right side of the array, move the left pointer to the right\n        if pivot_index == j:\n            j -= 1\n        # If the pivot is on the left side of the array, move the right pointer to the left\n        else:\n            i += 1\n    # Return the count of inversions\n    return inv_count\n\n\ndef partition(arr, i, j):\n    '''\n    Partition the array around a pivot element and return the index of the pivot.\n    '''\n    # Initialize the pivot element to the middle element of the array\n    pivot = arr[i]\n    # Create two pointers, one at the left end of the array and one at the right end of the array\n    left = i + 1\n    right = j\n    # Loop until the left pointer is greater than or equal to the right pointer\n    while left <= right:\n        # If the left element is less than the pivot, increment the left pointer\n        if arr[left] < pivot:\n            left += 1\n        # If the right element is greater than or equal to the pivot, decrement the right pointer\n        elif arr[right] >= pivot:\n            right -= 1\n        # If the left element is equal to the pivot, swap it with the right element\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n    # Swap the pivot element with the element at the right pointer\n    arr[i], arr[right] = arr[right], arr[i]\n    # Return the index of the pivot element\n    return right"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        left = i\n        right = n - 1\n\n        while left < right:\n            # Find the partition index\n            mid = (left + right) // 2\n\n            # If the element at the partition index is greater than the pivot element,\n            # then increment the left pointer and decrement the right pointer\n            if arr[mid] > arr[i]:\n                inv_count += right - mid\n                right = mid\n            else:\n                left = mid + 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    count = 0 \n  \n    # Sort the array \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                count += n - j \n                arr[i], arr[j] = arr[j], arr[i] \n  \n    return count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        left = 0\n        right = i\n        \n        # Sort the left side of the array\n        while left < right:\n            if arr[left] > arr[right]:\n                arr[left], arr[right] = arr[right], arr[left]\n                left += 1\n                right -= 1\n            else:\n                left += 1\n        \n        # Count the inversions in the left side of the array\n        inv_count += i - left\n        \n        # Sort the right side of the array\n        left = i\n        right = n - 1\n        \n        while left < right:\n            if arr[left] > arr[right]:\n                arr[left], arr[right] = arr[right], arr[left]\n                left += 1\n                right -= 1\n            else:\n                right -= 1\n        \n        # Count the inversions in the right side of the array\n        inv_count += right - i + 1\n        \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as an input and returns the number of inversions in the array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    else:\n        mid = n // 2\n        inv1 = get_Inv_Count(arr[:mid])\n        inv2 = get_Inv_Count(arr[mid:])\n        return merge_Inv_Count(arr[:mid], arr[mid:], inv1, inv2)\n\n\ndef merge_Inv_Count(arr1, arr2, inv1, inv2):\n    '''\n    This function merges the two sorted arrays and calculates the number of inversions in it.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    i = j = k = 0\n    inv = 0\n    while i < n1 and j < n2:\n        if arr1[i] <= arr2[j]:\n            arr1[k] = arr1[i]\n            i += 1\n            k += 1\n        else:\n            arr1[k] = arr2[j]\n            j += 1\n            k += 1\n            inv += n1 - i\n    while i < n1:\n        arr1[k] = arr1[i]\n        i += 1\n        k += 1\n    while j < n2:\n        arr1[k] = arr2[j]\n        j += 1\n        k += 1\n    return inv"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)  # length of the array\n\n    # function to count inversions\n    def count_inversions(arr, low, high):\n        if low >= high:\n            return 0\n\n        # find the pivot element and partition the array around it\n        pivot_index = partition(arr, low, high)\n\n        # count inversions in left subarray and right subarray\n        left_inv = count_inversions(arr, low, pivot_index - 1)\n        right_inv = count_inversions(arr, pivot_index + 1, high)\n\n        # count inversions in the entire array using quicksort\n        inv_count = quicksort(arr, low, pivot_index) + quicksort(arr, pivot_index + 1, high)\n\n        return left_inv + right_inv + inv_count\n\n    # function to partition the array around a pivot element\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n\n        arr[i + 1], arr[high] = arr[high], arr[i + 1]\n        return i + 1\n\n    # count inversions using the function above\n    inv_count = count_inversions(arr, 0, n - 1)\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # Helper function to merge two sorted subarrays of arr[].\n    # We are given two subarrays, l[] and r[] and we have to merge them\n    # to get a single sorted array. The function returns the index of\n    # the merged subarray.\n    def merge(arr, l, m, r):\n        # Find sizes of two subarrays to be merged\n        n1 = m - l + 1\n        n2 = r - m\n\n        # Create temp arrays L[] and R[]\n        L = [0] * (n1)\n        R = [0] * (n2)\n\n        # Copy data to temp arrays L[] and R[]\n        for i in range(0, n1):\n            L[i] = arr[l + i]\n        for j in range(0, n2):\n            R[j] = arr[m + 1 + j]\n\n        # Merge the temp arrays back into arr[l..r]\n        i = 0  # Initial index of first subarray\n        j = 0  # Initial index of second subarray\n        k = l  # Initial index of merged subarray\n\n        while i < n1 and j < n2:\n            if L[i] <= R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        # Copy the remaining elements of L[], if there are any\n        while i < n1:\n            arr[k] = L[i]\n            i += 1\n            k += 1\n\n        # Copy the remaining elements of R[], if there are any\n        while j < n2:\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\n    # Main function to count inversions in arr[]\n    def count_inversions(arr, l, r):\n        # Base case: if array contains one element or less, no inversions\n        if r - l + 1 <= 1:\n            return 0\n\n        # Divide the array into two halves\n        m = (l + r) // 2\n\n        # Count inversions in first half\n        inv_count1 = count_inversions(arr, l, m)\n\n        # Count inversions in second half\n        inv_count2 = count_inversions(arr, m + 1, r)\n\n        # Count inversions in the middle\n        inv_count_middle = 0\n        for i in range(m, l - 1, -1):\n            for j in range(i + 1, m + 1):\n                inv_count_middle += (j - i)\n\n        # Merge the two halves and count inversions in the merged array\n        merge(arr, l, m, r)\n        inv_count_merged = 0\n        i = l\n        j = m + 1\n        k = l\n\n        while i <= m and j <= r:\n            if arr[i] <= arr[j]:\n                inv_count_merged += (m - i + 1)\n                i += 1\n            else:\n                inv_count_merged += (j - m) + 1\n                j += 1\n            k += 1\n\n        # Return the final answer\n        return inv_count1 + inv_count2 + inv_count_middle - inv_count_merged\n\n    # Driver code to test above function\n    arr = [12, 11, 13, 5, 6, 7]\n    n = len(arr)\n    print(\"Inversions in the array are:\", count_inversions(arr, 0, n - 1))"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    # Initialize variables\n    n = len(arr)\n    inv_count = 0\n    \n    # Divide array into two halves\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    # Recursively count inversions in left and right halves\n    left_inv_count = get_Inv_Count(left)\n    right_inv_count = get_Inv_Count(right)\n    \n    # Count inversions in the original array\n    inv_count = sum(map(lambda x, y: x * (mid - y), arr, range(mid, n))) + left_inv_count + right_inv_count\n    \n    # Return total inversion count\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if isinstance(list1, list):\n        for item in list1:\n            if isinstance(item, list):\n                flatten_list(item)\n            else:\n                yield item\n    else:\n        yield list1"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n    elif isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        return [list1[0]] + flatten_list(list1[1:])"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list into a single level list.\n    \"\"\"\n    return [x for sublist in lst for x in sublist]"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    flat_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Initialize an empty list to store the flattened list\n    flattened_list = []\n    \n    # Iterate over each element in the input list\n    for element in list1:\n        # If the element is a list, recursively call the flatten_list function on it\n        if type(element) == list:\n            flattened_list += flatten_list(element)\n        else:\n            # Otherwise, append the element to the flattened list\n            flattened_list.append(element)\n    \n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n\n    Args:\n        list1 (list): A nested list of any depth.\n\n    Returns:\n        list: A flattened list with only one level of nesting.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flattens a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each item\n    max_aggr = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item, price in stdata:\n        # Calculate the maximum aggregate for each item\n        max_aggr[item] = max(max_aggr[item], price)\n\n    # Return the maximum aggregate\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n    # Create a dictionary to store the aggregate values for each transaction\n    agg_dict = defaultdict(int)\n    for item in stdata:\n        # Add the transaction value to the corresponding aggregate\n        agg_dict[item[0]] += item[1]\n    \n    # Initialize the maximum aggregate as negative infinity\n    max_agg = float('-inf')\n    \n    # Loop through the dictionary and update the maximum aggregate if the current aggregate value is greater\n    for value in agg_dict.values():\n        if value > max_agg:\n            max_agg = value\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    max_count = 0\n    stdata = sorted(stdata, key=lambda x: x[1])\n\n    for i in range(len(stdata)):\n        if i == 0 or stdata[i][1]!= stdata[i-1][1]:\n            if max_count == 0:\n                max_sum = stdata[i][0]\n                max_count = 1\n            else:\n                if stdata[i][0] > max_sum + stdata[i-1][0]:\n                    max_sum = stdata[i][0]\n                    max_count = 1\n                elif stdata[i][0] == max_sum + stdata[i-1][0]:\n                    max_count += 1\n\n    if max_count == 0:\n        return 0\n    else:\n        return max_sum + max_count * stdata[-1][0]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate value.\n    '''\n    max_agg = defaultdict(float) #default value of defaultdict is 0.0\n    for item in stdata:\n        for key, value in item:\n            max_agg[key] = max(max_agg[key], value)\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    counts = defaultdict(int)\n    for item, count in stdata:\n        counts[item] += count\n    \n    max_count = max(counts.values())\n    result = [(item, count) for item, count in counts.items() if count == max_count]\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate from the list.\n    It uses a defaultdict to store the frequency of each item in the list.\n    '''\n    freq = defaultdict(int)\n    for item, freq_item in stdata:\n        freq[item] += freq_item\n    max_agg = max(freq.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int) # dictionary to store max aggregate for each state\n    max_agg = 0\n\n    # loop through the list of tuples\n    for state, amount in stdata:\n        # update the max aggregate for the state\n        max_dict[state] = max(max_dict[state], amount)\n        # update the max aggregate overall\n        max_agg = max(max_agg, max_dict[state])\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples of (item, price, quantity) and returns\n    the maximum aggregate value.\n\n    The input list is assumed to be sorted in decreasing order of price.\n\n    Returns:\n    The maximum aggregate value.\n    '''\n\n    # Create a defaultdict to store the cumulative price and quantity for each item\n    cumulative_price = defaultdict(lambda: (0, 0))\n\n    # Initialize the max aggregate value to zero\n    max_aggregate = 0\n\n    # Loop through the input list\n    for item, price, quantity in stdata:\n        # Add the cumulative price and quantity for the current item to the defaultdict\n        cumulative_price[item] = (cumulative_price[item][0] + price, cumulative_price[item][1] + quantity)\n        # Calculate the total price and quantity for the item\n        total_price = cumulative_price[item][0]\n        total_quantity = cumulative_price[item][1]\n        # Calculate the maximum aggregate value for the current item\n        max_aggregate = max(max_aggregate, total_quantity * total_price)\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the cumulative sum for each stock\n    cum_sum = defaultdict(int)\n    # iterate over the tuples in the list and update the cumulative sum\n    for stock, price in stdata:\n        cum_sum[stock] += price\n    # find the maximum aggregate from the cumulative sum\n    max_agg = max(cum_sum.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Given a list of tuples (num, agg), where num is an integer and agg is a string,\n    calculate the maximum aggregate.\n    '''\n    # create a defaultdict to store the count of each aggregate\n    agg_counts = defaultdict(int)\n\n    # iterate over the list of tuples\n    for num, agg in stdata:\n        # update the count of the current aggregate\n        agg_counts[agg] += 1\n\n    # find the maximum count\n    max_count = max(agg_counts.values())\n\n    # find the maximum aggregate\n    max_agg = max(agg_counts, key=agg_counts.get)\n\n    # return the maximum aggregate and its count\n    return max_agg, max_count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "After filling in the array, we can simply return the value at dp[2^n]. This value represents the count of all binary sequences of length 2n with the given property."
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1, -1, -1):\n        binary_str = bin(i)[2:]\n        if int(binary_str[:n]) == int(binary_str[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    # Check if n is a multiple of 2\n    if n % 2!= 0:\n        n += 1\n    \n    # Initialize two variables to keep track of the sum of first n and last n bits\n    sum_first = sum_last = 0\n    \n    # Iterate over all binary sequences of length 2n\n    for i in range(2**n):\n        # Convert the integer to binary and reverse it\n        binary = bin(i)[::-1]\n        \n        # Convert the first n bits to integer and add to sum\n        if int(binary[:n]) == 0:\n            sum_first += 0\n        else:\n            sum_first += 2**n - 1\n        \n        # Convert the last n bits to integer and add to sum\n        if int(binary[-n:]) == 0:\n            sum_last += 0\n        else:\n            sum_last += 2**n - 1\n        \n        # Check if the sum of first n and last n bits is the same\n        if sum_first == sum_last:\n            # If yes, increment the count\n            count += 1\n    \n    # Return the count\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n*2)\n        sum1 = sum([int(bit) for bit in bits[:n]])\n        sum2 = sum([int(bit) for bit in bits[-n:]])\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1):\n        for j in range(2**n-1):\n            if i^j == (2**n-1):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Initialize count variable to 0\n    count = 0\n    \n    # Calculate the sum of first n bits\n    first_n_sum = sum([int(digit) for digit in bin(n)[2:]])\n    \n    # Calculate the sum of last n bits\n    last_n_sum = sum([int(digit) for digit in bin(2**n - 1)[2:]])\n    \n    # Check if the sum of first n bits is equal to the sum of last n bits\n    if first_n_sum == last_n_sum:\n        # Increment the count variable\n        count += 1\n    \n    # Print the result\n    print(\"Count of binary sequences with sum of first\", n, \"bits is:\", count)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1):\n        if i%2==0:\n            binary_seq = bin(i)[2:].zfill(n)\n            sum_first_n_bits = sum([int(bit) for bit in binary_seq[:n]])\n            sum_last_n_bits = sum([int(bit) for bit in binary_seq[-n:]])\n            if sum_first_n_bits == sum_last_n_bits:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bit_sum = sum(int(b) for b in bin(i)[2:])\n        if bit_sum == i ^ (2**n - 1):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(2*n)\n        if binary_str[:n] == binary_str[-n:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0 \n    for i in range(2**n-1): \n        temp = bin(i)[2:] \n        if sum(temp[:n]) == sum(temp[-n:]): \n            count += 1 \n    return count "
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max([dict_depth(v) for v in d.values()])\n        return depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1 + dict_depth(value)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d, depth=0):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        for key, value in d.items():\n            if isinstance(value, dict):\n                depth = dict_depth(value, depth + 1)\n            elif isinstance(value, (list, tuple)):\n                for sub_value in value:\n                    if isinstance(sub_value, dict):\n                        depth = dict_depth(sub_value, depth + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            new_depth = dict_depth(value)\n            if new_depth > depth:\n                depth = new_depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth counter\n    depth = 0\n    \n    # traverse through each key and value in the dictionary\n    for key, value in d.items():\n        # if the value is a dictionary, increment the depth counter\n        if isinstance(value, dict):\n            depth += 1\n            # if the value is a list, traverse through each element\n            if isinstance(value, list):\n                for element in value:\n                    # if the element is a dictionary, increment the depth counter\n                    if isinstance(element, dict):\n                        depth += 1\n    \n    # return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            max_depth = max(max_depth, depth)\n        else:\n            max_depth += 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max(1 + max(dict_depth(v) for v in d.values()), len(d))"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize the depth to 0\n    depth = 0\n    # loop through each key-value pair in the dictionary\n    for key, value in d.items():\n        # if the value is a dictionary, increment the depth by 1\n        if isinstance(value, dict):\n            depth += 1\n        # if the value is not a dictionary, do nothing\n        else:\n            pass\n    # return the depth of the dictionary\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges and the number of rotations, and the index of the element that we want to find.\n    It returns the element at the given index after rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return -1\n\n    # Calculate the number of rotations required to reach the desired index\n    remaining_rotations = rotations\n    for range_start, range_end in ranges:\n        if range_start <= index <= range_end:\n            remaining_rotations += 1\n\n    # Calculate the index of the element after the rotations\n    new_index = index - (rotations * (len(arr) - remaining_rotations))\n    if new_index < 0 or new_index >= len(arr):\n        return -1\n\n    return arr[new_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, range of rotations, and index as input, and returns the element\n    at the given index after rotating the array by the given number of rotations.\n    \"\"\"\n    # If the range of rotations is 0, return the element at the given index.\n    if rotations == 0:\n        return arr[index]\n\n    # Initialize the current index and the element at the given index.\n    current_index = index\n    current_element = arr[index]\n\n    # Iterate over the range of rotations and find the element at the given index after each rotation.\n    for i in range(rotations):\n        # If the current index is at the end of the array, start from the beginning.\n        if current_index == len(arr) - 1:\n            current_index = 0\n        else:\n            current_index += 1\n\n        # Update the current element with the element at the current index.\n        current_element = arr[current_index]\n\n    # If the current element is equal to the element at the given index, return the current element.\n    if current_element == arr[index]:\n        return current_element\n\n    # If the current element is not equal to the element at the given index, return the element at the given index.\n    else:\n        return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, an array of ranges, and the number of rotations needed to find the element.\n    It then finds the element at the given index after the rotations are applied.\n    \"\"\"\n    # Initialize the result variable\n    result = None\n\n    # Iterate through the ranges and rotations\n    for i in range(len(ranges)):\n        # Calculate the start and end indices\n        start = index - rotations[i]\n        end = index + rotations[i]\n\n        # Check if the range is valid\n        if start < 0 or end >= len(arr):\n            continue\n\n        # Check if the current index is within the range\n        if start <= index < end:\n            result = arr[index]\n            break\n\n    # Return the result\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotated_arr = []\n    for i in range(len(arr)):\n        for j in range(len(rotations)):\n            if i == rotations[j][1]:\n                if arr[i] in rotated_arr:\n                    rotated_arr = []\n                rotated_arr.append(arr[i])\n                break\n        if i not in [rotations[j][1] for j in range(len(rotations))]:\n            rotated_arr.append(arr[i])\n    if index < len(rotated_arr):\n        return rotated_arr[index]\n    else:\n        return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of ranges and a list of rotations, and an index.\n    It then finds the element at the given index after applying the given rotations.\n    \n    Args:\n    - arr (list): an array of integers\n    - ranges (list): a list of ranges representing the rotations\n    - rotations (list): a list of rotations represented as a list of pairs\n    - index (int): the index of the element to find\n    \n    Returns:\n    - The element at the given index after applying the given rotations.\n    \"\"\"\n\n    # Initialize the current index and current rotation\n    current_index = 0\n    current_rotation = 0\n\n    # Loop through the rotations and apply each one to the array\n    for r in ranges:\n        # If the current rotation is within the range of rotations, apply the rotation\n        if current_rotation < len(rotations) and current_rotation < r:\n            # Calculate the offset and new index\n            offset = current_rotation - current_index\n            new_index = (index + offset) % len(arr)\n\n            # Set the current index and rotation\n            current_index = new_index\n            current_rotation = current_rotation + 1\n        # Otherwise, rotate the array by 1\n        else:\n            current_index = (current_index + 1) % len(arr)\n            current_rotation = 0\n\n    # Return the element at the final index\n    return arr[current_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes the given array, list of ranges, number of rotations and the index as input.\n    It returns the element at the given index after the number of rotations.\n\n    Args:\n        arr (list): List of elements.\n        ranges (list): List of ranges.\n        rotations (int): Number of rotations required.\n        index (int): Index at which element needs to be found after rotations.\n\n    Returns:\n        element (int): Element at the given index after rotations.\n    '''\n    n = len(arr)\n    # Initialize the index\n    i = index % n\n\n    # Calculate the element at the given index after rotations\n    element = (arr[(i + (rotations % n)) % n] + arr[(i - (rotations % n)) % n]) % n\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, and a list of rotations, and\n    returns the element at the given index after applying the given rotations.\n\n    The function first checks if the index is valid, and then applies the rotations to the array.\n    Finally, it iterates over the array and checks if the element at the current index matches the desired element.\n\n    If a match is found, the function returns the element. Otherwise, it returns None.\n\n    Example usage:\n\n    arr = [1, 2, 3, 4, 5]\n    ranges = [(0, 3), (2, 4)]\n    rotations = [(0, 2), (1, 3), (2, 4)]\n    index = 1\n\n    result = find_Element(arr, ranges, rotations, index)\n\n    print(result)  # Output: 4\n\n    '''\n\n    # Check if the index is valid\n    if index < 0 or index >= len(arr):\n        return None\n\n    # Apply rotations to the array\n    for r in rotations:\n        if r[0] == r[1]:\n            arr[r[0]] = arr[r[0]] + r[1]\n\n    # Find the element at the index after rotations\n    element = None\n    for i in range(len(arr)):\n        if i == index:\n            element = arr[i]\n        elif arr[i] == element:\n            break\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    # Initialize the starting and ending indices\n    start = 0\n    end = len(arr) - 1\n\n    # Perform the rotations and return the element at the given index\n    for i in range(rotations) :\n        start, end = end, start\n        arr[start], arr[end] = arr[end], arr[start]\n\n    # Return the element at the given index after rotations\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function finds the element at a given index after rotations of an array.\n    '''\n    # Calculate the number of rotations required\n    num_rotations = sum(ranges) // 2\n\n    # Calculate the number of elements to skip in the first rotation\n    skip_first = sum(ranges[:num_rotations])\n\n    # Calculate the number of elements to skip in the last rotation\n    skip_last = sum(ranges[-num_rotations:])\n\n    # Calculate the index after the first rotation\n    after_first = index + skip_first + skip_last\n\n    # If the index is after the first rotation, return the element at the calculated index\n    if after_first < len(arr):\n        return arr[after_first]\n    # If the index is before the first rotation, return None\n    else:\n        return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, number of rotations and an index as input.\n    The function returns the element at the specified index after rotations.\n\n    Example:\n\n    arr = [1, 2, 3, 4, 5]\n    ranges = [(0, 4), (3, 4)]\n    rotations = 2\n    index = 3\n\n    Output: 5\n    '''\n\n    def find_element_helper(arr, ranges, rotations, index):\n        # Base case: If all the ranges are exhausted, return the element at the given index.\n        if not ranges:\n            return arr[index]\n\n        # Find the range that the element belongs to.\n        for start, end in ranges:\n            if index >= start and index <= end:\n                return find_element_helper(arr[start:end+1], ranges, rotations, index-start)\n\n        # If the element doesn't belong to any range, return the element at the given index.\n        return arr[index]\n\n    # Calculate the final index after rotations.\n    final_index = index + rotations\n\n    # If the final index is out of bounds of the original array, wrap around.\n    if final_index >= len(arr):\n        final_index -= len(arr)\n\n    return find_element_helper(arr, ranges, rotations, final_index)"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^\\w+p\\w+'\n    matches = re.findall(pattern, words)\n    \n    if len(matches) == 0:\n        return None\n    else:\n        return matches[0]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    words_list = re.findall(pattern, words)\n    if len(words_list) == 2:\n        return words_list[0], words_list[1]\n    else:\n        return 'No matches found'"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    words_starting_with_p = re.findall(pattern, words)\n    return words_starting_with_p[:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p\\w+'\n    matches = re.findall(pattern, words)\n    if len(matches) == 0:\n        return None\n    elif len(matches) == 1:\n        return matches[0].split()\n    else:\n        return [matches[0].split(), matches[1].split()]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define regex pattern to match words starting with letter 'p'\n    pattern = r'^p\\w+'\n    # Loop through the list of words and check if each word matches the pattern\n    for word in words:\n        if re.match(pattern, word):\n            return [word, word.replace('p', '')]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-z]*')\n    matches = re.findall(pattern, words)\n    if len(matches) > 1:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Use regular expressions to find words starting with letter 'p'\n    pattern = r'^p\\w+'\n    matches = re.findall(pattern, words)\n\n    # Check if there are at least two matches\n    if len(matches) < 2:\n        print('There are not enough words starting with letter \\'p\\'.')\n        return None\n\n    # Return the two matches\n    print('Two words starting with letter \\'p\\':')\n    print(matches)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Define regex pattern for starting with 'p'\n    pattern = r'^p\\w+'\n\n    # Use regex to find all matches of pattern in words\n    matches = re.findall(pattern,''.join(words))\n\n    # Return two words starting with 'p' if they exist, otherwise return None\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    result = re.findall(pattern, words)\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    matches = re.findall(pattern, words)\n    if len(matches) < 2:\n        return None\n    else:\n        return matches[0:2]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    i = 0\n    while i < n:\n        if a[i] <= a[index] and a[i] <= a[k]:\n            curr_sum += a[i]\n        else:\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            curr_sum = 0\n        i += 1\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    if index == k:\n        return a[index]\n    if index > k:\n        return 0\n    if index == 0:\n        if a[index] <= a[k]:\n            return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n        else:\n            return max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        if a[index] < a[index - 1]:\n            return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n        else:\n            return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == n:\n        return 0, []\n    if index == 0:\n        if a[index] >= a[k]:\n            return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n        else:\n            return max_sum_increasing_subseq(a, n, index + 1, k)\n    if a[index] < a[k]:\n        return max_sum_increasing_subseq(a, n, index, k)\n    else:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k),\n                    max_sum_increasing_subseq(a, n, index, k))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize the result and an empty list to store the increasing subsequence\n    result = float('-inf')\n    subseq = []\n\n    # Traverse through the array from 0 to k-1\n    for i in range(k):\n        # Check if the current element is greater than or equal to the previous element\n        if a[i] >= a[i - 1]:\n            # Update the result if the current element is greater than the previous element\n            result = max(result, a[i] + max_sum_increasing_subseq(a, n, index, i + 1))\n            # Update the subsequence if the current element is greater than the previous element and the current element is greater than or equal to the last element in the subsequence\n            if a[i] > subseq[-1]:\n                subseq = [a[i]]\n            else:\n                subseq.append(a[i])\n\n    # Traverse through the array from k to n-1\n    for i in range(k, n):\n        # Check if the current element is greater than or equal to the previous element\n        if a[i] >= a[i - 1]:\n            # Update the result if the current element is greater than the previous element\n            result = max(result, a[i] + max_sum_increasing_subseq(a, n, i + 1, k))\n            # Update the subsequence if the current element is greater than the previous element and the current element is greater than or equal to the last element in the subsequence\n            if a[i] > subseq[-1]:\n                subseq = [a[i]]\n            else:\n                subseq.append(a[i])\n\n    return result, subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > n:\n        return 0\n    \n    # Initialize variables\n    max_sum = 0\n    current_sum = 0\n    current_subseq = []\n    \n    # Traverse through the array\n    for i in range(k, n+1):\n        # If the current element is greater than or equal to the kth element, add the current element to the current sum and update the maximum sum\n        if a[i] >= a[k]:\n            current_sum += a[i]\n            max_sum = max(max_sum, current_sum)\n            \n            # If the current sum becomes negative, reset the sum and the subsequence to the previous element and its sum\n            if current_sum < 0:\n                current_sum = a[k-1]\n                current_subseq = [a[k-1]]\n        else:\n            # If the current element is less than the kth element, reset the sum to 0 and the subsequence to the previous element\n            current_sum = 0\n            current_subseq = [a[k-1]]\n            \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables\n    max_sum = 0\n    current_sum = 0\n    current_seq = [0]\n    previous_seq = [0]\n\n    # Check if ith index is valid\n    if index >= n:\n        return 0\n\n    # Check if kth element is valid\n    if k > index:\n        return 0\n\n    # Initialize kth element of the sequence\n    current_seq[0] = a[k]\n    previous_seq[0] = a[index]\n\n    # Loop through the rest of the sequence\n    for i in range(1, n - k + 1):\n        # If the current element is greater than kth element, update both the sum and sequence\n        if a[k] > current_seq[0]:\n            current_seq[i] = a[k]\n            previous_seq[i] = a[k]\n            current_sum = a[k]\n        else:\n            current_seq[i] = current_seq[i - 1] + a[k]\n            previous_seq[i] = current_seq[i - 1]\n            current_sum = max(current_sum, current_seq[i])\n\n        # Update maximum sum if current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index >= n:\n        return 0\n    if index == k:\n        return max(a[index], max_sum_increasing_subseq(a, n, index+1, k)) + a[k]\n    return max(a[index], max_sum_increasing_subseq(a, n, index+1, k)) + max_sum_increasing_subseq(a, n, index+1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:  # base case\n        return 0\n    elif index > n:  # if index is greater than n, we can't create an increasing subsequence\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n    \n    if index == k:  # if the kth element is after i\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    \n    if index < k:  # if the kth element is before i\n        # if the ith element is greater than the kth element, we can't create an increasing subsequence\n        if a[index] > a[k]:\n            return max_sum_increasing_subseq(a, n, index + 1, k)\n        else:\n            # otherwise, we can create an increasing subsequence by excluding the ith element\n            return max(max_sum_increasing_subseq(a, n, index + 1, k),\n                       max_sum_increasing_subseq(a, n, index + 1, index - 1) + a[index])"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n\n    max_so_far = float('-inf')\n    for i in range(index, n):\n        if a[i] > a[k - 1]:\n            max_so_far = max(max_so_far, a[i] + max_sum_increasing_subseq(a, n, i + 1, k))\n\n    return max_so_far"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    max_sum = float('-inf')\n    max_sum_ending_here = float('-inf')\n    current_sum = 0\n\n    # Traverse from left to right\n    for i in range(index, n):\n        if i == k:\n            continue\n        current_sum = max(current_sum + a[i], a[i])\n        max_sum_ending_here = max(max_sum_ending_here, current_sum)\n        max_sum = max(max_sum, max_sum_ending_here)\n\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    # Get the length of the tuple\n    length = len(new_tuplex)\n    # Calculate the number of columns\n    columns = length // m\n    # Calculate the number of rows\n    rows = length // columns\n    # Calculate the number of remaining elements\n    remain = length % columns\n    # Fill the remaining columns with zeros\n    for i in range(columns):\n        for j in range(rows):\n            new_tuplex[m*i+j] = 0\n    # Fill the remaining elements with ones\n    for i in range(remain):\n        new_tuplex[m*columns+i] = 1\n    # Return the modified tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    tuplex -- a tuple of integers\n    m -- the row index of the colon\n    n -- the column index of the colon\n\n    Returns:\n    The colon of the tuple.\n\n    Example:\n    >>> tuplex = (1, 2, 3, 4, 5)\n    >>> colon_tuplex(tuplex, 2, 3)\n    (1, 2, 3, 4)\n    '''\n    # Create a copy of the tuple to modify it\n    new_tuplex = deepcopy(tuplex)\n    # Create a list to hold the new elements of the colon\n    new_elements = []\n    # Loop over the existing elements of the tuple\n    for i in range(len(new_tuplex)):\n        # If the element is on the diagonal, add it to the new_elements list\n        if i == m - 1:\n            new_elements.append(new_tuplex[i])\n        # If the element is above the diagonal, move it to the next row and add it to the new_elements list\n        elif i > m - 1 and i <= m + n - 1:\n            new_elements.append(new_tuplex[i + 1])\n        # If the element is below the diagonal, move it to the previous row and add it to the new_elements list\n        elif i < m + n - 1:\n            new_elements.append(new_tuplex[i - 1])\n    # Return the new colon of the tuple\n    return tuple(new_elements)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    row = []\n    for i in range(m):\n        row.append(deepcopy(tuplex[i]))\n    for i in range(m):\n        for j in range(n):\n            if j == n-1:\n                row[i][j] = (row[i][j][0], row[i][j][1], row[i][j][2])\n            else:\n                row[i][j] = (row[i][j][0], row[i][j][1], '')\n    return row"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # check if the tuple is empty\n    if len(tuplex) == 0:\n        # return a tuple with m elements\n        return (0,) * m\n    \n    # get the first element of the tuple\n    first_elem = tuplex[0]\n    \n    # check if the first element is a tuple\n    if isinstance(first_elem, tuple):\n        # if it is, recursively call the function on the sub-tuple\n        sub_colon = colon_tuplex(first_elem,m,n)\n    else:\n        # if not, return the first element\n        sub_colon = (first_elem,) * m\n    \n    # create a new tuple with the first element followed by the sub-tuple\n    new_tuplex = (first_elem,) + sub_colon\n    \n    # check if the length of the new tuple is less than n\n    if len(new_tuplex) < n:\n        # if it is, add m elements of the first element to the end of the new tuple\n        new_tuplex += (0,) * (n - len(new_tuplex))\n    \n    # return the new tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(deepcopy(tuplex[i][j]))\n        colon.append(tuple(row))\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = deepcopy(tuplex)\n    for i in range(m):\n        result[i] = None\n    for i in range(m, n):\n        result[i] = None\n    return result"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if tuplex is a valid tuple\n    if not isinstance(tuplex, tuple):\n        raise ValueError('Input must be a tuple.')\n\n    # Get the length of the input tuple\n    length = len(tuplex)\n\n    # Check if m and n are valid integers\n    if not isinstance(m, int) or not isinstance(n, int):\n        raise ValueError('m and n must be integers.')\n\n    # Check if m and n are within the range of the tuple length\n    if m < 0 or m >= length or n < 0 or n >= length:\n        raise ValueError('m and n must be within the range of the input tuple length.')\n\n    # Get the start and end indices of the colon\n    start = m - 1\n    end = n - 1\n\n    # Get a slice of the input tuple for the colon\n    colon = tuplex[start:end+1]\n\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        colon.append(deepcopy(tuplex[i*n:(i+1)*n]))\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a deep copy of the input tuple\n    col_tup = deepcopy(tuplex)\n    # loop through the columns\n    for i in range(m):\n        # loop through the rows\n        for j in range(n):\n            # get the value at row i, column j\n            value = col_tup[i][j]\n            # set the value at row j, column i to the value at row i, column j\n            col_tup[j][i] = value\n    # return the colon of the input tuple\n    return col_tup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    \n    # Check if the tuple has enough elements\n    if len(new_tuplex) < m:\n        new_tuplex += [0] * (m - len(new_tuplex))\n    \n    # Get the index of the last non-zero element\n    last_non_zero = -1\n    for i, x in enumerate(new_tuplex):\n        if x!= 0:\n            last_non_zero = i\n            break\n    \n    # Add the colon to the new tuple\n    new_tuplex.insert(last_non_zero + 1, m)\n    \n    # Check if the new tuple has enough elements\n    if len(new_tuplex) < n:\n        new_tuplex += [0] * (n - len(new_tuplex))\n    \n    # Check if the last element of the new tuple is a colon\n    if new_tuplex[-1] == m:\n        new_tuplex[-1] = 0\n    \n    # Return the new tuple\n    return new_tuplex"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum value for each list\n    max1, max2 = max(nums1), max(nums2)\n    \n    # Initialize an empty list to store the products of the largest values\n    large_prod = []\n    \n    # Loop through the first list, selecting one factor for each product\n    for i in range(N):\n        factor1 = max1 // nums1[i]\n        product1 = nums1[i] * factor1\n        \n        # Loop through the second list, selecting one factor for each product\n        for j in range(N):\n            factor2 = max2 // nums2[j]\n            product2 = nums2[j] * factor2\n            \n            # Check if the product is larger than the current largest product\n            if product2 > large_prod[-1] or (product2 == large_prod[-1] and product1 > large_prod[-2]):\n                # If so, add the new product to the list\n                large_prod.append(product1)\n                \n    return large_prod"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    for i in range(N):\n        largest_products.append(max(nums1[i], nums2[i]))\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = nums1[::-1]  # to make sure that the smallest factor is in the front of the list\n    nums2 = nums2[::-1]\n    largest_products = []\n    for i in range(N):\n        product1 = max(nums1[i], nums2[i])\n        product2 = min(nums1[i], nums2[i])\n        largest_product = product1 * product2\n        largest_products.append(largest_product)\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize two variables to store the largest products and their indices\n    max_product = 0\n    max_index1 = -1\n    max_index2 = -1\n\n    # Loop through the lists and calculate the products of the specified number of largest products\n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[i] * nums2[N-i-1]\n        if product1 > max_product:\n            max_product = product1\n            max_index1 = i\n        if product2 > max_product:\n            max_product = product2\n            max_index2 = N-i-1\n\n    # Return the indices of the largest products\n    return max_index1, max_index2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Find the specified number of largest products from two given lists,\n    selecting one factor from each list.\n\n    Args:\n    - nums1 (list): List of integers\n    - nums2 (list): List of integers\n    - N (int): Number of largest products to find\n\n    Returns:\n    - list: List of N largest products\n    \"\"\"\n    # Initialize a list to store the largest products\n    largest_products = []\n\n    # Iterate over the indices of the first list\n    for i in range(len(nums1)):\n        # Initialize the largest product to 1\n        largest_product = 1\n\n        # Iterate over the indices of the second list\n        for j in range(len(nums2)):\n            # Compute the product of the current element of the first list and\n            # the current element of the second list\n            product = nums1[i] * nums2[j]\n\n            # If the product is larger than the current largest product, update the\n            # largest product to be the new product\n            if product > largest_product:\n                largest_product = product\n\n        # Add the largest product to the list of largest products\n        largest_products.append(largest_product)\n\n    # Return the list of largest products\n    return largest_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Create a dictionary to store the products of factors from nums1 and nums2\n    products = {}\n\n    # Loop through all possible combinations of factors from nums1 and nums2\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n\n            # Calculate the product of the two factors\n            product = nums1[i] * nums2[j]\n\n            # Check if the product is already in the dictionary\n            if product in products:\n                # If it is, add 1 to the count of that product\n                products[product] += 1\n            else:\n                # If it's not, add the product and count of 1 to the dictionary\n                products[product] = 1\n\n    # Sort the dictionary by value in descending order\n    sorted_products = sorted(products.items(), key=lambda x: x[1], reverse=True)\n\n    # Extract the top N products from the sorted dictionary\n    top_products = sorted_products[:N]\n\n    # Calculate the maximum value of the top N products\n    max_product = top_products[0][0]\n\n    # Return the maximum value\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the largest product from nums1\n    max_product1 = max(nums1)\n    # Find the largest product from nums2\n    max_product2 = max(nums2)\n    # Find the largest product from the two products\n    max_product = max(max_product1 * max_product2, max_product2 * max_product1)\n    # Find the indices of the largest product in each list\n    largest_indices = (nums1.index(max_product1), nums2.index(max_product2))\n    # Create a list of tuples containing the largest product and its index\n    largest_product_list = [(max_product, largest_indices[0]), (max_product, largest_indices[1])]\n    # Sort the list of tuples based on the largest product\n    largest_product_list.sort(reverse=True)\n    # Select the largest N products from the list\n    selected_products = [largest_product_list[i][0] for i in range(N)]\n    return selected_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the two pointers\n    i, j = 0, 0\n\n    # Initialize an empty list to store the products\n    products = []\n\n    # Iterate until the number of products has been reached\n    while len(products) < N:\n        # Calculate the product of the current pair of numbers\n        product = nums1[i] * nums2[j]\n\n        # Add the product to the list of products\n        products.append(product)\n\n        # If the current number in nums1 is greater than the current number in nums2, move the pointer to the left in nums1\n        if i < len(nums1) - 1 and nums1[i] == nums1[i+1]:\n            i += 1\n        # If the current number in nums2 is greater than the current number in nums1, move the pointer to the left in nums2\n        elif j < len(nums2) - 1 and nums2[j] == nums2[j+1]:\n            j += 1\n        # If the product is greater than any previous product, move the pointers to the left in both lists\n        else:\n            i += 1\n            j += 1\n\n    # Return the list of products\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables for the maximum and minimum values from each list\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    # Find the maximum and minimum values from each list\n    for num in nums1:\n        if num > max1:\n            max1 = num\n        elif num < min1:\n            min1 = num\n    \n    for num in nums2:\n        if num > max2:\n            max2 = num\n        elif num < min2:\n            min2 = num\n    \n    # Initialize variables for the maximum and minimum products and their indices\n    max_product = min_product = -1\n    max_index = min_index = -1\n    \n    # Iterate through the combinations of selecting one factor from each list\n    for i in range(N):\n        for j in range(N):\n            # Check if the current product is larger than the maximum product\n            if nums1[i] * nums2[j] > max_product:\n                max_product = nums1[i] * nums2[j]\n                max_index = i * N + j\n            \n            # Check if the current product is smaller than the minimum product\n            if nums1[i] * nums2[j] < min_product:\n                min_product = nums1[i] * nums2[j]\n                min_index = i * N + j\n    \n    # Return the indices of the maximum and minimum products\n    return (max_index, min_index)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the largest products and their indices\n    largest_products = []\n    largest_products_indices = []\n\n    # Iterate through the specified number of products\n    for i in range(N):\n        # Find the product of the i-th largest number from nums1 and the i-th largest number from nums2\n        current_product = nums1[-i] * nums2[-i]\n\n        # If the current product is greater than any of the previous largest products, add it to the list\n        if not largest_products or current_product > largest_products[-1]:\n            largest_products.append(current_product)\n            largest_products_indices.append((len(nums1) - i, len(nums2) - i))\n\n    # Return the largest products and their indices\n    return largest_products, largest_products_indices"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns their maximum value.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    # Convert the list of characters to a tuple\n    char_tuple = tuple(char_list)\n    return char_tuple"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    return n + 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit of a given number n.\n    '''\n    while n & 1 == 0: # Check if the least significant bit of n is 0\n        n >>= 1 # Right shift n by 1 bit to remove the least significant bit\n    \n    return n << 1 # Left shift n by 1 bit to set the left most unset bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while (n & 1) == 0:\n        n >>= 1\n    n |= 1 << (n.bit_length() - 1)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    This function sets the leftmost unset bit in a given number.\n    \"\"\"\n    # Find the rightmost set bit in the binary representation of n\n    i = 0\n    while n & (1 << i) == 0:\n        i += 1\n    \n    # Set the leftmost unset bit to 1\n    n |= (1 << i)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a given integer n.\n\n    Args:\n        n: An integer.\n\n    Returns:\n        The integer with the left most unset bit set to 1.\n    \"\"\"\n    while n & 1 == 0:\n        n >>= 1\n\n    return n | 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    else:\n        mask = 1 << (n - 1)\n        return set_left_most_unset_bit(n - 1) | mask"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert binary number to integer\n    n = int(n, 2)\n    # Initialize the index to -1\n    index = -1\n    # Iterate over each bit in the binary number\n    for i in range(8):\n        # Check if the bit is set to 1\n        if (n & (1 << i))!= 0:\n            # If the bit is set, update the index and break out of the loop\n            index = i\n            break\n    # Check if the index has been updated\n    if index == -1:\n        # If not, set the leftmost unset bit to 1\n        n |= 1 << 7\n    else:\n        # If the index has been updated, set the bit to 0\n        n &= ~(1 << index)\n    # Convert the integer back to binary and return it\n    return bin(n)[2:]"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Convert the integer to binary representation \n    binary_representation = bin(n)[2:]\n\n    # Find the leftmost unset bit \n    index = binary_representation.find('1')\n\n    # Set the leftmost unset bit to 1 \n    n = n | (1 << index)\n\n    # Convert the modified integer back to decimal \n    return int(n, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in the given number.\n    \"\"\"\n    while n & 1 == 0:  # If the least significant bit is 0, then the rightmost unset bit must be in the next position\n        n >>= 1\n    return n | 1  # If the least significant bit is 1, then the leftmost unset bit is already set, so we set it to 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert binary number to integer\n    n = int(n, 2)\n    # Initialize the mask to 11111111111111111111111111111111\n    mask = 0b11111111111111111111111111111111\n    # Perform a bitwise AND operation with the binary representation of n and the mask\n    n &= mask\n    # Convert the result back to a binary number and return it\n    return bin(n)[2:]"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes two parameters: r (radius) and h (height).\n    It calculates the volume of a cone using Heron's formula and returns the result.\n    \"\"\"\n    volume = (1/3)*r**2*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r*r*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two parameters - r (radius) and h (height) of the cone.\n    It returns the volume of the cone.\n    '''\n\n    # Formula for volume of cone using formula: V = 1/3 * pi * r^2 * h\n    volume = (1/3) * math.pi * (r**2) * h\n    \n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone using the formula: V = (1/3)\u03c0r^2h\n    where V is the volume, r is the radius, and h is the height.\n    \n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n    \n    Returns:\n    float: The volume of the cone.\n    '''\n\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": ""
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, r (radius) and h (height),\n    and calculates the volume of a cone using the formula:\n\n    V = (1/3)\u03c0r^2h\n\n    where r is the radius of the base and h is the height of the cone.\n    '''\n\n    V = (1/3) * math.pi * r ** 2 * h\n\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * (r ** 2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as input and returns the volume of the cone.\n    '''\n    v = (1/3) * math.pi * r ** 2 * h\n    return v"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize a variable to store the highest power of 2 found so far\n    highest_power_of_2 = 1\n    \n    # Loop through all possible powers of 2 up to the square root of n\n    for i in range(2, int(n**0.5)+1):\n        # If n is a multiple of 2**i, update the highest power of 2 found so far\n        if n % (2**i) == 0:\n            highest_power_of_2 = i\n    \n    # Return the highest power of 2 found\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # initialize variables to keep track of power and result\n    power = 0\n    result = 1\n    \n    # iterate while result is less than n\n    while result <= n:\n        result *= 2\n        power += 1\n    \n    # return the highest power of 2 that is less than or equal to n\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    # Initialize variables\n    highest = 1\n    current = 1\n\n    # While current is less than n, increment current and check if it is a power of 2\n    while current < n:\n        current = current << 1\n        if current == n:\n            highest = current\n\n    # Return highest power of 2 that is less than or equal to n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Find the highest power of 2 that is less than or equal to n\n    highest = 1\n    while highest <= n:\n        highest = 2 * highest\n    \n    # Return the highest power of 2 that is less than or equal to n\n    return highest - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        print(\"Please enter a positive integer.\")\n    else:\n        highest_power_of_2 = 0\n        while n > 0:\n            highest_power_of_2 += 1\n            n >>= 1\n        return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to store the highest power of 2\n    highest = 0\n    \n    # Iterate through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the current number is a power of 2\n        if i == 1:\n            highest = i\n        else:\n            # Check if the current number is greater than the current highest power of 2\n            if i > highest:\n                highest = i\n    \n    # Return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Find the highest power of 2 that is less than or equal to n\n    highest_power_of_2 = 1\n    while highest_power_of_2 <= n:\n        highest_power_of_2 *= 2\n\n    return highest_power_of_2 - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 1\n    while highest_power <= n:\n        highest_power *= 2\n    return highest_power-1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Find the highest power of 2 that is less than or equal to n\n    highest_power = 1\n    while highest_power < n:\n        highest_power <<= 1\n    \n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 1\n    \n    while highest <= n:\n        highest *= 2\n        \n    return highest - 1"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (2**n - 1) // (1 - 2**(-n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    #initialize variables\n    a = 0\n    b = 2\n    c = 1\n\n    #check if n is greater than 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    elif n > 1:\n        #iterate until n is reached\n        for i in range(2, n+1):\n            a = b\n            b = c\n            c = a + b\n\n        return c"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas = [0, 1]\n    for i in range(2, n+1):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    # check if n is a positive integer\n    if not isinstance(n, int) or n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    # initialize lucas number\n    lucas_num = 2\n\n    # loop n-1 times to calculate lucas number\n    for i in range(1, n):\n        # calculate lucas number\n        lucas_num = lucas_num + lucas_num - 1\n\n    return lucas_num"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Initialize the first two lucas numbers as 2 and 1\n    a = 2\n    b = 1\n    # Loop through the given number of times\n    for i in range(n-1):\n        # Compute the next lucas number as the sum of the previous two\n        c = a + b\n        # Update the values of a and b for the next iteration\n        a = b\n        b = c\n    # Return the last value of a, which is then'th lucas number\n    return a"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        formatted_item = string.format(item)\n        result.append(formatted_item)\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1 (list): List of lists.\n        l2 (list): List of dictionaries.\n        l3 (list): List of tuples.\n\n    Returns:\n        nested_dict (dict): A nested dictionary of lists and dictionaries.\n    '''\n    # Initialize an empty dictionary\n    nested_dict = {}\n    # Loop through each list\n    for i in range(len(l1)):\n        # Loop through each dictionary\n        for j in range(len(l2)):\n            # Loop through each tuple\n            for k in range(len(l3)):\n                # Add each tuple to the appropriate list\n                if k % 2 == 0:\n                    l1[i].append(l3[k])\n                else:\n                    l2[j][l3[k]] = l3[k+1]\n    # Add each list to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[i] = l1[i]\n    for j in range(len(l2)):\n        nested_dict[j] = l2[j]\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    \n    # iterate through the first list\n    for item in l1:\n        # create a new key for the nested dictionary based on the first item in the list\n        key = item\n        \n        # create a new list to store the values for the nested dictionary\n        values = []\n        \n        # iterate through the second list\n        for subitem in l2:\n            # append the second item in the list to the values list\n            values.append(subitem)\n            \n        # create a new dictionary with the key and values\n        nested_dict[key] = values\n        \n    # iterate through the third list\n    for item in l3:\n        # create a new key for the nested dictionary based on the first item in the list\n        key = item\n        \n        # create a new list to store the values for the nested dictionary\n        values = []\n        \n        # iterate through the second list\n        for subitem in l2:\n            # append the second item in the list to the values list\n            values.append(subitem)\n            \n        # create a new dictionary with the key and values\n        nested_dict[key] = values\n        \n    # return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Converts more than one list to nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for lst in lists:\n        for i in range(len(lst)):\n            if i not in nested_dict:\n                nested_dict[i] = []\n            nested_dict[i].append(lst[i])\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Create an empty dictionary to store the data\n    data = {}\n\n    # Loop through each list\n    for i in range(len(l1)):\n        # Add the key-value pair to the dictionary\n        data[l1[i]] = l2[i]\n        data[l1[i]] = l3[i]\n\n    # Return the dictionary\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    This function takes multiple arguments and returns a nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for i, arg in enumerate(args):\n        for j, item in enumerate(arg):\n            nested_dict[str(j)] = item\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    This function takes in multiple lists and returns a nested dictionary.\n    '''\n    result = {}\n    for lst in args:\n        for item in lst:\n            key = item[0]\n            value = item[1]\n            if key not in result:\n                result[key] = []\n            result[key].append(value)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]: {l2[j]: l3[k] for j in range(len(l2))} for i in range(len(l1))}"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        result.append({'name': l1[i], 'age': l2[i], 'phone': l3[i]})\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Create an empty dictionary to hold the final result\n    result = {}\n    \n    # Loop through each list and add the items to the dictionary\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            key = f\"{l1[i]}_{l2[j]}\"\n            value = l3[i][j]\n            result[key] = value\n            \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 10\n    elif n == 4:\n        return 42\n    elif n == 5:\n        return 132\n    else:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def helper(n, index, memo):\n        if n == 1:\n            return n\n        if index == 5:\n            return n\n        if memo[n][index]!= -1:\n            return memo[n][index]\n\n        memo[n][index] = max(helper(n // 2, index + 1, memo), helper(n // 3, index + 1, memo), helper(n // 4, index + 1, memo), helper(n // 5, index + 1, memo)) + n\n\n        return memo[n][index]\n\n    memo = [[-1 for _ in range(6)] for _ in range(n + 1)]\n    max_sum = helper(n, 1, memo)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n % 2 == 0:\n        return 2*get_max_sum(n//2) + n\n    else:\n        return max(3*get_max_sum(n//3) + 2*get_max_sum(n//2) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return n\n\n    # Recursive case\n    return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n\n    # Helper function to find the maximum of 4 numbers in the range [0, n]\n    def max_of_4(n):\n        max_val = 0\n        for i in range(4):\n            val = n // (i+1)\n            if val > max_val:\n                max_val = val\n        return max_val\n\n    # Call the helper function with n and return the result\n    return max_of_4(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)) + n, n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Find the length of each list in the input list\n    list_lengths = [len(item) for item in input_list]\n    # Find the index of the maximum length\n    max_index = list_lengths.index(max(list_lengths))\n    # Return the input list with maximum length\n    return input_list[max_index]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = None\n    for item in input_list:\n        if len(str(item)) > max_len:\n            max_len = len(str(item))\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = None\n\n    for item in input_list:\n        length = len(item)\n        if length > max_length:\n            max_length = length\n            result = item\n\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    \n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates and then back to a list\n    test_set = list(set(test_tup))\n    # check if the length of the list is equal to the length of the original tuple\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple into a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique = set(test_tup)\n    if len(unique) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # iterate through each character in the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in char_count:\n            # if it is, increment the count of the character\n            char_count[char] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            char_count[char] = 1\n\n    # iterate through each character in the string again and find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # if no non-repeating characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    If there is no non-repeating character, it returns None.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    # iterate through the string and update the frequency dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # iterate through the frequency dictionary and find the first non-repeating character\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first character that has a frequency of 1 in the dictionary\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # If no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n\n    Args:\n    str1: string\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency\n        if char in char_freq:\n            char_freq[char] += 1\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            char_freq[char] = 1\n    \n    # loop through the dictionary to find the first non-repeated character\n    for char, freq in char_freq.items():\n        if freq == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if not re.match(regex, string):\n        return False\n    else:\n        return True\n\nprint(check_char(\"a\")) # True\nprint(check_char(\"z\")) # True\nprint(check_char(\"ab\")) # False\nprint(check_char(\"abc\")) # False\nprint(check_char(\"abcc\")) # False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    return pattern.match(string) is not None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sorting the numbers\n    numbers = [a, b, c]\n    numbers.sort()\n\n    # finding the median\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2-1]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # sort the numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # calculate the middle index\n    mid = len(sorted_list) // 2\n\n    # if the length of the list is odd, the median is the middle number\n    if len(sorted_list) % 2 == 1:\n        median = sorted_list[mid]\n    # if the length of the list is even, the median is the average of the two middle numbers\n    else:\n        median = (sorted_list[mid - 1] + sorted_list[mid]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of the three numbers.\n    \"\"\"\n    # Create a list of numbers and sort it in ascending order\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    # Find the median\n    if len(numbers) % 2 == 0:\n        # If the length of the list is even, take the average of the two middle numbers\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1]) / 2\n    else:\n        # If the length of the list is odd, take the middle number\n        median = numbers[len(numbers)//2]\n        \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    sorted_numbers = sorted([a, b, c])\n    n = len(sorted_numbers)\n    if n % 2 == 1:\n        median = sorted_numbers[n//2]\n    else:\n        median = (sorted_numbers[n//2-1] + sorted_numbers[n//2]) / 2\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a, b, c])\n    length = len(sorted_numbers)\n    median = (sorted_numbers[length // 2] + sorted_numbers[(length // 2) - 1]) / 2\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n    \n    # Find the median\n    mid_index = len(sorted_numbers)//2\n    if len(sorted_numbers)%2 == 0:\n        median = (sorted_numbers[mid_index-1] + sorted_numbers[mid_index])/2\n    else:\n        median = sorted_numbers[mid_index]\n        \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = sorted([a,b,c])\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2] + sorted_list[n//2-1])/2\n    else:\n        return sorted_list[n//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the sum of the three numbers\n    sum_numbers = sorted_numbers[0] + sorted_numbers[1] + sorted_numbers[2]\n\n    # Calculate the median of the three numbers\n    median = sum_numbers / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n    \n    # Find the length of the sorted array\n    length = len(sorted_numbers)\n    \n    # Determine the median\n    if length % 2 == 0:\n        median = (sorted_numbers[length//2-1] + sorted_numbers[length//2])/2\n    else:\n        median = sorted_numbers[length//2]\n    \n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum([int(digit) for digit in str(num)])\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    # Initialize an empty list to store the sum of digits of each number\n    total_sum = []\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = [int(d) for d in str(num)]\n        \n        # Compute the sum of the digits\n        digit_sum = sum(digits)\n        \n        # Append the sum of digits to the list of total sums\n        total_sum.append(digit_sum)\n    \n    # Return the list of total sums\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        # Convert the number to a string and then convert each digit to an integer\n        digits = [int(digit) for digit in str(num)]\n        # Compute the sum of the digits\n        digit_sum = sum(digits)\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sum of digits for each number\n    sum_list = []\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = list(str(num))\n        # Compute the sum of the digits and append it to the sum_list\n        sum_list.append(sum(digits))\n    # Return the sum_list\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        sum = 0\n        while num > 0:\n            digit = num % 10\n            sum += digit\n            num //= 10\n        sum_of_digits.append(sum)\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        digits_sum = 0\n        while num > 0:\n            digits_sum += num % 10\n            num //= 10\n        sum_digits += digits_sum\n    return sum_digits"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize variables to store the result and length of each tuple\n    result = ()\n    length1 = len(test_tup1)\n    length2 = len(test_tup2)\n    \n    # check if the length of the tuples are equal\n    if length1!= length2:\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # iterate through each element of the tuples and perform the bitwise xor operation\n    for i in range(length1):\n        if test_tup1[i] == test_tup2[i]:\n            # if both elements are equal, then the result should also be equal\n            result = result + (test_tup1[i],)\n        else:\n            # if the elements are not equal, then the result should be different from both elements\n            result = result + (test_tup1[i] ^ test_tup2[i],)\n    \n    # return the result tuple\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Check that the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Input tuples must have the same length.')\n    \n    # Initialize an empty list to store the results\n    xor_results = []\n    \n    # Iterate over each element in the input tuples\n    for i in range(len(test_tup1)):\n        # Compute the bitwise xor of the corresponding elements\n        xor_results.append(test_tup1[i] ^ test_tup2[i])\n        \n    # Return the computed bitwise xor results\n    return xor_results"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and performs the mathematical bitwise xor operation across them.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] ^ test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] ^ test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] ^ test_tup2[i]),)\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(sorted(item)))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a dictionary to store unique tuples\n    freq_dict = {}\n    # loop through the list\n    for item in test_list:\n        # if the tuple is not in the dictionary, add it and set its value to 1\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        # otherwise, increment its value by 1\n        else:\n            freq_dict[tuple(item)] += 1\n    # return the number of unique tuples in the dictionary\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a set to store unique tuples\n    unique_tuples = set()\n\n    # iterate over the list and add each tuple to the set\n    for tup in test_list:\n        unique_tuples.add(tup)\n\n    # return the length of the set (which is the number of unique tuples)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    freq = {}\n    for elem in test_list:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # Initialize an empty set to store unique tuples\n    unique_tuples = set()\n\n    # Iterate through the list and add each tuple to the set only if it's not already there\n    for tup in test_list:\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n\n    # Return the length of the set (which will be the number of unique tuples)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Create an empty set to store unique tuples\n    unique_tuples = set()\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is not in the set, add it to the set\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n\n    # Return the size of the set, which is the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Initialize an empty list to store the resultant tuples\n    result = []\n    \n    # Iterate over each element of the first tuple\n    for i in range(len(test_tup1)):\n        \n        # Iterate over each element of the second tuple\n        for j in range(len(test_tup2[i])):\n            \n            # Perform index wise addition of the elements of the two tuples\n            result.append(test_tup1[i] + test_tup2[i][j])\n            \n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result of the addition operation\n    result = []\n    # Initialize two variables to keep track of the current index and the total number of elements in the tuple\n    index = 0\n    size = len(test_tup1)\n    \n    # Iterate through the tuples and add the elements at the current index position\n    while index < size:\n        # Check if the current index is valid\n        if index < len(test_tup1[index]):\n            # Add the elements at the current index position\n            result.append(test_tup1[index][index] + test_tup2[index][index])\n            # Increment the index by 1\n            index += 1\n        else:\n            # Reset the index to the beginning of the tuple\n            index = 0\n    \n    # Return the final result list\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different lengths.\")\n        return\n    else:\n        for i in range(len(test_tup1)):\n            try:\n                test_tup1[i] += test_tup2[i]\n            except TypeError:\n                print(\"Error: The two tuples are not of same type.\")\n                return\n        return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # check if both input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both input tuples must be of the same length\")\n        return\n\n    # initialize an empty list to store the sum of each tuple element\n    sum_list = []\n\n    # loop through both input tuples and add their element at the same index in the sum_list\n    for i in range(len(test_tup1)):\n        sum_list.append(test_tup1[i] + test_tup2[i])\n\n    # return the sum_list as the result of the function\n    return sum_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if both tuples have same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples should have same number of elements')\n    # Initialize result tuple\n    result_tup = ()\n    # Iterate through both tuples\n    for i in range(len(test_tup1)):\n        # Add corresponding elements of both tuples and append to result tuple\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initializing an empty tuple to store the sum of each tuple element\n    sum_tuple = ()\n    # Looping through each tuple element in the two input tuples\n    for i in range(len(test_tup1)):\n        # Adding the corresponding element of each tuple and appending the result to the sum_tuple\n        sum_tuple += (test_tup1[i] + test_tup2[i],)\n    # Returning the sum_tuple as the output of the function\n    return sum_tuple"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            test_tup1[i] = tuple(map(lambda x, y: x + y, test_tup1[i], test_tup2[j]))\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Using a nested for loop to iterate over the tuples and add the elements at the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] += test_tup2[i]\n    \n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] + test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    This function finds the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n\n    if len(tuplex)!= len(tuple1):\n        return False\n\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1[i]:\n            return True\n        else:\n            return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"Element found in the tuple\")\n    else:\n        print(\"Element not found in the tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for x in tuplex:\n        if x in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex: \n        if item in tuple1: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in {tuple1}\")\n    else:\n        print(f\"{tuplex} does not exist in {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"The element exists within the tuple\")\n    else:\n        print(\"The element does not exist within the tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return \"Even number.\"\n    else:\n        return \"Odd number.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    parity = 0\n    while x > 0:\n        parity += x % 2\n        x = x // 2\n    if parity % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Calculate the parity of x\n    parity = 1 if x % 2 == 0 else 0\n    \n    # Print the parity of x\n    print(\"The parity of\", x, \"is:\", parity)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Find the sum of digits in the number\n    sum = 0\n    while x > 0:\n        sum += x % 10\n        x //= 10\n\n    # Check if the parity is odd or even\n    if sum % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'The parity of {} is even.'.format(x)\n    else:\n        return 'The parity of {} is odd.'.format(x)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"The number is even.\"\n    else: \n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: # If x is even\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: # if x is even\n        return False # return False because even numbers are not odd\n    else:\n        return True # return True because odd numbers are odd"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x > 0:\n        parity += x % 2\n        x //= 2\n    if parity % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    max_digit = max(digits)\n    if max_digit < 9:\n        # if the maximum digit is less than 9, make it 9\n        digits = [0] * (max_digit + 1) + digits\n    else:\n        # if the maximum digit is 9, make it 0\n        digits[-1] = 0\n    new_number = int(''.join(map(str, digits)))\n    return new_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    def get_digits(num):\n        return [int(d) for d in str(num)]\n\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def is_smaller(num1, num2):\n        digits1 = get_digits(num1)\n        digits2 = get_digits(num2)\n\n        for i in range(len(digits1)):\n            if digits1[i] < digits2[i]:\n                return True\n            elif digits1[i] > digits2[i]:\n                return False\n\n        return len(digits1) < len(digits2)\n\n    def next_bigger(num):\n        digits = get_digits(num)\n\n        if is_palindrome(num + 1):\n            return str(num + 1)\n        elif is_smaller(num + 1, num):\n            return str(num + 1)\n        else:\n            for i in range(len(digits)):\n                if digits[i] == 9:\n                    digits[i] = 0\n                else:\n                    digits[i] += 1\n                    break\n            else:\n                digits.append(0)\n\n            return str(int(''.join(str(d) for d in digits)))\n\n    return next_bigger(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Determine the length of the digits\n    length = len(digits)\n    \n    # Check if the number is already the next biggest\n    if n == int(''.join(digits)) * 10**length:\n        return n\n    \n    # Reverse the digits\n    digits = digits[::-1]\n    \n    # Initialize the next bigger number\n    next_bigger = 0\n    \n    # Create a list of pairs of digits\n    pairs = []\n    for i in range(length):\n        for j in range(i+1, length):\n            pairs.append((digits[i], digits[j]))\n    \n    # Sort the pairs\n    pairs.sort(key=lambda x: (int(x[0]), int(x[1])))\n    \n    # Rearrange the digits\n    for digit in digits:\n        for pair in pairs:\n            if digit == pair[0] or digit == pair[1]:\n                next_bigger += 1\n                digits.remove(digit)\n                if len(digits) == 0:\n                    break\n    \n    # Convert the digits back to a number\n    next_bigger = int(''.join(digits)) * 10**length + next_bigger\n    \n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Helper function to reverse a number\n    def reverse(num):\n        return int(str(num)[::-1])\n    \n    # Helper function to check if a number is a palindrome\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    # Check if the given number is already a palindrome\n    if is_palindrome(n):\n        return n\n    \n    # Reverse the given number\n    n = reverse(n)\n    \n    # Initialize variables for the new number\n    digits = []\n    i = 0\n    \n    # Loop through the digits of the reversed number\n    while i < len(str(n)):\n        # Check if the digit is already in the list\n        if str(n[i]) not in digits:\n            # Add the digit to the list\n            digits.append(str(n[i]))\n        \n        # Increment the index\n        i += 1\n    \n    # Reverse the list of digits\n    digits = digits[::-1]\n    \n    # Convert the list of digits to an integer\n    new_n = int(''.join(digits))\n    \n    # Check if the new number is already a palindrome\n    if is_palindrome(new_n):\n        return new_n\n    \n    # Reverse the new number\n    new_n = reverse(new_n)\n    \n    # Return the new number\n    return new_n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Reverse the list of digits\n    digits.reverse()\n\n    # Count the number of zeros in the list\n    zeros = digits.count(0)\n\n    # Replace the last zero with the next bigger number\n    digits[zeros] = digits[zeros] + 1\n\n    # Convert the list of digits back to a string and return the result\n    return ''.join(str(digit) for digit in digits)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a list of digits\n    num_list = list(str(n))\n    # Initialize a variable to store the sum of digits\n    digit_sum = 0\n    \n    # Iterate through each digit in the list\n    for digit in num_list:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Add the integer value of the digit to the digit_sum\n        digit_sum += digit_int\n    \n    # Increment the last digit by 1\n    num_list[-1] += 1\n    # Iterate through each digit in the list\n    for i, digit in enumerate(num_list[:-1]):\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Subtract the integer value of the digit from the digit_sum\n        digit_sum -= digit_int\n        # Check if the digit_sum is greater than zero\n        if digit_sum > 0:\n            # Add the remaining digit_sum to the current digit\n            num_list[i] += digit_sum\n            # Exit the loop\n            break\n    \n    # Convert the list of digits back to a string\n    return int(''.join(num_list))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    num_str = str(n)\n    num_list = [int(x) for x in num_str]\n    \n    # sort the digits in reverse order\n    num_list.sort(reverse=True)\n    \n    # create a string from the sorted digits\n    sorted_str = \"\".join(str(x) for x in num_list)\n    \n    # create a new number by concatenating the original number's digits with the sorted digits\n    new_num = int(n / 10**(len(num_str)-1) * 10**(len(num_str)-1) + sorted_str)\n    \n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    # Sort the digits in reverse order\n    digits.sort(reverse=True)\n    # Convert the sorted digits back to a string and concatenate them with a zero\n    result = ''.join(digits) + '0'\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Initialize the next bigger number as the input number\n    next_bigger = n\n\n    # Iterate through each digit in the string from right to left\n    for i in range(len(num_str) - 1, -1, -1):\n        # Get the current digit\n        digit = int(num_str[i])\n\n        # If the current digit is 9, increment it to 0 and set the rest of the digits to 9\n        if digit == 9:\n            digit = 0\n            for j in range(i):\n                num_str[j] = '9'\n        else:\n            # Increment the current digit and set the rest of the digits to 0\n            digit += 1\n            for j in range(i, len(num_str)):\n                num_str[j] = '0'\n\n        # Convert the updated digit back to an integer and add it to the next bigger number\n        next_bigger = next_bigger * 10 + digit\n\n    # Return the next bigger number\n    return next_bigger\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    digits.reverse()\n    for i in range(len(digits)):\n        digits[i] *= 10 ** i\n    return int(''.join(str(d) for d in digits))"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the smallest k elements from each array\n    min_heap1 = []\n    min_heap2 = []\n    # Initialize a variable to keep track of the number of pairs found so far\n    count = 0\n    # Loop through each element in the first array\n    for num1 in nums1:\n        # Check if there are enough elements in the min heap for the current element to be added\n        if len(min_heap1) < k:\n            heapq.heappush(min_heap1, num1)\n        else:\n            # If there are too many elements in the min heap, remove the smallest element\n            if num1 < min_heap1[0]:\n                heapq.heappop(min_heap1)\n                heapq.heappush(min_heap1, num1)\n        # Loop through each element in the second array\n        for num2 in nums2:\n            # Check if there are enough elements in the min heap for the current element to be added\n            if len(min_heap2) < k:\n                heapq.heappush(min_heap2, num2)\n            else:\n                # If there are too many elements in the min heap, remove the smallest element\n                if num2 < min_heap2[0]:\n                    heapq.heappop(min_heap2)\n                    heapq.heappush(min_heap2, num2)\n            # If there are enough elements in both heaps, add a pair to the result and increment the count\n            if len(min_heap1) > 0 and len(min_heap2) > 0:\n                count += 1\n                # Create a tuple containing the two smallest elements from each heap and remove them\n                pair = (heapq.heappop(min_heap1), heapq.heappop(min_heap2))\n                # Add the pair to the min heap\n                heapq.heappush(min_heap1, pair[0])\n                heapq.heappush(min_heap2, pair[1])\n    return count"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "Here is the implementation of the above algorithm:"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min-heap to store the smallest pairs\n    min_heap = []\n    \n    # Initialize variables to store the current smallest and largest elements\n    current_smallest = float('inf')\n    current_largest = float('-inf')\n    \n    # Iterate through the arrays and add pairs to the min-heap\n    for num1 in nums1:\n        for num2 in nums2:\n            # Add the pair to the heap if it is smaller than the current smallest pair\n            if num1 + num2 < current_smallest:\n                heapq.heappush(min_heap, (-num1-num2, (num1, num2)))\n                # If the heap has more than k elements, remove the smallest pair\n                if len(min_heap) > k:\n                    current_smallest, current_pair = -heapq.heappop(min_heap)\n            \n            # Update the current smallest pair if the current smallest pair is smaller than the current pair\n            current_smallest = min(current_smallest, -num1-num2)\n            \n            # Update the current smallest and largest elements\n            current_largest = max(current_largest, num1, num2)\n    \n    # Return the k smallest pairs from the heap\n    return [current_pair for _, current_pair in heapq.nsmallest(k, min_heap)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for num in nums1:\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num)\n        else:\n            if num > min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, num)\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heap1 = []\n    heap2 = []\n\n    for num in nums1:\n        heapq.heappush(heap1, (-num, -1))\n\n    for num in nums2:\n        heapq.heappush(heap2, (-num, -1))\n\n    while len(pairs) < k:\n        if not heap1:\n            break\n        if not heap2:\n            break\n        if heap1[0][0] + heap2[0][0] > 0:\n            pairs.append((heap1[0][0], heap2[0][0]))\n            heap1[0] = (-heap1[0][0], -1)\n            heap2[0] = (-heap2[0][0], -1)\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = [(nums1[0], 0)]\n    result = []\n\n    for i in range(1, len(nums1)):\n        while len(heap) > 0 and heap[0][0] > nums1[i]:\n            heapq.heappop(heap)\n        if len(heap) > 0:\n            pair = (heap[0][0] - nums1[i], heap[0][1] + 1)\n            if len(result) < k or pair < result[len(result)-1]:\n                heapq.heappush(heap, pair)\n        heapq.heappush(heap, (nums1[i], i))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap to store pairs of numbers and their indices\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # create a tuple of (nums1[i], nums2[j], i, j) as the key\n            heapq.heappush(min_heap, (nums1[i] + nums2[j], i, j))\n            # if the heap size is greater than k, remove the smallest pair and add the next smallest pair to the heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    \n    # return the k smallest pairs\n    result = []\n    while min_heap:\n        _, i, j = heapq.heappop(min_heap)\n        result.append((nums1[i], nums2[j]))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    result = []\n\n    # Build a min heap of all pairs of (nums1[i], nums2[j])\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (-nums1[i] * nums2[j], (i, j)))\n            if len(heap) > k:\n                heapq.heappop(heap)\n\n    # Extract the k smallest pairs and add them to the result list\n    while heap:\n        value, pair = heapq.heappop(heap)\n        result.append(pair)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    result = []\n\n    # Build a min heap of size k from the second array\n    for num in nums2:\n        heapq.heappush(min_heap, -num)\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # If the size of the min heap is less than k, we can add the current element to the min heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, -num1)\n        # If the size of the min heap is equal to k, we can add the current element to the result and pop the smallest element from the second heap\n        else:\n            min_heap_num = -heapq.heappop(min_heap)\n            result.append((-num1, min_heap_num))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Convert the lists into sets for faster lookups\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n\n    # Create a min heap of size k to store the smallest pairs\n    min_heap = []\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Look for pairs that add up to the current number in the first array\n        for num2 in nums2_set:\n            # Check if the difference between the current number and the target number is in the second array\n            if num1 + num2 in nums2_set:\n                # Create a pair with the current number and target number\n                pair = (num1, num2)\n                # If the size of the min heap is less than k, add the pair to the heap\n                if len(min_heap) < k:\n                    heapq.heappush(min_heap, pair)\n                # If the size of the min heap is equal to k, check if the current pair is smaller than the smallest pair in the heap\n                elif len(min_heap) == k:\n                    if pair < min_heap[0]:\n                        heapq.heapreplace(min_heap, pair)\n\n    # Extract the k smallest pairs from the heap\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = [0] * len(list1)\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] < list1[j]:\n                list2[i] += list1[j]\n            elif list1[j] < list1[i]:\n                list2[j] += list1[i]\n    min_product = 1\n    for i in range(len(list2)):\n        min_product = min(min_product, list2[i])\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    list1.sort(key=lambda x: x[1]*x[0])\n    return list1[0][1] * list1[0][0]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # Sort the list of tuples in ascending order\n    list1.sort()\n\n    # Initialize the minimum product and the current product\n    min_product = float('inf')\n    current_product = 1\n\n    # Iterate through the sorted list and calculate the current product\n    for i in range(len(list1)):\n        current_product *= list1[i][0] * list1[i][1]\n\n        # If the current product is smaller than the minimum product, update the minimum product\n        if current_product < min_product:\n            min_product = current_product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of all pairs of tuples.\n    '''\n    # Initialize the minimum product to be positive infinity\n    min_product = float('inf')\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Iterate through the remaining tuples in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and check if it's less than the current minimum product\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                # If it is, update the minimum product\n                min_product = product\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(lst):\n    '''\n    This function takes a list of tuples and returns the minimum product of pairs of tuples within the list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The minimum product of pairs of tuples within the list.\n    '''\n    def product(a, b):\n        return a * b\n\n    def pair_product(tup):\n        a, b = tup\n        return product(a, b)\n\n    lst = sorted(lst, key=pair_product)\n    return lst[0][0] * lst[0][1]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples as input and returns the minimum product of any two pairs of tuples within the list.\n    \"\"\"\n    if not isinstance(list1, list) or not all(isinstance(tuple, tuple) for tuple in list1):\n        raise TypeError(\"Input must be a list of tuples.\")\n\n    min_product = float('inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Compute the minimum product of pairs of tuples within a list.\n    \"\"\"\n    # Initialize variables\n    min_product = float('inf')\n    pair = None\n    # Iterate over the list of tuples\n    for tup in lst:\n        # Extract the elements of the tuple\n        a, b = tup\n        # Compute the product of the elements\n        product = a * b\n        # Check if the product is less than the current minimum\n        if product < min_product:\n            min_product = product\n            pair = tup\n    # Return the minimum product and the corresponding pair of tuples\n    return min_product, pair"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples as input and returns the minimum product of the tuples within the list.\n    \"\"\"\n    min_value = float('inf')\n    for tup1, tup2 in list1:\n        prod = tup1[0] * tup2[1]\n        if prod < min_value:\n            min_value = prod\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_value = float('inf')\n    for val in listval:\n        if val < min_value:\n            min_value = val\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    minval = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function takes a list as input and returns the minimum value in the list.\n    \"\"\"\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    minval = listval[0]\n    for val in listval[1:]:\n        if val < minval:\n            minval = val\n    return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        return None\n    \n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = re.sub('_(.)', lambda m: m.group(1).upper(), word)\n    # Remove the first character (which is already capitalized)\n    return camel_case[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace all underscores with spaces and capitalize the first letter of the next word\n    camel_case = re.sub('_(.)', lambda m: m.group(1).upper(), word)\n    # Remove any leading or trailing underscores\n    camel_case = re.sub('^_+', '', camel_case)\n    camel_case = re.sub('_+$', '', camel_case)\n    # Convert to camel case\n    return camel_case.title()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert the given snake case string to camel case string.\n\n    Parameters:\n    word (str): The given snake case string.\n\n    Returns:\n    str: The camel case string equivalent of the given snake case string.\n    \"\"\"\n\n    # Remove all underscores from the word\n    word = re.sub('_', '', word)\n\n    # Convert the word to camel case\n    words = word.split()\n    camel_case = words[0]\n    for i in range(1, len(words)):\n        camel_case += words[i][0].upper() + words[i][1:]\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the word to lowercase\n    word = word.lower()\n\n    # Split the word by underscores\n    words = word.split('_')\n\n    # Initialize an empty string to store the camel case version of the word\n    camel_case_word = ''\n\n    # Iterate over the words and capitalize the first letter of each word\n    for i, w in enumerate(words):\n        if i == 0:\n            camel_case_word += w.capitalize()\n        else:\n            camel_case_word += w\n\n    # Return the camel case version of the word\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert snake case to camel case using regular expressions\n    pattern = re.compile('(?<!^)(?=[A-Z])')\n    return pattern.sub('', word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words by underscores\n    words = re.findall(r'_(.)', word)\n    # Convert each word to camel case\n    camel_case_words = []\n    for word in words:\n        camel_case_words.append(word.upper())\n    # Join the camel case words with underscores\n    return ''.join(camel_case_words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the snake case string to list of words\n    words = word.split('_')\n    # Capitalize the first letter of the first word\n    words[0] = words[0].capitalize()\n    # Convert the list of words to camel case string\n    camel_case_word = ''.join(words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    first_char = word[0].lower()\n    rest_of_word = re.sub(r'_(.)', r'\\1', word[1:])\n    return first_char + rest_of_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case using regular expressions\n    camel_case_word = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # convert snake_case to camelCase\n    camel_case = re.sub(r'([a-z])([A-Z])', r'\\1_\\2', word)\n\n    # convert camelCase to CamelCase\n    return camel_case.title()"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    # create an empty list to store the even numbers\n    result = []\n    for num in l:\n        # if the number is even, append it to the result list\n        if num % 2 == 0:\n            result.append(num)\n    # return the result list\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    # create an empty list to store the even numbers\n    even_list = []\n    # loop through each number in the original list\n    for num in l:\n        # if the number is odd, add it to the even_list\n        if num % 2!= 0:\n            even_list.append(num)\n    # return the even_list\n    return even_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return \"Invalid input. n should be less than or equal to the length of the list.\"\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1) or n < 1:\n        print(\"Invalid input. Please enter a positive integer less than or equal to the length of the list.\")\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(len(list1)):\n        if i == n-1:\n            return list1[i]\n    else:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1]\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1)!= list:\n        print(\"Error: Input should be a list of tuples\")\n        return None\n    \n    if type(n)!= int:\n        print(\"Error: n should be an integer\")\n        return None\n    \n    if n < 1 or n > len(list1):\n        print(\"Error: n should be between 1 and the length of the list\")\n        return None\n    \n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Extract the nth element from a given list of tuples.\n    '''\n    return lst[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there is any common value\n    in both lists, and False otherwise.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # create a set of values from list1\n    set1 = set(list1)\n    # loop through list2 and check if any value exists in set1\n    for value in list2:\n        if value in set1:\n            return True\n    # if no values exist in set1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:  \n        if item in list2:  \n            return True  \n    return False  "
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # Check if both lists have the same length\n    if len(list1)!= len(list2):\n        print(\"Both lists must have the same length\")\n        return\n\n    # Loop through each element in list1\n    for i in range(len(list1)):\n        # Check if the element exists in list2\n        if list1[i] in list2:\n            print(\"Element\", list1[i], \"exists in the list\")\n            return"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Create a dictionary to store the count of each element in list1\n    count1 = {}\n    for num in list1:\n        if num in count1:\n            count1[num] += 1\n        else:\n            count1[num] = 1\n    \n    # Loop through the values in list2 and check if they are in count1\n    for num in list2:\n        if num in count1 and count1[num] > 0:\n            return True\n    \n    # If no values in list2 are found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Checks whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Convert the input lists to sets to make the check faster\n    set1 = set(list1)\n    set2 = set(list2)\n    # Check if any value in set1 exists in set2 or vice versa\n    return bool(set1.intersection(set2))"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Combine the two lists into a single list\n    combined = list1 + list2\n\n    # Create a set to store the values in both lists\n    set_combined = set(combined)\n\n    # Check if any value in the first list is present in the combined list\n    for value in list1:\n        if value in set_combined:\n            return True\n\n    # Check if any value in the second list is present in the combined list\n    for value in list2:\n        if value in set_combined:\n            return True\n\n    # If we get here, no values in the first or second list were found in the combined list\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists and checks if there is any value in the first list that is also in the second list.\n    If so, it returns True. Otherwise, it returns False.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    max1 = arr[0] \n    max2 = arr[1] \n    min1 = arr[0] \n    min2 = arr[1] \n    \n    for i in range(2, len(arr)): \n        if arr[i] > max1: \n            max2 = max1 \n            max1 = arr[i] \n        elif arr[i] > max2: \n            max2 = arr[i] \n        elif arr[i] < min1: \n            min2 = min1 \n            min1 = arr[i] \n        elif arr[i] < min2: \n            min2 = arr[i] \n        \n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0] * arr[1]\n    min1 = arr[0]\n    min2 = arr[1]\n\n    for i in range(2, len(arr)):\n        if arr[i] * max1 < max2:\n            max2 = arr[i]\n            max1 = arr[i] * min1\n        elif arr[i] * max1 > max2:\n            max1 = arr[i] * min1\n\n        if arr[i] * min1 > min2:\n            min2 = arr[i]\n            min1 = arr[i] * max1\n        elif arr[i] * min1 < min2:\n            min1 = arr[i] * max1\n\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns a tuple containing\n    the two integers that form the maximum product of their respective pairs in the list.\n    If there is no such pair, it returns None.\n\n    Args:\n    arr: list of integers\n\n    Returns:\n    A tuple containing the two integers that form the maximum product of their respective pairs in the list.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n\n    max_pair = (arr[0], arr[1])\n    min_pair = (arr[0], arr[1])\n\n    for i in range(2, len(arr)):\n        # update max pair\n        if arr[i] * max_pair[0] > max_pair[1] * arr[i]:\n            max_pair = (max_pair[0] * arr[i], max_pair[1] * arr[i])\n\n        # update min pair\n        if arr[i] * min_pair[0] < min_pair[1] * arr[i]:\n            min_pair = (min_pair[0] * arr[i], min_pair[1] * arr[i])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Given an array of integers, return the pair of integers that have the highest product.\n    If there are multiple pairs with the same highest product, return the pair that appears first in the array.\n    \"\"\"\n    max1 = float('-inf')\n    max2 = float('-inf')\n    max_product = float('-inf')\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max1 = arr[i]\n                max2 = arr[j]\n\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = arr[0]\n    max2 = arr[1]\n    min1 = arr[0]\n    min2 = arr[1]\n\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # Sort the given array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    \n    # Initialize variables to store the maximum product and the pair of numbers\n    max_product = sorted_arr[0] * sorted_arr[1]\n    pair = (sorted_arr[0], sorted_arr[1])\n    \n    # Iterate through the sorted array and calculate the product of each pair\n    for i in range(2, len(sorted_arr)):\n        current_product = sorted_arr[i] * sorted_arr[i-1]\n        if current_product > max_product:\n            max_product = current_product\n            pair = (sorted_arr[i-1], sorted_arr[i])\n            \n    return pair, max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return max1 * max2, min1 * min2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    if not arr:\n        return None\n    max_product = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max_product = arr[len(arr)-1]*arr[len(arr)-2]\n    min_product = arr[0]*arr[1]\n    if max_product < min_product:\n        max_product = min_product\n    return max_product"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n\n    # Create an empty dictionary to store the count of each element in the input list\n    count_dict = {}\n\n    # Iterate over each tuple in the input list\n    for i in Input:\n        # If the first element in the tuple is already in the dictionary, increment its count\n        if i[0] in count_dict:\n            count_dict[i[0]] += 1\n        # If the first element in the tuple is not in the dictionary, add it and set its count to 1\n        else:\n            count_dict[i[0]] = 1\n\n    # Create a list to store the common elements found in the input list\n    common_elements = []\n\n    # Iterate over the keys in the count_dict dictionary\n    for key in count_dict:\n        # If the count of the key is greater than 1, add it to the common_elements list\n        if count_dict[key] > 1:\n            common_elements.append(key)\n\n    # Return the common elements found in the input list\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in Input:\n        if i[0] == common_element:\n            common_element = None\n            break\n        else:\n            common_element = i[0]\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples with the same first element.\n    '''\n\n    # Initialize an empty list to store the unique first elements\n    unique_elements = []\n\n    # Iterate through the input list\n    for item in Input:\n        \n        # Get the first element of the current tuple\n        first_element = item[0]\n        \n        # Check if the first element is not already in the unique elements list\n        if first_element not in unique_elements:\n            \n            # Add the first element to the unique elements list\n            unique_elements.append(first_element)\n    \n    # Initialize an empty list to store the common first elements\n    common_elements = []\n\n    # Iterate through the unique elements list\n    for element in unique_elements:\n        \n        # Initialize a counter variable to keep track of the number of occurrences of the current element in the input list\n        count = 0\n        \n        # Iterate through the input list\n        for item in Input:\n            \n            # Check if the current element is the same as the first element of the item\n            if item[0] == element:\n                \n                # Increment the count variable\n                count += 1\n        \n        # If the count of the current element is greater than or equal to the length of the input list,\n        # then it is a common first element and needs to be added to the common elements list\n        if count >= len(Input):\n            common_elements.append(element)\n    \n    # Return the list of common first elements\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tuple_ in Input:\n        if tuple_[0] == common_element:\n            return tuple_[0]\n        elif common_element is None:\n            common_element = tuple_[0]\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a dictionary where keys are the common first elements of the tuples and values are lists of tuples containing the common elements.\n    '''\n    groups = {}\n    for tuple in Input:\n        first_element = tuple[0]\n        if first_element in groups:\n            groups[first_element].append(tuple)\n        else:\n            groups[first_element] = [tuple]\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Empty list to store common elements\n    common = []\n\n    # Iterate through the input list\n    for i in Input: \n        # Get the first element of the tuple\n        first = i[0]\n\n        # Check if the first element is already in the common list\n        if first not in common: \n            # If not, add it to the list\n            common.append(first)\n\n    # Return the common elements\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i][0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in Input:\n        if common_element is None:\n            common_element = i[0]\n        elif i[0] == common_element:\n            common_element = i[0]\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and groups the tuples based on the common first element. \n    The function returns a dictionary of grouped tuples where the keys are the common first elements and the values are lists of tuples with that common first element.\n\n    Input:\n        - Input: a list of tuples\n    \n    Output:\n        - A dictionary with keys being common first elements and values being lists of tuples with that common first element.\n    '''\n    # create an empty dictionary to store grouped tuples\n    grouped_tuples = {}\n\n    # iterate through each tuple in the input list\n    for tuple in Input:\n        # get the common first element from the tuple\n        first_element = tuple[0]\n\n        # check if the common first element is already in the dictionary\n        if first_element in grouped_tuples:\n            # if it is, add the tuple to the list of tuples with that common first element\n            grouped_tuples[first_element].append(tuple)\n        else:\n            # if not, create a new list of tuples with that common first element\n            grouped_tuples[first_element] = [tuple]\n\n    # return the grouped_tuples dictionary\n    return grouped_tuples"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_set = set()\n    for tup in Input: \n        if tup[0] in common_set: \n            common_set.remove(tup[0]) \n        else: \n            common_set.add(tup[0]) \n    return common_set"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = \"\"\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    \n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_element = lst[i]\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = ''\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = ''\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    max_length = 0 \n    max_element = None \n\n    for element in lst: \n        if len(str(element)) > max_length: \n            max_length = len(str(element)) \n            max_element = element \n\n    return max_element "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element having the maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(list1)\n    rounded_list = [round(num) for num in list1]\n    result = total_sum * len(rounded_list)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(lst):\n    # Loop through each element of the list\n    total = 0\n    for num in lst:\n        # Round the number to 2 decimal places\n        num = round(num, 2)\n        # Add the rounded number to the total\n        total += num\n    # Print the result as total sum multiplied by the length of the list\n    print(total * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_of_numbers = 0\n    for num in list1:\n        sum_of_numbers += round(num)\n    total_sum = sum_of_numbers * len(list1)\n    print(f\"The total sum is: {total_sum}\")"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        total_sum += round(number)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        total_sum += round(i)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # create a new list to store the rounded numbers\n    rounded_list = []\n    \n    # loop through each number in the input list\n    for num in list1:\n        # round the number to the nearest integer and append it to the new list\n        rounded_list.append(round(num))\n    \n    # calculate the total sum of the rounded numbers\n    total_sum = sum(rounded_list)\n    \n    # print the result\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Initialize variables\n    total_sum = 0\n    length = len(list1)\n    \n    # Loop through the list and round each number\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n    \n    # Loop through the rounded list and add the numbers together\n    for i in range(len(list1)):\n        total_sum += list1[i]\n    \n    # Print the total sum multiplied by the length of the list\n    print(total_sum * length)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Calculate the total sum of the list\n    total_sum = sum(list1)\n\n    # Round every number of the list\n    rounded_list = [round(num) for num in list1]\n\n    # Calculate the product of the rounded list and the length of the list\n    product = rounded_list[0] * len(rounded_list)\n\n    # Print the result\n    print(product)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    i = 2\n    while i <= n:\n        cube_sum += i**3\n        i += 2\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    This function finds the cube sum of the first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i ** 3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    \n    while count < n:\n        if count % 2 == 0:\n            sum_of_cubes += count**3\n        count += 1\n    \n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the cube sum of the first n even natural numbers.\n    \"\"\"\n    even_numbers = []\n    for i in range(2, n+1, 2):\n        even_numbers.append(i**3)\n    return sum(even_numbers)\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # initialize variables to store the cube sum and the sum of natural numbers\n    cube_sum = 0\n    sum_of_numbers = 0\n    \n    # iterate through the first n even natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the cube of the even number\n        cube_sum += i ** 3\n        \n        # calculate the sum of the natural numbers starting from i\n        sum_of_numbers += i\n    \n    # return the cube sum and the sum of natural numbers\n    return cube_sum, sum_of_numbers"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize the sum of cubes to zero\n    cube_sum = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(2, n+2, 2):\n        # add the cube of each even number to the sum\n        cube_sum += i**3\n    \n    # return the cube sum\n    return cube_sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ''\n    for element in test_tup:\n        delimiter += element\n    return delimiter"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter=\", \"):\n    '''\n    This function takes a tuple as input and concatenates each element by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter=\": \"):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    # create an empty list to store the concatenated elements\n    concatenated_list = []\n    # iterate through each element of the tuple\n    for element in test_tup:\n        # append the element to the concatenated_list\n        concatenated_list.append(str(element))\n    # concatenate the elements by the delimiter and return the final result\n    return delimiter.join(concatenated_list)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Initialize an empty string\n    result = ''\n    # Loop through each element of the tuple\n    for item in test_tup:\n        # Concatenate the item with the delimiter to the result\n        result += str(item) + delimiter\n    # Remove the trailing delimiter\n    result = result[:-len(delimiter)]\n    # Return the result\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Using for loop to iterate over each element of tuple\n    result = ''\n    for element in test_tup:\n        result += str(element) + ','\n    # Removing the extra comma from the result\n    result = result[:-1]\n    return result"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    count = 0  \n    for i in range(1, n+1):  \n        sum += i**3  \n        count += 1  \n    return sum/count  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = 0\n    for i in range(1, n+1):\n        cube += i**3\n    average = cube/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    sum_cube = 0  \n    for i in range(1, n+1):  \n        sum_cube += i*i*i  \n\n    average = sum_cube/n  \n    return average  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes a positive integer n as input and returns the average of cubes of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum/n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(n):\n        sum += i**3\n        count += 1\n    average = sum/count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    # loop through first n natural numbers\n    for i in range(1, n+1):\n        # calculate cube of i and add to sum variable\n        sum += i**3\n    # calculate average of cubes of first n natural numbers and return it\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total_sum = 0\n    count = 0\n\n    for i in range(1, n+1):\n        total_sum += i**3\n        count += 1\n\n    average = total_sum / count\n\n    print(\"The average of cubes of the first\", n, \"natural numbers is\", average)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        rear_indices.append(len(test_tuple[i]) - 1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for element in test_tuple:\n        rear_elements.append(element[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = []\n    for string in test_tuple:\n        rear_tuple.append(string[-1])\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tuple)):\n        result.append(test_tuple[i][-1])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str):\n            rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_index_elements = []\n    for index, value in enumerate(test_tuple):\n        if index == len(test_tuple) - 1:\n            rear_index_elements.append(value)\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        if len(test_tuple[i]) > 1:\n            rear_indices.append(len(test_tuple[i])-1)\n        else:\n            rear_indices.append(None)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted = []\n    for i in range(len(test_tuple)):\n        extracted.append(test_tuple[i][-1])\n    return extracted"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    This function takes two arguments - a list and a particular element x. \n    It then returns the count of sublists in the list that contain x.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a given list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n\n    Parameters:\n    nums (list): A list of numbers to filter.\n\n    Returns:\n    list: A new list with odd numbers from the original list.\n    \"\"\"\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    # regex to match date format in yyyy-mm-dd format\n    date_regex = r'\\d{4}-\\d{2}-\\d{2}'\n    # regex to match date format in dd-mm-yyyy format\n    new_date_regex = r'\\d{2}-\\d{2}-\\d{4}'\n    # convert date to new format\n    new_date = re.sub(date_regex, r'\\g<3>', dt)\n    # check if new date format is valid\n    if not re.match(new_date_regex, new_date):\n        raise ValueError('Invalid date format.')\n    # return new date in dd-mm-yyyy format\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_dt = re.sub(r'(\\d{2})-(\\d{2})-(\\d{4})', r'\\3-\\1-\\2', dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression pattern to match date format in yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Use re.sub() method to replace yyyy-mm-dd format with dd-mm-yyyy format\n    new_date = re.sub(pattern, lambda m: dt.strftime(\"%d-%m-%Y\"), dt)\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{2})-(\\d{2})-(\\d{4})')\n    new_date = pattern.sub(r'\\3-\\2-\\1', dt)\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define regular expression pattern\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # match pattern in input date string\n    match = re.match(pattern, dt)\n    # extract matched groups and convert to date object\n    year, month, day = int(match.group(1)), int(match.group(2)), int(match.group(3))\n    new_date = '{:02d}-{:02d}-{}'.format(day, month, year)\n    # return new date in dd-mm-yyyy format\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    match = re.search(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = f\"{day}-{month}-{year}\"\n        return new_dt\n    else:\n        return \"Invalid date format\""
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern for matching the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # find all matches of the pattern in the input string\n    matches = re.findall(pattern, dt)\n    # if there are no matches, return the original input string\n    if not matches:\n        return dt\n    # replace the first matched date with its new format\n    new_dt = re.sub(pattern, '-'.join(matches[0].split('-')[::-1]), dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Match the pattern in the given date string\n    match = re.match(pattern, dt)\n\n    # Check if the pattern is matched\n    if match:\n        # Extract the matched groups\n        year, month, day = match.groups()\n\n        # Convert the date in dd-mm-yyyy format\n        formatted_date = f'{day}-{month}-{year}'\n\n        return formatted_date\n    else:\n        # If the pattern is not matched, return the original date string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define the regex pattern to match the desired date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # search for the pattern in the date string\n    match = re.search(pattern, dt)\n    # if no match is found, return the original date string\n    if match is None:\n        return dt\n    # extract the year, month, and day from the matched substring\n    year, month, day = match.groups()\n    # reverse the order of the month and day, and then concatenate them\n    new_date = f'{day}-{month}-{year}'\n    # return the new date string in dd-mm-yyyy format\n    return new_date"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            temp = my_list[i]\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Initialize gap sequence\n    gap = n // 2\n    # Sort list using gap sequence\n    while gap > 0:\n        # Traverse through array elements\n        for i in range(gap, n):\n            temp = my_list[i]\n            # Swap elements if they are in wrong order\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce gap sequence by 1\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # Initialize gap size as n/2\n    gap = n // 2\n    \n    while gap > 0:\n        # Iterate over all subarrays of size gap\n        for i in range(gap, n):\n            # Swap adjacent elements if they are in the wrong order\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        # Decrease gap size\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Determine the length of the array\n    n = len(my_list)\n    \n    # Calculate the gap between the elements\n    gap = n // 2\n    \n    # Start iterating until the gap is 1\n    while gap > 0:\n        # Iterate over the array\n        for i in range(gap, n):\n            # Shift the elements to their correct position\n            for j in range(i, gap, gap):\n                if my_list[j] > my_list[j + gap]:\n                    # Swap the elements\n                    temp = my_list[j]\n                    my_list[j] = my_list[j + gap]\n                    my_list[j + gap] = temp\n        # Decrease the gap by 1\n        gap = gap // 2\n    \n    # Print the sorted array\n    print(\"Sorted array is:\", my_list)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if the two input tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two input tuples are not of same length!\")\n        return None\n    \n    # create an empty list to store the elementwise and tuples\n    and_list = []\n    \n    # iterate over the elements of the two input tuples\n    for i in range(len(test_tup1)):\n        # extract the elements of the two input tuples at the current index\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        \n        # check if both elements are True\n        if tup1_elem and tup2_elem:\n            # if both are True, append the elementwise and tuple to the list\n            and_list.append((tup1_elem, tup2_elem))\n    \n    # return the list of elementwise and tuples\n    return and_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Extract the length of each tuple\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n    # Check if both tuples have the same length\n    if tup1_len!= tup2_len:\n        print(\"Both tuples should have the same length\")\n        return None\n    \n    # Initialize an empty list to store the elementwise and tuples\n    result = []\n    # Iterate through each element of the first tuple\n    for i in range(tup1_len):\n        # Extract the element from the first tuple and the element from the second tuple\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        # Calculate the elementwise and of the two elements\n        and_elem = elem1 & elem2\n        # Create a tuple with the elementwise and as the first element and the original element as the second element\n        and_tup = (and_elem, elem1)\n        # Append the and_tup to the result list\n        result.append(and_tup)\n    \n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different lengths.\")\n        return\n    \n    # Create an empty list to hold the elementwise and tuples\n    and_tuples_list = []\n    \n    # Extract the elementwise and tuples for each element in the two tuples\n    for i in range(len(test_tup1)):\n        and_tuples_list.append((test_tup1[i] & test_tup2[i]))\n    \n    # Return the elementwise and tuples as a tuple\n    return tuple(and_tuples_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the two input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two input tuples have different lengths.\"\n    \n    # Extract the elementwise and tuples\n    and_tup = tuple(x1 & x2 for x1, x2 in zip(test_tup1, test_tup2))\n    \n    # Return the extracted and_tup\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Extract the length of the tuples\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n    \n    # Create a new list to store the result tuples\n    and_tup_list = []\n    \n    # Check if the length of the tuples are equal\n    if tup1_len == tup2_len:\n        # Compare each element of the two tuples\n        for i in range(tup1_len):\n            # Extract the elements of the tuples\n            tup1_elem = test_tup1[i]\n            tup2_elem = test_tup2[i]\n            \n            # Check if both elements are true or both are false\n            if (tup1_elem and tup2_elem):\n                # If both elements are true, append True to the list\n                and_tup_list.append(True)\n            else:\n                # If at least one of the elements is false, append False to the list\n                and_tup_list.append(False)\n    else:\n        # If the length of the tuples is not equal, return an error message\n        return \"Error: The two tuples are not of equal length.\"\n    \n    # Return the list of result tuples\n    return and_tup_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (test_tup1[i], test_tup2[i])\n    return result_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # check if the discriminant is negative\n    if discriminant < 0:\n        print(\"The parabola has no real roots.\")\n    elif discriminant == 0:\n        print(\"The directrix of the parabola is\", -b/2/a)\n    else:\n        # calculate the two roots of the discriminant\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        # sort the roots in ascending order\n        roots = sorted([root1, root2])\n        \n        # print the two roots\n        print(\"The directrix of the parabola is between\", roots[0], \"and\", roots[1])"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # check if the discriminant is positive\n    if disc > 0:\n        # calculate the two roots of the discriminant\n        root1 = (-b + disc**0.5) / (2*a)\n        root2 = (-b - disc**0.5) / (2*a)\n\n        # sort the roots in ascending order\n        if root1 > root2:\n            root1, root2 = root2, root1\n\n        # return the directrix\n        return root1\n    else:\n        # if the discriminant is negative, the parabola has no real roots\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return \"No real root.\"\n    elif delta == 0:\n        return \"One real root.\"\n    else:\n        return \"Two real roots:\" + str((-b + delta**0.5)/(2*a)) + \" and \" + str((-b - delta**0.5)/(2*a))\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        print(\"There is no real root.\")\n    elif discriminant == 0:\n        x = -b/(2*a)\n        print(\"The directrix is\", x)\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix is\", x1, \"and\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Find the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is real\n    if discriminant > 0:\n        # Calculate the directrix\n        directrix = (-b + discriminant**0.5)/(2*a)\n        print(\"The directrix of the parabola is:\", directrix)\n    \n    elif discriminant == 0:\n        # Calculate the directrix\n        directrix = -b/(2*a)\n        print(\"The directrix of the parabola is:\", directrix)\n    \n    else:\n        # The discriminant is negative\n        print(\"The parabola has no real root.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive or negative, and if so, return a message\n    if discriminant > 0:\n        return f\"The directrix of the parabola is {(-b + discriminant**0.5)/(2*a)}. It is above the x-axis.\"\n    elif discriminant < 0:\n        return f\"The directrix of the parabola is {(-b - discriminant**0.5)/(2*a)}. It is below the x-axis.\"\n    else:\n        return f\"The directrix of the parabola is {(-b)/(2*a)}. It lies on the x-axis.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = -b/2*a\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n\n    Parameters:\n    a (float): The first coefficient of the quadratic term.\n    b (float): The second coefficient of the quadratic term.\n    c (float): The third coefficient of the quadratic term.\n\n    Returns:\n    float: The directrix of the parabola.\n    '''\n\n    disc = b**2 - 4*a*c\n    \n    if disc > 0:\n        return (-b + disc**0.5)/(2*a)\n    elif disc < 0:\n        return (-b - disc**0.5)/(2*a)\n    else:\n        return \"The quadratic equation has no real root\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    if determinant < 0:\n        return \"The parabola has no directrix\"\n    elif determinant == 0:\n        x = -b / (2*a)\n        return f\"The directrix is {x}\"\n    else:\n        x1 = (-b + determinant**0.5) / (2*a)\n        x2 = (-b - determinant**0.5) / (2*a)\n        return f\"The directrix is {x1} and {x2}\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # If the discriminant is positive, there is a real solution\n    if disc > 0:\n        # Calculate the two roots\n        root1 = (-b + disc**0.5) / (2*a)\n        root2 = (-b - disc**0.5) / (2*a)\n        \n        # Sort the roots in ascending order\n        if root1 > root2:\n            root1, root2 = root2, root1\n        \n        # Print the two roots\n        print(\"The directrix of the parabola is\", root1)\n        print(\"The directrix of the parabola is\", root2)\n    \n    # If the discriminant is zero, there is a unique solution\n    elif disc == 0:\n        root = (-b) / (2*a)\n        \n        # Print the root\n        print(\"The directrix of the parabola is\", root)\n    \n    # If the discriminant is negative, there are no real or unique solutions\n    else:\n        print(\"There are no real or unique solutions to the equation.\")"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1.intersection(set2))"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    # Create a set from each list, to remove duplicates and ensure they are both ordered\n    list1_set = set(list1)\n    list2_set = set(list2)\n    \n    # Check if the intersection of the two sets is empty (i.e. there are no common elements)\n    if not list1_set.intersection(list2_set):\n        return False\n    \n    # If we get here, there are common elements, so return True\n    return True"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if not list1 or not list2:\n        return False\n    common = False\n    for item in list1:\n        if item in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for num in list1:\n        if num in list2:\n            common.append(num)\n    for num in list2:\n        if num in list1:\n            common.append(num)\n    if len(common) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    if not list1 or not list2:\n        return False\n    \n    # Convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Check if any element is in both sets\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set from list1 to remove duplicates\n    set1 = set(list1)\n\n    # Iterate over list2 and check if it's in set1\n    for element in list2:\n        if element in set1:\n            return True\n\n    # If we get here, there was no common element\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    if not list1 or not list2:\n        return False\n\n    for elem in list1:\n        if elem in list2:\n            return True\n\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n    \n    # Calculate the areas of the left and right trapezium halves\n    left_area = 0.5 * base1 * height\n    right_area = 0.5 * base2 * height\n    \n    # Calculate the difference between the areas of the two trapezium halves\n    difference = abs(left_area - right_area)\n    \n    # Calculate the total area of the trapezium\n    total_area = left_area + right_area\n    \n    # Calculate the ratio of the total area to the area of the trapezium\n    ratio = total_area / area\n    \n    # Calculate the median of the height of the trapezium by taking the ratio of the difference\n    median = 0.5 * height * ratio\n    \n    # Return the median of the height of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    # Calculate the lengths of the trapezium's base and height\n    base = base1 + base2\n    height = height / 2\n    \n    # Calculate the length of the trapezium's upper half\n    upper_half = base * height\n    \n    # Calculate the length of the trapezium's lower half\n    lower_half = base1 * height + base2 * height\n    \n    # Calculate the length of the trapezium's trapezium\n    trapezium = upper_half + lower_half\n    \n    # Calculate the lengths of the two trapezium halves\n    half1 = upper_half / 2\n    half2 = lower_half / 2\n    \n    # Calculate the median of the two trapezium halves\n    median = max(half1, half2)\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the length of the median of a trapezium given its base lengths and height.\n    '''\n    # Calculate the length of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # Calculate the length of the left and right halves of the trapezium\n    left_half = 0.5 * base1\n    right_half = 0.5 * (base1 + base2)\n    # Calculate the number of triangles in the trapezium\n    num_triangles = 2 * height\n    # Calculate the sum of the lengths of the left and right halves of each triangle\n    left_sum = 0\n    right_sum = 0\n    for i in range(int(num_triangles)):\n        left_sum += left_half\n        right_sum += right_half\n    # Calculate the length of the median using the formula for the median of three medians\n    median = (right_sum + left_sum) / 3\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height\n\n    # Calculate the length of the first half of the trapezium\n    half_height = height / 2\n    left_half_length = 0.5 * (base1 + base2)\n\n    # Calculate the length of the second half of the trapezium\n    right_half_length = 0.5 * (base1 + base2)\n\n    # Calculate the length of the smaller half\n    if half_height > left_half_length:\n        smaller_half_length = left_half_length\n    else:\n        smaller_half_length = half_height\n\n    # Calculate the length of the larger half\n    larger_half_length = right_half_length - smaller_half_length\n\n    # Calculate the length of the trapezium\n    total_length = larger_half_length + smaller_half_length\n\n    # Calculate the median length of the trapezium\n    median_length = 0.5 * total_length\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5*(base1+base2)*(height/2)\n    return 2*area\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Find the length of the shorter base\n    shorter_base = min(base1, base2)\n    \n    # Find the length of the longer base\n    longer_base = max(base1, base2)\n    \n    # Find the length of the trapezium\n    trapezium_length = 2 * shorter_base + 2 * longer_base\n    \n    # Calculate the area of the trapezium using Heron's formula\n    herons_formula = (shorter_base + longer_base) * 0.5 * (trapezium_length / 2)**2\n    \n    # Calculate the median length of the trapezium using the area formula\n    median_length = 2 * (area - herons_formula) / area\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    area_of_trapezium = 0.5 * (area + base1 + base2)\n    median_length = math.sqrt(area_of_trapezium)\n    return median_length\n\nprint(median_trapezium(5, 8, 12))  # Output: 10.0"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # calculate the length of the trapezium\n    length = 0.5 * (base1 + base2) * height\n    # calculate the area of the base of the trapezium\n    base_area = 0.5 * base1 * base2\n    # calculate the height of the base of the trapezium\n    base_height = (height - area) / base_area\n    # calculate the length of the base of the trapezium\n    base_length = base_area * base_height\n    # calculate the length of the base of the trapezium with base1 = base2\n    base_length1 = 0.5 * base1 * base2\n    # calculate the length of the base of the trapezium with base1 = base2\n    base_length2 = (height - area) / 0.5\n    # calculate the length of the trapezium with base1 = base2\n    length1 = 0.5 * (base1 + base2) * base_height\n    # calculate the length of the trapezium with base1 = base2\n    length2 = 0.5 * (base1 + base2) * base_height + 0.5 * base_length1 * (base1 + base2) / 2\n    # calculate the median length of the trapezium\n    median_length = 0.5 * (length1 + length2)\n    # return the median length\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # calculate the length of the base of the first trapezium\n    length1 = area / base1\n\n    # calculate the length of the base of the second trapezium\n    length2 = area / base2\n\n    # calculate the sum of the two lengths\n    total_length = length1 + length2\n\n    # calculate the length of the third trapezium (which is half the sum of the two)\n    length3 = total_length / 2\n\n    return length3"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n\n    # Calculate the area of the smaller base\n    smaller_area = (base1 + base2) * height\n\n    # Calculate the difference in area between the two trapeziums\n    difference = smaller_area - area\n\n    # Return the median length of the trapezium\n    return abs(difference)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if type(number)!= int:\n        print(\"Invalid input. Please enter an integer.\")\n        return\n    \n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    \n    if greater:\n        print(number, \"is greater than the elements of the array.\")\n    else:\n        print(number, \"is not greater than the elements of the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            print(f\"{number} is greater than {i}\")\n            break\n    else:\n        print(f\"{number} is not greater than any element of the array\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for element in arr:\n        if element > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for i in arr:\n        if i > number:\n            count += 1\n    if count > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    # loop through the array and check if the number is greater than each element\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return True\n    \n    # if the number is greater than all the elements in the array, return False\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return any(x > number for x in arr)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a[b]*\"\n    return re.findall(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return 'The string has an a followed by one or more b\\'s.'\n    else:\n        return 'The string does not have an a followed by one or more b\\'s.'"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba.*b\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    result = re.findall(pattern, text)\n    if result:\n        return result[0]\n    else:\n        return None"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function finds the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer n and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer 'n' as input and returns the last digit of 'n'.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # initialize an empty string to store the even characters\n    even_chars = \"\"\n    \n    # iterate over each character in the input string\n    for char in str1:\n        # if the character is even, append it to the even_chars string\n        if char % 2 == 0:\n            even_chars += char\n        # if the character is odd, do nothing, since we want to remove it\n    return even_chars"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum() or char.isspace():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Create an empty string to store the new string\n    new_str = \"\"\n    # Loop through each character in the original string\n    for char in str1:\n        # Check if the character is odd\n        if char % 2!= 0:\n            # If it is, add it to the new string\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_chars = [char for char in str1 if ord(char) % 2!= 0]\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if int(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isalnum():\n            if int(char) % 2 == 0:\n                result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the result\n    result = \"\"\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is odd (i.e. greater than 0)\n        if char % 2 == 0:\n            # if it is, add it to the result string\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][j] == test_list[j][i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    # Initialize a dictionary to store the count of each tuple pair\n    count_dict = {}\n    # Iterate over the list of tuples\n    for tup1 in test_list:\n        # Iterate over the remaining tuples\n        for tup2 in test_list[test_list.index(tup1)+1:]:\n            # Check if the tuples are in the dictionary\n            if tup1 < tup2:\n                # If they are, increment the count in the dictionary\n                if tup1 in count_dict:\n                    count_dict[tup1] += 1\n                else:\n                    count_dict[tup1] = 1\n                # Check if the tuples are reversed and in the dictionary\n                if tup2 in count_dict:\n                    count_dict[tup2] += 1\n                else:\n                    count_dict[tup2] = 1\n    # Return the dictionary of count of each tuple pair\n    return count_dict"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j] and test_list[j] == test_list[i][::-1]:\n                bidirectional_pairs += 1\n    return bidirectional_pairs"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] in test_list[j] and test_list[j] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][1], test_list[j][1]) in test_list or (test_list[j][1], test_list[i][1]) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    multiple = 1\n    for num in L:\n        multiple *= num\n    return multiple"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for x in L:\n        result *= x\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize variable to store the result\n    result = 0\n    \n    # iterate over each element in the list\n    for num in L:\n        # multiply the current element by 10 and add to the result\n        result += num * 10\n    \n    # return the result as an integer\n    return int(result)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    multiple = 1\n    single = 0\n    for num in L:\n        multiple *= num\n        if multiple == num:\n            single += num\n        else:\n            multiple = 1\n    return single"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = r'\\b(adverbial|adverbially|adverbially\\s+to|adverbially\\s+to\\s+the|adverbially\\s+to\\s+the\\s+point|adverbially\\s+to\\s+the\\s+point\\s+of|adverbially\\s+to\\s+the\\s+point\\s+of\\s+view|adverbially\\s+to\\s+the\\s+point\\s+of\\s+view\\s+of|adverbially\\s+to\\s+the\\s+point\\s+of\\s+view\\s+of\\s+the|adverbially\\s+to\\s+the\\s+point\\s+of\\s+view\\s+of\\s+the\\s+point|adverbially\\s+to\\s+the\\s+point\\s+of\\s+view\\s+of\\s+the\\s+point\\s+of)\\b'\n\n    # Use the `re.findall()` function to find all matches of the pattern in the text\n    matches = re.findall(adverb_pattern, text)\n\n    # Initialize an empty list to store the adverb positions\n    adverb_positions = []\n\n    # Loop through the matches and extract the positions\n    for match in matches:\n        # Use slicing to extract the position of the match in the text\n        position = text.find(match)\n\n        # Add the position to the list of adverb positions\n        adverb_positions.append(position)\n\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expression to find the first adverb in the sentence\n    pattern = r'(\\b[A-Z][a-z]*\\b)(\\s|$)'\n    match = re.search(pattern, text)\n\n    # If no adverb is found, return None\n    if not match:\n        return None\n    \n    # Extract the adverb and its position from the match object\n    adverb = match.group(1)\n    position = match.start(2)\n    \n    # Return the adverb and its position\n    return adverb, position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function will take a sentence as input and return the position of the first adverb in that sentence.\n    '''\n\n    # Define regular expression for adverbs\n    adverb_pattern = re.compile(r'\\b(also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for identifying adverbs\n    pattern = r'\\b\\w*adverb\\w*\\b'\n    \n    # Use the regular expression to find all the matches in the text\n    matches = re.findall(pattern, text)\n    \n    # Create a list to store the adverb and its position in the sentence\n    adverbs = []\n    \n    # Iterate through all the matches and add the adverb and its position to the list\n    for match in matches:\n        # Split the match into words\n        words = match.split()\n        \n        # Check if the first word is an adverb\n        if words[0] in ['very', 'quite', 'rarely','seldom','sometimes', 'rarely', 'often', 'frequently','regularly']:\n            # Get the position of the adverb in the sentence\n            pos = text.find(match)\n            \n            # Add the adverb and its position to the list\n            adverbs.append((match, pos))\n    \n    # Sort the list of adverbs based on their position in the sentence\n    adverbs.sort(key=lambda x: x[1])\n    \n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence using regex\n    matches = re.findall('\\b[A-Z][a-z]*\\b', text)\n    \n    # Iterate over the matches and find their positions in the sentence\n    for i, match in enumerate(matches):\n        # Remove any leading or trailing white spaces from the match\n        match = match.strip()\n        \n        # Find the index of the match in the text\n        index = text.find(match)\n        \n        # Calculate the position of the match in the sentence\n        position = index + len(match)\n        \n        # Print the adverb and its position in the sentence\n        print(f'{match} - {position}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = re.compile(r'\\b(?:adv|adv\\.?|adv\\.|adv\\.|adv\\.|adv\\.)\\b', re.IGNORECASE)\n\n    # Find all the adverbs in the given text\n    adverbs = re.findall(adverb_pattern, text)\n\n    # Find the index of the first adverb in the list\n    index = text.lower().find(adverbs[0])\n\n    # Return the adverb and its position in the sentence\n    return adverbs[0], index"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define the regular expression pattern to find adverbs\n    pattern = r'\\b\\w*ly\\b|\\b\\w*ed\\b|\\b\\w*er\\b|\\b\\w*est\\b|\\b\\w*estly\\b|\\b\\w*fully\\b|\\b\\w*fullyer\\b'\n\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # If there are no matches, return None\n    if not matches:\n        return None\n\n    # If there is only one match, return the position of the adverb\n    if len(matches) == 1:\n        return matches[0].lower()\n\n    # If there are multiple matches, find the position of the first adverb\n    for match in matches:\n        match_lower = match.lower()\n        if match_lower in ['ed', 'est', 'fully', 'fullyer']:\n            return match_lower\n\n    # If no adverb was found, return None\n    return None\n"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define regular expression pattern for adverbs\n    pattern = r'\\b(?:adverb)\\b'\n\n    # Find all adverbs in the given sentence\n    adverbs = re.findall(pattern, text)\n\n    # Find the first adverb and their positions in the sentence\n    for index, adverb in enumerate(adverbs):\n        print(f\"{adverb} found at position: {index}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = re.compile(r'\\b(adverb|adv)\\b')\n    \n    # Find all matches of the pattern in the text\n    matches = pattern.findall(text)\n    \n    # If there are no matches, return an empty list\n    if not matches:\n        return []\n    \n    # Find the positions of all matches in the text\n    positions = [match.start() for match in pattern.finditer(text)]\n    \n    # Sort the positions in ascending order\n    positions.sort()\n    \n    # Extract the adverbs from the matches and their positions\n    adverbs = [match for match in matches for i in range(len(match))]\n    \n    # Return the adverbs and their positions as a dictionary\n    return {adverb: position for position, adverb in zip(positions, adverbs)}"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define a regular expression to match adverbs\n    adverb_pattern = r'(?:^|\\W)(?:adverb|adv)(?:s|)(?=[\\w.,!?:;])'\n\n    # Use the regular expression to find all matches in the text\n    matches = re.findall(adverb_pattern, text)\n\n    # Initialize an empty list to store adverb positions\n    adverb_positions = []\n\n    # Loop through each match\n    for match in matches:\n        # Use the `split` method to split the match into two parts: the adverb and the rest of the text\n        split_match = match.split()\n\n        # Check if the first part is an adverb\n        if split_match[0] in ['adverb', 'adv']:\n            # If it is, add its position to the list\n            adverb_positions.append(text.index(match))\n\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of the cube using Heron's formula\n    s = (l**2)*6\n    \n    return s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l  # Formula for surface area of a cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l + 6 * l * math.sqrt(3) + 4 * math.sqrt(3) * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l + 12 * l * l + 8 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_numbers = array('i')\n    count = 0\n    for num in nums:\n        if num > 0:\n            positive_numbers.append(num)\n            count += 1\n    if count == 0:\n        return 0.0\n    else:\n        return positive_numbers.item(count-1) / count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = []\n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n    pos_count = len(pos_nums)\n    total_count = len(nums)\n    return pos_count/total_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = array('i') # initialize an array to store positive numbers\n    negative = array('i') # initialize an array to store negative numbers\n    count = 0\n\n    # loop through the array and classify the numbers\n    for num in nums:\n        if num > 0:\n            positive.append(num)\n        elif num < 0:\n            negative.append(num)\n        else:\n            count += 1\n\n    # calculate the ration of positive numbers\n    if positive:\n        pos_ratio = len(positive) / (len(positive) + len(negative))\n    else:\n        pos_ratio = 0\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list to work with it\n    nums = list(nums)\n\n    # Initialize the count and sum of positive numbers\n    count = 0\n    sum_pos = 0\n\n    # Iterate over the array and count the positive numbers and the sum of positive numbers\n    for num in nums:\n        if num > 0:\n            count += 1\n            sum_pos += num\n\n    # Calculate the ration of positive numbers\n    if count > 0:\n        ration = sum_pos / count\n    else:\n        ration = 0\n\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize empty array to store positive numbers\n    pos_nums = []\n\n    # Iterate over each element in the array\n    for num in nums:\n        # If the element is positive, add it to the pos_nums array\n        if num > 0:\n            pos_nums.append(num)\n\n    # Find the ration of positive numbers in the array\n    pos_count = len(pos_nums)\n    total_count = len(nums)\n    ratio = pos_count / total_count\n\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    count = array('i')\n    for num in nums:\n        if num > 0:\n            count.append(1)\n        else:\n            count.append(0)\n    total_count = sum(count)\n    positive_ratio = total_count / n\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Convert the input array to an array of integers\n    nums = array('i', nums)\n\n    # Find the total number of integers in the array\n    total_ints = len(nums)\n\n    # Find the total number of positive integers in the array\n    positive_count = sum(nums)\n\n    # Calculate the ration of positive integers to total integers\n    positive_ratio = positive_count / total_ints\n\n    # Return the positive ration as a floating point number\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the input array to an array of integers\n    arr = array('i', nums)\n    \n    # Count the number of positive numbers\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    \n    # Calculate the ration of positive numbers\n    ratio = count / len(arr)\n    \n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -float('inf')\n    for num in list1:\n        if num < 0:\n            if num > max_neg:\n                max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -float('inf') # initialize max_neg to negative infinity\n    for num in list1:\n        if num < 0 and num > max_neg: # if current number is negative and greater than max_neg\n            max_neg = num # update max_neg to current number\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0:\n            if num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number from the list.\n    \"\"\"\n    largest = None\n    for i in list1:\n        if i < 0 and (largest is None or i > largest):\n            largest = i\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i, tuple_ in enumerate(test_list):\n        if len(tuple_) > K:\n            test_list[i] = tuple_(tuple_[:K])\n        elif len(tuple_) < K:\n            test_list[i] = tuple_(tuple_ + (K - len(tuple_)) * tuple([None]))"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # initialize an empty list to store the trimmed tuples\n    trimmed_list = []\n    \n    # loop through the tuples in the list\n    for tup in test_list:\n        # trim each tuple by k using the tuple packing method\n        trimmed_tup = tuple(tup)[:K]\n        # add the trimmed tuple to the list of trimmed tuples\n        trimmed_list.append(trimmed_tup)\n    \n    # return the list of trimmed tuples\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        new_tup = tup[:-K]\n        result.append(new_tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n\n    Args:\n    test_list: list of tuples to be trimmed\n    K: integer value to trim the tuples by\n\n    Returns:\n    list of trimmed tuples\n\n    \"\"\"\n    trimmed_list = []\n    for tuple in test_list:\n        trimmed_tuple = tuple[0:K]\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = (test_list[i][j][0], max(test_list[i][j][1] - K, 0))\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n\n    Args:\n    test_list (list): A list of tuples.\n    K (int): The number of elements to remove from the beginning of each tuple.\n\n    Returns:\n    list: A new list with the trimmed tuples.\n    \"\"\"\n\n    new_list = []\n\n    for tup in test_list:\n        new_tup = tup[K:]\n        new_list.append(new_tup)\n\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = (test_list[i][j][0], test_list[i][j][1][K:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j % K == 0:\n                test_list[i] = tuple(test_list[i][:j] + test_list[i][j+K:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i]) - K):\n            test_list[i] = test_list[i][:j] + test_list[i][j + K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + (test_list[i][-K:],))\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function performs index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Check if the input tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have same length.\")\n        return\n\n    # Initialize the result tuple\n    result_tup = ()\n\n    # Perform the index wise multiplication\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize a new tuple with the same length as the smaller tuple\n    result_tup = tuple(i*j for i,j in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_list = []\n    for item in lst:\n        if item in count_dict:\n            count_list.append(count_dict[item])\n        else:\n            count_list.append(0)\n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # initialize a dictionary to store the count of each element in the tuple\n    count_dict = Counter(tup)\n\n    # count the occurrence of each element in the list\n    count_lst = []\n    for elem in lst:\n        if elem in count_dict:\n            count_lst.append(count_dict[elem])\n        else:\n            count_lst.append(0)\n\n    # return the list of counts\n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    lst_count = Counter(lst)\n    final_dict = {key: count_dict[key] - lst_count[key] if key in lst_count else count_dict[key] for key in count_dict}\n    return final_dict "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) \n    return dict(count)\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as inputs.\n    The function counts the occurrence of all elements of the list in the tuple.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    tup_set = set(tup)\n    # Convert the list to a set to remove duplicates\n    lst_set = set(lst)\n\n    # Use Counter function from the collections module to count the occurrence of elements in the tuple\n    counter = Counter(tup_set)\n\n    # Find the number of elements in the list that occur more than once in the tuple\n    count = sum([1 for x in counter if lst_set.intersection(counter[x])])\n\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for elem in tup:\n        if elem in lst:\n            count_dict[elem] = count_dict.get(elem, 0) + 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    for item in lst:\n        if item in counter:\n            counter[item] += 1\n    return counter"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # initialize an empty list to hold the cubes of the input numbers\n    cubes = []\n    # iterate over each number in the input list\n    for num in nums:\n        # calculate the cube of the current number and append it to the cubes list\n        cubes.append(num**3)\n    # return the cubes list\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrins = [1, 5, 10, 20, 50, 100]\n    total = 0\n    for i in range(1, n+1):\n        total += perrins[i-1]\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n\n    # initialize the sum to zero\n    sum = 0\n\n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # if the number is a perrin number, add it to the sum\n        if is_perrin(i):\n            sum += i\n\n    # return the sum of perrin numbers\n    return sum\n\ndef is_perrin(n):\n    \"\"\"\n    Check if a given number is a perrin number or not.\n    \"\"\"\n\n    # check if the number is divisible by 3 or 5\n    if n % 3 == 0 or n % 5 == 0:\n        return False\n\n    # initialize the sum to zero\n    sum = 0\n\n    # loop through the digits of the number\n    while n > 0:\n        # add the last digit to the sum\n        sum += n % 10\n\n        # move to the next digit and remove it from the number\n        n //= 10\n\n    # check if the sum is divisible by 11\n    return sum % 11 == 0"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin = [1, 2, 1, 4, 5, 1, 6, 1, 2, 1, 8, 1, 10, 1, 2, 1, 12, 1, 2, 1, 14, 1, 16, 1, 18, 1, 20, 1, 22, 1, 24, 1, 26, 1, 28, 1, 30, 1, 32, 1, 34, 1, 36, 1, 38, 1, 40, 1, 42, 1, 44, 1, 46, 1, 48, 1, 50, 1, 52, 1, 54, 1, 56, 1, 58, 1, 60, 1, 62, 1, 64, 1, 66, 1, 68, 1, 70, 1, 72, 1, 74, 1, 76, 1, 78, 1, 80, 1, 82, 1, 84, 1, 86, 1, 88, 1, 90, 1, 92, 1, 94, 1, 96, 1, 98, 1, 100]\n    return sum(perrin[:n+1])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_numbers = []\n    perrin_numbers.append(1)\n    sum_perrin_numbers = 0\n    for i in range(2, n+1):\n        perrin_numbers.append(2 * perrin_numbers[-1] - 1)\n        sum_perrin_numbers += perrin_numbers[-1]\n    return sum_perrin_numbers\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i ** 3\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    p = 1\n    for i in range(1, n+1):\n        sum += p\n        p += 2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 4, 16, 64, 256, 1024, 4096, 16384, 65536, 262144, 1048576, 4194304, 16777216, 67108864, 268435456, 1073741824, 4294967296, 17179869184, 68719476736, 274877906944, 1099511627776, 4398046511104, 17592186044416, 70368744177664, 281474976710656, 1125899906842624, 4503599627370496, 18014398509481984, 72057594037927936, 288230376151711744, 1152921504606846976, 4611686018427387904, 1835004162584556672, 7378697629483820672, 2951479051793528256, 11805916207174113034, 47223664828696452128, 18685698022208692224, 75520862833185249280, 30223145490365729280, 120995018598807680000, 483570327845851673600, 1902228984926962990080, 7726531321645695232000, 3094157692338227371776, 123994939174342260684800, 495115264980365160960000, 193603358279705863705856, 790208170196826720838656, 3167336158713545577118720, 12714876683553277851688192, 50687397019543800832901120, 197006465671710338604974080, 807904221297863397739530240, 3241792458622622879260403200, 1303573156278977041366126080"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0 \n    for i in range(1, n+1): \n        sum += i \n    return sum "
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin = [1, 3, 5, 7, 9]\n    total_sum = 0\n\n    for num in perrin:\n        total_sum += num\n\n    return total_sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size as input\n    and returns a new list containing the specified size extracted strings\n    from the input list.\n    '''\n    return str_list[:size]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n    \"\"\"\n    return [s[0:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    return [string[:size] for string in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str_list[i:i+size] for i in range(0, len(str_list), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in l:\n        result.append(s[:l[0]])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) >= l[0]:\n            result.append(l[i][:l[0]])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and extracts the specified size of strings from it.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) >= l[0]:\n            result.append(l[i][:l[0]])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a size as input and returns a list of strings of specified size.\n    \"\"\"\n    return [x for x in str_list if len(x) == size]"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s+','', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Replace all whitespaces with a single space\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text)\n"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regex to remove all whitespaces from the string\n    text = re.sub('\\s+','', text)\n    # Remove leading and trailing whitespaces from the string\n    text = text.strip()\n    # Return the modified string\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s+','', text) # remove multiple whitespaces\n    text = re.sub(r'\\s', '', text) # remove single whitespaces\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    This function removes all whitespaces from the given string.\n\n    :param text1: The string from which whitespaces have to be removed.\n    :type text1: str\n    :return: The modified string with all whitespaces removed.\n    :rtype: str\n    \"\"\"\n    # Using regular expressions to remove all whitespaces\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    # Remove extra whitespaces at the end of the string\n    text3 = re.sub(r'\\s+$', '', text2)\n    # Remove extra whitespaces at the beginning of the string\n    text4 = re.sub(r'^ +', '', text3)\n    # Return the final string\n    return text4"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expression\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = actual_cost / sale_amount\n    loss_amount = (100 - loss_percentage) * sale_amount\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount: \n        return actual_cost - sale_amount \n    else: \n        return 0 "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes an integer input n and returns the sum of even factors of n.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (i+2) == 0:\n            sum += i + n // i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    even_factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            even_factors.append(i)\n            n //= i\n\n    if n > 1:\n        even_factors.append(n)\n\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (2*i) == 0:\n            even_factors += i\n    return even_factors\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    # loop through odd factors of n\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        # check if i divides n\n        if n % i == 0:\n            # if yes, add it to sum\n            sum += i\n    # return sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumOfFactors(n):\n    '''\n    This function takes an integer as input and returns the sum of all even factors of the input number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # loop through all even factors of n\n    evenFactors = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            evenFactors += i\n            evenFactors += n // i\n            \n    # return the sum of even factors\n    return evenFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # initializing sum variable to zero\n    sum = 0\n\n    # looping through odd factors of n\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        # checking if the number is divisible by odd factor i\n        if n % i == 0:\n            # checking if the factor is even\n            if i % 2 == 0:\n                # adding the even factor to the sum\n                sum += i\n\n    # returning the sum of even factors of n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and n//i == i:\n            even_factors += i\n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumOfEvenFactors(n):\n    '''\n    This function finds the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and n%2 == 0:\n            total += n//i\n    return total"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+\\b\\w+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b(z)\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w+z\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input and returns a boolean value indicating whether the string contains a word that contains 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b\\s*\\b[zZ]\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\w*z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-z]*z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = r'\\b(z)\\w*\\b'\n    matches = re.findall(regex, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    match_obj = re.search(pattern, text)\n    if match_obj:\n        return match_obj.group()\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 0:\n        return False\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif monthnum in [4, 6, 9, 11]:\n        return 30\n    elif monthnum == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return 29\n        else:\n            return 28"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check if the month number is within range\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    \n    # check if the month number contains 31 days\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    \n    return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        if monthnum2 in [4,6,9,11]:\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # create a dictionary to store the number of days in each month\n    days_in_month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    \n    # check if the given month number is in the dictionary\n    if monthnum2 in days_in_month:\n        # check if the month number contains 31 days\n        if days_in_month[monthnum2] == 31:\n            return True\n        else:\n            return False\n    else:\n        # if the given month number is not in the dictionary, return False\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"31\"\n    elif monthnum2 in [4, 6, 9, 11]:\n        return \"30\"\n    elif monthnum2 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return \"29\"\n        else:\n            return \"28\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    if 1 <= monthnum2 <= 12:\n        if monthnum2 % 2 == 0:\n            return \"31 days\"\n        else:\n            return \"30 days\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        raise ValueError('Invalid month number.')"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if len(str(monthnum2)) == 2:\n        if monthnum2 == \"01\":\n            return True\n        elif monthnum2 == \"03\" or monthnum2 == \"05\" or monthnum2 == \"07\" or monthnum2 == \"08\" or monthnum2 == \"10\" or monthnum2 == \"12\":\n            return False\n        else:\n            if int(monthnum2[0]) % 4 == 0 and (int(monthnum2[0]) % 100!= 0 or int(monthnum2[0]) % 400 == 0):\n                return True\n            else:\n                return False\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # loop through each string in the list\n    for i in range(len(stringlist)):\n        # reverse the string using the split() and join() functions\n        stringlist[i] = stringlist[i][::-1]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list of sublists as input and returns the sublist with minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    min_len = float('inf') # assuming all sublists have at least one element\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf') #initialize minimum length as infinity\n    min_sublist = None #initialize minimum sublist as None\n    \n    for sublist in lst:\n        if len(sublist) < min_len: #if length of sublist is less than minimum length\n            min_len = len(sublist) #update minimum length\n            min_sublist = sublist #update minimum sublist\n    \n    return min_sublist #return the minimum sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = float('inf')\n    min_sublist = None\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as an argument and returns the sublist having the minimum length.\n    '''\n    sub_lst = []\n    min_len = len(lst)\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            sub_lst = lst[i]\n    return sub_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # create an empty list to store the sublists\n    min_list = []\n    # loop through the list\n    for i in range(len(lst)):\n        # loop through the remaining elements in the list\n        for j in range(i+1, len(lst)):\n            # check if the sublist with elements i and j is smaller than the current minimum\n            if len(lst[i:j+1]) < len(min_list) or (len(lst[i:j+1]) == len(min_list) and lst[i:j+1] < min_list):\n                min_list = lst[i:j+1]\n    # return the minimum sublist\n    return min_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function takes a list as input and returns the sublist \n    having minimum length. If there are multiple sublists with the same \n    minimum length, then it returns the sublist with the smallest value.\n    \"\"\"\n    min_length = float('inf')  # initialize minimum length to infinity\n    min_sublist = []  # initialize empty list for minimum sublist\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)  # update minimum length\n            min_sublist = sublist  # update minimum sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Initializing minimum length and sublist variables\n    min_len = lst[0]\n    min_sublist = lst\n\n    # Loop through the list\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    # Initialize the minimum sublist with first element\n    min_sublist = [lst[0]]\n\n    # Iterate over the list from second element onwards\n    for i in range(1, len(lst)):\n        # Check if the current element is smaller than the current minimum sublist\n        if lst[i] < min_sublist[-1]:\n            # If yes, update the minimum sublist with the current element\n            min_sublist = [lst[i]]\n        else:\n            # If no, check if the current element can be added to the current minimum sublist\n            for j in range(len(min_sublist)-1, -1, -1):\n                if min_sublist[j] > lst[i]:\n                    min_sublist.insert(j+1, lst[i])\n                    break\n                elif min_sublist[j] == lst[i]:\n                    # If the element is already in the current minimum sublist, remove the last element and break\n                    min_sublist.pop()\n                    break\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(length, width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * width"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length * breadth\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes in two parameters, length and breadth, and returns the area of a rectangle.\n    '''\n    return length * breadth"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expressions to find all uppercase substrings\n    uppercase_substrings = re.findall(r'[A-Z]+', string)\n    # Remove uppercase substrings from the string and return the result\n    return re.sub(r'[A-Z]+', '', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use a regular expression to match uppercase substrings\n    pattern = r'(?i)\\b[A-Z]+\\b'\n    # Use the pattern to find all uppercase substrings\n    matches = re.findall(pattern, str1)\n    # Remove the uppercase substrings from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression pattern for uppercase substrings\n    pattern = r'[A-Z]+'\n    \n    # Use the re.sub() function to remove the uppercase substrings from the given string\n    result = re.sub(pattern, '', str1)\n    \n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z]{2}\\b')\n    # Find all uppercase substrings in the given string using the pattern\n    matches = pattern.findall(str1)\n    # Iterate over the matches and remove them from the string using the replace() method\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Convert the given string to lowercase\n    str1 = str1.lower()\n\n    # Initialize an empty string to store the non-uppercase substrings\n    non_uppercase_substrings = ''\n\n    # Loop through each character in the string\n    for char in str1:\n\n        # Check if the character is uppercase\n        if char.isupper():\n\n            # If it is, add it to the non_uppercase_substrings string\n            non_uppercase_substrings += char\n\n    # Return the non-uppercase substrings\n    return non_uppercase_substrings"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'(?i)[A-Z]+', re.IGNORECASE)\n    return uppercase_pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function removes all uppercase substrings from a given string.\n    '''\n    # Removing all uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            result.extend(sublist[:1])\n        elif isinstance(sublist, tuple):\n            result.extend(sublist[:1])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    extracted_list = []\n    for sublist in lst:\n        extracted_list.append(sublist[0])\n    return extracted_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    sublist_first = []\n    for sublist in lst:\n        sublist_first.append(sublist[0])\n    return sublist_first"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for sublist in lst for x in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            result.append(sublist[0])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function counts the number of upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count\n"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    # initialize an empty list to hold all possible combinations\n    combinations = []\n\n    # loop through each element in the input list\n    for i in range(len(list1)):\n        # loop through each remaining element in the input list\n        for j in range(i+1, len(list1)+1):\n            # add the combination to the list of all possible combinations\n            combinations.append(list1[i:j])\n\n    # return the list of all possible combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1 = sorted(list1)\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Define a function to generate all combinations of n elements from a given list of size m\n    def generate_combinations(m, n, index, current_combination, result):\n        if index == m:\n            result.append(current_combination[:])\n            return\n        for i in range(index, m):\n            generate_combinations(m, n, i+1, current_combination+[list1[i]], result)\n\n    # Initialize variables\n    m = len(list1)\n    n = m\n    current_combination = []\n    result = []\n\n    # Generate all combinations of n elements from a given list of size m\n    generate_combinations(m, n, 0, current_combination, result)\n\n    # Return the result list of all combinations\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Base case: if the length of the list is 1, it's a combination of only one element.\n    if len(list1) == 1:\n        return [list1]\n\n    # Recursive case: find all combinations of the first element of the list\n    first_combinations = combinations_list(list1[1:])\n\n    # For each combination of the first element, add the second element to it\n    result = []\n    for combo in first_combinations:\n        result.append([list1[0]] + combo)\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Loop through all possible combinations of the given list\n    for i in range(1, len(list1) + 1):\n        for j in itertools.combinations(list1, i):\n            yield j"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    if len(list1) == 1:\n        return list1\n    else:\n        return combinations_list(list1[1:]) + [list1[0]]"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1) + 1):\n        for subset in combinations(list1, i):\n            result.append(subset)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    This function takes a list of elements and returns a list of all possible combinations of the elements in the list.\n    '''\n\n    # Initialize an empty list to store the combinations\n    combinations = []\n\n    # Loop through the list of elements\n    for i in range(len(list1)):\n        # Loop through the remaining elements to create all possible combinations\n        for j in range(i+1, len(list1)+1):\n            # Append the combination to the list of combinations\n            combinations.append(list1[i:j])\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) < 2:\n        return []\n    else:\n        result = []\n        for i in range(len(list1)):\n            sub_list = list1[:i] + list1[i+1:]\n            for sub_result in combinations_list(sub_list):\n                result.append([list1[i]] + sub_result)\n        return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for num in arr[1:]:\n        max_ending_here = max(max_ending_here * num, num)\n        min_ending_here = min(min_ending_here * num, num)\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    \n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n    \n    for num in arr:\n        if num < 0:\n            max_ending_here *= -1\n        \n        current_product *= num\n        max_ending_here *= num\n        \n        if current_product > max_product:\n            max_product = current_product\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables to keep track of maximum subarray product\n    max_product = float('-inf')\n    current_product = 1\n\n    # Loop through the array and update max_product and current_product\n    for num in arr:\n        current_product *= num\n\n        # Update max_product if the current_product is greater\n        if current_product > max_product:\n            max_product = current_product\n\n        # Update current_product to 1 if it becomes negative\n        if current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product subarray.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product = max(num, current_product*num)\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        if current_product < 0:\n            current_product = 1\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    max_product = arr[0]\n    current_product = 1\n    negative_product = 1\n    for num in arr:\n        if num < 0:\n            negative_product = 1\n        else:\n            negative_product = -1\n        current_product = max(num * negative_product, current_product)\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray of the array.\n    \"\"\"\n\n    # Initialize two variables to keep track of the maximum and minimum values seen so far\n    max_product = float('-inf')\n    min_product = float('inf')\n\n    # Initialize a variable to keep track of the current subarray product\n    current_product = 1\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # Check if the current element is greater than the current minimum value\n        if arr[i] > min_product:\n            # Update the current subarray product by multiplying the current element with the current subarray product\n            current_product = arr[i] * current_product\n        else:\n            # If the current element is less than the current minimum value, update the current subarray product by the difference between the current element and the current minimum value\n            current_product = arr[i] - min_product\n\n        # Update the maximum and minimum values seen so far based on the current subarray product\n        max_product = max(max_product, current_product)\n        min_product = min(min_product, current_product)\n\n    # Return the maximum product subarray\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    min_product = 1\n    \n    for num in arr:\n        if num < 0:\n            current_product, min_product = min_product, current_product\n        \n        current_product *= num\n        min_product = min(min_product, current_product)\n        \n        max_product = max(max_product, current_product)\n    \n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict[n]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values())!= 1:\n        return False\n\n    for value in dict.values():\n        if value!= dict[next(iter(dict))]:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        print(\"All values are same.\")\n    else:\n        print(\"All values are different.\")"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    value = dict.values()[0]\n    for i in dict.values():\n        if i!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict.values()[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        return check_value(dict.values(), n)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in dict.values():\n        if i == dict[n]:\n            count += 1\n    if count == len(dict):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict.values()[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    for key, value in dict.items():\n        if value!= dict[key]:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Get the set of values from the dictionary\n    values = set(dict.values())\n    # Check if the set has only one element\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    # Loop through each key in the dictionary\n    for key in dict1.keys():\n        # Check if the value is an empty string\n        if not dict1[key]:\n            # If it is, remove the key-value pair from the dictionary\n            del dict1[key]"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Initialize variables\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Update max_ending_here\n        if arr[i] > arr[i-1]:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n        else:\n            max_ending_here = max(arr[i], max_ending_here * arr[i-1])\n\n        # Update min_ending_here\n        if arr[i] < arr[i-1]:\n            min_ending_here = min(arr[i], min_ending_here * arr[i])\n        else:\n            min_ending_here = min(arr[i], min_ending_here * arr[i-1])\n\n        # Update max_so_far\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    max_ending_here = arr[0]\n    min_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here * min_so_far)\n        min_so_far = min(min_so_far * arr[i], arr[i], min_so_far * max_ending_here)\n\n    return max_ending_here"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    n = len(arr)\n    max_val = arr[0]\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n    return max(max_val*min_val, max_val*max_val)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    max_product = float('-inf')\n    min_product = float('inf')\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] - arr[i] > 0:\n                product = arr[j] * arr[j] * arr[j] * arr[j]\n            else:\n                product = arr[i] * arr[i] * arr[i] * arr[i]\n\n            if product > max_product:\n                max_product = product\n\n            if product < min_product:\n                min_product = product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                temp = arr[j]\n                arr[j] = arr[i]\n                arr[i] = temp\n                product = arr[j] * arr[i]\n                if product > max_product:\n                    max_product = product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product of a subsequence of the array.\n    '''\n    if not arr:\n        return 0\n    \n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        if num > 0:\n            current_product *= num\n            if current_product > max_product:\n                max_product = current_product\n        else:\n            current_product = 1\n            \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize variables for maximum product found so far and current product\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n\n    # Loop through the array, updating the maximum product found so far and current product\n    for i in range(1, n):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    # Return the maximum product found so far\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    max_product = float('-inf')\n    min_product = float('inf')\n    for i in range(n):\n        if i > 0:\n            max_product = max(max_product, min_product * arr[i])\n            min_product = min(min_product, max_product * arr[i])\n        else:\n            max_product = max_product * arr[i]\n            min_product = min_product * arr[i]\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": ""
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = 0\n    for i in range(n):\n        result += test_tup[i]\n        if i < n-1:\n            result += test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"Error: The given tuple should contain at least two elements.\"\n    elif len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        return test_tup[0] + add_pairwise(test_tup[1:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    return sum(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Find the length of the tuple\n    n = len(test_tup)\n    # Initialize the pairwise sum to 0\n    pairwise_sum = 0\n    \n    # Loop through the tuple and add the neighboring elements\n    for i in range(n-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    \n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = 0\n    for i in range(1, n):\n        result += test_tup[i] - test_tup[i-1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    # Initialize variables\n    total = 0\n    i = 0\n    \n    # Iterate over the tuple\n    while i < len(test_tup)-1:\n        # Add the current and next elements\n        total += test_tup[i] + test_tup[i+1]\n        # Increment the index\n        i += 2\n    \n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    sum_of_pairwise = 0\n    for i in range(len(test_tup)-1):\n        sum_of_pairwise += test_tup[i] + test_tup[i+1]\n    return sum_of_pairwise"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Create a copy of the tuple to modify it\n    modified_tup = test_tup[:]\n    \n    # Loop through each element in the tuple\n    for i in range(len(modified_tup)-1):\n        # Add the neighboring elements and store the result in the modified tuple\n        modified_tup[i] += modified_tup[i+1]\n        \n    # Return the modified tuple\n    return modified_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    length = len(test_tup)\n    for i in range(length-1):\n        for j in range(i+1, length):\n            yield test_tup[i] + test_tup[j]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    # Initialize the length of the tuple\n    length = len(test_tup)\n    # Loop through the tuple\n    for i in range(length-1):\n        # Add the pair of neighboring elements\n        sum += test_tup[i] + test_tup[i+1]\n    # Return the sum\n    return sum"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    # Compute the product of the array modulo n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n        \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize result variable\n    result = 1\n\n    # Iterate over each element in the array\n    for num in arr:\n        # Multiply the current element by the result modulo n\n        result = (result * num) % n\n\n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and a number n as input and returns the remainder of the array product modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # calculate the product of all elements of the array\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l)-1):\n            if l[i] == l[i+1]+1:\n                return True\n            elif l[i] == l[i+1]-1:\n                return True\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # check if the list is empty\n    if len(l) == 0:\n        return True\n    \n    # check if the first element is greater than 1\n    if l[0] <= 1:\n        return False\n    \n    # check if the elements are consecutive\n    for i in range(1, len(l)):\n        if l[i]!= l[i-1] + 1:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as an input and returns True if the list contains consecutive numbers, False otherwise.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if all the elements of the list are consecutive numbers or False otherwise.\n    '''\n    \n    # initializing variables\n    prev_num = None\n    \n    # iterating through the list\n    for num in l:\n        \n        # checking if the current number is greater than the previous number\n        if num > prev_num:\n            \n            # if it is, then the list does not contain consecutive numbers\n            return False\n        \n        # updating the previous number\n        prev_num = num\n    \n    # if the loop completes without finding any consecutive numbers, then the list contains consecutive numbers\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # check if the list is empty\n    if not l:\n        print(\"The list is empty.\")\n        return False\n    \n    # initialize a variable to store the previous element\n    prev = None\n    \n    # iterate through the list\n    for i in l:\n        # check if the current element is consecutive to the previous element\n        if i == prev + 1:\n            continue\n        else:\n            # if the current element is not consecutive, return False\n            return False\n    \n    # if the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n\n    # Check if the list is empty or not\n    if not l:\n        return \"List is empty.\"\n\n    # Check if all elements are unique\n    if len(l)!= len(set(l)):\n        return \"List contains duplicates.\"\n\n    # Check if the list contains consecutive numbers\n    consecutive = False\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            consecutive = True\n            break\n    if consecutive:\n        return \"The list contains consecutive numbers.\"\n    else:\n        return \"The list does not contain consecutive numbers.\"\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers and False otherwise.\n    '''\n    for i in range(len(l) - 1):\n        if l[i] + 1 == l[i+1]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    elif l[0] == l[1]:\n        return True\n    elif len(l) == 2:\n        return False\n    elif l[0] == l[2]:\n        return True\n    elif l[1] == l[3]:\n        return True\n    else:\n        for i in range(2, len(l)-1):\n            if l[i-1] == l[i] + 1:\n                return True\n            elif l[i-1] == l[i] - 1:\n                return True\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert the list to sets to remove duplicates and keep order of elements\n    test_list1 = set(test_list1)\n    test_list2 = set(test_list2)\n    # Find the intersection of the two sets\n    result_set = test_list1.intersection(test_list2)\n    # Convert the set to list and sort it in ascending order\n    result_list = sorted(list(result_set))\n    # Return the sorted list\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    if not test_list1 or not test_list2:\n        return []\n    intersection_set = set(test_list1[0]) & set(test_list2[0])\n    for i in range(1, len(test_list1)):\n        intersection_set = intersection_set & set(test_list1[i]) & set(test_list2[i])\n    return sorted(tuple(intersection_set))\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert both lists to sets for faster comparison\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of sets and convert back to tuples\n    result = tuple(set1.intersection(set2))\n\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    result = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1 == tup2:\n                result.append(tup1)\n                break\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set of unique elements in test_list1\n    set1 = set(test_list1)\n    # Create a set of unique elements in test_list2\n    set2 = set(test_list2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Sort the first list in ascending order\n    sorted_list1 = sorted(test_list1)\n    \n    # Create a set from the sorted list\n    set_list1 = set(sorted_list1)\n    \n    # Create a new list to store the common elements\n    common_elements = []\n    \n    # Iterate through the second list\n    for element in test_list2:\n        # If the element is in the set, add it to the common elements list\n        if element in set_list1:\n            common_elements.append(element)\n    \n    # Return the common elements list\n    return common_elements"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1 == tup2 and tup1 not in intersection:\n                intersection.append(tup1)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a dictionary to store the intersection of tuples\n    intersection = {}\n    # iterate over the first list and check if each element is in the second list\n    for element in test_list1:\n        if element in test_list2:\n            # if it is, add the element to the dictionary with its count as value\n            if element in intersection:\n                intersection[element] += 1\n            else:\n                intersection[element] = 1\n    # create a new list containing only the elements in the intersection dictionary\n    result = [key for key in intersection if intersection[key] > 0]\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Create an empty set to store the intersection tuples\n    result = set()\n\n    # Loop through each tuple in the first list\n    for tup1 in test_list1:\n\n        # Loop through each tuple in the second list\n        for tup2 in test_list2:\n\n            # If both tuples have the same elements in the same order, add it to the result set\n            if tup1 == tup2:\n                result.add(tup1)\n                break\n\n    # Return the result set\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty set to store the unique elements of both lists\n    unique_elements = set()\n    # Iterate through the first list\n    for item in test_list1:\n        # Check if the element is already in the set\n        if item not in unique_elements:\n            # If not, add it to the set\n            unique_elements.add(item)\n    # Iterate through the second list\n    for item in test_list2:\n        # Check if the element is already in the set\n        if item in unique_elements:\n            # If it is, remove it from the set to get the intersection\n            unique_elements.remove(item)\n    # Convert the set back to a list and return it\n    return list(unique_elements)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character matches the specified character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # initialize an empty string to store the modified string\n    modified_str = \"\"\n    \n    # iterate through each character in the string\n    for char in str1:\n        \n        # check if the current character is the search character\n        if char == ch:\n            \n            # add the new character to the modified string\n            modified_str += newch\n        \n        # otherwise, add the current character to the modified string\n        else:\n            \n            modified_str += char\n    \n    # return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # check if the character is the given character\n        if str1[i] == ch:\n            # replace the character with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    str_new = \"\"\n    for i in str1:\n        if i == ch:\n            str_new += newch\n        else:\n            str_new += i\n    return str_new"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # create a new string by iterating through the original string\n    new_str = \"\"\n    for i in range(len(str1)):\n        # if the current character is the character to be replaced\n        if str1[i] == ch:\n            new_str += newch\n        # otherwise, append the current character to the new string\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Split the string into list of characters\n    lst = list(str1)\n    # Loop through the list of characters\n    for i in range(len(lst)):\n        # If the current character is the character to be replaced\n        if lst[i] == ch:\n            # Replace the character with the new character\n            lst[i] = newch\n    # Convert the list of characters back to a string and return it\n    return ''.join(lst)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(counter.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Using Counter to count the occurrences of values in the dictionary\n    counter = Counter(dict1.values())\n\n    # Sorting the dictionary by values in ascending order\n    sorted_dict = dict(sorted(counter.items()))\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    c = Counter(dict1)\n    # sort the counter in descending order based on values\n    sorted_c = c.most_common(None)\n    sorted_c.sort(key=lambda x: x[1], reverse=True)\n    # extract the values from the sorted counter\n    sorted_values = [x[0] for x in sorted_c]\n    return sorted_values"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n\n    # sort the dictionary by value in descending order\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n    # create a Counter object from the sorted dictionary\n    counter = Counter(sorted_dict)\n\n    # return the sorted counter object\n    return counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Sort the dictionary by values in descending order\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n    # Create a new dictionary with the sorted keys and values\n    sorted_counter = dict(sorted_dict)\n\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value using Counter.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # Calculate the sum of the largest and smallest value\n    largest = nums[0]\n    smallest = nums[len(nums) - 1]\n    sum = largest + smallest\n    \n    # Print the result\n    print(\"The sum of the largest and smallest value in the array is:\", sum)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        print(\"Array should have at least 2 elements.\")\n        return\n    \n    # Find the largest and smallest value in the array\n    max_val = nums[0]\n    min_val = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > max_val:\n            max_val = nums[i]\n        elif nums[i] < min_val:\n            min_val = nums[i]\n    \n    # Find the sum of the largest and smallest value\n    sum_val = max_val + min_val\n    \n    return sum_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # Find the sum of the largest and smallest values\n    largest = nums[0]\n    smallest = nums[1]\n    sum_largest_smallest = largest + smallest\n    \n    return sum_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    \n    # Calculate the sum of the largest and smallest values\n    largest = nums[-1]\n    smallest = nums[0]\n    sum_largest_smallest = largest + smallest\n    \n    # Return the sum of the largest and smallest values\n    return sum_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    # Return the sum of the smallest and largest values\n    return nums[0] + nums[-1]"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize the largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n    # Loop through the array and find the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if not nums:\n        return 0, 0\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Convert the string to lower case\n    lower_string = string.lower()\n    return lower_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if the string is in lower case and False otherwise.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and removes all lowercase substrings from it.\n    '''\n    # Convert all characters to lowercase\n    string = string.lower()\n    # Split the string into individual words\n    words = re.findall(r'\\b\\w+\\b', string)\n    # Remove all lowercase substrings from the list of words\n    filtered_words = [word for word in words if word.isupper()]\n    # Join the filtered words back into a string\n    filtered_string =''.join(filtered_words)\n    # Return the filtered string\n    return filtered_string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'(?<!\\w)([a-z])')\n    return pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Regular expression pattern for lowercase characters\n    pattern = r'[a-z]'\n    # Find all occurrences of lowercase characters in the string\n    lowercase_matches = re.findall(pattern, str1)\n    # Loop through each match and replace it with an empty string\n    for match in lowercase_matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # create a regular expression to match any lowercase substrings\n    pattern = re.compile('[a-z]+')\n\n    # find all lowercase substrings in the string\n    matches = pattern.findall(str1)\n\n    # loop through the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    # return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for matching lowercase substrings\n    pattern = re.compile(r'\\b\\w+\\b', re.IGNORECASE)\n    # Find all lowercase substrings in the given string using the regular expression pattern\n    matches = pattern.findall(str1)\n    # Remove all lowercase substrings from the given string using a loop\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(string):\n    pattern = re.compile(r'\\b[a-z]\\w*\\b')\n    return pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use a regular expression to find all lowercase substrings\n    lowercase_substrings = re.findall(r'\\b[a-z]+\\b', str1)\n    # Loop through each lowercase substring and replace it with an empty string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    # use the pattern to find all lowercase substrings in the string\n    matches = pattern.findall(str1)\n    # remove all lowercase substrings from the string and return the modified string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'(?i)[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile('[a-z]+')\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Get the first character of the string\n    first_char = num_str[0]\n    # Convert the first character to an integer\n    first_digit = int(first_char)\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # check if the given number is a positive integer\n    if isinstance(n, int) and n > 0:\n        # extract the first digit of the number\n        first_digit = n % 10\n        # return the first digit\n        return first_digit\n    else:\n        # if the given number is not a positive integer or is 0, return None\n        return None"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # remove any non-numeric characters from the input number\n    n = ''.join(filter(str.isdigit, str(n)))\n    # convert the string to an integer\n    n = int(n)\n    # return the first digit of the integer\n    return n % 10"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers as input and returns a list of all the odd numbers in the input list.\n    '''\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Create an empty list to store the odd numbers\n    odd_numbers = []\n    \n    # Loop through each number in the list\n    for num in list:\n        # If the number is odd, add it to the odd_numbers list\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    \n    # Return the odd_numbers list\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of integers and returns a list of all odd numbers in the original list.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # calculate the sum of cubes of the first n natural numbers\n    cubes = sum(x**3 for x in range(1, n+1))\n\n    # calculate the sum of the first n natural numbers\n    sum_of_natural_numbers = sum(range(1, n+1))\n\n    # calculate the difference between the two sums\n    difference = abs(cubes - sum_of_natural_numbers)\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    # sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # sum of first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    \n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_numbers = 0\n\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_numbers += i\n\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    # calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    # find the difference between the sum of cubes and the sum of natural numbers\n    difference = abs(sum_cubes - sum_natural)\n    # return the difference between the sum of cubes and the sum of natural numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        sum_of_natural += i\n    difference = sum_of_cubes - sum_of_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1,n+1)])\n    sum_nums = sum(range(1,n+1))\n    return sum_cubes - sum_nums"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_nums = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_nums += i\n    return abs(sum_cubes - sum_nums)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes_sum = sum(x**3 for x in range(1, n+1))\n    \n    # Calculate the sum of the first n natural numbers\n    natural_sum = sum(range(1, n+1))\n    \n    # Calculate the difference between the sums\n    difference = abs(natural_sum - cubes_sum)\n    \n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # return the difference between the two sums\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    # Initialize count to zero\n    count = 0\n\n    # Iterate over all possible pairs\n    for i in range(N):\n        for j in range(i+1, N):\n\n            # Calculate xor value of pair (i, j)\n            xor_value = A[i] ^ A[j]\n\n            # Check if xor value is odd\n            if xor_value % 2 == 1:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_set = set()\n    odd_count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val in xor_set:\n                odd_count += 1\n            else:\n                xor_set.add(xor_val)\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize an empty dictionary to store the count of odd xor pairs\n    odd_xor_count = {}\n\n    # Iterate through the array A and for each element a, iterate through the array A again to find the elements b whose xor value is odd\n    for a in A:\n        for b in A:\n            if a!= b:\n                # Compute the xor value of a and b\n                xor = a ^ b\n\n                # If xor is odd, increment the count of odd xor pairs in the dictionary\n                if xor % 2!= 0:\n                    if xor in odd_xor_count:\n                        odd_xor_count[xor] += 1\n                    else:\n                        odd_xor_count[xor] = 1\n\n    # Return the count of odd xor pairs\n    return sum(odd_xor_count.values())"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if A[i] ^ A[j] & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([chr(ord(c) ^ 32) if c.islower() else chr(ord(c) ^ 32).upper() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        new_char = char.upper() if char.islower() else char.lower()\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.swapcase() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # convert the string to a list of characters\n    char_list = list(string)\n    # loop through the list of characters\n    for i in range(len(char_list)):\n        # convert each character to its opposite case\n        if char_list[i].islower():\n            char_list[i] = char_list[i].upper()\n        else:\n            char_list[i] = char_list[i].lower()\n    # convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # initialize an empty string to hold the toggled characters\n    toggled_string = ''\n    # iterate through each character in the input string\n    for char in string:\n        # check if the character is uppercase or lowercase\n        if char.isupper():\n            # convert the character to lowercase and append it to the toggled string\n            toggled_string += char.lower()\n        else:\n            # convert the character to uppercase and append it to the toggled string\n            toggled_string += char.upper()\n    # return the toggled string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isupper() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    # Convert the string to lowercase\n    string = string.lower()\n    \n    # Iterate through each character in the string\n    for i in range(len(string)):\n        \n        # Check if the character is uppercase\n        if string[i].isupper():\n            \n            # Convert the character to lowercase\n            string = string[:i] + string[i].lower() + string[i+1:]\n            \n        # Check if the character is lowercase\n        elif string[i].islower():\n            \n            # Convert the character to uppercase\n            string = string[:i] + string[i].upper() + string[i+1:]\n            \n    # Return the modified string\n    return string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings and split them into lists\n    str1 = str(n1)\n    str2 = str(n2)\n\n    # Calculate the sum of per-digit difference between the two numbers\n    digit_diff_sum = 0\n    for i in range(len(str1)):\n        digit_diff_sum += abs(ord(str1[i]) - ord(str2[i]))\n\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # calculate the per-digit difference between the two lists\n    diff_list = [abs(d1 - d2) for d1, d2 in zip(digits1, digits2)]\n    diff_sum = sum(diff_list)\n\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == 0 or n2 == 0:\n        return 0\n\n    digit_diff = abs(n1 - n2)\n    digit_sum = digit_diff % 10 + digit_distance_nums(n1 // 10, n2 // 10)\n\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the input numbers to strings to avoid integer division\n    str1 = str(n1)\n    str2 = str(n2)\n    # Initialize a variable to store the sum of differences\n    diff_sum = 0\n    # Loop through each digit of the two numbers\n    for i in range(len(str1)):\n        # Subtract the corresponding digits of the two numbers\n        diff = int(str1[i]) - int(str2[i])\n        # Add the difference to the sum of differences\n        diff_sum += diff\n    # Return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to lists of digits\n    num1_list = [int(d) for d in str(n1)]\n    num2_list = [int(d) for d in str(n2)]\n\n    # Calculate the per-digit difference\n    digit_diff = []\n    for i in range(len(num1_list)):\n        diff = abs(num1_list[i] - num2_list[i])\n        digit_diff.append(diff)\n\n    # Calculate the sum of the differences\n    digit_sum = sum(digit_diff)\n\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n\n    # Convert the numbers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop through the digits of the two numbers\n    for i in range(len(str1)):\n        # Find the difference between the two digits and add it to the sum\n        digit_diff = abs(ord(str1[i]) - ord(str2[i]))\n        sum += digit_diff\n\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    sum_diff = 0\n    # convert n1 and n2 to strings to iterate over digits\n    s1 = str(n1)\n    s2 = str(n2)\n    # loop over digits in n1 and n2 and calculate sum of per-digit difference\n    for i in range(len(s1)):\n        diff = int(s1[i]) - int(s2[i])\n        sum_diff += abs(diff)\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the input integers to strings and split them into lists\n    str1 = str(n1)\n    str2 = str(n2)\n\n    # Initialize the sum of the differences to zero\n    diff_sum = 0\n\n    # Loop through each digit in the strings\n    for digit1, digit2 in zip(str1, str2):\n        # Convert each digit to an integer and calculate the difference\n        digit_diff = int(digit1) - int(digit2)\n\n        # Add the difference to the sum of differences\n        diff_sum += digit_diff\n\n    # Return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    # convert the numbers to lists of digits\n    num1_digits = [int(digit) for digit in str(n1)]\n    num2_digits = [int(digit) for digit in str(n2)]\n\n    # find the length of the shortest number\n    length = min(len(num1_digits), len(num2_digits))\n\n    # initialize the sum of the differences to zero\n    diff_sum = 0\n\n    # loop through the digits of the shortest number\n    for i in range(length):\n        # find the difference between the corresponding digits of the two numbers\n        diff = num1_digits[i] - num2_digits[i]\n\n        # add the difference to the sum of the differences\n        diff_sum += diff**2\n\n    # return the sum of the differences squared\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to strings so we can manipulate them easily\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Find the maximum length of the two numbers\n    max_len = max(len(n1_str), len(n2_str))\n\n    # Initialize the sum to 0\n    sum_digits = 0\n\n    # Loop through each digit and add the difference to the sum\n    for i in range(max_len):\n        # Get the digits of n1 and n2 for this index\n        n1_digit = int(n1_str[i]) if i < len(n1_str) else 0\n        n2_digit = int(n2_str[i]) if i < len(n2_str) else 0\n\n        # Calculate the per-digit difference and add it to the sum\n        sum_digits += abs(n1_digit - n2_digit)\n\n    # Return the sum\n    return sum_digits"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(len(a) - size + 1):\n        current_sum += a[i:i+size]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function takes in a list of integers and a size parameter and returns the sum of the largest contiguous sublist.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        elif max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(len(a) - size + 1):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Find the maximum sum of a contiguous subarray of given size in a list.\n\n    Args:\n    a (list): A list of integers.\n    size (int): The size of the contiguous subarray.\n\n    Returns:\n    int: The maximum sum of the largest contiguous subarray.\n    \"\"\"\n    # Initialize variables to keep track of the current subarray and the maximum sum found so far.\n    current_sum = 0\n    max_sum = float('-inf')\n\n    # Iterate over the list and add each element to the current subarray until the size of the subarray is reached.\n    for i in range(len(a) - size + 1):\n        current_sum += a[i]\n        # Check if the current subarray is the largest so far and update the maximum sum accordingly.\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Concatenate the two tuples\n    combined_tuple = test_tup1 + test_tup2\n    # Convert the tuple to a set to remove duplicates\n    unique_set = set(combined_tuple)\n    # Convert the set back to a tuple\n    unique_tuple = tuple(unique_set)\n    # Sort the tuple in ascending order\n    sorted_tuple = sorted(unique_tuple)\n    # Output the sorted tuple\n    print(sorted_tuple)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    # Create a set of unique elements in the first tuple\n    set1 = set(test_tup1)\n    \n    # Create a set of unique elements in the second tuple\n    set2 = set(test_tup2)\n    \n    # Find the union of the two sets\n    union_set = set1.union(set2)\n    \n    # Convert the set back to a list and sort it in ascending order\n    union_list = list(union_set)\n    union_list.sort()\n    \n    # Output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # convert tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # find the union of the two sets\n    union_set = set1.union(set2)\n\n    # convert the union set back to a list and sort it\n    union_list = sorted(list(union_set))\n\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create an empty set to store unique elements\n    unique_set = set()\n\n    # add all elements from the first tuple to the set\n    for element in test_tup1:\n        unique_set.add(element)\n\n    # add all elements from the second tuple to the set\n    for element in test_tup2:\n        unique_set.add(element)\n\n    # convert the set to a list and sort it\n    union_list = sorted(list(unique_set))\n\n    # print the union elements\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine both tuples into a single list\n    union_list = test_tup1 + test_tup2\n    # Convert the list to a set to remove duplicates\n    union_set = set(union_list)\n    # Convert the set back to a list and sort it\n    union_list = sorted(list(union_set))\n    # Return the sorted union list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Find the union of the elements of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n\n    # Output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Find the union of the two tuples\n    union = set(test_tup1) | set(test_tup2)\n    \n    # Convert the set to a list and sort it\n    union_list = sorted(list(union))\n    \n    # Print the union\n    print(\"The union of the two tuples is:\", union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Concatenate the two tuples\n    combined_tup = test_tup1 + test_tup2\n    # Convert the tuple to a set to remove duplicates\n    unique_set = set(combined_tup)\n    # Convert the set back to a list and sort it\n    sorted_list = sorted(list(unique_set))\n    # Print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Use set() to remove duplicates and convert the tuples to sets\n    unique_tup1 = set(test_tup1)\n    unique_tup2 = set(test_tup2)\n    \n    # Find the union of the two sets\n    union = unique_tup1.union(unique_tup2)\n    \n    # Convert the union set back to a list and sort it\n    union_list = sorted(list(union))\n    \n    # Print the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = test_tup1 + test_tup2\n    union_set = set(union)\n    union_list = sorted(union_set)\n    return union_list"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list as input and returns the length of the longest sublist.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            max_length = max(max_length, len(lst[i:j]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 0   # initialize longest to 0\n    for i in range(len(lst)):   # loop through the list\n        for j in range(i+1, len(lst)):   # loop through the sublists\n            if len(lst[i:j+1]) > longest:   # if the length of the sublist is greater than longest, update longest\n                longest = len(lst[i:j+1])   # update longest\n    return longest   # return the final longest value"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    length = 1  # Initialize the length to 1\n    max_length = 1  # Initialize the maximum length to 1\n\n    for i in range(1, len(lst)):  # Loop through all sublists\n\n        if lst[i]!= lst[i-1]:  # If the current sublist is different from the previous sublist, then update the length and maximum length\n\n            if length > max_length:  # If the current length is greater than the maximum length, then update the maximum length\n                max_length = length\n\n            length = 1  # Reset the length to 1\n\n        else:  # If the current sublist is the same as the previous sublist, then increment the length\n            length += 1\n\n    if length > max_length:  # If the last sublist has a greater length than the maximum length, then update the maximum length\n        max_length = length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list of integers as input and returns the maximum length of sublists.\n\n    Parameters:\n        lst: List of integers\n\n    Returns:\n        int: Maximum length of sublists.\n    '''\n\n    if len(lst) == 0:\n        return 0\n\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 1\n\n    if current_length > max_length:\n        max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            if len(lst[i:j+1]) > max_length:  \n                max_length = len(lst[i:j+1])  \n\n    return max_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize variables\n    max_length = 1\n    current_length = 1\n\n    # Iterate over the list\n    for i in range(1, len(lst)):\n        # If the next element is greater than the current element, add 1 to the current length\n        if lst[i] > lst[i-1]:\n            current_length += 1\n        else:\n            # If the next element is less than or equal to the current element, set the current length to 1\n            current_length = 1\n        # If the current length is greater than the maximum length, update the maximum length\n        if current_length > max_length:\n            max_length = current_length\n\n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 1\n\n    if current_length > max_length:\n        max_length = current_length\n\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"('.*?')\" # matches any string surrounded by single quotes\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(?<!\\\\)\"(\\w+)\"')\n    matches = pattern.findall(text)\n    values = []\n    for match in matches:\n        values.append(match)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"' # define a regular expression pattern for extracting values between quotation marks\n    matches = re.findall(pattern, text) # find all matches in the text using the pattern\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n\n    pattern = r'(?<=^|\\s|\")([\\w\\s]+?)(?=\\s|$|\"|,)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Use a regular expression to find all the quotation marks and their contents\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n\n    # Loop through the matches and extract the values between them\n    values = []\n    for match in matches:\n        # Remove any leading or trailing whitespace from the value\n        value = match.strip()\n        values.append(value)\n\n    # Return the list of extracted values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    match = re.findall(pattern, text)\n    return match"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")([\\w\\s]+?)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"([^\\\"]*)\"'\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        value = match.strip('\"')\n        values.append(value)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'(?<!\\\\)\"([^\"]*)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n\n    # initialize a counter variable\n    count = 0\n\n    # loop through the list and check for pairs where both elements are unequal\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n\n    # return the final count\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate through the list\n    for i in range(n):\n        # Iterate through the list again, starting from the next index\n        for j in range(i + 1, n):\n            # If the elements are unequal, increment the count by 1\n            if arr[i]!= arr[j]:\n                count += 1\n\n    # Return the count\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    This function splits a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of its characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n\n    # Convert the string to a list of characters\n    char_list = list(word)\n\n    # Return the list of characters\n    return char_list"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the number to a string and then to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # use a loop to add up all the digits in the list\n    total = sum(digits)\n    # return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and convert each character to a digit\n    digits = [int(digit) for digit in str(n)]\n    # Use a loop to add up all the digits\n    sum_digits = 0\n    for digit in digits:\n        sum_digits += digit\n    return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and split into digits\n    digits = [int(digit) for digit in str(n)]\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through the digits and add them to the sum variable\n    for digit in digits:\n        sum += digit\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the input integer to a list of digits\n    digits = [int(d) for d in str(n)]\n    # Initialize the sum variable\n    sum_value = 0\n    # Loop through the digits and add them to the sum variable\n    for d in digits:\n        sum_value += d\n    # Return the sum\n    return sum_value"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(n)\n    # Initialize a variable to store the sum of the digits\n    sum_of_digits = 0\n    # Loop through each digit in the string\n    for digit in num_str:\n        # Convert each digit to an integer\n        digit_int = int(digit)\n        # Add the integer to the sum of the digits\n        sum_of_digits += digit_int\n    # Return the sum of the digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n\n    # Convert integer to a list of digits\n    digits = list(str(n))\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Iterate over each digit in the list\n    for digit in digits:\n\n        # Convert digit to integer and add to the sum variable\n        sum += int(digit)\n\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the input integer to a string\n    num_str = str(n)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each character in the string\n    for char in num_str:\n        # Convert the character to an integer\n        digit = int(char)\n        # Add the digit to the sum\n        sum += digit\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the integer to a list of digits\n    digits = [int(d) for d in str(n)]\n    # sum up the digits\n    total = sum(digits)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string to extract digits\n    digits = str(n)\n    # Initialize the sum variable\n    sum = 0\n    # Loop through each digit of the integer and add it to the sum variable\n    for digit in digits:\n        sum += int(digit)\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize sum variable to 0\n    total = 0\n\n    # Convert the integer to a string\n    num_str = str(n)\n\n    # Loop through each digit of the integer and add it to the sum variable\n    for digit in num_str:\n        total += int(digit)\n\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    # Check if the list is sorted or not\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check whether a list is sorted or not.\n    \"\"\"\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] < list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as an argument and returns True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        for i in range(len(list1) - 1):\n            if list1[i] > list1[i + 1]:\n                return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    empty_dict_list = []\n    for i in range(length):\n        empty_dict_list.append({})\n    return empty_dict_list"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(list1):\n        sublist.sort()\n        list1[i] = sublist"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a set to store unique numbers\n    unique_set = set(nums[0])\n    \n    # Iterate through the rest of the lists and add their unique numbers to the set\n    for num_list in nums[1:]:\n        unique_set |= set(num_list)\n    \n    # Convert the set back to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists as input and returns a list of lists with duplicate numbers removed.\n    \"\"\"\n    # create a set of lists to store unique numbers\n    unique_nums = set()\n\n    # loop through each list of numbers\n    for num_list in nums:\n        # loop through each number in the list\n        for num in num_list:\n            # if the number is not already in the set, add it to the set\n            if num not in unique_nums:\n                unique_nums.add(num)\n\n    # create a new list of lists to store the unique numbers\n    new_nums = []\n\n    # loop through each number in the set\n    for num in unique_nums:\n        # create a new list with the unique number\n        new_num_list = [num]\n        # append the new list to the new_nums list\n        new_nums.append(new_num_list)\n\n    # return the new_nums list of lists\n    return new_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty set to store the unique elements\n    unique_set = set()\n    \n    # Iterate through each list in the given number of lists\n    for num_list in nums:\n        # Iterate through each element in the current list\n        for num in num_list:\n            # If the element is already in the set, remove it\n            if num in unique_set:\n                unique_set.remove(num)\n            else:\n                # Add the element to the set if it's not already in it\n                unique_set.add(num)\n    \n    # Convert the set to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Parameters:\n    nums (list): a list of lists, where each sublist contains numbers.\n\n    Returns:\n    (list): a list of unique numbers from all input lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        unique_nums.extend(set(num_list))\n    return list(set(unique_nums))"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Use a set to remove duplicates and then convert it back to a list\n    unique_nums = list(set(nums[0])) + list(set(nums[1]))\n    \n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty list to store unique numbers\n    unique_nums = []\n    # loop through each number in the given lists\n    for num in nums:\n        # check if the number is already in the unique_nums list\n        if num not in unique_nums:\n            # if not, add it to the list\n            unique_nums.append(num)\n    # return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Using set data structure to remove duplicate numbers\n    unique_nums = list(set([num for sublist in nums for num in sublist]))\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    unique_nums = set()\n    for num_list in nums:\n        unique_nums.update(num_list)\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Create a set to store unique numbers in the list\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set of unique numbers from the given list\n    unique_nums = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # create a set to store unique elements from the list\n    unique_nums = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    # Create a set to store unique numbers\n    unique_nums = set(list_data)\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    if len(unique_list) < 2:\n        return 1\n    else:\n        return 1 * unique_list[0]"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    unique_list = list(set(list_data))  # remove duplicates from the list\n    product = 1  # initialize the product to 1\n\n    for num in unique_list:  # iterate over the unique numbers in the list\n        product *= num  # multiply the product by the current number\n\n    return product  # return the product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    unique_list.sort()\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))  # Create a set of unique numbers from the list data\n    product = 1  # Initialize the product to 1\n    \n    # Calculate the product of the unique numbers\n    for number in unique_numbers:\n        product *= number\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_numbers = set(list_data)\n\n    # calculate the product of the unique numbers\n    unique_product = 1\n    for number in unique_numbers:\n        unique_product *= number\n\n    # return the product\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n        \n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    area = 2 * 3.14159 * r * r\n    volume = (3.14159 * r * r * h) / 3\n    surface_area = 2 * area + 2 * volume\n\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2+h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder\n    surface_area = 2*math.pi*r*h\n    \n    # Return the surface area of the cylinder\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Formula for surface area of a cylinder\n    surface_area = 2*3.14159*r*r + 2*3.14159*r*h + 2*3.14159*h*h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * r + 2 * math.pi * r * h\n    print('The surface area of a cylinder with radius', r, 'and height', h, 'is:', area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for the surface area of a cylinder is:\n    # A = (1/2) * r * h * pi\n    A = (0.5 * r * h) * 3.141592653589793\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # calculate the surface area of the cylinder\n    surface_area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi*r**2*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * (r**2) * h\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        return False \n    for i in range(len(A)): \n        if A[i] not in B: \n            return False \n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function checks whether a list A is a sublist of list B or not.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function will check whether the first list is a sublist of the second list or not.\n    '''\n    if len(A) < len(B): # if first list is shorter then second list\n        return False\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B): # iterate through both lists\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1 # if a mismatch occurs, move j to the next index of B\n    return i == len(A) # if all the elements in A have been matched with elements in B, then return True."
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if not B: # if B is an empty list, then A is a sublist\n        return True\n    if not A: # if A is an empty list, then B is not a sublist\n        return False\n    if len(B) > len(A): # if len(B) is greater than len(A), then A is not a sublist\n        return False\n    count = 0 # count the number of elements in common\n    for i in range(len(B)):\n        if B[i] in A: # if B[i] is in A, then increment count\n            count += 1\n    return count == len(B) # return True if count is equal to len(B), else False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A: \n            if A[A.index(B[i])+1:].count(B[i]) == B[i].count(B[i]): \n                return True \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return B in A"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)):\n        if A[i]!= B[i]:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function checks whether A is a sublist of B or not.\n    \"\"\"\n    i=0\n    j=0\n    n=len(B)\n    m=len(A)\n\n    while j<n:\n        if B[j] in A:\n            if i==0:\n                j+=1\n            else:\n                i=0\n                j+=1\n        else:\n            i+=1\n            j+=1\n\n    if i==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A) < len(B):\n        return False\n\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    else:\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return True\n        return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1): \n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the input number to string\n    str_n = str(n)\n    # Split the string to get each digit separately\n    digits = [int(digit) for digit in str_n]\n    # Calculate the factorial of the first n-1 digits and store it in a variable\n    factorial = 1\n    for i in range(1, len(digits)):\n        factorial *= digits[i]\n    # Calculate the last digit in the factorial and return it\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # find the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # get the last digit of the factorial\n    last_digit = factorial % 10\n    \n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # calculate factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # extract last digit from factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit of its factorial.\n    '''\n    # initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    # find the factorial of n\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    # extract the last digit of the factorial and store it in the last_digit variable\n    last_digit = fact % 10\n    # return the last_digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize variables to store the factorial and the last digit\n    factorial = 1\n    last_digit = 0\n    \n    # Calculate the factorial of the given number\n    for i in range(1, n+1):\n        factorial *= i\n        \n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 0 \n    while n > 0: \n        result += n % 10 \n        n //= 10 \n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial % 10"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    i = 0\n    while i < len(list1):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n        i += 1\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # create a new empty list to store the interleaved elements\n    interleaved_list = []\n    \n    # loop through each element in the input lists\n    for i in range(len(list1)):\n        # add the first element from each list to the new list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n\n    # Loop through each item in the input lists\n    for i in range(len(list1)):\n        # Append the first item from the first list to the end of the interleaved list\n        interleaved_list.append(list1[i])\n        # Append the second item from the second list to the end of the interleaved list\n        interleaved_list.append(list2[i])\n        # Append the third item from the third list to the end of the interleaved list\n        interleaved_list.append(list3[i])\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Combine the lists using list comprehension\n    combined = [i for sublist in [list1, list2, list3] for i in sublist]\n    return combined"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # iterate over the 3 lists and append their elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n        \n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if i < len(list1) and j < len(list2):\n            if list1[i] < list2[j]:\n                result.append(list1[i])\n                i += 1\n            else:\n                result.append(list2[j])\n                j += 1\n        elif j < len(list2) and k < len(list3):\n            if list2[j] < list3[k]:\n                result.append(list2[j])\n                j += 1\n            else:\n                result.append(list3[k])\n                k += 1\n        else:\n            if list3[k] < list1[i]:\n                result.append(list3[k])\n                k += 1\n            else:\n                result.append(list1[i])\n                i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes in 3 lists of the same length and returns a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i, j, k = 0, 0, 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff.append(test_tup1[i])\n    return diff"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of all the dissimilar elements between them.\n    '''\n    # create an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # loop through each element in the first tuple\n    for element in test_tup1:\n        # check if the element is present in the second tuple\n        if element not in test_tup2:\n            # if it's not present, add it to the dissimilar list\n            dissimilar_list.append(element)\n\n    # return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list containing the\n    elements that are different in the two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # Iterate over the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the current element is different in the second tuple\n        if test_tup1[i]!= test_tup2[i]:\n            # If it is, add it to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Loop through each element in the first tuple\n    for elem in test_tup1:\n        # Check if the element is present in the second tuple\n        if elem not in test_tup2:\n            # If not, add it to the dissimilar list\n            dissimilar_list.append(elem)\n    \n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff.append(test_tup1[i])\n    return diff"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create an empty dictionary to store the dissimilar elements\n    dissimilar = {}\n    # Iterate over the tuples and check if there are any common elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            continue\n        # If there are no common elements, add the element to the dictionary\n        if test_tup1[i] not in dissimilar:\n            dissimilar[test_tup1[i]] = [test_tup1[i]]\n        dissimilar[test_tup1[i]].append(test_tup2[i])\n    # Return the dissimilar elements in a list\n    return dissimilar[max(dissimilar, key=dissimilar.get)]"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of dissimilar elements in the tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Loop through the tuples\n    for item1, item2 in zip(test_tup1, test_tup2):\n        # Check if the elements are equal\n        if item1 == item2:\n            # If they are, add them to the list\n            dissimilar_list.append(item1)\n        else:\n            # If they are not, break out of the loop and return the list\n            break\n\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for tup in test_tuple:\n        for elem in tup:\n            if even_fnc(elem):\n                new_tuple.append(elem)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    uneven_list = []\n    for item in test_tuple:\n        if even_fnc(item):\n            uneven_list.append(item)\n    return uneven_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            subresult = even_ele(item, even_fnc)\n            result.append(subresult)\n        else:\n            result.append(even_fnc(item))\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for tup in test_tuple:\n        if all(even_fnc(t) for t in tup):\n            new_tuple.append(tup)\n    return new_tuple\n\ndef is_even(n):\n    return n % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            new_tuple.append(even_ele(element, even_fnc))\n        elif even_fnc(element):\n            new_tuple.append(element)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for elem in test_tuple:\n        if isinstance(elem, list):\n            result.append(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            result.append(elem)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for element in test_tuple:\n        if isinstance(element, list):\n            new_tuple.append(even_ele(element, even_fnc))\n        elif isinstance(element, tuple):\n            new_tuple.append(even_ele(element, even_fnc))\n        elif isinstance(element, int):\n            if even_fnc(element):\n                new_tuple.append(element)\n    return new_tuple\n\ndef even(num):\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Loop through each element in the tuple\n    for item in test_tuple:\n        # If the element is a tuple, call the recursive function on it\n        if isinstance(item, tuple):\n            even_ele(item, even_fnc)\n        # If the element is not a tuple, call the provided even_fnc function on it\n        else:\n            even_fnc(item)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, (tuple, list)):\n            even_list.extend(even_fnc(item))\n        else:\n            even_list.append(even_fnc(item))\n    return even_list\n\ndef is_even(num):\n    return num % 2 == 0\n\ndef remove_uneven(nested_tuple):\n    return tuple(x for x in nested_tuple if is_even(x))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if isinstance(i, list):\n            even_list.extend(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            even_list.append(i)\n    return even_list\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculating the area of the pyramid using Heron's formula\n    area = (b*s)/2\n    # Calculating the surface area of the pyramid using the formula for the surface area of a square pyramid\n    surface = area * b\n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(base, height):\n    '''\n    This function takes in two parameters, base and height, and returns the surface area of a square pyramid with these dimensions.\n    '''\n    area = base * height\n    perimeter = base + base + height\n    surface_area = 2 * area + 6 * perimeter\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) / 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    This function calculates the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6 * b * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)/2 # find the area of the base\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s**2)+(b*s)+(s**2)*2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Using the Heron's formula to find the surface area of a square pyramid\n    area = (b**2 + s**2 + b**2 + s**2 + (b*s)**2) ** 0.5\n    # Multiplying the base edge and height by the surface area to get the final result\n    final_result = (b*s)*area\n    return final_result"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s + 2*b + 2*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (b**2)*(s+1)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)*2"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('The dictionary is empty')\n    else:\n        print('The dictionary is not empty')"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    if not dict1:  # check if the dictionary is empty\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    The Catalan number Cn is defined as follows:\n\n    C(n) = binomial(2n, n) / (n + 1)\n\n    For example, C(5) = 4 * C(4) / (5 + 1) = 25 / 6.\n\n    The Catalan numbers can be computed in closed form using the following\n    recurrence relation:\n\n    C(n) = 2 * C(n - 1) - C(n - 2)\n\n    We can use this formula to compute the Catalan numbers up to a certain\n    value of n.\n\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n > 2:\n        return 2 * catalan_number(n - 1) - catalan_number(n - 2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [1]\n    for i in range(1, n+1):\n        catalan.append(catalan[i-1] * (i+1))\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Calculate the nth Catalan number using the formula:\n    C(n) = binomial(2n, n) / (n + 1)\n    \"\"\"\n    from sympy import binomial\n    return binomial(2*n, n) / (n + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize the variable for catalan number\n    catalan_num = 0\n    # Initialize the factorial of num\n    factorial = 1\n    # Loop through the range of num\n    for i in range(1, num + 1):\n        # Calculate the factorial\n        factorial *= i\n        # Add the factorial to the catalan number\n        catalan_num += factorial\n    # Return the catalan number\n    return catalan_num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n)*catalan_number(n-1) // (n*(n-1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    # Initialize the sum of catalan numbers\n    catalan = 0\n\n    # Calculate the first two catalan numbers\n    catalan_1 = 1\n    catalan_2 = 1\n\n    # Calculate the catalan numbers up to the nth term\n    for i in range(3, num+1):\n        catalan_i = (4*i - 1) // (i)\n        catalan += catalan_i\n\n        # Calculate the next catalan number\n        temp = catalan_1\n        catalan_1 = catalan_2\n        catalan_2 = temp + catalan_i\n\n    # Return the nth catalan number\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth catalan number.\n\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    '''\n    This function returns nth catalan number.\n    '''\n    # Compute catalan numbers using formula\n    catalan = (1 + 2*n)*((2*n+1)**2)/((2*n+1)*(2*n+3)**2)\n    return catalan"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # find all occurrences of the pattern \"([^']*?[a-z][^']*?)(?=ly)\" in the text\n    matches = re.findall(r\"([^']*?[a-z][^']*?)(?=ly)\", text)\n\n    # create a list of tuples containing the position of the first adverb ending with ly and its length\n    adverbs = []\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match) - 1\n        length = end - start + 1\n        adverbs.append((start, length))\n\n    # sort the list of tuples based on their position in the original text\n    adverbs.sort()\n\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    pattern = r'\\b(ly|lys|lyse|lyses|lyst|lyster|lyses|lyster|lys)\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        adverbs.append((text.find(match), match))\n    return adverbs\n\ntext = \"This is a sample text with a long way to go to the moon. It's not as easy as it seems.\"\nadverbs = find_adverbs(text)\nprint(adverbs)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = re.compile(r'\\bly\\b')\n\n    # Find all non-overlapping matches of the pattern in the text\n    matches = pattern.finditer(text)\n\n    # Initialize an empty list to store the adverb positions and their lengths\n    adverb_positions = []\n\n    # Iterate over the matches and add their positions to the list\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        adverb_positions.append((start, end - start))\n\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            print(match, text.index(match))"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all adverbs ending with ly using regular expression\n    adverbs = re.findall(r'\\bly\\b', text)\n\n    # Create a list to store the positions of all adverbs ending with ly\n    positions = []\n\n    # Loop through each adverb found and append its position to the positions list\n    for i, adv in enumerate(adverbs):\n        positions.append((text.index(adv), text.index(adv)+len(adv)-1))\n\n    # Return the adverbs and their positions\n    return adverbs, positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match the adverbs\n    pattern = r'\\b(ly)\\b'\n\n    # Use re.findall() method to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the adverb positions\n    adverbs = []\n\n    # Loop through all the matches and append their positions to the adverbs list\n    for match in matches:\n        start_index = text.index(match)\n        adverbs.append((start_index, start_index + len(match)))\n\n    # Sort the adverbs by their starting positions in the text\n    adverbs.sort(key=lambda x: x[0])\n\n    # Return the list of adverb positions\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b[a-z]*ly\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        print(f'{match} starts at position {start} and ends at position {end}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    pattern = r'\\b(ly)$'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        adverb = text[start:end].lower()\n        adverbs.append((adverb, start))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\bly\\b' # regular expression to match \"ly\" as an adverb ending\n    adverbs = re.findall(pattern, text) # find all the adverbs using the regular expression\n    for i, adv in enumerate(adverbs):\n        print(f\"Adverb '{adv}' at position {i+1}.\") # print the adverbs and their positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    This function takes a string as input and returns a list of tuples containing the first adverb ending with ly and its positions in the string.\n    \"\"\"\n    pattern = r\"(?<=\\w)(ly)$\" # regex pattern to match adverbs ending with ly\n    matches = re.findall(pattern, text) # find all matches of the pattern in the text\n    \n    # create a list of tuples containing the first adverb ending with ly and its positions in the string\n    adverbs = []\n    for match in matches:\n        start_pos = text.index(match)\n        end_pos = start_pos + len(match)\n        adverb = text[start_pos:end_pos]\n        adverbs.append((adverb, start_pos, end_pos))\n        \n    return adverbs"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        # If the size of the heap exceeds n, remove the last item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the n most expensive items in descending order\n    return sorted(min_heap, reverse=True)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and returns\n    a list of the n most expensive items in the dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n    for item in items:\n        # If the size of the min heap is less than n, add the item to the heap\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        # If the size of the min heap is greater than or equal to n,\n        # compare the item with the smallest item in the heap\n        else:\n            if item < min_heap[0]:\n                # If the item is less than the smallest item in the heap, remove the smallest item from the heap\n                heapq.heappop(min_heap)\n                # Add the item to the heap if the heap is not full\n                heapq.heappush(min_heap, item)\n    # Return the n most expensive items in the dataset\n    return [min_heap[0] for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n to store the n most expensive items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        # Remove the least expensive item from the heap if we have more than n items in the heap\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n\n    # Add the first n items to the min heap\n    for item in items[:n]:\n        heapq.heappush(min_heap, item)\n\n    # Iterate through the remaining items in the dataset\n    for item in items[n:]:\n        # If the current item is less than or equal to the top item in the heap,\n        # remove it from the heap and add it to the min heap\n        if item <= heapq.heappop(min_heap):\n            heapq.heappush(min_heap, item)\n\n    # Return the n most expensive items from the min heap\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Given a list of items and an integer n, returns a list of the n most expensive items in the list.\n    '''\n    # Create a min heap of size n\n    max_heap = []\n    for item in items:\n        heapq.heappush(max_heap, -item)\n        \n        # If the heap size exceeds n, pop the smallest item from the heap\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    \n    # Return a list of the n most expensive items in the list\n    return [-heapq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and an integer n and returns the n most expensive items in the list.\n    '''\n    # Create a min heap to store the n most expensive items in the dataset\n    min_heap = []\n    for i in range(n):\n        # Get the minimum element from the list and add it to the min heap\n        min_heapq.heappush(min_heap, heapq.heappop(items))\n\n    # Extract the n most expensive items from the min heap and return them as a list\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and returns a list containing the n most expensive items from the input list.\n\n    Args:\n    - items (list): A list of items to be sorted.\n    - n (int): An integer representing the number of most expensive items to be returned.\n\n    Returns:\n    - list: A list containing the n most expensive items from the input list.\n    '''\n\n    # Use a min heap to store the n most expensive items\n    min_heap = []\n\n    # Iterate through the items and add them to the min heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n        # If the min heap has more than n elements, remove the smallest element\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Return the sorted list of n most expensive items\n    return sorted(min_heap, reverse=True)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and a number n as input and returns the n most expensive items.\n    The function uses a min heap to keep track of the n most expensive items.\n    '''\n    \n    # Create a min heap of size n\n    heap = []\n    \n    # Iterate through the list of items\n    for item in items:\n        # If the heap is empty or the item is less expensive than the smallest item in the heap, add it to the heap\n        if not heap or item < heap[0]:\n            heapq.heappush(heap, item)\n        # If the heap is not empty and the item is equal to the smallest item in the heap, remove it from the heap\n        elif item == heap[0]:\n            heapq.heappop(heap)\n    \n    # Return the n most expensive items in the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    max_heap = []\n    for item in items:\n        heapq.heappush(max_heap, item)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Error: The index is greater than the length of the list\"\n    else:\n        return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0:\n        return []\n    elif n == len(l):\n        return [l[0]] + l[1:]\n    else:\n        return l[n-1] + split_Arr(l[:n-1], n)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Split the list at the nth element\n    new_list = l[:n] + [l[n]]\n    \n    # Return the new list\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n\n    # Split the list at the nth element\n    mid = n // 2\n    part1 = l[:mid]\n    part2 = l[mid:]\n\n    # Add part1 to the end of part2\n    part2.extend(part1)\n\n    # Return the modified list\n    return part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list at the nth element\n    part1 = l[:n]\n    part2 = l[n:]\n    # add part1 to part2 and return the concatenated list\n    return part1 + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    elif n == 0:\n        return [l[0]] + l\n    else:\n        return split_Arr(l[n:], n-1) + [l[0]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    mid = len(l) // 2\n    first_part = l[:mid]\n    last_part = l[mid:]\n    new_list = first_part + [n] + last_part\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return []\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Create an empty list to hold the split elements\n    split_lst = []\n\n    # Check if the input list has at least one element\n    if len(l) > 0:\n        # Loop through each element in the input list\n        for i in range(len(l)):\n            # If the current element is less than the nth element, add it to the split list\n            if i < n:\n                split_lst.append(l[i])\n            # If the current element is equal to the nth element, add the first part of the list to the end\n            elif i == n:\n                split_lst = split_lst + l[:n]\n                break\n        # Return the split list\n        return split_lst\n    else:\n        # Return an empty list if the input list has no elements\n        return []"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    # Convert list to tuple\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(lst):\n    '''\n    This function takes a list as input and returns a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    #initialize the largest and smallest values\n    smallest = nums[0]\n    largest = nums[0]\n\n    #loop through the list and find the smallest and largest values\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n\n    #return the difference between largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of integers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    if len(nums) < 2:\n        return 0\n    \n    max_val = max(nums)\n    min_val = min(nums)\n    \n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    \n    # Find the largest and smallest values in the list\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # Return the difference between the largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    # sort the list in descending order\n    nums.sort(reverse=True)\n\n    # calculate the difference between the largest and smallest values\n    diff = nums[0] - nums[1]\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n\n    # Calculate the difference between largest and smallest\n    diff = largest - smallest\n\n    # Return the difference between largest and smallest\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # Sort the list in ascending order\n    nums.sort()\n    # Find the difference between largest and smallest value\n    diff = nums[-1] - nums[0]\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n\n    # Initialize the maximum and minimum values\n    max_val = float('-inf')\n    min_val = float('inf')\n\n    # Loop through the list and update the maximum and minimum values\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"The list is empty.\"\n    \n    max_val = nums[0]\n    min_val = nums[0]\n    \n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    \n    return max_val - min_val"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # initialize a set to store all perfect squares\n    perfect_squares = set()\n\n    # loop through all numbers between a and b (inclusive)\n    for num in range(a, b+1):\n        # check if the square is a perfect square\n        root = num ** 0.5\n        if int(root) == root:\n            perfect_squares.add(int(root))\n\n    # return the set of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Loop through all the numbers between a and b (inclusive)\n    for i in range(a, b+1):\n\n        # Check if the square of the current number is equal to the current number\n        if i*i == i:\n\n            # If yes, print the current number\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(int(a ** 0.5), int(b ** 0.5) + 1):\n        if i ** 2 == a or i ** 2 == b:\n            print(i ** 2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Find all perfect squares between two given numbers a and b.\n    \"\"\"\n    # Check if a and b are of type int\n    if not all(isinstance(x, int) for x in [a, b]):\n        raise ValueError(\"Both arguments must be integers.\")\n\n    # Initialize variables for storing the results\n    perfect_squares = []\n    current = a\n    while current <= b:\n        # Check if the current number is a perfect square\n        square = int(current**0.5)\n        if current == square**2:\n            perfect_squares.append(current)\n        # Increment current and decrement square to check for the next perfect square\n        current += 1\n        square -= 1\n\n    # Return the list of perfect squares found\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        if square == i:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Check if the second number is less than or equal to the first number\n    if b <= a:\n        return \"Error: second number must be greater than the first number\"\n    # Initialize a variable to store the perfect square value\n    square = 0\n    # Loop through the first number to the second number\n    for i in range(a, b+1):\n        # Check if the current square is a perfect square\n        square = i**2\n        # If the square is less than or equal to the second number, add it to the result list\n        if square <= b:\n            result.append(square)\n    # Return the list of perfect squares\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == a**2:\n            return i\n        elif i**2 < a**2:\n            break\n    return \"No perfect squares found.\""
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize two empty lists to store the perfect squares found\n    squares_a = []\n    squares_b = []\n    # loop through the range of numbers between a and b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        if i ** 0.5 == int(i ** 0.5):\n            squares_a.append(int(i ** 0.5))\n        # check if i is a perfect square\n        if i ** 0.5 + 1 == int(i ** 0.5 + 1):\n            squares_b.append(int(i ** 0.5 + 1))\n    # return the list of perfect squares\n    return squares_a, squares_b"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    squares = []\n    for i in range(int(a**(1/2)), int(b**(1/2)) + 1):\n        squares.append(i**2)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares_list = []\n    i = a\n    while i <= b:\n        j = i*i\n        while j <= b:\n            perfect_squares_list.append(j)\n            j += i\n        i += 1\n    return perfect_squares_list"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    # Convert polar coordinates to complex numbers\n    complex_num = x+1j*y\n    \n    # Convert complex number to rectangular coordinates\n    rect_x = cmath.rect(complex_num)[0]\n    rect_y = cmath.rect(complex_num)[1]\n    \n    # Return the rectangular coordinates\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes the radius r and angle theta in radians and returns the x and y coordinates of the corresponding point in rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Converts polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    r (float): Radius of the point in polar coordinates.\n    theta (float): Angle of the point in polar coordinates (in radians).\n    \n    Returns:\n    x (float): x-coordinate of the point in rectangular coordinates.\n    y (float): y-coordinate of the point in rectangular coordinates.\n    \"\"\"\n    # Convert angle from radians to degrees\n    theta = cmath.degrees(theta)\n    # Calculate x and y coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    r (float): The magnitude of the complex number (radius)\n    theta (float): The angle of the complex number (in radians)\n    \n    Returns:\n    complex: The rectangular coordinates of the complex number\n    \"\"\"\n    return r * cmath.exp(1j*theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x + y*1j)\n    \n    x_rect = r*cmath.cos(phi)\n    y_rect = r*cmath.sin(phi)\n    \n    return (x_rect, y_rect)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2) #calculate the length of the vector\n    theta = cmath.phase(x + y*1j) #calculate the angle of the vector\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect,y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    This function takes two arguments, r and theta, and converts them to rectangular coordinates.\n    \n    Arguments:\n    r: The radius of the circle\n    theta: The angle of the circle\n    \n    Returns:\n    x: The x-coordinate of the point on the circle\n    y: The y-coordinate of the point on the circle\n    \"\"\"\n    \n    # Convert theta from degrees to radians\n    theta = cmath.pi * theta / 180\n    \n    # Calculate x and y coordinates using the Pythagorean theorem\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    # Check if the list has at least 2 elements\n    if len(newList) >= 2:\n        # Store the first element in a temporary variable\n        temp = newList[0]\n        # Set the first element to the last element\n        newList[0] = newList[-1]\n        # Set the last element to the temporary variable\n        newList[-1] = temp\n    else:\n        print(\"The list must have at least 2 elements to be swapped.\")\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2: \n        return \"List must have at least two elements.\" \n    else: \n        # swap the first and last element in the list using list slicing\n        newList[0], newList[-1] = newList[-1], newList[0] \n        return newList "
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Check if the list is empty\n    if len(newList) == 0:\n        return newList\n\n    # Check if the list has only one element\n    elif len(newList) == 1:\n        return [newList[0], newList[0]]\n\n    # Check if the list has two or more elements\n    else:\n        # Interchange the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n\n        # Return the interchanged list\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #swapping the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Checking if the input list has at least two elements\n    if len(newList) < 2:\n        print(\"The input list must have at least two elements.\")\n        return None\n    else:\n        # Interchanging the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    # interchange the first and last elements in the list\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    # Get the length of the list\n    n = len(newList)\n    \n    # Swap the first and last elements\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    # Using a loop to calculate the product of consecutive binomial co-efficients\n    product = 1\n    for i in range(1, k+1):\n        product *= (n-i+1)\n        product //= i\n        \n    # Return the sum of the product of consecutive binomial co-efficients\n    return product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n: \n        return 1 \n    else: \n        return binomial_Coeff(n-1,k-1) * n // k "
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1,k+1):\n        sum += (n-i+1) * (i*k*2)/(2*i-1)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0 or k == 0 or k > n: \n        return 0\n    elif k > n//2: \n        n, k = k, n \n    s = 0\n    for i in range(n//2,k,-1): \n        s += (n-i)/(2*i+1)\n    for i in range(k//2,0,-1): \n        s -= (k-i)/(2*i+1)\n    return s"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    # base case\n    if k == 0 or k == n:\n        return 1\n\n    # recursive case\n    else:\n        return binomial_Coeff(n-1, k) + binomial_Coeff(n-1, k-1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff_sum = 0\n    for i in range(1,n+1):\n        coeff_sum += i*binomial_Coeff(n-i,k-1)\n    return coeff_sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize the sum to 0\n    sum = 0\n    \n    # loop over the values of k from 0 to n-1\n    for i in range(n):\n        # calculate the binomial coefficient using the formula (n choose i) * (n-i choose k-i)\n        binomial_coeff = ((n-i) * (i+1)) // (i+1)\n        # multiply it with the current value of k\n        sum += binomial_coeff * (k-i)\n    \n    # return the final sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    # initialize the sum to 0\n    sum = 0\n    # loop through the range from 0 to n-k+1\n    for i in range(n - k + 1):\n        # calculate the binomial coefficient using math.comb()\n        num = math.comb(n, i)\n        # multiply it by the next consecutive kth binomial coefficient\n        denom = math.comb(k - 1, i)\n        # add the result to the sum\n        sum += num * denom\n    # return the sum of the product of consecutive binomial co-efficients\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k,n+1):\n        sum += i*(n-i+1)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+\\.0+\\.\\d+\\.0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from ip address using regular expression\n    ip = re.sub(r'^\\D+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = re.compile(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$')\n    if not ip_pattern.match(ip):\n        return 'Invalid IP address'\n    return re.sub(r'^\\d+\\.', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from ip address\n    ip = re.sub(r'^0+', '', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+(?!.*0)', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_no_zero = re.sub(r'^\\d+(?=\\.\\d+)|((?<=\\.\\d)(?=\\.)|(?<=\\.$))', '', ip)\n    return ip_no_zero"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # define regex pattern to match leading zeros in ip address\n    pattern = r'^\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+$'\n    # check if pattern matches ip address\n    if re.match(pattern, ip):\n        # remove leading zeros from each group of four octets\n        ip_list = ip.split(':')\n        for i in range(len(ip_list)):\n            ip_list[i] = ip_list[i].lstrip('0')\n        # join the groups back into an ip address string\n        ip = ':'.join(ip_list)\n        return ip\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d*[.]0+', '', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) >= 2:\n        if list1[0] % 2 == 0 and list1[1] % 2 == 0:\n            return list1[0] - list1[1]\n        elif list1[0] % 2 == 1 and list1[1] % 2 == 1:\n            return list1[0] - list1[1]\n        elif list1[0] % 2 == 0 and list1[1] % 2 == 1:\n            return list1[1] - list1[0]\n        else:\n            return list1[0] - list1[1]\n    else:\n        return \"List should have at least two elements\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return \"The list should have at least two elements.\"\n    elif not all(isinstance(x, (int, float)) for x in list1):\n        return \"All elements in the list should be integers or floats.\"\n    \n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            else:\n                return \"The first even number is repeated.\"\n        elif num % 2!= 0:\n            if first_odd is None:\n                first_odd = num\n            else:\n                return \"The first odd number is repeated.\"\n    \n    if first_even is None:\n        return \"The list does not contain any even number.\"\n    elif first_odd is None:\n        return \"The list does not contain any odd number.\"\n    else:\n        return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    \n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    \n    return abs(even[0] - odd[0])"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    If the list contains less than two elements, it will return a message indicating this.\n    \"\"\"\n    if len(lst) < 2:\n        return \"List must contain at least two elements.\"\n    if lst[0] % 2 == 0 and lst[1] % 2!= 0:\n        return lst[0] - lst[1]\n    elif lst[0] % 2!= 0 and lst[1] % 2 == 0:\n        return lst[1] - lst[0]\n    else:\n        return \"Both elements must be even or odd.\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = list1[0]\n    odd_first = list1[1]\n    diff = even_first - odd_first\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    # initialize variables\n    first_even = 0\n    first_odd = 0\n    \n    # loop through the list\n    for num in list1:\n        # check if the number is even\n        if num % 2 == 0:\n            first_even = num\n        # check if the number is odd\n        elif num % 2!= 0:\n            first_odd = num\n    \n    # find the difference between the first even and first odd numbers\n    diff = first_even - first_odd\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # initialize even and odd indices\n    even_index = 0\n    odd_index = 1\n    \n    # find the even and odd numbers in the list\n    while even_index < len(list1) and odd_index < len(list1):\n        if list1[even_index] % 2 == 0:\n            even = list1[even_index]\n            even_index += 1\n        else:\n            odd = list1[odd_index]\n            odd_index += 1\n    \n    # find the difference of the even and odd numbers\n    diff = even - odd\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    diff = abs(even_num - odd_num)\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the first even and first odd numbers\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    # Calculate the difference of the even and odd numbers\n    diff = even_num - odd_num\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2): \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)  # length of string1\n    count = 0 \n    # Traverse through each character of string1 \n    for i in range(n): \n        # If the characters don't match, increment the count \n        if str1[i]!= str2[i]: \n            count += 1 \n    return count "
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize variables\n    n = len(str1)\n    swap_count = 0\n    swapped = False\n\n    # Iterate through the strings from left to right\n    for i in range(n):\n        # If the characters are not equal, swap them\n        if str1[i]!= str2[i]:\n            # Increment the swap count and swap the characters\n            swap_count += 1\n            str1[i], str2[i] = str2[i], str1[i]\n            swapped = True\n\n    # Return the minimum number of swaps required\n    if swapped:\n        return swap_count\n    else:\n        return 0"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # check if both strings have equal length\n    if len(str1)!= len(str2):\n        return \"Both strings must have the same length\"\n\n    # create a dictionary to store the frequency of characters in both strings\n    freq = {}\n    for char in str1 + str2:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # create a list of characters with their frequency in both strings\n    char_freq = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n\n    # initialize minimum number of swaps\n    swaps = 0\n\n    # iterate through the characters with their frequency in both strings\n    for i in range(len(char_freq)):\n        # if the frequency of the current character is equal in both strings, skip it\n        if char_freq[i][1] == freq[char_freq[i][0]]:\n            continue\n\n        # calculate the minimum number of swaps required to convert the current character to the character with maximum frequency\n        min_swap = freq[char_freq[i][0]] // char_freq[i][1]\n\n        # update the minimum number of swaps if the current character can be converted to the character with maximum frequency\n        if min_swap < swaps:\n            swaps = min_swap\n\n        # swap the characters if they can be swapped with minimum number of swaps\n        if i < len(char_freq) - 1 and char_freq[i][1] > 1 and char_freq[i + 1][1] > 1:\n            char_freq[i][1] -= 1\n            char_freq[i + 1][1] -= 1\n            swaps += min_swap\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    arr1 = [0]*n\n    arr2 = [0]*n\n    for i in range(n):\n        if str1[i] == '0':\n            arr1[i] = 0\n        else:\n            arr1[i] = 1\n    for i in range(n):\n        if str2[i] == '0':\n            arr2[i] = 0\n        else:\n            arr2[i] = 1\n    count = 0\n    for i in range(n):\n        if arr1[i]!= arr2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    n = max(n1, n2)\n\n    # Create a 2D array to store the min number of swaps required to convert each pair of strings\n    dp = [[0] * n for _ in range(n)]\n\n    # Fill the dp array in bottom up manner\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                # For each pair of characters, we need to swap at least one character, so we add 1 to the value of dp[i][j]\n                dp[i][j] = 1\n            elif i == j-1:\n                # If the characters are the same and we need to swap only one character, we don't need to swap anything, so we add 0 to the value of dp[i][j]\n                dp[i][j] = 0\n            else:\n                # If the characters are different, we need to swap at least one character. So, we compare the characters at i-1 and j-1, and swap them if they are different, and add the minimum value of dp[i-1][j-1] and dp[i][j-1] to the value of dp[i][j]\n                dp[i][j] = min(dp[i-1][j-1] + (str1[i]!= str2[j]), dp[i][j-1] + (str1[i] == str2[j]))\n\n    return dp[n1-1][n2-1]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    diff = abs(int(str1, 2) - int(str2, 2))\n    if diff > 0:\n        return n - diff\n    else:\n        return 0"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    swaps = 0\n    i = 0\n    j = 0\n    while i < n:\n        while str1[i] == str2[j]:\n            i += 1\n            j += 1\n        if i < n:\n            if str1[i]!= '0':\n                str1[i], str1[j] = str1[j], str1[i]\n                swaps += 1\n                i += 1\n                j += 1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n\n    # initialize variables\n    len_str1 = len(str1)\n    len_str2 = len(str2)\n    swaps = 0\n\n    # find the number of swaps required to convert str1 to str2\n    for i in range(len_str1) : \n        if str1[i]!= str2[i] : \n            str1 = str1[:i] + str2[i] + str1[i+1:] \n            str2 = str2[:i] + str2[i+1:] \n            swaps += 1\n\n    # find the number of swaps required to convert str2 to str1\n    for i in range(len_str2) : \n        if str2[i]!= str1[i] : \n            str1 = str1[:i] + str2[i] + str1[i+1:] \n            str2 = str2[:i] + str2[i+1:] \n            swaps += 1\n\n    # return the minimum number of swaps required\n    return swaps "
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n\n    # Create a dictionary to store the frequency of each bit in both binary strings\n    freq1 = {}\n    freq2 = {}\n    for i in range(n):\n        freq1[str1[i]] = freq1.get(str1[i], 0) + 1\n        freq2[str2[i]] = freq2.get(str2[i], 0) + 1\n\n    # Calculate the minimum number of swaps required to convert the first string to the second string\n    min_swaps = 0\n    for i in range(n):\n        if freq1[str1[i]] > freq2[str2[i]]:\n            min_swaps += freq1[str1[i]] - freq2[str2[i]]\n\n    # Calculate the minimum number of swaps required to convert the second string to the first string\n    min_swaps += min_Swaps(str2, str1)\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Calculate the number of bits in each number\n    n1 = len(str1)\n    n2 = len(str2)\n\n    # Calculate the minimum number of swaps required\n    min_swaps = 0\n\n    # Iterate through the binary numbers and swap bits as required\n    for i in range(max(n1, n2)):\n        if num1 & (1 << i)!= num2 & (1 << i):\n            min_swaps += 1\n            num1 ^= 1 << i\n            num2 ^= 1 << i\n\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize a variable to store the size of the tuple in bytes\n    size = 0\n\n    # Loop through each element in the tuple and add its size to the variable\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n\n    # Return the size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Convert the tuple to a list\n    tuple_list = list(tuple_list)\n    # Calculate the size of the list using sys.getsizeof()\n    size = sys.getsizeof(tuple_list)\n    # Convert the size to bytes\n    size = size.to_bytes(8, 'little')\n    # Return the size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Get the size of the tuple in bytes\n    tuple_size_bytes = sys.getsizeof(tuple_list)\n    # Convert the size to megabytes\n    tuple_size_megabytes = tuple_size_bytes / (1024 * 1024)\n    # Return the size as a string with two decimal places\n    return f\"{tuple_size_megabytes:.2f} MB\""
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for t in tuple_list:\n        size += sys.getsizeof(t)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the size of the tuple using sys.getsizeof() function\n    size_of_tuple = sys.getsizeof(tuple_list)\n\n    # Return the size in bytes\n    return size_of_tuple"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Initialize the left pointer of arr1 and right pointer of arr2\n    left = 0\n    right = 0\n    \n    # Loop until both pointers cross each other\n    while left < len(arr1) and right < len(arr2):\n        # If the elements of arr1 are less than the element of arr2,\n        # move the left pointer of arr1 to the next element\n        if arr1[left] < arr2[right]:\n            left += 1\n        # If the elements of arr2 are less than the element of arr1,\n        # move the right pointer of arr2 to the next element\n        else:\n            right += 1\n            \n    # If the left pointer of arr1 crosses the right pointer of arr2,\n    # kth element is in arr1[left:]\n    if left == len(arr1):\n        return arr1[right:]\n    # If the right pointer of arr2 crosses the left pointer of arr1,\n    # kth element is in arr2[right:]\n    else:\n        return arr2[left:]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            i += 1\n            k -= 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            j += 1\n            k -= 1\n        else:\n            if k == 1:\n                return arr1[i]\n            i += 1\n            j += 1\n            k -= 1\n    if k == 1:\n        return arr1[i] if i < len(arr1) else arr2[j]\n    else:\n        return None\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes three arguments:\n    arr1: A sorted array\n    arr2: Another sorted array\n    k: The index of the element we want to find\n\n    This function returns the kth element from the two sorted arrays.\n    '''\n\n    # Find the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Initialize two pointers, one for each array\n    i = 0\n    j = 0\n\n    # Compare the first k elements of both arrays\n    while i < k and j < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # If the elements are equal, move both pointers\n            i += 1\n            j += 1\n\n    # If k is greater than the length of the smaller array,\n    # then the kth element is in the first array\n    if i >= k:\n        return arr1[i-1]\n    else:\n        return arr2[j-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = k = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            arr1[k], arr1[i] = arr1[i], arr1[k]\n            k += 1\n            i += 1\n        else:\n            arr1[k], arr1[j] = arr1[j], arr1[k]\n            k += 1\n            j += 1\n    if i < len(arr1):\n        arr1[k:] = arr1[i:]\n    else:\n        arr2[k:] = arr2[j:]\n    return arr1[k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n\n    while i < len(arr1):\n        if i < k:\n            i += 1\n        else:\n            return arr1[i-1]\n\n    while j < len(arr2):\n        if j < k:\n            j += 1\n        else:\n            return arr2[j-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Find the length of both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Compare the length of both arrays\n    if n1 > n2:\n        # If arr1 is longer, swap it with arr2 and reverse it\n        arr1, arr2 = arr2, arr1\n        n1, n2 = n2, n1\n\n    # Compare the length of the smaller array with k\n    if n1 - k > 0:\n        # If arr1 has more elements than k, find the kth element in arr1\n        return find_kth(arr1[k:], arr2, k)\n    else:\n        # If arr1 has less elements than k, find the kth element in arr2\n        return find_kth(arr1, arr2[k:], k - n1)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(number)]\n    # Calculate the power of each digit in the list\n    powers = [d**len(digits) for d in digits]\n    # Calculate the sum of the powers of each digit\n    armstrong_sum = sum(powers)\n    # Check if the sum is equal to the original number\n    return armstrong_sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Converting the number into a list of digits\n    digits = [int(digit) for digit in str(number)]\n    \n    # Calculating the sum of the digits raised to the power of the length of the list\n    armstrong_sum = sum([digit**len(digits) for digit in digits])\n    \n    # Checking whether the sum is equal to the original number\n    return number == armstrong_sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    This function takes a number as input and checks whether it is an Armstrong number or not.\n    An Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.\n\n    Example: 153 is an Armstrong number. The sum of its own digits (3 + 5 + 3) raised to the power of the number of digits (3) is 1^3 + 5^3 + 3^3 = 153.\n\n    Note: This function is case sensitive.\n    '''\n    # Function to calculate the number of digits in a number\n    def count_digits(num):\n        count = 0\n        while num > 0:\n            count += 1\n            num //= 10\n        return count\n\n    # Function to calculate the sum of the digits of a number raised to the power of the number of digits\n    def sum_of_digits_raised_to_power(num):\n        sum = 0\n        while num > 0:\n            digit = num % 10\n            sum += digit ** count_digits(num)\n            num //= 10\n        return sum\n\n    # Check if the number is greater than 0\n    if number > 0:\n        # Check if the number is equal to the sum of its own digits raised to the power of the number of digits\n        if number == sum_of_digits_raised_to_power(number):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong_number(num):\n    \"\"\"\n    This function checks whether the given number is an Armstrong number or not.\n    \"\"\"\n    num_str = str(num)\n    num_len = len(num_str)\n    power = 0\n    armstrong_sum = 0\n    \n    for digit in num_str:\n        power += int(digit) ** power\n    \n    while num!= 0:\n        digit = num % 10\n        armstrong_sum += digit ** power\n        num //= 10\n    \n    return armstrong_sum == num"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if len(str(number))!= len(set(str(number))):\n        return False\n    else:\n        num_copy = number\n        sum = 0\n        while num_copy > 0:\n            digit = num_copy % 10\n            sum += digit ** len(str(number))\n            num_copy //= 10\n        return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(number)\n\n    # Initialize the sum of the digits\n    digit_sum = 0\n\n    # Iterate over each digit of the number\n    for digit in num_str:\n        # Convert each digit to an integer\n        digit_int = int(digit)\n\n        # Add the integer to the sum\n        digit_sum += digit_int ** len(num_str)\n\n    # Check if the sum is equal to the original number\n    if digit_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string and reverse it\n    reversed_number = str(number)[::-1]\n    # Initialize the sum of digits to zero\n    sum_of_digits = 0\n    # Iterate through each digit in the reversed number and add it to the sum of digits\n    for digit in reversed_number:\n        sum_of_digits += int(digit)\n    # Compare the original number and the sum of digits\n    if number == sum_of_digits:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string and remove any leading zeros\n    num_str = str(number)\n    num_str = num_str.lstrip('0')\n\n    # Calculate the sum of the cubes of each digit in the number\n    sum_of_cubes = 0\n    for digit in num_str:\n        digit_int = int(digit)\n        cube = digit_int ** 3\n        sum_of_cubes += cube\n\n    # Check if the sum of the cubes is equal to the original number\n    if sum_of_cubes == number:\n        print(f\"{number} is an Armstrong number.\")\n    else:\n        print(f\"{number} is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(number):\n    '''\n    A function to check whether a given number is an Armstrong number or not.\n    '''\n    # Initialize a variable to store the number of digits in the number\n    digit_count = 0\n    # Convert the number to a string\n    num_str = str(number)\n    # Loop through each digit in the number\n    for digit in num_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Add the integer to the count of digits\n        digit_count += digit_int**len(num_str)\n    # Check if the count is equal to the original number\n    return digit_count == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    count = 0\n    \n    while num > 0:\n        digit = num % 10\n        count += digit ** 3\n        num //= 10\n        \n    if count == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif number == 1:\n        return \"1 is not a natural number. Please enter a positive integer greater than 1.\"\n    else:\n        sum = 0\n        for i in range(1, number + 1):\n            sum += i\n        average = sum / number\n        return \"Sum: {}, Average: {}\".format(sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    print(\"Sum:\", sum)\n    print(\"Average:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count variables to zero\n    total = count = 0\n    \n    # loop through first n natural numbers and add them to sum and count\n    for i in range(n):\n        total += i\n        count += 1\n        \n    # calculate average by dividing sum by count\n    average = total / count\n    \n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n\n    for i in range(1, number+1):\n        total += i\n        count += 1\n\n    average = total / count\n\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables\n    total = 0\n    count = 0\n    sum_of_squares = 0\n    \n    # iterate through the first n numbers\n    for i in range(1, number+1):\n        # add the current number to the total\n        total += i\n        \n        # calculate the sum of squares of the current number\n        sum_of_squares += i*i\n        \n        # increment the count\n        count += 1\n        \n    # calculate the average and sum of squares\n    average = total / count\n    sum_of_squares = sum_of_squares / count\n    \n    # return the sum and average\n    return total, average, sum_of_squares"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # Initialize variables\n    total = 0\n    count = 0\n    average = 0\n    \n    # Iterate over the first n natural numbers\n    for i in range(1, number+1):\n        total += i\n        count += 1\n        \n    # Calculate the average\n    average = total / count\n    \n    # Return the sum and average\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(number):\n        count += 1\n        sum += i\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i + 1\n    avg = sum / n\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    average = total/count\n    print(\"Sum:\", total)\n    print(\"Average:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize variables\n    sum = 0\n    count = 0\n    avg = 0\n    \n    # loop through the first n natural numbers\n    for i in range(number):\n        # add the number to the sum\n        sum += i\n        \n        # increment the count of numbers\n        count += 1\n        \n        # calculate the average\n        avg = sum / count\n    \n    # print the sum and average\n    print(\"Sum:\", sum)\n    print(\"Average:\", avg)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The number is even\")\n    else:\n        print(\"The number is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n): \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        print(\"The number is even.\")\n    else: \n        print(\"The number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a single argument, n, which is an integer. It returns True if n is even, and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The number is even\")\n    else:\n        print(\"The number is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(f\"{n} is even.\")\n    else:\n        print(f\"{n} is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the count of each character in the string\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment the count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first repeated character in the dictionary\n    first_rep_char = None\n    for char, count in char_count.items():\n        if count == 2:\n            first_rep_char = char\n            break\n    \n    return first_rep_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return 'No repeated character found'"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first repeated character and its frequency\n    for char in freq:\n        if freq[char] > 1:\n            return char, freq[char]\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_list = []\n    for char in str1:\n        if char in char_list:\n            return char\n        char_list.append(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it and set its count to 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first repeated character in the dictionary\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i] == str1[j-1]:\n                return str1[i]\n    return \"There is no repeated character in the string.\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n            \n"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the frequency of characters in the string\n    freq = {}\n\n    # Iterate over the string and update the frequency dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first repeated character\n    for char in str1:\n        if freq[char] > 1:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    current_number = 1\n    while current_number <= n:\n        if current_number % 13 == 0:\n            lucid_numbers.append(current_number)\n        current_number += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            if is_lucid(i):\n                lucid_numbers.append(i)\n        else:\n            if is_lucid(i):\n                lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(num):\n    '''\n    Write a function to check if a given integer is a lucid number.\n    '''\n    lucid_nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for lucid in lucid_nums:\n        if num % lucid == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if all(i%j!= 0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if all(int(digit)!= i % 10 for digit in str(i)):\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1:\n            lucid_numbers.append(i)\n            continue\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = [i for i in range(2, n+1) if all(i%j!= 0 for j in range(2, int(i**0.5)+1))]\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_nums = []\n    num = 2  # initialize the first number as 2\n    while num <= n:\n        if num % 2 == 0:  # if the number is even\n            if num <= 2**0.5:  # if the number is less than or equal to the square root of 2\n                lucid_nums.append(num)\n        elif num > 2**0.5:  # if the number is odd and greater than the square root of 2\n            lucid_nums.append(num)\n        num += 1  # increment the number by 1\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if all(int(d)**i % 2 == 0 for d in str(i)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = words[::-1]\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into words using space as the delimiter\n    reversed_words = [] # create an empty list to store the reversed words\n    for word in words:\n        reversed_words.append(word[::-1]) # append the reversed word to the list\n    return''.join(reversed_words) # join the reversed words back together and return as a string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words into a string\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    # Split the string into words using the split() function\n    words = s.split()\n    \n    # Reverse the order of the words using slicing\n    words = words[::-1]\n    \n    # Join the words into a string separated by spaces\n    s =''.join(words)\n    \n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    # reverse the list of words\n    words.reverse()\n    # join the list of words back into a string\n    reversed_s =''.join(words)\n    # return the reversed string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    # Convert the string to a list of words\n    words = s.split()\n    # Reverse the list of words\n    words.reverse()\n    # Join the list of words back into a string\n    reversed_s =''.join(words)\n    # Return the reversed string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    s = s.strip()  # remove leading and trailing whitespaces\n    words = s.split()  # split the string into words\n    reversed_words = [word[::-1] for word in words]  # reverse each word\n    reversed_s =''.join(reversed_words)  # join the reversed words back into a string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list and join it back into a string\n    result =''.join([word[::-1] for word in words])\n    # Return the reversed string\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function checks if a given integer is a prime number or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number.\n    \"\"\"\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number to check if it's a prime number: \"))\n\nif is_prime(num):\n    print(num, \"is a prime number\")\nelse:\n    print(num, \"is not a prime number\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num == 3:\n        return True\n    elif num % 2 == 0:\n        return False\n    elif num % 3 == 0:\n        return False\n    elif num % 4 == 0:\n        return False\n    elif num % 5 == 0:\n        return False\n    elif num % 6 == 0:\n        return False\n    elif num % 7 == 0:\n        return False\n    elif num % 8 == 0:\n        return False\n    elif num % 9 == 0:\n        return False\n    elif num % 10 == 0:\n        return False\n    elif num % 11 == 0:\n        return False\n    elif num % 12 == 0:\n        return False\n    elif num % 13 == 0:\n        return False\n    elif num % 14 == 0:\n        return False\n    elif num % 15 == 0:\n        return False\n    elif num % 16 == 0:\n        return False\n    elif num % 17 == 0:\n        return False\n    elif num % 18 == 0:\n        return False\n    elif num % 19 == 0:\n        return False\n    elif num % 20 == 0:\n        return False\n    elif num % 21 == 0:\n        return False\n    elif num % 22 == 0:\n        return False\n    elif num % 23 == 0:\n        return False\n    elif num % 24 == 0:\n        return False\n    elif num % 25 == 0:\n        return False\n    elif num % 26 == 0:\n        return False\n    elif num % 27 == 0:\n        return False\n    elif num % 28 == 0:\n        return False\n    elif num % 29 == 0:\n        return False\n    elif num % 30 == 0:\n        return False\n    elif num % 31 == 0:\n        return False\n    elif num % 32 == 0:\n        return False\n    elif num % 33 == 0:\n        return False\n    elif num % 34 == 0:\n        return False\n    elif num % 35 == 0:\n        return False\n    elif num % 36 == 0:\n        return False\n    elif num % 37 == 0:\n        return False\n    elif num % 38 == 0:\n        return False\n    elif num % 39 == 0:\n        return False\n    elif num % 40 == 0:\n        return False\n    elif num % 41 == 0:\n        return False\n    elif num % 42 == 0:\n        return False\n    elif num % 43 == 0:\n        return False\n    elif num % 44 == 0:\n        return False\n    elif num % 45 == 0:\n        return False\n    elif num % 46 == 0:\n        return False\n    elif num % 47 == 0:\n        return False\n    elif num % 48 == 0:\n        return False\n    elif num % 49 == 0:\n        return False\n    elif num % 50 == 0:\n        return False\n    elif num % 51 == 0:\n        return False\n    elif num % 52 == 0:\n        return False\n    elif num % 53 == 0:\n        return False\n    elif num % 54 == 0:\n        return False\n    elif num % 55 == 0:\n        return False\n    elif num % 56 == 0:\n        return False\n    elif num % 57 == 0:\n        return False\n    elif num % 58 == 0:\n        return False\n    elif num % 59 == 0:\n        return False\n    elif num % 60 == 0:\n        return False\n    elif num % 61 == 0:\n        return False\n    elif num % 62 == 0:\n        return False\n    elif num % 63 == 0:\n        return False\n    elif num % 64 == 0:\n        return False\n    elif num % 65 == "
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number, and False otherwise.\n    \"\"\"\n\n    # check if the number is less than 2\n    if num < 2:\n        return False\n\n    # check if the number is equal to 2 or 3\n    if num == 2 or num == 3:\n        return True\n\n    # check if the number is divisible by any odd number from 3 to the square root of the number\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n\n    # if no even factors were found, then the number is prime\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return round(radian, 4)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi/180)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi/180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use regex pattern to find all literals\n    matches = re.findall(pattern, text)\n    # Iterate over matches and return indices, literals\n    for match in matches:\n        start = text.index(match)\n        end = start + len(match)\n        yield start, end, match"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function searches a string for a regex pattern and returns the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        return result[0], 0, len(result[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    This function finds all matches of the given pattern in the text, and returns a list of tuples\n    containing the matching substring, the start index, and the end index of that substring.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        start_index = match.start()\n        end_index = match.end()\n        result = (match.group(), start_index, end_index)\n        results.append(result)\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literal = text[match.start():match.end()]\n        literals.append((literal, match.start(), match.end()))\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        start_index = matches[0].start()\n        end_index = matches[-1].end()\n        literal = matches[0].group()\n        return literal, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function takes in a string and a regex pattern as arguments. It then searches for the pattern in the string using the re.search() function. If the pattern is found, it returns a tuple containing the matching substring, the start index of the substring, and the end index of the substring. If the pattern is not found, it returns a tuple containing None for all three values.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function searches a string for a regex pattern. The function returns the matching subtring, a start index and an end index.\n    '''\n    # Use re.search() to search the string for the pattern\n    match = re.search(pattern, text)\n    \n    if match:\n        # Return the matching subtring, a start index and an end index\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return (n * (n-1)) + (n * 2) - (n * (n-2))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 1\n    b = 1\n    c = 0\n    for i in range(1, n+1):\n        c = a + b\n        a = b\n        b = c\n        print(c, end=' ')"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [0, 1]\n    for i in range(2, n+1):\n        bell_numbers.append(bell_numbers[-1] + bell_numbers[-2])\n    return bell_numbers[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 0\n    for i in range(n):\n        bell += 2 * i + 1\n    return bell\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The value of nth Bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize bell number to 0\n    bell = 0\n    # Check if n is even or odd\n    if n % 2 == 0:\n        # Check if n is less than or equal to 3\n        if n <= 3:\n            # Set bell number to n\n            bell = n\n        else:\n            # Calculate bell number for even values of n\n            for i in range(4, n+1, 2):\n                bell += i\n    else:\n        # Check if n is greater than 3\n        if n > 3:\n            # Calculate bell number for odd values of n\n            for i in range(5, n, 2):\n                bell += i\n    # Return bell number\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * bell_Number(n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize the first few bell numbers\n    bell_numbers = [0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]\n    \n    # Check if n is in the range of bell numbers\n    if n < 0 or n >= len(bell_numbers):\n        print(\"Invalid input\")\n        return\n    \n    # Return the nth bell number\n    return bell_numbers[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (2*n-1)**(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_num = 0\n    for i in range(1, n+1):\n        bell_num += 1 / (i * (i+1))\n    return bell_num"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    Remove the kth element from a list.\n    \"\"\"\n    if k > len(lst):\n        raise ValueError(\"k is greater than the length of the list\")\n    lst = list(lst) # convert to mutable list\n    lst.pop(k-1) # remove the kth element\n    return lst"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    k = L - 1\n    for i in range(len(list1)):\n        if i!= k:\n            list2.append(list1[i])\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and the position of the kth element to be removed from the list.\n    It returns a new list with the same elements, but the k'th element removed.\n    '''\n    new_list = list1[:L] + list1[L+1:]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n\n    if L == 1:\n        return [x for x in list1[1:]]\n    elif L == len(list1):\n        return list1[:-1]\n    else:\n        return [x for x in list1[1:] if x!= list1[L-1]]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    list2 = []\n    for i in range(len(list1)):\n        if i!= k:\n            list2.append(list1[i])\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # check if list is not empty\n    if not list1:\n        return []\n    # check if L is a positive integer\n    if not L.isdigit():\n        return []\n    # check if k is a positive integer\n    if not L.isdigit():\n        return []\n    # check if k is less than or equal to length of list\n    if int(L) > len(list1):\n        return []\n    # create new list without kth element\n    new_list = list(list1)\n    del new_list[int(L)-1]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if len(list1) < L:\n        print(\"List cannot have less than L elements.\")\n    else:\n        k = L - 1\n        for i in range(len(list1) - 1, 0, -1):\n            if i == k:\n                del list1[i]\n            else:\n                list1[i - 1] = list1[i]\n        return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(lst, k):\n    '''\n    This function takes a list and removes the kth element.\n    '''\n    return lst[:k] + lst[k+1:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    This function takes a matrix as a list of lists and returns the max of the N'th column.\n    '''\n    if N > len(matrix[0]) or N < 1:\n        return 'Invalid N value.'\n    else:\n        max_col = []\n        for i in range(len(matrix)):\n            max_col.append(max(matrix[i][N-1], key=matrix[i][N-1].index))\n        return max_col"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Finding the length of the list of lists\n    rows = len(test_list)\n\n    # Finding the length of the first list in the matrix\n    cols = len(test_list[0])\n\n    # Checking if N is less than or equal to 0 or greater than or equal to the number of columns in the matrix\n    if N <= 0 or N >= cols:\n        return \"N is invalid\"\n\n    # Initializing a variable to store the maximum value of then'th column\n    max_val = None\n\n    # Looping through all the rows in the matrix\n    for i in range(rows):\n\n        # Checking if the value of then'th column for the current row is greater than the current maximum value\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Initialize the max value to be the first element in the first row\n    max_value = test_list[0][0]\n\n    # Loop through each row of the matrix\n    for i in range(len(test_list)):\n        # Check if the current value is greater than the max value\n        if test_list[i][N-1] > max_value:\n            # Update the max value to be the current value\n            max_value = test_list[i][N-1]\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_value = max(max_value, max(test_list[i]))\n        elif i > N-1:\n            max_value = max(max_value, max(test_list[i]))\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Initialize a variable to store the maximum value\n    max_value = 0\n\n    # Loop through each row in the matrix\n    for row in test_list:\n        # Check if the current row has the requiredn'th column\n        if len(row) > N:\n            # Check if the current row'sn'th column is greater than the maximum value\n            if row[N] > max_value:\n                # Update the maximum value\n                max_value = row[N]\n\n    # Return the maximum value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if N >= len(row):\n            return 'Invalid input. Column index out of bounds.'\n        else:\n            if row[N] > max_val:\n                max_val = row[N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_col = 0\n    for i in range(len(test_list)):\n        if i == N:\n            break\n        if max_col < len(test_list[i]):\n            max_col = len(test_list[i])\n    return test_list[N][max_col - 1]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    max_val = float('-inf')\n    for i in range(len(test_list)):\n        if i == N - 1:\n            max_val = max(max_val, test_list[i][N-1])\n        else:\n            max_val = max(max_val, test_list[i][N])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col_max = []\n    for i in range(len(test_list)):\n        col_max.append(max(test_list[i][N-1]))\n    return col_max"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col_max = []\n    for i in range(len(test_list[0])):\n        max_val = max(test_list[j][i] for j in range(len(test_list)))\n        col_max.append(max_val)\n    return col_max"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sub_list in lst:\n        merged_lst.append([sub_list[0], sub_list[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in lst:\n        merged.append([i[0], i[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for tup in test_list:\n        for value in tup:\n            cumulative_sum += value\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for value in test_list:\n        cum_sum += value\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum as 0\n    cum_sum = 0\n    # loop through the list of tuples\n    for tup in test_list:\n        # loop through the elements in the tuple\n        for elem in tup:\n            # add the element to the cumulative sum\n            cum_sum += elem\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # create an empty list to store the cumulative sum\n    cumulative_sum = []\n\n    # iterate over each tuple in the list\n    for item in test_list:\n        # iterate over each value in the tuple\n        for value in item:\n            # add the value to the cumulative sum list\n            cumulative_sum.append(value)\n\n    # return the cumulative sum list\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cumulative_sum = 0\n    for value in test_list:\n        cumulative_sum += value\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    for num_tuple in nums:\n        total += sum(num_tuple) / len(num_tuple)\n    return [total/len(nums)]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = []\n    for i in range(len(nums)):\n        tup = nums[i]\n        sum = 0\n        for j in range(len(tup)):\n            sum += tup[j]\n        avg.append(sum/len(tup))\n    return avg"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n\n    # Initialize an empty list to store the averages\n    averages = []\n\n    # Loop through each tuple in the input tuple\n    for tup in nums:\n        # Initialize a variable to keep track of the sum of the tuple elements\n        sum_of_elems = 0\n\n        # Loop through each element in the tuple\n        for elem in tup:\n            # Add the element to the sum of elements\n            sum_of_elems += elem\n\n        # Calculate the average of the tuple elements\n        avg = sum_of_elems / len(tup)\n\n        # Append the average to the averages list\n        averages.append(avg)\n\n    # Return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    averages = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in nums:\n        avg = sum(i)/len(i)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        average = total / len(num)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the averages\n    averages = []\n    \n    # loop through each tuple in the input tuple\n    for tup in nums:\n        # get the length of the tuple\n        length = len(tup)\n        \n        # calculate the sum of the values in the tuple\n        total = sum(tup)\n        \n        # calculate the average\n        avg = total / length\n        \n        # append the average to the list of averages\n        averages.append(avg)\n    \n    # return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        count = 0\n        for i in num:\n            total += i\n            count += 1\n        result.append(total/count)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for t in nums:\n        avg = sum(t) / len(t)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuples must have the same length.')\n\n    return tuple([x % y for x, y in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same length.\")\n        return None\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    # loop through each element of the tuples\n    for i in range(len(test_tup1)):\n        # perform the modulo operation\n        test_tup1[i] %= test_tup2[i]\n    # return the modified tuples\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize variables\n    steps_taken = 0\n    curr_x = 0\n    curr_y = 0\n    # check for first step\n    if (steps_taken + d) <= steps:\n        curr_x += d\n        steps_taken += d\n        # check for remaining steps\n        while (curr_x <= steps) and (curr_y >= 0):\n            if (curr_x + curr_y) == d:\n                return steps_taken\n            curr_x += 1\n            curr_y -= 1\n        return -1 # no valid path\n    else:\n        return -1 # no valid path"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    # create a 2D list to store the distances between points\n    distances = []\n    for i in range(steps):\n        distances.append([])\n        for j in range(steps):\n            if i == 0 or j == 0:\n                distances[i].append(0)\n            else:\n                distances[i].append(max(distances[i-1][j], distances[i][j-1]))\n    \n    # create a 2D list to store the steps required for each point\n    jumps = []\n    for i in range(steps):\n        jumps.append([])\n        for j in range(steps):\n            jumps[i].append(0)\n    \n    # fill in the steps required for each point\n    for i in range(steps):\n        for j in range(steps):\n            if distances[i][j] == d:\n                jumps[i][j] = 1\n            elif distances[i][j] > d:\n                jumps[i][j] = 2\n            else:\n                jumps[i][j] = 0\n    \n    # calculate the minimum number of jumps\n    min_jumps = 0\n    for i in range(steps):\n        for j in range(steps):\n            min_jumps = max(min_jumps, jumps[i][j])\n    \n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    jumps = 0\n    step = 0\n    i = 0\n    \n    # Check if the starting point is at (0, 0)\n    if (steps[i][0], steps[i][1]) == (0, 0):\n        return jumps\n    \n    # Loop through the steps\n    while True:\n        # Increment the step count\n        step += 1\n        \n        # Check if the point at (i+1, j) is at (d, 0)\n        if (steps[i+1][0], steps[i+1][1]) == (d, 0):\n            return jumps\n        \n        # Check if the point at (i+1, j) is at (-1, 0) or (1, 0)\n        if (steps[i+1][0], steps[i+1][1]) == (-1, 0) or (steps[i+1][0], steps[i+1][1]) == (1, 0):\n            jumps += 1\n        \n        # Check if the point at (i+1, j) is at (0, 1) or (0, -1)\n        if (steps[i+1][0], steps[i+1][1]) == (0, 1) or (steps[i+1][0], steps[i+1][1]) == (0, -1):\n            return jumps\n        \n        # Check if the point at (i+1, j) is at (0, 0)\n        if (steps[i+1][0], steps[i+1][1]) == (0, 0):\n            return jumps\n        \n        # Increment the current position\n        i += 1\n        \n        # Check if we have reached the end of the list\n        if i == len(steps):\n            return jumps\n        \n        # Check if we have exceeded the maximum steps allowed\n        if step > steps:\n            return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Check if d is divisible by 2\n    if d % 2 == 0:\n        return -1\n    \n    # Initialize count as 0\n    count = 0\n    \n    # Initialize current position and distance\n    pos = (0, 0)\n    distance = 0\n    \n    # Loop for given number of steps\n    for i in range(steps):\n        \n        # Check if the distance is greater than or equal to d\n        if distance >= d:\n            \n            # If yes, increment count by 1\n            count += 1\n            \n            # Calculate the new position\n            pos = (pos[0] + 1, pos[1])\n            \n            # Reset the distance to zero\n            distance = 0\n        \n        # Otherwise, update the distance\n        else:\n            \n            # Calculate the next step\n            next_step = min(pos[1], d - distance)\n            \n            # Update the distance\n            distance += next_step\n            \n            # Calculate the new position\n            pos = (pos[0], pos[1] - next_step)\n            \n    # Return the count of jumps\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    i = 0\n    jumps = 0\n    while i < len(steps) - 1:\n        if steps[i] > d:\n            i += 1\n            jumps += 1\n        else:\n            i += 2\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": ""
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize a counter and a list to store the previous position\n    count = 0\n    prev_pos = None\n\n    # Iterate until we reach the desired position\n    while True:\n        # Update the counter\n        count += 1\n\n        # If we have reached the desired position, return the counter\n        if count == steps:\n            return count\n\n        # Check if we can reach the desired position by moving in the opposite direction of the previous position\n        if count + prev_pos[0] == d:\n            return count\n\n        # If we cannot reach the desired position, update the previous position to be the current position\n        prev_pos = (count, prev_pos[1])"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    dp = [[float('inf')] * (steps+1) for _ in range(steps+1)]\n    \n    for i in range(steps+1):\n        for j in range(steps+1):\n            if (i, j) == (d, 0):\n                dp[i][j] = 0\n            elif (i, j) == (0, 0):\n                dp[i][j] = 0\n            elif (i, j) == (0, steps):\n                dp[i][j] = 0\n            elif (i, j) == (steps, 0):\n                dp[i][j] = 0\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n    \n    return dp[steps][steps]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    jumps = 0\n    i = 0\n    while i < steps:\n        if i + d > steps:\n            return jumps\n        i += 1\n        jumps += 1\n\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    current_pos = (0, 0)\n    jumps = 0\n\n    while current_pos[0] < steps and current_pos[1] <= d:\n        current_pos = (current_pos[0] + 1, current_pos[1])\n        jumps += 1\n\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists should have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the two lists are of the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length')\n    # create an empty list to store the result\n    result = []\n    # loop through each element of the lists\n    for i in range(len(nums1)):\n        # if the element in nums2 is zero, then divide by zero error occurs\n        if nums2[i] == 0:\n            raise ValueError('Cannot divide by zero')\n        # calculate the result of the division\n        result.append(nums1[i] / nums2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort(reverse=True)\n    for num in nums:\n        test_str = test_str.replace(num, '')\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    alph_list = []\n    # Separating all the alphabets from the numbers\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            alph_list.append(char)\n    # Combining the alphabets and the numbers\n    for num in num_list:\n        test_str = test_str.replace(num, \"\")\n    for alph in alph_list:\n        test_str += alph\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    \n    if len(num_list) > 0:\n        num_str = \"\".join(num_list)\n        test_str = test_str.replace(num_str, \"\")\n    \n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_list.sort(reverse=True)\n    new_str = ''.join(num_list)\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    \n    # create an empty list to store numbers\n    numbers = []\n    \n    # iterate through each word in the list\n    for word in words:\n        # check if the word is a number\n        if word.isdigit():\n            # add the number to the numbers list\n            numbers.append(word)\n        else:\n            # append the word to the end of the words list\n            words.append(word)\n    \n    # join the words list back into a string\n    final_str =''.join(words)\n    \n    # concatenate the numbers list to the end of the final string\n    return final_str +''.join(numbers)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    # Remove all non-numeric characters from the string\n    test_str = ''.join(filter(str.isdigit, test_str))\n\n    # Reverse the string\n    test_str = test_str[::-1]\n\n    # Split the string into a list of characters\n    test_list = list(test_str)\n\n    # Iterate over the list and check if each character is a number\n    for i in range(len(test_list)):\n        if test_list[i].isdigit():\n            # Move the number to the end of the list\n            for j in range(i, len(test_list)):\n                if not test_list[j].isdigit():\n                    test_list[i], test_list[j] = test_list[j], test_list[i]\n                    break\n\n    # Convert the list back to a string\n    result_str = ''.join(test_list)\n\n    return result_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort(reverse=True)\n    new_str = ''.join(nums) + test_str.replace(''.join(nums), '')\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize a variable to keep track of the index of the next number to be moved\n    next_num_index = 0\n    # initialize an empty list to store the numbers\n    numbers = []\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, append it to the numbers list and increment the index\n        if char.isdigit():\n            numbers.append(char)\n            next_num_index += 1\n        # if the character is not a number, append it to the output string and increment the index\n        else:\n            test_str = test_str[:next_num_index] + ''.join(numbers) + test_str[next_num_index:]\n            next_num_index = 0\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    return test_str[:-len(nums)] + ''.join(nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in ascending order\n    a.sort()\n\n    # initialize variables to keep track of largest subset size and current subset size\n    max_size = 0\n    current_size = 1\n\n    # loop through the list, adding the current number to the subset as long as it is divisible by the next number\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            current_size += 1\n        else:\n            max_size = max(max_size, current_size)\n            current_size = 1\n\n    # add the last number to the subset\n    max_size = max(max_size, current_size)\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [0] * (n + 1)\n    max_len = 0\n    for i in range(1, n + 1):\n        for j in range(i):\n            if a[i-1] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n                max_len = max(max_len, dp[i])\n    return max_len"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list in descending order\n    a.sort(reverse=True)\n\n    # Initialize two pointers, one for the current subset and one for the previous subset\n    i = j = 0\n\n    # Initialize variables to store the size of the largest subset and the current subset size\n    max_size = 0\n    current_size = 0\n\n    # Iterate through the sorted list\n    while i < len(a):\n        # If the current element is divisible by the last element in the previous subset, add it to the current subset\n        if a[i] % a[j] == 0:\n            current_size += 1\n        # Otherwise, add the current element to the previous subset\n        else:\n            # If the current subset size is greater than the previous subset size, update the maximum size\n            if current_size > max_size:\n                max_size = current_size\n\n            # Move the current subset pointer to the previous subset pointer\n            j = i\n\n            # Reset the current subset size\n            current_size = 0\n\n        # Move the current subset pointer to the next element in the list\n        i += 1\n\n    # If the current subset size is greater than the previous subset size, update the maximum size\n    if current_size > max_size:\n        max_size = current_size\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the input list\n    a.sort()\n    # initialize variables to keep track of the largest subset and the current subset\n    largest = 0\n    current = 0\n    # loop through the list and check if the current element is divisible by the next element\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            current += 1\n            # update the largest subset if necessary\n            if current > largest:\n                largest = current\n        else:\n            current = 0\n    # return the largest subset found\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # initialize variables\n    max_size = 1\n    prev_set = {0}\n    curr_set = set()\n    # iterate through the list\n    for num in a:\n        # check if the current number is divisible by the previous number in the set\n        if num % prev_set.pop() == 0:\n            # if it is, add it to the current set\n            curr_set.add(num)\n        else:\n            # if it's not, add the current set to the list of sets and reset the variables\n            max_size = max(max_size, len(curr_set))\n            prev_set = curr_set\n            curr_set = {num}\n    # add the final set to the list of sets\n    max_size = max(max_size, len(curr_set))\n    # return the maximum size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list\n    a.sort()\n    \n    # Initialize variables\n    i, j, max_size = 0, 0, 0\n    \n    # Traverse the list from left to right\n    while j < len(a):\n        # If a[j] is divisible by a[i] and a[i] is divisible by a[i-1], then the size of the subset is at least 2\n        if a[j] % a[i] == 0 and a[i] % a[i-1] == 0:\n            max_size = max(max_size, j-i+1)\n        # If a[j] is divisible by a[i], then the size of the subset is at least 1\n        elif a[j] % a[i] == 0:\n            max_size = max(max_size, j-i)\n        # If a[j] is divisible by a[i-1], then the size of the subset is at least 1\n        elif a[i-1] % a[j] == 0:\n            max_size = max(max_size, j-i+1)\n        # Increment i and reset j to the start of the current subset\n        else:\n            i += 1\n            j = i\n        # If the current subset is the largest, update the maximum size\n        if max_size == 0:\n            max_size = j-i+1\n        else:\n            max_size = max(max_size, j-i+1)\n    \n    # Return the maximum size of the subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    \n    # Initialize variables to keep track of the current subset and the maximum subset size found so far\n    current_subset = []\n    max_subset_size = 0\n    \n    # Loop through the sorted list and find the maximum subset size that satisfies the condition\n    for i in range(len(a)):\n        if i > 0 and (a[i] % a[i-1]!= 0):\n            # The current element is not divisible with the previous element\n            # So, the current subset is not a valid subset\n            current_subset = []\n            continue\n        \n        # Add the current element to the current subset\n        current_subset.append(a[i])\n        \n        # Calculate the size of the current subset\n        size = sum(current_subset)\n        \n        # If the size is greater than the maximum subset size found so far, update the maximum subset size\n        if size > max_subset_size:\n            max_subset_size = size\n            \n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # initialize variables\n    max_size = 0\n    current_size = 0\n    max_subset = []\n    current_subset = []\n\n    # loop through the list and add numbers to the current subset\n    for num in a:\n        current_subset.append(num)\n        # if the current subset is divisible by 2, update the max_size and max_subset\n        if sum(current_subset) % 2 == 0:\n            current_size += 1\n            if current_size > max_size:\n                max_size = current_size\n                max_subset = current_subset.copy()\n        else:\n            current_size = 0\n            current_subset = []\n\n    # if the current subset is divisible by 2, add it to the max_subset\n    if sum(current_subset) % 2 == 0:\n        max_size += 1\n        if max_size > current_size:\n            max_size = current_size\n            max_subset = current_subset.copy()\n\n    # return the maximum size of a subset that is divisible by 2\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    n = len(a)\n    if n == 1:\n        return 1\n    if a[0] % a[1] == 0:\n        return 1 + largest_subset(a[1:])\n    else:\n        return largest_subset(a[1:])"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [0] * n\n    max_size = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            continue\n        for j in range(i+1, n):\n            if a[j] % 2!= 0:\n                break\n            if a[i] % a[j] == 0:\n                dp[j] = max(dp[j], dp[i]+1)\n                max_size = max(max_size, dp[j])\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    if n % 2 == 1:\n        return find_kth_element(arr1, arr2, n // 2 + 1)\n    else:\n        return (find_kth_element(arr1, arr2, n // 2) +\n                find_kth_element(arr1, arr2, n // 2 + 1)) / 2\n\n\ndef find_kth_element(arr1, arr2, k):\n    \"\"\"\n    Helper function to find the kth smallest element in an array.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n\n    while i < len(arr1):\n        if i == k - 1:\n            return arr1[i]\n        i += 1\n\n    while j < len(arr2):\n        if j == k - 1:\n            return arr2[j]\n        j += 1"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two lists\n    arr = arr1 + arr2\n    # sort the merged list\n    arr.sort()\n    # check if the list has an odd number of elements\n    if n % 2 == 0:\n        # return the average of middle two elements\n        return (arr[n//2-1] + arr[n//2]) / 2\n    else:\n        # return the middle element\n        return arr[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    mid = n // 2\n    if n % 2 == 0:\n        return (arr[mid - 1] + arr[mid]) / 2\n    else:\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # concatenate the two arrays\n    arr = arr1 + arr2\n    \n    # sort the concatenated array\n    arr.sort()\n    \n    # find the median index\n    mid = n // 2\n    if n % 2 == 0:\n        median = (arr[mid - 1] + arr[mid]) / 2\n    else:\n        median = arr[mid]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Merge the two sorted lists and find the median\n    merged_list = arr1 + arr2\n    if len(merged_list) % 2 == 0:\n        median = (merged_list[n//2] + merged_list[n//2-1]) / 2\n    else:\n        median = merged_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Find the minimum value from each array\n    min1 = min(arr1)\n    min2 = min(arr2)\n\n    # Find the maximum value from each array\n    max1 = max(arr1)\n    max2 = max(arr2)\n\n    # Calculate the difference between the maximum values\n    diff = max1 - min2\n\n    # If the difference is odd, the median is the average of the middle two values\n    if diff % 2!= 0:\n        median = (min1 + max2) / 2\n        return median\n\n    # If the difference is even, the median is the average of the middle values and the maximum value from the second array\n    else:\n        mid1 = (min1 + max1) / 2\n        mid2 = (min2 + max2) / 2\n        median = (mid1 + mid2) / 2\n        return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    arr = arr1 + arr2\n\n    # Sort the merged list\n    arr.sort()\n\n    # Calculate the median\n    mid = n // 2\n\n    if n % 2 == 0:\n        return (arr[mid - 1] + arr[mid]) / 2\n    else:\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted lists\n    merged = arr1 + arr2\n    merged.sort()\n\n    # Find the median based on the size of the list\n    if n % 2 == 0:\n        median = (merged[n//2 - 1] + merged[n//2]) / 2\n    else:\n        median = merged[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists into a single sorted list\n    merged_list = merge_sorted_lists(arr1, arr2)\n    # Calculate the length of the merged list\n    length = len(merged_list)\n    # Find the index of the median\n    if length % 2 == 0:\n        # If the length of the merged list is even, the median is the average of the middle two elements\n        middle_index = length // 2\n        median = (merged_list[middle_index - 1] + merged_list[middle_index]) / 2\n    else:\n        # If the length of the merged list is odd, the median is the middle element\n        middle_index = length // 2\n        median = merged_list[middle_index]\n    return median\n\n\ndef merge_sorted_lists(arr1, arr2):\n    \"\"\"\n    Merge two sorted lists into a single sorted list.\n    \"\"\"\n    i, j = 0, 0\n    merged_list = []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_list.append(arr1[i])\n            i += 1\n        else:\n            merged_list.append(arr2[j])\n            j += 1\n    merged_list += arr1[i:]\n    merged_list += arr2[j:]\n    return merged_list"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Initialize two pointers to first elements of both arrays\n    i = j = 0\n\n    # Initialize two variables to store the sum and the size of the merged array\n    sum = 0\n    size = 0\n\n    # Loop till both pointers are less than n\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            sum += arr1[i]\n            size += 1\n            i += 1\n        else:\n            sum += arr2[j]\n            size += 1\n            j += 1\n\n    # If one array is fully traversed, add the remaining elements of the other array\n    while i < n:\n        sum += arr1[i]\n        size += 1\n        i += 1\n\n    while j < n:\n        sum += arr2[j]\n        size += 1\n        j += 1\n\n    # If both arrays are of equal size, return the middle element of the merged array\n    if size % 2 == 0:\n        return (sum - (size // 2)) / 2\n    else:\n        return sum / 2"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and the nth power to compute and returns the n-th power of each number in the list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Computes the n-th power of each number in a list.\n\n    Args:\n    nums (list): a list of numbers\n    n (int): the power to raise each number to\n\n    Returns:\n    list: a list of n-th powers of the numbers in nums\n    \"\"\"\n    powers = []\n    for num in nums:\n        powers.append(num ** n)\n    return powers"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    for num in nums:\n        print(num ** n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string == \"\":\n        return \"Empty string\"\n    else:\n        return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Convert the string to uppercase and return it\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is all uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"List must have at least two elements to swap.\")\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        print(\"Swapped List: \", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Create a temporary variable to hold the last element of the list\n    temp = newList[-1]\n\n    # Replace the last element of the list with the first element\n    newList[-1] = newList[0]\n\n    # Replace the first element of the list with the temporary variable\n    newList[0] = temp\n\n    # Print the new list\n    print(newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Check if the list is empty\n    if len(newList) == 0:\n        return None\n    \n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Finding the length of the list\n    length = len(newList)\n    # Checking if the length of the list is greater than 1\n    if length > 1: \n        # Storing the first element of the list in a variable\n        first_element = newList[0] \n        # Storing the last element of the list in a variable\n        last_element = newList[length-1]\n        # Interchanging the first and last element of the list\n        newList[0] = last_element\n        newList[length-1] = first_element\n        # Returning the modified list\n        return newList\n    else:\n        print(\"Error: The list should have at least two elements to be swapped.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # swapping the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    # printing the modified list\n    print(newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list is empty\n    if len(newList) == 0:\n        return newList\n    # Check if the list has only one element\n    elif len(newList) == 1:\n        return [newList[0], newList[0]]\n    # Swap the first and last elements of the list\n    else:\n        return [newList[-1], newList[0]] + newList[1:-1] + [newList[1]]"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Store the last element of the list in a variable\n    lastElement = newList[-1]\n    # Remove the last element from the list\n    newList.pop()\n    # Insert the last element at the beginning of the list\n    newList.insert(0, lastElement)\n    # Return the new list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n    else:\n        print(\"The list should have at least two elements to swap.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n\n    # Swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Formula for area of largest triangle inscribed in a semicircle with radius r\n    area = 0.5 * (r**2)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    # Approximation:\n    # A triangle with sides a, b, and c is a right triangle if a^2 + b^2 = c^2, and the largest possible area of a triangle with sides a, b, and c is c^2 / 2.\n    # Therefore, the area of the largest triangle that can be inscribed in a semicircle with radius r is:\n    # (r^2 - a^2)^(1/2) * (r^2 + a^2)^(1/2) / 2\n    # where a is the semi-perimeter of the semicircle.\n    a = (r^2 - r^2//2) / (2*r)\n    return a * a * r"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the semi-circle equation\n    a = 0\n    b = r\n    c = 2 * r\n    equation = a*a + b*b - c*c\n    \n    # find the roots of the equation\n    roots = math.sqrt(equation)\n    \n    # calculate the area of the largest triangle\n    area = math.sqrt(3) / 4 * (roots[0] + roots[1])\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the semi-perimeter of the semicircle\n    s = 2 * math.pi * r\n\n    # calculate the area of the largest possible triangle that can be inscribed in the semicircle\n    A = math.sqrt(3) * s\n\n    return A"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return math.pi * r ** 2 * math.sqrt(3)\n\nprint(triangle_area(3))"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # constants\n    pi = 3.14159265358979323846\n    # radius of the semicircle\n    radius = r\n    # length of one side of the triangle\n    side = 2*radius\n    # area of the triangle\n    area = pi*radius*radius\n    # height of the triangle\n    height = 0.5*radius\n    # area of the largest triangle that can be inscribed in the semicircle\n    largest_area = 0.5*pi*radius*radius*side*height\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the semi-circle length\n    a = 2 * r\n    # calculate the area of a triangle with the given base and height\n    h = 2 * a\n    # calculate the area of a right triangle with the given base and height\n    area = h * (r ** 2) / (4 * a)\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    area = pi * r**2 / 3\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-perimeter of the semicircle\n    semi_perimeter = 2 * r\n\n    # Calculate the area of the triangle that can be inscribed in the semicircle\n    area = math.sqrt(semi_perimeter * (semi_perimeter - 1))\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    largest_area = area / 3\n\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # The area of the largest triangle that can be inscribed in a semicircle is (pi * r^2) / 3\n    return (math.pi * r ** 2) / 3"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i] == i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int): The starting index of the array to search for the missing number.\n        end (int): The ending index of the array to search for the missing number.\n\n    Returns:\n        int: The smallest missing number from the array.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    if start >= end:\n        return 1\n\n    if array[start] + 1 == array[end]:\n        return find_First_Missing(array, start + 1, end - 1)\n\n    return array[start] + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # If end is not provided, set it to the length of the array\n    if end is None:\n        end = len(array)-1\n    \n    # Check if the array is sorted in ascending order\n    if all(array[i]<array[i+1] for i in range(len(array)-1)):\n        # If the array is sorted, loop through the array and find the first missing number\n        for i in range(start,end+1):\n            if array[i]!=i+1:\n                return i+1\n        # If no missing number is found, return the length of the array + 1\n        return end+2\n    else:\n        # If the array is not sorted, return None\n        return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if not array:\n        return None\n\n    if end is None:\n        end = max(array)\n\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] - start!= i - start:\n            return start + i - start\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n    - array: A list of natural numbers in ascending order.\n    - start: The starting index of the search range (default 0).\n    - end: The ending index of the search range (default None, which means the last element of the array).\n\n    Returns:\n    - The smallest missing number in the given array.\n    \"\"\"\n    if not array:\n        raise ValueError(\"The array is empty\")\n\n    if start < 0 or end >= len(array):\n        raise ValueError(\"The start and end indices should be within the range of the array\")\n\n    if end is None:\n        end = len(array)-1\n\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n\n    return end+1+start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if i == array[i]:\n            return i\n        elif i < array[i]:\n            return i - 1\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n        array: A list of natural numbers.\n        start: The starting index for the search.\n        end: The ending index for the search.\n\n    Returns:\n        The smallest missing number in the array.\n    '''\n\n    # Check if the list is empty\n    if not array:\n        return None\n\n    # Check if the starting index is valid\n    if start < 0 or start >= len(array):\n        return None\n\n    # Check if the ending index is valid\n    if end is not None:\n        if end < 0 or end >= len(array):\n            return None\n        if end < start:\n            return None\n\n    # Find the first missing number using binary search\n    missing = bisect_left(array, start)\n    if missing!= len(array):\n        return missing\n    else:\n        return bisect_right(array, end) - 1\n\n\ndef bisect_left(a, x, lo=0, hi=None):\n    \"\"\"Return the index where to insert x in a[lo:hi].\"\"\"\n    if lo == hi:\n        return lo\n    mid = (lo + hi) // 2\n    if a[mid] < x:\n        return bisect_left(a, x, mid + 1, hi)\n    else:\n        return bisect_left(a, x, lo, mid)\n\n\ndef bisect_right(a, x, lo=0, hi=None):\n    \"\"\"Return the index where to insert x in a[lo:hi].\"\"\"\n    if lo == hi:\n        return lo\n    mid = (lo + hi) // 2\n    if a[mid] < x:\n        return bisect_right(a, x, mid + 1, hi)\n    else:\n        return mid"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_list = []\n\n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n\n    return even_list \n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    even_list = []\n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    # initialize adjacent coordinates list\n    adj_coords = []\n    \n    # extract adjacent coordinates from the tuple\n    x, y = ele\n    \n    # check if adjacent coordinates exist in the tuple\n    if x < len(sub) - 1:\n        adj_coords.append((x+1, y))\n    if y < len(sub[0]) - 1:\n        adj_coords.append((x, y+1))\n    if x > 0:\n        adj_coords.append((x-1, y))\n    if y > 0:\n        adj_coords.append((x, y-1))\n    \n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    result = []\n    # adding adjacent coordinates to the result list\n    result.append((x+1, y))\n    result.append((x-1, y))\n    result.append((x, y+1))\n    result.append((x, y-1))\n    # adding the sub-lists to the result list\n    result += sub\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0:\n        if y > 0:\n            sub.append((x-1,y-1))\n        sub.append((x-1,y))\n        if y < 25:\n            sub.append((x-1,y+1))\n    if y > 0:\n        sub.append((x,y-1))\n    if x < 25:\n        if y > 0:\n            sub.append((x+1,y-1))\n        sub.append((x+1,y))\n        if y < 25:\n            sub.append((x+1,y+1))\n    if x > 0 and y < 25:\n        if x > 0:\n            sub.append((x-1,y+1))\n        sub.append((x,y+1))\n        if x < 25:\n            sub.append((x+1,y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adj = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            if i!= x or j!= y and (i, j) not in sub:\n                adj.append((i, j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    adj = []\n    x, y = ele\n    for i in range(8):\n        new_x = x + ((i // 3) - 1)\n        new_y = y + (i % 3)\n        if new_x >= 0 and new_y >= 0 and new_x < 10 and new_y < 10:\n            adj.append((new_x, new_y))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = []\n    if y-1 >= 0:\n        adj_coords.append((x, y-1))\n    if y+1 < len(sub[0]):\n        adj_coords.append((x, y+1))\n    if x-1 >= 0:\n        adj_coords.append((x-1, y))\n    if x+1 < len(sub):\n        adj_coords.append((x+1, y))\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    adj_coords = []\n    for x in range(len(ele)):\n        for y in range(len(ele)):\n            if x+1 < len(ele) and y+1 < len(ele) and abs(x+y) == 1 and ele[x][y]!= ele[x+1][y] and ele[x][y]!= ele[x][y+1]:\n                adj_coords.append((x,y))\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x+1,y),(x-1,y),(x,y+1),(x,y-1)] + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Define the adjacent coordinates\n    x, y = ele\n    dx = [0, 1, 0, -1]\n    dy = [-1, 0, 1, 0]\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        sub.append((nx, ny))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = []\n    if x > 0:\n        adjacent.append((x-1, y))\n    if x < len(sub) - 1:\n        adjacent.append((x+1, y))\n    if y > 0:\n        adjacent.append((x, y-1))\n    if y < len(sub[0]) - 1:\n        adjacent.append((x, y+1))\n    return adjacent"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace spaces with underscores\n    new_text = text.replace(' ', '_')\n    # Replace underscores with spaces\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    # Split the input string into words\n    words = text.split()\n    # Loop through each word\n    for i in range(len(words)):\n        # Check if the word contains any spaces\n        if'' in words[i]:\n            # Replace spaces with underscores\n            words[i] = words[i].replace(' ', '_')\n        # Check if the word contains any underscores\n        if '_' in words[i]:\n            # Replace underscores with spaces\n            words[i] = words[i].replace('_','')\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char.isspace():\n            new_text += '_'\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the input text into words\n    words = text.split()\n    # Loop through each word in the words list\n    for i in range(len(words)):\n        # Check if the word contains any whitespace characters\n        if any(char.isspace() for char in words[i]):\n            # Replace all whitespace characters with underscores\n            words[i] = words[i].replace(\" \", \"_\")\n        else:\n            # Replace all underscore characters with spaces\n            words[i] = words[i].replace(\"_\", \" \")\n    # Join the words back into a string and return the result\n    return \" \".join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    # Check if input is a string\n    if not isinstance(text, str):\n        return \"Input must be a string.\"\n    \n    # Initialize variables to count number of spaces and underscores\n    space_count = 0\n    underscore_count = 0\n    \n    # Iterate through each character in the string\n    for char in text:\n        if char == \" \":\n            space_count += 1\n        elif char == \"_\":\n            underscore_count += 1\n    \n    # Check if there are any spaces or underscores in the string\n    if space_count == 0 and underscore_count == 0:\n        return text\n    \n    # Replace spaces with underscores and vice versa\n    if space_count > underscore_count:\n        new_text = text.replace(\" \", \"_\")\n    elif space_count < underscore_count:\n        new_text = text.replace(\"_\", \" \")\n    else:\n        new_text = text\n    \n    # Check if there are any more spaces or underscores in the string\n    if space_count == 0 and underscore_count == 0:\n        return new_text\n    else:\n        return \"There are still spaces or underscores in the string.\""
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            count += 1\n            i -= 1\n    return num_list, count"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            num_list[j], num_list[i] = num_list[i], num_list[j]\n            j += 1\n        i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        num_list.pop(zero_index)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize two pointers, one at the beginning of the list and the other at the end\n    i = 0\n    j = len(num_list)-1\n    \n    # swap the elements at the pointers until the i pointer is greater than or equal to j\n    while i < j:\n        if num_list[i]!= 0:\n            i += 1\n        elif num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Use two pointers to move zeroes to the end of the list\n    i = 0\n    j = 0\n    while j < len(num_list):\n        if num_list[j] == 0:\n            # Swap the elements at positions i and j\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            # Increment both pointers\n            i += 1\n            j += 1\n        else:\n            # Increment j pointer\n            j += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = []\n    for index, num in enumerate(num_list):\n        if num == 0:\n            zero_index.append(index)\n    for i in range(len(zero_index)-1, -1, -1):\n        num_list.insert(zero_index[i]+1, 0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for index, num in enumerate(num_list):\n        if num == 0:\n            zero_index = index\n            break\n    if zero_index == -1:\n        return num_list\n    else:\n        return num_list[:zero_index] + num_list[zero_index+1:]"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    num_list.reverse()\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # create an empty list to store non-zero values\n    non_zero_list = []\n\n    # loop through the input list\n    for num in num_list:\n        # if the number is not zero, append it to the non_zero_list\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # loop through the non_zero_list and append all zeroes to the end\n    for zero in num_list:\n        if zero == 0:\n            non_zero_list.append(zero)\n\n    # replace the input list with the non-zero list\n    num_list = non_zero_list\n\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of n integers as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n\n    # Calculate the xor of all pairs of numbers in the list\n    xor_sum = sum(map(lambda x: x[0] ^ x[1], zip(arr, arr[1:] + [0])))\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Given a list of integers, compute the sum of the xor of all pairs of numbers.\n\n    Parameters:\n    arr (list): a list of integers.\n    n (int): the length of the list.\n\n    Returns:\n    int: the sum of the xor of all pairs of numbers in the list.\n\n    Raises:\n    ValueError: if the length of the list is less than 2.\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"The length of the list must be at least 2.\")\n    xor_sum = 0\n    for i in range(n - 1):\n        xor_sum ^= arr[i] ^ arr[i + 1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list and its length as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    xor_sum = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n-1):\n        sum += arr[i] ^ arr[i+1]\n    return sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given iterable to a list\n    lst = list(iterable)\n\n    # Build a max heap from the list\n    hq.heapify(lst)\n\n    # Extract items from the heap in sorted order\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(hq.heappop(lst))\n\n    return sorted_lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using Heap Sort algorithm.\n\n    Args:\n    iterable: List to be sorted.\n\n    Returns:\n    sorted_list: The sorted list.\n    '''\n\n    # Create a max heap from the given list\n    hq.heapify(iterable)\n\n    # Build the sorted list from the max heap\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a max heap\n    hq.heapify(iterable)\n    # extract the elements from the max heap\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable[0])\n        iterable = iterable[1:]\n    # reverse the sorted list to obtain the sorted output\n    sorted_list.reverse()\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)-1, 0, -1):\n        hq.heappop(iterable)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable object as input and returns the sorted list.\n    '''\n    # Convert the iterable object into a list\n    arr = list(iterable)\n    \n    # Build a max heap from the list\n    hq.heapify(arr)\n    \n    # Extract elements from the heap and append them to the sorted list\n    sorted_arr = []\n    while arr:\n        sorted_arr.append(hq.heappop(arr))\n    \n    return sorted_arr"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a heap\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    # sort the heap using a max heap\n    heapq.heapify(heap)\n    sorted_heap = []\n    while heap:\n        sorted_heap.append(heapq.heappop(heap))\n        \n    # convert the sorted heap back to a list\n    return list(sorted_heap)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    \n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    n = len(iterable)\n    for i in range(n-1, 0, -1):\n        hq.heappop(iterable)\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    # Build a max heap from the list\n    for i in range(n // 2 - 1, -1, -1):\n        hq.heapify(iterable, i, n)\n    # Extract elements from the heap one by one\n    for i in range(n - 1, 0, -1):\n        # Move the root element to its correct position\n        hq.heappop(iterable)\n        # Rebuild the heap\n        for j in range(i // 2 - 1, -1, -1):\n            hq.heapify(iterable, j, i)\n    # Convert the heap into a list\n    return list(iterable)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost: \n        return True\n    else: \n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    # Check whether profit and loss are zero\n    if profit == 0 and loss == 0:\n        print(\"The amount has no profit and no loss\")\n    else:\n        print(\"The amount has a profit of\", profit, \"and a loss of\", loss)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # check whether the sale amount is greater than the actual cost\n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss\n\n    Parameters:\n    actual_cost (int): The actual cost of the sale\n    sale_amount (int): The amount being sold\n\n    Returns:\n    bool: True if the sale has no profit and no loss, False otherwise\n    \"\"\"\n\n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if the profit is positive and the loss is positive\n    if profit > 0 and loss > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost >= sale_amount:\n        return \"No profit or loss\"\n    else:\n        return \"Profit\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Parameters:\n    actual_cost (float): the actual cost of the sale\n    sale_amount (float): the amount of the sale\n\n    Returns:\n    bool: True if the given amount has no profit and no loss, False otherwise\n    '''\n    \n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    # If both profit and loss are zero, the sale has no profit or loss\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return False, 'Actual cost is less than sale amount'\n    elif actual_cost - sale_amount >= 0:\n        return False, 'Actual cost minus sale amount is greater than zero'\n    else:\n        return True, 'No profit or loss found'"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount: #if the actual cost equals the sale amount, no profit and no loss exists\n        print(\"No profit and no loss exists\")\n    elif sale_amount > actual_cost: #if the sale amount is greater than the actual cost, it has no profit\n        print(\"No profit exists\")\n    else: #if the sale amount is less than the actual cost, it has no loss\n        print(\"No loss exists\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if actual_cost <= sale_amount:\n        return True, \"No profit and no loss\"\n    elif actual_cost < (sale_amount - actual_cost):\n        return False, \"No profit\"\n    else:\n        return False, \"No loss\""
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill index\n    wind_chill_index = 35.74 + 0.6215 * v - 35.75 * math.exp(17.625 * ((t - 32) * 5 / 9))\n    # Round the wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Convert temperature to Fahrenheit\n    t_f = (t * 1.8) + 32\n    \n    # Calculate the wind chill index\n    wci = math.floor(0.5 * (v * 1.15 * ((t_f - 32) / 10) ** 0.16 + 131.1))\n    \n    # Return the wind chill index rounded to the nearest integer\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    This function takes the wind velocity in km/h and a temperature in celsius and returns the wind chill index rounded to the next integer.\n\n    Args:\n        v (float): wind velocity in km/h\n        t (float): temperature in celsius\n\n    Returns:\n        int: wind chill index rounded to the next integer\n    \"\"\"\n\n    if v == 0:\n        return \"The wind speed is zero, so the wind chill index is not defined.\"\n\n    # convert temperature from celsius to fahrenheit\n    t_f = (t * 1.8) + 32\n\n    # calculate the relative humidity\n    rh = 100 - (t_f / 2)\n\n    # calculate the effective temperature\n    teff = (11.32 + (0.6215 * t_f) + (13.397 * (rh / 100)) - (0.3965 * (rh / 100) ** 2) +\n            (0.0003 * (rh / 100) ** 3))\n\n    # calculate the wind chill index\n    wci = (teff - 273.15) / (v * math.log(teff / 273.15))\n\n    # round wind chill index to the nearest integer\n    wci = round(wci)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate the wind chill index\n    wci = 35.74 + 0.6215 * t - 35.75 * math.exp((17.625 * t) / (t + 243.5)) + 0.4275 * v\n    # round the wind chill index to the nearest integer\n    wci_int = math.ceil(wci)\n    # return the wind chill index rounded to the nearest integer\n    return wci_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": ""
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from Celsius to Kelvin\n    k = t + 273.15\n\n    # Calculate the heat capacity at constant pressure\n    hcp = 1.67 * math.pow(v, 1.5)\n\n    # Calculate the heat capacity at constant volume\n    hcv = 1.11 * hcp\n\n    # Calculate the moisture content of the atmosphere\n    moisture = 1 - 0.0031 * math.exp(0.0024 * k)\n\n    # Calculate the latent heat of vaporization of water\n    latent_heat_of_vaporization = 2.501\n\n    # Calculate the latent heat of fusion of water\n    latent_heat_of_fusion = 18.01\n\n    # Calculate the total latent heat\n    latent_heat = latent_heat_of_vaporization + latent_heat_of_fusion\n\n    # Calculate the sensible heat flux\n    sensible_heat_flux = hcp * (v**2) / (math.pow(moisture, 2))\n\n    # Calculate the total heat flux\n    total_heat_flux = sensible_heat_flux - latent_heat\n\n    # Calculate the wind chill index\n    wc = math.sqrt(total_heat_flux / hcv)\n\n    # Round the wind chill index to the nearest integer\n    wc = round(wc)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the temperature in Fahrenheit\n    f = (t * 9/5) + 32\n    \n    # Calculate the dew point in Celsius\n    dp = 243.12 - 0.0065 * (f - 32)\n    \n    # Calculate the wind chill index\n    wc = 13.12 + 0.6215 * v - 11.37 * math.log(dp) + 0.3965 * dp - 0.14 * (dp ** 2)\n    \n    # Round the wind chill index to the nearest integer\n    wc = math.ceil(wc)\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wind_speed = v * 1.60934 # convert km/h to m/s\n    t_c = t - 273.15 # convert Celsius to Kelvin\n    if wind_speed <= 0.5:\n        wchill = round((13.12 + 0.6215 * wind_speed + 11.37 * t_c) / (2.37 + 0.18 * wind_speed + 0.1042 * t_c))\n    elif 0.5 < wind_speed <= 1.5:\n        wchill = round((21.2 + 0.6215 * wind_speed + 11.37 * t_c) / (2.37 + 0.18 * wind_speed + 0.1042 * t_c))\n    elif 1.5 < wind_speed <= 3.5:\n        wchill = round((28.6 + 0.6215 * wind_speed + 11.37 * t_c) / (2.37 + 0.18 * wind_speed + 0.1042 * t_c))\n    else:\n        wchill = round((34.3 + 0.6215 * wind_speed + 11.37 * t_c) / (2.37 + 0.18 * wind_speed + 0.1042 * t_c))\n    return wchill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v * 1.60934  # convert km/h to m/s\n    # calculate the wind chill index\n    wc = 35.74 + 0.6215 * t - 35.75 * math.log(wind_speed) + 0.4275 * t * math.log(wind_speed)\n    # round the wind chill index to the nearest integer\n    wc_rounded = int(round(wc))\n    # return the wind chill index rounded to the nearest integer\n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature\n    wc = 35.74 + 0.6215 * t - 35.75 * math.exp((17.625 * t) / (t + 243.5)) + 0.4275 * v**0.16 + 0.2441 * math.exp((13.397 * v) / (v + 2.904))\n\n    # Round the wind chill temperature to the nearest integer\n    wc_rounded = round(wc)\n\n    return wc_rounded"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name.startswith(name[0].upper()):\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the sum of the lengths of the names without lowercase letters to 0\n    total_length = 0\n\n    # loop through each name in the list\n    for name in sample_names:\n        # if the name starts with a lowercase letter, skip it\n        if name[0].islower():\n            continue\n        # otherwise, add the length of the name to the sum\n        else:\n            total_length += len(name)\n\n    # return the total length of the names that start with a lowercase letter\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum to zero\n    total_length = 0\n\n    # Iterate through the list of names\n    for name in sample_names:\n        # Remove the lowercase letter from the name if it exists\n        name = name.replace('a', 'A')\n        name = name.replace('e', 'E')\n        name = name.replace('i', 'I')\n        name = name.replace('o', 'O')\n        name = name.replace('u', 'U')\n\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            continue\n\n        # Add the length of the remaining name to the total\n        total_length += len(name)\n\n    # Return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    total_length = 0\n\n    for name in sample_names:\n        # Remove names that start with a lowercase letter\n        if name[0].islower():\n            continue\n\n        # Calculate the length of the name\n        name_length = len(name)\n\n        # Add the length of the name to the total\n        total_length += name_length\n\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    valid_names = [name for name in sample_names if name[0].isupper()]\n    total_length = sum([len(name) for name in valid_names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # create an empty list to store the names that pass the test\n    valid_names = []\n\n    # loop through the names and add them to the list if they pass the test\n    for name in sample_names:\n        if name[0].isupper():\n            valid_names.append(name)\n\n    # calculate the sum of the lengths of the valid names\n    total_length = sum(len(name) for name in valid_names)\n\n    # return the total length of the valid names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if not name.startswith('a')]\n    return sum(len(name) for name in names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # list to store the names that start with a lowercase letter\n    lowercase_names = []\n    \n    # loop through the names and check if the first letter is lowercase\n    for name in sample_names:\n        if name[0].islower():\n            # if the name starts with a lowercase letter, add it to the list of lowercase names\n            lowercase_names.append(name)\n    \n    # create a new list with the names that start with a letter other than lowercase\n    names_with_lowercase = []\n    for name in sample_names:\n        if name[0].isupper():\n            # if the name starts with an uppercase letter, add it to the list of names with lowercase letters\n            names_with_lowercase.append(name)\n    \n    # sum the length of the names with lowercase letters\n    sum_length = 0\n    for name in names_with_lowercase:\n        sum_length += len(name)\n    \n    # return the sum of the lengths of the names with lowercase letters\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create a list to store the valid names\n    valid_names = []\n    # Loop through the names in the sample_names list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if not name[0].islower():\n            # If the name starts with an uppercase letter, add it to the valid_names list\n            valid_names.append(name)\n    # Initialize a variable to store the total length of valid names\n    total_length = 0\n    # Loop through the valid_names list and add the length of each valid name to the total_length variable\n    for name in valid_names:\n        total_length += len(name)\n    # Return the total length of valid names\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the regular expression to match parenthesis\n    pattern = re.compile(r'\\((.*?)\\)')\n\n    # Use the regular expression to find the parenthesis in the string\n    result = pattern.sub('', items)\n\n    # Return the result\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\((.*?)\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^\\)]+\\)'\n    new_string = re.sub(pattern, '', items)\n    return new_string"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string and removes the parenthesis and what is inbetween them.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n\n    # find all the parenthesis in the string\n    parenthesis_list = re.findall(r'\\([^)]*\\)', items)\n\n    # loop through each parenthesis and remove the content within it\n    for parenthesis in parenthesis_list:\n        items = items.replace(parenthesis, '')\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\(.*?\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\(.*?\\)', '', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_nonagonal(a, b, c, n):\n        if n == 1:\n            return a + b + c\n        return get_nonagonal(b, c, a + b + c, n - 1)\n\n    if is_prime(n):\n        return \"Invalid input\"\n\n    a, b, c = 1, 1, 1\n    result = get_nonagonal(a, b, c, n)\n    return result\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer\"\n    elif n == 1:\n        return 1\n    else:\n        return (n**2 + 2) * (n**2 - 2) // (4 * n - 4)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += (n-i) ** 2\n    return total"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n and returns True if it is a nonagonal number, and False otherwise.\n    A nonagonal number is a number where the sum of the squares of its rows and columns is equal to n.\n    '''\n    \n    # Initialize the sum of squares of rows and columns to zero\n    row_sum = col_sum = 0\n    \n    # Calculate the sum of squares of rows and columns\n    for i in range(1, n+1):\n        row_sum += i*i\n        col_sum += i\n    \n    # Check if the sum of squares of rows and columns is equal to n\n    if row_sum == col_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # check if n is an integer and greater than 0\n    if not isinstance(n, int) or n <= 0:\n        return \"Please enter a positive integer.\"\n\n    # calculate the sum of the first n positive integers\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_numbers += i\n\n    # calculate the square of the sum of the numbers\n    square_of_sum = sum_of_numbers * sum_of_numbers\n\n    # calculate the nth nonagonal number\n    nonagonal_number = square_of_sum - sum_of_numbers + n\n\n    # return the nonagonal number\n    return nonagonal_number"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    for i in range(2, n+1):\n        a += b\n        b += 2\n    return a"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1))//2\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth nonagonal number is:\", is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n as input and returns the nth nonagonal number.\n    '''\n    # Initialize the first two nonagonal numbers\n    i = 1\n    j = 1\n    \n    # Iterate through the nonagonal numbers\n    for _ in range(n):\n        # Find the sum of the previous two nonagonal numbers\n        sum_prev_2 = i + j\n        \n        # Move to the next pair of nonagonal numbers\n        i, j = j, sum_prev_2\n    \n    # Return the nth nonagonal number\n    return i"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        return None\n    \n    result = 0\n    for i in range(1, n+1):\n        result += (i**2 + 1) * (n - i + 1)**2\n    \n    return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the variables\n    prev_num = 1\n    curr_num = 2\n    \n    # Loop through the numbers and add them to the result\n    for i in range(2, n+1):\n        # Calculate the next number\n        next_num = prev_num + curr_num\n        \n        # Check if the next number is even\n        if next_num % 2 == 0:\n            # If it is even, add it to the result\n            result += next_num\n            \n        # Update the previous and current numbers\n        prev_num = curr_num\n        curr_num = next_num\n    \n    return result"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    pattern = r'(?<![\\w\\s])z(?!\\w)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Define the pattern to search for 'z' except at the start and end of the word\n    pattern = r'\\b[a-zA-Z][^z]*z[^a-zA-Z][a-zA-Z]\\b'\n\n    # Use the pattern to find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # Check if there are any matches and return the result\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    text = text.lower()\n    pattern = re.compile(r'\\b[a-zA-Z]+[zZ][a-zA-Z]+\\b')\n    return pattern.search(text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[zZ][^z]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if a string contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\b[a-zA-Z]+\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        if match[0] == 'z' and match[-1] == 'z':\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<!^)(?!$)z(?!$)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Convert text to lowercase and split into words\n    words = text.lower().split()\n\n    # Loop through words and check if 'z' is at the start or end of word\n    for word in words:\n        # Check if 'z' is at the start of the word\n        if word[0] == 'z':\n            # Check if 'z' is at the end of the word\n            if word[-1] == 'z':\n                # If 'z' is at the start and end of the word, return True\n                return True\n\n    # If 'z' is not found in any word, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[zZ][^\\s]*\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into words using regex\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the first and last characters of the word are 'z'\n        if word[0] == 'z' and word[-1] == 'z':\n            # If the word contains 'z' except at the start and end, return True\n            if len(word) > 2:\n                return True\n    # If no words in the list contain 'z', return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    # Define a regular expression pattern to match 'z' at the start and end of a word\n    pattern = r'\\b\\w*z\\w*\\b'\n    # Use the re.search() function to search for the pattern in the input text\n    match = re.search(pattern, text)\n    # If the pattern is found, return True\n    if match:\n        return True\n    else:\n        # Otherwise, return False\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Find the length of the array\n    n = len(input)\n\n    # If k is greater than or equal to the length of the array, reverse the whole array\n    if k >= n:\n        input.reverse()\n        return input\n\n    # Reverse the first k elements of the array\n    input[:k].reverse()\n\n    # Reverse the remaining elements of the array\n    input[k:].reverse()\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Create a new list to store the reversed array\n    reversed_list = []\n    \n    # Iterate through the input array from the end to k\n    for i in range(k, len(input)):\n        # Add each element to the new list in reverse order\n        reversed_list.append(input[i])\n    \n    # Iterate through the input array from k to the beginning\n    for i in range(k-1, -1, -1):\n        # Add each element to the new list in reverse order\n        reversed_list.append(input[i])\n    \n    # Return the reversed list\n    return reversed_list"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the first k elements of the array\n    input.reverse()\n    # Reverse the remaining elements of the array\n    input[k:].reverse()\n    # Reverse the entire array\n    input.reverse()"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_array = []\n    for i in range(k, len(input)):\n        reverse_array.append(input[i])\n    for i in range(k-1, -1, -1):\n        reverse_array.append(input[i])\n    return reverse_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # reverse the array from the beginning to k-1\n    input = input[::-1][:k]\n    \n    # reverse the array from k to the end\n    input = input[::-1][k:]\n    \n    # print the reversed array\n    print(\"Reversed Array:\", input)\n    \n"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # base case\n    if k == 1:\n        return [input[k-1]]\n\n    # recursive case\n    else:\n        return [input[k-1]] + reverse_Array_Upto_K(input, k-1)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k-1, -1, -1): # loop through the array from position k-1 to 0\n        input[i], input[k-i-1] = input[k-i-1], input[i] # swap the elements at position i and k-i-1"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # If k is greater than or equal to n, reverse the entire array\n    if k >= n:\n        input.reverse()\n        return input\n\n    # Reverse the array upto k-1\n    input[:k].reverse()\n\n    # Reverse the remaining part of the array\n    input[k:].reverse()\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # reverse the first k elements of the array\n    for i in range(k):\n        input[0], input[i] = input[i], input[0]\n    # reverse the remaining elements of the array\n    for i in range(k, n):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Check if the input is a list or a string\n    if isinstance(input, list):\n        # Reverse the array from 0 to k - 1\n        for i in range(k):\n            input[i], input[len(input) - 1 - i] = input[len(input) - 1 - i], input[i]\n    elif isinstance(input, str):\n        # Reverse the string from 0 to k - 1\n        for i in range(k):\n            input = input[:i] + input[i:].replace(input[i], '', 1)[::-1]\n    else:\n        print('Error: Input must be a list or a string.')"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Convert the dictionary to a list of tuples\n    test_list = list(test_dict.items())\n    # Append the list of tuples to the tuple\n    result_tuple = tuple(test_tup) + tuple(test_list)\n    return result_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list of tuples\n    tuple_list = [(k, v) for k, v in test_dict.items()]\n    # Add the dictionary to the tuple\n    new_tup = test_tup + tuple_list\n    # Convert the list of tuples back to a dictionary\n    new_dict = {k: v for k, v in new_tup}\n    return new_dict"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # create a new dictionary with the values from the test_dict and test_tup\n    new_dict = {**test_dict, **test_tup}\n    # create a new tuple with the new_dict as the second element\n    new_tuple = (new_dict,)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key, value in test_dict.items():\n        test_tup += (key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Add a dictionary to the tuple.\n\n    :param test_tup: tuple to which the dictionary will be added\n    :param test_dict: dictionary to be added to the tuple\n    :return: tuple with the dictionary added\n    \"\"\"\n    return tuple(test_tup) + tuple(test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = {}\n    for key, value in test_dict.items():\n        new_dict[key] = value\n    return (test_tup + (new_dict,))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict.copy()\n    new_dict['test_key'] = 'test_value'\n    new_tup = test_tup + (new_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Combine the tuple and the dictionary into a new tuple\n    combined_tup = tuple(test_tup + test_dict.items())\n    return combined_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list of tuples\n    test_list = [(key, val) for key, val in test_dict.items()]\n    \n    # Append the list to the tuple\n    test_tup += test_list\n    \n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    visited = [[False] * N for _ in range(N)]\n\n    def dfs(i, j, current_sum):\n        if i == N - 1 and j == N - 1:\n            nonlocal max_avg\n            max_avg = max(max_avg, current_sum / (i + j + 1))\n            return\n\n        if i < N and not visited[i][j]:\n            visited[i][j] = True\n            dfs(i + 1, j, current_sum + cost[i][j])\n            visited[i][j] = False\n\n        if j < N and not visited[i][j]:\n            visited[i][j] = True\n            dfs(i, j + 1, current_sum + cost[i][j])\n            visited[i][j] = False\n\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, 0)\n\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Find the number of rows and columns in the matrix\n    N = len(cost)\n\n    # Initialize the maximum average and the maximum path\n    max_avg = 0\n    max_path = [[0, 0]]\n\n    # Initialize the visited and parent lists for each cell\n    visited = [[False] * N for _ in range(N)]\n    parent = [[0, 0] for _ in range(N)]\n\n    # Initialize the queue with the first cell\n    queue = [(0, 0)]\n\n    # Iterate through the matrix\n    while queue:\n\n        # Get the current cell from the front of the queue\n        i, j = queue.pop(0)\n\n        # Check if the current cell has already been visited\n        if visited[i][j]:\n            continue\n\n        # Calculate the total cost of the path from the current cell\n        total_cost = cost[i][j]\n\n        # Check if the current cell is the bottom right cell\n        if i == N-1 and j == N-1:\n            # If it is, update the maximum average and path if the new path has a higher average\n            avg = total_cost / (N*N)\n            if avg > max_avg:\n                max_avg = avg\n                max_path = [[i, j]]\n            elif avg == max_avg:\n                max_path.append([i, j])\n            continue\n\n        # If the current cell is not the bottom right cell, check if it can move right or down\n        if j < N-1:\n            # If it can move right, add it to the queue with the next cell\n            queue.append((i, j+1))\n            visited[i][j+1] = True\n            parent[i][j+1] = [i, j]\n        if i < N-1:\n            # If it can move down, add it to the queue with the next cell\n            queue.append((i+1, j))\n            visited[i+1][j] = True\n            parent[i+1][j] = [i, j]\n\n    # Calculate the average of the maximum path\n    max_avg = total_cost / (N*N)\n\n    # Return the average and the path\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def dfs(i, j, path_cost, path_cells, path_avg):\n        if i == N - 1 and j == N - 1:\n            nonlocal max_path_avg\n            max_path_avg = max(max_path_avg, path_avg)\n            return\n\n        if i < N and j < N:\n            cost_up = cost[i][j] + path_cost\n            cost_down = cost[i][j + 1] + path_cost\n            cost_left = cost[i + 1][j] + path_cost\n            cost_right = cost[i + 1][j + 1] + path_cost\n\n            path_cells.append((i, j))\n            path_avg = (path_cost + cost_up + cost_down + cost_left + cost_right) / 5\n            dfs(i + 1, j, cost_up, path_cells, path_avg)\n            dfs(i, j + 1, cost_down, path_cells, path_avg)\n            dfs(i + 1, j + 1, cost_right, path_cells, path_avg)\n            dfs(i - 1, j + 1, cost_left, path_cells, path_avg)\n            path_cells.pop()\n\n    N = len(cost)\n    max_path_avg = float('-inf')\n    dfs(0, 0, 0, [], 0)\n    return max_path_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[float('-inf')] * N for _ in range(N)]\n    max_path_avg = float('-inf')\n\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        dp[i][0] = cost[i][0]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            if i < j:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    for i in range(N):\n        for j in range(N):\n            if i == N - 1 and j == N - 1:\n                max_path_avg = max(max_path_avg, dp[i][j])\n\n    return max_path_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    def dfs(i, j, total_cost, path_sum):\n        if i == n - 1 and j == m - 1:\n            nonlocal max_avg\n            if path_sum > max_avg:\n                max_avg = path_sum / (i + 1)\n            return\n        \n        if i < n and j < m:\n            dfs(i + 1, j, total_cost + cost[i][j], path_sum + cost[i][j])\n            dfs(i, j + 1, total_cost + cost[i][j], path_sum + cost[i][j])\n\n    n, m = len(cost), len(cost[0])\n    max_avg = float('-inf')\n    dfs(0, 0, 0, 0)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # get the size of the matrix\n    N = len(cost)\n    \n    # initialize variables\n    max_avg = 0.0\n    curr_avg = 0.0\n    total_cost = 0.0\n    visited = [[False for j in range(N)] for i in range(N)]\n    visited[0][0] = True\n    \n    # find the maximum average of a path\n    def find_max_avg(curr_cost, curr_avg, curr_visited):\n        # base case: if we have reached the bottom-right cell, update the max average and return\n        if curr_cost == 0:\n            global max_avg\n            max_avg = max(max_avg, curr_avg)\n            return\n        \n        # compute the cost of moving right\n        if not curr_visited[0][1]:\n            new_cost = curr_cost + cost[0][1]\n            new_visited = curr_visited.copy()\n            new_visited[0][1] = True\n            new_avg = (curr_avg * curr_visited[0][0] + new_cost * new_visited[0][1]) / (curr_visited[0][0] + 1)\n            find_max_avg(new_cost, new_avg, new_visited)\n        \n        # compute the cost of moving down\n        if not curr_visited[1][1]:\n            new_cost = curr_cost + cost[1][1]\n            new_visited = curr_visited.copy()\n            new_visited[1][1] = True\n            new_avg = (curr_avg * curr_visited[1][0] + new_cost * new_visited[1][1]) / (curr_visited[1][0] + 1)\n            find_max_avg(new_cost, new_avg, new_visited)\n    \n    # call the function to find the maximum average of a path\n    find_max_avg(cost[0][0], curr_avg, visited)\n    \n    # return the maximum average found\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    def get_neighbors(i, j, cost):\n        neighbors = []\n        # Top\n        if i > 0:\n            neighbors.append((i-1, j))\n        # Right\n        if j < len(cost[0])-1:\n            neighbors.append((i, j+1))\n        # Bottom\n        if i < len(cost)-1:\n            neighbors.append((i+1, j))\n        # Left\n        if j > 0:\n            neighbors.append((i, j-1))\n        return neighbors\n\n    def max_average(path):\n        path_cost = sum([cost[i][j] for i, j in path])\n        num_cells = len(path)\n        return path_cost / num_cells\n\n    max_avg = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if i == 0 and j == 0:\n                continue\n            path = [(i, j)]\n            path_cost = cost[i][j]\n            visited_cells = {path[-1]}\n            while path[-1][0] < len(cost)-1 and path[-1][1] < len(cost[0])-1:\n                neighbors = get_neighbors(path[-1][0], path[-1][1], cost)\n                for neighbor in neighbors:\n                    if neighbor not in visited_cells:\n                        visited_cells.add(neighbor)\n                        path.append(neighbor)\n                        path_cost += cost[neighbor[0]][neighbor[1]]\n                        if path[-1][0] == len(cost)-1 and path[-1][1] == len(cost[0])-1:\n                            break\n            max_avg = max(max_avg, max_average(path))\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    dp = [[0 for j in range(N)] for i in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if i == 0 or j == 0:\n                dp[i][j] = cost[i][j]\n            else:\n                dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n            if i == N-1 and j == N-1:\n                max_avg = max(max_avg, dp[i][j]/4)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    visited = [[0 for _ in range(N)] for _ in range(N)]\n    max_avg = 0\n    current_path = []\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                current_path.append((i, j))\n                visited[i][j] = 1\n            else:\n                if cost[i][j] > cost[current_path[-1][0]][current_path[-1][1]]:\n                    current_path.append((i, j))\n                    visited[i][j] = visited[current_path[-2][0]][current_path[-2][1]] + 1\n                else:\n                    current_path.pop()\n                    visited[i][j] = 1\n\n            if visited[i][j] > 1:\n                continue\n\n            avg = 0\n            for k in range(visited[i][j]):\n                avg += cost[current_path[k][0]][current_path[k][1]]\n            avg = avg / visited[i][j]\n            if avg > max_avg:\n                max_avg = avg\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, N):\n        dp[0][i] = max(dp[0][i-1], cost[0][i])\n        \n    for j in range(1, N):\n        dp[j][0] = max(dp[j-1][0], cost[j][0])\n        \n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n            \n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            max_avg = max(max_avg, dp[i][j] / (i+j+1))\n            \n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, details in students.items():\n        height, weight = details\n        if height > h and weight > w:\n            filtered_students[name] = details\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_students = {}\n    \n    for student, info in students.items():\n        if info[0] > h and info[1] > w:\n            filtered_students[student] = info\n    \n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    \"\"\"\n    # initialize an empty dictionary to store the count of each value\n    count_dict = {}\n    # loop through the first list of numbers\n    for i, num1 in enumerate(nums1):\n        # check if the current value is already in the dictionary\n        if num1 in count_dict:\n            # increment the count by 1\n            count_dict[num1] += 1\n        else:\n            # add the value to the dictionary with a count of 1\n            count_dict[num1] = 1\n    # initialize an empty list to store the indices where the lists have the same values\n    same_indices = []\n    # loop through the second list of numbers\n    for i, num2 in enumerate(nums2):\n        # check if the current value is already in the dictionary\n        if num2 in count_dict:\n            # check if the count is 1 (meaning it only appears once in both lists)\n            if count_dict[num2] == 1:\n                # add the index to the list of same indices\n                same_indices.append(i)\n        # decrement the count of the current value in the dictionary (to account for the current value)\n        count_dict[num2] -= 1\n    # return the list of same indices\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # Initialize a dictionary to store the count of each number in the list\n    count = {}\n\n    # Loop through the first list and add each number to the count dictionary\n    for num in nums1:\n        count[num] = count.get(num, 0) + 1\n\n    # Initialize a list to store the indices where the count dictionary is equal to 2\n    indices = []\n\n    # Loop through the second list and check if the count dictionary is equal to 2 for each number\n    for num in nums2:\n        if count.get(num, 0) == 2:\n            indices.append(nums2.index(num))\n\n    return indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    # create a dictionary to store the indices of each value in each list\n    indices = {}\n    for i in range(len(nums1)):\n        if nums1[i] in indices:\n            indices[nums1[i]].append(i)\n        else:\n            indices[nums1[i]] = [i]\n    # iterate over the second list and count the indices where the values match\n    count = 0\n    for num in nums2:\n        if num in indices and len(indices[num]) > 1:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Initialize the sum variable\n    sum = 0\n    \n    # Loop through each digit of the base and add its value to the sum\n    for digit in base_str:\n        sum += int(digit)\n        \n    # Calculate the sum of the digits raised to the specified power\n    sum_of_digits = sum ** power\n    \n    # Return the sum of all digits raised to the specified power\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    This function takes base and power as arguments and calculates the sum of all digits of the base to the specified power.\n    \"\"\"\n    # initialize sum variable to 0\n    total = 0\n    \n    # loop through each digit of the base\n    while base > 0:\n        # extract the last digit of the base\n        digit = base % 10\n        \n        # add the last digit to the total\n        total += digit\n        \n        # remove the last digit from the base\n        base //= 10\n    \n    # calculate the power of the total\n    result = pow(total, power)\n    \n    # return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # convert the base and power to strings so that we can perform arithmetic operations with them\n    base_str = str(base)\n    power_str = str(power)\n\n    # initialize the sum to 0\n    sum_digits = 0\n\n    # loop through each digit of the base and multiply it by the power raised to that digit\n    for digit in base_str:\n        sum_digits += int(digit) * int(power_str[int(digit)])\n\n    # return the sum of all digits of the base to the specified power\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    temp = base\n    while power > 0:\n        digit = temp % 10\n        sum += digit\n        power -= 1\n        temp //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    for digit in str(base):\n        sum_of_digits += int(digit) ** power\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string to iterate over the digits\n    base_str = str(base)\n    \n    # Initialize a variable to hold the sum of digits\n    digit_sum = 0\n    \n    # Iterate over the digits of the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the digit_sum variable\n        digit_sum += int(digit)\n    \n    # Calculate the final result by raising the digit_sum to the specified power and returning the integer part\n    return int(digit_sum ** power)"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize the sum to 0\n    total = 0\n    # loop through each digit of the base and add it to the sum to the specified power\n    while base > 0:\n        digit = base % 10  # get the last digit of the base\n        total += digit ** power  # add the digit to the sum to the specified power\n        base //= 10  # remove the last digit of the base\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit ** power\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function will extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n\ntext1 = \"I love reading books, and I quote things when I'm bored.\"\nmatches = extract_quotation(text1)\nprint(matches)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expressions to extract values between quotation marks\n    regex = r'\"([^\"]*)\"'\n    # Using finditer() to iterate through all the matches\n    matches = re.finditer(regex, text1)\n    # Creating a list of extracted values\n    extracted_values = []\n    # Iterating through matches\n    for match in matches:\n        # Appending extracted values to the list\n        extracted_values.append(match.group(1))\n    # Returning the list of extracted values\n    return extracted_values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    # Define the pattern to match quotation marks\n    pattern = re.compile(r'(?<=\")\\w+(?=\")')\n    # Use the pattern to find all matches in the string\n    matches = pattern.findall(text1)\n    # Return the list of matches as a string separated by commas\n    return ', '.join(matches)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"' # match double quotes and capture any characters between them\n    matches = re.findall(pattern, text) # find all matches in the string using the regex pattern\n    return matches # return the list of matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'(?<=\")([\\s\\S]*?)(?=\")'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expressions to extract values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.+?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # convert tuple to list\n    t_list = list(test_tup)\n    # calculate the product of all elements\n    prod = 1\n    for i in range(len(t_list)-1):\n        prod *= t_list[i] * t_list[i+1]\n    # create the result tuple\n    result_tup = tuple([prod])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    new_tup = []\n    for i in range(len(test_tup)-1):\n        new_tup.append(test_tup[i]*test_tup[i+1])\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    multiplied_tup = (test_tup[0] * test_tup[1],)\n    for i in range(2, n+1):\n        multiplied_tup += (test_tup[i] * test_tup[i+1],)\n    return multiplied_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup + (test_tup[-1] * test_tup[0],)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1] * test_tup[0],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = ()\n    for i in range(N):\n        if i == N-1:\n            result += (test_tup[i] * test_tup[i+1],)\n        else:\n            result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n    \n    t_1, *t_rest = test_tup\n    result = [t_1 * t_rest[0]]\n    for t_i in t_rest[1:]:\n        result.append(t_i * result[-1])\n    \n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize the tuple of products\n    prod_tup = ()\n    \n    # Loop through the tuple\n    for i in range(len(test_tup)-1):\n        # Multiply the current element with the next element\n        prod_tup += (test_tup[i] * test_tup[i+1],)\n    \n    # Return the product tuple\n    return prod_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        if i == N-1:\n            result_tup += (test_tup[i],)\n        else:\n            result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    N = len(test_tup) - 1\n    result_tup = []\n    \n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    \n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x+y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns their sum.\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through each element in the first list\n    for i in range(len(lst1)):\n        # Add the corresponding element from the second list to the result list\n        result.append(lst1[i] + lst2[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Convert the list to a set so that we can easily check for duplicates\n    nums = set(nums)\n\n    # Create an empty list to hold the non-consecutive duplicates\n    non_consecutive = []\n\n    # Loop through the numbers in the list\n    for num in nums:\n        # If the number is the first one in the group, skip it\n        if num == nums.start:\n            continue\n\n        # If the number is not the same as the previous number in the group, add it to the non-consecutive list\n        if num!= nums.end:\n            non_consecutive.append(num)\n\n    # Return the non-consecutive duplicates\n    return non_consecutive\n"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    res = []\n    for i, group in groupby(nums):\n        if not i or next(nums)!= i:\n            res.extend(group)\n    return res"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(nums)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = sorted(set(nums))\n    return list(groupby(nums, lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for _, group in groupby(sorted(nums))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # create a generator object for the list of numbers\n    gen_nums = (num for num in nums)\n\n    # use groupby() to group consecutive duplicates\n    grouped = groupby(gen_nums)\n\n    # create a new list to store unique numbers\n    unique_nums = []\n\n    # iterate through the grouped list and add unique numbers to the new list\n    for key, group in grouped:\n        if len(list(group)) > 1:\n            for num in group:\n                unique_nums.append(num)\n\n    # return the new list of unique numbers\n    return unique_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for group in groupby(nums):\n        if not group[0]:\n            group = group[1]\n            for i in range(1, len(group)):\n                if group[i]!= group[i-1]:\n                    result.append(group[i])\n        else:\n            group = [group[0]]\n            for i in range(1, len(group)):\n                if group[i]!= group[i-1]:\n                    result.append(group[i])\n        group = []\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for key, group in groupby(sorted(nums)) if not key]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Remove consecutive duplicates\n    result = []\n    for num in nums:\n        if num not in result or result[-1]!= num:\n            result.append(num)\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = (math.pi * r**2) / 3 # Formula for lateral surface area of a cone\n    return A * h # Multiply the lateral surface area by the height to get the total lateral surface area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the area of the cone using the formula A = \u03c0r^2\n    A = math.pi * r**2\n    # Calculate the lateral surface area using the formula S = hA\n    S = h * A\n    return S"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r**2*(h/3)\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given its radius and height.\n    '''\n    \n    # calculate the base area using the formula:\n    # A = \u03c0r^2\n    area_base = math.pi * r**2\n    \n    # calculate the top area using the formula:\n    # A_top = \u03c0rh / 3\n    area_top = math.pi * r * h / 3\n    \n    # return the sum of the base and top areas\n    return area_base + area_top"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (math.pi*(r**2))+(math.pi*(r**2)*h)/3\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*(r**2 + h**2)\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula to find the lateral surface area of a cone\n    lateral_surface_area = (math.pi * r ** 2) / 3\n    # Multiplying the lateral surface area by the height\n    surface_area = lateral_surface_area * h\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # calculate the lateral surface area using the formula:\n    # lateral surface area = 2 * r * h / 3\n    # we use the fact that the base of the cone has a half-angle of 180 degrees, so we can simplify the formula:\n    # lateral surface area = 2 * r * h\n    # we can use the pythagorean theorem to calculate r^2 + h^2 = r^2 + r^2 * h^2 = r^2 + r^2 * (h/2)^2\n    # therefore, r^2 = (h/2)^2 * r^2 + h^2\n    # r^2 = h^2 * ((h/2)^2 + 1)\n    # r^2 = h^2 * ((2 * (h/2)^2) + 1)\n    # r^2 = h^2 * ((2 * (h/2)^2) + 1) + h^2\n    # r^2 = h^2 * ((2 * (h/2)^2) + 1) + (h^2 / 2)^2\n    # r^2 = h^2 * ((2 * (h/2)^2) + 1) + (h^2 / 2)^2 + h^2\n    # r^2 = (h^2 / 2)^2 * ((2 * (h/2)^2) + 1) + h^2\n    # r^2 = (h^2 / 2)^2 * ((2 * (h/2)^2) + 1) + h^2\n    # r^2 = (h^2 / 2)^2 * ((2 * (h/2)^2) + 1)\n    # r^2 = (h^2 / 2)^2 * h^2 * ((2 * (h/2)^2) + 1)\n    # r^2 = (h^2 / 2)^2 * h^2 * ((2 * (h/2)^2) + 1) + h^2\n    # r^2 = (h^2 / 2)^2 * h^2 * ((2 * (h/2)^2) + 1) + (h^2 / 2)^2\n    # r^2 = (h^2 / 2)^2 * h^2 * ((2 * (h/2)^2) + 1) + (h^2 / 2)^2 + h^2\n    # r^2 = (h^2 / 2)^2 * h^2 * ((2 * (h/2)^2) + 1) + (h^2 / 2)^2 + h^2\n    # r^2 = (h^2 / 2)^2 * h^2 * ((2 * (h/2)^2) + 1) + (h^2 / 2)^2 + h^2\n    # r^2 = (h^2 / 2)^2 * h^2 * ((2 * (h/2)^2) + 1) + (h^2 / 2)^2 + h^2\n    # r^2 = (h^2 / 2)^2 * h^2 * ((2 * (h/2)^2) + 1) + (h^2 / 2)^2 + h^2\n    # r^2 = (h^2 / 2)^2 * h^2 * ((2 * (h/2)^2) + 1) + (h^2 / 2)^2 + h^2\n    # r^2 = (h^2 / 2)^2 * h^2 * ((2 * (h/2)^2) + 1) + (h^2 / 2)^2 + h^2\n    # r^2 = (h^2 / 2)^2 * h^2 * ((2 * (h/2)^2) + 1) + (h^2 / 2)^2 + h^2\n    # r^2 = (h^2 / 2)^2 * h^2 * ((2 * (h/2)^2) + 1) + (h^2 / 2)^2 + h^2\n    # r^2 = (h^2 / 2)^2 * h^2"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the base area of the cone\n    base_area = math.pi * r * r\n    # Calculate the height of the cone\n    cone_height = h\n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = 2 * math.pi * r * cone_height\n    return lateral_surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'\\s|,|\\.')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,.]+'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'\\s|,|\\.'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[,.]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_char = r'[,;\\. ]'\n    new_text = re.sub(special_char, ':', text)\n    return new_text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'([,.])')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace special characters with colons\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'[^\\w\\s]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = re.sub(r'[^\\w\\s]', '', text) # remove all special characters except letters and numbers\n    text = re.sub(r'\\s+', ':', text) # replace multiple spaces with a single colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[,\\. ]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # define a regular expression pattern to match any of the special characters\n    pattern = re.compile(r'\\s*,\\s*|\\.\\s*')\n    \n    # replace all occurrences of the special characters with a colon\n    text = pattern.sub(':', text)\n    \n    # return the modified text\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the first occurrence index to -1\n    first_occurrence_index = -1\n\n    # iterate through the array and find the index of the first occurrence of x\n    for i in range(len(A)):\n        if A[i] == x:\n            if first_occurrence_index == -1:\n                first_occurrence_index = i\n            elif A[first_occurrence_index] > A[i]:\n                first_occurrence_index = i\n\n    # return the first occurrence index or -1 if x was not found in the array\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # check if array is sorted\n    if A[0] > A[-1]:\n        print(\"Error: array is not sorted.\")\n        return None\n    \n    # binary search for first occurrence\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # return None if not found\n    return None"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1 # x not found in the array"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    This function takes in a sorted array A and a number x and returns the index of the first occurrence of x in A.\n    If x is not found in A, it returns -1.\n    '''\n\n    # Initialize the left pointer to 0 and the right pointer to the length of the array minus 1\n    left, right = 0, len(A) - 1\n\n    # Initialize the first occurrence index to -1\n    first_occurrence_index = -1\n\n    # Keep looping while the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Calculate the middle index of the current segment\n        mid = (left + right) // 2\n\n        # If the middle element of the current segment is equal to x, update the first occurrence index and break out of the loop\n        if A[mid] == x:\n            first_occurrence_index = mid\n            break\n\n        # If the middle element of the current segment is greater than x, update the right pointer to be one index less than the middle index\n        elif A[mid] < x:\n            left = mid + 1\n\n        # Otherwise, update the left pointer to be one index more than the middle index\n        else:\n            right = mid - 1\n\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    A (list): a sorted list of integers\n    x (int): a number to search for in the list\n\n    Returns:\n    int: the index of the first occurrence of x in A or -1 if x is not found in A\n    \"\"\"\n    # Initialize the left and right indices\n    left, right = 0, len(A) - 1\n\n    # If x is not in A, return -1\n    if x not in A:\n        return -1\n\n    # While the left index is less than or equal to the right index\n    while left <= right:\n        # Calculate the mid index\n        mid = (left + right) // 2\n\n        # If x is equal to the mid element, return its index\n        if A[mid] == x:\n            return mid\n\n        # If x is less than the mid element, search the right half of A\n        elif A[mid] < x:\n            left = mid + 1\n\n        # If x is greater than the mid element, search the left half of A\n        else:\n            right = mid - 1\n\n    # If we reach this point, x is not in A\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    subarray_products = [[1] * n for i in range(n)]\n    \n    # calculate subarray products for all sublists of length i+1\n    for length in range(1, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            subarray_products[i][j] = arr[i]*arr[i+1]*arr[i+2]*...*arr[j]\n    \n    # calculate sum of subarray products\n    sum_of_products = sum(subarray_products[0][j] for j in range(n))\n    \n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    products = [1]*n\n    for i in range(1, n):\n        products[i] = arr[i]*products[i-1]\n\n    dp = [[0]*(n+1) for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(i):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j+1] + products[i-1]*products[j]*products[i-j-1]\n\n    return dp[n][0]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    # Initialize dp with all zeros\n    dp = [0] * (2*n)\n    # Calculate prefix sum array\n    prefix_sum = [0] * (2*n)\n    prefix_sum[0] = arr[0]\n    for i in range(1, n):\n        prefix_sum[i] = arr[i] + prefix_sum[i-1]\n    # Calculate sum of products for all possible sublists\n    for i in range(n):\n        for j in range(i, 2*n):\n            if j == n:\n                dp[j] = prefix_sum[j] * arr[n-1]\n            else:\n                dp[j] = max(dp[j-1], prefix_sum[j]*arr[j-n])\n    # Find sum of products for all sublists\n    total_sum = 0\n    for i in range(n):\n        total_sum += dp[2*i]\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    product = 1\n    sum_of_products = 0\n\n    for i in range(n):\n        product *= arr[i]\n        sum_of_products += product\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    MOD = 10**9 + 7\n    prefix_sum = [0] * (n + 1)\n    prod_sum = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    for i in range(1, n + 1):\n        prod_sum[i] = prod_sum[i - 1] * arr[i - 1]\n\n    res = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            res = (res + prod_sum[j] * prefix_sum[j] - prod_sum[i - 1] * prefix_sum[i - 1]) % MOD\n\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    \n    # Initialize first row of dp\n    for i in range(n+1):\n        dp[i][0] = arr[i]\n        \n    # Initialize last column of dp\n    for i in range(n-1, -1, -1):\n        dp[0][i] = arr[i]\n        \n    # Fill dp matrix\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j] * dp[i][j-1]\n            \n    # Initialize result with first element of dp\n    result = dp[n][n]\n    \n    # Calculate sum of products of sublists and add it to result\n    for i in range(n-1, -1, -1):\n        for j in range(i, n):\n            sublist = arr[i:j+1]\n            result += sublist.index(sublist[0]) * dp[j+1][n]\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize a list to store the products of all subarrays\n    products = [1] * n\n    \n    # Loop through all subarrays of size i\n    for i in range(1, n + 1):\n        # Compute the product of the first i elements\n        products[i-1] = arr[0] * products[i-1]\n        # Loop through the remaining elements of the array\n        for j in range(i, n + 1):\n            # Compute the product of the j-th element to the end of the subarray\n            products[j-1] *= arr[j-1]\n    \n    # Compute the sum of products of all subarrays\n    total_sum = 0\n    for i in range(n):\n        total_sum += products[i]\n    \n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    product = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i] += arr[j] * product\n            product *= arr[i - 1]\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Initialize the variables to store the sum and product of sublists\n    sum_of_products = 0\n    product_of_sublists = 1\n\n    # Find the length of the array\n    n = len(arr)\n\n    # Loop through all possible sublists of length 1 to n\n    for i in range(1, n+1):\n\n        # Initialize the sum and product of the sublist\n        sublist_sum = 0\n        sublist_product = 1\n\n        # Loop through all possible starting points of the sublist\n        for j in range(n-i+1):\n\n            # Add the elements of the sublist to the sum and multiply it to the product\n            sublist_sum += arr[j]\n            sublist_product *= arr[j]\n\n            # Add the product of the sublist to the sum of products\n            sum_of_products += sublist_product\n\n        # Multiply the product of the sublist with the product of the whole array\n        product_of_sublists *= sublist_product\n\n    # Return the sum of products of all sublists\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = []\n    for i in range(n):\n        prefix_product = 1\n        suffix_product = 1\n        for j in range(i, n):\n            prefix_product *= arr[j]\n            suffix_product *= arr[j]\n            result.append(prefix_product*suffix_product)\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Check if the number is odd or even\n    if n % 2 == 0:\n        n += 1\n    else:\n        n -= 1\n\n    # Set the first and last bits to 0\n    n &= ~(1 << (n.bit_length() - 1)) & ~(1 << 0)\n\n    # Toggle the middle bits\n    for i in range(1, n.bit_length() - 1):\n        n ^= 1 << i\n\n    # Check if the result is odd or even\n    if n % 2 == 0:\n        n -= 1\n    else:\n        n += 1\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    # First, we find the length of the binary representation of n\n    len_n = len(bin(n)[2:])\n\n    # Next, we find the middle bit of n\n    mid_bit = n & ((1 << (len_n - 1)) - 1)\n\n    # Now, we toggle the middle bit\n    toggled_bit = mid_bit ^ (mid_bit >> 1)\n\n    # Finally, we return the toggled number\n    return n ^ toggled_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the binary representation of the input number\n    bin_n = bin(n)[2:]\n\n    # Get the length of the binary representation\n    length = len(bin_n)\n\n    # Check if the number has an even length\n    if length % 2 == 0:\n        # Toggle the middle bit\n        bin_n = bin_n[:length//2] + '0' + bin_n[length//2:]\n    else:\n        # Toggle the middle bit\n        bin_n = bin_n[:length//2] + '1' + bin_n[length//2:]\n\n    # Convert the binary representation back to decimal\n    dec_n = int(bin_n, 2)\n\n    # Return the modified number\n    return dec_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # mask of all bits except the first and last bit\n    mask = ~(1 << (n - 1)) & ~(1 << (n - 2))\n    # toggle the bits except the first and last bit\n    n ^= (n & mask) << 1\n    # shift all bits to the left to include the first and last bits\n    n <<= 1\n    # shift all bits to the right to exclude the first and last bits\n    n >>= 1\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        num_bits = len(bin(n)) - 2  # number of bits in the binary representation of n\n        first_bit = 1 << (num_bits - 1)  # the first bit\n        last_bit = 1 << (num_bits - 1)  # the last bit\n        toggle_bits = (first_bit + last_bit) ^ n  # all bits except the first and the last one\n        return toggle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # Take the last 6 bits of the number\n    last_6_bits = n & ((1 << 6) - 1)\n    # Flip the first and the last bit of the number\n    first_bit_flip = (last_6_bits & 1) ^ 1\n    last_bit_flip = ((last_6_bits >> 1) & 1) ^ 1\n    # Combine the two flips\n    result = (first_bit_flip << 6) | last_bit_flip\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize variables to store the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (1 << 31)\n    \n    # Toggle the middle bits except for the first and last bits\n    middle_bits = n ^ (first_bit | last_bit)\n    \n    return middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Count the number of set bits in the binary representation of n\n    count = sum(int(digit) for digit in bin(n)[2:])\n\n    # If there are an even number of set bits, toggle the last bit\n    if count % 2 == 0:\n        n |= 1 << (n.bit_length() - 1)\n\n    # If there are an odd number of set bits, toggle the first bit\n    else:\n        n ^= 1\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    first_bit = n & 1  # first bit is 1 if n is odd, else 0\n    last_bit = n & (1 << (n.bit_length() - 1))  # last bit is 1 if n is a power of 2, else 0\n    n_without_first_last = n & ((1 << n.bit_length() - 2) - 1)  # all bits except first and last bit\n    n_with_toggled_bits = (n_without_first_last ^ (first_bit ^ last_bit))\n    return n_with_toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Define the mask to toggle the bits of the number except the first and last bit\n    mask = 0b0101010101010101\n    # XOR with the mask to toggle the bits of the number\n    return n ^ mask"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    if a[index] == x:\n        return index\n    if a[index] < x:\n        return index + 1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find the index of the first element greater than or equal to x\n    index = bisect.bisect_left(a, x)\n    # Check if x is already present in the list\n    if index < len(a) and a[index] == x:\n        # If x is already present, return the index\n        return index\n    else:\n        # If x is not present, return the index of the next smaller element\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    This function uses binary search to find the leftmost position where a value is greater than or equal to x.\n    '''\n    # Initialize left and right pointers\n    left, right = 0, len(a) - 1\n    \n    # Binary search to find left insertion point\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n    \n    # Return the leftmost position where x is greater than or equal to the array elements\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_left(a, x)\n    return idx if idx!= len(a) and a[idx] == x else idx + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        i -= 1\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = bisect.bisect_left(a, x)\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        print(\"The string starts with a vowel.\")\n    else:\n        print(\"The string does not start with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return \"The given string starts with a vowel.\"\n    else:\n        return \"The given string does not start with a vowel.\""
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nprint(geometric_sum(5))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    # Base case: if n is 1, return 1 (since 1^1 = 1)\n    if n == 1:\n        return 1\n\n    # Recursive case: add the previous value and the geometric sum of n-1\n    return (1 + geometric_sum(n-1))**n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers = []\n    num = 0\n    \n    while len(str(num)) < n:\n        triangular_numbers.append(num)\n        num += 1\n    \n    smallest_index = math.inf\n    for i in range(len(triangular_numbers)):\n        if triangular_numbers[i] < smallest_index:\n            smallest_index = triangular_numbers[i]\n    \n    return smallest_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of the smallest triangular number with n digits. \n    \"\"\"\n    # Initialize the smallest triangular number and its corresponding index\n    smallest_triangular_number = 10**(n-1)\n    index = n-1\n\n    # Loop until the smallest triangular number is reached\n    while smallest_triangular_number < 10**(n-1):\n        index += 1\n        smallest_triangular_number = int(math.sqrt(index*index + smallest_triangular_number))\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the smallest triangular number as 0\n    smallest_triangular = 0 \n\n    # Iterate from 1 to n-1 and find the smallest triangular number with n digits\n    for i in range(1, n): \n        # Calculate the next triangular number with n digits and add to the smallest triangular number\n        next_triangular = smallest_triangular + (10**(n-i)) \n\n        # If the next triangular number with n digits is smaller than the current smallest triangular number, update the smallest triangular number\n        if next_triangular < smallest_triangular: \n            smallest_triangular = next_triangular \n\n    # Return the index of the smallest triangular number\n    return smallest_triangular - smallest_triangular%10**(n-1) "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # To find the smallest triangular number with n digits, we need to find the smallest number whose digits have n digits.\n    # We can use the formula for finding the smallest triangular number:\n    # T(n) = 10^(n-1)\n    # So, we need to find the largest integer that is a power of 10 that is less than or equal to n.\n    # We can use the math.ceil function to round up to the nearest integer.\n    num_digits = int(math.ceil(math.log10(n)))\n    # Now, we need to find the smallest triangular number with num_digits digits.\n    # We can use the formula for finding the smallest triangular number:\n    # T(n) = 10^(n-1)\n    # So, we need to find the smallest integer that is a power of 10 that is less than or equal to n.\n    # We can use the math.floor function to round down to the nearest integer.\n    min_num = int(math.floor(math.pow(10, num_digits-1)))\n    # We need to find the index of the smallest triangular number with n digits.\n    # We can use the formula for finding the index of the smallest triangular number:\n    # I(n) = 2^(n-1)\n    # So, we need to find the largest integer that is a power of 2 that is less than or equal to n.\n    # We can use the math.ceil function to round up to the nearest integer.\n    num_bits = int(math.ceil(math.log2(n)))\n    # Now, we need to find the index of the smallest triangular number with num_bits bits.\n    # We can use the formula for finding the index of the smallest triangular number:\n    # I(n) = 2^(n-1)\n    # So, we need to find the smallest integer that is a power of 2 that is less than or equal to n.\n    # We can use the math.floor function to round down to the nearest integer.\n    min_bits = int(math.floor(math.pow(2, num_bits-1)))\n    # We can now calculate the index of the smallest triangular number with n digits and num_bits bits.\n    # We need to find the difference between the smallest triangular number with n digits and the smallest triangular number with num_bits bits.\n    # We can use the formula for finding the difference:\n    # T(n) - T(num_bits)\n    # We need to find the smallest integer that is a power of 10 that is less than or equal to n.\n    # We can use the math.ceil function to round up to the nearest integer.\n    min_diff = int(math.ceil(math.pow(10, num_digits-1))) - int(math.ceil(math.pow(10, num_bits-1)))\n    # Now, we can use these values to find the index of the smallest triangular number with n digits.\n    # We can use the formula for finding the index of the smallest triangular number:\n    # I(n) = 2^(n-1)\n    # So, we need to find the largest integer that is a power of 2 that is less than or equal to n.\n    # We can use the math.ceil function to round up to the nearest integer.\n    max_num = int(math.ceil(math.pow(2, num_bits-1)))\n    # We need to find the index of the smallest triangular number with num_digits and max_num digits.\n    # We can use the formula for finding the index of the smallest triangular number:\n    # I(n) = 2^(n-1)\n    # So, we need to find the smallest integer that is a power of 2 that is less than or equal to n.\n    # We can use the math.floor function to round down to the nearest integer.\n    min_bits_diff = int(math.floor(math.pow(2, num_bits-1))) - max_num\n    # We can now calculate the index of the smallest triangular number with n digits and num_bits bits.\n    # We need to find the difference between the smallest triangular number with n digits and the smallest triangular number with num_bits bits.\n    # We can use the formula for finding the"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Create a list to store the triangular numbers with n digits\n    triangular_numbers = [0] * (10 ** n)\n\n    # Initialize the smallest triangular number to 1\n    smallest_triangular_number = 1\n\n    # Initialize the index of the smallest triangular number to 1\n    index = 1\n\n    # Iterate through the list of triangular numbers\n    for i in range(10 ** n):\n        # Calculate the next triangular number\n        triangular_numbers[i] = smallest_triangular_number + index\n\n        # Check if the calculated triangular number is the smallest one\n        if triangular_numbers[i] < smallest_triangular_number:\n            smallest_triangular_number = triangular_numbers[i]\n            index = i\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    #find the smallest triangular number with n digits\n    triangular_num = 10**(n-1)\n    \n    #find the number of digits in triangular number\n    num_of_digits = int(math.log10(triangular_num))\n    \n    #find the number of triangular numbers with n digits\n    triangular_count = int(triangular_num/10**(n-1))\n    \n    #find the index of smallest triangular number with n digits\n    index = triangular_count - n + 1\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a = 10**(n-1)\n    return int(math.log10(a)+1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Function to find smallest triangular number with n digits \n    def smallest_triangular(n): \n        # Base case \n        if n == 0: \n            return 1 \n        # Recursive case \n        else: \n            return smallest_triangular(n-1) + 4**(n-1) \n\n    # Function to find the index of the smallest triangular number with n digits \n    def index_of_smallest_triangular(n): \n        # Find the smallest triangular number with n digits \n        t = smallest_triangular(n) \n        # Initialize variables for the first triangular number \n        i = 1\n        j = 1\n        # Find the index of the first triangular number with n digits \n        while j <= t: \n            i += 1\n            t = i*i + j*j \n            if t == t//1: \n                return i \n            else: \n                j += 1 \n\n    # Call the function to find the index of the smallest triangular number with n digits \n    return index_of_smallest_triangular(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    triangular_numbers = [0] * (n+1)\n    triangular_numbers[0] = 0\n    triangular_numbers[1] = 1\n\n    for i in range(2, n+1):\n        triangular_numbers[i] = triangular_numbers[i-1] + triangular_numbers[i-2]\n\n    for i in range(n, 0, -1):\n        triangular_numbers[i] = math.floor((triangular_numbers[i] + triangular_numbers[i-1]) / 2)\n\n    for i in range(1, n+1):\n        if triangular_numbers[i] == triangular_numbers[i-1]:\n            triangular_numbers[i] += 1\n\n    index = 1\n    for i in range(n+1):\n        if triangular_numbers[i] == n:\n            return index\n        index += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n    \n    # Find the number of digits in n \n    num_digits = int(math.log10(n))+1 \n    \n    # Find the number of times the base 10 is raised to the power of num_digits \n    base = int(math.pow(10,num_digits)) \n    \n    # Initialize the smallest triangular number with n digits to a large value \n    smallest_triangular_number = 9999999999999999999 \n    \n    # Iterate through the possible values of smallest_triangular_number up to 10^n \n    for i in range(1,base): \n    \n        # Calculate the current triangular number and check if it is the smallest \n        triangular_number = int(base*base*(i+1)) \n        if triangular_number < smallest_triangular_number: \n            smallest_triangular_number = triangular_number \n        \n    # Calculate the index of the smallest triangular number with n digits \n    index_n_digits = int(math.log10(smallest_triangular_number))+1 - num_digits \n    \n    return index_n_digits "
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_ = {}\n    for i in range(len(test_tup)):\n        if i < len(test_tup)-1:\n            key = test_tup[i]\n            value = test_tup[i+1]\n            dict_[key] = value\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"Invalid input\")\n        return\n\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    result = {}\n    count = 0\n    for item in test_tup:\n        result[count] = item\n        count += 1\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n\n    # Initialize an empty dictionary\n    result_dict = {}\n\n    # Traverse through the given tuple\n    for i in range(len(test_tup)):\n        # Check if the current index is even or odd\n        if i % 2 == 0:\n            # Extract the key and value from adjacent elements\n            key = test_tup[i]\n            value = test_tup[i+1]\n            # Add the key-value pair to the dictionary\n            result_dict[key] = value\n\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    # Initialize an empty dictionary\n    d = {}\n    # Iterate over the tuple and add adjacent elements to the dictionary\n    for i in range(len(test_tup)-1):\n        # Use the index of the tuple as the key and the next index as the value\n        d[i] = test_tup[i+1]\n    # Return the final dictionary\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # check if the input tuple has only 2 elements\n    if len(test_tup)!= 2:\n        print(\"Input tuple must have only 2 elements.\")\n        return None\n    # create a dictionary and initialize values as empty lists\n    my_dict = {}\n    my_dict[test_tup[0]] = []\n    my_dict[test_tup[1]] = []\n    # iterate through the tuple and append adjacent elements to the corresponding lists in the dictionary\n    for i in range(len(test_tup)-1):\n        my_dict[test_tup[i]][i] = test_tup[i+1]\n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    # convert the tuple to a list\n    lst = list(test_tup)\n    # create an empty dictionary\n    my_dict = {}\n    # iterate over the list and add pairs of adjacent elements to the dictionary\n    for i in range(0, len(lst), 2):\n        my_dict[lst[i]] = lst[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_obj = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # check if the string is empty\n    if len(s) == 0:\n        return True\n\n    # check if all characters are the same\n    for i in range(1, len(s)):\n        if s[i]!= s[0]:\n            return False\n\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[1:])\n        else:\n            return False\n"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same,\n    and False otherwise.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are same and False otherwise.\n    '''\n    # Converting the string to a list of characters\n    lst = list(s)\n    # Checking if the length of the list is 1\n    if len(lst) == 1:\n        return True\n    # If the length is greater than 1, then checking if all the characters are same\n    else:\n        for i in range(len(lst)):\n            if lst[i]!= lst[0]:\n                return False\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char = s[0] # take the first character of the string as the reference character\n    for c in s: # iterate over the string\n        if c!= char: # if the current character is not equal to the reference character\n            return False # return False because all the characters are different\n    return True # return True because all the characters are the same"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    # Check if all the characters are same\n    if s == s[0]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all characters are same, else False.\n    \"\"\"\n    # Convert the input string to a list of characters\n    characters = list(s)\n\n    # Check if all characters are the same\n    for i in range(len(characters)-1):\n        if characters[i]!= characters[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    # initialize a set to keep track of the characters in the string\n    char_set = set()\n    # loop through the string and add each character to the set\n    for char in s:\n        char_set.add(char)\n    # if the length of the set is 1, all the characters are the same and we return True\n    if len(char_set) == 1:\n        return True\n    # otherwise, we return False\n    return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[2:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/3) * side * side * side\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    a = math.sqrt(3) / 4\n    return (6 * s**2) / 5\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    half_perimeter = side / 2\n    area = math.sqrt(3) * side ** 2 / 4\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # using the formula A = (1/6) * s^2\n    return (1/6) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 2 * math.sin(math.pi/3)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side**2 * math.sqrt(2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6)*(side**2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/3) * side ** 2\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m %= n\n    list[n-1], list[m] = list[m], list[n-1]\n    list[n-1:m-1], list[m:n] = list[m:n], list[n-1:m-1]\n    return list[m:] + list[:m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    for i in range(m):\n        list[i], list[n-1-i] = list[n-1-i], list[i]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # get the length of the list\n    n = len(list)\n    # get the modulo of m and n\n    k = m % n\n    # reverse the first k elements of the list\n    list[:k] = list[:k][::-1]\n    # reverse the last n-k elements of the list\n    list[k:] = list[k:][::-1]\n    # return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[-m:] += list[:-m]\n    list[:-m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    if m >= len(list):\n        return list\n    return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    # Reverse the first n-m elements of the list\n    list[:n-m:1] = list[n-m:n:1][::-1]\n    # Reverse the first m elements of the list\n    list[:m:1] = list[m:n:1][::-1]\n    # Reverse the entire list\n    list[:] = list[n-m:n:1][::-1]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    # if m is greater than n, no rotation is required\n    if m > n:\n        return list\n    \n    # shift the list to the right by m items\n    for i in range(m):\n        list[i] = list[i + n]\n    \n    # move the last m items to the beginning of the list\n    for i in range(n - m, n):\n        list[i] = list[i + m]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    for i in range(m % n):\n        temp = list[0]\n        for j in range(n-1):\n            list[j] = list[j+1]\n        list[n-1] = temp\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # If m is greater than or equal to n, rotate by n\n    if m >= n:\n        list[:] = list[-n:] + list[:-n]\n    # If m is less than n, rotate by m\n    else:\n        list[:] = list[m:] + list[:m]"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for value in test_tup:\n        if value is None:\n            none_count += 1\n    if none_count > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Define a lambda function to check if a number is divisible by a certain digit\n    check_divisible = lambda num, digit: num % digit == 0\n\n    # Loop through the numbers from startnum to endnum and check if each number is divisible by every digit it contains\n    for num in range(startnum, endnum+1):\n        # Split the number into a list of digits\n        digits = [int(d) for d in str(num)]\n        # Check if the number is divisible by every digit it contains\n        if all(check_divisible(num, d) for d in digits):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(digit) in str(x) for digit in str(x)), range(startnum, endnum+1)))\n\nstart = int(input(\"Enter the starting number: \"))\nend = int(input(\"Enter the ending number: \"))\n\nresult = divisible_by_digits(start, end)\n\nif result:\n    print(\"Numbers divisible by every digit in the given range:\", result)\nelse:\n    print(\"No numbers found.\")"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = [int(d) for d in str(startnum)]\n    result = []\n    for num in range(startnum, endnum+1):\n        digits_sum = sum(int(digit) for digit in str(num))\n        if digits_sum % 9 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n\n    def is_divisible_by_digits(num):\n        '''\n        Function to check if a given number is divisible by every digit it contains.\n        '''\n        digits = [int(digit) for digit in str(num)]\n        return all(num % digit == 0 for digit in digits)\n\n    # Filter the numbers from the given range\n    filtered_numbers = list(filter(lambda x: is_divisible_by_digits(x), range(startnum, endnum+1)))\n    return filtered_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function returns a list of numbers that are divisible by every digit in the range [startnum, endnum].\n    \"\"\"\n    # Convert the start and end numbers to strings\n    startstr = str(startnum)\n    endstr = str(endnum)\n\n    # Initialize an empty list to store the divisible numbers\n    divisible_nums = []\n\n    # Loop through each digit in the range [1, 9]\n    for digit in range(1, 10):\n        # Extract the digit from the start and end strings\n        start_digit = startstr[startstr.index(str(digit))]\n        end_digit = endstr[endstr.index(str(digit))]\n\n        # If the start and end digits match, check if the range is divisible by the digit\n        if start_digit == end_digit:\n            # Extract the digit from the start string\n            start_digit = int(startstr.replace(start_digit, ''))\n\n            # Loop through the range from startnum to endnum (inclusive)\n            for num in range(startnum, endnum+1):\n                # Extract the digit from the current number\n                curr_digit = num % 10\n\n                # If the digit is equal to the current digit, check if the number is divisible by the digit\n                if curr_digit == digit:\n                    # If the number is divisible by the digit, add it to the list of divisible numbers\n                    divisible_nums.append(num)\n                    break\n\n    return divisible_nums"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two arguments: startnum and endnum. \n    It finds all numbers within the given range from startnum to endnum,\n    where every number is divisible by every digit it contains.\n    \"\"\"\n    # Use a lambda function to check if a number is divisible by every digit\n    is_divisible_by_digits = lambda x: all(int(digit) in str(x) for digit in str(x))\n\n    # Use a list comprehension to find all numbers within the given range that are divisible by every digit\n    divisible_numbers = [x for x in range(startnum, endnum + 1) if is_divisible_by_digits(x)]\n\n    # Print the result\n    print(\"Numbers that are divisible by every digit:\", divisible_numbers)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digits_in_range = {str(num)[i] for num in range(startnum, endnum+1)}\n    for num in range(startnum, endnum+1):\n        if all(int(digit) % int(str(num)[i]) == 0 for i, digit in enumerate(str(num))):\n            yield num"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return filter(lambda x: all(d in str(x) for d in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(d % int(x**0.5) == 0 for d in str(x)) and x >= startnum and x <= endnum"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)) and x >= startnum and x <= endnum, range(10)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        A = math.pi * r**2 * math.sin(math.radians(a/2))\n        return A"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    return math.pi * (r ** 2) * (a / 360)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*r*r*a/360\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is valid\n    if a > 360:\n        return None\n    \n    # Calculate area of sector\n    area = math.pi * r**2 * a / 360\n    \n    # Return area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #check if angle is within valid range\n    if a > 360:\n        return None\n    \n    #calculate area of sector\n    area = math.pi*r**2*a/360\n    \n    #return area\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * (r**2)\n        return area\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp = [[0 for j in range(p+1)] for i in range(m+1)]\n\n    # calculating the LCS of first row and first column\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # backtrack the LCS by filling the 2D table\n    i = m\n    j = p\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # reverse the LCS list and join it with the given string sequence\n    lcs.reverse()\n    lcs_str = ''.join(lcs)\n    print(\"Longest Common Subsequence: \", lcs_str)\n    return lcs_str"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Step 1: Build the table to store LCS lengths of subsequences of X[0..i], Y[0..j], and Z[0..k]\n    table = [[0] * (len(Y) + 1) for _ in range(len(X) + 1)]\n\n    # Step 2: Fill the table in bottom up fashion.\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Step 3: Traverse the table to find the length of the LCS for X, Y, and Z.\n    i, j = len(X), len(Y)\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs_length = table[i-1][j-1]\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Step 4: Return the LCS as a string.\n    lcs_string = \"\"\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs_string += X[i-1]\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs_string"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a table to store lengths of longest common subsequences of all prefixes\n    table = [[0] * (o+1) for i in range(m+1)]\n\n    # fill the table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    table[i][j] = table[i-1][j-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    table[i][j] = table[i-1][j]\n                elif X[i-1] == Z[k-1]:\n                    table[i][j] = table[i][j-1]\n                else:\n                    table[i][j] = max(table[i-1][j], table[i][j-1], table[i-1][j-1])\n\n    # backtrack to find the lcs\n    i = m\n    j = n\n    k = o\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n            j -= 1\n        elif X[i-1] == Z[k-1]:\n            i -= 1\n            k -= 1\n        else:\n            j -= 1\n            k -= 1\n\n    # reverse the lcs\n    lcs.reverse()\n\n    return \"\".join(lcs)\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    return p[m][n]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of longest common suffix \n    # for three strings\n    L = [[0] * (p + 1) for i in range(m + 1)]\n\n    # Build L[m+1][n+1] in bottom up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    # Find the length of LCS\n    length = L[m][n][p]\n\n    # Build the LCS string\n    lcs = \"\"\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i][j - 1][k]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    \n    # Create a table to store length of LCS for all prefixes of X and Y\n    L = [[0] * (n+1) for i in range(m+1)]\n    \n    # Fill in the table in bottom up manner\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    \n    # Create a table to store the LCS for each prefix of X and Y\n    LCS = [[\"\"] * (n+1) for i in range(m+1)]\n    \n    # Fill in the table in bottom up manner\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if X[i-1] == Y[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + X[i-1]\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n    \n    # Print the LCS for each prefix of X and Y\n    for i in range(m,0,-1):\n        for j in range(n,0,-1):\n            print(LCS[i][j], end=\"\")\n        print()\n    \n    # Print the length of LCS for all prefixes of X and Y\n    for i in range(m+1):\n        for j in range(n+1):\n            print(L[i][j], end=\" \")\n    \n    # Return the length of LCS for all prefixes of X and Y\n    return L[m][n]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    m, n, p = len(X), len(Y), len(Z)\n    dp = [[[0]*(p+1) for j in range(m+1)] for i in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    return dp[n][m][p]\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Initialize the length of LCS matrix\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a 3D matrix to store LCS lengths\n    LCS = [[[0 for x in range(p+1)] for y in range(n+1)] for z in range(m+1)]\n\n    # Fill the matrix in bottom-up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    LCS[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i][j][k-1])\n\n    # Return the LCS\n    lcs = []\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i-1][j][k] == LCS[i][j-1][k]:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, p = len(X), len(Y), len(Z)\n    # create a table to store lengths of LCS of substring ending at i in X, Y and Z\n    table = [[0 for j in range(p+1)] for i in range(m+1)]\n    # fill the table using dynamic programming approach\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    table[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i-1][j-1][k-1])\n    # print the length of LCS of all three sequences\n    print(\"Length of LCS of X: \", table[m][n][p])\n    print(\"Length of LCS of Y: \", table[m][n][p])\n    print(\"Length of LCS of Z: \", table[m][n][p])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Check for null inputs\n    if not X or not Y or not Z:\n        return []\n\n    # Create a 2D matrix to store lengths of LCS of all three strings\n    lcs_matrix = [[0 for j in range(len(Y) + 1)] for i in range(len(X) + 1)]\n\n    # Fill the matrix in bottom-up manner\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i-1] == Y[j-1]:\n                lcs_matrix[i][j] = lcs_matrix[i-1][j-1] + 1\n            else:\n                lcs_matrix[i][j] = max(lcs_matrix[i-1][j], lcs_matrix[i][j-1])\n\n    # Return the lcs string\n    lcs = []\n    i = len(X)\n    j = len(Y)\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif lcs_matrix[i-1][j] > lcs_matrix[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs[::-1]"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # replace all non-word characters with spaces\n    str1 = re.sub(r'\\W+','', str1)\n    # split the string into words\n    words = str1.split()\n    # capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # join the words with spaces between them\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Convert the string to lowercase and split it into words\n    words = string.lower().split()\n\n    # Loop through each word and replace the first character with a space if it's a capital letter\n    for i, word in enumerate(words):\n        if word[0].isupper():\n            words[i] ='' + word\n\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # Convert all words to lowercase\n    string = string.lower()\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', string)\n    # Capitalize the first letter of each word and join them with spaces\n    result =''.join([word.capitalize() for word in words])\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\b(\\w)', r'\\1 ', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # remove all special characters from the string\n    str1 = re.sub(r'[^A-Za-z0-9]+','', str1)\n    # split the string into words and capitalize the first letter of each word\n    words = str1.split()\n    capitalized_words = [word.capitalize() for word in words]\n    # join the capitalized words with spaces and return the result\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(s):\n    # Split the string into words\n    words = s.split()\n    # Iterate over the words\n    for i in range(len(words)):\n        # Check if the word starts with a capital letter\n        if words[i][0].isupper():\n            # Split the word into its capital letters and spaces\n            split_word = re.split(r'[A-Z]', words[i])\n            # Join the capital letters and spaces back together with spaces\n            words[i] =''.join(split_word)\n    # Join the words back together with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # Remove any non-alphanumeric characters from the string\n    string = re.sub(r'[^a-zA-Z0-9]+','', string)\n    # Split the string into words\n    words = string.split()\n    # Create an empty list to store the words with spaces\n    capitalized_words = []\n    # Loop through each word\n    for word in words:\n        # Capitalize the first letter of the word if it is capitalized and not a contraction\n        if word[0].isupper() and word[1:].lower() not in ['s','re','ve', 'll', 't']:\n            # Add a space before the capitalized word\n            capitalized_word ='' + word.capitalize()\n        else:\n            # If the word is already capitalized, simply add it to the list\n            capitalized_word = word.capitalize()\n        # Add the capitalized word to the list\n        capitalized_words.append(capitalized_word)\n    # Join the words with spaces and return the result\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # convert string to lowercase\n    str1 = str1.lower()\n    # split the string into words using regular expressions\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # capitalize the first letter of each word and join the words with spaces\n    capitalized_words =''.join([word.capitalize() for word in words])\n    # return the capitalized words with spaces\n    return capitalized_words"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Find all the words in the string\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Capitalize the first letter of each word and concatenate them with spaces\n    result =''.join([word[0].upper() + word[1:].lower() for word in words])\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Split the string into words\n    words = re.findall('\\b[A-Z][a-z]+\\b', str1)\n\n    # Add spaces between the words starting with capital letters\n    for i in range(len(words)):\n        if words[i][0].isupper() and not words[i-1].isupper():\n            words[i] = words[i][0] +'' + words[i][1:]\n\n    # Join the words into a string and return\n    return ''.join(words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all numbers in the list to float values\n    nums_float = [float(num) for num in nums_str]\n    # Sort the float values numerically\n    nums_float.sort()\n    # Convert the sorted float values back to string values\n    nums_str_sorted = [str(num) for num in nums_float]\n    # Return the sorted string values\n    return nums_str_sorted"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all strings to float and sort the list numerically\n    nums_float = sorted([float(num_str) for num_str in nums_str])\n    return nums_float"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert all the strings to float\n    nums = [float(num_str) for num_str in nums_str]\n    # Sort the list numerically\n    nums.sort()\n    # Convert the sorted list back to strings\n    sorted_nums = [str(num) for num in nums]\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(float(num_str))\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the list of strings to a list of numbers\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n\n    # Sort the list of numbers\n    nums.sort()\n\n    # Convert the sorted list of numbers back to a list of strings\n    sorted_nums_str = []\n    for num in nums:\n        sorted_nums_str.append(str(num))\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [float(num) for num in nums_str]\n    nums.sort()\n    sorted_nums_str = ['%s' % num for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert the list to a list of numbers using map()\n    nums = list(map(int, nums_str))\n\n    # Sort the list numerically using sorted()\n    nums.sort()\n\n    # Convert the sorted list back to a list of strings using map()\n    sorted_nums_str = list(map(str, nums))\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            nums.append(num)\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Concatenate the list and the tuple using the + operator\n    new_list = test_list + test_tup\n    \n    # Return the new list\n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for item in test_list:\n        if type(item) == tuple:\n            if test_tup in item:\n                return \"The given tuple is already in the list.\"\n        else:\n            return \"The given list does not contain tuples.\"\n    test_list.append(test_tup)\n    return \"The given tuple was added to the list.\""
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Concatenate the tuple and the list\n    combined_list = test_list + test_tup\n    \n    # Print the combined list\n    print(\"Combined list:\", combined_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Append the tuple to the list\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case: the root is always the last element of the array\n    if i == 0:\n        return True\n    \n    # Check if the root is greater than the left child\n    if arr[i] > arr[2*i + 1]:\n        return False\n    \n    # Check if the root is greater than the right child\n    if arr[i] > arr[2*i + 2]:\n        return False\n    \n    # Recursively call the function on the left and right sub-arrays\n    return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check the base case: the array has only one element\n    if len(arr) == 1:\n        return True\n    \n    # Check if the array is a min heap\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Check if a given array represents a min heap or not.\n    \"\"\"\n    if i < 0:\n        return True\n\n    if arr[i] > arr[parent(i)]:\n        return False\n\n    return check_min_heap_helper(arr, parent(i))"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0 or arr[i] >= arr[i // 2]:\n        return True\n    else:\n        return False\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n    return True\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # If the index is less than or equal to 1, then the heap is empty\n    if i <= 1:\n        return True\n\n    # If the index is greater than 1, then the heap is not empty\n    # Check if the parent is less than or equal to the child\n    if arr[i] >= arr[(i-1)//2]:\n        return False\n    else:\n        return True\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    n = len(arr)\n\n    # If the array is not a heap, then return False\n    if n > 1 and arr[n-1] > arr[0]:\n        return False\n\n    # Check if each element is greater than its children\n    for i in range(1, n):\n        if arr[i] < arr[i*2] or arr[i] < arr[i*2+1]:\n            return False\n\n    # Check each element from the last element to the second last element\n    for i in range(n-2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    # If all elements satisfy the above conditions, then the array is a min heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if i == len(arr) - 1:\n        return False\n    if arr[i] > arr[2 * i + 1]:\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 1:\n        return True\n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2 - 1):\n        if arr[i] > arr[2*i + 1]:\n            return False\n    return True\n\ndef check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n    return check_min_heap_helper(arr, i + 1)\n\ndef check_min_heap(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n    if n == 1:\n        return arr[0] >= 0\n    if is_min_heap(arr[:n//2]):\n        return check_min_heap_helper(arr, 0)\n    return False"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # if array is empty or single element, it is always a min heap\n    if len(arr) == 0 or len(arr) == 1:\n        return True\n    \n    # if i is root or i is a left child, check if it is smaller than its parent\n    if i == 0 or i % 2 == 1:\n        if arr[i] > arr[i//2]:\n            return False\n    \n    # if i is right child, check if it is smaller than its parent and right child\n    if i % 2 == 0:\n        if arr[i] > arr[i//2] or arr[i] > arr[i//2 + 1]:\n            return False\n    \n    # if i is the last element, check if the last element is smaller than its parent\n    if i == len(arr) - 1:\n        if arr[i] > arr[i//2]:\n            return False\n    \n    # if all the elements in the sub-array are smaller than the parent, recursively check if the sub-array is a min heap\n    return check_min_heap_helper(arr[i*2:i*2+2], i*2)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n    # Check if the root node of the heap is greater than the last node.\n    if i < 1:\n        return False\n    \n    # Check if the root node of the heap is greater than the (i-1)/2th node.\n    if arr[i] < arr[(i-1)//2]:\n        return False\n    \n    # Recursively check the heap property for the left and right sub-trees.\n    return check_min_heap_helper(arr, 2*i) and check_min_heap_helper(arr, 2*i+1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize the first two numbers of the sequence\n    a, b = 0, 1\n    \n    # Calculate and print the nth number in the sequence\n    for i in range(n):\n        j = a + b\n        print(j, end=' ')\n        a, b = b, j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j = 0\n        for i in range(2, n+1):\n            j += i\n        return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + 3"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal = 2*n - 1\n        return jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacobsthal_num(jacob"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    j = 1\n    l = 1\n    while l < n:\n        j = 4 * j - 1\n        l += 1\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob_num = jacobsthal_num(n-1)\n        if jacob_num % 2 == 0:\n            return jacob_num + jacobsthal_num(n-2)\n        else:\n            return jacob_num + jacobsthal_num(n-2) + 2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    \n    # Initialize variables\n    jacobsthal_num = 0\n    lucas_num = 1\n    \n    # Calculate and print jacobsthal numbers\n    for i in range(n):\n        jacobsthal_num = (lucas_num * jacobsthal_num) % 1000000007\n        lucas_num = (lucas_num * (4 * lucas_num + 1)) % 1000000007\n        \n    return jacobsthal_num"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    freq_dict = {}\n    for i in test_list:\n        if i[0] in freq_dict:\n            freq_dict[i[0]] += 1\n        else:\n            freq_dict[i[0]] = 1\n\n    min_k_records = []\n    for key, value in freq_dict.items():\n        if value == min(freq_dict.values()):\n            min_k_records.append(key)\n\n    min_k_records.sort()\n\n    return min_k_records[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n\n    Args:\n        test_list (list): A list of tuples of the form (score, name)\n        K (int): An integer indicating the number of records to find the minimum for\n\n    Returns:\n        list: A list of tuples of the form (score, name) with the minimum k records sorted from highest to lowest score\n\n    Examples:\n        >>> test_list = [(\"75\", \"Alice\"), (\"85\", \"Bob\"), (\"90\", \"Charlie\"), (\"80\", \"David\"), (\"95\", \"Eve\")]\n        >>> min_k(test_list, 2)\n        [(\"95\", \"Eve\"), (\"90\", \"Charlie\")]\n    \"\"\"\n    test_list.sort(key=lambda x: x[0], reverse=True)\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    count = 0\n    for i in range(len(test_list)):\n        if count < K:\n            count += 1\n            min_list.append(test_list[i])\n        else:\n            if test_list[i] < min_list[0]:\n                min_list.pop(0)\n                min_list.append(test_list[i])\n            elif test_list[i] > min_list[0]:\n                for j in range(1, len(min_list)):\n                    if test_list[i] < min_list[j]:\n                        min_list.pop(j)\n                        min_list.insert(0, test_list[i])\n                        break\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = sorted(test_list, key=lambda x: x[1])[:K]\n    min_dict = {}\n    for record in min_list:\n        min_dict[record[0]] = record[1]\n    return min_dict"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and returns the Kth smallest record from the list.\n    '''\n    # Sort the list of tuples based on the first element of each tuple (ascending order)\n    test_list.sort(key=lambda x: x[0])\n\n    # Iterate through the sorted list of tuples\n    for i in range(K):\n        # If we have found the Kth smallest record, return it\n        if i == K-1:\n            return test_list[i]\n    \n    # If we have not found the Kth smallest record, return None\n    return None"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    min_list = []\n    for i in test_list:\n        if len(min_list) < K:\n            min_list.append(i)\n        else:\n            min_list.sort()\n            if i <= min_list[-1][0]:\n                min_list.pop()\n                min_list.append(i)\n                break\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_list = []\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        else:\n            if test_list[i] < min_list[0]:\n                min_list[0] = test_list[i]\n                min_list.sort()\n                min_list.pop()\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number K as inputs, and returns a list of the first K tuples from the input list.\n    If there are less than K records in the input list, all the records will be returned.\n    \"\"\"\n    if len(test_list) < K:\n        K = len(test_list)\n\n    min_list = sorted(test_list[:K], key=lambda x: x[0])\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n\n    Args:\n        test_list (list): list of tuples containing name and score of students.\n        K (int): number of students to consider for minimum score.\n\n    Returns:\n        tuple: a tuple containing the name of the student with the minimum score and their minimum score.\n\n    Example:\n        test_list = [('Alice', 90), ('Bob', 85), ('Charlie', 75), ('David', 70), ('Eve', 65)]\n        K = 2\n        min_k(test_list, K) -> ('Alice', 70)\n    \"\"\"\n    # Filter the list to only include the top K records\n    top_k_list = sorted(test_list, key=lambda x: x[1], reverse=True)[:K]\n    # Find the name and minimum score of the top K records\n    min_score = min(record[1] for record in top_k_list)\n    min_name = [record[0] for record in top_k_list if record[1] == min_score][0]\n    return (min_name, min_score)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # initialize minimum count and minimum value to None\n    min_count = None\n    min_value = None\n\n    # loop through the test list\n    for tup in test_list:\n        # get the count and value from the tuple\n        count, value = tup\n\n        # update minimum count and value if current count is less than or equal to K and value is less than the minimum value\n        if count <= K and (min_count is None or count < min_count) and (min_value is None or value < min_value):\n            min_count = count\n            min_value = value\n\n    # return the minimum value and count\n    return min_value, min_count"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    # Create a list of lists, where each sublist contains the index of each element in each list\n    index_lists = [list(set(i) & set(l1) & set(l2) & set(l3)) for i in range(len(l1))]\n    # Flatten the list of lists and remove duplicates\n    common_elements = list(set([x for sublist in index_lists for x in sublist]))\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            if l2[l2.index(l1[i])] in l2 and l2[l2.index(l1[i])] in l3:\n                if l3[l3.index(l1[i])] in l2 and l3[l3.index(l1[i])] in l3:\n                    common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    This function finds common elements from three lists. The function returns a list.\n    \"\"\"\n\n    # Create an empty dictionary to store the count of each element in each list\n    counts = {}\n\n    # Loop through each element in list l1\n    for i in range(len(l1)):\n        # If the element is not already in the counts dictionary, add it with a count of 1\n        if l1[i] not in counts:\n            counts[l1[i]] = 1\n        # Otherwise, increment the count of the element in the counts dictionary\n        else:\n            counts[l1[i]] += 1\n\n    # Loop through each element in list l2\n    for i in range(len(l2)):\n        # If the element is in the counts dictionary and its count is less than the number of occurrences in l1, increment the count\n        if l2[i] in counts and counts[l2[i]] < counts[l1[i]]:\n            counts[l2[i]] += 1\n\n    # Loop through each element in list l3\n    for i in range(len(l3)):\n        # If the element is in the counts dictionary and its count is less than the number of occurrences in l1 and l2, increment the count\n        if l3[i] in counts and counts[l3[i]] < counts[l1[i]] + counts[l2[i]]:\n            counts[l3[i]] += 1\n\n    # Create an empty list to store the common elements\n    common = []\n\n    # Loop through each element in the counts dictionary\n    for key, value in counts.items():\n        # If the count is greater than 1, add the key to the common list\n        if value > 1:\n            common.append(key)\n\n    # Return the list of common elements\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    \n    # Iterate through each element in the first list\n    for i in range(len(l1)):\n        # Check if the element exists in the second and third lists\n        if l1[i] in l2 and l1[i] in l3:\n            # If it does, add it to the common elements list\n            common_elements.append(l1[i])\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_indices = set()\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_indices.add(i)\n    return list(common_indices)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        for i in range(2, len(numbers)):\n            if numbers[i] < smallest:\n                second_smallest = smallest\n                smallest = numbers[i]\n            elif numbers[i] < second_smallest and numbers[i]!= smallest:\n                second_smallest = numbers[i]\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"The list must have at least two numbers.\"\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two numbers.')\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n    - numbers: A list of numbers.\n\n    Returns:\n    - The second smallest number in the list, or None if there are fewer than 2 numbers in the list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    for number in numbers[2:]:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(b)*')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b.*b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    if matches:\n        return 'Match found'\n    else:\n        return 'No match found'"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*b')\n    result = pattern.match(text)\n    if result:\n        print(\"Match found!\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(b*)')\n    return pattern.findall(text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    # Function to count the number of reverse pairs in a list of strings\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                # check if the characters at the same index are the same\n                if test_list[i][j] == test_list[j][i]:\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j]!= test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    # Initialize a dictionary to store the count of reverse pairs\n    reverse_pair_count = {}\n    # Loop through each string in the list\n    for string in test_list:\n        # Reverse the string and check if the reversed string is already in the dictionary\n        if string[::-1] in reverse_pair_count:\n            # If it is, increment the count of reverse pairs by 1\n            reverse_pair_count[string[::-1]] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            reverse_pair_count[string[::-1]] = 1\n    # Return the dictionary containing the count of reverse pairs\n    return reverse_pair_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each tuple\n    count_dict = {}\n    \n    # Loop through each list in the original list\n    for list2 in list1:\n        # Convert the list to a tuple and add it to the count_dict\n        count_dict[tuple(list2)] = count_dict.get(tuple(list2), 0) + 1\n    \n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[k] for k in range(i, j))\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary\n    count_dict = {}\n    \n    # Iterate through each element of the list\n    for element in list1:\n        # Convert the element to a tuple\n        tuple_element = tuple(element)\n        # Check if the tuple is already a key in the dictionary\n        if tuple_element in count_dict:\n            # If it is, increment its value by 1\n            count_dict[tuple_element] += 1\n        else:\n            # If it's not, add it to the dictionary with a value of 1\n            count_dict[tuple_element] = 1\n    \n    # Return the dictionary of unique sublists and their counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # create an empty dictionary\n    sublist_count = {}\n    # loop through each list in the original list\n    for sublist in list1:\n        # convert the list to a tuple and add it to the dictionary\n        if tuple(sublist) not in sublist_count:\n            sublist_count[tuple(sublist)] = 1\n        else:\n            sublist_count[tuple(sublist)] += 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    sublist_count = {}\n    for i in range(len(list1)):\n        if not tuple(list1[i]):\n            continue\n        sublist = tuple(list1[i])\n        if sublist not in sublist_count:\n            sublist_count[sublist] = 1\n        else:\n            sublist_count[sublist] += 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            sublist = list1[i:j+1]\n            tuple_sublist = tuple(sublist)\n            if tuple_sublist in count:\n                count[tuple_sublist] += 1\n            else:\n                count[tuple_sublist] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            sublist_tuple = tuple(sublist)\n            if sublist_tuple in count_dict:\n                count_dict[sublist_tuple] += 1\n            else:\n                count_dict[sublist_tuple] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            tuple_sublist = tuple(sublist)\n            if tuple_sublist not in count:\n                count[tuple_sublist] = 1\n            else:\n                count[tuple_sublist] += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in list1:\n        tuple_i = tuple(i)\n        if tuple_i in count:\n            count[tuple_i] += 1\n        else:\n            count[tuple_i] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    count_dict = {}\n\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if isinstance(subitem, list):\n                    subitem = tuple(subitem)\n                if subitem in count_dict:\n                    count_dict[subitem] += 1\n                else:\n                    count_dict[subitem] = 1\n\n    return count_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    if '.' in num and len(num.split('.')[1]) == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # check if the given string contains only numbers and has a precision of 2\n    if not num.replace('.', '').isdigit():\n        return False\n    try:\n        # convert the string to float with a precision of 2\n        float(num.lstrip('0').rstrip('0'))\n    except ValueError:\n        # if the conversion fails, the string is not a decimal number with a precision of 2\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        decimal_num = float(num)\n        if decimal_num.is_integer():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num:\n            if num.split('.')[1].startswith('0') and len(num.split('.')[1]) <= 2:\n                return True\n            else:\n                return False\n        else:\n            return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)  # Convert the input to a string\n    decimal_part = num.split('.')[1]  # Extract the decimal part of the number\n    if len(decimal_part) > 2:  # Check if the decimal part is more than 2 digits\n        return False\n    for digit in decimal_part:\n        if not digit.isdigit():  # Check if each digit is a digit\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # Convert the string to a float\n        num = float(num)\n        # Split the string into a list of integers and a decimal point\n        num_list = num.split('.')\n        # Check if the list of integers contains at least 2 elements\n        if len(num_list[0]) < 2 or len(num_list[1]) < 2:\n            return False\n        # Check if the decimal point is at least 2 characters long\n        if len(num_list[1]) < 3:\n            return False\n        # Check if the number of digits after the decimal point is less than 3\n        if len(num_list[1]) > 3:\n            return False\n        # Check if the decimal point is followed by at least 2 digits\n        if num_list[1][-2:] < '0' or num_list[1][-2:] > '9':\n            return False\n        # Check if the string contains any non-numeric characters\n        if not num.isdigit() and not '.' in num and not ',' in num:\n            return False\n        # If all the checks pass, return True\n        return True\n    except ValueError:\n        # If the string cannot be converted to a float, return False\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    for char in num:\n        if not char.isdigit():\n            return False\n    try:\n        float(num)\n    except ValueError:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    for i in range(len(num)):\n        if num[i] == '.' or num[i] == ',':\n            return False\n        if i > 0 and num[i] == '0' and num[i-1] in ['.', ',']:\n            return False\n        if i > 0 and num[i] == '-' and num[i-1] == '.' and (i == 1 or num[i-2] in ['0', '.', ',']):\n            return False\n        if num[i] in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal_pattern = r'^\\d+(\\.\\d{1,2})?$'\n    if not re.match(decimal_pattern, num):\n        return False\n    num_with_precision = num.split('.')[1]\n    if len(num_with_precision) > 2:\n        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    unique_flag = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique_flag = False\n                break\n    return unique_flag"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Create a set to store unique elements in the array\n    unique_set = set(arr)\n\n    # Check if the length of the set is 1 or not\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 2 and arr[0]!= arr[1]:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Convert the list to a set to remove any duplicate elements\n    arr = set(arr)\n    # Check if the length of the set is 1\n    if len(arr) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains multiple distinct elements.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Initialize a set to store the elements of the list\n    unique_set = set()\n\n    # Loop through the list and add each element to the set\n    for num in arr:\n        unique_set.add(num)\n\n    # If the length of the set is equal to 1, then the list contains only one distinct element\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arr)\n\n    # if the length of the set is 1, then there is only one distinct element in the list\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # Check for leap year\n    is_leap_year = False\n    if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n        is_leap_year = True\n    \n    # Check for month number\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        print(monthnum, 'contains 30 days.')\n    elif monthnum in [4, 6, 9, 11] and is_leap_year:\n        print(monthnum, 'contains 30 days.')\n    else:\n        print(monthnum, 'contains 31 days.')"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        if monthnum3 % 10 == 0:\n            if monthnum3 % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if 1 <= monthnum3 <= 12:\n        if monthnum3 == 2:\n            return True\n        elif monthnum3 % 2 == 0:\n            return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 100 == 0:\n        if monthnum3 % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum3 % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if monthnum3 in range(1,13):\n        if monthnum3 in range(4,7):\n            days_in_month[2] = 29\n        if monthnum3 in range(1,3):\n            days_in_month[0] = 29\n    else:\n        print(\"Invalid month number. Please enter a number from 1 to 12.\")\n        return\n    \n    if monthnum3 % 2 == 0:\n        print(\"The month {} contains 30 days.\".format(monthnum3))\n    else:\n        print(\"The month {} contains 31 days.\".format(monthnum3))"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        if monthnum3 in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    else:\n        if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13):\n        if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n            return True\n        else:\n            return days_in_month[monthnum3 - 1] in range(31, 31 + 28)\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        print(\"Invalid input!\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"30 days in this month.\")\n    elif monthnum3 in [4, 6, 9, 11]:\n        print(\"30 days in this month.\")\n    else:\n        print(\"No 30 days in this month.\")"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    diff = float('inf')\n    for i in range(n-1):\n        diff = min(diff,arr[i+1]-arr[i])\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of n integers and returns the minimum difference between any two elements in the array.\n\n    The function uses the modified version of the binary search algorithm to find the minimum difference between any two elements in the array. The idea is to use the fact that the smallest difference is between any two elements in the array, and then use a binary search to find the actual minimum difference. The function returns the minimum difference found.\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to the maximum possible value\n    min_diff = float('inf')\n\n    # Iterate through the array and for each element, calculate the difference between it and the next element\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n\n        # If the calculated difference is smaller than the current minimum difference, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef find_min_diff(arr, n):\n    # Sort the given array in ascending order\n    arr.sort()\n\n    # Initialize the min heap with the first two elements\n    min_heap = [(arr[0], arr[1])]\n\n    # Traverse through the remaining array elements\n    for i in range(2, n):\n        # Remove the smallest element from the min heap\n        min_heap.pop(0)\n\n        # Insert the current element into the min heap\n        heapq.heappush(min_heap, (arr[i], arr[i]))\n\n        # Update the minimum difference\n        if i - min_heap[0][0] < min_diff:\n            min_diff = i - min_heap[0][0]\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    The function uses a nested loop to iterate over the array and find the minimum difference between any two elements.\n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()  # sort the array in non-decreasing order\n    diff = float('inf')  # initialize the minimum difference as infinity\n    \n    for i in range(n-1):\n        # calculate the difference between the current element and the next element in the array\n        diff = min(diff, arr[i+1] - arr[i])\n    \n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n    return arr\n\n\ndef find_min_diff(arr, n):\n    sorted_arr = merge_sort(arr)\n    min_diff = float('inf')\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            diff = sorted_arr[j] - sorted_arr[i]\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(2, n):\n        diff = arr[i] - arr[i-1]\n        min_diff = min(min_diff, diff)\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    # Initialize minimum difference\n    min_diff = float('inf')\n    # Loop through the array\n    for i in range(n - 1):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i+1] - arr[i]\n        # If the current difference is smaller than the minimum difference, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n\n    # Find the minimum element in the array\n    min_el = min(arr)\n\n    # Initialize an empty dictionary\n    diff_dict = {}\n\n    # Traverse through the array and store the difference of the element with minimum element in a dictionary\n    for i in range(n): \n        diff = abs(arr[i] - min_el)\n        diff_dict[diff] = arr[i]\n\n    # Find the minimum difference in the dictionary\n    min_diff = min(diff_dict.keys())\n\n    # Initialize the result as None\n    result = None\n\n    # Traverse through the dictionary and check if the current difference is the minimum difference found so far\n    for key in diff_dict.keys(): \n        if abs(key - min_diff) == min_diff: \n            result = diff_dict[key]\n            break\n\n    # Return the result\n    return result\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1,n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(string):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        i = 1\n        polite = 2\n        while i <= n:\n            if polite % 2!= 0:\n                polite += 1\n            else:\n                polite += 2\n            i += 1\n        return polite\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    # Helper function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Iterate through the numbers from 1 to n\n    for i in range(1, n+1):\n        # If the number is prime, it is a polite number\n        if is_prime(i):\n            return i"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_count = 0\n    count = 0\n    i = 0\n    while count < n:\n        count += 1\n        i += 1\n        if count % 5 == 0 and count > 0:\n            if i % 2 == 0:\n                polite_count += 1\n\n    return polite_count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Returns the nth polite number using the Fibonacci sequence.\n    '''\n    a, b = 0, 1\n    polite_numbers = []\n    for _ in range(n):\n        a, b = b, 3 * a + b\n        if b % 2 == 0:\n            polite_numbers.append(b)\n    return polite_numbers[-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (2 * n + 1) * math.log(n * math.log(n) + 1) / (math.log(n + 1) + 1)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_polite(n):\n    \"\"\"\n    This function takes an integer n and returns the nth polite number.\n\n    If n is not a positive integer, it raises a ValueError.\n    If n is 1 or 2, it returns 1.\n    For all other values of n, it returns n * (log_10(n) + 1).\n\n    Args:\n        n (int): The integer for which you want to find the nth polite number.\n\n    Returns:\n        int: The nth polite number.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    if n in [1, 2]:\n        return 1\n\n    return n * (int(math.log10(n)) + 1)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    def is_prime(num): \n        '''\n        Helper function to check if a number is prime or not.\n        '''\n        if num < 2: \n            return False\n        for i in range(2, int(math.sqrt(num))+1): \n            if num % i == 0: \n                return False\n        return True\n\n    def nth_polite(n): \n        '''\n        Main function to find nth polite number.\n        '''\n        count = 0\n        primes = []\n\n        # Iterate over all numbers starting from 2 to n and check if they are prime.\n        for i in range(2, n+1): \n            if is_prime(i): \n                primes.append(i) \n                count += 1\n\n            # If we have found n primes, return the nth prime.\n            if count == n: \n                return primes[n-1]\n\n        # If we reach this point, the nth polite number was not found.\n        return None\n\n    return nth_polite(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # if n is 0 or 1, it is not polite\n    if n == 0 or n == 1:\n        return False\n\n    # start with 1 as the starting number\n    x = 1\n\n    # calculate the limit for the polite numbers\n    limit = int(math.sqrt(2 * n))\n\n    # iterate over the range from 1 to the limit and check if each number is polite\n    for i in range(1, limit + 1):\n        # check if the current number is a polite number\n        if is_prime(x) and math.gcd(i, x) == 1:\n            # check if it is the nth polite number\n            if n == i:\n                return True\n        x += 1\n\n    # if we reach this point, the nth polite number does not exist\n    return False\n\ndef is_prime(n):\n    '''\n    A helper function to check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite = 1\n    for i in range(1, n+1):\n        if i % 5 == 0:\n            polite *= 2\n    return polite\n\nif __name__ == '__main__':\n    n = int(input(\"Enter the value of n: \"))\n    print(\"The\", n, \"th polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    def nth_polite(n, a, b, c):\n        \"\"\"\n        Helper function to find nth polite number.\n        \"\"\"\n        if n == 1:\n            return a\n        elif n == 2:\n            return b\n        elif n == 3:\n            return c\n        else:\n            x = (a + b + c) // 2\n            y = a + b + c - 2 * x\n            if n % 2 == 0:\n                return nth_polite(n // 2, x + 2 * a + 2 * b + 2 * c, 2 * a, 2 * b + 2 * c)\n            else:\n                return nth_polite(n // 2, x + 2 * a + 2 * b + 2 * c, 2 * a, 2 * b + 2 * c)\n\n    def nth_polite_fast(n, a, b, c):\n        \"\"\"\n        Fast function to find nth polite number using babylonian method.\n        \"\"\"\n        if n == 1:\n            return a\n        elif n == 2:\n            return b\n        elif n == 3:\n            return c\n        else:\n            x = (a + b + c) // 2\n            y = a + b + c - 2 * x\n            if n % 2 == 0:\n                return nth_polite_fast(n // 2, x + 2 * a + 2 * b + 2 * c, 2 * a, 2 * b + 2 * c)\n            else:\n                return nth_polite_fast(n // 2, x + 2 * a + 2 * b + 2 * c, 2 * a, 2 * b + 2 * c)\n\n    def nth_polite_brute(n):\n        \"\"\"\n        Brute force method to find nth polite number.\n        \"\"\"\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        else:\n            x = (1 + 2 + 3) // 2\n            y = 1 + 2 + 3 - 2 * x\n            if n % 2 == 0:\n                return nth_polite_brute(n // 2) + nth_polite_brute(n // 2) + nth_polite_brute(n // 2)\n            else:\n                return nth_polite_brute(n // 2) + nth_polite_brute(n // 2) + nth_polite_brute(n // 2)\n\n    polite_numbers = [1, 2, 3]\n    while len(polite_numbers) < n:\n        a = polite_numbers[-1]\n        b = 2 * a + 1\n        c = 2 * b + 1\n        polite_numbers.append(nth_polite(n, a, b, c))\n\n    return polite_numbers[-1]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(lst):\n    '''\n    This function takes a list as input and returns a list of pairs of consecutive items in the list.\n    '''\n    pairs = []\n    for i in range(len(lst)-1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(lst):\n    result = []\n    n = len(lst)\n    for i in range(n-1):\n        result.append((lst[i], lst[i+1]))\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a target sum as input and returns the count of pairs whose sum is equal to the target sum.\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the count of pairs in the list whose sum is equal to'sum'.\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    \"\"\"\n\n    # initialize the count variable to zero\n    count = 0\n\n    # loop through the array\n    for i in range(len(arr)):\n        # loop through the remaining elements of the array\n        for j in range(i+1, len(arr)):\n            # check if the sum of the two elements is equal to the given sum\n            if arr[i] + arr[j] == sum:\n                # increment the count variable\n                count += 1\n\n    # return the final count\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the number of pairs whose sum is equal to the given sum.\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input, li1 and li2, and returns the difference between them.\n    \"\"\"\n    diff = []\n    for elem in li1:\n        if elem not in li2:\n            diff.append(elem)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [i for i in li1 if i not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = list(set(li1) - set(li2))\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Initialize an empty list to store the difference\n    diff_list = []\n\n    # Loop over the first list and check if it exists in the second list\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n\n    # Return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between the two lists.\n    '''\n    # Initialize an empty list to store the difference\n    diff_list = []\n    # Loop through each element in the first list\n    for i in li1:\n        # Check if the element is in the second list\n        if i not in li2:\n            # If it's not, add it to the difference list\n            diff_list.append(i)\n    # Return the difference list\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of fourth power of first\", n, \"odd natural numbers is:\", odd_num_sum(n))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    num = 1\n    \n    while count < n:\n        num += 2\n        if num % 2 == 1:\n            sum += num ** 4\n            count += 1\n    \n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"The sum of fourth power of first\", n, \"odd natural numbers is:\", odd_num_sum(n))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 4\n        i += 2\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of fourth power of first {} odd natural numbers is: {}\".format(n, odd_num_sum(n)))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i%2!= 0:\n            sum += i**4\n    return sum\n\nprint(odd_num_sum(10)) # Output: 46368"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', ')']:\n            stack.append(i)\n        elif i == '+' or i == '-' or i == '*' or i == '/':\n            if len(stack) < 2:\n                return False\n            if stack[-1] == '(' and i == ')':\n                stack.pop()\n            elif stack[-1] in ['+', '-']:\n                stack.pop()\n            elif stack[-1] == '*' or stack[-1] == '/':\n                if i == '+' or i == '-':\n                    stack.pop()\n                else:\n                    stack.append(i)\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\n    This function will take an expression as input, and will return True if the expression is balanced, and False otherwise.\n\n    To check if an expression is balanced or not, we can use a stack. We will push the opening parentheses onto the stack, and pop the closing parentheses from the stack until we reach an opening parenthesis. If the stack is not empty, then the expression is not balanced.\n\n    Here's the Python code for the function:\n\n    '''\n    @param exp: The expression to check for balanced parentheses.\n    @return: True if the expression is balanced, and False otherwise.\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Checks if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char in ['(', '{']:\n                if char!= top_char:\n                    return False\n            elif char in [')', '}']:\n                if char == ')' and top_char == '(':\n                    continue\n                elif char == ']' and top_char == '[':\n                    continue\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    if len(stack)!= 0:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_count = 0\n    \n    for c in exp:\n        if c == '(':\n            open_count += 1\n            stack.append(open_count)\n        elif c == ')':\n            if not stack:\n                return False\n            open_count = stack.pop()\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if last_char == '(':\n                continue\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n\n    for i in range(len(exp)):\n        if exp[i] in ['(', '{', '[']:\n            stack.append(exp[i])\n        elif exp[i] in [')', '}', ']']:\n            if not stack:\n                return False\n            if exp[i] == ')' and stack[-1]!= '(':\n                return False\n            if exp[i] == '}' and stack[-1]!= '{':\n                return False\n            if exp[i] == ']' and stack[-1]!= '[':\n                return False\n            stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    # create a stack\n    stack = deque()\n\n    # iterate through the expression\n    for char in exp:\n\n        # if the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n\n        # if the character is a closing parenthesis, pop the last character from the stack\n        elif char == ')':\n            if not stack:\n                return False\n            last_char = stack.pop()\n\n            # if the last character is not an opening parenthesis, return False\n            if last_char!= '(':\n                return False\n\n    # if the stack is not empty, return False\n    if stack:\n        return False\n\n    # otherwise, return True\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i, char in enumerate(exp):\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the input string into words\n    words = test_str.split()\n    # initialize an empty list to store the non-K-length words\n    non_K_words = []\n    # loop through each word in the list\n    for word in words:\n        # check if the length of the word is not equal to K\n        if len(word)!= K:\n            # if it's not, add it to the non-K-length words list\n            non_K_words.append(word)\n    # join the non-K-length words back into a string\n    result =''.join(non_K_words)\n    # return the final result\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    # split the string into words\n    words = test_str.split()\n    # initialize an empty list to store the cleaned up words\n    cleaned_words = []\n    # iterate over each word in the list\n    for word in words:\n        # check if the length of the word is greater than K\n        if len(word) > K:\n            # if it is, add it to the cleaned up list\n            cleaned_words.append(word)\n    # join the cleaned up list into a string and return it\n    return''.join(cleaned_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Convert the string to a list of words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the words to be kept\n    keep_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than or equal to K\n        if len(word) >= K:\n            # If it is, add the word to the keep_words list\n            keep_words.append(word)\n    \n    # Convert the list of kept words back to a string and return it\n    return''.join(keep_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    words = test_str.split()\n    new_words = []\n\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        return result[0]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    else:\n        return matches"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if re.search(pattern,text):\n        match = re.search(pattern,text)\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return (match.group(),match.start(),match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.finditer(pattern, text)\n    if matches:\n        result = []\n        for match in matches:\n            result.append([match.start(), match.end()])\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            odd_count += 1\n            if odd_count > 1:\n                return False\n        else:\n            if odd_count > 0:\n                return False\n    if odd_count > 1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2!= 0: # check if odd index\n            if nums[i] % 2!= 0: # check if odd number in the odd index\n                return False # if any odd number in the odd index, return False\n    return True # if no odd number in any odd index, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_indices = [i for i in range(len(nums)) if i % 2!= 0]\n    for i in odd_indices:\n        if len([x for x in nums[i:] if x % 2!= 0]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1 and i % 2 == 1:\n            odd_count += 1\n    return odd_count == len(nums)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    for i in range(0, len(nums), 2):\n        if not all(nums[j] % 2 == 0 for j in range(i, len(nums), 2)):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Initialize an empty list to store the odd numbers\n    odd_nums = []\n    \n    # Loop through each number in the list\n    for num in nums:\n        # If the number is odd, append it to the odd_nums list\n        if num % 2!= 0:\n            odd_nums.append(num)\n    \n    # Loop through each odd number in the odd_nums list and check if it's present in the list at the same position (index)\n    for i in range(0, len(odd_nums), 2):\n        if odd_nums[i] not in nums:\n            return False\n    \n    # If all odd numbers in the odd_nums list are present in the list, return True\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str)-1:\n            continue\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str) - 1:\n            if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    \n    for i in range(len(test_str)):\n        if i > 0 and test_str[i] in vowels and test_str[i-1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if (test_str[i] in vowels) and (test_str[i+1] in vowels):\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    # Create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # Initialize the sum to zero\n    total_sum = 0\n    # Iterate through the unique elements and add them to the total_sum\n    for element in unique_elements:\n        total_sum += element\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Convert the given list into a set to remove duplicates\n    unique_set = set(arr)\n    # Convert the set back into a list to find the sum of unique elements\n    unique_list = list(unique_set)\n    # Calculate the sum of unique elements\n    unique_sum = sum(unique_list)\n    # Return the sum of unique elements\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    # Create an empty dictionary to store the indices of each element in the list\n    indices = {}\n\n    # Iterate through the list and add each element to the dictionary with its index as its value\n    for i in range(len(arr)):\n        indices[arr[i]] = i\n\n    # Initialize the sum variable to 0\n    total = 0\n\n    # Iterate through the list again and add each element to the sum variable if it hasn't been added before\n    for i in range(len(arr)):\n        if i!= indices[arr[i]]:\n            total += arr[i]\n\n    # Return the total sum\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store the unique elements\n    unique_set = set(arr)\n    \n    # Initialize a variable to store the sum of unique elements\n    unique_sum = 0\n    \n    # Iterate through the unique elements and add their values to the unique_sum variable\n    for num in unique_set:\n        unique_sum += num\n    \n    # Return the unique_sum\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a dictionary to keep track of the frequency of each element in the list\n    freq = {}\n    \n    # loop through the list and update the frequency dictionary with the count of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # calculate the sum of non-repeated elements by looping through the frequency dictionary and adding up the counts\n    total = 0\n    for count in freq.values():\n        if count == 1:\n            total += count\n    \n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = []\n    for i in arr:\n        if i not in unique_arr:\n            unique_arr.append(i)\n    return sum(unique_arr)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Initialize a set to store unique elements of the list\n    unique_set = set(arr)\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_of_non_repeated = 0\n    # Loop through the unique elements of the list\n    for num in unique_set:\n        # If the current element is not repeated, add it to the sum\n        if unique_set.count(num) == 1:\n            sum_of_non_repeated += num\n    # Return the sum of non-repeated elements\n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements of the array\n    unique_elements = set(arr)\n    \n    # Calculate the sum of non-repeated elements\n    non_repeated_sum = sum(unique_elements)\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # creating a set to store unique elements in the list\n    unique_set = set(arr)\n\n    # summing all the unique elements in the set\n    sum_of_unique = sum(unique_set)\n\n    return sum_of_unique"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(list1) if k == list1[0]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_lst = groupby(lst)\n    return [[k] + list(g) for k, g in grouped_lst if not (len(list(g)) == 1 or k == lst[-1])]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[x for x, y in groupby(list1)]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if len(list(group)) > 1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of sublists containing consecutive duplicates of the input list elements.\n\n    Args:\n    lst (list): A list of elements.\n\n    Returns:\n    list: A list of sublists containing consecutive duplicates of the input list elements.\n\n    Example:\n    pack_consecutive_duplicates([1, 2, 3, 2, 1, 4, 2, 5])\n    # Output: [[1, 2, 2], [3, 2], [1, 4], [2, 5]]\n    \"\"\"\n\n    # Group the list elements by consecutive duplicates\n    grouped_lst = groupby(lst)\n\n    # Extract the consecutive duplicates from the grouped list and convert them to sublists\n    result = [list(g) for g in grouped_lst]\n\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for item, group in groupby(list1):\n        if not item:  # skip empty elements\n            continue\n        if item == next(group):  # check if consecutive duplicates found\n            yield [item]\n        else:\n            yield list(group)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[k, [list(g)]] for k, g in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped = groupby(list1)\n    for key, group in grouped:\n        if len(list(group)) > 1:\n            yield list(group)"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create a dictionary to store the counts\n    count_dict = {}\n    # loop through each element in the list1\n    for element in list1:\n        # if the element is a list, convert it to a tuple and count its occurrences\n        if isinstance(element, list):\n            tuple_element = tuple(element)\n            count_dict[tuple_element] = count_dict.get(tuple_element, 0) + 1\n    # return the dictionary with the counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts\n    counts = {}\n    # loop through each list in the input list\n    for sublist in list1:\n        # turn the sublist into a tuple\n        tup = tuple(sublist)\n        # check if the tuple is already in the dictionary\n        if tup in counts:\n            # increment the count by 1\n            counts[tup] += 1\n        else:\n            # if the tuple is not in the dictionary, add it and set the count to 1\n            counts[tup] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # initialize an empty dictionary\n    count_dict = {}\n    # loop through the list\n    for item in list1:\n        # convert the list to a tuple\n        item_tuple = tuple(item)\n        # check if the tuple is already in the dictionary\n        if item_tuple not in count_dict:\n            # if not, add it with a value of 1\n            count_dict[item_tuple] = 1\n        # if the tuple is already in the dictionary, increment its value by 1\n        else:\n            count_dict[item_tuple] += 1\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        sublists[tuple(list1[i])] = sublists.get(tuple(list1[i]), 0) + 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublists = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublists:\n            sublists[sublist_tuple] += 1\n        else:\n            sublists[sublist_tuple] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # Loop through each list in the input list\n    for sublist in list1:\n        # Convert the list to a tuple to make it hashable\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in count_dict:\n            # Increment the count if it is already in the dictionary\n            count_dict[sublist_tuple] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            count_dict[sublist_tuple] = 1\n    \n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the list to a set to remove duplicates\n    list1 = list(set(list1))\n\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Iterate over the unique lists in the original list\n    for sublist in list1:\n        # Turn the list to a tuple and check if it exists in the dictionary\n        if (tuple(sublist),) in counts:\n            counts[(tuple(sublist),)] += 1\n        else:\n            counts[(tuple(sublist),)] = 1\n\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sorted(sublist))\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_sublists = {}\n    for i in list1:\n        if tuple(i) not in unique_sublists:\n            unique_sublists[tuple(i)] = 1\n        else:\n            unique_sublists[tuple(i)] += 1\n    return unique_sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i])\n        if sublist in count_dict:\n            count_dict[sublist] += 1\n        else:\n            count_dict[sublist] = 1\n    return count_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            combination = tuple(sorted(test_list[i] + test_list[j]))\n            if combination not in result:\n                result.append(combination)\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples as input and returns the list of combinations of sums with tuples in the given tuple list.\n    '''\n    combinations_list = []\n    \n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                for k in range(len(test_list)):\n                    if k!= i and k!= j:\n                        comb = combinations(test_list[i], 2)\n                        comb = list(comb)\n                        comb.append(test_list[j])\n                        comb = tuple(comb)\n                        combinations_list.append(comb)\n    \n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a set to store unique tuples in the test_list\n    unique_tuples = set(test_list)\n    # Find the total sum of all tuples in the test_list\n    total_sum = sum(test_list)\n    # Create a list to store the combinations\n    combinations_list = []\n    # Loop through each tuple in the unique_tuples set\n    for i, tuple1 in enumerate(unique_tuples):\n        # Loop through each tuple in the unique_tuples set except tuple1\n        for j in range(i+1, len(unique_tuples)):\n            tuple2 = tuple(unique_tuples[j])\n            # Check if tuple1 and tuple2 form a pair with the same elements\n            if tuple1 + tuple2 == total_sum:\n                # Add the pair to the combinations_list\n                combinations_list.append((tuple1, tuple2))\n    # Return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples and returns a list of tuples containing all possible combinations of sums\n    of two tuples from the list.\n    '''\n    sum_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            sum_list.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return sum_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Creating a list of tuples with only one element\n    # If the list contains tuples, the function will work for both tuples and lists\n    single_element_tuples = []\n    for item in test_list:\n        if isinstance(item, tuple):\n            if len(item) == 1:\n                single_element_tuples.append(item)\n\n    # Combining tuples and lists with combinations\n    all_combinations = []\n    for i in range(len(single_element_tuples)):\n        for j in combinations(single_element_tuples[i], 2):\n            all_combinations.append(j)\n\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Find the sum of all elements in the list\n    total_sum = sum(test_list)\n    # Create a set of tuples for faster comparison\n    test_set = set(test_list)\n    # Iterate through all possible combinations of sums\n    for comb in combinations(test_set, r=2):\n        # Calculate the sum of the tuples in the combination\n        sum_comb = sum(comb)\n        # Check if the sum matches the total sum\n        if sum_comb == total_sum:\n            # If it does, print the combination\n            print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    result = []\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if sum(test_list[i]) == sum(test_list[j]) == sum(test_list[k]):\n                    result.append(test_list[i] + test_list[j] + test_list[k])\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples as input and returns the combinations of sums with tuples in the given tuple list.\n    '''\n    # Find the total sum of the list of tuples\n    total_sum = sum(sum(tup) for tup in test_list)\n\n    # Using itertools.combinations() function to generate combinations of sums with tuples in the given tuple list\n    for combo in combinations(test_list, len(test_list)):\n        # Check if the sum of the current combination is equal to the total sum\n        if sum(combo) == total_sum:\n            print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # sort the list of tuples\n    test_list.sort()\n    \n    # find the sum of first element\n    first_sum = sum(test_list[0])\n    \n    # initialize an empty set to store all combinations\n    all_combinations = set()\n    \n    # iterate through all possible combinations of sums\n    for i in range(len(test_list)):\n        # initialize the current combination with the first element\n        current_combination = (test_list[i],)\n        # initialize the sum of the current combination\n        current_sum = test_list[i][0]\n        # find the remaining elements in the list\n        remaining_elements = test_list[i][1:]\n        # iterate through all possible remaining elements\n        for j in range(len(remaining_elements)):\n            # add the next element to the current combination and the sum\n            current_combination = current_combination + (remaining_elements[j],)\n            current_sum += remaining_elements[j]\n            # check if the sum is equal to the sum of first element\n            if current_sum == first_sum:\n                # add the current combination to the set of all combinations\n                all_combinations.add(tuple(current_combination))\n                # remove the first element from the current combination and sum to avoid duplicates\n                current_combination = (current_combination[1],)\n                current_sum = current_combination[0]\n    \n    # return the set of all combinations\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a set of all possible sums\n    sums = set()\n    for tup in test_list:\n        for num in tup:\n            sums.add(num)\n\n    # find all combinations of sums that sum to 0\n    combinations_of_sums = []\n    for i in range(len(sums)):\n        for j in range(i+1, len(sums)):\n            if sums[i] + sums[j] == 0:\n                combinations_of_sums.append((sums[i], sums[j]))\n\n    # create a dictionary to store the combinations of sums that sum to 0\n    result = {}\n    for tup in combinations_of_sums:\n        key = tuple(tup)\n        if key in result:\n            result[key] += 1\n        else:\n            result[key] = 1\n\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Calculate the number of divisors\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n\n    # Check if the count of divisors is even\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n            if n // i!= i:\n                count += 2\n    if n > 1:\n        count += 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nprint(\"The count of divisors is even:\", count_divisors(n)%2 == 0)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer n and returns True if the count of divisors is even, and False otherwise. \n    '''\n\n    # calculate the number of divisors\n    num_divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            num_divisors += 1\n\n    # check whether the count of divisors is even\n    if num_divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    if len(divisors) == len(set(divisors)):\n        return True\n    return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        count = 0\n        i = 1\n        while i <= int(math.sqrt(n)) + 1:\n            if n % i == 0:\n                count += 1\n                if n // i!= i:\n                    count += 1\n            i += 1\n        return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    # Calculate the count of divisors using a nested loop\n    divisors_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors_count += 1\n            if n // i!= i:\n                divisors_count += 1\n    # Check if the count of divisors is even\n    if divisors_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even or odd. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Calculate the count of divisors using the math.factorial() function\n    divisors = math.factorial(n)\n\n    # Check if the count of divisors is even or odd\n    if divisors % 2 == 0:\n        print(n, \"has even divisors.\")\n    else:\n        print(n, \"has odd divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors), divisors"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a Python function to check whether the count of divisors is even.\n\n    Args:\n        n (int): a positive integer\n\n    Returns:\n        bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n\n    # Calculate the number of divisors of n\n    divisors = [1]\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n\n    # Check if the count of divisors is even\n    count_div = 0\n    for d in divisors:\n        count_div += d\n\n    if count_div % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            sum += arr[i]\n        else:\n            sum += arr[i] + arr[i - 1]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    n = len(arr)\n    for i in range(1, n-1):\n        if i == 0 or i == n-1 or (i>0 and i<n-1 and arr[i]!= arr[i-1]):\n            current_sum = 0\n            for j in range(i, n):\n                if j == n-1 or (j>i and j<n-1 and arr[j]!= arr[j+1]):\n                    current_sum += arr[j]\n                else:\n                    break\n            total += current_sum\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2!= 0:\n                subarr = arr[i:j+1]\n                sum += sum(subarr)\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    total_sum = 0\n    start = 0\n    end = 0\n    \n    while end < n:\n        if end - start + 1 % 2 == 1:\n            total_sum += sum(arr[start:end+1])\n        end += 1\n        \n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    sum = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2 == 1:\n                sum += sum_subarray(arr, i, j)\n    return sum\n\ndef sum_subarray(arr, start, end):\n    \"\"\"\n    Helper function to sum odd length subarrays.\n    \"\"\"\n    return sum(arr[start:end+1])"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 % 2 == 1: # check if odd length\n                sum += sum_subarray(arr[i:j+1])\n    return sum\n\ndef sum_subarray(arr):\n    '''\n    Helper function to calculate sum of a subarray.\n    '''\n    return sum(arr)"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    sum_odd = 0\n\n    for i in range(len(arr)):\n        if i % 2!= 0:\n            sum_odd += arr[i]\n            count += 1\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    # Initialize a variable to store the sum of odd length subarrays\n    odd_sum = 0\n    \n    # Loop through all the subarrays of the array\n    for i in range(len(arr)):\n        # Check if the length of the subarray is odd\n        if i % 2 == 1:\n            # Add the odd length subarray to the sum\n            odd_sum += arr[i]\n            \n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all odd-length subarrays.\n    '''\n    sum = 0\n    \n    # loop through all possible subarrays of odd lengths\n    for i in range(1, len(arr) + 1, 2):\n        # calculate the sum of the subarray\n        subarray_sum = sum(arr[j:j+i] for j in range(len(arr) - i + 1))\n        # add the sum to the overall sum\n        sum += subarray_sum\n    \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    subarray_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            subarray_sum += arr[j-2]\n    return subarray_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    This function takes three integers representing the RGB values of a color and returns a tuple containing the HSV values.\n    \n    Hue is the angle around the color wheel (hue 0 is red, hue 120 is green, hue 240 is blue).\n    Saturation is the proportion of the color that is represented by the Hue.\n    Value is the intensity of the color.\n    '''\n    \n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    \n    h = 0.0\n    s = 0.0\n    v = max_color\n    \n    if max_color!= 0.0:\n        s = (max_color - min_color) / max_color\n        \n    if max_color == r:\n        h = (g - b) / (max_color - min_color)\n    elif max_color == g:\n        h = 2.0 + (b - r) / (max_color - min_color)\n    else:\n        h = 4.0 + (r - g) / (max_color - min_color)\n    \n    h = h / 6.0\n    \n    if h < 0.0:\n        h = h + 1.0\n        \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, and b to floating point numbers\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n    \n    # Find the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Find the range of the values\n    range_val = max_val - min_val\n    \n    # Calculate the saturation\n    if max_val == 0:\n        h = 0\n    elif range_val == 0:\n        h = 0\n    else:\n        h = round(60 * ((g - b) / range_val))\n        if h < 0:\n            h += 360\n    \n    # Calculate the value\n    if max_val == min_val:\n        s = 0\n    else:\n        s = range_val / max_val\n    \n    # Calculate the hue\n    if r == max_val:\n        h = (g - b) / range_val + (g < b) * 6\n    elif g == max_val:\n        h = (b - r) / range_val + 2\n    elif b == max_val:\n        h = (r - g) / range_val + 4\n    \n    # Convert the hue from degrees to radians\n    h = h / 60 * math.pi\n    \n    # Return the hsv values as a tuple\n    return (h, s, max_val)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert the RGB values to integers\n    r = int(r)\n    g = int(g)\n    b = int(b)\n\n    # Calculate the maximum and minimum RGB values\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum RGB values\n    delta = max_rgb - min_rgb\n\n    # Calculate the sum of the maximum and minimum RGB values\n    sum_rgb = max_rgb + min_rgb\n\n    # Calculate the value of the Hue (the color)\n    if max_rgb == min_rgb:\n        h = 0\n    elif max_rgb == r:\n        h = (60 * ((g - b) / delta)) % 360\n    elif max_rgb == g:\n        h = (60 * ((b - r) / delta)) + 120\n    else:\n        h = (60 * ((r - g) / delta)) + 240\n\n    # Calculate the value of the Saturation (how much the color varies)\n    if sum_rgb == 0:\n        s = 0\n    else:\n        s = (delta / sum_rgb) * 100\n\n    # Calculate the value of the Value (how bright the color is)\n    v = max_rgb\n\n    # Convert the HSV values to floats and return the result as a tuple\n    return (h / 360, s / 100, v / 255)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color value to HSV color value.\n\n    :param r: Red color value (int)\n    :param g: Green color value (int)\n    :param b: Blue color value (int)\n    :return: HSV color value as a tuple (hue, saturation, value)\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0 # Convert to 0-1 range\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    value = cmax\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g-b)/delta) % 6\n    elif cmax == g:\n        hue = (b-r)/delta + 2\n    else:\n        hue = (r-g)/delta + 4\n    hue *= 60\n    if hue < 0:\n        hue += 360\n    if value == 0:\n        saturation = 0\n    else:\n        saturation = delta/value\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    h = 0\n    s = 0\n    v = max_val\n    \n    if max_val!= 0:\n        s = (max_val - min_val) / max_val\n    \n    if max_val == min_val:\n        h = 0\n    else:\n        delta = max_val - min_val\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        h = h / 6\n        if h < 0:\n            h += 1\n            \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color.\n    '''\n    # Convert the RGB color values to float type\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Convert the RGB values to the RGB to HSV conversion formula\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n\n    if max_color == min_color:\n        h = 0\n    elif max_color == r:\n        h = (g - b) / delta\n    elif max_color == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    if max_color == 0:\n        s = 0\n    else:\n        s = delta / max_color\n\n    if max_color == r:\n        v = max_color\n    elif max_color == g:\n        v = max_color\n    else:\n        v = max_color\n\n    # Convert HSV values to int type\n    h = int(h * 60)\n    s = int(s * 255)\n    v = int(v * 255)\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert r,g,b to float values\n    r, g, b = map(float, (r, g, b))\n\n    # Find maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Find the difference between maximum and minimum values\n    diff = max_val - min_val\n\n    # Find the value of V which is the difference between maximum and minimum values\n    V = max_val\n\n    # If HSV color space is desired, divide difference between maximum and minimum values by 255\n    if V > 0:\n        if max_val == r:\n            H = (g - b) / diff\n        elif max_val == g:\n            H = 2 + (b - r) / diff\n        else:\n            H = 4 + (r - g) / diff\n\n        # Find H using modulo operator\n        if H < 0:\n            H += 6\n\n        # Convert H to HSV color space\n        H, S, V = H / 6, diff / V, V\n\n    return int(H * 255), int(S * 255), int(V * 255)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Normalize the input values between 0 and 255\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    # Find the minimum and maximum values in the rgb color space\n    min_val = min(r, min(g, b))\n    max_val = max(r, max(g, b))\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    # Calculate the hue value\n    if max_val == r:\n        hue = (g - b) / diff\n    elif max_val == g:\n        hue = 2 + (b - r) / diff\n    else:\n        hue = 4 + (r - g) / diff\n    \n    # Convert the hue value to an integer\n    hue = int(hue * 60)\n    \n    # Calculate the saturation and value values\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = diff / max_val\n    \n    value = max_val\n    \n    # Normalize the hue value between 0 and 360\n    if hue < 0:\n        hue = hue + 360\n    \n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to float values\n    r, g, b = float(r), float(g), float(b)\n\n    # Find the maximum and minimum values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Find the difference between max and min values\n    delta = max_value - min_value\n\n    # Find the HSV values\n    h = 0\n    s = 0\n    v = max_value\n\n    if max_value == 0:\n        s = 0\n    else:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        elif max_value == b:\n            h = 4 + (r - g) / delta\n\n        # Convert h to an angle in degrees\n        if h < 0:\n            h += 6\n\n        # Convert h to a fraction of 1\n        h /= 6\n\n        # Convert s to a fraction of 1\n        if delta == 0:\n            s = 0\n        else:\n            s = delta / max_value\n\n        # Convert v to a fraction of 1\n        v = max_value / 255\n\n    # Return the HSV values as a tuple\n    return (int(h * 255), int(s * 255), int(v * 255))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes in red, green, and blue values and returns the corresponding hue, saturation, and value.\n\n    :param r: the red value\n    :type r: int\n    :param g: the green value\n    :type g: int\n    :param b: the blue value\n    :type b: int\n    :return: the hue, saturation, and value\n    :rtype: tuple\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255  # convert to 0-1 scale\n    \n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    value = max_value\n    \n    if value == min_value:\n        return 0, 0, value\n    \n    delta = max_value - min_value\n    \n    if r == max_value:\n        hue = (g - b) / delta\n    elif g == max_value:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n    \n    hue *= 60\n    \n    if hue < 0:\n        hue += 360\n    \n    return round(hue), round(value * 100), round(value * 100)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    #initialize variables to store even and odd product\n    even_product = 1\n    odd_product = 1\n    \n    #loop through the list and multiply the even and odd numbers\n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    \n    #return the product of even and odd numbers\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    '''\n    Function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_num += i\n        else:\n            odd_num += i\n    product = even_num * odd_num\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    \n    for i in list1:\n        if i % 2 == 0:\n            even *= i\n        else:\n            odd *= i\n            \n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    # Initialize a variable to store the product\n    product = 1\n\n    # Iterate through the list and multiply even and odd numbers together\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n        else:\n            product *= num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 1\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n            \n        if num!= 0:\n            product *= (even_num * odd_num)\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n\n    product = even_num * odd_num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    '''\n    Find the product of the first even and first odd numbers of a list.\n    '''\n    # Find the index of the first even number\n    even_idx = next((i for i, x in enumerate(lst) if x % 2 == 0), None)\n    # If there are no even numbers, return None\n    if even_idx is None:\n        return None\n    \n    # Find the index of the first odd number\n    odd_idx = next((i for i, x in enumerate(lst) if x % 2 == 1), None)\n    # If there are no odd numbers, return None\n    if odd_idx is None:\n        return None\n    \n    # Calculate the product\n    return lst[even_idx] * lst[odd_idx]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            break\n    \n    if even_count > 0 and odd_count > 0:\n        product = list1[0] * list1[1]\n    \n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define the tuple format\n    tup_format = \"({},{})\"\n    # Split the string based on the tuple format\n    tup_list = test_str.split(tup_format)\n    # Define the tuple element types\n    tup_types = (int,) * len(tup_list[0].split(','))\n    # Convert each tuple element to an integer\n    int_tup = tuple(map(int, tup_list[0].split(',')))\n    # Convert the integer tuple to a tuple string\n    int_tup_str = ','.join(map(str, int_tup))\n    # Return the tuple string\n    return int_tup_str"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def is_valid_int(s):\n        try:\n            int(s)\n            return True\n        except ValueError:\n            return False\n\n    result = []\n    for elem in test_str:\n        if is_valid_int(elem):\n            result.append(int(elem))\n        else:\n            result.append(elem)\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert string to list of integers\n    test_list = list(map(int, test_str.split(',')))\n    # Convert list of integers to tuple\n    result_tuple = tuple(test_list)\n    return result_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    lst = []\n    for item in test_str:\n        if item.isdigit():\n            lst.append(int(item))\n        elif item in ('(', ')'):\n            continue\n        else:\n            return \"Invalid input\"\n    return tuple(lst)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # Convert string to tuple\n    test_tuple = eval(test_str)\n\n    # Convert tuple to integer tuple\n    int_tuple = tuple([int(num) for num in test_tuple])\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = tuple(map(int, test_str.split()))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Check if the input is a tuple string\n    if isinstance(test_str, tuple):\n        # Convert the tuple string to integer tuple\n        new_tuple = tuple(int(x) for x in test_str)\n        return new_tuple\n    else:\n        # Raise an error if the input is not a tuple string\n        raise ValueError(\"Input must be a tuple string.\")"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_list = [int(x) for x in test_str.split(',')]\n    return tuple(tuple_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Initialize an empty list to hold the converted integers\n    converted_ints = []\n\n    # Iterate through the list of words\n    for word in words:\n        # Check if the word is an integer\n        try:\n            # Convert the word to an integer and append it to the converted_ints list\n            converted_ints.append(int(word))\n        except ValueError:\n            # If the word is not an integer, print an error message and skip it\n            print(\"Error: {} is not an integer\".format(word))\n\n    # Return the converted_ints list as an integer tuple\n    return tuple(converted_ints)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    new_tuple = []\n    for i in test_str:\n        if i.isdigit():\n            new_tuple.append(int(i))\n        else:\n            return None\n    return tuple(new_tuple)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index if index < len(a) and a[index] == x else index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use the bisect_right function from the bisect module to find the right insertion point for x in a.\n    i = bisect.bisect_right(a, x)\n    # If x is greater than all elements in a, i will be equal to the length of a.\n    # In this case, we just return i, which is the right insertion point.\n    if i == len(a):\n        return i\n    # If x is greater than all elements in a except for the first element,\n    # then i will be the index of the first element that is greater than x.\n    elif i > 0 and a[i - 1] < x:\n        return i\n    # If x is greater than all elements in a except for the last element,\n    # then i will be the index of the last element that is greater than x.\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    This function takes in a sorted list 'a' and a value 'x' and returns the index of the right insertion point for the value in 'a'.\n\n    The right insertion point is defined as the smallest index i such that a[i] >= x. If such an index does not exist,\n    the function returns the length of the list.\n\n    Example:\n    >>> a = [1, 3, 4, 6, 8, 9, 11, 13]\n    >>> right_insertion(a, 7)\n    6\n    '''\n\n    # Use binary search to find the smallest index i such that a[i] >= x\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if a[mid] >= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    # Return the index of the right insertion point\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the right insertion point\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0 or a[index-1] < x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    # Use the binary search algorithm to find the correct insertion point\n    index = bisect.bisect_right(a, x)\n    # Check if the value already exists in the list\n    if index < len(a) and a[index] == x:\n        return index\n    # Otherwise, return the index where the value should be inserted\n    return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n\n    # Use bisect to find the insertion point for the value in the sorted array\n    index = bisect.bisect_right(a, x)\n\n    # If the value is less than the last element of the sorted array\n    if index < len(a) and a[index] == x:\n        return index\n\n    # If the value is greater than the last element of the sorted array\n    if index == len(a):\n        return index + 1\n\n    # If the value is between two elements in the sorted array\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Locate the insertion point using bisect_right function\n    index = bisect.bisect_right(a, x)\n\n    # If the value is greater than or equal to the last element, return the length of the list\n    if index == len(a):\n        return len(a)\n\n    # If the value is less than the first element, return 0\n    elif index == 0:\n        return 0\n\n    # If the value is greater than the element at the index, return the index\n    elif a[index-1] < x:\n        return index\n\n    # If the value is greater than the element at the index-1, return the index-1\n    else:\n        return index-1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'[ab]{2}b'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(b{3})')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found.\""
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(b){3}')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[^b]*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'[ab]+b'\n    result = re.findall(pattern, text)\n    if len(result) > 0:\n        print(\"The string contains the pattern 'ab' followed by three 'b':\")\n        print(result)\n    else:\n        print(\"The string does not contain the pattern 'ab' followed by three 'b'.\")"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def text_match_three(text):\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Split the string into a list of characters\n    char_list = list(test_str)\n    # Iterate through the list and append each character to the new tuple\n    new_tuple = tuple(char_list)\n    # Add the first element of the list to the new tuple\n    new_tuple = (test_list[0],) + new_tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple and concatenate it with the string\n    new_tuple = tuple(test_list) + (test_str,)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the two lists and convert it to a tuple\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple_list = list(test_list)\n    new_tuple_list.insert(1, test_str)\n    new_tuple = tuple(new_tuple_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(test_list[i] + test_str)\n    return tuple(new_list)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and i % 2!= 0:\n            print(\"The number at the even position is:\", nums[i])\n            return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:])) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Iterate through the list\n    for i in range(len(nums)):\n\n        # Check if the number at the even index is even\n        if nums[i] % 2 == 0:\n            continue\n\n        # If the number is odd, check if it exists at an odd index\n        for j in range(i+1, len(nums), 2):\n            if nums[j] % 2 == 0:\n                print(\"Index {} contains an even number, but odd index {} contains an odd number.\".format(i, j))\n                return False\n\n        # If the number is even, check if it exists at an odd index\n        for j in range(i+1, len(nums), 2):\n            if nums[j] % 2 == 0:\n                print(\"Index {} contains an even number, but odd index {} contains an odd number.\".format(i, j))\n                return False\n\n    # If the loop completes without any false positives, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Initialize a counter variable for even positions\n    even_count = 0\n    \n    # Loop through the list of numbers and check if the current number is even\n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n    \n    # Check if all even positions have even numbers\n    if even_count == len(nums):\n        print(\"All even positions have even numbers\")\n    else:\n        print(\"Not all even positions have even numbers\")"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Initialize an empty list to store even index positions\n    even_positions = []\n    \n    # Loop through the given list\n    for i in range(len(nums)):\n        # If the current index is even, add it to the even_positions list\n        if i % 2 == 0:\n            even_positions.append(i)\n    \n    # Loop through the even_positions list and check if every number in the list is even\n    for position in even_positions:\n        if nums[position] % 2!= 0:\n            # If any number is not even, return False\n            return False\n    \n    # If all numbers are even, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count += nums[i]\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    \n    # Check even indices for even numbers\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            for j in range(i, len(nums)):\n                if nums[j] % 2 == 0:\n                    even_count += 1\n                    break\n    \n    # Check if every even index contains even numbers\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    even_count = 0\n    odd_count = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if not all(x % 2 == 0 for x in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return list(filter(lambda x: not isinstance(x, tuple), test_tup))"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    return [tup for tup in test_tup if not isinstance(tup, tuple)]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                new_list.append(sub_item)\n        else:\n            new_list.append(item)\n    return tuple(new_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function removes the nested tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return [remove_nested(elem) for elem in test_tup]\n    elif isinstance(test_tup, list):\n        return [remove_nested(elem) for elem in test_tup]\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                new_tup.append(subitem)\n        else:\n            new_tup.append(item)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # check if the input is a tuple\n    if isinstance(test_tup, tuple):\n        # if it is a tuple, loop through each item in the tuple\n        for item in test_tup:\n            # if the item is a tuple, recursively call the function on it\n            if isinstance(item, tuple):\n                remove_nested(item)\n            # if the item is not a tuple, remove it from the original tuple\n            else:\n                test_tup = tuple(i for i in test_tup if i!= item)\n        # return the modified tuple\n        return test_tup\n    # if the input is not a tuple, return it as is\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) == tuple:\n        new_tup = []\n        for item in test_tup:\n            if type(item)!= tuple:\n                new_tup.append(item)\n        return new_tup\n    else:\n        return test_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list as input and returns the number of lists in the list.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n            count += count_list(sublist)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list: \n        if isinstance(i, list): \n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list as input and returns the count of lists in the list.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(arr) - 1 and arr[i] < x:\n        i += 1\n    if i == len(arr) - 1:\n        return -1\n    elif arr[i] == x:\n        return i\n    else:\n        j = 0\n        while j < i and arr[j] == x:\n            j += 1\n        return j - 1\n"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # initializing the left and right pointers\n    left = 0\n    right = len(arr) - 1\n    \n    # loop until the left pointer is less than or equal to the right pointer\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # if the element is present at the middle itself, return the middle index\n        if arr[mid] == x:\n            return mid\n        \n        # if the element is smaller than the element at the middle\n        elif arr[mid] < x:\n            left = mid + 1\n        \n        # if the element is greater than the element at the middle\n        else:\n            right = mid - 1\n    \n    # if the element is not present in the array\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Args:\n        arr: List of sorted elements.\n        x: Element to search for.\n\n    Returns:\n        Index of last occurrence of x in arr.\n\n    Raises:\n        TypeError: If arr is not a list or x is not a numeric element.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"arr should be a list.\")\n    if not isinstance(x, (int, float)):\n        raise TypeError(\"x should be a numeric element.\")\n\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return right + 1 if arr[right] == x else right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the left and right pointers of the array\n    left,right = 0,len(arr)-1\n    \n    # While the left pointer is less than the right pointer\n    while left < right:\n        # Calculate the midpoint of the array\n        mid = (left+right)//2\n        \n        # If the element at the midpoint is equal to the given element\n        if arr[mid] == x:\n            # Initialize the count variable\n            count = 0\n            \n            # Traverse the array from the midpoint to the left to find the element\n            while count < mid and arr[left+count]!= x:\n                count += 1\n            \n            # Return the count of the element in the array\n            return left+count\n        \n        # If the element at the midpoint is greater than the given element\n        elif arr[mid] < x:\n            # Move the left pointer to the right of the midpoint\n            left = mid+1\n        \n        # If the element at the midpoint is less than the given element\n        else:\n            # Move the right pointer to the left of the midpoint\n            right = mid-1\n    \n    # If the element is not found in the array\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in two parameters: an array of numbers and an element x.\n    The function returns the last position of the element x in the array.\n    If the element x is not found in the array, the function returns -1.\n    \"\"\"\n    # create a list of indices to search through\n    indices = list(range(len(arr)))\n    \n    # find the index of the last occurrence of x\n    try:\n        index = indices[arr.index(x, len(arr) - 1, -1)]\n    except ValueError:\n        return -1\n    \n    # return the index of the last occurrence of x\n    return index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    This function takes in two parameters: the sorted array and the element to be searched for.\n    It returns the last position of the element in the array. If the element is not present in the array, it returns -1.\n    '''\n    # Initialize the last position to -1\n    last_pos = -1\n    \n    # Iterate through the array using a loop\n    for i in range(len(arr)):\n        # If the current element is equal to the search element, update the last position\n        if arr[i] == x:\n            last_pos = i\n    \n    # Return the last position of the element\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not arr:\n        return -1\n\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    if low == len(arr) or arr[low]!= x:\n        return -1\n    else:\n        return low"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Args:\n        arr (list): sorted array\n        x (int): element to search for\n\n    Returns:\n        int: index of the last occurrence of x in arr\n\n    Raises:\n        TypeError: if arr is not a list\n        ValueError: if x is not in arr\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"arr must be a list\")\n    if x not in arr:\n        raise ValueError(\"x must be in arr\")\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr,x):\n    \"\"\"\n    This function takes in a sorted array and an element x and returns the last position of x in the array.\n\n    Args:\n    arr: a sorted array.\n    x: an element in the array.\n\n    Returns:\n    the last position of x in the array. If x is not in the array, returns -1.\n    \"\"\"\n    # Initialize the left and right pointers to the first and last indices of the array\n    left, right = 0, len(arr)-1\n\n    # Find the index of x using binary search\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            # If x is found, then we need to find the last occurrence of x in the array\n            left_occurrence = mid\n            while left_occurrence > 0 and arr[left_occurrence-1] == x:\n                left_occurrence -= 1\n            return left_occurrence\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If x is not found in the array, then return -1\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a)(.*?)(?=\\sb)'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.match(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    # Define the pattern to match the string with 'a' followed by anything, ending in 'b'\n    pattern = r'a[^b]*b$'\n\n    # Use the re.search() method to search for the pattern in the input text\n    match = re.search(pattern, text)\n\n    # If a match is found, return the matched string\n    if match:\n        return match.group()\n\n    # If no match is found, return None\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\b[a]+[b]$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total += i\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize a variable to store the sum of odd numbers\n    sum_odd_num = 0\n\n    # loop through the range of natural numbers between 1 and n\n    for i in range(1, n+1):\n        # if the number is odd, add it to the sum_odd_num variable\n        if i % 2!= 0:\n            sum_odd_num += i\n    \n    # return the sum of odd numbers\n    return sum_odd_num"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # initialize the sum variable to 0\n    total = 0\n\n    # loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is odd\n        if i % 2 == 1:\n            # add the number to the total\n            total += i\n    \n    # return the total sum\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if n <= 0:\n        print(\"Invalid input! Please enter a positive integer.\")\n        return\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through all natural numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the current number is odd\n        if i % 2 == 1:\n            # Add the current number to the sum\n            sum += i\n    \n    # Return the sum of all odd natural numbers within the range\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    \n    sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n        \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # take input for range l and r\n    l, r = map(int, input(\"Enter range l and r: \").split())\n\n    # initialize sum to 0\n    total = 0\n\n    # loop through odd natural numbers within the range\n    for num in range(l, r+1, 2):\n        # add the odd number to the total sum\n        total += num\n\n    # print the final sum\n    print(\"The sum of all odd natural numbers between\", l, \"and\", r, \"is\", total)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0: # checks if i is odd\n            sum += i # adds i to the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 0, n - 1\n    total_sum = 0\n    for i in range(l, r + 1):\n        if i % 2!= 0:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize a variable to hold the sum of odd natural numbers\n    sum = 0\n\n    # loop through the range n (inclusive)\n    for i in range(1, n+1, 2):\n        # add the current odd number to the sum\n        sum += i\n\n    # return the sum of odd natural numbers\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initialize a variable to store the sum\n    total = 0\n    # loop through the array and add each element to the sum\n    for num in arr:\n        total += num\n    # return the total sum\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the given number to binary string\n    binary = format(n, '032b')\n    # get the number of bits in the binary string\n    num_bits = len(binary)\n    # calculate the number of bits to rotate left\n    num_rotated_bits = num_bits - d\n    # convert the number of bits to rotate left to binary string\n    rotated_binary = format(num_rotated_bits, '032b')\n    # concatenate the binary strings and split the result at the rotated bits\n    result = binary[:rotated_binary] + binary[rotated_binary:]\n    # convert the result back to an integer\n    result = int(result, 2)\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits that need to be rotated\n    rotated_bits = d % 32\n    \n    # Calculate the number of bits to shift left\n    shift_amount = 32 - rotated_bits\n    \n    # Shift the bits to the left by the calculated amount\n    shifted_bits = n << shift_amount\n    \n    # Calculate the number of bits to shift right\n    shift_amount = rotated_bits\n    \n    # Shift the bits to the right by the calculated amount\n    rotated_bits_right_shifted = shifted_bits >> shift_amount\n    \n    # Combine the rotated bits with the right shifted bits\n    rotated_bits_combined = rotated_bits_right_shifted | n\n    \n    # Return the rotated bits combined with the original number\n    return rotated_bits_combined"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the given number to binary\n    binary_num = bin(n)[2:]\n    # If the number of bits is less than d, we need to add leading zeros\n    if len(binary_num) < d:\n        binary_num = \"0\" * (d - len(binary_num)) + binary_num\n    # Calculate the shifted bits\n    shifted_bits = binary_num[-d:]\n    # Calculate the rotation bits\n    rotation_bits = binary_num[-d - 1]\n    # Rotate the bits left by d bits\n    rotated_bits = rotation_bits + shifted_bits\n    # Convert the rotated bits back to decimal\n    rotated_num = int(rotated_bits, 2)\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function rotates a given number n left by d bits. It assumes that the number is 32 bit.\n    \"\"\"\n    # calculate the number of bits to be rotated\n    num_bits = 32\n    d = d % num_bits\n\n    # calculate the number of bits to be shifted\n    num_shift = num_bits - d\n\n    # calculate the final result\n    result = (n << d) | (n >> num_shift)\n\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d # shift left by d bits\n    n = n >> 32 # discard the upper 32 bits\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Create a bit mask to get the last d bits\n    mask = (1 << d) - 1\n    # Shift the number to the left by d bits\n    n = n << d\n    # Move the bits to the right by (32-d) bits\n    n = n >> (32-d)\n    # Return the rotated number\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to binary\n    bin_str = bin(n)[2:]\n    # Pad the binary string with leading zeros if necessary\n    bin_str = '0'*(32-len(bin_str)) + bin_str\n    # Calculate the new binary string after rotating left by d bits\n    new_bin_str = bin_str[-d:] + bin_str[:-d]\n    # Convert the new binary string back to an integer\n    new_n = int(new_bin_str, 2)\n    return new_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = 2**(32 - d) - 1\n    rotated = (n << d) & mask | (n >> (32 - d))\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # extract the last d bits of n\n    last_d_bits = n & ((1 << d) - 1)\n    # shift the remaining bits to the left by d bits\n    n = n >> d\n    # add the last d bits to the rotated value\n    n = n | last_d_bits\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number.\n    Assumes the number is 32 bit.\n    '''\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n    # Calculate the number of bits to rotate\n    num_bits_to_rotate = d % 32\n    # Calculate the number of bits to pad the left side of the binary string with zeros\n    num_zeros_to_pad = 32 - num_bits_to_rotate\n    # Pad the left side of the binary string with zeros\n    padded_binary_str = '0' * num_zeros_to_pad + binary_str\n    # Convert the padded binary string back to decimal\n    rotated_binary_str = int(padded_binary_str, 2)\n    # Return the rotated binary string as a decimal number\n    return rotated_binary_str"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use the `re.sub()` function to replace all whitespace characters with an empty string\n    text = re.sub('\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use the re.sub() method to remove all whitespaces from the string\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Using regular expression to remove all whitespaces\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # replace all spaces with empty string\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # replace all whitespaces with an empty string\n    text = re.sub('\\s+', '', text)\n    return text"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the count of the number of equal integers in the three integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if y == x!= z:\n        count += 1\n    if z == x!= y:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if y!= x == z:\n        count += 1\n    if z!= x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(3):\n        for j in range(3):\n            if i!= j and i!= z and j!= z:\n                if x == y == z:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    # initialize the count variable to 0\n    count = 0\n    \n    # loop through the three given integers\n    for i in (x, y, z):\n        # check if the integer is equal to its neighbor\n        if i == x or i == y or i == z:\n            count += 1\n    \n    # return the final count\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i == 0 or arr[i-1] < arr[i]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Find the largest element in the array\n    max_ele = max(arr)\n\n    # Initialize count to 0\n    count = 0\n\n    # Traverse through the array\n    for i in range(n):\n        # If the current element is smaller than the maximum element,\n        # then it means that the array is sorted\n        if arr[i] < max_ele:\n            break\n\n        # If the current element is equal to the maximum element,\n        # then it means that the array needs atleast one rotation\n        elif arr[i] == max_ele:\n            count += 1\n\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Sort the array in ascending order\n    arr.sort()\n    # Count the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(n-1):\n        # If the current element is greater than the next element, then there is a rotation\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    # find the maximum element in the array\n    max_val = max(arr)\n    # loop through all the possible rotations of the array\n    for i in range(n):\n        # check if the current element is smaller than the maximum element\n        if arr[i] < max_val:\n            # check if the next element is smaller than the current element\n            if arr[i+1] < arr[i]:\n                # increment the count if both conditions are met\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # If array is already sorted or is a palindrome, return 0\n    if is_sorted(arr) or is_palindrome(arr):\n        return 0\n\n    # Count rotations required to generate a sorted array\n    rotations = 0\n    for i in range(n):\n        # If the element at index i is greater than the element at index i+1, rotate the array by 1\n        if arr[i] > arr[i+1]:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            rotations += 1\n\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    # Initialize variables\n    left, right = 0, len(arr) - 1\n    count = 0\n\n    # Find the index of the middle element\n    mid = (left + right) // 2\n\n    # Traverse the array from both ends\n    while left <= right:\n        # If the left element is smaller than the middle element, the array is sorted\n        if arr[left] < arr[mid]:\n            count += right - left\n            left += 1\n        # If the right element is larger than the middle element, the array is sorted\n        elif arr[right] > arr[mid]:\n            count += right - left\n            right -= 1\n        # If the middle element is smaller than both the left and right elements, the array is not sorted\n        else:\n            left += 1\n            right -= 1\n\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n\n    # If the array is already sorted, return 0\n    if all(arr[i] <= arr[i + 1] for i in range(n - 1)):\n        return 0\n\n    # If the array is already sorted in reverse order, return 0\n    if all(arr[i] >= arr[i + 1] for i in range(n - 1)):\n        return 0\n\n    # Find the first index where the array is unsorted\n    for i in range(n - 2):\n        if arr[i] > arr[i + 1]:\n            return count\n\n    # Find the last index where the array is unsorted\n    for i in range(n - 2, -1, -1):\n        if arr[i] > arr[i + 1]:\n            return count + 1\n\n    return count + 1\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize count variable\n    count = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n\n        # If the current element is already the maximum, no more rotations are required\n        if i == len(arr) - 1:\n            break\n\n        # If the next element is greater than the current element, we need to rotate the array\n        if arr[i] > arr[i+1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n\n    # Traverse through all possible permutations of the array\n    for i in range(n):\n        # Swap the first element with the last element of the current permutation\n        arr[i], arr[n-1] = arr[n-1], arr[i]\n\n        # Traverse through all possible permutations of the array after the first swapping\n        for j in range(i+1, n):\n            # Swap the second element with the second to last element of the current permutation\n            arr[j], arr[n-2] = arr[n-2], arr[j]\n\n            # Traverse through all possible permutations of the array after the second swapping\n            for k in range(j+1, n):\n                # Swap the third element with the third to last element of the current permutation\n                arr[k], arr[n-3] = arr[n-3], arr[k]\n\n                # Traverse through all possible permutations of the array after the third swapping\n                for l in range(k+1, n):\n                    # Check if the current permutation is already sorted\n                    if arr[i] <= arr[j] <= arr[k] <= arr[l]:\n                        count += 1\n\n                    # Reverse the first three elements\n                    arr[i], arr[j], arr[k] = arr[k], arr[j], arr[i]\n\n                    # Check if the reversed permutation is already sorted\n                    if arr[i] <= arr[j] <= arr[k] <= arr[l]:\n                        count += 1\n\n                    # Reverse the first two elements\n                    arr[i], arr[j] = arr[j], arr[i]\n\n                    # Check if the reversed permutation is already sorted\n                    if arr[i] <= arr[j] <= arr[k] <= arr[l]:\n                        count += 1\n\n                    # Reverse the first element\n                    arr[i] = arr[i], arr[j]\n\n                    # Check if the reversed permutation is already sorted\n                    if arr[i] <= arr[j] <= arr[k] <= arr[l]:\n                        count += 1\n\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if the given number is a perfect square, False otherwise.\n    \"\"\"\n    x = n\n    y = n // 2 + 1\n    while x!= y:\n        x = (x + y) // 2\n        y = n // x + x\n    return x == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Convert the number to integer\n    n = int(n)\n    \n    # Initialize a variable to store the square of the number\n    square = 0\n    \n    # Loop till the square becomes greater than the number\n    while square <= n:\n        # Add the square of the number to the variable\n        square = square * square\n        # Check if the square is equal to the number\n        if square == n:\n            return True\n    \n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # calculate the square root of n\n    sqrt_n = n ** 0.5\n\n    # check if the square root is an integer\n    if sqrt_n.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n    # check if n is a perfect square\n    square = 0\n    while square * square <= n:\n        square += 1\n    if square * square!= n:\n        return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if n is less than or equal to 0\n    if n <= 0:\n        return False\n    \n    # check if n is divisible by 4\n    if n % 4 == 0:\n        return True\n    \n    # check if n is divisible by any number less than or equal to sqrt(n)\n    for i in range(5, int(n ** 0.5) + 1, 2):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    \n    # if all the above conditions are not satisfied, then n is a perfect square\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # calculate the square root of the number\n    sqrt_n = int(n ** 0.5)\n    # check if the square root is an integer\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    This function will check whether the given number is a perfect square or not.\n    '''\n    # Initialize the square root variable as 0\n    sqrt = 0\n    # Initialize the square variable as 0\n    square = n\n    \n    # Loop until the square is less than or equal to the square root\n    while square <= sqrt:\n        # If the square is equal to the square root, return True\n        if square == sqrt:\n            return True\n        # Add half the square to the square variable and increment the square variable\n        square = square + (square // 2)\n        # Update the square root variable\n        sqrt = int(square ** 0.5)\n    \n    # If the loop completes, the number is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if n is a positive integer\n    if n < 1:\n        return False\n    \n    # Calculate the square root of n\n    root = 0\n    x = n\n    while x > 0:\n        root = root + x/x\n        x = x/2\n        \n    # Check if root is an integer\n    if root == int(root):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num \n    if product % 2 == 0: \n        print(\"The product of numbers in the list is even.\") \n    else: \n        print(\"The product of numbers in the list is odd.\") "
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # check if the list is empty\n    if len(arr) == 0:\n        return True\n    \n    # initialize variables for the product and the flag for evenness\n    product = arr[0]\n    evenness = True\n    \n    # iterate over the list and update the variables\n    for i in range(1, len(arr)):\n        product *= arr[i]\n        \n        # check if the product is even or odd\n        if product % 2!= 0:\n            evenness = False\n            \n    # return the evenness flag\n    return evenness"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    # check if the list is empty or not\n    if not arr:\n        return \"Empty list!\"\n    \n    # initialize variables to keep track of the product and even flag\n    product = 1\n    even_flag = True\n    \n    # iterate over the list\n    for num in arr:\n        # check if the product is even\n        if product % 2 == 0:\n            even_flag = True\n        else:\n            even_flag = False\n            \n        # check if the current number is even and update the product accordingly\n        if num % 2 == 0:\n            product *= num\n        else:\n            product *= (num // 2) + 1\n            \n    # check if the product is even\n    if even_flag:\n        return \"The product is even.\"\n    else:\n        return \"The product is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        print(f\"The product of the numbers in the list is even: {product}\")\n    else:\n        print(f\"The product of the numbers in the list is odd: {product}\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    if len(arr) < 2:\n        return \"The length of the array should be greater than or equal to 2.\"\n    \n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return \"The product of the numbers in the array is even.\"\n    else:\n        return \"The product of the numbers in the array is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    result = []\n\n    for sublist in lists:\n        if sum(sublist) > max_sum:\n            max_sum = sum(sublist)\n            result = sublist\n\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    \n    max_sum = max(lists[0])\n    max_list = lists[0]\n    \n    for i in range(1, len(lists)):\n        new_sum = max_sum + lists[i][0]\n        if new_sum > max_sum:\n            max_sum = new_sum\n            max_list = lists[i]\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for l in lists:\n        current_sum = sum(l)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = l\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize variables to store the maximum sum and the corresponding list\n    max_sum = -float('inf')\n    max_list = None\n\n    # Loop through each list in the input list of lists\n    for lst in lists:\n\n        # Calculate the sum of the elements in the list\n        sum_lst = sum(lst)\n\n        # If the sum is greater than the current maximum sum, update the variables\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n\n    # Return the list that has the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables for the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Loop over all the lists in the input list of lists\n    for lst in lists:\n        # Loop over all the elements in the list\n        for elem in lst:\n            # Add the element to the current sum\n            current_sum += elem\n            \n            # Check if the current sum is greater than the maximum sum so far\n            if current_sum > max_sum:\n                # Update the maximum sum\n                max_sum = current_sum\n                \n    # Create a new list with only the elements from the input list of lists whose sum is equal to the maximum sum\n    result = []\n    for lst in lists:\n        for elem in lst:\n            if current_sum == max_sum:\n                result.append(elem)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize variables\n    max_sum = float('-inf')\n    max_list = []\n\n    # loop through all lists\n    for lst in lists:\n        # compute the sum of elements\n        lst_sum = sum(lst)\n\n        # check if the sum is greater than the current max\n        if lst_sum > max_sum:\n            # update max sum and max list\n            max_sum = lst_sum\n            max_list = lst\n\n    # return the max list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for sublist in lists:\n        sum_sublist = sum(sublist)\n        if sum_sublist > max_sum:\n            max_sum = sum_sublist\n            max_list = sublist\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        total = 0\n        for j in range(len(lists[i])):\n            total += lists[i][j]\n        if total > max_sum:\n            max_sum = total\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            for k in range(len(lists[i][j])):\n                max_sum = max(max_sum, lists[i][j][k])\n                max_list.append(lists[i][j][k])\n    return max_list\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables to store the maximum run and the current run\n    max_run = 0\n    current_run = 1\n    \n    # Iterate through the characters in the string\n    for char in test_str:\n        # If the character is uppercase, increment the current run\n        if char.isupper():\n            current_run += 1\n        # If the character is not uppercase, reset the current run to 1\n        else:\n            current_run = 1\n        \n        # If the current run is greater than the maximum run, update the maximum run\n        if current_run > max_run:\n            max_run = current_run\n    \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables to keep track of current run and maximum run\n    current_run = 0\n    max_run = 0\n    \n    # iterate over each character in the string\n    for i in range(len(test_str)):\n        # if the current character is uppercase and the previous character was lowercase, increment the current run count\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            current_run += 1\n        # if the current character is not uppercase, reset the current run count to 0\n        else:\n            current_run = 0\n        \n        # if the current run count is greater than the maximum run count, update the maximum run count\n        if current_run > max_run:\n            max_run = current_run\n            \n    # return the maximum run count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    run_length = 0\n    current_run = []\n\n    for char in test_str:\n        if char.isupper():\n            if len(current_run) > run_length:\n                run_length = len(current_run)\n            current_run = []\n        else:\n            current_run.append(char)\n\n    if len(current_run) > run_length:\n        run_length = len(current_run)\n\n    return run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 1\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 1\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Convert the string to lowercase\n    test_str = test_str.lower()\n\n    # Initialize variables for current run and maximum run\n    current_run = 1\n    max_run = 0\n\n    # Loop through the string\n    for i in range(len(test_str)):\n\n        # If the current character is uppercase\n        if test_str[i] == test_str[i].upper():\n\n            # Increment the current run counter\n            current_run += 1\n\n            # If the current run is greater than the maximum run\n            if current_run > max_run:\n\n                # Update the maximum run\n                max_run = current_run\n\n        # If the current character is not uppercase\n        else:\n\n            # Reset the current run counter\n            current_run = 1\n\n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_run = 0\n    start = 0\n    end = 0\n    \n    # loop through each character in the string\n    for i in range(len(test_str)):\n        # if the current character is uppercase and its a new run, update max_run and start\n        if test_str[i].isupper() and (i == len(test_str)-1 or not test_str[i+1].isupper()):\n            end = i\n            max_run = max(max_run, end-start+1)\n            start = i+1\n    \n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    upper_count = 0\n    max_run = 0\n    start = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            upper_count += 1\n            if upper_count > max_run:\n                max_run = upper_count\n                start = i - max_run + 1\n        else:\n            upper_count = 0\n\n    return test_str[start:start + max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # create an empty list to store the indices of the start and end of each run of uppercase characters\n    runs = []\n    # loop through each character in the string\n    for i in range(len(test_str)):\n        # check if the character is uppercase\n        if test_str[i].isupper():\n            # if it is, check if it's the start of a run\n            if not runs:\n                # if it is, add the index to the list of runs\n                runs.append(i)\n            # if it's not the start of a run, check if it's the end of a run\n            else:\n                # if it is, check if the length of the run is longer than the current maximum run\n                if i - runs[-1] > len(runs[-1]):\n                    # if it is, update the maximum run\n                    runs[-1] = i\n                # if it's not, just update the end of the run\n                else:\n                    runs.append(i)\n    # return the maximum run of uppercase characters as a string\n    return ''.join(test_str[runs[0]:runs[-1]+1])"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    max_run = ''\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_run = test_str[i]\n        else:\n            count = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    prev_char = None\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the current character is uppercase, increment the run count\n        if char.isupper():\n            current_run += 1\n        # If the current character is not uppercase, reset the run count to 0\n        else:\n            current_run = 0\n\n        # If the current run count is greater than the maximum run count so far, update the maximum run count\n        if current_run > max_run:\n            max_run = current_run\n            prev_char = char\n\n    # If the maximum run count is still 0, return None\n    if max_run == 0:\n        return None\n\n    # If there is a previous character, return the maximum run followed by that character\n    return max_run, prev_char\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    # Loop through the list of numbers and check if each number is odd\n    for num in nums:\n        if num % 2 == 1:\n            # If an odd number is found, return it\n            return num\n    # If no odd numbers are found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    for i in test_tup:\n        if K in i:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if any(elem in test_tup for elem in K):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if K in test_tup[i]:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes in a tuple of lists as test_tup and the k value as K.\n    It returns True if the tuple contains the k, False otherwise.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) < K:\n        return False\n    elif len(test_tup) == K:\n        return True\n    else:\n        for i in range(len(test_tup)-1):\n            if test_tup[i] > test_tup[i+1]:\n                return False\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if (K, K) in test_tup or (K, K) not in test_tup:\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for num in test_tup:\n        if K in num:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples do not have the same length.\"\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same number of elements.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]