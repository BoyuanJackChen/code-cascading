[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for num in test_tup1:\n        if num in test_tup2:\n            shared.append(num)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_list.append(i)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Initialize variables for the shared elements and the size of both lists\n    shared_elements = []\n    size1 = len(test_tup1)\n    size2 = len(test_tup2)\n\n    # Loop through both lists and compare the elements\n    for i in range(size1):\n        for j in range(size2):\n            if test_tup1[i] == test_tup2[j]:\n                # If the elements are the same, add it to the shared elements list\n                shared_elements.append(test_tup1[i])\n\n    # Return the shared elements list\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return list(set1 & set2)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Convert the two input tuples to lists\n    tup1_list = list(test_tup1)\n    tup2_list = list(test_tup2)\n\n    # Sort the lists in ascending order\n    tup1_list.sort()\n    tup2_list.sort()\n\n    # Find the common elements between the two lists\n    shared_elements = [x for x in tup1_list if x in tup2_list]\n\n    # Return the list of shared elements\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared.append(elem)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # unpack the tuples\n    list1, list2 = test_tup1\n    # create a set from the first list\n    set1 = set(list1)\n    # create a set from the second list\n    set2 = set(list2)\n    # find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n    # convert the set to a list\n    shared_list = list(shared_elements)\n    # return the list of shared elements\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for element in test_tup1:\n        if element in test_tup2:\n            return element\n    return None"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is not a prime number, else False.\n    \"\"\"\n\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n\n    # Check if n is divisible by any number between 2 and the square root of n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    This function identifies non-prime numbers using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n    # create a list of numbers from 2 to n\n    numbers = list(range(2, n+1))\n    \n    # use the Sieve of Eratosthenes algorithm to mark non-prime numbers\n    for i in range(2, int(math.sqrt(n))+1):\n        if numbers[i-2] == i:\n            for j in range(i*i, n+1, i):\n                numbers[j-2] = 0\n    \n    # identify non-prime numbers by checking if their value is 0 in the list of numbers\n    non_primes = [num for num in numbers if numbers[num-2] == 0]\n    return non_primes"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number and False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # Check if the number is divisible by any number between 3 and the square root of the number\n    for i in range(3, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes a number as an input and returns True if the number is not prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Convert the list to a heap\n    max_heap = [None] * n\n    for num in nums:\n        hq.heappush(max_heap, -num)\n    \n    # Remove the negative numbers from the heap and convert the remaining numbers to a list\n    largest_n = []\n    while max_heap:\n        largest_n.append(-hq.heappop(max_heap))\n    \n    return largest_n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a max heap to store the n largest integers\n    heap = []\n    # Iterate over the numbers in the input list and add them to the heap\n    for num in nums:\n        heapq.heappush(heap, num)\n        # If the heap size is greater than n, remove the smallest element\n        while len(heap) > n:\n            hq.heappop(heap)\n    # Return the n largest integers in descending order from the heap\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a max heap and add the first n numbers to it\n    hq.heapify(nums[:n])\n    # Pop and return the n largest numbers from the heap\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a min-heap to keep track of the n largest integers\n    heap = []\n    for num in nums:\n        # Add the number to the heap if it's larger than any of the current largest numbers\n        if not heap or num > heap[0]:\n            heapq.heappush(heap, num)\n        # If the heap is full, remove the smallest number from it and add the new number\n        elif len(heap) < n:\n            heapq.heappushpop(heap, num)\n\n    # Convert the heap to a list and return the largest n elements in descending order\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        elif num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert list of numbers to min heap\n    hq.heapify(nums)\n    \n    # extract and return n largest integers from heap\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return [-heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a min-heap\n    heap = nums[:n]\n    hq.heapify(heap)\n\n    # remove and return the n smallest elements from the heap\n    for i in range(n, len(nums)):\n        if nums[i] > hq.heappop(heap):\n            hq.heappush(heap, nums[i])\n\n    # convert the min-heap back to a list\n    result = [hq.heappop(heap) for _ in range(n)]\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers to a min-heap\n    max_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, -num)\n    \n    # Find the n largest integers and return them\n    result = []\n    for i in range(n):\n        result.append(-heapq.heappop(max_heap))\n    \n    return result"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or x == 1:\n        return True\n    if x % 2 == 0:\n        return False\n    \n    n = 1\n    while n < x:\n        n <<= 1\n    \n    if n == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # convert x to binary\n    binary = bin(x)[2:]\n    # check for two differing bits\n    for i in range(len(binary)-2):\n        if binary[i]!= binary[i+1]:\n            return True\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert both numbers to binary\n    x_bin = bin(x)\n    y_bin = bin(y)\n\n    # Find the index of the first different bit\n    index = 0\n    while x_bin[index] == y_bin[index]:\n        index += 1\n        if index == len(x_bin):\n            return True\n\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    \n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return True\n    if x & (x-1)!= 0: #checking if there is at least one bit set to 1 in x which is not at position 0\n        return False\n    return is_Power_Of_Two(x>>1) #recursive call to check for remaining bits\n\nprint(is_Power_Of_Two(4)) #True\nprint(is_Power_Of_Two(5)) #False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return True\n    else:\n        if (x & (x - 1)) == 0: \n            return True\n        else: \n            return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n\n    Args:\n    x (int): A non-negative integer.\n\n    Returns:\n    bool: True if the two numbers differ at one bit position only, False otherwise.\n    \"\"\"\n\n    # Check if x is a power of 2\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Initialize count variable\n    count = 0\n    \n    # Convert both numbers to binary strings\n    bin_str_x = bin(x)[2:]\n    bin_str_y = bin(y)[2:]\n    \n    # Compare the length of binary strings\n    if len(bin_str_x)!= len(bin_str_y):\n        return False\n    \n    # Count the number of differing bits\n    for i in range(len(bin_str_x)):\n        if bin_str_x[i]!= bin_str_y[i]:\n            count += 1\n            if count > 1:\n                return False\n    \n    # If no differing bits are found, the two numbers differ at one bit position only\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regex to find all words with at least 4 characters\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    \n    # Return the list of words found\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Find all words in the text using regular expressions\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n\n    # Return a list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern that matches words with at least 4 characters\n    pattern = r'\\b[a-zA-Z]{4,}\\b'\n    # Use the regular expression search function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    # Split the string into words using whitespace as the delimiter\n    words = text.split()\n    \n    # Initialize an empty list to store the words that are at least 4 characters long\n    long_words = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Check if the word has at least 4 characters\n        if len(word) >= 4:\n            # If so, add it to the long_words list\n            long_words.append(word)\n            \n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    \n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n            \n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w+\\b'  # regular expression pattern to match words\n    words = re.findall(pattern, text)  # find all matches of the pattern in the text\n    result = []  # initialize an empty list to store the result\n    for word in words:  # iterate over the matches\n        if len(word) >= 4:  # check if the length of the word is at least 4\n            result.append(word)  # if it is, add it to the result list\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    # find the length of the string\n    n = len(str)\n    # loop through all possible rotations of the string\n    min_rotations = n\n    for i in range(1, n+1):\n        # check if the reversed string is equal to the original string\n        if str[i:] == str[:i][::-1]:\n            # if it is, update the minimum number of rotations\n            min_rotations = min(min_rotations, i)\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # We will use dynamic programming to find the minimum number of rotations required\n    # to get the same string by rotating the string\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n-1):\n        dp[i][i+1] = 1\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if str[i] == str[j]:\n                # If both characters match, we will rotate the string to get the same string\n                # by rotating between i and j\n                min_rotations = min(dp[i+1][j], dp[i+1][j-1])\n                dp[i][j] = dp[i][j] + min_rotations\n            else:\n                # If characters don't match, we will only rotate the string between i and j\n                dp[i][j] = dp[i][j] + dp[i+1][j-1]\n    return dp[0][n-1]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the maximum frequency value\n    max_freq = max(freq.values())\n    \n    # Initialize the minimum number of rotations to 0\n    min_rotations = 0\n    \n    # Loop through each character and check if it is present in the dictionary with the same frequency\n    for char in str:\n        if freq[char] == max_freq:\n            # If the character is present with the same frequency, update the minimum number of rotations\n            min_rotations += 1\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize variables to keep track of the minimum number of rotations and the index of the first occurrence of the substring\n    min_rotations = float('inf')\n    first_index = 0\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Find the index of the next occurrence of the substring in the string from the current index\n        next_index = str.find(str[i], i+1)\n        # If the next occurrence is found, calculate the minimum number of rotations required to get the same string\n        if next_index!= -1:\n            min_rotations = min(min_rotations, next_index - i)\n        # If the next occurrence is not found, set the index of the first occurrence of the substring to the current index\n        else:\n            first_index = i + 1\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize variables\n    n = len(str)\n    max_len = 0\n    min_rot = 0\n    result = \"\"\n    \n    # Loop through all possible substrings of the input string\n    for i in range(n): \n        for j in range(i+1, n+1): \n            # Check if the substring is a palindrome\n            if str[i:j] == str[i:j][::-1]: \n                # Update max_len and min_rot if necessary\n                max_len = max(max_len, j-i)\n                min_rot = min(min_rot, j-i)\n                \n    # Check if the maximum length is already equal to the input string length\n    if max_len == n:\n        result = \"0\"\n    else:\n        # Calculate the number of rotations required to get the same string\n        rotations = (n//min_rot)+1\n        \n        # Calculate the result string by rotating the input string\n        for i in range(rotations): \n            result += str[-max_len:] + str[:-max_len]\n        \n        # Remove the extra characters that were added to the result string\n        result = result[:-max_len]\n    \n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    # Initialize the dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Initialize the minimum number of rotations required to get the same string\n    min_rotations = float('inf')\n\n    # Iterate through all possible rotations of the string\n    for i in range(len(str)):\n        # Calculate the frequency of each character in the rotated string\n        rotated_freq = {}\n        for j in range(i+1):\n            rotated_freq[str[j]] = freq[str[j]]\n\n        # Calculate the frequency of each character in the original string\n        original_freq = {}\n        for j in range(len(str)):\n            original_freq[str[j]] = freq[str[j]]\n\n        # Calculate the frequency difference between the two rotations\n        diff_freq = {}\n        for char in rotated_freq:\n            if char in original_freq:\n                diff_freq[char] = abs(rotated_freq[char] - original_freq[char])\n            else:\n                diff_freq[char] = rotated_freq[char]\n\n        # Check if the difference between the two rotations is less than the minimum number of rotations\n        if sum(diff_freq.values()) < min_rotations:\n            min_rotations = sum(diff_freq.values())\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def LCS(x, y, m, n):\n    if m == 0 or n == 0:\n        return 0\n    if x[m-1] == y[n-1]:\n        return 1 + LCS(x, y, m-1, n-1)\n    else:\n        return max(LCS(x, y, m-1, n), LCS(x, y, m, n-1))\n\ndef find_Rotations(str):\n    m = len(str)\n    n = len(str)\n    x = list(str)\n    y = x.copy()\n    min_rot = m + n\n    for i in range(26):\n        y[i] = chr(ord('a') + i)\n    lcs = LCS(x, y, m, n)\n    for _ in range(m-lcs):\n        x.append(y[0])\n    for _ in range(n-lcs):\n        y.append(x[0])\n    for _ in range(m-n-1):\n        x.append(y.pop(0))\n    for _ in range(n-m-1):\n        y.append(x.pop(0))\n    rotations = 0\n    while x!= y:\n        rotations += 1\n        x, y = y, x\n    if x == str:\n        min_rot = min(min_rot, rotations)\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = n # assume that it can be rotated at least once\n    \n    # loop through all possible rotations of the string\n    for i in range(n):\n        # if the rotated string is equal to the original string, it is the same\n        if str[i:n] == str[:n-i]:\n            return 0\n        # if the rotated string is longer than the original string, it can be rotated\n        elif len(str[i:n]) < len(str[:n-i]):\n            min_rotations = min(min_rotations, n-i)\n            \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Initialize a boolean array to keep track of visited characters\n    visited = [False] * n\n    # Initialize the visited characters to True\n    for i in range(n):\n        visited[i] = True\n\n    # Traverse through the string and check if any characters are visited twice\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j] and not visited[j]:\n                # If the characters are visited twice, rotate the string by 1 character\n                if j < n-1:\n                    str = str[:j] + str[j+1] + str[j]\n                else:\n                    str = str[:j] + str[j]\n                # Mark the visited characters as False\n                for k in range(j, n):\n                    visited[k] = False\n                # Return the minimum number of rotations required\n                return j - i + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # find the longest common prefix of the strings\n    while n > 0 and str[n-1] == str[0]:\n        n -= 1\n    if n == 0:\n        return 0  # if the strings are identical, there are no rotations required\n    # find the longest common suffix of the strings\n    while n > 0 and str[n-1] == str[n]:\n        n -= 1\n    if n == 0:\n        return 0  # if the strings are identical, there are no rotations required\n    # count the number of rotations required to get the same string\n    count = 0\n    while n > 0:\n        count += 1\n        if count > n // 2:\n            return 0  # if there are more than n//2 rotations required, there are no rotations required\n        j = n - 1\n        while j > 0 and str[n-1] == str[j-1]:\n            j -= 1\n        str = str[j+1:]\n        if j == 0:\n            break\n    return count + 1  # count the number of rotations required to get the same string, plus 1 for the initial permutation"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1) + s.replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the character is present at the start of the string\n    if s[0] == ch:\n        s = s[1:]\n    # check if the character is present at the end of the string\n    if s[-1] == ch:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first = True\n    last = False\n    for i in range(len(s)):\n        if s[i] == ch and first:\n            s = s[:i] + s[i+1:]\n            first = False\n        elif s[i] == ch and last:\n            s = s[:i-1] + s[i+1:]\n            last = False\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    if ch not in s:\n        return \"Character not found in the string\"\n\n    s = s.replace(ch,\"\")\n\n    if s.count(ch) < 2:\n        return \"Character not found in the string\"\n\n    if ch == s[0]:\n        s = s[1:]\n\n    if ch == s[-1]:\n        s = s[:-1]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Convert the string to a list\n    lst = list(s)\n    \n    # Find the index of the first occurrence of the character\n    first_index = lst.index(ch)\n    \n    # Remove the first occurrence of the character\n    lst.pop(first_index)\n    \n    # Find the index of the last occurrence of the character\n    last_index = lst.rindex(ch)\n    \n    # Remove the last occurrence of the character\n    lst.pop(last_index)\n    \n    # Convert the list back to a string\n    result = ''.join(lst)\n    \n    return result"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the character is present in the string\n    if ch in s:\n        # split the string into two parts\n        parts = s.split(ch)\n        # check if there are two parts, if not return the string as is\n        if len(parts) == 2:\n            # check if the first part is empty\n            if not parts[0]:\n                # return the second part\n                return parts[1]\n            # check if the second part is empty\n            elif not parts[1]:\n                # return the first part\n                return parts[0]\n            # else, return the original string as is\n            else:\n                return s\n        # if there are more than two parts, return the string as is\n        else:\n            return s\n    # if the character is not present in the string, return the original string as is\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # check if the character is present in the string\n    if ch in s:\n        # split the string into a list of characters\n        s_list = list(s)\n\n        # find the index of the first occurrence of the character\n        index = s_list.index(ch)\n\n        # remove the first occurrence of the character\n        s_list.pop(index)\n\n        # find the index of the last occurrence of the character\n        index = s_list.index(ch)\n\n        # remove the last occurrence of the character\n        s_list.pop(index)\n\n        # join the list of characters back into a string\n        s = ''.join(s_list)\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1) + s.replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    s = s.strip()\n    s = s.lstrip()\n    s = s.rstrip()\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch in s:\n        return s.replace(ch, '')\n    else:\n        return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # sort the rows in ascending order\n    row_sums.sort()\n    # create a list of tuples, where each tuple contains the row index and the row itself\n    sorted_rows = [(i, M[i]) for i in range(len(M)) if row_sums[i] == row_sums[0]]\n    # sort the rows by the column index of their first element\n    sorted_rows.sort(key=lambda x: x[1][0])\n    # create a new matrix with the sorted rows\n    sorted_M = [[0 for j in range(len(sorted_rows[0][1]))] for i in range(len(sorted_rows))]\n    for i in range(len(sorted_rows)):\n        for j in range(len(sorted_rows[0][1])):\n            sorted_M[i][j] = sorted_rows[i][1][j]\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a counter variable\n    count = 0\n    # Loop through each row in the matrix\n    for i in range(len(M)):\n        # Initialize a variable to store the sum of the current row\n        current_sum = 0\n        # Loop through each element in the row\n        for j in range(len(M[i])):\n            # Add the element to the current sum\n            current_sum += M[i][j]\n        # Compare the current sum with the previous sum and update the count variable accordingly\n        if i == 0:\n            count = current_sum\n        elif current_sum < count:\n            count = current_sum\n    # Create a new matrix with the sorted rows\n    sorted_matrix = [[0 for j in range(len(M[0]))] for i in range(len(M))]\n    # Loop through each row in the matrix\n    for i in range(len(M)):\n        # Loop through each element in the row and copy it to the new matrix if the sum is greater than the count\n        for j in range(len(M[i])):\n            if M[i][j] > count:\n                sorted_matrix[i][j] = M[i][j]\n    # Return the new matrix with the sorted rows\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Calculate the sum of each row\n    rows = [sum(row) for row in M]\n    \n    # Sort the rows in ascending order\n    sorted_rows = sorted(rows)\n    \n    # Sort the matrix rows by their index in the sorted rows list\n    sorted_M = [[M[i][j] for i in range(len(sorted_rows))] for j in range(len(M[0]))]\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        # Find the sum of the row\n        row_sum = sum(M[i])\n        # Sort the row in ascending order\n        M[i] = sorted(M[i])\n        # Add the sum of the row to the end of the row\n        M[i].append(row_sum)\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(n):\n            if j > 0:\n                M[i][j] += M[i][j-1]\n    for i in range(n):\n        for j in range(n-1):\n            if M[i][j] > M[i][j+1]:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Step 1: Initialize the variables to keep track of the indices of the max and min elements in each row\n    max_row_index = []\n    min_row_index = []\n\n    # Step 2: Loop through each row of the matrix and find the indices of the max and min elements\n    for i in range(len(M)):\n        max_row = max(M[i])\n        min_row = min(M[i])\n        # Find the indices of the max and min elements in the current row\n        max_index = M[i].index(max_row)\n        min_index = M[i].index(min_row)\n        # Add the indices to the corresponding row's list of max and min indices\n        max_row_index.append(max_index)\n        min_row_index.append(min_index)\n\n    # Step 3: Sort each row of the matrix in ascending order based on the sum of its elements\n    for i in range(len(M)):\n        M[i].sort()\n\n    # Step 4: Sort the matrix in ascending order based on the sum of its rows\n    sorted_M = []\n    for i in range(len(max_row_index)):\n        sorted_M.append(M[i][max_row_index[i]:min_row_index[i]+1])\n    sorted_M.sort()\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Iterate through each row\n    for i in range(n):\n        # Find the maximum element in the current row\n        max_row = max(M[i])\n        # Iterate through the other rows\n        for j in range(i+1, n):\n            # If the maximum element in the current row is greater than the maximum element in the other row, swap them\n            if M[i][max_row] > M[j][max_row]:\n                M[i], M[j] = M[j], M[i]\n                break"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(cols):\n            M[i][j] = (M[i][j], M[i][j])\n            M[i][j] = sorted(M[i][j])\n            M[i][j] = M[i][j][0]\n            M[i][j] = M[i][j][1]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Find the sum of each row\n    rows_sum = [sum(row) for row in M]\n\n    # Sort the matrix based on the row sums\n    sorted_M = sorted(M, key=lambda x: rows_sum.index(sum(x)))\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the rows in ascending order based on the row sums\n    sorted_rows = [M[i] for i in sorted(range(len(M)), key=lambda j: row_sums[j])]\n\n    # Return the sorted matrix\n    return sorted_rows"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5*l*b*h\n    print(\"The volume of the triangular prism is:\",volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism and returns the volume of the prism.\n    '''\n    volume = l * b * h  # calculate the volume using the formula for a triangular prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n\n    # Calculate the volume of the prism using Heron's formula\n    V = (1 / 3) * l * b * h\n\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in the dimensions of a triangular prism as input and returns the volume of the prism.\n    '''\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 6\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h/3\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text.lower())\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    underscore_pattern = re.compile(r'([a-z])_([a-z])')\n    underscore_match = underscore_pattern.findall(text)\n    if underscore_match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=\\b)[a-z]+(_[a-z]+)*(?=\\b)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]*[_]\\w*[a-z]*')\n    return pattern.match(text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<!_)([a-z]+?)(_[a-z]+?)+(?!_)'\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z_]+'\n    return bool(re.findall(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-z])[a-z]+(?![a-z])_'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the first string to a list of characters\n    first_list = list(string)\n    # Convert the second string to a set of characters to remove duplicates\n    remove_set = set(string)\n    # Use set intersection to remove characters present in both strings\n    first_list = list(set.intersection(set(first_list), remove_set))\n    # Convert the list of remaining characters to a string and return it\n    return ''.join(first_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert both strings to lists of characters\n    string_list = list(string)\n    remove_chars_list = list(remove_chars)\n    # Iterate over each character in the string list\n    for char in string_list:\n        # If the character is in the remove_chars_list, remove it\n        if char in remove_chars_list:\n            string_list.remove(char)\n    # Convert the list of characters back to a string\n    result_string = ''.join(string_list)\n    return result_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert the string to a list of integers\n    lst = [ord(char) for char in string]\n    \n    # Find the common characters between the two strings\n    common_chars = [chr(i) for i in range(NO_OF_CHARS) if i not in lst[1:]]\n    \n    # Convert the common characters list to a string\n    common_string = \"\".join(common_chars)\n    \n    # Remove characters from the first string which are present in the common string\n    new_lst = [char for char in lst[0] if char not in common_string]\n    \n    # Convert the list of integers back to a string\n    new_string = \"\".join(chr(i) for i in new_lst)\n    \n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    string = string.upper()\n    freq = [0] * NO_OF_CHARS\n    for char in string:\n        freq[ord(char)] += 1\n    result = \"\"\n    for i in range(NO_OF_CHARS):\n        if freq[i] > 0:\n            result += chr(i)\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Create a list of all possible characters\n    all_chars = list(range(NO_OF_CHARS))\n\n    # Split the given string into two lists: the characters to be removed and the rest\n    characters_to_remove = list(set(string) & set(all_chars))\n    rest_of_string = list(set(string) - set(characters_to_remove))\n\n    # Combine the two lists and return the result\n    return rest_of_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    # initialize an empty list to store the characters to be removed\n    removed_chars = []\n    # loop through each character of the second string\n    for char in string:\n        # check if the character is already present in the first string\n        if char in string:\n            # if it is, add it to the list of characters to be removed\n            removed_chars.append(char)\n    # convert the list of characters to a string and return it\n    return ''.join(removed_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n\n    # Initialize an empty string to store the resulting string\n    result_str = ''\n\n    # Iterate through the character list\n    for char in char_list:\n        # If the character is not present in the second string, append it to the result string\n        if char not in string:\n            result_str += char\n\n    return result_str"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256 # initialize the number of characters in the alphabet\n    \n    # create a list of the characters in the string\n    string_list = [ord(char) for char in string]\n    \n    # create a set of the characters in the second string\n    char_set = set(string)\n    \n    # create a list of the remaining characters in the string after removing those in the second string\n    remaining_chars = []\n    for char in string_list:\n        if char not in char_set:\n            remaining_chars.append(char)\n    \n    # convert the remaining characters back to a string and return it\n    return ''.join([chr(char) for char in remaining_chars])"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert the string to a list\n    string_list = list(string)\n    # initialize an empty list to store the result\n    result_list = []\n    # iterate over the characters of the second string\n    for char in string_list:\n        # check if the character is present in the first string\n        if char not in string:\n            # if it is not, add it to the result list\n            result_list.append(char)\n    # convert the result list to a string and return it\n    return ''.join(result_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string1, string2):\n    '''\n    This function takes two strings as input and removes characters from the first string \n    which are present in the second string.\n    '''\n    list1 = list(string1)\n    list2 = list(string2)\n    for char in list2:\n        if char in list1:\n            list1.remove(char)\n    return ''.join(list1)\n"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # check if the array is empty\n    if not arraynums:\n        return False\n    \n    # use a set to keep track of the elements we've seen so far\n    seen = set()\n    \n    # iterate through the array\n    for num in arraynums:\n        # if we've already seen this number, return True\n        if num in seen:\n            return True\n        \n        # add the number to the set of seen numbers\n        seen.add(num)\n    \n    # if we've iterated through the entire array without finding a duplicate, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements of the array\n    unique_set = set(arraynums)\n    # check if the set is empty, if it is, then there is no duplicate element in the array\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store the elements in the array\n    unique_elements = set(arraynums)\n\n    # Check if the length of the set is equal to the length of the array\n    if len(unique_elements) == len(arraynums):\n        print(\"The array does not contain any duplicate elements.\")\n        return True\n    else:\n        print(\"The array contains duplicate elements.\")\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # loop through each element in the array\n    for num in arraynums:\n        # if the element is already in the dictionary, increment its count by 1\n        if num in count_dict:\n            count_dict[num] += 1\n        # if the element is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[num] = 1\n\n    # check if any element appears more than once in the dictionary\n    for count in count_dict.values():\n        if count > 1:\n            return True\n\n    # if no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a set to store unique numbers\n    unique_numbers = set()\n    # loop through each number in the array\n    for num in arraynums:\n        # check if the number is in the set\n        if num in unique_numbers:\n            # if it is, return True\n            return True\n        else:\n            # if not, add it to the set\n            unique_numbers.add(num)\n    # if no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = []\n    for num in arraynums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n        else:\n            return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = []\n    for num in arraynums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    if len(unique_nums) == len(arraynums):\n        print(\"No duplicate element found in the given array.\")\n    else:\n        print(\"Duplicate element found in the given array.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store unique elements\n    unique_nums = {}\n\n    # Loop through each element in the array\n    for num in arraynums:\n        # If the element is already in the dictionary, it's a duplicate\n        if num in unique_nums:\n            return True\n        # If the element is not in the dictionary, add it to the dictionary\n        else:\n            unique_nums[num] = True\n\n    # If all elements are unique, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x >= 50 and x <= 70:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 or x % 5 == 0 or x % 15 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function takes an integer x as input and checks if it is a woodball or not.\n    A woodball is defined as a number divisible by 3.\n    \"\"\"\n    if x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0 and (x % 3 == 0 or x % 5 == 0):\n        return \"Woodball\"\n    else:\n        return \"Not a woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    This function checks if the given number is woodball or not.\n    '''\n    if x % 15 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0 and x > 0:\n        return \"The number is woodball.\"\n    else:\n        return \"The number is not a woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x % 10 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\"\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x == 0:\n        return True\n\n    elif x > 0 and x % 2 == 1:\n        return False\n\n    else:\n        return is_woodall(x-1)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 10 == 3: \n        return \"Woodball\"\n    else: \n        return \"Not a Woodball\"\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # List of numbers that are not woodalls\n    non_woodalls = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\n    # Check if x is a non-woodall number\n    if x in non_woodalls: \n        # Return False\n        return False\n    # Check if x is a multiple of 4\n    elif x % 4 == 0:\n        # Return True\n        return True\n    # If none of the above conditions are satisfied, return False\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Function to reverse a number\n    def reverse(num):\n        if num == 0:\n            return 0\n        elif num % 10 == 0:\n            return reverse(num // 10) + 1\n        else:\n            return reverse(num // 10) + (num % 10)\n\n    # Calculate the reverse of the given number\n    reverse_num = reverse(num)\n\n    # Check if the given number is one less than twice its reverse\n    if num - reverse_num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # reverse the number\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    # check if the reverse is one less than twice the original number\n    if rev_num == num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    rev_num = 0\n    num_str = str(num)\n    \n    # Convert the number to its reverse\n    for i in range(len(num_str)-1, -1, -1):\n        rev_num += int(num_str[i])\n    \n    # Check if the reversed number is one less than twice the original number\n    if rev_num == num-1 or rev_num == num+1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    \n    return abs(num - 2 * reverse) == 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the number\n    reversed_num = str(num)[::-1]\n    # Convert the reversed number to an integer\n    reversed_num_int = int(reversed_num)\n    # Calculate the difference between the original number and its reverse\n    diff = abs(num - reversed_num_int)\n    # Check if the difference is one less than twice the reverse\n    if diff == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == 2*int(str(num)[::-1]) - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 10:\n        return False\n    else:\n        reverse_num = 0\n        while num!= 0:\n            reverse_num = reverse_num * 10 + num % 10\n            num //= 10\n        return reverse_num == 2 * reverse_num - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num % 10\n        num = num // 10\n    if rev_num < 2 * rev_num + 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Reverse the given number\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n\n    # Check if the reversed number is one less than twice the original number\n    if rev_num < 2 * num:\n        print(f\"{num} is one less than twice its reverse.\")\n    else:\n        print(f\"{num} is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    # Convert the given number to a string\n    num_str = str(num)\n    \n    # Reverse the string\n    reversed_str = num_str[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_str)\n    \n    # Check if the reversed number is one less than twice the original number\n    if reversed_num < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n\n    # Create a list to store the maximum number formed with the given list of digits\n    max_num = []\n\n    # Iterate through the given list of digits\n    for i in range(len(arr)):\n\n        # Iterate through all the numbers from 0 to 9\n        for j in range(10):\n\n            # Create a new number by concatenating the digit and the number\n            num = str(arr[i]) + str(j)\n\n            # If the new number is less than or equal to the current maximum number, update the maximum number\n            if int(num) <= int(max_num):\n                max_num = num\n\n    # Convert the maximum number from string to integer and return it\n    return int(max_num)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max(max_num, int(arr[i]))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    max_num = 0\n    for i in range(len(arr)) : \n        max_num += (len(arr) - i) * int(arr[i])\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    # Initialize a variable to store the maximum number\n    max_num = 0\n    \n    # Loop through each digit in the list\n    for digit in arr:\n        # Multiply the maximum number by 10 and add the current digit to it\n        max_num = max_num * 10 + int(digit)\n        \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed by adding all the digits.\n    '''\n    digits = [int(x) for x in arr]\n    max_num = max(digits)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        max_num = max(max_num, arr[i])\n        for j in range(i+1, n):\n            max_num = max(max_num, arr[j])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    if len(arr) == 0:\n        return 0\n    \n    if arr[0] == 0:\n        return 0\n    \n    max_num = 0\n    for i in range(1, len(arr)):\n        max_num = max(max_num, arr[i] + find_Max_Num(arr[:i] + arr[i+1:]))\n        \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        temp = 0\n        for digit in str(num):\n            temp = temp * 10 + int(digit)\n        max_num = max(max_num, temp)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with those digits.\n    \"\"\"\n    # Sort the list in ascending order\n    arr.sort()\n\n    # Initialize the result variable and set the initial value to 1\n    result = 1\n\n    # Loop through the sorted list and multiply each digit by the current result and add it to the result\n    for digit in arr:\n        result *= int(digit)\n\n    # Return the result\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    # Initialize maximum number as 0\n    max_num = 0\n    # Loop through each digit in the list of digits\n    for digit in arr:\n        # Multiply the current digit with its index in the list\n        max_num += digit * (len(arr)-arr.index(digit))\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # Checking if the signs of x and y are opposite or not.\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        print(\"The two integers have opposite signs.\")\n    else:\n        print(\"The two integers have same signs.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite signs, otherwise False.\n    \"\"\"\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    elif x == 0 and y == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y > 0:\n        print(\"Both numbers have positive signs\")\n    elif x < 0 and y < 0:\n        print(\"Both numbers have negative signs\")\n    elif x > 0 and y < 0:\n        print(\"The first number has positive sign and the second number has negative sign\")\n    elif x < 0 and y > 0:\n        print(\"The first number has negative sign and the second number has positive sign\")\n    else:\n        print(\"Both numbers have same sign\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        print(\"Both numbers are zero.\")\n    elif (x < 0 and y < 0) or (x > 0 and y > 0):\n        print(\"Both numbers have opposite signs.\")\n    else:\n        print(\"Both numbers have the same sign.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return \"The two integers have opposite signs.\"\n    else:\n        return \"The two integers have same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return \"Both integers have opposite signs\"\n    elif x < 0 and y < 0:\n        return \"Both integers have opposite signs\"\n    elif x < 0 and y > 0:\n        return \"The first integer has opposite sign\"\n    elif x > 0 and y < 0:\n        return \"The second integer has opposite sign\"\n    else:\n        return \"No sign change\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>=0 and y>=0) or (x<=0 and y<=0):\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether two given integers have opposite signs or not.\n\n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise\n    \"\"\"\n    if ((x > 0) and (y < 0)) or ((x < 0) and (y > 0)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    k = n // 2\n    if n % 2 == 0:\n        # even number of terms\n        term = 1\n        for i in range(1, k+1):\n            term *= i\n        return term // 2\n    else:\n        # odd number of terms\n        term = 1\n        for i in range(2, k+1):\n            term *= i\n        return term"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Initialize a variable to hold the nth octagonal number\n    octagonal = 0\n\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Calculate the nth octagonal number\n        octagonal = (3**i - 1)/2\n\n        # Check if the nth octagonal number is prime\n        if octagonal == 1 or (octagonal**2 - octagonal + 1)**0.5 == int(octagonal**2 - octagonal + 1)**0.5:\n            return True\n\n    # If the loop completes without finding a prime octagonal number, return False\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        if i**2 + i == 2 * i * (i + 1):\n            return True\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    # Initialize the sum of the first 10 odd numbers to 0\n    odd_sum = 0\n    # Initialize the sum of the first 10 even numbers to 0\n    even_sum = 0\n    # Initialize the sum of the first 10 positive integers to 0\n    int_sum = 0\n    \n    # Loop through the first 10 odd numbers\n    for i in range(1, 11):\n        # Calculate the sum of the first 10 odd numbers\n        odd_sum += i\n        \n    # Loop through the first 10 even numbers\n    for i in range(2, 12, 2):\n        # Calculate the sum of the first 10 even numbers\n        even_sum += i\n        \n    # Loop through the first 10 positive integers\n    for i in range(3, 13, 2):\n        # Calculate the sum of the first 10 positive integers\n        int_sum += i\n        \n    # Find the nth octagonal number by adding the odd_sum, even_sum, and int_sum to n\n    return n * (odd_sum + even_sum + int_sum)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes an integer n as input and returns True if it is an octagonal number, otherwise it returns False.\n    '''\n    if n < 1:\n        return False\n    \n    # Define a function to check if a number is a perfect square\n    def is_square(num):\n        return num == int(num ** 0.5) ** 2\n    \n    # Calculate the sum of the cubes of the digits of n\n    num_str = str(n)\n    num_cube = sum(int(digit) ** 3 for digit in num_str)\n    \n    # Check if the sum is a perfect square\n    return is_square(num_cube)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (3 * n - 1)) ** 2 == n ** 3"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 0\n    for i in range(1, n+1):\n        a = (3*i*i) + 8\n    return a"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Check if n is greater than 1 and a multiple of 10\n    if n > 1 and n % 10 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (n + 1) * (2 * n + 1)\n\ndef octagonal_numbers(n):\n    '''\n    Generate the nth octagonal number.\n    '''\n    return [is_octagonal(i) for i in range(1, n+1)]"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Base case: if n is 1, the octagonal number is 1.\n    if n == 1:\n        return 1\n    # Calculate the length of the triangle.\n    length = 4 * n - 1\n    # Calculate the height of the triangle.\n    height = 2 * n - 1\n    # Calculate the sum of the diagonals.\n    diagonal_sum = (length * (length + 1)) // 2\n    # Calculate the octagonal number.\n    octagonal_number = diagonal_sum + height - 1\n    return octagonal_number"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    counts = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            substr = s[i:j]\n            sum_of_digits = sum(int(d) for d in substr if d.isdigit())\n            counts[substr+str(sum_of_digits)] += 1\n            counts[substr] += 1\n    return counts"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Create a dictionary to store the frequency of each digit in the string\n    freq = defaultdict(int)\n    for c in s:\n        freq[c] += 1\n    \n    # Initialize the count to zero\n    count = 0\n    \n    # Iterate through all possible substrings of the string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits is equal to the length of the substring\n            if sum(int(c) for c in s[i:j]) == j - i:\n                count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings\n    count = defaultdict(int)\n\n    # Iterate through the string\n    for i in range(len(s)):\n        # Get the substring starting from index i\n        substring = s[i:]\n        # Iterate through the substring and calculate the sum of digits\n        digits_sum = sum(int(digit) for digit in substring)\n        # If the sum of digits is equal to the length of the substring, add 1 to the count of substrings\n        if digits_sum == len(substring):\n            count[substring] += 1\n\n    # Return the count of substrings\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # create a dictionary to store the count of each digit in the string\n    digit_count = defaultdict(int)\n    for char in s:\n        digit_count[int(char)] += 1\n    \n    # count the number of substrings with the sum of digits equal to their length\n    count = 0\n    for length in range(1, len(s) + 1):\n        for start in range(len(s) - length + 1):\n            end = start + length - 1\n            substring = s[start:end+1]\n            sum_of_digits = sum([int(digit) for digit in substring])\n            if sum_of_digits == length:\n                count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        count[i] = [i]\n\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] == s[j] and (i - j) % 2 == 0:\n                count[i].append(count[j][-1])\n\n    for i in range(n):\n        count[i].append(i)\n\n    ans = 0\n    for i in range(n):\n        for j in range(i):\n            if s[i] == s[j] and count[i][j] == count[j][j]:\n                ans += i - j\n\n    return ans"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Count the frequency of digits in the string\n    freq = defaultdict(int)\n    for char in s:\n        freq[char] += 1\n\n    # Find all possible substrings\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.append(s[i:j])\n\n    # Count the number of substrings with sum of digits equal to their length\n    count = 0\n    for substring in substrings:\n        if sum(int(digit) for digit in substring) == len(substring):\n            count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Define a dictionary to store the count of substrings with a given sum of digits\n    substring_count = defaultdict(int)\n\n    # Iterate over all possible substrings of the given string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits in the substring is equal to its length\n            substring_sum = sum(int(digit) for digit in s[i:j])\n            if substring_sum == len(s[i:j]):\n                # If yes, increment the count of substrings with the given sum of digits\n                substring_count[substring_sum] += 1\n\n    # Return the count of substrings with the given sum of digits\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with sum of digits equal to their length\n    count = defaultdict(int)\n    # Loop through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Convert the substring to a list of digits and calculate the sum of digits\n            substring_digits = sum(int(digit) for digit in s[i:j+1])\n            # If the sum of digits is equal to the length of the substring, increment the count\n            if substring_digits == len(s[i:j+1]):\n                count[substring_digits] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        count[sum([int(x) for x in s[i:j+1]])] += 1\n    return count[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # create a dictionary to store the sum of digits for each character in the string\n    char_dict = defaultdict(int)\n    \n    # iterate through the string and update the sum of digits for each character\n    for i in range(len(s)):\n        char_dict[s[i]] += s[i].isdigit()\n    \n    # initialize a variable to store the count of substrings\n    count = 0\n    \n    # iterate through all possible substrings of the string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # check if the sum of digits for each substring is equal to its length\n            if char_dict[s[i]] == sum([int(x) for x in s[i:j]]):\n                count += 1\n    \n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs[0], smallest_num(xs[1:]))\n"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        raise ValueError(\"Empty list\")\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Initialize smallest variable with first number in the list\n    smallest = xs[0]\n    # Loop through the list and compare each number with the current smallest\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            # If the current number is smaller, update the smallest variable\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    if len(test_list) < 2:\n        return None\n\n    min_num = min(test_list[0][0], test_list[0][1])\n    max_num = max(test_list[0][0], test_list[0][1])\n\n    for i in range(1, len(test_list)):\n        if test_list[i][0] < min_num:\n            min_num = test_list[i][0]\n        if test_list[i][0] > max_num:\n            max_num = test_list[i][0]\n        if test_list[i][1] < min_num:\n            min_num = test_list[i][1]\n        if test_list[i][1] > max_num:\n            max_num = test_list[i][1]\n\n    return max_num - min_num"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i][0] - test_list[j][0]) > max_diff:\n                max_diff = abs(test_list[i][0] - test_list[j][0])\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n\n    # Sort the list of tuples by their first element\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize variables for the maximum difference and the current difference\n    max_diff = 0\n    curr_diff = test_list[1][0] - test_list[0][0]\n\n    # Iterate over the sorted list\n    for i in range(1, len(test_list)):\n        # Calculate the difference between the current element and the next element\n        next_diff = test_list[i][0] - test_list[i+1][0]\n\n        # Update the maximum difference if the current difference is greater\n        if next_diff > max_diff:\n            max_diff = next_diff\n\n        # Update the current difference with the next difference\n        curr_diff = next_diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] < test_list[j][1]:\n                max_diff = max(max_diff, test_list[i][1] - test_list[j][1])\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n\n    :param test_list: A list of tuples representing the available pairs.\n    :type test_list: list\n    :return: The maximum difference between available pairs.\n    :rtype: int\n    \"\"\"\n    max_diff = 0\n    pairs = set()\n    for pair in test_list:\n        if pair not in pairs:\n            pairs.add(pair)\n            diff = max(pair) - min(pair)\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # initialize variables\n    max_diff = 0\n    current_diff = 0\n\n    # loop through each pair in the list\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            current_diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if current_diff > max_diff:\n                max_diff = current_diff\n\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples by second value\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # create a list of tuples with the second value as key and the first value as value\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    \n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples by the second value of each tuple\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    This function sorts a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # check if the input is a list\n    if type(data_list) == list:\n        # recursively sum the elements of the list\n        for item in data_list:\n            recursive_list_sum(item)\n        # add the current list to the sum\n        return data_list\n    else:\n        # return the sum of the current element and 0\n        return data_list + 0"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: if the input list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element of the list to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data):\n        if isinstance(data, list):\n            return sum(flatten(elem) for elem in data)\n        else:\n            return data\n    \n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        flattened_list = []\n        for item in data_list:\n            if type(item) == list:\n                flattened_list.extend(recursive_list_sum(item))\n            else:\n                flattened_list.append(item)\n        return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        first_element = data_list[0]\n        rest_of_list = data_list[1:]\n        flattened_list = recursive_list_sum(rest_of_list)\n        return first_element + flattened_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(recursive_list_sum(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    else:\n        return [data_list]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(data_list):\n        '''\n        Helper function to flatten a nested list.\n        '''\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        raise TypeError('Input must be a list.')\n    if not data_list:\n        return 0\n    return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(data_list):\n        '''\n        Flatten a list by recursively calling the function on each element.\n        '''\n        flattened_list = []\n        for item in data_list:\n            if type(item) in [list, tuple]:\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    flattened_list = flatten_list(data_list)\n    total_sum = sum(flattened_list)\n    return total_sum"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in it.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return (2*n) // 3\n\n    count = 0\n    for i in range(1, n+1):\n        if partition(i) == n:\n            count += 1\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1 or n == 2:\n        return 1\n    elif n % 2 == 0:\n        return 0\n    else:\n        return 2 * bell_number(n-1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    # Loop through all possible partitions of {1, 2,..., n}\n    for i in range(1, n+1):\n        # Loop through all possible partitions of {i, i+1,..., n}\n        for j in range(i, n+1):\n            # Check if the two partitions are equal\n            if len(set(i).symmetric_difference(set(j))) == 0:\n                # Increment the count variable\n                count += 1\n    # Return the count variable\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell_numbers = [1]\n    for i in range(2, n + 1):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n    return bell_numbers[-1]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return (n*(n+1))//2\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3) + bell_number(n-4)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize variables to keep track of number of ways to partition the set and the number of times a Bell number has been used\n    ways = 1\n    times = 1\n\n    # Loop through all Bell numbers up to n\n    for i in range(1, n+1):\n        # If the current Bell number is divisible by 2, then the set can be partitioned into two parts: the current Bell number and the complement (n - current Bell number)\n        if i % 2 == 0:\n            ways *= 2  # double the number of ways to partition the set\n            times += 1  # increment the number of times a Bell number has been used\n        else:\n            ways *= (n-i)  # multiply the number of ways to partition the set by the number of ways to exclude the current Bell number\n            times += 1  # increment the number of times a Bell number has been used\n\n    # Return the number of ways to partition the set and the number of times a Bell number has been used\n    return ways, times"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if all the elements in the array are non-negative\n    for i in range(len(A)-1):\n        if A[i] >= A[i+1]:\n            return False\n\n    # Check if all the elements in the array are non-positive\n    for i in range(len(A)-1):\n        if A[i] <= A[i+1]:\n            return False\n\n    # If no element in the array is non-negative and non-positive, then the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # First, we need to check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # Next, we check if the array is a single element array\n    elif len(A) == 1:\n        return True\n    \n    # If the array has multiple elements, we check if all the elements are either increasing or decreasing\n    else:\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n            elif A[i] < A[i-1]:\n                return True\n            \n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes a list A as input and returns True if it is monotonic or False otherwise.\n    If the array is monotonic, then it will have a non-increasing sequence.\n    '''\n    if len(A) <= 1:\n        return True\n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n    else:\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n <= 1:\n        return True\n\n    # check for non-increasing case\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n\n    # check for non-decreasing case\n    for i in range(n-2, -1, -1):\n        if A[i] > A[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            continue\n        else:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if array is empty or has only one element\n    if len(A) <= 1:\n        return True\n    \n    # Initialize variables to keep track of the current and previous values in the array\n    current = A[0]\n    prev = A[0]\n    \n    # Iterate over the array and check if the values increase or decrease from previous value\n    for i in range(1, len(A)):\n        if A[i] >= current:\n            if A[i] <= prev:\n                return False\n            current = A[i]\n        else:\n            if A[i] >= prev:\n                return False\n            current = A[i]\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Find the first and last elements of the array\n    first = A[0]\n    last = A[-1]\n\n    # Check if the first element is smaller than or equal to the second element\n    if first > A[1]:\n        return False\n    # Check if the last element is greater than or equal to the second to last element\n    elif last < A[-2]:\n        return False\n    else:\n        # If both conditions are true, the array is monotonic\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A and returns True if it is monotonic, i.e. increasing or decreasing.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Initialize variables\n    n = len(A) \n    is_increasing = True\n    is_decreasing = True\n\n    # Check if array is increasing\n    for i in range(1, n): \n        if A[i] < A[i-1]: \n            is_increasing = False\n            break\n\n    # Check if array is decreasing\n    for i in range(n-2, -1, -1): \n        if A[i] > A[i+1]: \n            is_decreasing = False\n            break\n\n    # Return True if both increasing and decreasing, False otherwise\n    return (is_increasing and is_decreasing)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    This function checks whether a list contains the given sublist or not.\n\n    Parameters:\n    l (list): The list which may or may not contain the sublist.\n    s (list): The sublist to be searched for in the list.\n\n    Returns:\n    bool: True if the sublist is present in the list, else False.\n\n    Examples:\n    >>> is_sublist([1,2,3], [2])\n    True\n    >>> is_sublist([1,2,3], [4])\n    False\n    >>> is_sublist([1,2,3], [2,3])\n    True\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    for i in l:\n        if i in s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] in s:\n        return is_sublist(l[1:], s)\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if s == l[i:]:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    for i in l:\n        if i in s and is_sublist(s[s.index(i)+1:], s):\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(set(i)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    flag = True\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            flag = False\n            break\n    return flag"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # loop through the list of tuples\n    for tup in Input:\n        # check if all the elements in the tuple are of the same type\n        if not all(isinstance(elem, type(tup[0])) for elem in tup):\n            return False\n        # if all the elements are of the same type, check if they have the same length\n        if len(set(len(elem) for elem in tup))!= 1:\n            return False\n    # if all the tuples are of equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    equal_length = True\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            equal_length = False\n            break\n    return equal_length"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not isinstance(Input, list):\n        return \"Input is not a list\"\n    if len(Input) == 0:\n        return \"List is empty\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return \"All the tuples in the list should have equal length\"\n    return \"All the tuples in the list have equal length\""
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(set(i)):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n    start = 0\n\n    while swapped:\n        swapped = False\n        for i in range(start, n):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        gap = (gap * 13) // 10\n        start = 0\n        while gap > 1 and start + gap < n:\n            gap = (gap * 13) // 10\n        start += gap"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    This function sorts a list of elements using the Comb Sort algorithm.\n\n    Parameters:\n    nums (list): A list of integers to be sorted.\n\n    Returns:\n    The sorted list.\n    '''\n\n    # Define parameters for the algorithm\n    gap = len(nums) // 2\n    swapped = True\n    n = len(nums)\n\n    while swapped:\n        swapped = False\n\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                swapped = True\n\n        gap = int(gap * 1.3)\n\n        if gap == 1:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    start = 0\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(start, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap * 0.75)\n        start += gap\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    # Define the parameters for the algorithm\n    n = len(nums)\n    gap = n\n    count = 0\n    swapped = True\n\n    # Iterate until the gap size is reduced to 1\n    while gap > 1 or swapped:\n\n        # Calculate the new gap size\n        if gap == 1:\n            gap = n\n        else:\n            gap = int(gap / 1.3)\n\n        # Set the swapped flag to false\n        swapped = False\n\n        # Iterate through the list using the gap size\n        for i in range(n - gap):\n\n            # If the elements are out of order, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        # Increment the count of comparisons\n        count += n - gap\n\n        # If the gap size has not reduced, the list is already sorted\n        if gap == 1 or swapped == False:\n            break\n\n    # Return the sorted list and the number of comparisons\n    return nums, count"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n\n    The comb sort algorithm is a sorting algorithm that has a time complexity of O(n^2).\n\n    Args:\n        nums: a list of elements to be sorted.\n\n    Returns:\n        A sorted list.\n    '''\n\n    # Initialize the gap and the swaps count\n    gap = len(nums)\n    swaps = 0\n\n    # Keep iterating until the gap is reduced to 1\n    while gap > 1:\n        # Reduce the gap by half\n        gap = int(gap/2)\n\n        # Reset the swaps count\n        swaps = 0\n\n        # Perform the comb sort algorithm on the list\n        for i in range(len(nums)-gap):\n            # Compare the current element with the next element\n            if nums[i] > nums[i+gap]:\n                # Swap the elements if they are in the wrong order\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swaps += 1\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        A sorted list of integers.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    i = 1\n    while swapped:\n        swapped = False\n        gap = n // i\n        for j in range(gap):\n            if nums[j] > nums[j + gap]:\n                nums[j], nums[j + gap] = nums[j + gap], nums[j]\n                swapped = True\n        i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        \n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        \n        if not swapped:\n            break\n        \n        gap = int(gap/1.3)\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n\n    # Initialize variables\n    n = len(nums)\n    swapped = True\n\n    # Loop until the list is sorted\n    while swapped:\n        swapped = False\n\n        # Iterate through the list and compare adjacent elements\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n\n        # Decrement the number of passes through the list\n        n -= 1\n\n        # Check if the list is sorted\n        if n == 0:\n            break"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # define the default swap function\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # define the default iteration function\n    def iteration(nums, n, swap):\n        gap = n // 2\n\n        while gap > 0:\n            for i in range(gap, n):\n                j = i\n                while j >= gap and nums[j - gap] > nums[j]:\n                    swap(nums, j, j - gap)\n                    j -= gap\n            gap //= 1\n\n        return nums\n\n    # sort the list using the comb sort algorithm\n    return iteration(nums, len(nums), swap)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the given number can be expressed as the difference of two squares\n    x = (n // 2) ** 2\n    y = (n - x) ** 2\n    if x + y == n:\n        print(\"The number can be expressed as the difference of two squares.\")\n    else:\n        print(\"The number cannot be expressed as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # check if n is a square\n    if n * n == n:\n        return True\n    else:\n        # check if n is a difference of two squares\n        for i in range(1, int(n**0.5) + 1):\n            if i * i == n:\n                return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    # Check if n can be represented as the difference of two squares or not.\n    for i in range(1, int(n**0.5)+1):\n        if i**2 + n - i**2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the input is a positive integer\n    if type(n)!= int or n <= 0:\n        return \"The input must be a positive integer.\"\n\n    # Find the square of the input\n    square = n ** 2\n\n    # Check if the square of the input is equal to the input itself\n    if square == n:\n        return \"The given number can be represented as the difference of two squares.\"\n\n    # Find the difference between the square of the input and the input itself\n    diff = abs(square - n)\n\n    # Check if the difference is a square\n    for i in range(1, diff+1):\n        if diff ** 2 == i ** 2:\n            return \"The given number can be represented as the difference of two squares.\"\n\n    # If none of the above conditions are true, the number cannot be represented as the difference of two squares\n    return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n\n    # Calculate the square of the given number\n    square = n ** 2\n\n    # Check if the square of the given number can be represented as the difference of two squares\n    if n - square % (n - square) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if n == i**2 or n == (n-i)**2:\n                return True\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Find the square of the input number\n    square = int(n**0.5)\n\n    # Check if the square of the input number is a perfect square\n    if square**2 == n:\n        return True\n\n    # Check if the square of the input number is within 5 of the actual square\n    for i in range(square, n-square):\n        if i**2 == n:\n            return True\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    This function takes a positive integer n as input and returns True if the given number can be represented as the \n    difference of two squares or False otherwise.\n    '''\n    # We start with the square of n and then check if it is a perfect square\n    square = n * n\n    if square == n:\n        return True\n    # If the square is not a perfect square, we check if it is a difference of two squares\n    else:\n        for i in range(int(n ** 0.5) + 1):\n            if n % i == 0 and n // i == i:\n                return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    if n < 0:\n        return False\n    a = int(n**0.5)\n    b = n - a**2\n    if b < 0:\n        return False\n    return (a*a == b) or (a*a < b)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    # Check if n is a perfect square\n    if n**0.5**2 == int(n**0.5**2):\n        # Check if n is a difference of two squares\n        if (int(n**0.5**2) + int(n**0.5**2) == n and int(n**0.5**2) + int(n**0.5**2) == int(n**0.5**2)) or \\\n           (int(n**0.5**2) - int(n**0.5**2) == n and int(n**0.5**2) - int(n**0.5**2) == int(n**0.5**2)):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # loop through the colors\n    for i in range(len(colors)):\n        # check if the current color matches with the pattern at index i\n        if colors[i] == patterns[i]:\n            # check if the next pattern is also present in the colors list\n            if i < len(patterns) - 1 and patterns[i+1] in colors:\n                # if it is, move the current index to the next pattern index\n                colors.remove(colors[i])\n                i += 1\n            else:\n                # if the next pattern is not present in the colors list or if there is no next pattern, return False\n                return False\n        else:\n            # if the current color does not match with the pattern at index i, return False\n            return False\n    # if all the colors in the colors list match with the patterns in the patterns list, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Create a dictionary to store the number of occurrences of each color in the input array\n    color_count = {}\n    \n    # Iterate over the input array of colors\n    for color in colors:\n        # If the color is already in the dictionary, increment its count by 1\n        if color in color_count:\n            color_count[color] += 1\n        # Otherwise, add the color to the dictionary with a count of 1\n        else:\n            color_count[color] = 1\n            \n    # Initialize a variable to keep track of the current pattern index\n    pattern_index = 0\n    \n    # Iterate over the patterns array\n    for pattern in patterns:\n        # If the current pattern matches the expected sequence, increment the pattern_index\n        if color_count[pattern[0]] == pattern[1] and (pattern_index == 0 or patterns[pattern_index-1]!= pattern[0:2]):\n            pattern_index += 1\n        # If the current pattern doesn't match the expected sequence, return False\n        else:\n            return False\n            \n    # If we make it through the entire patterns array without finding a mismatch, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors_length = len(colors)\n    for i in range(colors_length):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize variables to keep track of the current color and the number of times we have seen that color\n    current_color = None\n    num_times_seen = 0\n\n    # Loop through the colors and patterns arrays\n    for i in range(len(colors)):\n        # If the current color matches the one in the patterns array\n        if colors[i] == patterns[i]:\n            # Increment the number of times we have seen that color\n            num_times_seen += 1\n            # If we have seen all the colors in the patterns array, we have found a sequence that follows the patterns\n            if num_times_seen == len(patterns):\n                return True\n        else:\n            # If the current color does not match the one in the patterns array, reset the number of times we have seen that color\n            num_times_seen = 0\n            # If we have gone through all the colors in the colors array, we have gone through all the sequences that follow the patterns\n            if i == len(colors) - 1:\n                return False\n    # If we have gone through all the patterns without finding a sequence that follows the patterns, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Initialize a counter for the number of same patterns\n    count = 0\n    \n    # Initialize a list to store the last pattern in the sequence\n    last_pattern = None\n    \n    # Loop through the colors and patterns\n    for color, pattern in zip(colors, patterns):\n        # If the current color is the same as the last color in the sequence\n        if color == last_pattern:\n            # Increment the counter for the number of same patterns\n            count += 1\n        # Otherwise, set the last pattern to the current color\n        else:\n            last_pattern = color\n            \n    # Check if the number of same patterns is equal to the length of the patterns array\n    if count == len(patterns):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    pattern_count = [0] * len(colors)\n\n    for color in colors:\n        if color in pattern_count:\n            pattern_count[pattern_count.index(color)] += 1\n        else:\n            pattern_count.append(1)\n\n    for pattern in patterns:\n        if pattern not in pattern_count or pattern_count[pattern_count.index(pattern)] == 0:\n            return False\n        pattern_count[pattern_count.index(pattern)] -= 1\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize the count of patterns that are repeated\n    repeated_count = 0\n\n    # Initialize the count of patterns that are unique\n    unique_count = 0\n\n    # Initialize the pattern index\n    pattern_index = 0\n\n    # Iterate through the colors in the array\n    for color in colors:\n        # If the current color matches the current pattern in the patterns array\n        if color == patterns[pattern_index]:\n            # Increment the pattern index\n            pattern_index += 1\n\n            # If the pattern index has reached the end of the patterns array\n            if pattern_index == len(patterns):\n                # Increment the repeated count\n                repeated_count += 1\n                # Reset the pattern index to 0\n                pattern_index = 0\n        else:\n            # If the current color is not the same as the current pattern in the patterns array\n            # Increment the unique count\n            unique_count += 1\n            # Reset the pattern index to 0\n            pattern_index = 0\n\n    # Return True if the repeated count is equal to the unique count, False otherwise\n    return repeated_count == unique_count"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two lists, one for the colors and the other for the patterns, and checks whether they follow the same sequence.\n    '''\n    if len(patterns)!= len(colors):\n        return False\n    else:\n        for i in range(len(patterns)):\n            if colors[i]!= patterns[i]:\n                return False\n        return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(test_list[i][k] % K == 0 for k in range(len(test_list[i]))) and all(test_list[j][k] % K == 0 for k in range(len(test_list[j]))):\n                print(test_list[i], test_list[j])"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples (test_list) and an integer (K) as input.\n    It returns a list of all tuples that have all elements divisible by K.\n    \"\"\"\n    # Create an empty list to store the resulting tuples\n    result = []\n\n    # Loop over the tuples in the test_list\n    for tup in test_list:\n        # If all elements are divisible by K, add the tuple to the result list\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append(test_list[i] + test_list[j])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                result.append(tuple(sorted(test_list[i] + test_list[j])))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        count = 0\n        for elem in tup:\n            if elem % K == 0:\n                count += 1\n                if count == len(tup):\n                    result.append(tup)\n                    break\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible_tup = True\n        for num in tup:\n            if num % K!= 0:\n                divisible_tup = False\n                break\n        if divisible_tup:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_list = []\n    for tuple in test_list:\n        all_divisible = True\n        for element in tuple:\n            if element % K!= 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            tuples_list.append(tuple)\n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        all_divisible = True\n        for num in t:\n            if num % K!= 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(t)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    This function takes an integer as input and returns True if it is divisible by 11, \n    and False otherwise. \n    '''\n    \n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    # Check if the number is divisible by 11\n    if n % 11 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0]\n    if len(word) % 2 == 0:\n        return 'The length of the word is even.'\n    else:\n        return 'The length of the word is odd.'"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(word, \"is odd.\")\n        else:\n            print(word, \"is even.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the word is odd, else it returns False.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and returns True if the length of the word is odd, \n    False otherwise.\n    '''\n    if len(s.split()) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() \n    for word in words: \n        if len(word) % 2!= 0: \n            return True \n    return False \n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(f\"{s} is an even word.\")\n    else:\n        print(f\"{s} is an odd word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, \"is an even length word.\")\n        else:\n            print(word, \"is an odd length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(f\"{s} is an even length word\")\n    else:\n        print(f\"{s} is an odd length word\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.lower()\n    word = \"\"\n    for char in s:\n        if char.isalpha():\n            word += char\n    return len(word) % 2 == 1"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize variables for the nth tetrahedral number\n    a = 1\n    b = 2\n    c = 4\n    d = 8\n\n    # Calculate the nth tetrahedral number\n    for i in range(1, n):\n        a, b, c, d = b, c, d + 2, a + b + c\n\n    # Return the nth tetrahedral number\n    return d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum([i**2 for i in range(1, n+1)])"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    a = 1\n    b = 4\n    c = 4 * n + 1\n    d = 2 * n * n + 1\n    tetrahedron = a * b * c * d\n    return tetrahedron"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # We can easily calculate the nth tetrahedral number using a formula:\n    # T(n) = n(n+1)(n+2) / 6\n    # Since we know that the first three numbers in the sequence are 0, 1, and 3,\n    # we can use the formula for T(n-3) to calculate T(n) for n > 3.\n    return (n * (n + 1) * (n + 2)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (2 * n + 1) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) * (n + 3) // 6 "
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 0\n    for i in range(1, n+1):\n        t = (t * i * (4*i-1)) // (i-1)\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n+1) * (2*n+1)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Start with the number of edges\n    num_edges = 1\n\n    # Iterate over the number of sides\n    for i in range(1, n+1):\n        # Add the number of edges multiplied by the number of sides\n        num_edges += i * num_edges\n\n    return num_edges"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * (r ** 3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    This function calculates the volume of a sphere with radius r.\n    \"\"\"\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return chr((ascii_val % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for i in strr:\n        sum_ascii += ord(i)\n    return chr((sum_ascii % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = 0\n    for char_i in strr:\n        char += ord(char_i)\n    char = char % 26\n    return chr(char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ASCII_value = 0\n    for i in range(len(strr)):\n        ASCII_value += ord(strr[i])\n    \n    return chr((ASCII_value % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        sum += ord(strr[i])\n    return chr((sum % 26) + 97)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    return chr((char % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char)\n    return chr((result % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_value = 0\n    for char in strr:\n        char_value += ord(char)\n    return chr((char_value % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + ord('a'))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    conway_sequence = [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1]\n    return conway_sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize the sequence with the first two numbers in the sequence\n    sequence = [1, 1]\n\n    # Iterate n-2 times to generate the rest of the sequence\n    for i in range(2, n):\n        # Generate the next number in the sequence by adding the current number and the next number in the sequence\n        next_number = sequence[i-1] + sequence[i]\n        # Add the next number to the sequence\n        sequence.append(next_number)\n\n    # Return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + 2"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(n-1):\n        next_num = len(sequence) + 1\n        sequence.append(next_num)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    # Initialize the sequence\n    sequence = [1]\n    # Iterate over the first n-1 numbers\n    for i in range(1, n-1):\n        # Generate the next number in the sequence\n        next_number = sequence[i-1] + sequence[i-2]\n        # Add it to the sequence\n        sequence.append(next_number)\n    # Return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 0]\n    for i in range(2, n+1): \n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    while len(sequence) < n:\n        next_sequence = []\n        for i in range(1, len(sequence)):\n            if sequence[i] % 2 == 0:\n                next_sequence.append(sequence[i] + sequence[i-1])\n            else:\n                next_sequence.append(sequence[i] - sequence[i-1])\n        sequence = next_sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1] # initialize the sequence with the first number (1)\n    for i in range(2, n+1): # iterate from the second number to the nth number\n        sequence.append(sequence[-1] + sequence[-2]) # add the sum of the last two numbers to the sequence\n    return sequence[n-1] # return the nth number in the sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*(r**2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r ** 3 # formula for surface area of a sphere\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Using the formula for the surface area of a sphere, we can find the surface area as follows:\n    # Surface Area = 4 * pi * r^2\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function takes a radius r and returns the surface area of a sphere.\n\n    Args:\n        r (float): The radius of the sphere.\n\n    Returns:\n        float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n\nprint(surfacearea_sphere(5)) # Output: 318.0"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere given its radius.\n    '''\n    return 4*math.pi*r**2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Define the formula for centered hexagonal number\n    # H_i = (5i^2 - 3i) / 2\n    # H_{n-1} = (5n-3) / 2\n    # H_i - H_{n-1} = 2(n-1)\n    # H_i - H_{n-1} = 2(n) - 1\n    # H_i = (5n-3) / 2 + 1\n\n    # Calculate the nth centered hexagonal number\n    H_i = (5 * n * n - 3 * n) / 2 + 1\n\n    # Return the nth centered hexagonal number\n    return H_i"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal(n):\n        if n == 0:\n            return 1\n        else:\n            return centered_hexagonal(n-1) * centered_hexagonal(n-2)\n\n    return centered_hexagonal(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((n**2) - (3*n) + 1) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    a = 1\n    b = 1\n    while a < n:\n        a = 3*a + 1\n        b = 2*a + 1\n    return b - 1\n\nn = 10\nprint(centered_hexagonal_number(n))  # Output: 8"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return 0\n    else:\n        num = (3*n**2 + 1)//2\n        return num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    k = 3 * n + 1\n    hex_num = (k * (k - 1)) // 2\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    # First centered hexagonal number is 1\n    if n == 1:\n        return 1\n    \n    # Calculate the number of rows and columns\n    rows = (n - 1) // 2\n    cols = n - 2 * rows - 1\n    \n    # Calculate the sum of the central numbers\n    sum_central = 1 + rows + cols\n    \n    # Calculate the sum of the remaining numbers\n    remaining = 2 * rows + cols + 1\n    \n    # Calculate the centered hexagonal number\n    return sum_central * (2 * rows + 1) + remaining"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    n_terms = n * 2 - 1\n    \n    # Iterate through the required number of terms\n    for i in range(n_terms):\n        a = (a + b) // 2\n        b = (a + b) // 2\n        c = (a + b) // 2\n        d = (a + b) // 2\n        \n    # Return the final centered hexagonal number\n    return (a + b + c + d) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n\n    if n < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n\n    # Calculate the number of centers\n    num_centers = (n - 1) // 2\n\n    # Calculate the total number of centers\n    total_centers = num_centers + 1\n\n    # Calculate the position of each center\n    centers = []\n    for i in range(num_centers):\n        center = total_centers - i\n        centers.append(center)\n\n    # Calculate the coordinates of each center\n    center_coordinates = []\n    for center in centers:\n        # Calculate the x and y coordinates of the center\n        y = ((center - 1) * (2 * center - 1)) // 3\n        x = (2 * center - 1) * (2 * center - 1) + 1\n        center_coordinates.append((x, y))\n\n    # Calculate the final result\n    result = center_coordinates[0][0]\n    for center in centers:\n        result += center_coordinates[center - 1][0]\n\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        if key in dict2.keys():\n            if key in dict3.keys():\n                merged_dict[key] = max(dict1[key], dict2[key], dict3[key])\n            else:\n                merged_dict[key] = dict1[key]\n        else:\n            if key in dict3.keys():\n                merged_dict[key] = dict3[key]\n            else:\n                merged_dict[key] = None\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    merged_dict = dict1.copy()\n\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            merged_dict[key] = merged_dict[key] + value\n\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            merged_dict[key] = merged_dict[key] + value\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            merged_dict[key] = dict1[key] if dict1[key] > dict2[key] else dict2[key]\n        elif key in dict2:\n            merged_dict[key] = dict1[key] if dict1[key] > dict2[key] else dict2[key]\n        elif key in dict3:\n            merged_dict[key] = dict1[key] if dict1[key] > dict3[key] else dict3[key]\n        else:\n            merged_dict[key] = dict1[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n    dict1 (dict): First dictionary to be merged.\n    dict2 (dict): Second dictionary to be merged.\n    dict3 (dict): Third dictionary to be merged.\n\n    Returns:\n    dict: The merged dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(list)\n    for key, value in dict1.items():\n        merged_dict[key].append(value)\n    for key, value in dict2.items():\n        merged_dict[key].append(value)\n    for key, value in dict3.items():\n        merged_dict[key].append(value)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Parameters:\n    dict1 (dict): First dictionary to be merged.\n    dict2 (dict): Second dictionary to be merged.\n    dict3 (dict): Third dictionary to be merged.\n\n    Returns:\n    dict: Merged dictionary.\n    \"\"\"\n    # Merge dict1 and dict2\n    merged = ct.ChainMap(dict1, dict2)\n\n    # Merge dict3 with the merged dict\n    merged = ct.ChainMap(merged, dict3)\n\n    # Convert the merged dictionary back to a regular dictionary\n    result = dict(merged)\n\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            merged_dict[key] = max(dict1[key], dict2[key], dict3[key])\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        elif key in dict3:\n            merged_dict[key] = dict3[key]\n        else:\n            merged_dict[key] = dict1[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy() # Create a copy of dict1\n    merged_dict.update(dict2) # Update the copy with dict2's key-value pairs\n    merged_dict.update(dict3) # Update the copy with dict3's key-value pairs\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    # create an empty dictionary to store the frequency count of elements in the list\n    freq_dict = {}\n\n    # loop through the list and update the frequency count of each element in the dictionary\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Returns a dictionary with the frequency of each element in the input list.\n    '''\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def freq_count(lst):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in the list.\n    \"\"\"\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in lst:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of elements\n    freq_dict = {}\n\n    # Loop through each element in the list and update the frequency in the dictionary\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int) # using defaultdict to create a dictionary with integer values\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    smallest = N\n    closest = N\n    diff = abs(N)\n    # Loop through the list of numbers until the smallest number is found\n    for num in range(2, N):\n        if abs(num - N) < diff:\n            smallest = num\n            diff = abs(num - N)\n    # Return the smallest number found\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    min_diff = abs(N)\n    min_num = N\n    \n    for i in range(1, N):\n        diff = abs(i - N)\n        if diff < min_diff:\n            min_diff = diff\n            min_num = i\n    \n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    min_diff = float('inf')\n    closest = float('inf')\n\n    # Loop through all possible numbers from 1 to N\n    for num in range(1, N+1):\n        # Calculate the difference between the current number and N\n        diff = num - N\n\n        # Check if the current difference is smaller than the minimum difference\n        if diff < min_diff:\n            # If it is, update the minimum difference and closest number\n            min_diff = diff\n            closest = num\n\n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    n = int(N)\n    smallest = n - 1\n    for i in range(n):\n        if i % 2 == 0:\n            smallest = min(smallest, i)\n        else:\n            smallest = max(smallest, i)\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    n = int(input(\"Enter a number: \"))\n    nums = []\n    for i in range(1, N+1):\n        nums.append(i)\n    min_diff = float('inf')\n    closest_num = float('inf')\n    for num in nums:\n        diff = abs(num-N)\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = num\n    print(\"The closest smaller number is:\", closest_num)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n\n    Parameters:\n    N (integer): The number whose smaller number we want to find.\n\n    Returns:\n    integer: The smallest number that is smaller than N.\n    '''\n    def closest_smaller(n):\n        '''\n        Write a function to find the closest smaller number than n.\n\n        Parameters:\n        n (integer): The number whose smaller number we want to find.\n\n        Returns:\n        integer: The smallest number that is smaller than n.\n        '''\n        smaller = n - 1\n        if smaller < 0:\n            return 0\n        for i in range(2, n + 1):\n            if n % i == 0:\n                return i\n        return smaller\n\n    return closest_smaller(N)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    # Initialize variables\n    min_diff = float('inf')\n    closest_num = N\n\n    # Check all numbers from 1 to N-1\n    for num in range(1, N):\n        # Calculate the difference between current number and N\n        diff = abs(N - num)\n\n        # If the difference is smaller than the current minimum difference, update the closest number and minimum difference\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = num\n\n    # Return the closest smaller number\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize min and max values\n    min_val = float('inf')\n    max_val = float('-inf')\n    \n    # Loop through the numbers from 1 to N\n    for num in range(1, N+1):\n        # Check if the current number is smaller than min value\n        if num < min_val:\n            min_val = num\n        # Check if the current number is greater than max value\n        elif num > max_val:\n            max_val = num\n    \n    # Find the absolute difference between the minimum and maximum values\n    diff = abs(max_val - min_val)\n    \n    # If the difference is less than or equal to 1, return the minimum value\n    if diff <= 1:\n        return min_val\n    # Otherwise, return the maximum value\n    else:\n        return max_val"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    \"\"\"\n    This function finds the closest smaller number than the input number N.\n    \"\"\"\n    smallest = N\n    for i in range(N, 1, -1):\n        if i % 2 == 0:  # if i is even\n            if abs(smallest - i) < abs(smallest - N):  # if i is closer to smallest\n                smallest = i\n        else:  # if i is odd\n            if abs(smallest - i) < abs(smallest - N):  # if i is closer to smallest\n                smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    num_list = [1, 2, 3, 4, 5]\n    closest_num = num_list[0]\n    for i in range(1, len(num_list)):\n        if abs(N - closest_num) > abs(N - num_list[i]):\n            closest_num = num_list[i]\n    return closest_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of strings.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize variables\n    longest = 0\n    current = ''\n\n    # loop through the list of words\n    for word in list1:\n        # check if the current word is longer than the previous longest word\n        if len(word) > longest:\n            longest = len(word)\n            current = word\n\n    # return the length of the longest word\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of words.\n    '''\n    \n    # Initialize variables\n    max_length = 0\n    current_length = 0\n    \n    # Loop through the list of words\n    for word in list1:\n        \n        # Check if the length of the current word is greater than the current maximum length\n        if len(word) > current_length:\n            max_length = current_length\n            current_length = len(word)\n            \n        # Update the current length of the word\n        current_length += 1\n        \n    # Return the maximum length of the word\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    \n    max_len = 0\n    longest_word = ''\n    \n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n            longest_word = word\n    \n    return longest_word"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list or type(sub_str)!= str:\n        return \"Invalid input. Both arguments must be lists of strings.\"\n    \n    # Loop through the list of strings\n    for s in str1:\n        if sub_str in s:\n            return s\n    \n    # If we get here, the substring was not found in any of the strings\n    return \"Substring not found in any of the strings.\""
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list) and isinstance(sub_str, str):\n        for item in str1:\n            if sub_str in item:\n                return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not sub_str:\n        return False\n    sub_list = sub_str.split()\n    for word in str1.split():\n        if word in sub_list:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert the list of strings to a set to remove duplicates\n    str1 = set(str1)\n    # Loop through the list of strings\n    for s in str1:\n        # Check if the substring is present in the string\n        if sub_str in s:\n            return True\n    # If no substring is found, return False\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 1 and (n % 2 == 0 or n % 10 == 5):\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # If n is greater than 100, it is undulating\n    if n > 100:\n        return True\n    # If n is less than or equal to 100, it is not undulating\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n\n    # Check if the number is positive or negative\n    if n > 0:\n        # Calculate the sum of squares of odd numbers up to n/2\n        odd_sum = sum(i**2 for i in range(3, n, 2))\n\n        # Check if the sum of squares of odd numbers is less than or equal to n\n        if odd_sum <= n:\n            return True\n        else:\n            return False\n\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    elif n > 2 and n % 4!= 0:\n        return False\n    elif n % 4 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        return is_undulating(n-1) or is_undulating(n-2)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    This function takes an integer as input and returns True if the number is undulating and False otherwise.\n    A number is undulating if the sum of its digits raised to the power of 2 is equal to the number itself.\n    For example, 14 is undulating because 1^2 + 4^2 = 1^2 + 16 = 25, and 25 is the same as 14.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    power = 1\n    undulating = True\n    for digit in digits:\n        if digit ** power!= digit:\n            undulating = False\n            break\n        power *= 10\n    if undulating:\n        return True\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    minimum = None\n    minimum_index = None\n    \n    for i in range(len(test_list)):\n        if minimum is None or test_list[i][1] < minimum:\n            minimum = test_list[i][1]\n            minimum_index = i\n    \n    return minimum_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i, item in enumerate(test_list):\n        if item[1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by second value in ascending order using the itemgetter() function from the operator module\n    test_list.sort(key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple in the list with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Use the built-in `min` function to get the index of the minimum value in the list of tuples\n    min_index = min(range(len(test_list)), key=lambda i: test_list[i][1])\n    \n    # Return the first value of the tuple at the minimum index\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list of tuples based on the second element of each tuple (using the itemgetter function from the operator module)\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list, which should be the minimum value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value using the itemgetter function from the operator module\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for sublist in lst:  \n        if len(sublist) < min_length:  \n            min_length = len(sublist)  \n    return min_length  "
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = None\n    for sublist in lst:\n        if min_length is None or len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    min_length = len(lst[0])\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000000\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = float('inf') # initialize the minimum length to infinity\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as an input and returns the length of the smallest list in the list.\n    \"\"\"\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for i in range(len(lst)):  \n        for j in range(len(lst[i])):  \n            if len(lst[i][j]) < min_length:  \n                min_length = len(lst[i][j])  \n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # initialize the count variable to zero\n    count = 0\n    # loop through all possible divisors from 1 to the square root of n\n    for i in range(1, int(n**0.5)+1):\n        # if n is divisible by i, add 1 to the count variable\n        if n % i == 0:\n            count += 1\n    # return the count variable\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # Check if the input is positive\n    if n <= 0:\n        return \"Input must be a positive integer\"\n\n    # Initialize a list to store the divisors\n    divisors = []\n\n    # Find all the divisors of n and add them to the list\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n\n    # Return the length of the list as the number of divisors\n    return len(divisors)"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the list\n    for element in list1:\n\n        # Check if the element is already in the dictionary. If it is, increment its frequency by 1.\n        if element in freq_dict:\n            freq_dict[element] += 1\n\n        # If the element is not in the dictionary, add it with a frequency of 1.\n        else:\n            freq_dict[element] = 1\n\n    # Return the dictionary of frequency of each element in the flattened list\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Initialize an empty dictionary to store the frequency of each element\n    freq = {}\n\n    # Iterate over each element in the list\n    for element in list1:\n        # If the element is not a list, add it to the dictionary with a frequency of 1\n        if not isinstance(element, list):\n            freq[element] = 1\n        # If the element is a list, flatten it and add its elements to the dictionary\n        else:\n            freq.update(frequency_lists(element))\n\n    # Return the dictionary of frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the list1\n    for item in list1:\n\n        # If the item is a list, recursively call the function and add the frequency to the frequency dictionary\n        if type(item) == list:\n            for sub_item in item:\n                if sub_item in freq_dict:\n                    freq_dict[sub_item] += 1\n                else:\n                    freq_dict[sub_item] = 1\n        # If the item is not a list, add its frequency to the frequency dictionary\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n\n    # Return the final frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq:\n                freq[subitem] += 1\n            else:\n                freq[subitem] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary\n    freq_dict = {}\n    # Loop through each element in the list1\n    for item in list1:\n        # If the element is not in the dictionary yet, add it with a count of 1\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        # If the element is already in the dictionary, increment its count by 1\n        else:\n            freq_dict[item] += 1\n    # Return the dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Loop through each element in the list\n    for item in list1:\n        # If the element is a list, recursively call the function on it\n        if isinstance(item, list):\n            # Recursively call the function with the element as the argument\n            freq_dict.update(frequency_lists(item))\n        # Otherwise, check if the element is already in the dictionary\n        elif item in freq_dict:\n            # Increment the frequency count of the element by 1\n            freq_dict[item] += 1\n        # Otherwise, add the element and its frequency count to the dictionary\n        else:\n            freq_dict[item] = 1\n    # Return the final dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n\n    def flatten(lst):\n        \"\"\"\n        Helper function to flatten a list of lists.\n        \"\"\"\n        flat_lst = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_lst.extend(flatten(item))\n            else:\n                flat_lst.append(item)\n        return flat_lst\n\n    flat_list = flatten(list1)\n    freq_dict = {}\n\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # initialize an empty dictionary\n    freq_dict = {}\n    # loop through each element in the list\n    for element in list1:\n        # if the element is a list, recursively call the function on that list and add the result to the freq_dict\n        if type(element) == list:\n            freq_dict.update(frequency_lists(element))\n        # if the element is not a list, add it to the freq_dict with a value of 1\n        else:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    # return the final freq_dict\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist] # flatten the list of lists\n    frequency = {}\n    for item in flattened_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n    Args:\n    list1 (list of lists): A flattened list of lists.\n\n    Returns:\n    dict: A dictionary with keys as elements in the input list and values as their frequencies in the input list.\n    \"\"\"\n    freq_dict = {}\n\n    # Flatten the list\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Count frequency of each element in the flattened list\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    # Convert the decimal number to a string\n    dec_str = str(n)\n\n    # Initialize an empty string to store the binary equivalent of the decimal number\n    binary_str = \"\"\n\n    # Convert each digit of the decimal number to its binary equivalent and append it to the binary_str\n    for digit in dec_str:\n        binary_digit = bin(int(digit))[2:]  # Convert each digit to its binary equivalent by removing the '0b' prefix\n        binary_str += binary_digit\n\n    # Remove leading zeros from the binary_str\n    while binary_str.startswith('0'):\n        binary_str = binary_str[1:]\n\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_representation = \"\"\n    while n > 0:\n        binary_representation = str(n % 2) + binary_representation\n        n = n // 2\n    return binary_representation"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0: \n        return '0' \n    else: \n        binary = \"\" \n        while n > 0: \n            binary = str(n % 2) + binary \n            n //= 2 \n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # Initialize the binary string\n    binary = \"\"\n\n    # Convert the decimal number to its binary equivalent\n    while n > 0: \n        # Append the remainder of n divided by 2 to the binary string\n        binary = str(n % 2) + binary\n\n        # Remove the last digit from n\n        n = n // 2\n\n    # Reverse the binary string\n    binary = binary[::-1]\n\n    # Return the binary string\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    # Convert decimal to binary recursively\n    if n == 0: \n        return \"\"\n    else: \n        remainder = n % 2 \n        binary = decimal_to_binary(n // 2) \n        return binary + str(remainder) "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = num - 1\n    while not is_palindrome(n):\n        n -= 1\n    return n + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n    # Find the largest palindrome less than or equal to the current number\n    largest_palindrome = 0\n    for i in range(10**(reversed_num.count('0')), 10**reversed_num.count('0')*10):\n        if is_palindrome(i) and i <= num:\n            largest_palindrome = i\n    # Find the next smallest palindrome that is larger than the largest palindrome\n    smallest_palindrome = num + 1\n    while smallest_palindrome <= largest_palindrome:\n        if is_palindrome(smallest_palindrome) and smallest_palindrome > num:\n            break\n        smallest_palindrome += 1\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n\n    # Define a list of palindromes up to 10^6 digits long\n    palindromes = [int(str(num)[::-1]), num, num*10, num*100, num*1000]\n\n    # Define a function to check if a number is a palindrome\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    # Iterate over the palindromes list and find the smallest one that is not a palindrome\n    for palindrome in palindromes:\n        if not is_palindrome(palindrome):\n            return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n\n    # Initialize a variable to store the smallest possible palindrome greater than the input number\n    smallest = num * 10 + 10\n\n    # Check if the smallest palindrome is a palindrome\n    while smallest > num:\n        is_palindrome = True\n        temp = smallest\n        while temp > 0:\n            if temp % 10!= smallest % 10:\n                is_palindrome = False\n                break\n            temp //= 10\n        if is_palindrome:\n            return smallest\n        smallest += 1\n\n    # If the smallest palindrome is not a palindrome, return -1 (to indicate failure)\n    return -1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef is_valid_palindrome(num):\n    return num > 10 and is_palindrome(num)\n\ndef next_smallest_palindrome(num):\n    while True:\n        new_num = num - 1\n        if is_valid_palindrome(new_num):\n            return new_num\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print('Usage: python next_smallest_palindrome.py <integer>')\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    print(next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    max_num = 10**(len(str(num))-1)\n    next_num = max_num\n    while not is_palindrome(next_num):\n        next_num += 1\n    return next_num\n\ndef is_palindrome(num):\n    '''\n    Check whether a given integer is a palindrome or not.\n    '''\n    return str(num) == str(num)[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Checks if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Finds the next smallest palindrome of a specified integer.\n    '''\n    if is_palindrome(num + 1):\n        return num + 1\n    elif is_palindrome(num - 1):\n        return num - 1\n    else:\n        return next_smallest_palindrome(num + 1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the given integer to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # Add 1 to the reversed integer\n    next_rev_num = rev_num + 1\n    # Convert the next reversed integer back to a string\n    next_rev_str = str(next_rev_num)\n    # Compare the reversed and next reversed strings to find the next smallest palindrome\n    for i in range(len(next_rev_str)):\n        if next_rev_str[i] < num_str[i]:\n            # Return the next smallest palindrome\n            return int(next_rev_str)\n    # If no next smallest palindrome is found, return the original integer\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Initialize a flag to check if the number is a palindrome\n    is_palindrome = True\n\n    # Loop through the digits of the number\n    for digit in str(num):\n\n        # If the digit is even, add 1 to get the next odd digit\n        if int(digit) % 2 == 0:\n            next_digit = int(digit) + 1\n\n        # If the digit is odd, add 1 to get the next even digit\n        else:\n            next_digit = int(digit) + 2\n\n        # If the next digit is greater than 9, subtract 9 and add 1\n        if next_digit > 9:\n            next_digit -= 9\n\n        # Check if the next digit is a palindrome\n        next_digit_str = str(next_digit)\n        for i in range(len(next_digit_str)):\n            if next_digit_str[i]!= next_digit_str[-i-1]:\n                is_palindrome = False\n                break\n\n        # If the number is not a palindrome, return the current number\n        if not is_palindrome:\n            return num\n\n    # If the number is a palindrome, the loop will exit, so add 1 to get the next smallest palindrome\n    return num + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(num)\n\n    # Reverse the string\n    num_str_reverse = num_str[::-1]\n\n    # Calculate the largest palindrome smaller than the given number\n    largest_palindrome = int(num_str_reverse + str(num))\n\n    # Find the next smallest palindrome by adding 1 to the largest palindrome\n    next_smallest_palindrome = largest_palindrome + 1\n\n    # Convert the next smallest palindrome to a string and return it\n    return int(next_smallest_palindrome)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if k is within the range of the array length\n    if k < 1 or k > len(arr):\n        raise ValueError('k is out of range')\n    \n    # Initialize two pointers, one at the beginning and one at the end of the array\n    left = 0\n    right = len(arr) - 1\n    \n    # Initialize variables to keep track of the position of the kth element\n    k_position = None\n    \n    # Keep iterating until the kth element is found\n    while left <= right:\n        # Calculate the middle index\n        middle = (left + right) // 2\n        \n        # Check if the kth element is at the middle index\n        if arr[middle] == k:\n            k_position = middle\n            right = middle - 1\n        # kth element is greater than the middle element\n        elif arr[middle] < k:\n            left = middle + 1\n        # kth element is less than the middle element\n        else:\n            right = middle - 1\n    \n    # Return the position of the kth element\n    return k_position"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    This function takes in an array and an integer k and returns the kth element in the array.\n    \"\"\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    left, right = 1, len(arr)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n\n    left = 1\n    right = len(arr)\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes in an array and a number k and returns the kth element of the array.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        raise ValueError(\"Index out of range\")\n\n    count = 0\n    for num in arr:\n        count += 1\n        if count == k:\n            return num\n"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        return kth_element(arr[1:], k-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words using underscores as separators\n    words = word.split('_')\n    # Capitalize the first letter of each word and join the words into a camel case string\n    return words[0] + ''.join(word.capitalize() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the string into words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    result = [w.capitalize() for w in words]\n    # Join the words with underscores\n    return '_'.join(result)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case_word = ''\n    for word in words:\n        camel_case_word += word.capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_word = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        elif word[i].isupper():\n            camel_word += \"_\" + word[i].lower()\n        else:\n            camel_word += word[i]\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i > 0 and char.isupper():\n            camel_case += char.lower()\n        else:\n            camel_case += char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = \"\"\n    for char in word:\n        if char == \"_\":\n            camel += char\n        elif camel == \"\":\n            camel += char.lower()\n        else:\n            camel += char.upper()\n    return camel"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words using the '_' as the separator\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words using the capitalized first letter as a separator\n    camel_word = ''.join(words)\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_string = \"\"\n    i = 0\n    while i < len(word):\n        if word[i:i+1] == \"_\":\n            camel_case_string += word[i+1].upper()\n            i += 1\n        else:\n            camel_case_string += word[i:i+1].upper()\n            i += 1\n    return camel_case_string"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into list of words\n    words = word.split('_')\n    \n    # Initialize an empty string to store the camel case word\n    camel_word = ''\n    \n    # Iterate over the words in the list and capitalize the first letter of each word\n    for i, word in enumerate(words):\n        if i == 0:\n            camel_word += word.capitalize()\n        else:\n            camel_word += word\n    \n    # Return the camel case word\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i, letter in enumerate(word):\n        if i == 0:\n            camel_case += letter.lower()\n        else:\n            camel_case += letter.upper()\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function calculates the Eulerian number a(n, m) using the formula:\n    a(n, m) = (n * (n+1) *... * (n+m-1)) // (m * (m-1) *... * 2)\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    for i in range(1, m+1):\n        factorial //= i\n    return factorial"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # check if n and m are odd\n    if n % 2 == 0 or m % 2 == 0:\n        return \"n and m must be odd integers.\"\n    \n    # initialize first term and sum\n    first_term = 1\n    sum_term = 1\n    \n    # loop till m > 2\n    while m > 2:\n        # calculate next term\n        next_term = (first_term + (m // 2) * sum_term) % n\n        \n        # update first and sum terms\n        first_term = sum_term\n        sum_term = next_term\n        \n        # update m\n        m = m // 2\n    \n    # return the last term of the series\n    return first_term"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Calculate the number of rows and columns in the matrix\n    num_rows = n\n    num_cols = m\n\n    # Initialize the matrix with zeros\n    matrix = [[0 for j in range(num_cols)] for i in range(num_rows)]\n\n    # Fill the matrix with ones\n    for i in range(num_rows):\n        matrix[i][i] = 1\n\n    # Count the number of ones in each column\n    ones_col = [sum(row) for row in matrix]\n\n    # Find the starting index of the first row with one in each column\n    start_index = []\n    for i in range(num_rows):\n        if ones_col[i] == 1:\n            start_index.append(i)\n\n    # Initialize the sum of the first row with ones\n    first_row_sum = sum(ones_col)\n\n    # Initialize the product of the first row with ones and the second row with ones\n    first_row_second_row_product = matrix[start_index[0]][start_index[1]]\n\n    # Calculate the remaining Eulerian numbers\n    remaining_eulerian_numbers = 0\n    for i in range(len(start_index)):\n        for j in range(len(start_index)):\n            if i!= j:\n                for k in range(len(start_index)):\n                    if k!= i and k!= j:\n                        for l in range(len(start_index)):\n                            if l!= i and l!= j and l!= k:\n                                for m in range(len(start_index)):\n                                    if m!= i and m!= j and m!= k and m!= l:\n                                        remaining_eulerian_numbers += matrix[start_index[i]][start_index[j]] * matrix[start_index[k]][start_index[l]] * matrix[start_index[l]][start_index[m]]\n\n    # Return the final result\n    return first_row_sum * first_row_second_row_product * remaining_eulerian_numbers"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function calculates the Eulerian number a(n, m) using a recursive approach.\n    \n    Parameters:\n    n (int): size of the grid\n    m (int): size of the diagonal\n    \n    Returns:\n    int: Eulerian number a(n, m)\n    '''\n    # Base case: when diagonal size is 1, the Eulerian number is equal to the sum of the rows and columns\n    if m == 1:\n        return n + m\n    \n    # Recursive case: for each diagonal index i, calculate the Eulerian number a(n, m-i) using the same function\n    for i in range(1, m + 1):\n        # Calculate the Eulerian number a(n, m-i)\n        a_n_m_minus_i = eulerian_num(n, m - i)\n        \n        # Calculate the Eulerian number a(n, m-i+1)\n        a_n_m_minus_i_plus_1 = eulerian_num(n, m - i + 1)\n        \n        # Add the Eulerian numbers to get the Eulerian number a(n, m)\n        a_n_m = a_n_m_minus_i + a_n_m_minus_i_plus_1\n        \n        # Return the Eulerian number a(n, m)\n        return a_n_m\n    \n    # If the function does not reach a base case, return an error message\n    return \"Error: Recursive call did not reach a base case.\""
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return m\n    if m == 0:\n        return n\n    if n == 1 and m == 1:\n        return 2\n    if n == 1:\n        return eulerian_num(n-1, 2*m)\n    if m == 1:\n        return eulerian_num(2*n, m-1)\n    if n == m:\n        return eulerian_num(n-1, m-1)\n    return eulerian_num(n-1, m) + eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Calculate the product of n and m\n    product = n * m\n\n    # Initialize variables for the values of a(n, m)\n    a1 = 1\n    a2 = 0\n\n    # Check if n is a power of 2\n    if n & (n-1) == 0:\n        # If it is, then a(n, m) is equal to 2^(n-1) - 1\n        a = 2**(n-1) - 1\n        a = a * (n+1) / 2\n    else:\n        # If not, then a(n, m) is equal to the sum of a(n-1, m) and a(n, m-1)\n        a = a1 + a2\n\n    # Return the value of a(n, m)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    def is_valid_order(order):\n        for i in range(n):\n            if order.count(i)!= 1:\n                return False\n        return True\n\n    def find_order(adj_list):\n        valid_orders = []\n        for i in range(1, n + 1):\n            valid_orders.append([x for x in adj_list[i]])\n        for order in valid_orders:\n            if all(adj_list[i][j] in order for j in range(1, n + 1) if j!= i):\n                return order\n        return None\n\n    def count_edges(order):\n        count = 0\n        for i in range(1, n + 1):\n            if i in order:\n                count += adj_list[i].count(i)\n        return count\n\n    adj_list = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, m + 1):\n        u, v = map(int, input().split())\n        adj_list[u][v] = 1\n        adj_list[v][u] = 1\n\n    order = find_order(adj_list)\n    if order is None or not is_valid_order(order):\n        return \"Invalid order\"\n\n    return count_edges(order)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def generate_primes(limit):\n        primes = []\n        for num in range(2, limit + 1):\n            if is_prime(num):\n                primes.append(num)\n        return primes\n\n    def eulerian_num_helper(n, m, primes):\n        if n == 1:\n            return m\n        for prime in primes:\n            if m % prime == 0:\n                return prime * eulerian_num_helper(n - 1, m // prime, primes)\n        return 0\n\n    primes = generate_primes(n)\n    result = eulerian_num_helper(n, m, primes)\n    return result\n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the number of steps to reach the destination\n    steps = 0\n\n    # Initialize the current position and destination position\n    x, y = 0, 0\n\n    # Initialize the number of steps in each direction\n    dx = [0, 1, 0, -1]\n    dy = [-1, 0, 1, 0]\n\n    # Loop until we reach the destination position\n    while x!= n - 1 or y!= m - 1:\n\n        # Move in the current direction\n        x += dx[steps]\n        y += dy[steps]\n\n        # Increment the number of steps\n        steps += 1\n\n        # Check if we have reached the destination position\n        if x == n - 1 and y == m - 1:\n            break\n\n    # Calculate and return the Eulerian number\n    return steps"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    This function calculates the Eulerian number a(n, m) using the formula:\n\n    a(n, m) = (-1)^(n + m) * (n!) / ((n - m)! * m!)\n\n    where n! denotes the factorial of n, and all denominators are positive integers.\n    '''\n\n    # Calculate the factorial of n\n    n_factorial = 1\n    for i in range(1, n + 1):\n        n_factorial *= i\n\n    # Calculate the factorial of n - m\n    n_m_factorial = 1\n    for i in range(1, n - m + 1):\n        n_m_factorial *= i\n\n    # Calculate the factorial of m\n    m_factorial = 1\n    for i in range(1, m + 1):\n        m_factorial *= i\n\n    # Calculate the Eulerian number\n    eulerian_num = (-1)**(n + m) * n_factorial / (n_m_factorial * m_factorial)\n\n    return eulerian_num"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist in the list\n    for sublist in input_list:\n        # sort the sublist using the sort() method\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Use the sorted() function to sort the sublist\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_true_booleans(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if type(elem) == bool and elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuples to lists\n    list_test = list(test_list)\n    tup_test = list(test_tup)\n\n    # Append the lists to the tuples\n    for i in range(len(list_test)):\n        tup_test[i].append(list_test[i])\n\n    # Convert the tuples back to sets\n    set_test = set(tup_test)\n\n    # Return the sets as lists\n    return list(set_test)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuples to lists for easy manipulation\n    list_test_list = list(test_list)\n    list_test_tup = list(test_tup)\n    \n    # Append the list to the end of the tuple\n    list_test_tup.append(list_test_list)\n    \n    # Convert the modified tuple back to a tuple\n    modified_test_tup = tuple(list_test_tup)\n    \n    return modified_test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the test_list to a tuple\n    test_tup = tuple(test_list)\n    \n    # Append the tuple to the test_list\n    test_list += test_tup\n    \n    # Return the modified list\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the lists to tuples\n    list_tup = tuple(test_list)\n    tup_list = list(test_tup)\n    \n    # Append the lists to the tuples\n    tup_list.extend(list_tup)\n    \n    # Convert the tuples back to lists\n    result_list = list(tup_list)\n    \n    return result_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Concatenate the lists into one sorted list\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # convert the lists to heap objects\n    heap1 = list(heapq.merge(heapq.merge([int(x) for x in num1], [int(x) for x in num2]), [int(x) for x in num3]))\n    # convert the heap objects back to lists\n    return [str(x) for x in heap1]"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into one list\n    combined_list = num1 + num2 + num3\n    \n    # Use a min heap to keep track of the minimum element in each sublist\n    min_heap = []\n    for num in combined_list:\n        heapq.heappush(min_heap, num)\n    \n    # Combine the sublists into a single sorted list\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 and num2 and num3:\n        if heapq.heappop(num1) <= heapq.heappop(num2):\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        elif heapq.heappop(num2) < heapq.heappop(num3):\n            heapq.heappush(merged_list, heapq.heappop(num2))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num3))\n            \n    merged_list += num1 + num2 + num3\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the two sorted lists\n    merged_list = num1 + num2\n    \n    # Remove duplicates from the merged list\n    merged_list = list(set(merged_list))\n    \n    # Merge the merged_list with num3 and sort it\n    merged_list = merged_list + num3\n    merged_list.sort()\n    \n    # Return the sorted merged_list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # Define the function to merge two sorted lists\n    def merge(list1, list2):\n        result = []\n        i = j = 0\n        while i < len(list1) and j < len(list2):\n            if list1[i] < list2[j]:\n                result.append(list1[i])\n                i += 1\n            else:\n                result.append(list2[j])\n                j += 1\n        result += list1[i:]\n        result += list2[j:]\n        return result\n    \n    # Merge the three lists into a single sorted list\n    sorted_list = merge(merge(num1, num2), num3)\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Convert the lists to lists of tuples\n    list1 = [(x, i) for i, x in enumerate(num1)]\n    list2 = [(x, i) for i, x in enumerate(num2)]\n    list3 = [(x, i) for i, x in enumerate(num3)]\n    \n    # Merge the three lists using heapq\n    merged_list = []\n    heapq.heapify(list1)\n    heapq.heapify(list2)\n    heapq.heapify(list3)\n    \n    while list1 and list2 and list3:\n        if heapq.heappop(list1)[1] <= heapq.heappop(list2)[1]:\n            merged_list.append(heapq.heappop(list1))\n        else:\n            merged_list.append(heapq.heappop(list2))\n            \n    while list1:\n        merged_list.append(heapq.heappop(list1))\n        \n    while list2:\n        merged_list.append(heapq.heappop(list2))\n        \n    while list3:\n        merged_list.append(heapq.heappop(list3))\n        \n    # Convert the merged list to a regular list\n    sorted_list = [x[0] for x in sorted(merged_list, key=lambda x: x[1])]\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    # Create a list of all the numbers to be merged\n    nums = num1 + num2 + num3\n    \n    # Use heapq to sort the list of numbers\n    heapq.heapify(nums)\n    \n    # Merge the sorted list into a single list\n    merged = []\n    while len(nums) > 0:\n        merged.append(heapq.heappop(nums))\n    \n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merging three sorted lists using heapq\n    heap1 = [num1[i] for i in range(len(num1))]\n    heap2 = [num2[i] for i in range(len(num2))]\n    heap3 = [num3[i] for i in range(len(num3))]\n    heapq.heapify(heap1)\n    heapq.heapify(heap2)\n    heapq.heapify(heap3)\n    merged_list = []\n    while heap1 and heap2 and heap3:\n        if heap1[0] <= heap2[0] and heap1[0] <= heap3[0]:\n            merged_list.append(heap1.pop(0))\n        elif heap2[0] <= heap1[0] and heap2[0] <= heap3[0]:\n            merged_list.append(heap2.pop(0))\n        else:\n            merged_list.append(heap3.pop(0))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # create a min heap from the first two lists\n    min_heap1 = [heapq.heappop(num1) for _ in range(len(num2))]\n    min_heap2 = [heapq.heappop(num2) for _ in range(len(num3))]\n    \n    # merge the heaps\n    merged_list = []\n    while min_heap1 and min_heap2:\n        if min_heap1[0] < min_heap2[0]:\n            merged_list.append(heapq.heappop(min_heap1))\n        else:\n            merged_list.append(heapq.heappop(min_heap2))\n            \n    # append the remaining elements from the first two lists\n    for elem in min_heap1:\n        merged_list.append(elem)\n    for elem in min_heap2:\n        merged_list.append(elem)\n    \n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    for i in range(n): \n        s = ''.join(chr(ord(c)-1) for c in s[::-1])\n        count += s.count('1')\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n):\n    # convert the binary string into a list of digits\n    s = [int(digit) for digit in s]\n\n    # rotate the list n times\n    for i in range(n):\n        s.append(s.pop(0))\n\n    # count the number of odd digits\n    count = 0\n    for digit in s:\n        if digit % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n): \n    # Initialize count variable to 0\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(n): \n        # If the current character is an odd number, increment count\n        if int(s[i]) % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string s and an integer n as input and returns the number of odd numbers in the string after rotating it n times.\n    \"\"\"\n\n    # Convert the binary string to a list of characters\n    s_list = list(s)\n\n    # Initialize an empty list to store the rotated string\n    rotated_list = []\n\n    # Loop n times\n    for _ in range(n):\n\n        # Add the last character of the original string to the rotated string\n        rotated_list.append(s_list[-1])\n\n        # Remove the last character of the original string\n        s_list.pop()\n\n    # Convert the rotated string to a binary string\n    rotated_binary = ''.join(rotated_list)\n\n    # Count the number of odd numbers in the binary string\n    count = sum(1 for char in rotated_binary if char == '1')\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return \"The length of the binary string must be odd.\"\n    \n    if n <= 0:\n        return \"The number of rotations must be a positive integer.\"\n    \n    s = list(s)\n    for _ in range(n):\n        s = s[-1:] + s[:-1]\n    \n    odd_count = 0\n    for num in s:\n        if int(num) % 2 == 1:\n            odd_count += 1\n            \n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    binary_string = bin(int(s))[2:] # convert the string to binary and remove the \"0b\" prefix\n    binary_string = binary_string * n # rotate the binary string the given number of times\n    count = 0\n    for i in binary_string:\n        if int(i) % 2 == 1: # check if the current digit is odd\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # convert the binary string to a list of digits\n    binary_list = [int(digit) for digit in s]\n    # initialize the count to zero\n    count = 0\n    # loop through the given number of times\n    for i in range(n):\n        # rotate the binary list by 1 position to the left\n        binary_list.append(binary_list.pop(0))\n        # check if any number in the list has an odd value\n        for num in binary_list:\n            if num % 2!= 0:\n                count += 1\n    # return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize variables\n    count = 0\n    # Loop through the input string n times\n    for i in range(n):\n        # Convert the input string to a binary number\n        num = int(s,2)\n        # Calculate the binary equivalent of the rotated binary number\n        rotated = num ^ (num >> 1)\n        # If the binary equivalent is odd, increment the count\n        if rotated & 1 == 1:\n            count += 1\n        # Convert the rotated binary number back to a string and assign it to the input string\n        s = bin(rotated)[2:]\n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string into a list of binary digits\n    binary_digits = [int(d) for d in s]\n\n    # Initialize a variable to store the number of odd values\n    odd_count = 0\n\n    # Iterate through the list of digits and rotate the digits n times\n    for _ in range(n):\n        # Reverse the list of digits\n        binary_digits.reverse()\n\n        # Iterate through the list of digits and count the odd values\n        for digit in binary_digits:\n            if digit % 2!= 0:\n                odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # convert the binary string to a list of digits\n    binary_list = [int(digit) for digit in s]\n\n    # rotate the list n times\n    for i in range(n):\n        right_end = len(binary_list) - 1\n        left_end = 0\n        while left_end < right_end:\n            # swap the elements at the left and right ends\n            binary_list[left_end], binary_list[right_end] = binary_list[right_end], binary_list[left_end]\n            left_end += 1\n            right_end -= 1\n\n    # count the number of odd digits in the rotated list\n    count = 0\n    for digit in binary_list:\n        if digit % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common:\n                common.append(j)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common += [nestedlist[i] & nestedlist[j]]\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        if len(set(nestedlist[i])) == len(nestedlist[i]):\n            common.extend(nestedlist[i])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Create a set to store unique elements in the first list\n    set1 = set(nestedlist[0])\n\n    # Initialize an empty list to store common elements\n    common = []\n\n    # Iterate through the rest of the lists\n    for i in range(1, len(nestedlist)):\n        # Create a set of unique elements in the current list\n        set2 = set(nestedlist[i])\n\n        # Find the common elements using the intersection method\n        intersection = set1.intersection(set2)\n\n        # Add the common elements to the result list\n        common.extend(intersection)\n\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty dictionary to store common elements\n    common_dict = {}\n    \n    # Loop through each nested list\n    for item in nestedlist:\n        # Loop through each item in the nested list\n        for element in item:\n            # If the element is not already in the dictionary, add it\n            if element not in common_dict:\n                common_dict[element] = 1\n    \n    # Return the common elements in the dictionary\n    return common_dict.keys()"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n\n    # Loop through each nested list\n    for sublist in nestedlist:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # If the element is in the set, add it to the common elements set\n            if element in common_elements:\n                common_elements.remove(element)\n            else:\n                common_elements.add(element)\n\n    # Convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    common = []\n    for sublist in nestedlist:\n        for item in sublist:\n            if item not in common:\n                common.append(item)\n\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # convert all lists to sets\n    nestedlist = [set(sublist) for sublist in nestedlist]\n\n    # find the intersection of the sets\n    common = nestedlist[0].intersection(*nestedlist[1:])\n\n    # convert the common set back to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a list of common elements.\n    '''\n    # Create a set of common elements to store\n    common = set()\n\n    # Loop through each sub-list of the nested list\n    for sublist in nestedlist:\n        # Loop through each element in the sub-list\n        for elem in sublist:\n            # Check if the element is already in the set\n            if elem in common:\n                # If it is, then add it to the list of common elements\n                common.add(elem)\n            # Otherwise, add it to the set of common elements\n            else:\n                common.add(elem)\n\n    # Convert the set of common elements to a list and return it\n    return list(common)\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize an empty set to store the common elements\n    common = set()\n\n    # Iterate through each list in the nestedlist\n    for lst in nestedlist:\n\n        # Iterate through each element in the list\n        for element in lst:\n\n            # If the element is already in the set, then it is a common element\n            if element in common:\n                continue\n\n            # If the element is not in the set, then add it to the set\n            else:\n                common.add(element)\n\n    # Return the common elements in the list\n    return list(common)"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Check if the string only contains digits\n    if not text.isdigit():\n        return False\n\n    # Check if the integer is within the valid range (2^31 - 1)\n    if int(text) > 2**31 - 1 or int(text) < -2**31:\n        return False\n\n    return True"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    \n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_flag = True\n    \n    for i in list1:\n        for j in i.values():\n            if j!= {} and type(j) == dict:\n                empty_flag = False\n                break\n        if empty_flag:\n            break\n    \n    return empty_flag"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    if not isinstance(list1, list):\n        return \"The input is not a list.\"\n    empty = True\n    for i, d in enumerate(list1):\n        if not isinstance(d, dict) or len(d) > 0:\n            empty = False\n            break\n    return empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Initialize a variable to store the result of the function\n    result = True\n    # Iterate through the list of dictionaries\n    for dic in list1:\n        # Check whether the dictionary is empty or not\n        if len(dic)!= 0:\n            # If the dictionary is not empty, set the result to False and break the loop\n            result = False\n            break\n    # Return the result of the function\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Initialize an empty integer variable to store the result\n    result = 0\n    \n    # Iterate through each number in the tuple\n    for num in nums:\n        # Convert the number to an integer and add it to the result variable\n        result += int(num)\n    \n    # Return the result variable\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_sum = 0\n    for num in nums:\n        int_sum += num\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize an empty integer variable to store the result\n    result = 0\n    \n    # loop through the tuple and add each element to the result\n    for num in nums:\n        result += num\n        \n    # return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize the sum variable\n    result = 0\n\n    # Loop through the tuple and add each element to the sum\n    for num in nums:\n        result += num\n\n    # Return the sum\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert the tuple of positive integers to a list of integers\n    nums_list = list(map(int, nums))\n    # initialize an empty integer variable to store the result\n    result = 0\n    # loop over the list and add the elements to the result\n    for num in nums_list:\n        result += num\n    # return the result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    test_list[i][j] = None\n                    \n    return [row for row in test_list if any(x is not None for x in row)]"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for elem in row:\n            try:\n                elem = float(elem)\n            except ValueError:\n                continue\n            else:\n                row[row.index(elem)] = elem\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                print(f\"Element {element} cannot be converted to float.\")\n                return"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                test_list[i][j] = None"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        for subitem in item:\n            if isinstance(subitem, (int, float, complex)):\n                result.append(float(subitem))\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        for element in item:\n            try:\n                element = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                return False  # if any item in sublist is not a float, return False\n\n    return True  # if all items in all sublists are convertible to floats, return True"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return the result as a list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    words = string.split()\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # Convert string to list of words using split() function\n    word_list = string.split()\n    return word_list"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a variable to keep track of the count of each element\n    count = [0] * (max(arr) + 1)\n    \n    # Iterate through the array and increment the count of each element\n    for i in range(len(arr)):\n        count[arr[i]] += 1\n    \n    # Iterate through the array again to find the element that appears only once\n    for i in range(len(arr)):\n        if count[arr[i]] == 1:\n            return arr[i]\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0]!= arr[1]:\n        return search(arr[1:])\n    else:\n        return search(arr[2:])"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a variable to store the count of each element in the array\n    count = [0] * len(arr)\n\n    # Traverse through the array and increment the count for each element\n    for i in range(len(arr)):\n        count[arr[i]] += 1\n\n    # Traverse through the array again and find the element that appears only once\n    for i in range(len(arr)):\n        if count[arr[i]] == 1:\n            return arr[i]\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        raise ValueError(\"Array must contain only unique elements.\")\n\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == unique_element:\n            return unique_element\n        else:\n            unique_element = arr[i]\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == unique_element:\n            unique_element = None\n            break\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = None\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i - 1]:\n            if unique_element is None:\n                unique_element = arr[i]\n            elif arr[i]!= unique_element:\n                unique_element = None\n                break\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return -1\n    for i in range(n):\n        if i == n - 1 or arr[i]!= arr[i+1]:\n            return arr[i]\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to store the count of each element\n    count_dict = {}\n    \n    # iterate over the array and update the count of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # iterate over the array again and find the element that appears only once\n    for num in arr:\n        if count_dict[num] == 1:\n            return num\n    \n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            absolute_product = abs(list1[i]*list1[j])\n            if absolute_product > max_product:\n                max_product = absolute_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Given a list of tuples, find the maximum absolute product between numbers in pairs of tuples.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if abs(lst[i][0]*lst[j][1]) > max_product:\n                max_product = abs(lst[i][0]*lst[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair = (list1[i][0] * list1[j][0], list1[i][1] * list1[j][1])\n            product = max(pair)\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Find the maximum absolute product between pairs of numbers in each tuple\n    max_abs_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute value of the product of the numbers in the tuples\n            abs_product = abs(list1[i][0] * list1[j][0]) + abs(list1[i][1] * list1[j][1]) + abs(list1[i][0] * list1[j][1]) + abs(list1[i][1] * list1[j][0])\n            # Update the maximum absolute product if this pair of numbers has a larger absolute product\n            if abs_product > max_abs_product:\n                max_abs_product = abs_product\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    max_pair = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product > max_product:\n                max_product = product\n                max_pair = [lst[i], lst[j]]\n\n    return max_pair\n"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n\n    # Initialize maximum absolute product and minimum value in the list\n    max_product = -float('inf')\n    min_value = float('inf')\n\n    # Iterate through the list and calculate the maximum absolute product and minimum value\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product = abs(list1[i][0]*list1[j][0])\n            if current_product > max_product:\n                max_product = current_product\n            if list1[i][0] < min_value:\n                min_value = list1[i][0]\n            if list1[j][0] < min_value:\n                min_value = list1[j][0]\n\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes in a list of tuples and returns the maximum absolute product between numbers in pairs of tuples within that list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n\ndef is_amicable(num):\n    '''\n    Check if a given number is amicable.\n    '''\n    for i in range(1, num):\n        if num % i == 0 and i!= num // i:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i!= 1:\n            for j in range(1, i):\n                if i % j == 0:\n                    break\n            else:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # initialize variables\n    sum_amicable = 0\n    amicable_numbers = []\n\n    # loop through numbers from 2 to the limit\n    for num in range(2, limit + 1):\n\n        # check if the number is amicable\n        is_amicable = False\n        for i in range(2, num):\n            if num % i == 0:\n                is_amicable = True\n                break\n\n        # if the number is amicable, add it to the sum and the list\n        if is_amicable:\n            sum_amicable += num\n            amicable_numbers.append(num)\n\n    return sum_amicable, amicable_numbers"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Function to check if a number is amicable to a given number\n    def is_amicable(num, limit):\n        sum_of_divisors = sum(set(range(1, limit)) & set(range(1, num)))\n        return sum_of_divisors == num\n\n    # Initialize sum to zero\n    amicable_sum = 0\n\n    # Check if the input limit is valid\n    if limit < 1:\n        print(\"Invalid limit value. Please enter a positive integer.\")\n    else:\n        # Loop through all numbers from 1 to the input limit\n        for num in range(1, limit + 1):\n            # Check if the number is amicable to any other number from 1 to the input limit\n            if is_amicable(num, limit):\n                # Add the amicable number to the sum\n                amicable_sum += num\n\n    # Print the sum of all amicable numbers from 1 to the input limit\n    print(\"The sum of all amicable numbers from 1 to\", limit, \"is\", amicable_sum)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable = 0\n    for num in range(1, limit+1):\n        if num!= 1:\n            for i in range(2, num):\n                if (num % i == 0) and (i % num == 0):\n                    break\n            else:\n                sum_of_amicable += num\n    return sum_of_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables to store amicable numbers and their corresponding sum\n    amicable_numbers = []\n    amicable_sums = []\n    \n    # Check all numbers from 1 to limit for amicability\n    for i in range(1, limit+1):\n        # Check if i and its sum are amicable\n        if i!= 1 and is_amicable(i):\n            # Add i and its sum to amicable_numbers and amicable_sums\n            amicable_numbers.append(i)\n            amicable_sums.append(i+i)\n    \n    # Calculate the sum of all amicable numbers\n    amicable_sum = sum(amicable_sums)\n    \n    return amicable_sum\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable or not.\n    '''\n    # Initialize variables to store divisors and sum of divisors\n    divisors = []\n    sum_divisors = 0\n    \n    # Check all numbers from 1 to the square root of num\n    for i in range(1, int(num**0.5)+1):\n        # Check if num is divisible by i\n        if num % i == 0:\n            # Add i and its square to divisors and sum_divisors\n            divisors.append(i)\n            sum_divisors += i**2\n    \n    # Check if sum of divisors equals num\n    if sum_divisors == num:\n        # If yes, then num is amicable\n        return True\n    else:\n        # If no, then num is not amicable\n        return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Loop through all numbers from 1 to the specified limit (exclusive)\n    for i in range(1, limit):\n        # Check if the number is amicable by checking if it is equal to the sum of its proper divisors\n        if is_amicable(i):\n            # Add the amicable number to the sum\n            sum += i\n\n    # Return the sum of all amicable numbers\n    return sum\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is amicable.\n    '''\n    # Loop through all numbers from 1 to the square root of the input number\n    for i in range(1, int(num ** 0.5) + 1):\n        # Check if the input number is divisible by the current number\n        if num % i == 0:\n            # Check if the current number is divisible by the square root of the input number\n            if i * i == num % i:\n                # The input number is amicable with the current number\n                return True\n\n    # The input number is not amicable with any number from 1 to the square root of the input number\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable to any number from 1 to the specified number.\n    '''\n    for i in range(1, num):\n        if num % i == 0:\n            if i!= num // i and is_prime(i):\n                return True\n    return False\n\ndef is_prime(num):\n    '''\n    Check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Check if a number is amicable.\n    \"\"\"\n    for i in range(2, int(num**0.5)+1):\n        if (num % i == 0) and (num/i!= i):\n            return True\n    return False\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if is_amicable(num) and num!= 1:\n            amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i == sum(divisors(i)):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef divisors(num):\n    divisors = []\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            divisors.append(i)\n            if i!= num // i:\n                divisors.append(num // i)\n    return divisors"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    angle = cmath.phase(a - b * 1j)\n    angle = angle / 2\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_rad = cmath.phase(complex(a,b))\n    angle_deg = cmath.degrees(angle_rad)\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_rad = cmath.phase(a + b*1j)\n    return cmath.degrees(angle_rad)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return round(angle.real, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes in two complex numbers as input and returns the angle in degrees.\n    '''\n    angle = cmath.phase(a+b) * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            diff = string[j] - string[i]\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    count_zeros = 0\n    count_ones = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zeros += 1\n            max_diff = max(max_diff, count_zeros - count_ones)\n        elif string[i] == '1':\n            count_ones += 1\n            max_diff = max(max_diff, count_ones - count_zeros)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)): \n        if string[i] == '0': \n            count = 0\n            for j in range(i, len(string)): \n                if string[j] == '1': \n                    count += 1\n                else: \n                    break\n            else: # this is the else block if the loop completes without finding a 1\n                continue\n            max_diff = max(max_diff, count - i)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Create an empty dictionary to store the count of 0s and 1s in each position of the binary string\n    count = {}\n    \n    # Loop through each character in the binary string\n    for i, c in enumerate(string): \n        # If the character is a 0, increment the count of 0s in that position\n        if c == '0': \n            count[i] = count.get(i, 0) + 1\n        # If the character is a 1, increment the count of 1s in that position\n        elif c == '1': \n            count[i] = count.get(i, 0) + 1\n            \n    # Initialize the maximum difference to be the same as the maximum number of 0s\n    max_diff = max(count.values())\n    \n    # Loop through each possible sub-string of the binary string\n    for i in range(len(string)): \n        # If the sub-string starts with a 0, decrement the count of 0s in that position\n        if string[i] == '0': \n            count[i] -= 1\n        # If the sub-string starts with a 1, increment the count of 1s in that position\n        elif string[i] == '1': \n            count[i] += 1\n            \n        # Calculate the number of 0s and 1s in the sub-string\n        num_0s = count[i]\n        num_1s = len(string) - num_0s\n        \n        # Calculate the maximum difference between the number of 0s and number of 1s\n        diff = max(num_0s, num_1s)\n        \n        # Update the maximum difference if necessary\n        if diff > max_diff: \n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    # Initialize variables for the count of 0s and 1s\n    zero_count = 0\n    one_count = 0\n    \n    # Loop through the string and increment the count of 0s and 1s for each character\n    for char in string:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n    \n    # Calculate the maximum difference between the number of 0s and number of 1s for sub-strings of the given binary string\n    max_diff = max(abs(zero_count - one_count), abs(one_count - zero_count))\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    max_diff = 0\n    for i in range(length):\n        for j in range(i+1, length+1):\n            diff = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    diff += 1\n                else:\n                    diff -= 1\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    \n    for i in range(len(string) - 1):\n        if string[i] == '0' and string[i+1] == '1':\n            max_diff = max(max_diff, i + 1)\n        elif string[i] == '1' and string[i+1] == '0':\n            max_diff = max(max_diff, i)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n\n    # Iterate through each character in the string\n    for char in string: \n        # If the character is a 0, increment the zero count\n        if char == '0':\n            zero_count += 1\n        # If the character is a 1, increment the one count\n        elif char == '1':\n            one_count += 1\n        # If the zero count is greater than the one count, update the max_diff\n        if zero_count > one_count:\n            max_diff = max(max_diff, zero_count - one_count)\n        # If the one count is greater than the zero count, update the max_diff\n        elif one_count > zero_count:\n            max_diff = max(max_diff, one_count - zero_count)\n        # Reset the zero count and one count if the character is a 0 or a 1\n        else:\n            zero_count = 0\n            one_count = 0\n\n    # Return the max_diff\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find all divisors of a and b\n    divisors_a = set()\n    for i in range(1, a + 1):\n        if a % i == 0:\n            divisors_a.add(i)\n    divisors_b = set()\n    for i in range(1, b + 1):\n        if b % i == 0:\n            divisors_b.add(i)\n\n    # Find the intersection of the two sets\n    common_divisors = divisors_a.intersection(divisors_b)\n\n    # Calculate the sum of the common divisors\n    sum_common_divisors = sum(common_divisors)\n\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    '''\n    This function takes two positive integers as input and returns their sum of their common divisors.\n    '''\n    # Find the maximum value among the two numbers\n    max_num = max(a, b)\n    # Initialize a dictionary to store the common divisors of the two numbers\n    common_divisors = {}\n    # Loop through all possible values of'max_num'\n    for i in range(1, max_num + 1):\n        # Check if 'i' is a common divisor of 'a' and 'b'\n        if a % i == 0 and b % i == 0:\n            # If it is, add 'i' to the dictionary\n            common_divisors[i] = common_divisors.get(i, 0) + 1\n    # Find the sum of the common divisors of the two numbers\n    sum_common_divisors = sum(common_divisors.values())\n    # Return the sum of the common divisors\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    This function takes two numbers as input and returns the sum of their common divisors using the Sieve of Eratosthenes algorithm.\n    '''\n    # create a list of all numbers from 1 to a*b\n    numbers = [i for i in range(1, a*b+1)]\n    \n    # create a list of booleans representing whether each number is prime or not\n    primes = [True] * (a*b+1)\n    primes[0], primes[1] = False, False\n    \n    # iterate through the numbers and mark them as composite if they are not prime\n    for i in range(2, int(a*b**0.5)+1):\n        if primes[i]:\n            for j in range(i*i, a*b+1, i):\n                primes[j] = False\n    \n    # create a dictionary to store the number of common divisors for each prime number\n    prime_dict = {2: 1}\n    \n    # iterate through the remaining unmarked numbers and add their prime factorization to the dictionary\n    for i in range(3, a*b+1, 2):\n        if primes[i]:\n            prime_dict[i] = 0\n    \n    # iterate through the two numbers and find their common divisors by multiplying their prime factorizations\n    common_divisors = sum([prime_dict[x] for x in range(2, a+1) if primes[x]]) * sum([prime_dict[x] for x in range(b+1, a*b+1, b) if primes[x]])\n    \n    return common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    '''\n    This function takes two numbers as input and returns the sum of their common divisors.\n    '''\n    # Find the common divisors of the given numbers\n    divisors = set()\n    for i in range(1, max(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    \n    # Calculate the sum of common divisors\n    sum_divisors = sum(divisors)\n    \n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find common divisors of a and b\n    common = []\n    div_a = [x for x in range(1, a+1) if a % x == 0]\n    div_b = [x for x in range(1, b+1) if b % x == 0]\n    for d in div_a:\n        if d in div_b:\n            common.append(d)\n    # Calculate the sum of common divisors\n    total = 0\n    for d in common:\n        total += d\n    return total"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the common divisors of the two numbers using a loop\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    # Return the sum of the common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # find the set of common divisors of a and b\n    common = set(divisors(a)) & set(divisors(b))\n\n    # find the sum of common divisors\n    result = sum(common)\n\n    return result\n\ndef divisors(n):\n    \"\"\"\n    Returns a list of all divisors of a given number.\n    \"\"\"\n    divs = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divs.append(i)\n    return divs"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # initializing variables\n    common_divisors = []\n    sum_of_common_divisors = 0\n\n    # finding common divisors using trial division\n    for i in range(1,b):\n        if b % i == 0:\n            common_divisors.append(i)\n\n    # finding sum of common divisors\n    for i in range(len(common_divisors)):\n        sum_of_common_divisors += common_divisors[i]\n\n    # returning sum of common divisors\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two positive integers as input and returns their sum of common divisors.\n    \"\"\"\n    # Finding all the divisors of a\n    divisors_a = []\n    for i in range(1, a + 1):\n        if a % i == 0:\n            divisors_a.append(i)\n\n    # Finding all the divisors of b\n    divisors_b = []\n    for i in range(1, b + 1):\n        if b % i == 0:\n            divisors_b.append(i)\n\n    # Finding the common divisors of a and b\n    common_divisors = []\n    for divisor_a in divisors_a:\n        for divisor_b in divisors_b:\n            if divisor_a == divisor_b:\n                common_divisors.append(divisor_a)\n\n    # Finding the sum of common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # finding the common divisors of two numbers\n    divisor = 1\n    while a % divisor!= 0 or b % divisor!= 0:\n        divisor += 1\n        if divisor > b:\n            return \"No common divisors found.\"\n    # summing the common divisors\n    sum_divisor = 0\n    while a % sum_divisor!= 0:\n        sum_divisor += 1\n    while b % sum_divisor!= 0:\n        sum_divisor += 1\n    result = a + b - (a % sum_divisor) - (b % sum_divisor)\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = x * y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # Check if both inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError('Both inputs must be integers.')\n\n    # Multiply the two integers\n    result = x * y\n    \n    # Return the result\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = x * y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n\n    result = 0\n    for i in range(y):\n        result += x\n\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    \n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n            \n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the input string into words\n    words = str.split()\n\n    # Initialize an empty list to store the words that are longer than n characters\n    long_words = []\n\n    # Iterate over the list of words and check if each word is longer than n characters\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    Parameters:\n    n (int): maximum length of the words to be considered\n    str (list of str): list of words to search in\n\n    Returns:\n    list of str: list of words that are longer than n characters\n    \"\"\"\n    words = []\n    for word in str:\n        if len(word) > n:\n            words.append(word)\n    return words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function takes a matrix as input and returns True if it is a magic square and False otherwise.\n    \"\"\"\n\n    # Calculate the sum of all elements in the matrix\n    matrix_sum = sum(sum(row) for row in my_matrix)\n\n    # Check if the sum is equal to the product of the matrix dimensions\n    if matrix_sum == sum(range(1, len(my_matrix) + 1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_magic_square(matrix):\n    \"\"\"\n    Returns True if the given matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    for i in range(n):\n        # Check rows\n        row_sum = sum(matrix[i])\n        if row_sum!= n * (n + 1) // 2:\n            return False\n        # Check columns\n        col_sum = sum(matrix[j] for j in range(n))\n        if col_sum!= n * (n + 1) // 2:\n            return False\n        # Check diagonals\n        diag1_sum = sum(matrix[i][j] for j in range(n))\n        diag2_sum = sum(matrix[j][i] for j in range(n))\n        if diag1_sum!= diag2_sum or diag1_sum!= n * (n + 1) // 2:\n            return False\n    return True\n\ndef magic_square_test(my_matrix):\n    \"\"\"\n    Returns True if the given matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n    for row in my_matrix:\n        if len(row)!= n:\n            return False\n    return is_magic_square(my_matrix)"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has a 3x3 size\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n    \n    # Check if the matrix is a square\n    for i in range(3):\n        for j in range(3):\n            if i == j:\n                continue\n            if my_matrix[i][j] == my_matrix[j][i]:\n                return False\n    \n    # Check if the matrix has a magic number\n    magic_number = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] + \\\n                   my_matrix[0][2] + my_matrix[1][0] + my_matrix[2][0]\n    \n    if magic_number!= 15:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Create a copy of the input matrix to avoid modifying the original\n    matrix = my_matrix.copy()\n    # Initialize the sum of the rows and columns to 0\n    row_sum = sum(matrix[i] for i in range(len(matrix)))\n    col_sum = sum(matrix[:, j] for j in range(len(matrix[0])))\n    # Check if the sum of the rows and columns is the same as the diagonal\n    if row_sum == col_sum == matrix[0][0] + matrix[1][1] + matrix[2][2]:\n        # Check if the matrix is a magic square\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] not in set(range(1, len(matrix) + 1)):\n                    return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    diag_sum_1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum_2 = sum(my_matrix[i][n-1-i] for i in range(n))\n    if row_sums == col_sums == diag_sum_1 == diag_sum_2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(column) for column in zip(*my_matrix)]\n\n    # check if the sum of the diagonal elements is equal to the sum of the other elements\n    diagonal_sum = sum(row_sums)\n    for row in my_matrix:\n        if row_sums.index(row_sums.index(row))!= diagonal_sum - row_sums.index(row):\n            return False\n\n    # check if the sum of the primary diagonal is equal to the sum of the other elements\n    primary_diagonal_sum = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n    if primary_diagonal_sum!= row_sums[0] + row_sums[1] + row_sums[2]:\n        return False\n\n    # check if the sum of the secondary diagonal is equal to the sum of the other elements\n    secondary_diagonal_sum = my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]\n    if secondary_diagonal_sum!= col_sums[0] + col_sums[1] + col_sums[2]:\n        return False\n\n    # if all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix is a square\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n    \n    # Check the rows and columns for duplicates\n    for i in range(len(my_matrix)):\n        row = my_matrix[i]\n        for j in range(len(my_matrix[0])):\n            if i!= j and row[j] == row[i]:\n                return False\n    \n    # Check the diagonals for duplicates\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if i == j and my_matrix[i][j] == my_matrix[j][i]:\n                return False\n            if i + j == len(my_matrix) - 1 and my_matrix[i][j] == my_matrix[i + 1][j + 1]:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function takes in a matrix and checks if it is a magic square or not.\n    A magic square is a square matrix whose elements are all different from each other.\n    This function returns True if the matrix is a magic square and False otherwise.\n    \"\"\"\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    magic_square = True\n    \n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] == 0:\n                magic_square = False\n                break\n    \n    if magic_square:\n        for i in range(rows):\n            for j in range(cols):\n                if my_matrix[i][j]!= i+1 and my_matrix[i][j]!= cols-i and my_matrix[i][j]!= rows-j+1:\n                    magic_square = False\n                    break\n                \n    return magic_square"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the input matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if all elements in the matrix are different\n    if len(set(map(tuple, my_matrix)))!= len(my_matrix)**2:\n        return False\n    \n    # Check if the sum of all elements in the matrix is 0\n    if sum(sum(row) for row in my_matrix)!= 0:\n        return False\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j]!= i+1:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if all rows have the same length\n    for row in my_matrix:\n        if len(set(row))!= len(row):\n            return False\n    \n    # Check if all columns have the same length\n    for col in zip(*my_matrix):\n        if len(set(col))!= len(col):\n            return False\n    \n    # Check if each element in the matrix is unique\n    for row in my_matrix:\n        for num in row:\n            if my_matrix.count(num)!= 1:\n                return False\n    \n    # Check if the sum of each row and column is the same as the diagonals\n    for i in range(len(my_matrix)):\n        if sum(my_matrix[i])!= sum(my_matrix[i][::-1]):\n            return False\n        if sum(my_matrix[:,i])!= sum(my_matrix[:,i][::-1]):\n            return False\n    \n    # All tests passed\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with maximum frequency in the dictionary\n    max_freq = max(freq_dict.values())\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Use defaultdict to store the frequency of each item\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with the maximum frequency\n    max_item = None\n    max_freq = 0\n    for num in freq:\n        if freq[num] > max_freq:\n            max_item = num\n            max_freq = freq[num]\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_count = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_item = None\n    max_freq = 0\n\n    # iterate through the list and update the frequency count for each item\n    for num in nums:\n        freq_dict[num] += 1\n\n    # find the item with the maximum frequency and return it\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a defaultdict to store the frequency of each number\n    freq = defaultdict(int)\n    # iterate through the list and update the frequency of each number\n    for num in nums:\n        freq[num] += 1\n    # find the item with maximum frequency\n    max_num = max(freq, key=freq.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for i in str1:\n        if i not in vowels:\n            result += i\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str2 = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_list = []\n    for i in str1:\n        if i.lower() in vowels:\n            vowel_list.append(i)\n    vowel_list.reverse()\n    return ''.join(vowel_list)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    reversed_str = ''\n    for char in str1:\n        if char in vowels:\n            if len(reversed_str) < len(str1) // 2:\n                reversed_str += char\n    return reversed_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    vowels_reversed = ''\n    for char in str1:\n        if char in vowels:\n            vowels_reversed = char + vowels_reversed\n        else:\n            vowels_reversed = vowels_reversed + char\n    return vowels_reversed"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    vowels_only = \"\"\n    for char in string:\n        if char.lower() in vowels:\n            vowels_only += char.lower()\n    return vowels_only[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str = char + new_str\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_vowels = \"\"\n    for char in str1:\n        if char in vowels:\n            if char.isupper():\n                reversed_vowels += char.lower()\n            else:\n                reversed_vowels += char.upper()\n    return reversed_vowels"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return''.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i)\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    str_tup = str(tup1)\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(map(str, tup1))"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = \"\"\n    for i in tup1:\n        str_tup += str(i)\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_nums = [x for x in nums if x < 0]\n    return sum(neg_nums)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(3*n-1))//2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal = 0\n    num = 1\n    for i in range(n): \n        hexagonal += num\n        num += 2\n    return hexagonal\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    # Calculate the base-6 base of the nth hexagonal number\n    base = 6 * (n - 1)\n    # Calculate the nth power of the base\n    pow = 1\n    hexagonal = 0\n    while pow <= n:\n        hexagonal += base * pow\n        pow += 1\n    return hexagonal"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # The hexagonal number formula is: 2 * (n + 1) * (n + 1)\n    return 2 * (n + 1) * (n + 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        # Calculate the nth hexagonal number\n        return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2 * n - 1) * (2 * n - 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 6\n    while n > 0:\n        print(a)\n        a += b\n        b -= 2\n        n -= 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2 * n - 1) * (2 * n + 1) // 2"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # convert the array to a list\n    nums_list = list(nums)\n    # count the number of zeroes and non-zeroes in the array\n    zero_count = sum(1 for num in nums_list if num == 0)\n    non_zero_count = len(nums_list) - zero_count\n    # calculate the ratio of zeroes to non-zeroes\n    zero_to_non_zero_ratio = zero_count/non_zero_count\n    return zero_to_non_zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0 for i in range(len(nums))])\n\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count[i] = 1\n\n    non_zero_count = sum(zero_count)\n    zero_ratio = (non_zero_count / len(nums)) * 100\n\n    return round(zero_ratio, 2)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # convert the array to a list\n    num_list = list(nums)\n\n    # count the number of zeros and non-zeros in the array\n    zeros = num_list.count(0)\n    non_zeros = len(num_list) - zeros\n\n    # calculate the ratio of zeros to non-zeros\n    zero_to_non_zero_ratio = zeros / non_zeros\n\n    # return the ratio of zeros to non-zeros\n    return zero_to_non_zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    zeros = 0\n    non_zeros = 0\n\n    for num in arr:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n\n    return zeros / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Create an array to store the frequency of each number\n    freq = array('i', [0]*max(nums)+1)\n    # Iterate through the array and increment the frequency of each number\n    for num in nums:\n        freq[num] += 1\n    # Iterate through the array again to find the ratio of zeroes to non-zeroes\n    zeros = 0\n    ones = 0\n    for i in range(len(nums)):\n        if freq[nums[i]] == 0:\n            zeros += 1\n        else:\n            ones += 1\n    return zeros/ones"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n\n    return zeros / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zeroes[nums.index(num)] += 1\n    non_zeroes = len(nums) - sum(zeroes)\n    return non_zeroes / zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0]*len(nums))  # initialize array of zeros\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            count[non_zero_count] += 1\n        else:\n            non_zero_count += 1\n    return count[non_zero_count]/non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    zeros = array('i', [0] * n)\n    ones = array('i', [0] * n)\n    \n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(0)] += 1\n        else:\n            ones[ones.index(1)] += 1\n    \n    if sum(zeros) > 0 and sum(ones) > 0:\n        ratio = zeros[zeros.index(max(zeros))] / ones[ones.index(max(ones))]\n    else:\n        ratio = 0\n        \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list of integers\n    nums = list(nums)\n    \n    # Count the number of zeroes and non-zeroes\n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n    \n    # Calculate the ratio\n    ratio = 0.0 if zero_count == 0 else non_zero_count / zero_count\n    \n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n            if n/i == i:\n                count += 1\n    return count > 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the given number is greater than zero\n    if n <= 0:\n        return False\n\n    # Iterate from 1 to sqrt(n)\n    for i in range(1, int(n ** 0.5) + 1):\n        # Check if the given number can be represented as sum of i^2 and (n - i^2)\n        if i ** 2 <= n and (n - i ** 2) % i == 0:\n            return True\n\n    # If the number cannot be represented as sum of non-zero powers of 2, return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the given number is even or odd\n    if n % 2 == 0:\n        # If even, check if the sum of powers of 2 is less than or equal to the number\n        if sum_of_powers_of_two(n) <= n:\n            return True\n        else:\n            return False\n    else:\n        # If odd, check if the sum of powers of 2 is greater than or equal to the number\n        if sum_of_powers_of_two(n) >= n:\n            return True\n        else:\n            return False\n\ndef sum_of_powers_of_two(n):\n    '''\n    Write a python function to find the sum of non-zero powers of 2 in the given number.\n    '''\n    sum = 0\n    while n > 0:\n        # Check if the rightmost bit is 1\n        if n % 2 == 1:\n            sum += n\n        # Shift the number to the right by 1 bit\n        n = n >> 1\n    return sum"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 1: \n        if n & 1 == 0: \n            count += 1\n            n >>= 1 \n        else: \n            n >>= 1 \n    return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    \n    # check if the number is a power of 2\n    is_power_of_2 = False\n    for i in range(1, 33):\n        if n == 1 << i:\n            is_power_of_2 = True\n            break\n    \n    if not is_power_of_2:\n        return False\n    \n    # check if the number can be represented as sum of non-zero powers of 2\n    sum_of_powers_of_2 = 0\n    while n > 0:\n        if n & 1 == 1:\n            sum_of_powers_of_2 += 1\n        n >>= 1\n    \n    return sum_of_powers_of_2 == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if the given number is a power of 2\n    if n == 1 or n == 2:\n        return True\n    # check if the given number is divisible by 2\n    elif n % 2 == 0:\n        return False\n    # if the number is not divisible by 2, check if the sum of powers of 2 can be represented as the given number\n    else:\n        i = 2\n        while i <= n:\n            if n - i >= 0 and (n - i) % 2 == 0:\n                return False\n            i *= 2\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    def helper(n):\n        if n == 0:\n            return 0\n        if n & 1 == 1:\n            return 1 + helper((n - 1) >> 1)\n        else:\n            return helper((n - 1) >> 1)\n\n    return n == 2 ** helper(log2(n))\n\n\ndef log2(n):\n    \"\"\"\n    Calculate the logarithm base 2 of a given number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 1 + log2(n >> 1)\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # convert number to binary\n    bin_n = bin(n)[2:]\n    \n    # check if binary number is divisible by 2\n    if bin_n % 2 == 0:\n        return False\n    \n    # check if any two adjacent bits are the same\n    for i in range(1, len(bin_n) - 1):\n        if bin_n[i] == bin_n[i+1]:\n            return False\n    \n    # if no two adjacent bits are the same, then the number can be represented as sum of non-zero powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if n is a power of 2\n    if n == 0 or n == 1:\n        return True\n\n    # Check if n is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # Check if n can be expressed as sum of powers of 2\n    power = 2\n    while n > 1:\n        if n % power == 0:\n            n = n // power\n        else:\n            return False\n        power <<= 1\n\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the number is a power of 2\n    if n & (n-1) == 0:\n        return True\n    \n    # Check if the number is not a power of 2 and if it can be represented as sum of non-zero powers of 2\n    while n > 1:\n        if n & 1 == 1:\n            return False\n        n = n >> 1\n        \n    return True"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # assuming radius is in inches\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Calculate the circumference of the circle\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r # PI is a mathematical constant\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r #multiplying by pi and using 2 for the diameter\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            if type(item) == int:\n                flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list += extract_singly(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if type(item) == list:\n            for subitem in item:\n                flat_list.append(subitem)\n        else:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten_list = [num for sublist in test_list for num in sublist]\n    return flatten_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sub_list in test_list:\n        flattened_list.extend(sub_list)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for i in test_list:\n        for j in i:\n            flat_list.append(j)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if type(item) == list:\n            flattened_list.extend(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sub_list in test_list:\n        for num in sub_list:\n            flat_list.append(num)\n    return flat_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Reverse the list to start with largest pancake\n    nums.reverse()\n    # Start from the largest pancake and repeat the process until the entire list is sorted\n    while True:\n        # Find the index of the smallest pancake and its size\n        min_index = 0\n        min_size = nums[0]\n        for i in range(1, n):\n            if nums[i] < min_size:\n                min_index = i\n                min_size = nums[i]\n        # Swap the smallest pancake with the first element of the list\n        nums[0], nums[min_index] = nums[min_index], nums[0]\n        # Reverse the list to continue sorting\n        nums.reverse()\n        # If the list is sorted, the process is complete\n        if nums[0] == n:\n            break\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Swap the maximum element with the last element in the unsorted part of the array\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # Reverse the unsorted part of the array from i+1 to n-1\n        for j in range(i+1, n):\n            nums[i], nums[j] = nums[j], nums[i]\n            \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    \n    n = len(nums)\n    # loop from n-1 to 1\n    for i in range(n-1, 0, -1):\n        # find the maximum element in the unsorted part of the array\n        max_idx = i\n        for j in range(i):\n            if nums[j] < nums[max_idx]:\n                max_idx = j\n        \n        # swap the maximum element with the last element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        \n        # reverse the unsorted part of the array\n        start = i\n        end = n-1\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # create a copy of the list to avoid modifying the original list\n    nums = nums[:]\n\n    # use a bubble sort algorithm to sort the list in ascending order\n    for i in range(len(nums) - 1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n, 1, -1):\n        max_idx = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        nums[i-1], nums[max_idx] = nums[max_idx], nums[i-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    for i in range(len(nums) - 1, 0, -1):\n        # Choose the maximum element of the unsorted part of the list\n        max_index = i\n        for j in range(i):\n            if nums[j] < nums[max_index]:\n                max_index = j\n        \n        # Swap the maximum element with the first element of the unsorted part\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    def swap(a, b):\n        a, b = b, a\n\n    def reverse(start, end):\n        while start < end:\n            swap(nums[start], nums[end])\n            start += 1\n            end -= 1\n\n    n = len(nums)\n    # reverse the first n-1 elements\n    for i in range(n - 1, 0, -1):\n        reverse(0, i)\n\n    # reverse the first element\n    reverse(0, n - 1)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1,0,-1):\n        # find the position of maximum element in the remaining unsorted part\n        j = 0\n        while j < i:\n            if nums[j] < nums[j+1]:\n                break\n            j += 1\n        # swap the maximum element with the first element\n        nums[j], nums[i] = nums[i], nums[j]\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Function to reverse the order of a list\n    def reverse(arr, l, r):\n        while l < r:\n            arr[l], arr[r] = arr[r], arr[l]\n            l += 1\n            r -= 1\n\n    # Function to heapify the sub-array arr[l..r]\n    def heapify(arr, n, l):\n        # Find the largest element in the sub-array\n        largest = l\n        left = 2 * l + 1\n        right = 2 * l + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        # Swap the largest element with the root\n        if largest!= l:\n            arr[l], arr[largest] = arr[largest], arr[l]\n            # Heapify the root element\n            heapify(arr, n, largest)\n\n    # Main function to sort the list\n    for i in range(n // 2 - 1, -1, -1):\n        # Build a max-heap on the left half of the list\n        reverse(nums, 0, i)\n        for j in range(i, n - 1):\n            if nums[j] < nums[j + 1]:\n                # Swap the elements if they are not in the correct order\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n                # Heapify the affected sub-array\n                heapify(nums, j + 1, n)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    while True:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        if not swapped:\n            break\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    # initialize the count variable to 0\n    count = 0\n    # loop through the lists\n    for i in range(len(list1)):\n        # check if the current item in list1 is equal to the current item in list2\n        if list1[i] == list2[i]:\n            # check if the current item in list1 is equal to the current item in list3\n            if list1[i] == list3[i]:\n                # increment the count variable if the items are identical in the same position\n                count += 1\n    # return the count\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function takes three lists and returns the count of items in the same position that are identical.\n\n    Args:\n    list1 (list): List containing strings\n    list2 (list): List containing strings\n    list3 (list): List containing strings\n\n    Returns:\n    int: Count of identical items in the same position of the lists.\n\n    Example:\n    >>> count_samepair(['abc', 'xyz', 'def'], ['xyz', 'abc', 'def'], ['abc', 'xyz', 'ghi'])\n    2\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n        elif list1[i] == list3[i]:\n            count += 1\n        elif list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # Initialize the count variable\n    count = 0\n    # Iterate through the first list\n    for i in range(len(list1)):\n        # Check if the item at the current position is present in the second list\n        if list1[i] in list2:\n            # If it is, check if the item at the same position in the second list is also present in the third list\n            if list2[list2.index(list1[i])][::-1] in list3:\n                count += 1\n    # Return the final count\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return None\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2: \n        return \"Array should have at least two elements to find the maximum absolute difference.\"\n    else:\n        max_diff = abs(arr[0] - arr[1])\n        for i in range(2, len(arr)):\n            temp_diff = abs(arr[i] - arr[i-1])\n            if temp_diff > max_diff: \n                max_diff = temp_diff\n        return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Returns the maximum absolute difference between any two elements in an array.\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Array must have at least two elements\")\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return None\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)-1):\n        diff = abs(arr[i+1] - arr[i])\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            x = -n // b\n            y = x\n    elif b == 0:\n        x = -n // a\n        y = x\n    else:\n        x1 = (n * b) // a\n        x2 = (-n * b) // a\n        if x1 == x2:\n            x = x1\n            y = x\n        elif x1 < x2:\n            x = x1\n            y = -n // a\n        else:\n            x = x2\n            y = -n // a\n    if x < 0:\n        x = None\n    if y < 0:\n        y = None\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for x in range(n - b, n + 1):\n        if a * x + b * n == n:\n            return (x, n // x)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    # check if a, b and n are integers\n    if not all(isinstance(x, int) for x in (a, b, n)):\n        return None\n\n    # check if a, b are not zero\n    if a == 0 or b == 0:\n        return None\n\n    # find the discriminant\n    d = b**2 - 4*a*n\n\n    # check if discriminant is negative or zero\n    if d < 0:\n        return None\n\n    # find the two solutions\n    x1 = (-b + d**0.5) / (2*a)\n    x2 = (-b - d**0.5) / (2*a)\n\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1 = -b / (a + b)\n    y1 = -a / (a + b)\n    for i in range(2, n):\n        x = (b * (i - 1) ** 2 + 4 * n * a * b) / (8 * n * a * b * (i + 1))\n        y = (a * (i - 1) ** 2 + 4 * n * a * b) / (8 * n * a * b * (i + 1))\n        if x < 0 or y < 0:\n            continue\n        x = int(x)\n        y = int(y)\n        if x ** 2 + y ** 2 == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        # if b is zero, there is no solution\n        return None\n    else:\n        # if b is not zero, there is a solution\n        x = (-n) / b\n        y = a * x\n        return (int(x), int(y))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # use the quadratic formula to find the roots of ax^2 + bx + c = 0\n    c = b**2 - 4*a*n\n    if c < 0:\n        return None\n    elif c == 0:\n        return (-b/2/a, -b/2/a)\n    else:\n        x1 = (-b + c**0.5)/(2*a)\n        x2 = (-b - c**0.5)/(2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n    else:\n        x = -n // b\n        y = a * x + n\n        return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n//b):\n        if (a*x + b*(n//b-x)) == n:\n            return (x, n//b-x)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Check if a, b and n are all integers\n    if not all(isinstance(i, int) for i in [a, b, n]):\n        return None\n    \n    # If a and b are both zero, then the equation becomes x + y = n\n    if a == 0 and b == 0:\n        if n == 0:\n            return (0, 0)\n        else:\n            return None\n    \n    # If a is zero, then the equation becomes x + by = n\n    elif a == 0:\n        x = -b // n\n        y = n // b\n        return (x, y)\n    \n    # If b is zero, then the equation becomes ax + y = n\n    elif b == 0:\n        y = -a // n\n        x = n // a\n        return (x, y)\n    \n    # If n is zero, then the equation becomes ax + by = 0\n    elif n == 0:\n        x = -a // b\n        y = b // a\n        return (x, y)\n    \n    # General case: find two integers x and y such that ax + by = n\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4 * a * n\n    \n    # Check if the discriminant is negative\n    if discriminant < 0:\n        return None\n    \n    # Calculate the two roots of the discriminant\n    root1 = (-b + discriminant**0.5) / (2 * a)\n    root2 = (-b - discriminant**0.5) / (2 * a)\n    \n    # Check if one of the roots is negative and the other is not\n    if root1 < 0 and root2 >= 0:\n        x = int(root2)\n        y = int(n / b + root2)\n        return (x, y)\n    elif root2 < 0 and root1 >= 0:\n        x = int(root1)\n        y = int(n / a + root1)\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-100, 101):\n        for y in range(-100, 101):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1_set = set(list1)\n    for item in list2:\n        if item in list1_set:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list with all elements from `list1` that are not present in `list2`.\n    \"\"\"\n    # Initialize an empty list to store the elements from `list1` that are not present in `list2`\n    result = []\n    # Loop through each element in `list1`\n    for element in list1:\n        # Check if the element is not present in `list2`\n        if element not in list2:\n            # If it is not present, add it to the `result` list\n            result.append(element)\n    # Return the `result` list\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # check if both lists are the same length\n    if len(list1)!= len(list2):\n        print(\"Error: both lists must be the same length\")\n        return\n\n    # iterate through the first list and remove the elements that are present in the second list\n    new_list = []\n    for elem in list1:\n        if elem not in list2:\n            new_list.append(elem)\n\n    print(\"New list:\", new_list)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # convert list2 to set to remove duplicates\n    set2 = set(list2)\n\n    # loop through list1 and remove elements present in set2\n    for i in range(len(list1)):\n        if list1[i] in set2:\n            list1.pop(i)\n            i -= 1\n\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    \n    while i < n//2:\n        total += (n-2*i)\n        i += 1\n    \n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series = 0\n    for i in range(n // 2):\n        series += n - 2 * i\n    return series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    # initialize the sum to 0\n    sum = 0\n    \n    # loop through all the integers from 0 to n // 2\n    for i in range(n // 2 + 1):\n        # add the difference between n and 2*i to the sum\n        sum += n - 2 * i\n        \n    # return the sum\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum([n - 2*i for i in range(n//2 + 1)])"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return sum_series(n // 2) + n\n    else:\n        return n - sum_series(n // 2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n == 0:\n        return 0\n    \n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate from 0 to n // 2\n    for i in range(n // 2):\n        # Calculate the sum for the current value of i\n        current_sum = n - (2 * i)\n        \n        # Add the sum to the total sum\n        total_sum += current_sum\n        \n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    series_sum = 0\n    for i in range(n // 2):\n        series_sum += n - 2 * i\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    i = 0\n    sum = 0\n    while n - 2 * i >= 0:\n        sum += n - 2 * i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return -1\n    else:\n        total_sum = 0\n        i = 0\n        while n - 2*i >= 0:\n            total_sum += n - 2*i\n            i += 1\n        return total_sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the perimeter of the polygon\n    perimeter = (s + (l-2)*s)/2\n    # calculate the area of the polygon using Heron's formula\n    area = (s*tan(pi/l))**2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "Great job! This is a well-explained Python problem that requires a high level of mathematical knowledge. This script will help you solve the problem!"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of the polygon using the formula:\n    # Area = 1/2 * s * (l * sin(pi/l))\n    area = 0.5 * s * (l * tan(pi/l))\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s-l)/2) * pi\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the sides of the polygon\n    a = s / l\n    b = tan(pi / l) * s / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s * b) / 2\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += s/tan(pi/l)\n    area *= s/l\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the length of a side\n    side_length = s / l\n\n    # Calculate the area of each side\n    area_list = []\n    for i in range(l):\n        area = (s**2) / (4 * tan(pi / l))\n        area_list.append(area)\n\n    # Calculate the area of the polygon\n    polygon_area = 0\n    for i in range(l):\n        polygon_area += area_list[i]\n\n    return polygon_area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Convert the sides length to a float to avoid decimal errors\n    s = float(s)\n    # Calculate the side length using the formula: s = l / tan(30\u00b0)\n    l = s / tan(pi / 6)\n    # Calculate the area using the formula: area = (s * l) / 2\n    area = (s * l) / 2\n    # Return the calculated area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i*2*pi/l\n        area += s*tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # calculate the value of pi\n    pi_val = pi\n\n    # calculate the value of the hypotenuse\n    hypot = (s/2)**2\n\n    # calculate the area using the formula for the area of a triangle\n    area = (l/2) * tan(pi_val/4) * hypot\n\n    # return the calculated area\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    # Calculate the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i + n//i\n    return div_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find all the divisors of n \n    divisors = set() \n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            divisors.add(i) \n            if i!= n // i: \n                divisors.add(n // i) \n    # Find the sum of divisors \n    div_sum = sum(divisors) \n    # Check if div_sum is equal to n \n    if div_sum == n: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    \"\"\"\n    This function takes an integer n as input and checks if the sum of its divisors is the same.\n    \"\"\"\n    # Using list comprehension to get all the divisors of n \n    divisors = [i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0] \n    # summing up the divisors and checking if it's equal to n \n    return (sum(divisors) == n)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    num = n\n    \n    while num > 1:\n        if num % 2 == 0:\n            div_sum += num\n            num /= 2\n        else:\n            num -= 1\n            \n    return div_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    # Calculate the sum of divisors of n\n    div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n\n    # Check if the sum of divisors of n and n is the same\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return True\n    div_list = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_list.append(i)\n            if i!= n // i:\n                div_list.append(n // i)\n    if len(div_list) > 0:\n        return n == sum(div_list)\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n//i == i:\n                return True\n            else:\n                return False\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Compute the sum of the divisors of n \n    sum_of_divisors = sum(map(int, str(n)))\n\n    # Check if the sum of the divisors of n is equal to n \n    if sum_of_divisors == n: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    # Compute the sum of the divisors of n\n    div_sum = sum(set(map(lambda x: x*x, range(1, int(math.sqrt(n))+1))))\n\n    # Compute the sum of the divisors of n+1\n    div_sum += sum(set(map(lambda x: x*x, range(1, int(math.sqrt(n+1))+1))))\n\n    # Check if the sum is equal to n\n    if div_sum == n:\n        print(\"The sum of the divisors of\", n, \"and\", n+1, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"and\", n+1, \"are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the sum of the divisors of n \n    sum_div = sum(divisor for divisor in range(1, int(math.sqrt(n))+1) if n % divisor == 0)\n\n    # Check if the sum of the divisors is equal to n \n    if sum_div == n: \n        return True \n    else: \n        return False "
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1.lower():\n        if char in alpha:\n            pos = alpha.find(char)\n            if pos == len(str1) - 1:\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    # Create an empty dictionary to store the position of each character\n    char_positions = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to lowercase for case-insensitivity\n        char = char.lower()\n\n        # Check if the character is a letter and not already in the dictionary\n        if char.isalpha() and char not in char_positions:\n            # If the character is a letter, add it to the dictionary with its position as its value\n            char_positions[char] = str1.index(char)\n\n    # Loop through each position in the dictionary and count the number of characters with that position\n    count = 0\n    for position in char_positions.values():\n        count += position\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # iterate over the characters in the string and count the number of occurrences of each character in the English alphabet\n    for char in str1:\n        if char.lower() in 'abcdefghijklmnopqrstuvwxyz':\n            if char.lower() in char_count:\n                char_count[char.lower()] += 1\n            else:\n                char_count[char.lower()] = 1\n    \n    # iterate over the characters in the English alphabet and count the number of occurrences of each character in the string\n    for i in range(26):\n        char = chr(i+97)\n        if char in str1:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    \n    # print the count of each character in the English alphabet that occurs in the string\n    for char in char_count:\n        print(f\"{char}: {char_count[char]}\")"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    This function counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # Convert the given string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of each character in the English alphabet\n    char_count = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Return the count of each character in the dictionary\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in str1:\n        if i.lower() in english_alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n    for i in range(26):\n        char_count[chr(i+65)] = 0\n    \n    # loop through the characters in the string and increment the count for each character at the same position in the alphabet\n    for char in str1:\n        char = char.lower()\n        if char in char_count:\n            char_count[char] += 1\n    \n    # return the count of characters at each position in the alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        count += str1.lower().count(chr(97+i).lower())\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1.lower() == str1[i].lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    # Convert the string to lowercase to ignore case \n    str1 = str1.lower() \n    # Initialize an empty dictionary to store the counts of characters at each position in the alphabet \n    char_counts = {} \n    # Iterate over each character in the string \n    for char in str1: \n        # If the character is in the dictionary, increment its count \n        if char in char_counts: \n            char_counts[char] += 1 \n        # If the character is not in the dictionary, add it and set its count to 1 \n        else: \n            char_counts[char] = 1 \n    # Initialize an empty list to store the final results \n    final_results = [] \n    # Iterate over each character in the English alphabet (a-z) \n    for char in 'abcdefghijklmnopqrstuvwxyz': \n        # If the character is in the dictionary, add its count to the list of final results \n        if char in char_counts: \n            final_results.append(char_counts[char]) \n        # If the character is not in the dictionary, add 0 to the list of final results \n        else: \n            final_results.append(0) \n    # Return the final list of results \n    return final_results"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    # convert string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n\n    # create an empty dictionary to store the count of each character\n    char_count = {}\n\n    # iterate through each character in the string\n    for char in str1:\n        # if the character is in the English alphabet, add 1 to its count in the dictionary\n        if char.isalpha():\n            char_count[char] = char_count.get(char, 0) + 1\n\n    # return the dictionary with the count of each character\n    return char_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] == 2:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n: \n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to an integer\n    n = int(n)\n    # Initialize the current power of 2\n    power = 1\n    # Loop until we find the smallest power of 2 greater than or equal to n\n    while power < n:\n        # Increment the power of 2\n        power <<= 1\n    # Return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    '''\n    # Check if the input is negative or 0\n    if n <= 0:\n        return 1\n    \n    # Check if the input is a power of 2\n    if n & (n-1) == 0:\n        return n\n    \n    # Find the smallest power of 2 greater than or equal to n\n    while n < 2**(32-1):\n        n <<= 1\n    \n    # Return the next power of 2\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Calculate the binary representation of n\n    n_binary = bin(n)[2:]\n    \n    # Find the number of leading zeros in the binary representation of n\n    leading_zeros = n_binary.count('0')\n    \n    # Calculate the power of 2 to the leading_zeros plus one\n    power_of_2 = 2**(leading_zeros + 1)\n    \n    # Return the next power of 2 greater than or equal to n\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 1\n    return 2**int(log2(n))+1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return 2**n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        # Check if n is a power of 2\n        if n & (n - 1) == 0:\n            return n\n        else:\n            # Find the next power of 2 using the binary representation of n\n            # and adding 1\n            power = 1\n            while power < n:\n                power <<= 1\n            return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n > 1:\n        n = n >> 1\n    return n << 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Start with 1 and check if n is already a power of 2\n    if n >= 1:\n        while n % 2 == 0:\n            n = n // 2\n    # If n is less than 1, start with 2 and check if n is already a power of 2\n    else:\n        n = 2\n        while n <= n:\n            if n >= 1:\n                return n\n            n = 2 ** (i + 1)"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0 \n    for i in a: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    This function takes in a list a and a number x and returns the number of occurrences of x in a.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n\n    count = 0 # initialize count to 0\n    for i in a:\n        if i == x:\n            count += 1 # increment count if a number is found in the list\n\n    return count # return the final count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(lst, x):\n    \"\"\"\n    This function takes a list and a number x as input and returns the frequency of x in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Find the minimum and maximum values of the list\n    min_val = min(list1)\n    max_val = max(list1)\n    \n    # Check if the m and n indices are within the range of the list\n    if m < 0 or m > len(list1) - 1 or n < 0 or n > len(list1) - 1:\n        return \"Indices out of range\"\n    \n    # Initialize a variable to store the sum\n    sum_val = 0\n    \n    # Iterate through the list and add the values in the specified range to the sum\n    for i in range(min_val, max_val + 1):\n        if i >= m and i <= n:\n            sum_val += list1[i]\n    \n    # Return the sum\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m > n:\n        m, n = n, m\n\n    return sum(list1[i] for i in range(m, n + 1))"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Check if indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        return None\n    \n    # Calculate the sum of the range\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    \n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total += i\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(lst, m, n):\n    '''\n    This function takes a list and two indices m and n, and returns the sum of numbers in the list within the range [m, n].\n    '''\n    if m > n:\n        print(\"Invalid range\")\n    else:\n        return sum(lst[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return \"Error: m must be less than or equal to n.\"\n    sum_ = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_ += i\n    return sum_"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = [a, a, a, a, a]\n    perimeter = (sides[0] + sides[1] + sides[2] + sides[3] + sides[4]) * 5 / 4\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (5 * a) / 2\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = (5 * a) ** 0.5\n    return 5 * math.pi * a + 5 * a + 5"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n    \na = float(input(\"Enter the length of the side of the pentagon: \"))\nprint(\"The perimeter of the pentagon is:\", perimeter_pentagon(a))"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (5 * a) + (5 * a**2) + (5 * a**3)\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 5 * a\n    return circumference"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += s.count('std')\n        s = s.replace('std', '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    count = 0\n    count_std = s.count('std')\n    if count_std!= 0:\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] == \"std\":\n            count += 1\n    return count\n"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return True\n    \n    first_element = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and returns True if all elements have same data type.\n    '''\n    first_element = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # first, we check if the tuple is empty\n    if len(test_tuple) == 0:\n        return False\n    \n    # then, we iterate through the tuple and compare their data types\n    for i in range(1, len(test_tuple)):\n        # we check if the type of the i-th element is same as the type of the (i-1)-th element\n        if not isinstance(test_tuple[i], type(test_tuple[i-1])):\n            return False\n    \n    # if all the elements have same data types, we return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if all(type(test_tuple[0]) == type(x) for x in test_tuple[1:]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Check if the tuple is not empty\n    if not test_tuple:\n        return False\n    \n    # Get the first element of the tuple\n    first_element = test_tuple[0]\n    \n    # Check if all the elements in the tuple have same data type or not\n    for element in test_tuple:\n        if type(element)!= type(first_element):\n            return False\n    \n    # If all the elements have same data type, then return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_elem = test_tuple[0]\n    for elem in test_tuple:\n        if not isinstance(elem, type(first_elem)):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function checks if all the elements in the input tuple have the same data type or not.\n    \"\"\"\n    # Convert the tuple to a set to remove duplicates and then convert it back to a list to get the unique types\n    unique_types = list(set(type(x) for x in test_tuple))\n    # Check if the length of the unique types list is equal to 1, which means all the elements in the tuple have the same data type\n    if len(unique_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = None\n    for elem in test_tuple:\n        if data_type is None:\n            data_type = type(elem)\n        elif type(elem)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # count the number of occurrences of x in arr\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    \n    # check if the count is more than n/2\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through the array\n    for i in range(n):\n        # If the current element is equal to the target element, increment the count variable\n        if arr[i] == x:\n            count += 1\n    \n    # If the count variable is greater than n/2, return True\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize the count of the current element to 0\n    count = 0\n\n    # Iterate through the array and increment the count for each element that matches the given element\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    # If the count is greater than n/2, then the element is the majority element\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        elif i < x:\n            count -= 1\n    return count > n // 2"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n!= 0:\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0: \n        count += n & 1 \n        n = n >> 1 \n    return count "
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index = 0\n    result = \"\"\n    for char in str:\n        if odd_index % 2 == 0:\n            result += char\n        odd_index += 1\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # convert string to list\n    lst = list(str)\n    # loop through list and remove odd values\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            del lst[i]\n    # convert list back to string\n    result = ''.join(lst)\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Remove odd values of a given string.\n\n    Parameters:\n    string (str): The given string.\n\n    Returns:\n    str: The string with odd values removed.\n    \"\"\"\n\n    result = \"\"\n    for index, char in enumerate(string):\n        if index % 2!= 0:\n            result += char\n\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    :param str: The input string.\n    :return: The modified string with odd index values removed.\n    \"\"\"\n    return ''.join(chr(ord(c) % 256) if i % 2!= 0 else c for i, c in enumerate(str))"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 1])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Initialize a new string to store the result\n    result = \"\"\n    # Loop through each character in the input string\n    for char in str:\n        # If the index value is odd, add it to the result string\n        if int(char) % 2!= 0:\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Find the minimum of three numbers using a single comparison operator.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (1<<r)-1  \n    return (n & mask) == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if bin(n & (1 << i))[2:].count('1')!= 1:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if n & (1 << i) == 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(n & i).count('1')!= i-l+1:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the count of unset bits\n    unset_bits = 0\n    # Iterate through the range of bits\n    for i in range(l, r+1):\n        # If the bit is set to 1, increment the unset_bits counter\n        if n & (1 << i):\n            unset_bits += 1\n        # If the unset_bits counter reaches the total number of bits in the number, return True\n        if unset_bits == r-l+1:\n            return True\n    # If the function reaches here, return False, indicating that all the bits are unset in the given range.\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initialize all bits in the given range as set to 1\n    all_bits = (1 << (r-l+1))-1\n    # extract all set bits from n\n    set_bits = n & all_bits\n    # check if all set bits are set to 1\n    if set_bits == all_bits:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are set or unset in the given range.\n    '''\n    \n    # Initialize a variable to store the bitmask of the given range\n    bitmask = 0\n    \n    # Iterate through the bits of the given range and set the corresponding bit in the bitmask variable\n    for i in range(l,r+1):\n        bitmask |= (1 << i)\n    \n    # Check if all the bits of the given range are set in the bitmask variable\n    if bitmask == (1 << r) - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n\n    # Initialize a variable to store the result\n    all_unset = True\n\n    # Iterate over the range of bits\n    for i in range(l, r + 1):\n        # Check if the bit is set or unset in the given range\n        if n & (1 << i):\n            all_unset = False\n            break\n\n    # Return the result\n    return all_unset"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r + 1):\n        if n & (1 << i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if (n & (1 << i))!= 0:\n            return False\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize two pointers, one for positive elements and one for negative elements\n    i, j = 0, 0\n    \n    # Iterate over the array\n    while j < len(arr):\n        \n        # If the current element is positive, move the positive pointer forward\n        if arr[j] >= 0:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n        \n        # If the current element is negative, move the negative pointer forward\n        else:\n            j += 1\n    \n    # Truncate the array to the first n elements\n    arr = arr[:n]\n    \n    # Return the truncated array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Use a dictionary to keep track of the number of occurrences of each element\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Use a list comprehension to sort the array based on the count of negative and positive elements\n    sorted_arr = sorted([num for num in arr if count[num] < 0], key=lambda x: (x, -count[x]), reverse=True) + [num for num in arr if count[num] >= 0]\n    \n    # Use a list comprehension to re-arrange the array based on the sorted_arr and count of negative and positive elements\n    re_arr = [sorted_arr[count[num]] for num in sorted_arr]\n    \n    return re_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # check if the array length is less than n\n    if len(arr) < n:\n        return \"Array length should be greater than or equal to n\"\n\n    # create two empty lists to store the negative and positive elements respectively\n    neg_list = []\n    pos_list = []\n\n    # iterate through the array and add the elements to the respective lists\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n\n    # combine the two lists and sort the resulting array\n    combined_list = neg_list + pos_list\n    combined_list.sort()\n\n    # re-arrange the array so that the first n elements are negative and the rest are positive\n    re_arr = []\n    for i in range(n):\n        if i < len(neg_list):\n            re_arr.append(neg_list[i])\n        else:\n            re_arr.append(pos_list[i-len(neg_list)])\n\n    return re_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize variables for positive and negative elements\n    pos = 0\n    neg = 0\n\n    # Loop through the array and count the number of negative and positive elements\n    for i in range(n):\n        if arr[i] > 0:\n            pos += 1\n        elif arr[i] < 0:\n            neg += 1\n\n    # Check if there are any negative elements left\n    if neg == 0:\n        return arr\n\n    # Move the negative elements to the end of the array\n    while neg > 0:\n        arr[n-neg] = -1\n        neg -= 1\n\n    # Check if there are any positive elements left\n    if pos == 0:\n        return arr\n\n    # Move the positive elements to the beginning of the array\n    while pos > 0:\n        arr[pos-1] = pos\n        pos -= 1\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative_index = 0\n    positive_index = 0\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negative_index += 1\n        elif arr[i] > 0:\n            positive_index += 1\n    \n    for i in range(n):\n        if arr[i] < 0:\n            arr[negative_index], arr[i] = arr[i], arr[negative_index]\n            negative_index += 1\n        elif arr[i] > 0:\n            arr[positive_index], arr[i] = arr[i], arr[positive_index]\n            positive_index += 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Count the number of negative and positive elements\n    neg_count = 0\n    pos_count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    \n    # Move negative elements to the end of the array and positive elements to the beginning\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count -= 1\n            if neg_count < 0:\n                break\n        else:\n            pos_count -= 1\n            if pos_count < 0:\n                break\n        arr[i], arr[pos_count + neg_count] = arr[pos_count + neg_count], arr[i]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # create two empty lists to store positive and negative elements\n    pos = []\n    neg = []\n    # loop through the array and append positive and negative elements to their respective lists\n    for i in arr:\n        if i > 0:\n            pos.append(i)\n        elif i < 0:\n            neg.append(i)\n    # sort the positive and negative lists based on their absolute values\n    pos.sort(reverse=True)\n    neg.sort()\n    # merge the two sorted lists into a single list\n    merged_list = pos + neg\n    # remove the first n elements from the merged list\n    result = merged_list[n:]\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # loop through the array and count the negative and positive elements\n    neg_count = 0\n    pos_count = 0\n    for num in arr:\n        if num < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    # check if there are more negative elements than positive elements\n    if neg_count > pos_count:\n        # if there are, add the negative elements to the beginning of the array\n        arr[:n] = arr[:n] + arr[-neg_count:]\n        # shift the positive elements to the end of the array\n        arr[n:] = arr[n:][::-1]\n    else:\n        # if there are less negative elements than positive elements, reverse the order of the negative and positive elements\n        neg_arr = arr[:neg_count]\n        pos_arr = arr[neg_count:]\n        neg_arr.reverse()\n        pos_arr.reverse()\n        # concatenate the negative and positive arrays\n        arr = neg_arr + arr[neg_count:] + pos_arr\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    \n    # initialize variables to keep track of counts of negative and positive elements\n    negative_count = 0\n    positive_count = 0\n    \n    # loop through the first n elements of the array\n    for i in range(n):\n        \n        # if the current element is negative, increment the negative count\n        if arr[i] < 0:\n            negative_count += 1\n        \n        # if the current element is positive, increment the positive count\n        elif arr[i] > 0:\n            positive_count += 1\n        \n        # if the current element is neither negative nor positive, increment the negative count and decrement the positive count\n        else:\n            negative_count += 1\n            positive_count -= 1\n    \n    # initialize variables to keep track of the index of the last negative element\n    last_negative_index = n - 1\n    \n    # loop through the remaining elements of the array\n    for i in range(n, len(arr)):\n        \n        # if the current element is negative, decrement the negative count and increment the positive count\n        if arr[i] < 0:\n            negative_count -= 1\n            positive_count += 1\n        \n        # if the current element is positive, increment the positive count\n        elif arr[i] > 0:\n            positive_count += 1\n        \n        # if the current element is neither negative nor positive, decrement the negative count and increment the positive count\n        else:\n            negative_count -= 1\n            positive_count += 1\n        \n        # if the current element is negative and the last negative element was not yet shifted, move the current element to the end of the array\n        if arr[i] < 0 and arr[last_negative_index] < 0:\n            arr[i], arr[last_negative_index] = arr[last_negative_index], arr[i]\n            last_negative_index -= 1\n    \n    # return the final array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize two pointers: one for negative elements and another for positive elements\n    i = 0\n    j = n - 1\n    \n    # Iterate over the array from both ends\n    while i <= j:\n        # If the element at index i is negative, increment the pointer for negative elements\n        if arr[i] < 0:\n            i += 1\n        # If the element at index j is positive, decrement the pointer for positive elements\n        elif arr[j] > 0:\n            j -= 1\n        # If both conditions are not satisfied, swap the elements at indices i and j\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            # Increment the pointer for negative elements\n            i += 1\n            # Decrement the pointer for positive elements\n            j -= 1\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    new_str = \"\"\n    for i in str1:\n        if i!= \" \":\n            new_str += i\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',''+char+' ')"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    str1 = str1.replace(\" \",\"\") # remove blank spaces from string\n    str1 = str1.replace(char,\"\") # replace blank spaces with given character\n    return str1"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in lst:\n        if len(heap) < n:\n            heapq.heappush(heap, i)\n        elif i > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, i)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        if i < len(list1):\n            heapq.heappush(heap, list1[i])\n        else:\n            break\n    \n    while len(heap) < len(list1):\n        heapq.heappush(heap, heapq.heappop(heap))\n    \n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return [heapq.heappop(list1) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    if not list1 or n > len(list1):\n        return []\n    max_heap = []\n    for num in list1:\n        heapq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    # initialize heap with first n elements of list\n    heapq.heapify(heap, list1[:n])\n    # pop elements from heap until heap has n elements\n    while len(heap) < len(list1):\n        # add smallest element to result list and remove it from heap\n        result.append(heapq.heappop(heap))\n        # add the next smallest element to heap\n        heapq.heappush(heap, min(list1[len(heap):]))\n    # return result list\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return sorted(list1, reverse=True)[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a min-heap to store the n largest numbers in the list\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the n largest numbers\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    \n    Parameters:\n    r: float\n        The radius of the cylinder.\n    h: float\n        The height of the cylinder.\n    \n    Returns:\n    float\n        The lateral surface area of the cylinder.\n    '''\n    \n    # Calculate the lateral surface area\n    lateral_surface = 2 * r * h\n    \n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * 3.14159 * r * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi*(r**2)*h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n\n    Args:\n    r: radius of the cylinder\n    h: height of the cylinder\n\n    Returns:\n    lateral surface area of the cylinder\n    \"\"\"\n\n    area = math.pi * (r ** 2) + 2 * math.pi * r * h + math.pi * (h ** 2)\n    lateral_area = area - 2 * math.pi * r * h\n\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*3.14159*(r**2))+(2*3.14159*(r**2)*h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2*3.14159*(r**2) + 2*3.14159*(h**2) + 2*3.14159*r*h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    # Formula for lateral surface area of a cylinder: A = 2 * \u03c0 * r^2 * h\n    area = 2 * 3.14 * r ** 2 * h\n    return area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    while n > 0:\n        if n % 2 == 0:\n            even_bits = even_bits | n\n        n = n >> 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store even bit positions\n    even_positions = []\n    # loop through all the bits of the number\n    for i in range(32):\n        # if the bit at position i is even, append its position to the even_positions list\n        if n & (1 << i):\n            even_positions.append(i)\n    # loop through the even_positions list and set the corresponding bits of the number to 1\n    for position in even_positions:\n        n |= (1 << position)\n    # return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    This function takes an integer number as input and returns the same number with all even bits set to 1.\n    '''\n    \n    # Iterate through the bits in the number\n    for bit in bin(n)[2:]:\n        \n        # If the bit is even, set it to 1\n        if bit == '0':\n            n = n\n        else:\n            n = n | (1 << int(bit))\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits of n\n    even_bits = []\n\n    # Iterate through each bit of n\n    for i in range(32):\n        # Check if the current bit is even\n        if (n >> i) & 1 == 0:\n            # Set the current bit to 1\n            n |= 1 << i\n            # Append the current bit to the even_bits list\n            even_bits.append(i)\n\n    # Return the even_bits list\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the updated number\n    updated_list = []\n\n    # Iterate over each bit of the given number\n    for bit in bin(n)[2:]:\n        # If the bit is an even number, set it to 1\n        if int(bit) % 2 == 0:\n            updated_list.append(1)\n        # If the bit is an odd number, set it to 0\n        else:\n            updated_list.append(0)\n\n    # Convert the updated list to an integer and return it\n    return int(''.join(str(x) for x in updated_list), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Loop through each bit of the input number\n    for bit in bin(n)[2:]: \n        # If the bit is even, append 1 to the result string\n        if int(bit) % 2 == 0: \n            result += \"1\"\n        # If the bit is odd, append 0 to the result string\n        else: \n            result += \"0\"\n    # Convert the result string to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store even bits set in a given number\n    even_bits = []\n\n    # Traverse through each bit of the given number\n    while n > 0:\n        # If the current bit is even, append it to the even_bits list\n        if n % 2 == 0:\n            even_bits.append(n % 2)\n\n        # Shift the number to the left by 1 bit\n        n = n // 2\n\n    # Join the list of even bits into a single number\n    result = int(''.join(str(x) for x in even_bits))\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the given number to binary string\n    binary_str = bin(n)[2:]\n    \n    # Iterate over each character in the binary string\n    for i in range(len(binary_str)): \n        # Check if the current character is even\n        if int(binary_str[i]) % 2 == 0: \n            # If it is, set the corresponding bit in the binary string to 1\n            binary_str = binary_str[:i] + '1' + binary_str[i+1:]\n    \n    # Convert the binary string back to an integer\n    return int(binary_str, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    while n > 0:\n        if n % 2 == 0:\n            n = n ^ 1 # XOR with 1 to set the even bit\n        n = n >> 1 # right shift to check the next bit\n\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize the result variable to 0\n    result = 0\n\n    # loop through each bit in the binary representation of n\n    for i in range(32):\n        # extract the i-th bit of n as a binary string\n        bit_str = format(n, f'0{i+1}b')[-1]\n\n        # if the i-th bit is even, set it to 1\n        if int(bit_str) % 2 == 0:\n            result |= 1 << i\n\n    # return the result\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurrences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set()\n    count_dict = {}\n    for item in test_list:\n        unique_tuples.add(item)\n    for item in unique_tuples:\n        count_dict[item] = test_list.count(item)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    # Create an empty dictionary to store the final result\n    result_dict = {}\n    # Iterate through the keys of the count_dict and add them to the result_dict as keys and their values as the corresponding counts\n    for key in count_dict:\n        result_dict[key] = count_dict[key]\n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Using Counter from the collections module to count the occurrences of each tuple\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple in the list\n    counts = Counter(test_list)\n    \n    # Convert the Counter object to a dictionary mapping each tuple to its count\n    result = dict(counts)\n    \n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the number of occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n    count_dict = Counter(unique_tuples)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup not in count_dict:\n            count_dict[tup] = 0\n        count_dict[tup] += 1\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    # initialize count variable \n    count = 0 \n\n    # loop through all possible substrings \n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            # check if substring is not empty \n            if str[i:j]!= \"\": \n                # increment count variable \n                count += 1 \n\n    # return count \n    return count "
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if j-i+1 > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    substrings = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substrings += 1\n    return substrings"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = str[i:j]\n            if substring!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    # initialize a count variable to keep track of the number of non-empty substrings\n    count = 0\n    \n    # iterate through all possible substrings of the given string\n    for i in range(len(str)):\n        # check if the substring is empty\n        if i == 0 or str[i]!= str[i-1]:\n            # if it is not empty, increment the count variable\n            count += 1\n    \n    # return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings.append(str[i:j])\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the total number of sequences to zero\n    total_sequences = 0\n\n    # Iterate over all possible elements in the range [2, m]\n    for i in range(2, m + 1):\n        # Check if the current element is greater than or equal to twice the previous element but less than or equal to m\n        if i >= 2 * i:\n            # Increment the total number of sequences by 1\n            total_sequences += 1\n\n    # Return the total number of sequences found\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    prev = float('-inf')\n\n    for i in range(2, n + 1):\n        current = i * m\n        if current <= prev:\n            continue\n        total += 1\n        prev = current\n\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return m\n    else:\n        return get_total_number_of_sequences(m, n - 1) + get_total_number_of_sequences(m, n - 2)\n\n\ndef main():\n    m = int(input(\"Enter the value of m: \"))\n    n = int(input(\"Enter the value of n: \"))\n    print(\"The total number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m, is:\", get_total_number_of_sequences(m, n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n):\n    # check if m is greater than n\n    if m < n:\n        return 0\n\n    # initialize the count of possible sequences to 1\n    count = 1\n\n    # iterate through all possible elements from m to n\n    for i in range(m, n+1):\n        # check if the element is within the required range\n        if 2*i >= i <= m:\n            # if the element is within the required range, add it to the count of sequences\n            count += get_total_number_of_sequences(m, i-1)\n\n    # return the final count\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Initialize variables for number of possible sequences and current sequence\n    total_sequences = 0\n    current_sequence = []\n    \n    # Loop through each number from 1 to m\n    for i in range(1, m+1):\n        \n        # Check if current number is greater than or equal to twice the previous number\n        if i >= 2*current_sequence[-1]:\n            \n            # If it is, add 1 to the total number of sequences and add the current number to the current sequence\n            total_sequences += 1\n            current_sequence.append(i)\n    \n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    def count_sequences(i, j, current_sum, current_len):\n        if current_sum > m or current_len > n:\n            return 0\n        if current_len == n and current_sum <= m:\n            return 1\n        return count_sequences(i, j, current_sum, current_len + 1) + \\\n               count_sequences(i, j + 1, current_sum, current_len + 1)\n\n    total_sequences = count_sequences(1, 1, 2, 1)\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in two positive integers, m and n, and returns the total number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (2*i + 1) * (2*j + 1) <= m:\n                total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    for i in range(n):\n        total += (m - i - 1) // (2 * i + 1)\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return m\n    else:\n        total_sequences = 0\n        for i in range(m, 0, -1):\n            if i % 2 == 0 and i < 2 * m:\n                total_sequences += get_total_number_of_sequences(i, n - 1)\n        return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    prev = 0\n\n    # Generate all possible sequences of length n\n    for i in range(2, m + 1):\n        current = i\n        j = 1\n        while current <= n and j <= n:\n            if current < 2 * prev and current < m:\n                current += 1\n            elif current == 2 * prev:\n                j += 1\n            else:\n                break\n        total_sequences += j\n\n    return total_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    last_element = list1[-1]\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    last_element = list1[-1]\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    last_element = list1.pop()\n    list1 += list2\n    list1.append(last_element)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        list1.append([list2.pop()])\n    else:\n        list1[len(list1)-1] = list2[len(list2)-1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the first list\n    len1 = len(list1)\n    # Check if the first list is empty\n    if len1 == 0:\n        print(\"The first list is empty.\")\n        return\n    # Check if the second list is empty\n    if len(list2) == 0:\n        print(\"The second list is empty.\")\n        return\n    # Get the last element of the first list\n    last_element = list1[-1]\n    # Remove the last element from the first list\n    list1.pop()\n    # Add the elements of the second list to the first list\n    list1.extend(list2)\n    # Append the last element of the first list to the second list\n    list2.append(last_element)\n    # Print the updated lists\n    print(\"Updated first list:\", list1)\n    print(\"Updated second list:\", list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) == 0 or len(list2) == 0:\n        return list1\n\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()  # remove the last element of the first list\n    for elem in list2:\n        list1.append(elem)  # append the elements of the second list to the first list"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = 0\n    for char in str1:\n        total_chars += 1\n    return total_chars"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Define a helper function to check if a number is a perfect square\n    def is_perfect_square(num):\n        \"\"\"\n        Check if a number is a perfect square.\n        \"\"\"\n        return num == int(num**0.5 + 0.5)**2\n\n    # Define a helper function to check if a number is an odd number\n    def is_odd(num):\n        \"\"\"\n        Check if a number is odd.\n        \"\"\"\n        return num % 2!= 0\n\n    # Start with the given number\n    curr = N\n\n    # Keep iterating until we find a next perfect square greater than the current number\n    while True:\n        # Check if the current number is already a perfect square\n        if is_perfect_square(curr):\n            # If it is, check if it's an odd number\n            if is_odd(curr):\n                # If it is, find the next odd perfect square\n                for i in range(curr, curr + 1, -1):\n                    if is_perfect_square(i) and is_odd(i):\n                        curr = i\n                        break\n            else:\n                # If it's not, find the next perfect square greater than the current number\n                for i in range(curr, curr + 1, -1):\n                    if is_perfect_square(i):\n                        curr = i\n                        break\n        else:\n            # If it's not, find the next perfect square greater than the current number\n            for i in range(curr + 2, int(math.sqrt(curr)) + 1, 2):\n                if is_perfect_square(i):\n                    curr = i\n                    break\n\n        # Check if we've found a next perfect square greater than the current number\n        if curr - 1 == N:\n            return None\n\n        # If we've found a next perfect square greater than the current number, break out of the loop\n        break\n\n    return curr"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Helper function to check if a number is a perfect square\n    def is_perfect_square(num):\n        # Check if the square root of a number is an integer\n        sqrt_num = int(math.sqrt(num))\n        # Check if the square of the square root is equal to the number itself\n        return sqrt_num * sqrt_num == num\n\n    # Check if the number is already a perfect square\n    if is_perfect_square(N):\n        return N\n\n    # Otherwise, find the next perfect square by adding 1 to the square root of the given number\n    sqrt_N = int(math.sqrt(N))\n    return sqrt_N * sqrt_N + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Initialize variables\n    next_square = N+1\n    max_square = int(math.sqrt(N)) * int(math.sqrt(N))\n\n    # Loop until next perfect square is greater than max square\n    while next_square <= max_square:\n        # If next perfect square is greater than N, return it\n        if next_square > N:\n            return next_square\n        # Otherwise, increment next perfect square by 2\n        next_square += 2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # calculate sqrt(N) using math module\n    sqrt_N = math.sqrt(N)\n    # if sqrt(N) is an integer, increment it by 1\n    if sqrt_N.is_integer():\n        sqrt_N += 1\n    # calculate the next perfect square by incrementing sqrt(N)\n    next_sqrt_N = sqrt_N + 1\n    # calculate the next perfect square\n    next_psq = math.pow(next_sqrt_N, 2)\n    # return the next perfect square\n    return next_psq"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if N < 0:\n        print(\"Invalid input: Please enter a positive number.\")\n    else:\n        sqrt_N = int(math.sqrt(N))\n        sqrt_N += 1\n        result = sqrt_N * sqrt_N\n        while result <= N:\n            sqrt_N += 1\n            result = sqrt_N * sqrt_N\n        return result"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Define a helper function to check if a given number is a perfect square\n    def is_perfect_square(num):\n        root = int(math.sqrt(num))\n        return root*root == num\n\n    # Check if the given number is already a perfect square\n    if is_perfect_square(N):\n        return N\n\n    # Calculate the next number greater than the given number\n    next_num = N + 1\n\n    # Check if the next number is a perfect square\n    while not is_perfect_square(next_num):\n        next_num += 1\n\n    # Return the next perfect square greater than the given number\n    return next_num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a positive integer as input and returns the next perfect square greater than the input.\n    \"\"\"\n    # find the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # find the integer part of the square root\n    root_int = int(sqrt_N)\n\n    # find the integer part of the square root of (N - root_int^2)\n    left_root_int = math.floor(math.sqrt((N - root_int**2)))\n\n    # find the integer part of the square root of root_int^2\n    right_root_int = math.ceil(math.sqrt(root_int**2))\n\n    # find the square of the integer part of the left root\n    left_root_sq = left_root_int**2\n\n    # find the square of the integer part of the right root\n    right_root_sq = right_root_int**2\n\n    # find the smallest square greater than root_int^2\n    next_root_sq = min(left_root_sq, right_root_sq)\n\n    # return the next perfect square greater than N\n    return next_root_sq"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        N = N + 1\n        if math.isqrt(N**2) - math.sqrt(N**2) < 1e-10:\n            return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # find the square root of N\n    sqrt_N = math.sqrt(N)\n    # find the nearest integer to sqrt_N\n    nearest_integer = int(sqrt_N) + 1\n    # find the difference between N and the nearest integer\n    diff = N - nearest_integer\n    # find the root of the difference\n    root = math.sqrt(diff)\n    # find the next perfect square greater than the nearest integer\n    next_sqrt = nearest_integer + root\n    # return the next perfect square greater than the input number\n    return next_sqrt"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    return int(math.sqrt(n))**2 == n\n\ndef next_Perfect_Square(N):\n    while True:\n        N = int(N*1.0001)\n        if is_perfect_square(N):\n            return N\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    max_sum = 0\n    left = [0] * n\n    right = [0] * n\n\n    # initialize left and right arrays\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            left[i] = left[i - 1] + arr[i]\n        else:\n            left[i] = 0\n\n    for i in range(n - 2, -1, -1):\n        if arr[i] > arr[i + 1]:\n            right[i] = right[i + 1] + arr[i]\n        else:\n            right[i] = 0\n\n    # find the maximum sum\n    for i in range(n):\n        max_sum = max(max_sum, left[i] + right[i])\n\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0]*2 for i in range(n)]\n    max_sum = float('-inf')\n\n    # Compute the maximum sum of a decreasing subsequence\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            dp[i][0] = dp[i-1][0] + arr[i]\n        else:\n            dp[i][0] = arr[i]\n\n    # Compute the maximum sum of a increasing subsequence\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i][1] = dp[i-1][1] + arr[i]\n        else:\n            dp[i][1] = arr[i]\n\n    # Find the maximum sum of a bitonic subsequence\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            dp[i][0] += dp[i-1][1]\n        else:\n            dp[i][1] += dp[i-1][0]\n        if dp[i][0] > dp[i-1][0] and dp[i][1] > dp[i-1][1]:\n            max_sum = max(max_sum, dp[i][0] + dp[i][1] - dp[i-1][0] - dp[i-1][1])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    if len(arr) < 2:\n        return 0\n    \n    # initialize variables\n    max_sum_ending_at_i = [0] * len(arr)\n    max_sum_ending_at_j = [0] * len(arr)\n    max_sum_ending_at_i[0] = arr[0]\n    max_sum_ending_at_j[len(arr)-1] = arr[len(arr)-1]\n    current_sum_ending_at_i = arr[0]\n    current_sum_ending_at_j = arr[len(arr)-1]\n    \n    # iterate through the array\n    for i in range(1, len(arr)-1):\n        if arr[i] > arr[i-1]:\n            # decreasing subsequence\n            current_sum_ending_at_i += arr[i]\n            max_sum_ending_at_i[i] = max(max_sum_ending_at_i[i-1], current_sum_ending_at_i)\n        else:\n            # increasing subsequence\n            current_sum_ending_at_i += arr[i]\n            max_sum_ending_at_i[i] = max(max_sum_ending_at_i[i-1], current_sum_ending_at_i)\n        \n        if arr[i] < arr[i+1]:\n            # decreasing subsequence\n            current_sum_ending_at_j += arr[i]\n            max_sum_ending_at_j[i] = max(max_sum_ending_at_j[i-1], current_sum_ending_at_j)\n        else:\n            # increasing subsequence\n            current_sum_ending_at_j += arr[i]\n            max_sum_ending_at_j[i] = max(max_sum_ending_at_j[i-1], current_sum_ending_at_j)\n            \n    # find the maximum sum of a bitonic subsequence\n    max_sum = max(max_sum_ending_at_i[-1], max_sum_ending_at_j[0])\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    # Step 1: Find the longest increasing subsequence\n    max_sum_left = [0] * n\n    max_sum_right = [0] * n\n    max_sum_global = [0] * n\n    increasing_subsequence = [0] * n\n    \n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            increasing_subsequence[i] = increasing_subsequence[i-1] + 1\n            max_sum_left[i] = max(max_sum_left[i-1], arr[i])\n        else:\n            increasing_subsequence[i] = 1\n            max_sum_left[i] = arr[i-1]\n    \n    for i in range(n-2, -1, -1):\n        if arr[i] > arr[i+1]:\n            increasing_subsequence[i] = max(increasing_subsequence[i], increasing_subsequence[i+1] + 1)\n            max_sum_right[i] = max(max_sum_right[i+1], arr[i])\n        else:\n            increasing_subsequence[i] = max(increasing_subsequence[i], 1)\n            max_sum_right[i] = arr[i+1]\n    \n    max_sum_global = [max(max_sum_left[i], max_sum_right[i]) for i in range(n)]\n    \n    # Step 2: Find the maximum sum of a bitonic subsequence\n    max_sum_bitonic = [0] * n\n    for i in range(1, n-1):\n        if increasing_subsequence[i-1] % 2 == 0:\n            max_sum_bitonic[i] = max(max_sum_bitonic[i-1], max_sum_global[i], max_sum_bitonic[i-2] + max_sum_global[i])\n        else:\n            max_sum_bitonic[i] = max(max_sum_bitonic[i-1], max_sum_global[i], max_sum_bitonic[i-2] - max_sum_global[i])\n            \n    return max(max_sum_bitonic)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables\n    n = len(arr)\n    bitonic_max = float('-inf')\n    max_ending_here = 0\n\n    # Traverse the array\n    for i in range(n):\n        max_ending_here += arr[i]\n\n        if arr[i] > 0:\n            bitonic_max = max(bitonic_max, max_ending_here)\n            max_ending_here = 0\n\n    return bitonic_max"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    # Calculate the sum of the first and last element of the array\n    first_sum = arr[0]\n    last_sum = arr[-1]\n\n    # Initialize the maximum sum to the sum of the first and last element\n    max_sum = first_sum + last_sum\n\n    # Initialize the first and last indices of the bitonic subsequence\n    first_index = 0\n    last_index = 0\n\n    # Loop through the array\n    for i in range(1, len(arr) - 1):\n        # Calculate the sum of the current element and its left and right neighbors\n        left_neighbor = arr[i - 1]\n        right_neighbor = arr[i + 1]\n        current_sum = arr[i] + left_neighbor + right_neighbor\n\n        # If the current sum is greater than the maximum sum, update the maximum sum and its indices\n        if current_sum > max_sum:\n            max_sum = current_sum\n            first_index = i - 1\n            last_index = i\n\n    # Return the maximum sum and its indices\n    return max_sum, (first_index, last_index)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # convert the array to a set to remove duplicates\n    arr = list(set(arr))\n\n    # find the number of increasing subsequences\n    num_increasing = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            num_increasing += 1\n\n    # find the number of decreasing subsequences\n    num_decreasing = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            num_decreasing += 1\n\n    # find the maximum sum of a bitonic subsequence\n    max_sum = float('-inf')\n    if num_increasing > num_decreasing:\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i-1]:\n                current_sum = arr[i] + max_sum\n            else:\n                current_sum = arr[i-1] + max_sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i-1]:\n                current_sum = arr[i] + max_sum\n            else:\n                current_sum = arr[i-1] + max_sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, \n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    if len(arr) < 3:\n        return 0\n    elif len(arr) == 3:\n        if arr[0] <= arr[1] <= arr[2]:\n            return arr[0] + arr[2]\n        else:\n            return 0\n    else:\n        n = len(arr)\n        dp = [0] * n\n        for i in range(n):\n            dp[i] = max(arr[i], arr[n-i-1])\n        for i in range(2, n):\n            dp[i] = max(dp[i-1] + arr[i-1], dp[i-2] + arr[i-2])\n        return dp[n-1]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables\n    n = len(arr)\n    dp = [0] * (n + 1)\n\n    # Traverse the array and calculate the maximum sum for a bitonic subsequence\n    for i in range(1, n + 1):\n        if arr[i - 1] < arr[i]:\n            dp[i] = dp[i - 1] + arr[i]\n        else:\n            dp[i] = max(dp[i - 1], dp[i - 2] + arr[i])\n\n    # Return the maximum sum of a bitonic subsequence\n    return dp[n]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # Create a copy of the array to store the maximum sum for each subarray\n    max_sum_arr = [0] * n\n\n    # Initialize the maximum sum of a decreasing subarray\n    max_sum_decreasing = 0\n\n    # Initialize the maximum sum of an increasing subarray\n    max_sum_increasing = 0\n\n    # Traverse the array from left to right\n    for i in range(n):\n\n        # If the current element is decreasing, update the maximum sum of a decreasing subarray\n        if arr[i] > arr[i-1]:\n            max_sum_decreasing = max(max_sum_decreasing + arr[i], max_sum_increasing)\n\n        # If the current element is increasing, update the maximum sum of an increasing subarray\n        else:\n            max_sum_increasing = max(max_sum_decreasing, max_sum_increasing + arr[i])\n\n        # Update the maximum sum of the current subarray\n        max_sum_arr[i] = max_sum_increasing\n\n    return max_sum_arr[-1]"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    initial_guess = number / 2\n    tolerance = 1e-6\n    guess = initial_guess\n    while abs(guess**2 - number) > tolerance:\n        guess = (guess + number/guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1\n    y = number\n    while abs(x**2 - y) > 0.001:\n        x = (x + y/x) / 2\n        y = number / x\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = 0.5  # initial guess for x\n    tol = 1e-6  # tolerance for root\n    n = 0  # number of iterations\n    while abs(x0**2 - number) > tol and n < 100:  # iterate until convergence or maximum iterations reached\n        x1 = x0 - (number / x0)  # calculate new guess\n        x0 = x1  # update previous guess\n        n += 1\n    if n == 100:  # maximum iterations reached\n        raise ValueError('Convergence failed')\n    return x0  # return the root"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize variables\n    x0 = 1.0\n    x1 = number / x0\n    x2 = (number / x0) + (number / x1)\n    x3 = (number / x1) + (number / x2)\n\n    # iterate until x2 is within some tolerance of the correct square root\n    while abs(x2 - x1) > 1e-15:\n        x0 = x1\n        x1 = x2\n        x2 = (number / x0) + (number / x1)\n        x3 = (number / x1) + (number / x2)\n\n    # return the final result\n    return x2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a given number using the babylonian method.\n    \"\"\"\n    x = 0.5 * (1 + number / 2)  # Start with an initial guess of 0.5 * (1 + number/2)\n    while abs(x * x - number) > 0.001:  # Loop until the square of x is within 0.001 of the number\n        x = 0.5 * (x + number / x)  # Update the guess with the new estimate\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n\n    This function takes a positive floating-point number as input and returns the square root\n    of the input number using the babylonian method.\n\n    The babylonian method is a numerical method that uses repeated divisions and\n    multiplications to approximate the square root of a number. It is based on the\n    fact that the square root of a number x can be computed as a fixed point of the\n    function g(x) = (1 + x) / 2, where g is the inverse of sqrt(x).\n\n    This function uses the babylonian method to compute the square root of the input\n    number. The function returns a floating-point number representing the computed\n    square root.\n\n    \"\"\"\n    # initialize variables\n    x = number\n    y = 0.5 * x\n    i = 0\n\n    while abs(y - x) > 0.000001:\n        # compute y as the fixed point of the function g(x) = (1 + x) / 2\n        y = (1 + x) / 2\n        # update x using the babylonian method\n        x = y * y + x - y\n        i += 1\n\n    return i, x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1.0\n    y = number/x\n    while abs(x-y) > 1e-6:\n        x = y\n        y = (x + number/x)/2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    i = 0\n    while True:\n        next_guess = (guess + number / guess) / 2\n        if abs(next_guess - guess) < 0.001:\n            return next_guess\n        guess = next_guess\n        i += 1\n        if i > 100:\n            return None"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number // 2\n    while guess ** 2 > number:\n        guess = (guess + number // guess) // 2\n    while guess ** 2 < number:\n        guess = (guess + number // guess) // 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize a counter and a guess\n    counter = 0\n    guess = number // 2\n\n    # loop until the guess is within an error of 0.00001 of the square root\n    while abs(guess**2 - number) >= 0.00001:\n        counter += 1\n        guess = (number/guess) + guess/2\n\n    # print the number of iterations and the final guess\n    print(f\"Number of iterations: {counter}\")\n    print(f\"Final guess: {guess}\")"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(s): \n    n = len(s) \n    table = [[0] * n for _ in range(n)] \n    max_len = 1 \n    start = 0 \n    for i in range(1, n): \n        for j in range(i): \n            if s[i] == s[j] and (i - j <= 2 or table[j+1][i-1] == 1): \n                table[j][i] = table[j+1][i-1] + 2 \n                if table[j][i] > max_len: \n                    max_len = table[j][i] \n                    start = j \n        if max_len > 1: \n            table[0][i] = 1 \n            max_len = 1 \n            start = i \n    return start "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": ""
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    if len(str) < 2:\n        return len(str)\n\n    # Create a 2D table to store the length of the longest palindromic subsequence ending at each index\n    table = [[0 for j in range(len(str))] for i in range(len(str))]\n\n    # Initialize the first row and column to be the length of the string itself\n    for i in range(len(str)):\n        table[i][i] = len(str)\n\n    # Fill in the rest of the table using dynamic programming\n    for gap in range(2, len(str)):\n        for i in range(len(str) - gap):\n            j = i + gap\n            if str[i] == str[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i + 1][j], table[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence ending at the last index\n    return table[0][len(str) - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    # Create a 2D table to store the length of longest palindromic subsequence for substrings of s\n    table = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Initialize the longest palindromic subsequence of length 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill the rest of the table using dynamic programming\n    for length in range(2, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if s[start] == s[end]:\n                table[start][end] = table[start + 1][end - 1] + 2\n            else:\n                table[start][end] = max(table[start + 1][end], table[start][end - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Initialize two variables to store the length of longest palindromic subsequence and start index of that subsequence\n    max_len = 1\n    max_start = 0\n    # Initialize two variables to store the length of longest palindromic subsequence and start index of that subsequence for odd length substrings\n    max_len_odd = 1\n    max_start_odd = 0\n\n    # Loop through all substrings of the string\n    for i in range(n):\n        # If the current substring is odd length, then check if the substring is a palindrome and update the maximum length and start index accordingly\n        if i < n-1 and str[i] == str[i+1]:\n            if i < max_start_odd:\n                continue\n            if i-max_start_odd > max_len_odd:\n                max_len_odd = i-max_start_odd\n                max_start_odd = i\n\n        # If the current substring is even length, then check if it is a palindrome and update the maximum length and start index accordingly\n        else:\n            # Check if the substring is a palindrome\n            for j in range(i, n):\n                if j < n-1 and str[i] == str[j+1]:\n                    break\n                if j-i+1 > max_len:\n                    max_len = j-i+1\n                    max_start = i\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    n = len(s)\n    # Initialize table\n    table = [[0] * n for _ in range(n)]\n\n    # Build table in bottom up manner\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] == s[j]:\n                table[i][j] = table[j][i-1] + 2\n            else:\n                table[i][j] = max(table[i][j-1], table[j][i])\n\n    return table[n-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_palindrome(s):\n    \"\"\"\n    Helper function to check if a given string is palindrome or not.\n    \"\"\"\n    return s == s[::-1]\n\n\ndef lps(s):\n    \"\"\"\n    This function returns the length of the longest palindromic subsequence in a given string.\n    \"\"\"\n    n = len(s)\n    # Create a table to store the lengths of longest palindromic subsequences\n    # of all substrings of s\n    table = [[0] * n for i in range(n)]\n\n    # Fill the table in bottom up manner\n    for i in range(n):\n        for j in range(i, n):\n            # If the characters at the current position are same,\n            # then we can extend the palindromic subsequence to include\n            # both characters.\n            if s[i] == s[j]:\n                table[i][j] = 2 + table[i+1][j-1]\n            else:\n                # If the characters are not same, then we need not extend the palindromic\n                # subsequence.\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D table to store the lengths of longest palindromic subsequences for all prefixes\n    table = [[0 for j in range(n)] for i in range(2)]\n    # initialize the table with 0 for all prefixes and 1 for all suffixes\n    for i in range(2):\n        table[i][0] = 0\n        table[i][1] = 1\n    # fill in the table using dynamic programming\n    for i in range(2, n+1):\n        for j in range(n-1):\n            if str[j] == str[i-1]:\n                table[i%2][j] = table[(i-1)%2][j] + 1\n            else:\n                table[i%2][j] = max(table[(i-1)%2][j], table[i%2][j+1])\n    # return the length of the longest palindromic subsequence\n    return table[n%2][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str): \n    # Create a 2D table to store lengths of longest palindromic subsequences of substrings of length i \n    # in the given string str \n    table = [[0 for j in range(len(str))] for i in range(len(str)+1)] \n\n    # Initialize the table for the base cases (when the length of substring is 1) \n    for i in range(1, len(str)+1): \n        table[i][i-1] = 1 \n\n    # Fill the table for all other lengths of substrings \n    for i in range(2, len(str)+1): \n        for j in range(1, i): \n            if str[j-1] == str[i-1]: \n                table[i][j] = table[j-1][j-1] + 1 \n            else: \n                table[i][j] = max(table[i-1][j], table[j][i-1]) \n\n    # Return the length of the longest palindromic subsequence in the given string \n    return table[len(str)][len(str)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Create a 2D array to store the length of the longest palindromic subsequence ending at each position in the string\n    dp = [[0] * len(str) for _ in range(len(str))]\n\n    # Initialize the base cases:\n    # - if the length of the string is 1, it is a palindrome\n    # - if the string contains only a single character, it is also a palindrome\n    for i in range(len(str)):\n        dp[i][i] = 1\n        if i > 0 and str[i] == str[i-1]:\n            dp[i][i-1] = 2\n\n    # Fill in the remaining elements of the array using dynamic programming\n    for length in range(3, len(str) + 1):\n        for i in range(len(str) - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # Find the maximum length palindromic subsequence\n    result = 0\n    for i in range(len(str)):\n        result = max(result, dp[0][i])\n\n    return result"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/(1/2 + 1/3 +... + 1/n)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculates the harmonic sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1/(1/n + harmonic_sum(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the harmonic sum using the formula: 1/n + 1/n-1 +... + 1/1\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1.0/i\n    \n    # Return the harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) * (n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    return n * (n - 1) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # initialize sum to zero\n    harmonic_sum = 0\n    # loop through the range from 1 to n-1\n    for i in range(1, n):\n        # calculate the harmonic sum of the current iteration\n        harmonic_sum += (1/i)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + ((1/n**2)**(n-2))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # creating sets for faster searching\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    # finding the intersection of the sets\n    intersection = set1.intersection(set2)\n    # converting the set back to a list and returning it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Initialize an empty dictionary to store the intersection of the arrays\n    intersection_dict = {}\n\n    # Iterate through each element of the first array\n    for num1 in array_nums1:\n        # Check if the element is present in the second array\n        if num1 in array_nums2:\n            # If it is, add it to the intersection dictionary with a count of 1\n            intersection_dict[num1] = 1\n\n    # Create a list from the keys of the intersection dictionary\n    intersection_list = list(intersection_dict.keys())\n\n    # Sort the list in ascending order\n    intersection_list.sort()\n\n    # Return the sorted list\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes in two arrays and returns their intersection.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n\n    # Initialize an empty set to store the intersection\n    intersection = set()\n\n    # Loop through each element in the first array\n    for num in array_nums1:\n        # Check if the element is in the second array\n        if num in array_nums2:\n            # Add the element to the intersection set\n            intersection.add(num)\n\n    # Return the intersection set\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n\n    # Create a set from the first array, and use it to create a new array with only the unique elements from the second array\n    intersection_set = set(array_nums1)\n    intersection_array = []\n\n    for num in array_nums2:\n        if num in intersection_set:\n            intersection_array.append(num)\n            intersection_set.remove(num)\n\n    return intersection_array"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Create a set from the first array\n    set1 = set(array_nums1)\n\n    # Create an empty set to store the intersection\n    intersection = set()\n\n    # Iterate through the second array and add elements to the intersection set if they exist in the first array\n    for num in array_nums2:\n        if num in set1:\n            intersection.add(num)\n\n    # Convert the intersection set back to a list\n    intersection_list = list(intersection)\n\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # initialize an empty list to store the intersection\n    intersection = []\n    \n    # loop through each element in the first array\n    for num in array_nums1:\n        # check if the element is in the second array\n        if num in array_nums2:\n            # if it is, add it to the intersection list\n            intersection.append(num)\n    \n    # return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes in two arrays and returns a new array that contains all the common elements between the two arrays.\n    \"\"\"\n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n    return result"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    count = 0 \n    for item in tup: \n        if item == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i == 0:\n            result.append(elem)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in list:\n        new_list.append(element)\n        new_list.append(i)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        if i == 0:\n            new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.insert(0, element)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.insert(i, element)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []  \n    for num in numbers:  \n        try:  \n            complex_number = complex(num)  \n            complex_numbers.append(complex_number)  \n        except ValueError:  \n            print(\"Invalid input: \", num)  \n            \n    for num in complex_numbers:  \n        magnitude = cmath.sqrt(num.real**2 + num.imag**2)  \n        angle = cmath.phase(num)  \n        print(\"Magnitude:\", magnitude, \"Angle:\", angle)  "
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        print(f'{num} in polar form is ({r:.2f}+{theta:.2f}i)')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        abs_num = abs(real**2 + imag**2)\n        angle = cmath.phase(complex(real, imag))\n        print(f\"{num} = {abs_num:.2f} + {angle:.2f} * j\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of polar coordinates.\n    Each polar coordinate is a tuple of the form (magnitude, angle in radians).\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        magnitude = cmath.abs(number)\n        angle = cmath.phase(number)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        try:\n            r, theta = cmath.polar(num)\n            print(\"({}, {})\".format(r, theta))\n        except ValueError:\n            print(\"Invalid input\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        result.append(complex(real, imag))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        r = num.real**2 + num.imag**2\n        angle = cmath.phase(num)\n        polar_coordinates.append((r, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # loop over each number in the list\n    for number in numbers:\n        # unpack the number as (real, imaginary)\n        real, imaginary = number\n        # calculate the magnitude and the argument (in radians)\n        magnitude = cmath.sqrt(real**2 + imaginary**2)\n        argument = cmath.phase(number)\n        # convert the magnitude and the argument to a tuple\n        polar_coordinates = (magnitude, argument)\n        # update the list with the polar coordinates\n        numbers.remove(number)\n        numbers.append(polar_coordinates)\n    return numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n    for number in numbers:\n        # Get the modulus of the complex number\n        modulus = cmath.sqrt(number.real**2 + number.imag**2)\n\n        # Get the angle of the complex number in radians\n        angle = cmath.phase(number)\n\n        # Add the polar coordinates to the list\n        polar_coords.append((modulus, angle))\n\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # split the complex number into real and imaginary parts\n        real, imag = cmath.polar(num)\n\n        # calculate the absolute value of the real part\n        abs_real = abs(real)\n\n        # calculate the angle in radians\n        angle = cmath.phase(num)\n\n        # convert the angle to degrees\n        angle = round(angle * 180/cmath.pi, 2)\n\n        # print the polar coordinates in the format: (r, theta)\n        print(f'({abs_real}, {angle}\u00b0)')"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(lst, n)]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)-n+1):\n        combination = tuple(l[i:i+n])\n        color_combinations.append(combination)\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)-n+1):\n        result.append(tuple(l[i:i+n]))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(1, len(l) + 1):\n        for comb in combinations_with_replacement(l, i):\n            result.append(tuple(comb))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[i:], n):\n            result.append((l[i],) + j)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(lst, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    \"\"\"\n    A helper function to check if a number is prime or not\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    A function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    A function to count the number of prime numbers less than a given number n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        flag = 1\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                flag = 0\n                break\n        if flag == 1:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    Write a helper function that returns True if a number is prime, False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize a variable to store the maximum value\n    max_val = max(test_tup1[0], test_tup2[0])\n    \n    # If the second element of the first tuple is greater than or equal to the second element of the second tuple,\n    # update max_val to the maximum of its current value and the second element of the first tuple\n    if test_tup1[1] >= test_tup2[1]:\n        max_val = max(max_val, test_tup1[1])\n    \n    # If the second element of the second tuple is greater than or equal to the second element of the first tuple,\n    # update max_val to the maximum of its current value and the second element of the second tuple\n    if test_tup2[1] >= test_tup1[1]:\n        max_val = max(max_val, test_tup2[1])\n    \n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_num = max(test_tup1)\n    if max_num == test_tup1[0]:\n        max_num = max(test_tup2)\n\n    return max_num"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_1 = max(test_tup1)\n    max_2 = max(test_tup2)\n    \n    if max_1 > max_2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Convert the tuples to lists for easy comparison\n    tup1_list = list(test_tup1)\n    tup2_list = list(test_tup2)\n\n    # Compare the two lists and return the maximum value\n    max_value = max(tup1_list, tup2_list)\n    return max_value"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different lengths.\")\n        return None\n    \n    # Initialize the maximum values with the first values of the tuples\n    max1, max2 = test_tup1[0], test_tup2[0]\n    \n    # Loop through the tuples and update the maximum values\n    for i in range(1, len(test_tup1)):\n        if test_tup1[i] > max1:\n            max1 = test_tup1[i]\n        if test_tup2[i] > max2:\n            max2 = test_tup2[i]\n    \n    # Return the maximum values\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Compare the first element of each tuple\n    if test_tup1[0] > test_tup2[0]:\n        # If the first element of test_tup1 is greater, return test_tup1\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        # If the first element of test_tup1 is lesser, return test_tup2\n        return test_tup2\n    else:\n        # If the first element of both tuples are equal, compare the second element\n        if test_tup1[1] > test_tup2[1]:\n            # If the second element of test_tup1 is greater, return test_tup1\n            return test_tup1\n        elif test_tup1[1] < test_tup2[1]:\n            # If the second element of test_tup1 is lesser, return test_tup2\n            return test_tup2\n        else:\n            # If the second element of both tuples are equal, compare the third element\n            if test_tup1[2] > test_tup2[2]:\n                # If the third element of test_tup1 is greater, return test_tup1\n                return test_tup1\n            else:\n                # If the third element of test_tup1 is lesser, return test_tup2\n                return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_value = max(test_tup1[0], test_tup2[0])\n    if test_tup1[1] > max_value:\n        max_value = test_tup1[1]\n    if test_tup2[1] > max_value:\n        max_value = test_tup2[1]\n    return max_value"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    prime = 2\n    is_prime = True\n    \n    # Loop through the numbers until the nth newman prime is found\n    while count < n:\n        # Check if the current number is prime\n        for i in range(2, prime):\n            if prime % i == 0:\n                is_prime = False\n                break\n                \n        # If the current number is prime, increment the count and move to the next number\n        if is_prime:\n            count += 1\n            prime += 1\n            is_prime = True\n    \n    # Return the nth newman prime\n    return prime - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Find the nth Fibonacci number\n    fib_n = (1 + 5**0.5) / 2\n    \n    # Find the nth newman-shanks-williams prime number\n    while True:\n        if fib_n == int(fib_n):\n            # Check if the number is prime\n            for i in range(2, int(fib_n**0.5) + 1):\n                if fib_n % i == 0:\n                    break\n            else:\n                return int(fib_n)\n        else:\n            fib_n += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    num = 1\n\n    # Iterate until we find the nth newman\u2013shanks\u2013williams prime number\n    while count < n:\n        # Check if the number is prime\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        # If the number is prime, increment the count and update the number\n        if is_prime:\n            count += 1\n            num += 2\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return num"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # initialize a variable to keep track of the number of newman-shanks-williams primes found so far\n    prime_count = 0\n\n    # loop through all numbers from 2 to n-1\n    for i in range(2, n):\n\n        # check if i is a newman-shanks-williams prime\n        if is_newman_prime(i):\n\n            # if it is, increment the prime count\n            prime_count += 1\n\n            # if the prime count is equal to n, return i\n            if prime_count == n:\n                return i\n\n    # if the loop completes without finding the nth newman-shanks-williams prime, return None\n    return None\n\n\ndef is_newman_prime(n): \n    '''\n    Write a function to check if a number is a newman\u2013shanks\u2013williams prime.\n    '''\n\n    # check if n is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # initialize a variable to keep track of the number of factors of n\n    factor_count = 0\n\n    # loop through all numbers from 3 to the square root of n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n\n        # if n is divisible by i, decrement the factor count\n        if n % i == 0:\n            factor_count -= 1\n\n        # if the factor count is less than 0, return False (n is not a newman-shanks-williams prime)\n        if factor_count < 0:\n            return False\n\n        # if n is even, decrement the factor count by 1\n        if n % 2 == 0:\n            factor_count -= 1\n\n    # if the loop completes without finding any factors of n, return True (n is a newman-shanks-williams prime)\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    newman_primes = []\n    # Initialize the list with the first newman prime\n    newman_primes.append(2)\n    # Loop through the remaining numbers\n    for i in range(3, n+1, 2):\n        # Check if the number is a newman prime\n        is_newman_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_newman_prime = False\n                break\n        if is_newman_prime:\n            # Add the newman prime to the list\n            newman_primes.append(i)\n    # Return the nth newman prime\n    return newman_primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        print(\"Invalid input.\")\n        return\n    \n    # Initialize variables to keep track of the current number and its multiplicity\n    prime = 2\n    count = 1\n    \n    # Loop through all numbers up to the nth newman\u2013shanks\u2013williams prime number\n    while count < n:\n        # Check if the current number is a newman\u2013shanks\u2013williams prime\n        is_prime = True\n        for i in range(2, int(prime**0.5)+1):\n            if prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime += 1\n            count += 1\n            \n    # Print the nth newman\u2013shanks\u2013williams prime number\n    print(\"The\", n, \"newman\u2013shanks\u2013williams prime number is:\", prime)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # Initialize a dictionary to store the prime numbers and their multiplicity\n    prime_dict = {}\n\n    # Initialize the list of prime numbers\n    prime_list = [2, 3]\n\n    # Loop through each number between 5 and n\n    for num in range(5, n + 1):\n        # Check if num is a prime number\n        is_prime = True\n        for prime in prime_list:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # Add num to the prime list and increment its multiplicity in the dictionary\n            prime_list.append(num)\n            if num in prime_dict:\n                prime_dict[num] += 1\n            else:\n                prime_dict[num] = 1\n\n    # Print the nth newman-shanks-williams prime number\n    print(prime_list[n - 1])"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a counter for the number of prime numbers found so far\n    count = 0\n    # Initialize a list of primes found so far\n    primes = []\n    # Initialize a list of numbers to test for primality\n    numbers = range(2, n+1)\n    \n    while count < n:\n        # Test the next number in the list for primality\n        is_prime = True\n        for prime in primes:\n            if prime > numbers[count]:\n                # The current number is less than or equal to the next prime, so it is not a prime\n                is_prime = False\n                break\n            elif numbers[count] % prime == 0:\n                # The current number is divisible by a prime that is already in the list, so it is not a prime\n                is_prime = False\n                break\n        if is_prime:\n            # If the current number is prime, add it to the list of primes\n            primes.append(numbers[count])\n            # Increment the counter for the number of prime numbers found so far\n            count += 1\n    \n    # Return the nth prime number found\n    return primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    \"\"\"\n    This function finds the nth newman\u2013shanks\u2013williams prime number.\n    \n    Args:\n    n (int): The value of n for which the newman\u2013shanks\u2013williams prime number needs to be found.\n    \n    Returns:\n    int: The nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize variables\n    p = 2 # Start with the first prime number\n    count = 1 # Initialize count to 1\n    prime = True # Initialize prime to True\n    \n    # Iterate until n count is reached\n    while count < n:\n        # If prime is True, check if it is a newman\u2013shanks\u2013williams prime number\n        if prime:\n            # Check if p is a newman\u2013shanks\u2013williams prime number\n            if is_newman_prime(p):\n                count += 1 # Increment count\n        # Check if next number is prime\n        p += 1 # Increment p\n        prime = not prime # Toggle prime\n    \n    return p # Return the nth newman\u2013shanks\u2013williams prime number\n\ndef is_newman_prime(n):\n    \"\"\"\n    This function checks if a number is a newman\u2013shanks\u2013williams prime number.\n    \n    Args:\n    n (int): The value of n for which the newman\u2013shanks\u2013williams prime number needs to be checked.\n    \n    Returns:\n    bool: True if n is a newman\u2013shanks\u2013williams prime number, False otherwise.\n    \"\"\"\n    # Initialize variables\n    x = 1 # Initialize x to 1\n    prime = True # Initialize prime to True\n    \n    # Iterate until x is greater than n\n    while x <= n:\n        # Check if x is a factor of n\n        if n % x == 0:\n            prime = False # Set prime to False\n            break # Break out of while loop\n        x += 1 # Increment x\n        \n    return prime # Return True if prime, False otherwise"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Define the prime numbers up to n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Define the function to check if a number is prime\n    def is_prime(n): \n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Initialize the count of prime numbers found\n    count = 0\n\n    # Check if n is prime\n    if is_prime(n):\n        count += 1\n\n    # Iterate over the remaining numbers until count equals n\n    i = 0\n    while count < n:\n        i += 1\n\n        # Check if the number is prime\n        if is_prime(primes[i-1]):\n            count += 1\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return primes[i-1]"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] / test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(x / y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The number of elements in the two tuples are not equal.\"\n\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            return \"The second element cannot be zero.\"\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            result_tup += (None, )\n        else:\n            result_tup += (test_tup1[i] / test_tup2[i], )\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            raise ValueError('Cannot divide by zero')\n        result_tup += (test_tup1[i] // test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of the tuples do not match.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of both tuples are equal\n    if len(test_tup1) == len(test_tup2):\n        # loop through each element of both tuples and perform element-wise division\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] / test_tup2[i])\n        return result\n    else:\n        print(\"Error: The length of both tuples must be equal.\")"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % L!= 0:\n        raise ValueError('The length of the list is not a multiple of the given L value.')\n    else:\n        half_L = len(list1) // 2\n        first_part = list1[:half_L]\n        second_part = list1[half_L:]\n        return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < 2*L:\n        raise ValueError(\"The list must have at least two times the length of L\")\n\n    first_part = list1[:L]\n    second_part = list1[L:]\n\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    if not isinstance(L, int):\n        raise TypeError(\"L must be an integer\")\n    if L < 0:\n        raise ValueError(\"L must be non-negative\")\n\n    mid = len(lst) // 2\n    return lst[:mid], lst[mid:]\n"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # The first part of the list will be the first L elements of the given list\n    first_part = list1[:L]\n    # The second part of the list will be the remaining elements of the given list\n    second_part = list1[L:]\n    # Return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    It returns the resulting lists in a tuple.\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    if not isinstance(L, int):\n        raise TypeError(\"L must be an integer\")\n    if L > len(lst):\n        raise ValueError(\"L must be smaller than the length of the input list\")\n\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create empty lists to store the first and second parts of the list\n    first_part = []\n    second_part = []\n    # Loop through the original list and add elements to the corresponding list\n    for element in list1:\n        if len(first_part) < L:\n            first_part.append(element)\n        else:\n            second_part.append(element)\n    # Return the two lists as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 0:\n        return (list1, [])\n    elif L > 0:\n        mid = len(list1)//2\n        first_part = list1[:mid]\n        second_part = list1[mid:]\n        return (first_part, second_part)\n    else:\n        raise ValueError('L should be non-negative')"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # check if the length of the list is greater than L\n    if len(list1) > L:\n        # create a new list with the first L elements\n        part1 = list1[:L]\n        # create a new list with the rest of the elements\n        part2 = list1[L:]\n        # return the two parts in a tuple\n        return (part1, part2)\n    else:\n        # if the length of the list is less than L, return a message saying so\n        print(\"The list is too small to split into two parts.\")"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Check if L is positive integer\n    if not isinstance(L, int) or L <= 0:\n        raise ValueError(\"L must be a positive integer.\")\n    \n    # Calculate the length of the first part of the list\n    length1 = L\n    \n    # Check if the length of the list is greater than L\n    if len(list1) < L:\n        raise ValueError(\"The length of the list should be greater than or equal to L.\")\n    \n    # Split the list into two parts\n    list2 = list1[L:]\n    list1 = list1[:L]\n    \n    # Return the two parts in a tuple\n    return (list1, list2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    return int(h_age) * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age / 7\n    print(\"The dog is\", dog_years, \"years old.\")"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert height in inches to centimeters\n    h_in = h_age * 2.54\n    # calculate age in dog's years\n    dog_age_years = h_in / 120\n    return dog_age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n\n    # Calculate dog's age in dog's years\n    dog_years = h_age * 7\n\n    # Return the dog's age in dog's years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = h_age * 7 # multiplying by 7 to convert to dog years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age * 7\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_years = 7 * h_age\n    return dogs_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    #converting h_age from hours to days\n    age_in_days = h_age/24\n    \n    #converting age_in_days to years\n    age_in_years = age_in_days/365\n    \n    return age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return 7 * h_age"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    for i in range(0, len(S), step):\n        split_list.append(S[i:i+step])\n    return split_list"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        return []\n    elif step == 1:\n        return [[x] for x in S]\n    else:\n        results = []\n        for i in range(0, len(S), step):\n            sub_list = [S[j] for j in range(i, i+step)]\n            results.append(sub_list)\n        return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step < 1:\n        raise ValueError(\"Step must be a positive integer\")\n    \n    N = len(S)\n    if step * N <= 0:\n        return [S]\n    \n    result = []\n    i = 0\n    while i < N:\n        result.append(S[i:i+step])\n        i += step\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    splits = []\n    for i in range(0, n, step):\n        splits.append(S[i:i+step])\n    return splits"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        return []\n    elif step == 1:\n        return [S]\n    else:\n        result = []\n        for i in range(0, len(S), step):\n            result.append(S[i:i+step])\n        return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    while n <= len(S):\n        result.append(S[:n])\n        S = S[n:]\n        n += step\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n\nprint(lateralsurface_cube(5)) # Output: 60\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l * l\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * l * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l * l) # the lateral surface area is 6 times the product of the side length and itself"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the cube's lateral surface area using the formula: lateral_surface = 6 * (l^2)\n    lateral_surface = 6 * (l**2)\n    return lateral_surface"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 2\n        i += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    # initialize sum variable to 0\n    sum = 0\n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current odd number to the sum\n        sum += i*i\n    # return the sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 1\n    while count <= n:\n        sum_of_squares += count**2\n        count += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize a variable to keep track of the sum of squares\n    sum_of_squares = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of i to the sum of squares\n        sum_of_squares += i**2\n    \n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**2\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # iterate over first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current number to the sum variable\n        sum += i**2\n\n    # return the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize the sum to zero\n    sum = 0\n    # initialize a counter variable to count the odd numbers\n    counter = 1\n    # loop through the first n odd natural numbers\n    while counter <= n:\n        # check if the current odd number is odd\n        if counter % 2 == 1:\n            # square the odd number and add it to the sum\n            sum += counter * counter\n        # increment the counter variable\n        counter += 1\n    # return the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n, 0, -2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function calculates then'th star number.\n    \"\"\"\n    # initialize a counter variable to keep track of the current position\n    position = 1\n    # initialize a variable to hold the result\n    result = 1\n    # loop until we have calculated n stars\n    while position < n:\n        # multiply the result by 2 to generate the next star number\n        result *= 2\n        # increment the position counter by 1\n        position += 1\n    # return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # initialize the number of stars to 0\n    num_stars = 0\n    \n    # loop through each digit in then'th number\n    while n > 0:\n        # get the last digit of n\n        last_digit = n % 10\n        \n        # check if the last digit is 1\n        if last_digit == 1:\n            # increment the number of stars\n            num_stars += 1\n        # multiply the number of stars by 10 to move to the next digit\n        n = n // 10\n    \n    # return the number of stars\n    return num_stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # First, initialize the count of consecutive stars\n    count = 0\n    \n    # Loop until we've found n consecutive stars\n    while count < n:\n        # Increment the count of consecutive stars by 1\n        count += 1\n        \n        # Print the current count of consecutive stars\n        print(\"*\" * count)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    return n * (n + 1) // 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    for i in range(1, n+1):\n        for j in range(1, n+1-i):\n            print('*', end='')\n        print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n*find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 0:\n        print(\"Invalid input. Please enter a non-negative integer.\")\n    elif n == 0:\n        print(\"0\")\n    elif n == 1:\n        print(\"*\")\n    else:\n        print(\"*\" * (2 * n - 1))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the first two numbers\n    prev_num = 0\n    curr_num = 1\n    \n    # iterate n-1 times\n    for i in range(n-1):\n        # find the sum of the previous two numbers\n        sum_num = prev_num + curr_num\n        \n        # update the previous two numbers\n        prev_num = curr_num\n        curr_num = sum_num\n    \n    # return the last number\n    return curr_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the string with an empty string\n    num_str = \"\"\n    \n    # loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # add the appropriate number of stars to the string\n        for j in range(i):\n            num_str += \"*\"\n        \n        # add a newline character to separate each number\n        num_str += \"\\n\"\n    \n    # return the final string\n    return num_str"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    elif k.isspace():\n        return ord(' ')\n    else:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value_dict = {\n        'A': 65,\n        'B': 66,\n        'C': 67,\n        'D': 68,\n        'E': 69,\n        'F': 70,\n        'G': 71,\n        'H': 72,\n        'I': 73,\n        'J': 74,\n        'K': 75,\n        'L': 76,\n        'M': 77,\n        'N': 78,\n        'O': 79,\n        'P': 80,\n        'Q': 81,\n        'R': 82,\n        'S': 83,\n        'T': 84,\n        'U': 85,\n        'V': 86,\n        'W': 87,\n        'X': 88,\n        'Y': 89,\n        'Z': 90,\n        '0': 48,\n        '1': 49,\n        '2': 50,\n        '3': 51,\n        '4': 52,\n        '5': 53,\n        '6': 54,\n        '7': 55,\n        '8': 56,\n        '9': 57,\n       '': 32,\n        '-': 45\n    }\n    if k in ascii_value_dict:\n        return ascii_value_dict[k]\n    else:\n        return 'Invalid character'"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.upper()\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    sum_even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even_index += arr[i]\n    return sum_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even = 0\n    even_index = []\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even += arr[i]\n                even_index.append(i)\n\n    return sum_even, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n            even_index += 1\n    return sum_even, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    count_even = 0\n\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n            count_even += 1\n\n    return sum_even, count_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n            if even_sum == 0:\n                return even_sum\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total_sum += arr[i]\n    return total_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    count = 0\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            count += 1\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    even_numbers = []\n    for i in range(2, n+1, 2):\n        even_numbers.append(i)\n    power_sum = 0\n    for num in even_numbers:\n        power_sum += num ** 5\n    return power_sum\n\nn = int(input(\"Enter an integer: \"))\nprint(\"The sum of the first\", n, \"even natural numbers raised to the fifth power is:\", even_Power_Sum(n))"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_pow_5 = 0\n    for i in range(n+1):\n        if i**5 % 2 == 0:\n            sum_even_pow_5 += i**5\n    return sum_even_pow_5"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i ** 5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_even_power = 0\n    for i in range(1, n+1, 2):\n        sum_even_power += i ** 5\n    return sum_even_power"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    return [x[1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    return [rear_element for tup in test_list for rear_element in tup[1:]]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for i in range(len(test_list)):\n        result_list.append(test_list[i][-1])\n    return result_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[1] for item in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_list)):\n        rear_elements.append(test_list[i][-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have equal lengths.\"\n\n    # create a new tuple to store the result\n    result_tup = []\n\n    # iterate over the indices of the tuples\n    for i in range(len(test_tup1)):\n        # subtract the elements of the first tuple by the elements of the second tuple with the same index\n        result_tup.append(test_tup1[i] - test_tup2[i])\n\n    # return the new tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the input tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"The input tuples are not the same length.\"\n\n    # create a new tuple with the subtraction of the elements with the same index\n    new_tup = tuple(x - y for x, y in zip(test_tup1, test_tup2))\n\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    # Check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: the length of the two tuples must be the same\"\n    \n    # Initialize the result tuple\n    result_tup = []\n    \n    # Loop through the tuples\n    for i in range(len(test_tup1)):\n        # Subtract the elements of the first tuple by the elements of the second tuple with the same index\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    result = []\n    \n    for index, value in enumerate(test_tup1):\n        result.append(value - test_tup2[index])\n        \n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Subtract the element from the second tuple at the same index\n        result.append(test_tup1[i] - test_tup2[i])\n    # Return the result tuple\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        return None\n    \n    # Initialize variables for even index binomial coefficients\n    even_binomial_coeff = [0]\n    even_binomial_coeff_sum = 0\n    \n    # Calculate even index binomial coefficients\n    for i in range(2, n+1):\n        even_binomial_coeff.append(even_binomial_coeff[i-1] + even_binomial_coeff[i-2])\n    \n    # Calculate sum of even index binomial coefficients\n    for i in range(2, n+1, 2):\n        even_binomial_coeff_sum += even_binomial_coeff[i-2]\n    \n    # Return sum of even index binomial coefficients\n    return even_binomial_coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # initialize sum to 0\n    sum = 0\n\n    # loop through the even index terms\n    for i in range(1, n+1, 2):\n        # calculate the binomial coefficient\n        binomial_coeff = math.comb(n, i-1)\n\n        # add the even term to the sum\n        sum += binomial_coeff\n\n    # return the sum\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum of even index binomial coefficients to 0\n    sum_even = 0\n    # Loop through the even indices of n\n    for i in range(2, n+1, 2):\n        # Calculate the even index binomial coefficient using math.comb() function\n        even_coeff = math.comb(n, i)\n        # Add the even index binomial coefficient to the sum of even index binomial coefficients\n        sum_even += even_coeff\n    # Return the sum of even index binomial coefficients\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of the even index binomial coefficients.\n    '''\n    sum_even_binomial_coeffs = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if j % 2 == 0:\n                sum_even_binomial_coeffs += math.comb(i, j)\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math  \n  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    sum_even_binomial_Coeff = 0\n    for i in range(2, n+1, 2):\n        sum_even_binomial_Coeff += math.comb(n, i-2)\n\n    return sum_even_binomial_Coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function calculates the sum of even index binomial coefficients for a given positive integer n.\n    \"\"\"\n    # Initialize sum of even index binomial coefficients\n    sum_even_binomial_coeffs = 0\n    # Calculate the binomial coefficients\n    for i in range(1, n+1):\n        for j in range(i):\n            sum_even_binomial_coeffs += (-1) ** (i - j) * math.comb(n, j) / math.comb(i, j)\n    # Return the sum of even index binomial coefficients\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Define the even index binomial coefficients\n    even_index_binomial_coefficients = [math.comb(n, i) for i in range(0, n+1, 2)]\n\n    # Initialize the sum of even index binomial coefficients to 0\n    even_index_binomial_sum = 0\n\n    # Calculate the sum of even index binomial coefficients\n    for i in even_index_binomial_coefficients:\n        even_index_binomial_sum += i\n\n    # Return the sum of even index binomial coefficients\n    return even_index_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n    Args:\n        n (int): a positive integer\n\n    Returns:\n        float: the sum of even index binomial coefficients of n\n    \"\"\"\n    total = 0.0\n    for i in range(2, n+1):\n        even_coeff = math.comb(n, i, exact=True)\n        if i % 2 == 0:\n            total += even_coeff\n    return total"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    \"\"\"\n    # initialize a list to store the binomial coefficients\n    binomial_coef = [1] * (n+1)\n    # set up the sum to 0\n    sum_coef = 0\n    # loop through the first n terms of the binomial coefficients\n    for i in range(2, n+1):\n        # calculate the sum of the even index terms of the binomial coefficients\n        even_sum = sum(binomial_coef[j] for j in range(2*i-1, n+1, 2))\n        # add the sum to the sum of all binomial coefficients\n        sum_coef += even_sum\n        # shift the binomial coefficients by 1\n        binomial_coef = [binomial_coef[j] for j in range(i)] + [binomial_coef[0]]\n    # return the sum of all binomial coefficients\n    return sum_coef"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Calculate the first half of the even index binomial coefficients\n    # Since the index starts from 0, we only need to count from 0 to n-1\n    # To calculate the even index binomial coefficient, we need to calculate the factorial of (n-i-1) and divide by i!\n    sum_even_index_binomial = 0\n    for i in range(n//2):\n        sum_even_index_binomial += math.factorial(n-2*i-1)//math.factorial(i)\n    \n    return sum_even_index_binomial"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate the volume using the formula V = (1/3) * pi * r^2 * h\n    V = (1/3) * 3.14159 * r**2 * h\n    \n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 1/3 * pi * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.14159*(r**2)*h\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n\n    # Formula for volume of a cylinder is V = 1/3 * pi * r^2 * h\n    V = 1/3 * 3.14 * r**2 * h\n\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = (3/2) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    area = 3.14 * r**2\n    volume = area * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return 3.14 * r * r * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume of the cylinder.\n    '''\n    volume = 3.14159 * r * r * h # formula for volume of a cylinder\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and an integer n, and returns a new dictionary that contains only the key-value pairs where the value is greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue  # skip first element\n        if test_tup[i]!= test_tup[i-1]:\n            break  # found a difference, stop counting\n        count += 1  # count difference as a match\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            break\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    This function takes a tuple as input and returns the number of elements in the tuple that occur before the specified element.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == specified_element:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1] == test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= 0:\n            if test_tup[i]!= test_tup[i-1]:\n                break\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i+1]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i]!= test_tup[i-1]:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i - 1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] > test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the variable to store the decagonal number\n    decagonal_num = 0\n\n    # Calculate the number of rows needed for the decagonals\n    rows = 1\n    while n > rows * (rows + 1):\n        rows += 1\n\n    # Calculate the decagonal number by following the formula\n    for i in range(rows):\n        decagonal_num += (2 * i + 1) ** 2\n\n    # Return the decagonal number\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Base case: if n is 1, it is the decagonal number 1\n    if n == 1:\n        return 1\n\n    # Recursive case: for all other values of n, the decagonal number is\n    # the sum of the previous two decagonal numbers\n    return n + is_num_decagonal(n-2)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return False\n    else:\n        for i in range(1, n+1):\n            num = (i*i + (2*i - 1)*(2*i - 1))\n            if num == 2*i*i:\n                return True\n            else:\n                pass\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (2 * n - 1)\n\nn = int(input(\"Enter a positive integer: \"))\n\nif n <= 0:\n    print(\"Invalid input. Please enter a positive integer.\")\nelse:\n    print(\"The\", n, \"th decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return (n*n) + (10*n) - 5"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer n and returns True if the number is a decagonal number.\n    A decagonal number is a number that can be expressed as the sum of two decagonal numbers.\n    For example, 15 is a decagonal number because 1^2 + 5^2 = 15^2.\n    '''\n    if n < 1:\n        return False\n    decagonal_numbers = [1, 5, 22, 65, 125, 210, 252, 210, 125, 65, 22, 5, 1]\n    for i in range(len(decagonal_numbers)):\n        if n % decagonal_numbers[i] == 0:\n            return True\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal += (2*i-1) ** 2\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_n = 0\n    for i in range(1, n+1):\n        dec_n += i*i\n    return dec_n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_num = 1\n    for i in range(1, n+1):\n        dec_num += (i*(5*i-3)**2)/2\n    return dec_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return is_num_decagonal(n // 2) + is_num_decagonal(n // 2)\n    else:\n        return 1 + is_num_decagonal(n // 2)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes an array and an element as input and returns a tuple containing a boolean that indicates whether the element is present in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    # Iterate through the list and compare each element with the item\n    for i, value in enumerate(dlist):\n        if value == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as an argument and returns True if all the elements in the list are unique and False otherwise.\n    \"\"\"\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # check if the list is empty\n    if len(test_list) == 0:\n        return True\n    # check if the first element is present in the list\n    elif test_list[0] in test_list[1:]:\n        return False\n    # recursively check for unique elements in the list\n    else:\n        return all_unique(test_list[1:])"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique and False otherwise.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and checks if all the elements in the list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    # check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n    \"\"\"\n    unique = True\n    for i in range(len(test_list)):\n        if test_list.count(test_list[i])!= 1:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists have different lengths.\")\n        return\n    \n    # Subtract each element of the lists\n    for i in range(len(nums1)):\n        nums1[i] -= nums2[i]\n    \n    return nums1"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtract two lists element-wise.\n\n    Parameters:\n    nums1 (list): A list of numbers.\n    nums2 (list): A list of numbers.\n\n    Returns:\n    list: A list of the difference between the corresponding elements of the two input lists.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # initialize a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    # loop through each digit in the integer\n    for digit in str(n):\n        # if the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # if the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[digit] = 1\n    # loop through the frequency dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        # if the frequency of the digit is less than or equal to itself, return False\n        if count > digit:\n            return False\n    # if all digits have a frequency less than or equal to them, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # create a dictionary to store the frequency of digits in the integer\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # iterate over the frequency dictionary and check if the frequency is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n\n    # if no digits have a frequency greater than the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10\n\n    # calculate frequency of each digit\n    for digit in str(n):\n        freq[int(digit)] += 1\n\n    # check if frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0]*10  # create a list to store frequency of digits\n    \n    # count frequency of digits in the integer\n    for i in str(n):\n        count[int(i)] += 1\n    \n    # check if frequency of digits is less than or equal to the digit itself\n    for i in range(10):\n        if count[i] > 0 and count[i] > n%10:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # initialize frequency list\n    num = n\n\n    while num > 0:\n        freq[int(num % 10)] += 1  # add the frequency of the last digit to the list\n        num //= 10  # remove the last digit from the integer\n\n    for digit in freq:\n        if digit > digit:\n            return False  # if any digit has a frequency greater than the digit itself, return False\n\n    return True  # if no digit has a frequency greater than the digit itself, return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n): \n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    # initialize a dictionary to store the frequency of digits\n    freq = {}\n    \n    # iterate through each digit of the integer\n    for digit in str(n):\n        # check if the digit is already in the dictionary\n        if digit in freq:\n            # increment the frequency of the digit by 1\n            freq[digit] += 1\n        else:\n            # add the digit and its frequency to the dictionary\n            freq[digit] = 1\n    \n    # iterate through the dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit, freq_digit in freq.items():\n        if freq_digit > digit:\n            # if the frequency of the digit is greater than the digit itself, return False\n            return False\n    \n    # if all the digits are valid, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    digits = [int(digit) for digit in str(n)]\n    freq = [0]*10\n\n    for digit in digits:\n        freq[digit] += 1\n\n    for digit in freq:\n        if digit > digits[freq.index(digit)]:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10 # initialize frequency list with 0's\n    \n    # loop through each digit in the number\n    for i in str(n):\n        freq[int(i)] += 1 # increment frequency of digit by 1\n    \n    # loop through each digit in the frequency list and check if frequency is greater than or equal to digit itself\n    for i in freq:\n        if i >= n:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0]!= element:\n        return False\n    return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Use a for loop to iterate through the list\n    for item in list:\n        # If an item is not equal to the element, return False\n        if item!= element:\n            return False\n    # If all items in the list are equal to the element, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    \n    for item in list:\n        if item!= element:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    \n    if list[0] == element:\n        return check_element(list[1:], element)\n    \n    return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element, and False otherwise.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(item == element for item in list):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"One or more items in the list are not equal to the given element.\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    # Loop through the list and compare each item to the element\n    for item in list:\n        if item!= element:\n            return False\n\n    # If all items are equal to the element, return True\n    return True"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a([bB])*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?=.*ab)(?=.*ab{2,3})a'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*?b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab(b)*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('a[^b]*b{2,3}')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('a{1}(b){2,3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.+b.{2,3}')\n    return pattern.match(text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[bB](?=.*b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<=a)b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    for i in range(k):\n        temp_sum = sum(a)\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n        a = [a[0]] + [a[j] for j in range(1, n-1)] + [a[-1]]\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    mod_a = a + [a[0]] * k\n    \n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n, k):\n            current_sum += mod_a[j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a new array with repeated values of the original array\n    modified_array = a * k\n\n    # initialize variables to store the maximum sum and current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # loop through the modified array and update the current sum\n    for i in range(n):\n        current_sum += modified_array[i]\n\n        # if the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # if the current sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Iterate through the array for k times\n    for i in range(k):\n        # Calculate the sum of the current array\n        curr_sum = sum(a)\n\n        # Update the maximum sum if necessary\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # Re-initialize the current sum to 0\n        curr_sum = 0\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    cur_sum = sum(a[0:k])\n    for i in range(k, n):\n        cur_sum = max(cur_sum + a[i] - a[i-k], a[i])\n        max_sum = max(max_sum, cur_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    repeat = 0\n    \n    # Iterate through the array\n    for i in range(n):\n        # If current element is greater than the max element, update max element and repeat count\n        if a[i] > max_sum:\n            max_sum = a[i]\n            repeat = 1\n        # If current element is equal to the max element and it is not the last element, increment repeat count\n        elif a[i] == max_sum and i!= n-1:\n            repeat += 1\n            \n        # Update current sum with the sum of the current element and the repeats\n        current_sum = (a[i] * repeat) + current_sum\n        \n    # Return the maximum sum of the repeated array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if i >= k - 1:\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            curr_sum -= a[i - k + 1]\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize variables\n    max_sum = float('-inf')\n    start = 0\n\n    # iterate through the array\n    for i in range(n):\n        # add the current element to the subarray\n        subarray = [a[i]]\n        current_sum = a[i]\n\n        # iterate through the rest of the array\n        for j in range(i+1, n):\n            # add the current element to the subarray and update the sum\n            subarray.append(a[j])\n            current_sum += a[j]\n\n            # if the current sum is greater than the maximum sum, update the maximum sum and the starting index\n            if current_sum > max_sum:\n                max_sum = current_sum\n                start = subarray.index(max_sum)\n\n    # remove the repeated elements from the subarray\n    subarray = subarray[:start+1]\n\n    # calculate the sum of the subarray\n    sum_subarray = sum(subarray)\n\n    # repeat the subarray k times to get the modified array\n    modified_array = subarray * k\n\n    # calculate the sum of the modified array\n    sum_modified_array = sum(modified_array)\n\n    # return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    count = 0\n    for i in range(n):\n        if count == 0:\n            current_sum = a[i]\n        else:\n            current_sum += a[i]\n            if count == k:\n                max_sum = max(max_sum, current_sum)\n                current_sum = 0\n                count = 0\n        count += 1\n    if count == k:\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Create a copy of the original array\n    a_copy = a.copy()\n\n    # Create a new array to store the sum of each sub-array of the original array\n    sums = [0] * (n * k)\n\n    # Initialize the maximum sum to the first element of the original array\n    max_sum = a[0]\n\n    # Iterate through the original array\n    for i in range(n):\n        # Calculate the sum of the current sub-array\n        current_sum = 0\n        for j in range(k):\n            current_sum += a[i]\n            # Check if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n            # Shift the elements of the sums array to make room for the current sum\n            sums[j] = sums[j+1]\n        # Shift the elements of the sums array to make room for the current sum\n        sums[k] = current_sum\n\n    # Iterate through the sums array to find the index of the maximum sum\n    for i in range(k):\n        if sums[i] == max_sum:\n            index = i\n            break\n\n    # Create a new array with the sum of each sub-array repeated k times\n    new_array = []\n    for i in range(k):\n        for j in range(n):\n            new_array.append(a_copy[i])\n\n    # Return the maximum sum of the repeated array\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_sum = 0  \n    for i in range(n):  \n        even_sum += i*i  \n    return even_sum  "
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            sum += i**2\n        i += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum_of_squares += count ** 2\n        count += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 0\n    while i <= n:\n        sum_of_squares += i*i\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    if n <= 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n    \n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i**2\n        \n    return sum_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum length\n    max_length_list = []\n    \n    # Iterate over all the sub-lists in the main list\n    for sub_list in list1:\n        # Check if the length of the current sub-list is greater than the length of the maximum length list\n        if len(sub_list) > len(max_length_list):\n            # If yes, update the maximum length list with the current sub-list\n            max_length_list = sub_list\n    \n    # Return the maximum length list\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or (len(sublist) == len(max_lengths) and sublist > max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or (len(sublist) == len(max_lengths) and len(sublist) > max_lengths[0]):\n            max_lengths = [len(sublist)]\n        elif len(sublist) == len(max_lengths) and len(sublist) < max_lengths[0]:\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        sublist_lengths = [len(sublist[i]) for i in range(len(sublist))]\n        if not max_lengths:\n            max_lengths = sublist_lengths\n        else:\n            for i, length in enumerate(sublist_lengths):\n                if length > max_lengths[i]:\n                    max_lengths[i] = length\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for item in list1:\n        if len(item) > len(max_lengths) or (len(item) == len(max_lengths) and item > max_lengths[-1]):\n            max_lengths = item\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n\n    max_list = []\n\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_list):\n            max_list = list1[i]\n\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        length = len(lst)\n        if length > max(max_lengths) or max_lengths == []:\n            max_lengths.append(length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n\n    # Initialize an empty list to store the maximum lengths\n    max_lengths = []\n\n    # Loop through each list in the input list\n    for lst in list1:\n        # Loop through each element in the current list\n        for elem in lst:\n            # Check if the current element is longer than the current maximum length\n            if len(elem) > max(max_lengths):\n                # If it is, update the maximum length list with the new length\n                max_lengths = [len(elem)]\n            elif len(elem) == max(max_lengths):\n                # If the length is the same, add the element to the list\n                max_lengths.append(len(elem))\n\n    # Return the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    # helper function to check if two adjacent posts have same color\n    def same_color(colors, i, j):\n        return colors[i] == colors[j]\n    \n    # helper function to count the number of ways to paint the fence\n    def count_ways(colors, start, end):\n        if start > end:\n            return 0\n        elif start == end:\n            return 1\n        \n        ways = 0\n        for i in range(start+1, end):\n            if same_color(colors, start, i) and same_color(colors, i, end):\n                continue\n            elif same_color(colors, start, i):\n                ways += count_ways(colors, start, i)\n            elif same_color(colors, i, end):\n                ways += count_ways(colors, i, end)\n            else:\n                ways += count_ways(colors, i, end) + count_ways(colors, start, i)\n        \n        return ways\n    \n    # count the number of ways to paint the fence\n    colors = [0] * n\n    ways = count_ways(colors, 0, n-1)\n    \n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    if k == 1:\n        return n\n    elif n == 1:\n        return 1\n    else:\n        return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Base case: If n is less than or equal to 0, there is only one way to paint the fence.\n    if n <= 0:\n        return 1\n    \n    # Base case: If k is less than or equal to 0, there is no way to paint the fence.\n    if k <= 0:\n        return 0\n    \n    # Recursive case: For n > 0 and k > 0, there are two possibilities:\n    # 1. The last post has the same color as the first post, or\n    # 2. The last post has a different color from the first post.\n    \n    # Let the number of ways of painting the fence be dp[n][k].\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    # Fill in the base cases: dp[n][k] = 0 if n is less than or equal to 0 or k is less than or equal to 0.\n    for i in range(n + 1):\n        for j in range(k + 1):\n            if i <= 0 or j <= 0:\n                dp[i][j] = 0\n    \n    # Fill in the recursive case:\n    # The number of ways of painting the fence is dp[n][k] = dp[n-1][k] + dp[n-1][k-1], where n > 0 and k > 0.\n    # This means that if the last post has the same color as the first post, we can paint the fence by painting the last post with the same color as the first post.\n    # Similarly, if the last post has a different color from the first post, we can paint the fence by painting the last post with a different color from the first post.\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n    \n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    # create a list of colors of length k\n    colors = [i for i in range(1, k+1)]\n\n    # create a list of lists for storing the count of ways for each color and position\n    count = [[0 for j in range(n)] for i in range(k+1)]\n\n    # initialize count of ways for the first color and position\n    count[1][0] = 1\n\n    # iterate over the positions from 1 to n\n    for i in range(1, n+1):\n        # iterate over the colors from 1 to k\n        for j in range(1, k+1):\n            # if the current position is adjacent to the previous position, only consider the previous color\n            if i > 1:\n                count[j][i] = count[j][i-1] + count[j-1][i-2]\n            # otherwise, consider all colors\n            else:\n                count[j][i] = sum(count[k-j][i-1])\n\n    # return the count of ways for the last color and position\n    return count[k][n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 0 or k <= 0:\n        return 1\n    count = 0\n    for color in range(1, k+1):\n        ways = count_no_of_ways(n-1, k)\n        count += ways\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    # Initializing the variable to store the count of ways\n    count = 0 \n\n    # Initializing a list to store the colors used so far\n    colors = []\n\n    # Looping through the range of n-1 possible colors\n    for color in range(k):\n        # Looping through the remaining n-1 posts (i.e., n-2 to 0)\n        for i in range(n-2, -1, -1):\n            # Checking if the current color can be used with the adjacent posts\n            if (not colors) or (colors[-1]!= color):\n                # Adding the current color to the list\n                colors.append(color)\n                # Recursively checking if the fence can be painted with the remaining posts and colors\n                count += count_no_of_ways(i, k)\n                # Removing the last color from the list\n                colors.pop()\n\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Using dynamic programming\n    # Initialize a 2D array to store the number of ways to paint the fence\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n\n    # Initialize the base cases\n    dp[0][0] = 1\n    dp[0][1] = 1\n\n    # Fill in the rest of the array using the recurrence relation\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    # create a boolean matrix to store whether adjacent posts have the same color or not\n    adj_posts = [[False] * k for _ in range(n)]\n    # initialize the count of ways to 1\n    ways = 1\n\n    # loop through all possible pairwise combinations of adjacent posts\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            # if adjacent posts have the same color, increment the count of ways\n            if adj_posts[i][j - 1] == adj_posts[j][i - 1]:\n                ways += 1\n            # update the boolean matrix to reflect the new state of adjacent posts\n            adj_posts[i][j - 1] = not adj_posts[i][j - 1]\n            adj_posts[j][i - 1] = not adj_posts[j][i - 1]\n\n    # return the count of ways\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Create a list to store the number of ways for each color\n    count = [0] * k\n\n    # Initialize the count for the first color to 1\n    count[0] = 1\n\n    # Iterate through all possible colors\n    for i in range(1, k):\n        # For each color, count the number of ways to paint the fence such that no more than 2 adjacent posts have the same color\n        count[i] = 0\n\n        # Iterate through all possible starting positions\n        for j in range(n - k + 1):\n            # Check if all adjacent posts have the same color\n            if j + k - 1 < n and sum([count[x] for x in range(i)]) > 0:\n                count[i] += count[sum([x for x in range(i) if x!= i]) + (j + k - 1)]\n\n            # Check if all adjacent posts have the same color\n            if j + k < n and sum([count[x] for x in range(i)]) > 0:\n                count[i] += count[sum([x for x in range(i) if x!= i]) + (j + k)]\n\n            # Check if all adjacent posts have the same color\n            if j + k < n and i!= 0 and sum([count[x] for x in range(i)]) > 0:\n                count[i] += count[sum([x for x in range(i) if x!= i]) + (j + k)]\n\n            # Check if all adjacent posts have the same color\n            if j + k < n and i!= k - 1 and sum([count[x] for x in range(i)]) > 0:\n                count[i] += count[sum([x for x in range(i) if x!= i]) + (j + k)]\n\n    return count[k - 1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # Base case: If n == 0, there is only one way to paint the fence\n    if n == 0:\n        return 1\n    \n    # If n is less than or equal to k, there is only one way to paint the fence\n    if n <= k:\n        return n\n    \n    # Initialize an array to store the number of ways to paint the fence for each value of k\n    dp = [0] * (n + 1)\n    \n    # Initialize the first k values of the dp array\n    for i in range(1, k + 1):\n        dp[i] = 1\n    \n    # Fill the remaining values of the dp array using dynamic programming\n    for i in range(k + 1, n + 1):\n        for j in range(1, k + 1):\n            # If adjacent posts have the same color, add 2 to the number of ways to paint the fence for k-1 colors\n            if j - 1 == i - 1:\n                dp[i] += dp[j - 1]\n            # If adjacent posts have different colors, add 1 to the number of ways to paint the fence for k-2 colors\n            elif j - 1!= i - 1:\n                dp[i] += dp[j - 2]\n    \n    return dp[n]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # calculate quotient\n    quotient = n // m\n\n    # return the result\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Find the quotient of two numbers, rounded down to the nearest integer.\n\n    :param n: The numerator of the division.\n    :type n: int\n    :param m: The denominator of the division.\n    :type m: int\n    :return: The quotient of n / m.\n    :rtype: int\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m   # Calculate the quotient using integer division (floor division)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return math.floor(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers as input, n and m, and returns their quotient, rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    if n % m!= 0:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    if quotient*m!= n: # check if the quotient is not an integer\n        quotient = quotient - 1 # decrement the quotient if it's not an integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n // m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # use Heron's formula to find the semi-perimeter\n    s = (w + h) / 2\n    # calculate the square root of the semi-perimeter\n    sqrt_s = math.sqrt(s)\n    # calculate the third side of the triangle\n    third_side = sqrt_s * math.sin(math.degrees(math.acos((w**2 + h**2 - s**2)/(2*w*h))))\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return 2*s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function calculates the length of the third side of a right angled triangle using the Heron's formula.\n    The formula is: a^2 + b^2 = c^2\n    where a and b are the lengths of the sides and c is the length of the other side.\n\n    Args:\n    w (float): the length of the first side of the triangle (base)\n    h (float): the length of the second side of the triangle (height)\n\n    Returns:\n    float: the length of the third side of the triangle\n    '''\n\n    s = (w ** 2 + h ** 2) ** 0.5\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Formula to find the third side of a right angled triangle\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w+h*h)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # calculate the length of the first side\n    s = math.sqrt(w**2 + h**2)\n\n    # calculate the length of the second side\n    s2 = (w + h) / 2\n\n    # calculate the third side of the right angled triangle\n    third_side = s2 - s\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for item in listval[1:]:\n        if item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    maxval = listval[0]\n    for i in listval:\n        if i > maxval:\n            maxval = i\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    \"\"\"\n    This function takes in a list of values and returns the maximum value.\n    \"\"\"\n    # initialize a variable to keep track of the maximum value\n    max_val = None\n\n    # loop through the list of values\n    for val in listval:\n        # if the value is greater than the current max value, update the max value\n        if val > max_val:\n            max_val = val\n\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize the maximum value to be the first value in the list\n    max_val = listval[0]\n    \n    # Loop through the remaining values in the list\n    for i in range(1, len(listval)):\n        # Compare the current value to the maximum value found so far\n        if listval[i] > max_val:\n            # Update the maximum value if the current value is greater\n            max_val = listval[i]\n    \n    # Return the maximum value found in the list\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize the maximum value to None\n    max_val = None\n\n    # loop through the list of values\n    for val in listval:\n        # check if the current value is greater than the current maximum value\n        if val > max_val:\n            # update the maximum value if necessary\n            max_val = val\n\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Use the `max` built-in function to find the maximum value in the list\n    max_num = max(listval)\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    maxval = listval[0]\n    for i in range(1, len(listval)):\n        if maxval < listval[i]:\n            maxval = listval[i]\n    return maxval"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 1\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    i = 1\n    while i * i <= number:\n        if number % i:\n            i += 1\n        else:\n            divisors.append(i)\n            i += 1\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Count the number of inversions\n    left = 0\n    right = len(arr) - 1\n    count = 0\n\n    while left < right:\n        # Find the maximum element in the left subarray\n        max_val = arr[left]\n\n        # Find the index of the maximum element in the right subarray\n        max_index = left\n\n        # Iterate over the right subarray starting from the first element\n        for i in range(left + 1, right + 1):\n            if arr[i] > max_val:\n                # If the element is greater than the maximum element, update the maximum element and its index\n                max_val = arr[i]\n                max_index = i\n\n        # If the maximum element in the left subarray is greater than the maximum element in the right subarray, increment the count\n        if max_val > arr[left]:\n            count += right - left + 1\n\n        # Move the left pointer to the index of the maximum element in the right subarray\n        left = max_index + 1\n\n        # Move the right pointer to the end of the subarray\n        right = len(arr) - 1\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize a variable to store the count of inversions\n    inv_count = 0\n\n    # Iterate through the array and count the number of inversions\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    # Return the final count of inversions\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n\n    # Sort the array \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                arr[i], arr[j] = arr[j], arr[i] \n\n    # Count inversions \n    inv_count = 0 \n    for i in range(n-1): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                inv_count += n - j\n\n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # Create a temporary list to store the sorted array\n    temp = arr.copy()\n\n    # Sort the array using the merge sort algorithm\n    merge_sort(temp)\n\n    # Count the number of inversions using two pointers\n    left = 0\n    right = len(temp) - 1\n    inv_count = 0\n\n    while left < right:\n        if temp[left] > temp[right]:\n            inv_count += right - left\n            left += 1\n        else:\n            right -= 1\n\n    return inv_count\n\n\ndef merge_sort(arr):\n    \"\"\"\n    Merge sort algorithm to sort an array.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n\n    return merge(left, right)\n\n\ndef merge(left, right):\n    \"\"\"\n    Merge two sorted arrays into a single sorted array.\n    \"\"\"\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            inv_count += len(left) - i\n\n    result += left[i:]\n    result += right[j:]\n\n    return result"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Merge Sort algorithm\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n\n    def merge(left, right):\n        i = j = 0\n        inv_count = 0\n        merged_arr = []\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                merged_arr.append(left[i])\n                i += 1\n            else:\n                merged_arr.append(right[j])\n                inv_count += len(left) - i\n                j += 1\n        while i < len(left):\n            merged_arr.append(left[i])\n            i += 1\n        while j < len(right):\n            merged_arr.append(right[j])\n            j += 1\n        return merged_arr, inv_count\n\n    return merge_sort(arr)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the count of inversions in the array.\n    \"\"\"\n    if len(arr) <= 1:\n        return 0\n\n    inv_count = 0\n    for i in range(len(arr)):\n        left, right = i, len(arr) - 1\n        while left < right:\n            if arr[left] > arr[right]:\n                inv_count += (right - left)\n                arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n\n    # Sort the array in ascending order\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += n - j\n            elif arr[j] > arr[i]:\n                count += j - i\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        # initialize left and right pointers for the current element\n        left = i+1\n        right = len(arr)-1\n\n        # sort the sub-array from the left pointer to the right pointer\n        while left < right:\n            if arr[i] > arr[left]:\n                arr[i], arr[left] = arr[left], arr[i]\n                left += 1\n                inv_count += (right-left)\n            else:\n                arr[i], arr[right] = arr[right], arr[i]\n                right -= 1\n                inv_count += (right-left)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the inversion count to zero\n    inv_count = 0\n\n    # Iterate through the array and count inversions\n    for i in range(len(arr)-1):\n        # Check if the current element is greater than the next element\n        if arr[i] > arr[i+1]:\n            inv_count += i+1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # Sort the array in ascending order\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n\n    # Count the number of inversions in the array\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] < arr[j]:\n                inv_count += j - i\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    if not isinstance(list1, list):\n        return [list1]\n    else:\n        flat_list = []\n        for item in list1:\n            if isinstance(item, list):\n                flat_list.extend(flatten_list(item))\n            else:\n                flat_list.append(item)\n        return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes in a list as input and returns a flattened list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Initialize an empty list to store the flattened list\n    flattened_list = []\n\n    # Recursively iterate through the input list\n    for item in list1:\n        if isinstance(item, list):\n            # If the item is a list, recursively flatten it\n            flattened_list.extend(flatten_list(item))\n        else:\n            # If the item is not a list, append it to the flattened list\n            flattened_list.append(item)\n\n    # Return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    This function takes a nested list as input and returns a flattened list.\n    '''\n\n    # Helper function to flatten a nested list\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    # Calling the helper function to flatten the list\n    result = flatten(list1)\n\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for i in list1:\n        if isinstance(i, list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if isinstance(list1, list):\n        for item in list1:\n            flatten_list(item)\n    else:\n        print(list1)"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for element in list1:\n        if type(element) == list:\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Creating a defaultdict to store the maximum aggregate for each student\n    max_agg = defaultdict(int)\n\n    # Iterating over the list of tuples\n    for name, marks in stdata:\n        # Updating the maximum aggregate for the student\n        max_agg[name] = max(max_agg[name], marks)\n\n    # Calculating the maximum aggregate\n    max_aggr = max(max_agg.values())\n\n    # Returning the maximum aggregate\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the maximum aggregate for each customer\n    max_aggr_dict = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for customer, amount in stdata:\n        # Check if the maximum aggregate for the customer is less than the current amount\n        if max_aggr_dict[customer] < amount:\n            # Update the maximum aggregate for the customer\n            max_aggr_dict[customer] = amount\n\n    # Iterate through the defaultdict and return the maximum aggregate for each customer\n    max_aggr_list = []\n    for customer, amount in max_aggr_dict.items():\n        max_aggr_list.append((customer, amount))\n    max_aggr_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Return the maximum aggregate for each customer in the list\n    return max_aggr_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_list = defaultdict(int)\n    for i in range(len(stdata)):\n        if stdata[i][2] == 'S':\n            max_list[stdata[i][1]] += int(stdata[i][0])\n        elif stdata[i][2] == 'A':\n            max_list[stdata[i][1]] -= int(stdata[i][0])\n        elif stdata[i][2] == 'B':\n            max_list[stdata[i][1]] -= int(stdata[i][0]) * 2\n        elif stdata[i][2] == 'C':\n            max_list[stdata[i][1]] += int(stdata[i][0]) * 2\n    max_agg = max(max_list.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item, value in stdata:\n        # Increment the frequency of the current item\n        freq[item] += value\n\n    # Initialize a variable to store the maximum aggregate\n    max_agg = 0\n\n    # Iterate through the dictionary to find the maximum aggregate\n    for value in freq.values():\n        if value > max_agg:\n            max_agg = value\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(int)\n    for item in stdata:\n        data[item[0]] += item[1]\n    max_agg = max(data.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n\n    for items in stdata:\n        for item in items:\n            max_agg[item] += 1\n\n    return max(max_agg.items(), key=lambda x: x[1])[0]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Calculate the maximum aggregate from the list of tuples.\n\n    :param stdata: list of tuples, where each tuple contains the name of the product and its price\n    :return: maximum aggregate value\n    \"\"\"\n    # Create a dictionary to store the price of each product\n    product_prices = defaultdict(int)\n\n    # Loop through the list of tuples and add the prices to the dictionary\n    for name, price in stdata:\n        product_prices[name] += price\n\n    # Find the maximum aggregate value by iterating through the dictionary and calculating the sum of all values\n    max_aggregate = 0\n    for price in product_prices.values():\n        if price > max_aggregate:\n            max_aggregate = price\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for amount, customer in stdata:\n        max_dict[customer] += amount\n    max_agg = max(max_dict.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples containing name and salary and returns the maximum aggregate.\n    '''\n    aggregate_dict = defaultdict(int)\n    for name, salary in stdata:\n        aggregate_dict[name] += salary\n    \n    max_salary = max(aggregate_dict.values())\n    max_name = aggregate_dict[max(aggregate_dict, key=aggregate_dict.get)]\n    return max_salary, max_name"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate\n    obtained from these tuples.\n    '''\n\n    # Initialize a dictionary to store the count of each item in the list.\n    item_count = defaultdict(int)\n\n    # Iterate over each tuple in the list.\n    for item, quantity in stdata:\n        # Update the count of the item in the dictionary.\n        item_count[item] += quantity\n\n    # Calculate the maximum aggregate from the dictionary.\n    max_agg = 0\n    for quantity in item_count.values():\n        max_agg = max(max_agg, quantity)\n\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n    for i in range(1, 2**n + 1):\n        first_n = i & ((1 << n) - 1)\n        last_n = i >> n\n        if first_n == last_n:\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2 ** n):\n        binary = bin(i)[2:].zfill(n)\n        if int(binary[0:n//2]) == int(binary[-n//2:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    # Function to check if the given sum is same as the first n bits and the last n bits\n    def check_sum(seq, n):\n        first_n_bits = seq[:n]\n        last_n_bits = seq[n:]\n        return int(first_n_bits, 2) + int(last_n_bits, 2) == int(seq, 2)\n\n    # Function to generate all binary sequences of length 2n\n    def generate_binary_seq(n):\n        # Initialize the result list\n        binary_seq = []\n        # Generate all binary sequences of length n\n        for i in range(2**n):\n            # Convert the binary number to string and append to the result list\n            binary_seq.append(bin(i)[2:].zfill(n))\n        return binary_seq\n\n    # Function to generate all binary sequences such that the sum of first n bits is same as the sum of last n bits\n    def filter_binary_seq(binary_seq):\n        # Initialize the result list\n        filtered_binary_seq = []\n        # Check if the sum of first n bits is same as the sum of last n bits for each binary sequence\n        for seq in binary_seq:\n            if check_sum(seq, n):\n                filtered_binary_seq.append(seq)\n        return filtered_binary_seq\n\n    # Generate all binary sequences of length 2n\n    binary_seq = generate_binary_seq(2 * n)\n    # Filter the binary sequences such that the sum of first n bits is same as the sum of last n bits\n    filtered_binary_seq = filter_binary_seq(binary_seq)\n    # Return the count of the filtered binary sequences\n    return len(filtered_binary_seq)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize count to 0\n    count = 0\n    # Initialize first half of numbers to 0\n    half = [0]*(n//2)\n    # Initialize last half of numbers to 0\n    last_half = [0]*(n//2)\n    # Initialize sum of first n bits to 0\n    first_sum = 0\n    # Initialize sum of last n bits to 0\n    last_sum = 0\n    # Create list of first n binary numbers\n    nums = [0]*n\n    # Populate first n binary numbers with 1's\n    for i in range(n):\n        nums[i] = 1\n    # Iterate through binary sequences of length 2n\n    for i in range(n//2):\n        # Add first half of numbers to first_sum\n        first_sum += half[i]\n        # Add last half of numbers to last_sum\n        last_sum += last_half[i]\n        # Check if first_sum and last_sum are equal\n        if first_sum == last_sum:\n            # Add 1 to count if sequence is valid\n            count += 1\n            # Shift first_sum and last_sum to last half of numbers\n            last_half[i] = first_sum\n            # Shift first half of numbers to first half of numbers\n            for j in range(i):\n                half[j] = half[j+1]\n    # Return count of valid sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**n + 2**n):\n        bit_sum = 0\n        for j in range(n):\n            bit_sum += i % 2\n            i //= 2\n        if bit_sum == (i - 1) % 2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if (sum(i*2**k for k in range(n)) % 2 == 0) and (sum(j*2**k for k in range(n)) % 2 == 0):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    def is_valid_binary(num):\n        binary_string = bin(num)[2:]\n        return binary_string == binary_string[::-1]\n\n    def count_binary_sequences(start, end):\n        count = 0\n        for num in range(start, end+1):\n            if is_valid_binary(num):\n                count += 1\n        return count\n\n    count_sum = 0\n    for i in range(1, n+1):\n        count_sum += count_binary_sequences(0, 2**i-1)\n    return count_sum\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        first = i & ((1 << n) - 1)\n        second = i >> n\n        if (first == (i >> n)) and (second == (i & ((1 << n) - 1))):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # initialize count\n    count = 0\n\n    # loop through all possible sequences\n    for i in range(2 ** n, 2 ** (n+1)):\n        # extract sum of first n bits\n        sum1 = sum(int(d) for d in format(i, '0{}b'.format(n)))\n\n        # extract sum of last n bits\n        sum2 = sum(int(d) for d in format(i, '0{}b'.format(n+1)))\n\n        # if sum of first n bits is equal to sum of last n bits, increment count\n        if sum1 == sum2:\n            count += 1\n\n    # return count\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1, (1 << n)):\n        binary = bin(i)[2:]\n        if sum(binary[:n]) == sum(binary[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth = max(depth, dict_depth(d[key]))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            new_depth = dict_depth(value) + 1\n            if new_depth > depth:\n                depth = new_depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # base case: if dictionary is empty, return 0\n    if not d:\n        return 0\n    \n    # recursive case: if dictionary has only one element, return 1\n    if len(d) == 1:\n        return 1\n    \n    # recursive case: find the maximum depth of the keys and values\n    max_depth_keys = max(dict_depth(d[k]) for k in d)\n    max_depth_values = max(dict_depth(v) for v in d.values())\n    \n    # return the maximum of the two depths\n    return max(max_depth_keys, max_depth_values) + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        raise TypeError('Input must be a dictionary')\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = 1 + dict_depth(item)\n                    if depth > max_depth:\n                        max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth = max(depth, dict_depth(value))\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth += 1\n                    depth = max(depth, dict_depth(item))\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for v in d.values())\n    elif isinstance(d, list):\n        depth = 1 + max(dict_depth(v) for v in d)\n    elif isinstance(d, (int, float, str, bool)):\n        depth = 0\n    else:\n        raise ValueError('Invalid data type')\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n        else:\n            depth = 1\n        max_depth = max(max_depth, depth)\n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        raise TypeError(\"Input must be a dictionary\")\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n        else:\n            depth = 1\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, ranges, rotations, and index as arguments.\n    It then finds the element at the given index after rotations.\n\n    Args:\n        arr (list): A list of integers.\n        ranges (list): A list of integers representing the range of valid rotations.\n        rotations (int): An integer representing the number of rotations required.\n        index (int): An integer representing the index of the element to find.\n\n    Returns:\n        The element at the given index after rotations.\n    \"\"\"\n\n    # initialize the result variable to None\n    result = None\n\n    # loop through the ranges of valid rotations\n    for r in ranges:\n        # initialize a temporary list to hold the rotated elements\n        rotated_arr = arr[:]\n\n        # rotate the list by the given number of rotations\n        for _ in range(r):\n            for i in range(len(rotated_arr) // 2):\n                temp = rotated_arr[i]\n                rotated_arr[i] = rotated_arr[-i - 1]\n                rotated_arr[-i - 1] = temp\n\n        # calculate the index of the element to find after the rotation\n        new_index = (index - 1) % len(rotated_arr) + (r - 1) * (index - 1)\n\n        # check if the new index is within the bounds of the rotated array\n        if 0 <= new_index < len(rotated_arr):\n            # if it is, assign the rotated element to the result variable\n            result = rotated_arr[new_index]\n            break\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of possible rotations for each element, a list of possible rotations for the entire array, and the index of the element for which we want to find the element after rotating the array.\n    \n    The function returns the element at the given index after rotating the array.\n    '''\n    \n    # Calculate the number of rotations for the entire array\n    total_rotations = sum(rotations)\n    \n    # Calculate the number of rotations for the current element\n    element_rotations = sum(ranges[index])\n    \n    # Calculate the index of the element after rotating the array\n    new_index = (index + element_rotations - 1) % len(arr)\n    \n    # Calculate the element at the new index after rotating the array\n    new_element = arr[new_index]\n    \n    # Calculate the number of rotations for the new element\n    new_element_rotations = sum(ranges[new_index])\n    \n    # Return the element at the new index after rotating the array\n    return new_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the first index at which the element can be found after rotations\n    for i in range(len(ranges)):\n        if ranges[i][0] <= index:\n            break\n\n    # Check if the element can be found after rotations\n    if index >= ranges[i][1]:\n        return None\n\n    # Calculate the new index after rotations\n    new_index = (index - ranges[i][0]) % rotations + ranges[i][0]\n\n    # Return the element at the new index\n    return arr[new_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] == ranges[count]:\n            count += 1\n        if count == rotations:\n            count = 0\n            if index < n:\n                return arr[index]\n            elif index == n:\n                return arr[0]\n            else:\n                return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    for i in range(rotations):\n        arr = reverse_array(arr)\n    for i in range(len(ranges)):\n        start, end = ranges[i]\n        if index >= start and index < end:\n            return arr[end - 1]\n    return None\n\ndef reverse_array(arr):\n    n = len(arr)\n    for i in range(n // 2):\n        j = n - i - 1\n        arr[i], arr[j] = arr[j], arr[i]\n    return arr"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, and a number of rotations as input and returns the element at the given index after the specified rotations.\n\n    Args:\n        arr (list): An array of integers.\n        ranges (list): A list of tuples containing the lower and upper bounds of each range.\n        rotations (int): The number of rotations to apply to the array.\n        index (int): The index of the element to be found after rotations.\n\n    Returns:\n        int: The element at the given index after rotations.\n\n    Raises:\n        TypeError: If any input is not a list or an integer.\n    \"\"\"\n\n    if not isinstance(arr, list):\n        raise TypeError(\"Input 'arr' must be a list.\")\n\n    if not isinstance(ranges, list):\n        raise TypeError(\"Input 'ranges' must be a list.\")\n\n    if not isinstance(rotations, int):\n        raise TypeError(\"Input 'rotations' must be an integer.\")\n\n    if not isinstance(index, int):\n        raise TypeError(\"Input 'index' must be an integer.\")\n\n    # Initialize variables\n    current_index = 0\n    element = arr[0]\n    current_range = ranges[0]\n\n    # Rotate the array by rotations\n    for _ in range(rotations):\n        element = arr[current_index]\n        current_range = ranges[current_index]\n        current_index = (current_index + 1) % len(arr)\n\n    # Find the element at the given index after rotations\n    for i in range(len(arr)):\n        if i == index:\n            return element\n        if i < index and current_range[1] > element:\n            current_range = ranges[current_index]\n            current_index = (current_index + 1) % len(arr)\n        if i > index and current_range[0] < element:\n            current_range = ranges[current_index]\n            current_index = (current_index + 1) % len(arr)\n\n    # If the element is not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    Args:\n        arr (list): List of elements.\n        ranges (list): List of ranges for each element.\n        rotations (list): List of rotations for each element.\n        index (int): Index for which we want to find the element.\n\n    Returns:\n        int: Element at given index after rotations.\n\n    \"\"\"\n    # Sort the elements based on their rotations and ranges\n    sorted_arr = sorted(zip(arr, ranges, rotations), key=lambda x: (-x[1], x[2]))\n\n    # Initialize variables to store the element at index 0 and the element at index index\n    element_at_index_0 = sorted_arr[0][0]\n    element_at_given_index = sorted_arr[index][0]\n\n    # Iterate through the elements and check if the current element is the same as the element at index 0 or index\n    for i in range(1, len(sorted_arr)):\n        if sorted_arr[i][0] == element_at_index_0 or sorted_arr[i][0] == element_at_given_index:\n            return sorted_arr[i][0]\n        else:\n            element_at_index_0 = element_at_given_index\n            element_at_given_index = sorted_arr[i][0]\n\n    return \"Element not found\""
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    # Find the index of the element to be rotated\n    rotated_index = index % len(arr)\n    # Find the element at the rotated index after rotating the array\n    rotated_element = arr[(rotated_index + rotations) % len(arr)]\n    # Find the index of the element to be searched in the rotated array\n    search_index = rotated_index - ranges + (rotations - 1) % len(arr)\n    # Search for the element in the rotated array\n    for i in range(len(ranges)):\n        if arr[(search_index + i) % len(arr)] == rotated_element:\n            return rotated_element\n    # If the element is not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Calculate the length of the original array\n    n = len(arr)\n\n    # Find the number of rotations required to reach the desired index\n    rotations = n - rotations % n\n\n    # Calculate the final index after rotations\n    final_index = (index + rotations) % n\n\n    # If the final index is within the range of the original array, return the element at the final index\n    if 0 <= final_index < n:\n        return arr[final_index]\n\n    # If the final index is outside the range of the original array, rotate the original array and find the element at the final index\n    else:\n        rotated_arr = arr[rotations:] + arr[:rotations]\n        return find_Element(rotated_arr, ranges, rotations, final_index)\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize a variable to store the current element\n    curr_element = arr[index]\n    # Initialize a variable to store the total number of rotations\n    total_rotations = 0\n    \n    # Perform rotations until the current element is found\n    while curr_element not in arr:\n        # Increment the total number of rotations\n        total_rotations += 1\n        # Update the current element\n        if total_rotations % rotations == 0:\n            # Calculate the new index based on the current rotation\n            new_index = (index + total_rotations) % len(arr)\n            # Update the current element\n            curr_element = arr[new_index]\n    \n    # Return the element after the rotations\n    return curr_element"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'\\bp\\w+\\b'\n    matches = re.findall(pattern,''.join(words))\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-zA-Z]*$')\n    for word in words:\n        if pattern.match(word):\n            return word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Using regular expression to find words starting with 'p'\n    pattern = re.compile(r'\\bP[a-zA-Z]+\\b')\n    matches = pattern.findall(words)\n    \n    # Return two words starting with 'p'\n    if len(matches) >= 2:\n        return matches[:2]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    for word in words:\n        if re.match(pattern, word):\n            return word, word.replace('p', 'q')"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p.*')\n    result = re.findall(pattern, words)\n    if len(result) == 2:\n        return result[0], result[1]\n    else:\n        return \"No two words starting with 'p' were found in the list.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-zA-Z0-9]+'\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    result = [word for word in words if pattern.match(word)]\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Define the pattern to match words starting with letter 'p'\n    pattern = re.compile(r'p\\w+')\n\n    # Filter the words list to return only those starting with letter 'p'\n    words_starting_with_p = list(filter(pattern.match, words))\n\n    # Check if there are words starting with letter 'p' and return the result\n    if words_starting_with_p:\n        return words_starting_with_p[0], words_starting_with_p[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r'^p'\n    result = re.findall(pattern, words)\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Regular expression pattern to find words starting with 'p'\n    pattern = re.compile(r'^p[a-zA-Z]+')\n    # List to store matching words\n    matching_words = []\n    # Loop through the list of words\n    for word in words:\n        # Check if the word matches the pattern\n        if pattern.match(word):\n            # If it does, add it to the list of matching words\n            matching_words.append(word)\n    # Check if there are at least two matching words\n    if len(matching_words) >= 2:\n        # Return the two matching words\n        return matching_words\n    # If there are less than two matching words, return None\n    else:\n        return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the max sum and the subsequence\n    max_sum = float('-inf')\n    max_subseq = []\n\n    # Initialize the current sum and the current subsequence\n    curr_sum = a[index]\n    curr_subseq = [a[index]]\n\n    # Loop through the remaining elements\n    for i in range(index + 1, n):\n        # Calculate the difference between the current element and the kth element\n        diff = a[i] - k\n\n        # If the difference is positive, add the current element to the subsequence and update the current sum and subsequence\n        if diff > 0:\n            curr_subseq.append(a[i])\n            curr_sum += diff\n        else:\n            # If the difference is negative or zero, subtract the kth element from the current sum and add the current element to the subsequence\n            curr_sum -= k\n            curr_subseq.append(a[i])\n\n        # Update the max sum and max subsequence if the current sum becomes greater than the previous max sum or if the current subsequence is greater than the previous max subsequence\n        if curr_sum > max_sum or (curr_sum == max_sum and len(curr_subseq) > len(max_subseq)):\n            max_sum = curr_sum\n            max_subseq = curr_subseq\n\n    # Return the max sum and max subsequence\n    return max_sum, max_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize max_sum and current_sum\n    max_sum = a[0] * (n - index) + a[k] * index\n    current_sum = a[0] * index\n    \n    # Iterate through the array from index+1 to n\n    for i in range(index+1, n):\n        # If the value at a[i] is greater than the current_sum, update max_sum and current_sum\n        if a[i] > current_sum:\n            max_sum = current_sum\n            current_sum = a[i] * (n - i) + a[i] * i\n        # If the value at a[i] is not greater than the current_sum, only update current_sum\n        else:\n            current_sum = a[i] * (n - i) + a[i] * i\n            \n    # Return the maximum sum of increasing subsequence from prefix until ith index\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k <= index:\n        return 0\n    \n    # Find the maximum sum of increasing subsequence from prefix until ith index\n    max_sum = max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n    \n    # If kth element is present after ith index, include it in the maximum sum\n    if k == index + 1:\n        max_sum = a[index] + max_sum\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the maximum sum to be negative infinity\n    max_sum = float('-inf')\n    # Initialize an empty list to store the maximum sum of increasing subsequence ending at each index\n    max_sum_list = []\n    # Initialize the prefix sum to be 0\n    prefix_sum = 0\n    # Iterate through all the elements of the array\n    for i in range(n):\n        # If the current element is greater than k, then we need to include the current element in the subsequence\n        if a[i] > k:\n            # Calculate the sum of the subsequence starting from i and ending at index\n            current_sum = a[i] + prefix_sum\n            # If the current sum is greater than the maximum sum, update the maximum sum and the maximum sum of increasing subsequence ending at index\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_list = [current_sum]\n            elif current_sum == max_sum:\n                max_sum_list.append(current_sum)\n        # Update the prefix sum to the current element\n        prefix_sum = a[i]\n    # Return the maximum sum of increasing subsequence ending at index\n    return max_sum_list"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n    if a[index] > a[k] and index!= k:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index]+max_sum_increasing_subseq(a, n, index+1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize dp with zeros and max_sum with negative infinity\n    dp = [0] * n\n    dp[0] = a[0]\n    max_sum = float('-inf')\n    \n    # Traverse the array from index 1 to n-1\n    for i in range(1, n):\n        # Check if the current element is greater than k\n        if a[i] > k:\n            # If yes, then the maximum sum of increasing subsequence is the current element itself\n            dp[i] = a[i]\n            # Update the maximum sum if the current element is greater than the maximum sum of increasing subsequence\n            if a[i] + dp[index] > max_sum:\n                max_sum = a[i] + dp[index]\n        else:\n            # If not, then the maximum sum of increasing subsequence is the maximum sum of increasing subsequence from prefix until i-1 and excluding the current element\n            dp[i] = max(dp[j] for j in range(i)) + a[i]\n            # Update the maximum sum if the current element is greater than the maximum sum of increasing subsequence from prefix until i-1 and excluding the current element plus the current element\n            if dp[i] > max_sum:\n                max_sum = dp[i]\n    \n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n - 1:\n        return max(a[index] + k, a[index])\n    \n    # find the maximum sum of increasing subsequence including the current element\n    max_sum_including_current = max(a[index] + k, max_sum_increasing_subseq(a, n, index + 1, k))\n    \n    # find the maximum sum of increasing subsequence excluding the current element\n    max_sum_excluding_current = max_sum_increasing_subseq(a, n, index + 1, k)\n    \n    # return the maximum of the two\n    return max(max_sum_including_current, max_sum_excluding_current)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # Initialize the maximum sum and maximum subsequence so far\n    max_sum = 0\n    max_subseq = []\n    \n    # Initialize the maximum sum of increasing subsequence\n    for i in range(k, n+1):\n        # Initialize the current sum and current subsequence\n        cur_sum = 0\n        cur_subseq = [a[i-1]]\n        \n        # Calculate the sum of increasing subsequence up to i-1\n        for j in range(index-1, i-1, -1):\n            cur_sum += a[j]\n            cur_subseq.append(a[j])\n            \n        # If the current sum is greater than the maximum sum, update the maximum sum and maximum subsequence\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n            max_subseq = cur_subseq\n    \n    # If the maximum subsequence does not include the kth element, add it to the maximum subsequence\n    if a[k-1] not in max_subseq:\n        max_subseq.append(a[k-1])\n    \n    # Return the maximum sum and maximum subsequence\n    return max_sum, max_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    This function takes the list a, its length n, the index i and the value of k as input.\n    The function returns the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    if index == n-1:\n        return a[index]\n\n    if a[index] >= a[index+1] and a[index] >= k:\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n    if k < index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # Calculate the maximum sum of increasing subsequence\n    max_sum = max_sum_increasing_subseq(a, n, index + 1, k)\n    if a[k] > a[index]:\n        max_sum += a[k]\n\n    # Check if current subsequence is a valid increasing subsequence and greater than the maximum so far\n    if max_sum > a[index]:\n        return max_sum\n\n    # If current subsequence is not a valid increasing subsequence, we move to the next element and check if it is a valid increasing subsequence\n    return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a new tuple with all elements copied from tuplex\n    new_tuplex = deepcopy(tuplex)\n    \n    # Create a new list to store the new elements\n    new_list = []\n    \n    # Loop through the first m elements of new_tuplex\n    for i in range(m):\n        # Add the i-th element to new_list\n        new_list.append(new_tuplex[i])\n    \n    # Return the new_list as a tuple\n    return tuple(new_list)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        col = []\n        for j in range(n):\n            col.append(tuplex[i][j])\n        colon.append(col)\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # get the length of the tuple\n    length = len(new_tuplex)\n\n    # check if the length is greater than the maximum length allowed\n    if length > m:\n        raise ValueError('The length of the tuple is greater than the maximum length allowed.')\n\n    # check if the length is equal to the maximum length allowed\n    if length == m:\n        # create a colon of the maximum length\n        colon = [0] * m\n        # set the elements of the colon to the elements of the original tuple\n        for i in range(length):\n            colon[i] = new_tuplex[i]\n        # return the colon\n        return colon\n    # check if the length is less than the maximum length allowed\n    else:\n        # create a colon of the desired length\n        colon = [0] * n\n        # set the elements of the colon to the elements of the original tuple\n        for i in range(length):\n            colon[i] = new_tuplex[i]\n        # return the colon\n        return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Create a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Get the length of the tuple\n    length = len(tuplex_copy)\n\n    # Check if the length of the colon is valid\n    if length < m * n:\n        return \"Invalid length\"\n\n    # Get the start index of the colon\n    start = length - (m - 1) * n\n\n    # Get the end index of the colon\n    end = start + (m - 1) * n\n\n    # Get the colon of the tuple\n    colon = tuplex_copy[start:end]\n\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple([tuplex[i:i+n] for i in range(len(tuplex)-n+1)])"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Get the length of the tuple\n    length = len(tuplex)\n\n    # Initialize an empty list to hold the colon\n    colon = []\n\n    # Iterate through the tuple starting at the m-th element and moving to the n-th element\n    for i in range(m, n):\n        # If the current element is not None, append it to the colon list\n        if tuplex[i] is not None:\n            colon.append(tuplex[i])\n\n    # If the length of the colon is less than n-m, append None values to it\n    for i in range(n-m):\n        if i >= length:\n            colon.append(None)\n        else:\n            colon.append(tuplex[i])\n\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple and a tuple of dimensions (m,n)\n    and returns a new tuple that is a colon of the input tuple.\n    '''\n    # Check if the input tuple is 1D\n    if len(tuplex) == 1:\n        # If the input tuple is 1D, return a new tuple of dimensions (m,n)\n        return tuple(tuplex[0] for i in range(m))\n    else:\n        # If the input tuple is not 1D, create a copy of the input tuple\n        copy_tuplex = deepcopy(tuplex)\n        # Define an empty list to store the colonized tuple\n        colonized_tuplex = []\n        # Loop through the tuple dimensions\n        for i in range(m):\n            # Loop through the tuple rows\n            for j in range(n):\n                # Append the tuple element at index (i,j) to the colonized_tuplex list\n                colonized_tuplex.append(copy_tuplex[j][i])\n        # Return the colonized_tuplex\n        return tuple(colonized_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a deep copy of the original tuple\n    original_tuplex = deepcopy(tuplex)\n    \n    # get the length of the tuple\n    length = len(tuplex)\n    \n    # if the number of rows is greater than the number of columns, swap rows and columns\n    if m > n:\n        tuplex = tuple(zip(*tuplex))\n    \n    # get the number of iterations to be made\n    iterations = length - m + 1\n    \n    # loop through the iterations\n    for i in range(iterations):\n        \n        # create a list of empty tuples to be filled with the appropriate elements\n        fill_list = [() for _ in range(n - m + 1)]\n        \n        # loop through the rows of the fill list\n        for j in range(m):\n            \n            # get the index of the row to be filled with the appropriate elements\n            row_index = i + j\n            \n            # if the row index is greater than the length of the original tuple, break out of the loop\n            if row_index > length:\n                break\n            \n            # if the row index is within the length of the original tuple, add the appropriate element to the tuple in the fill list\n            fill_list[j] += (original_tuplex[row_index],)\n            \n        # fill the appropriate columns in the original tuple with the fill list\n        for j in range(m,n):\n            original_tuplex[j] = tuple(fill_list[j-m])\n            \n    # return the modified tuple\n    return original_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Make a copy of the input tuple to avoid modifying it\n    new_tuplex = deepcopy(tuplex)\n\n    # Set the first element of the new tuple to the appropriate value\n    new_tuplex[m] = n\n\n    # Return the new tuple with the first element set to the appropriate value\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Copy the input tuple to avoid altering it\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Initialize the colon with an empty list\n    colon = []\n    \n    # Iterate over the first n elements of the tuple\n    for i in range(n):\n        # Get the jth element of the tuple\n        j = i + m\n        if j < len(tuplex_copy):\n            # Add the jth element to the colon\n            colon.append(tuplex_copy[j])\n        else:\n            # If the jth element is not in the tuple, add None to the colon\n            colon.append(None)\n    \n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two input lists must have the same length\")\n    \n    max_products = []\n    for i in range(len(nums1)):\n        max_products.append(max(nums1[i], nums2[i]))\n    \n    max_product = max(max_products)\n    \n    for num in nums1:\n        if num == max_product:\n            N -= 1\n            if N == 0:\n                return num"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to keep track of the largest products and the indices of the largest products\n    largest_product = float('-inf')\n    index1 = float('-inf')\n    index2 = float('-inf')\n    \n    # Loop through the numbers in the two lists\n    for i in range(N):\n        product1 = nums1[i] * nums1[i+1] * nums1[i+2] *... * nums1[i+N-1]\n        product2 = nums2[i] * nums2[i+1] * nums2[i+2] *... * nums2[i+N-1]\n        \n        # If the product is larger than the current largest product, update the largest product and the indices of the largest products\n        if product1 > largest_product:\n            largest_product = product1\n            index1 = i\n        if product2 > largest_product:\n            largest_product = product2\n            index2 = i\n    \n    # Return the indices of the largest products\n    return index1, index2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Find the maximum product from each list\n    max_product1 = max(nums1)\n    max_product2 = max(nums2)\n    \n    # Find the minimum product from each list\n    min_product1 = min(nums1)\n    min_product2 = min(nums2)\n    \n    # Find the maximum difference between the maximum and minimum products\n    max_diff = max_product1 - min_product2\n    \n    # Find the minimum difference between the maximum and minimum products\n    min_diff = min_product1 - max_product2\n    \n    # Find the number of pairs of factors we need to select\n    num_pairs = (N - 1) // 2\n    \n    # Find the largest product for each pair of factors\n    largest_products = []\n    for i in range(num_pairs):\n        largest_product = max(max_product1 * nums1[i] * nums2[i], max_product2 * nums1[i] * nums2[num_pairs-i-1],\n                              min_product1 * nums1[num_pairs-i-1] * nums2[i], min_product2 * nums1[num_pairs-i-1] * nums2[num_pairs-i-1])\n        largest_products.append(largest_product)\n    \n    # Return the largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the variables\n    max_products = []\n    \n    # Calculate the maximum product of the two lists\n    max_product = nums1[0] * nums2[0]\n    max_products.append(max_product)\n    \n    # Iterate through the remaining numbers in the lists\n    for i in range(1, len(nums1)):\n        # Calculate the product of the two lists and the number at index i\n        product = nums1[i] * nums2[0]\n        \n        # Check if the product is larger than the current maximum\n        if product > max_product:\n            max_product = product\n        \n        # Append the product to the list of max products\n        max_products.append(max_product)\n    \n    # Filter the list of max products to only keep the ones that are larger than or equal to N\n    filtered_products = [product for product in max_products if product >= N]\n    \n    # Return the list of filtered products\n    return filtered_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(nums1)):\n        product = 1\n        for j in range(len(nums2)):\n            if i!= j:\n                product *= max(nums1[i], nums2[j])\n        if product > max_product:\n            max_product = product\n            max_product_indices = [i, j]\n    return max_product, max_product_indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Define a function to find the largest product of a list\n    def find_largest_product(numbers):\n        largest_product = float('-inf')\n        for i in range(len(numbers)):\n            for j in range(i+1, len(numbers)):\n                product = 1\n                for k in range(j, len(numbers)):\n                    product *= numbers[k]\n                if product > largest_product:\n                    largest_product = product\n        return largest_product\n    \n    # Find the largest product of nums1\n    largest_product_nums1 = find_largest_product(nums1)\n    \n    # Find the largest product of nums2\n    largest_product_nums2 = find_largest_product(nums2)\n    \n    # Find the product of the two largest products\n    product = largest_product_nums1 * largest_product_nums2\n    \n    # Find the N largest products\n    largest_products = []\n    if N <= 0 or N > len(nums1):\n        N = len(nums1)\n    for i in range(N):\n        if i < len(nums1):\n            largest_product_i = largest_product_nums1\n        else:\n            largest_product_i = largest_product_nums2\n        largest_products.append(largest_product_i)\n    \n    # Find the product of the N largest products\n    product_N_largest = 1\n    for i in range(N):\n        product_N_largest *= largest_products[i]\n    \n    # Return the product of the two largest products and the N largest products\n    return product, product_N_largest"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize two pointers\n    left = 0\n    right = 0\n\n    # Initialize the product array\n    product_array = []\n\n    # Loop until the two pointers cross each other\n    while left < len(nums1) and right < len(nums2):\n        # Calculate the product of the two current numbers\n        product = nums1[left] * nums2[right]\n\n        # Add the product to the array if it's the largest so far\n        if len(product_array) < N or product > max(product_array):\n            product_array.append(product)\n\n        # Move the right pointer if the product is larger than the previous one\n        if product > max(product_array) and right < len(nums2) - 1:\n            right += 1\n        else:\n            left += 1\n\n    # Return the array of N largest products\n    return product_array[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Check if the length of the two lists is equal\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize the result list with zeros\n    result = [0] * N\n    \n    # Iterate over the sublists of the two sorted lists\n    for i in range(N):\n        # Calculate the product of the i-th sublist in nums1 and nums2\n        product = nums1[i] * nums2[i]\n        \n        # Find the largest of the product and the rest of the sublist\n        result[i] = max(product, nums1[i]) + max(product, nums2[i])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the maximum and minimum values found so far\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    # Iterate through each pair of numbers from each list\n    for num1, num2 in zip(nums1, nums2):\n        # Update the maximum and minimum values found so far\n        max1 = max(max1, num1)\n        max2 = max(max2, num2)\n        min1 = min(min1, num1)\n        min2 = min(min2, num2)\n        # Compute the maximum and minimum products of the two lists\n        max_product = max1 * max2\n        min_product = min1 * min2\n        # Update the maximum and minimum products found so far\n        max_product = max(max_product, num1 * num2)\n        min_product = min(min_product, num1 * num2)\n        # If the current pair of numbers forms the N-th largest product, update the list of N-th largest products\n        if max_product == max_product * N // 2:\n            n_th_largest_products.append((num1, num2))\n    # Return the list of N-th largest products\n    return n_th_largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    # Compute the maximum number of products we can get from each list\n    max_products = [max(nums1[i], nums2[j]) for i in range(len(nums1)) for j in range(len(nums2))]\n\n    # Find the indices of the N largest products\n    indices = [nums1.index(max_products[i]) for i in range(len(max_products))][:N]\n\n    # Find the products of the selected factors\n    products = [nums1[index] * nums2[index] for index in indices]\n\n    return products"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:   \n        return a   \n    else:   \n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # initialize an empty list to store the tuple of characters\n    tuple_str = []\n    # iterate over each character in the string\n    for char in str1:\n        # add the character to the tuple list\n        tuple_str.append(char)\n    # convert the tuple list to a tuple and return it\n    return tuple(tuple_str)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize variable to check unset bits\n    unset_bit = 1\n    \n    # loop while unset bits are found\n    while unset_bit & n:\n        unset_bit <<= 1\n    \n    # set the left most unset bit\n    n |= unset_bit\n    \n    # return the updated value of n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a given integer.\n\n    :param n: an integer\n    :return: the integer with the left most unset bit set to 1, otherwise returns the same integer\n    \"\"\"\n    # Check if the integer is already set to 0\n    if n == 0:\n        return 1\n\n    # Check if the integer is already set to 1\n    if n == 1:\n        return 0\n\n    # Check if the left most bit is already set to 1\n    if n & 1 == 0:\n        return n | 1\n\n    # Check if the left most bit is already set to 0\n    return n | 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a number.\n\n    Args:\n        n (int): A positive integer.\n\n    Returns:\n        int: The new number with the left most unset bit set to 1.\n    \"\"\"\n    # Initialize the count of unset bits to the number of bits in n\n    count = 0\n    while n > 0:\n        count += 1\n        n &= (n - 1)  # Clear the least significant bit set to 1\n\n    # Set the left most unset bit to 1 and the rest to 0\n    return n | (1 << count)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit_mask = 1\n    count = 0\n    \n    # Count the number of 1 bits in the binary representation of n\n    while n & bit_mask:\n        count += 1\n        bit_mask <<= 1\n    \n    # Shift the bit_mask to the left by count bits\n    bit_mask <<= count\n    \n    # Set the leftmost unset bit to 1\n    n |= bit_mask\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    # Find the rightmost set bit\n    i = 31\n    while n & (1 << i) == 0:\n        i -= 1\n    if i == -1:\n        # All bits are set\n        return n\n    # Set the leftmost unset bit\n    return n | (1 << i)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function takes an integer n as input and returns the integer with the leftmost unset bit set to 1.\n    '''\n    count = 0 # counter for unset bits\n    while n > 0: # while n is greater than 0, check for unset bits\n        n &= (n - 1) # clear least significant bit\n        count += 1 # increment counter\n    return n << count # shift left n by the number of unset bits to set the leftmost unset bit to 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a bit mask of ones where each bit is set to 1\n    bit_mask = 1\n    left_most_unset_bit = 0\n    \n    # Iterate through all bits of the input integer\n    while bit_mask <= n:\n        # If the bit is set to 1, set the left most unset bit to the current bit mask and break out of the loop\n        if (n & bit_mask) == bit_mask:\n            left_most_unset_bit = bit_mask\n            break\n        \n        # Shift the bit mask to the left by 1\n        bit_mask <<= 1\n        \n    # Return the left most unset bit\n    return left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    set_bit = -1\n    for i in range(32):\n        if (n & (1 << i)) == 0:\n            set_bit = i\n            break\n    return set_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in a given integer n.\n    '''\n\n    # Convert binary representation of n to a list of digits\n    digits = [int(digit) for digit in bin(n)[2:]]\n\n    # Iterate over the digits from right to left\n    for i in range(len(digits)-1, -1, -1):\n        if digits[i] == 1:\n            # Set the rightmost unset bit to 1\n            digits[i] = 0\n            break\n        else:\n            # Set the rightmost unset bit to 0\n            digits[i] = 1\n\n    # Convert the list of digits back to a binary number\n    left_most_unset_bit = int(''.join(map(str, digits)), 2)\n\n    # Return the left most unset bit\n    return left_most_unset_bit"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r * r * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n\n    # Calculating the volume of the cone\n    v = (1/3) * math.pi * (r**2) * h\n    \n    # Returning the volume of the cone\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (1/3) * math.pi * r**2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    area = math.pi * r**2\n    volume = area * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * (r**2) * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n\n    # calculate the volume of the cone\n    volume = (1/3) * math.pi * r * r * h\n    \n    # return the volume\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    \n    r is the radius of the cone\n    h is the height of the cone\n    '''\n    V = (1/3) * math.pi * r ** 2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3)*math.pi*(r**2)*(h)\n    return V\n\nr = float(input(\"Enter the radius of the cone: \"))\nh = float(input(\"Enter the height of the cone: \"))\n\nV = volume_cone(r,h)\nprint(\"The volume of the cone is\",V)"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r * r\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n & (n-1)!= 0:\n        n &= (n-1)\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # initialize the highest power of 2 to 1\n    highest_power = 1\n\n    # loop while the current highest power of 2 is less than or equal to n\n    while highest_power <= n:\n        # check if the current power of 2 is less than or equal to n\n        if highest_power * 2 <= n:\n            # if it is, update the highest power of 2 to the next power of 2\n            highest_power *= 2\n        # otherwise, the current power of 2 is greater than n, so break out of the loop\n        else:\n            break\n\n    # return the highest power of 2 found\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    highest_power_of_2 = 1\n    \n    while highest_power_of_2 < n:\n        highest_power_of_2 <<= 1\n        \n    return highest_power_of_2 - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize variables\n    highest_power = 0\n    power = 1\n    \n    # loop until we find the highest power of 2\n    while power <= n:\n        if power > highest_power:\n            highest_power = power\n        power *= 2\n    \n    # return the highest power of 2\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes an integer as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize highest power of 2 as 1\n    highest = 1\n    \n    # Loop through all the numbers from 2 to n (inclusive)\n    for i in range(2, n+1):\n        # If the current number is a power of 2, update the highest power of 2\n        if i == 2**highest:\n            highest += 1\n    \n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    \n    # Use binary search to find the highest power of 2 that is less than or equal to n\n    high = n\n    low = 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        # Check if mid is a power of 2\n        if mid == 1 or mid == 2:\n            high = mid - 1 # We've found the highest power of 2 less than or equal to n\n        else:\n            low = mid\n    \n    # Return the highest power of 2 that is less than or equal to n\n    return high"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        # find the highest power of 2 that is less than or equal to n\n        power = 1\n        while 2**power <= n:\n            power += 1\n        return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n >> 1 # divide n by 2\n        # print(n) # Uncomment to see the intermediate steps of the function\n    return n # return the final result"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    # check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # find the highest power of 2 that is less than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # initialize the highest power of 2 as 1\n    highest = 1\n    \n    # loop through all possible powers of 2 up to n\n    while highest <= n:\n        # if we have found the highest power of 2, return it\n        if highest == highest & (highest - 1):\n            return highest\n        \n        # increment the highest power of 2\n        highest <<= 1\n    \n    # if we have not found the highest power of 2, return None\n    return None"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return (2*find_lucas(n-1) - find_lucas(n-2)) // 2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = 2\n        prev = 1\n        for i in range(2, n+1):\n            curr = prev_prev + prev\n            prev_prev = prev\n            prev = curr\n        return curr"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    # Loop through the three lists\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                # Add the current value to the corresponding key in the nested dictionary\n                nested_dict.setdefault(l1[i], {})[l2[j]] = l3[k]\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # define the nested dictionary\n    nested_dict = {}\n\n    # iterate through each list and add the elements to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n\n    # convert the nested dictionary to a list of dictionaries\n    list_of_dicts = []\n    for key, value in nested_dict.items():\n        dict_obj = {'key': key, 'value': value}\n        list_of_dicts.append(dict_obj)\n\n    # return the list of dictionaries\n    return list_of_dicts"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the final output\n    output = {}\n    # Loop through each list\n    for i in range(len(l1)):\n        # Create a new dictionary with key as the first list item and value as the second list item\n        new_dict = {l1[i]: l2[i]}\n        # Add the new dictionary to the output dictionary\n        output.update(new_dict)\n    # Loop through each nested dictionary in the output dictionary\n    for j in output.values():\n        # Loop through each nested dictionary in the current nested dictionary\n        for k in j.values():\n            # Check if the current nested dictionary has a value that is a dictionary\n            if isinstance(k, dict):\n                # Loop through each nested dictionary in the current nested dictionary\n                for l in k.values():\n                    # Create a new dictionary with key as the second list item and value as the third list item\n                    new_dict = {l3[i]: l}\n                    # Add the new dictionary to the current nested dictionary\n                    k.update(new_dict)\n    # Return the final output dictionary\n    return output"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        if not result.get(key):\n            result[key] = {}\n        result[key][value] = l3[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Convert the first list to a dictionary\n    d1 = {k:v for k,v in zip(l1, l2)}\n\n    # Convert the second list to a dictionary\n    d2 = {k:v for k,v in zip(l1, l3)}\n\n    # Combine the two dictionaries\n    d = {**d1, **d2}\n\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(lists) == 1:\n        return {i: lists[0] for i in range(len(lists[0]))}\n    else:\n        return {i: convert_list_dictionary(*[x[i] for x in lists]) for i in range(len(lists[0]))}"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n    # loop through the lists and add their elements to the dictionary\n    for i, lst in enumerate([l1, l2, l3]):\n        for item in lst:\n            # split the key and value into separate strings\n            key, value = item.split(':')\n            # add the key-value pair to the result dictionary\n            result[key] = value\n    # return the resulting dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(lists) == 1:\n        return {list(i): 1 for i in lists[0]}\n\n    elif len(lists) == 2:\n        return {list(i): {list(j): 1 for j in lists[1]} for i in lists[0]}\n\n    elif len(lists) == 3:\n        return {list(i): {list(j): {list(k): 1 for k in lists[2]} for j in lists[1]} for i in lists[0]}\n\n    else:\n        raise ValueError('More than 3 lists are required.')"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if not isinstance(l1, list) or not isinstance(l2, list) or not isinstance(l3, list):\n        raise TypeError('All inputs must be lists.')\n    if len(l1)!= len(l2) or len(l1)!= len(l3) or len(l2)!= len(l3):\n        raise ValueError('All inputs must have the same length.')\n\n    result = {}\n    for i in range(len(l1)):\n        key = f\"{l1[i]}-{l2[i]}-{l3[i]}\"\n        if key in result:\n            result[key].append(i)\n        else:\n            result[key] = [i]\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1 (list): List of strings.\n        l2 (list): List of integers.\n        l3 (list): List of floats.\n\n    Returns:\n        dict: Nested dictionary with string, integer, and float values.\n    '''\n\n    # Create an empty dictionary to store the converted values.\n    result = {}\n\n    # Loop through each list and add the values to the dictionary.\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l3[i]] = l3[i]\n\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n\n    return max(get_max_sum(n // 2) + n, get_max_sum(n // 3) + n, get_max_sum(n // 4) + n, get_max_sum(n // 5) + n) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    \n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    \n    # Recursive calls for n/2, n/3, n/4, and n/5\n    sum_1 = get_max_sum(n//2)\n    sum_2 = get_max_sum(n//3)\n    sum_3 = get_max_sum(n//4)\n    sum_4 = get_max_sum(n//5)\n    \n    # Base case for n=1\n    if n == 1:\n        return 1\n    \n    # Formula to calculate the maximum sum possible using the given equation\n    max_sum = max((sum_1+sum_2+sum_3+sum_4), n)\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def get_f(n):\n        if n < 2:\n            return n\n        return max(get_f(n // 2) + get_f(n // 3) + get_f(n // 4) + get_f(n // 5), n)\n\n    return get_f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 5:\n        return n * (n + 1) // 2\n    else:\n        return get_max_sum(n//5) + get_max_sum(n//4) + get_max_sum(n//3) + get_max_sum(n//2) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return n\n\n    max_sum = get_max_sum(n//2) + n\n    max_sum = max(max_sum, get_max_sum(n//3) + n)\n    max_sum = max(max_sum, get_max_sum(n//4) + n)\n    max_sum = max(max_sum, get_max_sum(n//5) + n)\n\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    if n == 2:\n        return n\n    \n    if n == 3:\n        return n + 2\n    \n    if n == 4:\n        return n + 3\n    \n    if n == 5:\n        return n + 4\n    \n    if n == 6:\n        return n + 5\n    \n    if n == 7:\n        return n + 6\n    \n    if n == 8:\n        return n + 7\n    \n    if n == 9:\n        return n + 8\n    \n    if n == 10:\n        return n + 9\n    \n    if n == 11:\n        return n + 10\n    \n    if n == 12:\n        return n + 11\n    \n    if n == 13:\n        return n + 12\n    \n    if n == 14:\n        return n + 13\n    \n    if n == 15:\n        return n + 14\n    \n    if n == 16:\n        return n + 15\n    \n    if n == 17:\n        return n + 16\n    \n    if n == 18:\n        return n + 17\n    \n    if n == 19:\n        return n + 18\n    \n    if n == 20:\n        return n + 19\n    \n    if n == 21:\n        return n + 20\n    \n    if n == 22:\n        return n + 21\n    \n    if n == 23:\n        return n + 22\n    \n    if n == 24:\n        return n + 23\n    \n    if n == 25:\n        return n + 24\n    \n    if n == 26:\n        return n + 25\n    \n    if n == 27:\n        return n + 26\n    \n    if n == 28:\n        return n + 27\n    \n    if n == 29:\n        return n + 28\n    \n    if n == 30:\n        return n + 29\n    \n    if n == 31:\n        return n + 30\n    \n    if n == 32:\n        return n + 31\n    \n    if n == 33:\n        return n + 32\n    \n    if n == 34:\n        return n + 33\n    \n    if n == 35:\n        return n + 34\n    \n    if n == 36:\n        return n + 35\n    \n    if n == 37:\n        return n + 36\n    \n    if n == 38:\n        return n + 37\n    \n    if n == 39:\n        return n + 38\n    \n    if n == 40:\n        return n + 39\n    \n    if n == 41:\n        return n + 40\n    \n    if n == 42:\n        return n + 41\n    \n    if n == 43:\n        return n + 42\n    \n    if n == 44:\n        return n + 43\n    \n    if n == 45:\n        return n + 44\n    \n    if n == 46:\n        return n + 45\n    \n    if n == 47:\n        return n + 46\n    \n    if n == 48:\n        return n + 47\n    \n    if n == 49:\n        return n + 48\n    \n    if n == 50:\n        return n + 49\n    \n    if n == 51:\n        return n + 50\n    \n    if n == 52:\n        return n + 51\n    \n    if n == 53:\n        return n + 52\n    \n    if n == 54:\n        return n + 53\n    \n    if n == 55:\n        return n + 54\n    \n    if n == 56:\n        return n + 55\n    \n    if n == 57:\n        return n + 56\n    \n    if n == 58:\n        return n + 57\n    \n    if n == 59:\n        return n + 58\n    \n    if n == 60:\n        return n + 59\n    \n    if n == 61:\n        return n + 60\n    \n    if n == 62:\n        return n + 61\n    \n    if n == 63:\n        return n + 62\n    \n    if n == 64:\n        return n + 63\n    \n    if n == 65:"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return n\n    elif n == 3:\n        return n\n    elif n == 4:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def helper(num):\n        if num == 1:\n            return 1\n        elif num == 2:\n            return 2\n        elif num == 3:\n            return 4\n        elif num == 4:\n            return 7\n        elif num == 5:\n            return 12\n        else:\n            return helper(num - 1) + helper(num - 2) + helper(num - 3) + helper(num - 4) + helper(num - 5)\n\n    max_sum = 0\n    for i in range(1, n + 1):\n        max_sum = max(max_sum, helper(i))\n\n    return max_sum"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize variables to store the maximum length and the list with that length\n    max_length = 0\n    max_list = None\n    \n    # Loop through the input list and compare each element with the current maximum length and list\n    for item in input_list:\n        if len(item) > max_length:\n            # Update the maximum length and list if the current element has a longer length\n            max_length = len(item)\n            max_list = item\n            \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            max_list.append(element)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    lengths = []\n    for item in input_list:\n        lengths.append(len(item))\n    return max(lengths)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # initialize variables\n    max_len = 0\n    max_list = []\n    # loop over the input list\n    for item in input_list:\n        # check if the length of the current item is greater than the current maximum length\n        if len(item) > max_len:\n            # if it is, update the maximum length and the corresponding list\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            # if it is equal to the maximum length, add the current item to the list\n            max_list.append(item)\n    # return the list with maximum length\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # initialize variables to store the maximum length and the list with maximum length\n    max_length = 0\n    max_list = []\n\n    # loop through the input list\n    for item in input_list:\n        # check if the length of the current item is greater than the current maximum length\n        if len(item) > max_length:\n            # update the maximum length and the list with maximum length\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            # if the length is the same as the maximum length, add the item to the list with maximum length\n            max_list.append(item)\n\n    # return the list with maximum length\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize variables to keep track of the maximum length and its index\n    max_length = 0\n    max_index = 0\n\n    # Iterate through the list and update the max_length and max_index variables\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_index = i\n\n    # Return the list with the maximum length\n    return input_list[max_index]"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_elements = set(test_tup)\n    return len(unique_elements) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Use the set() function to remove duplicates from the tuple\n    unique_tup = set(test_tup)\n    # Check if the length of the unique tuple is equal to the length of the original tuple\n    if len(unique_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # check if the length of the tuple is 0\n    if len(test_tup) == 0:\n        return True\n    # check if the length of the tuple is 1\n    elif len(test_tup) == 1:\n        return True\n    # check if the length of the tuple is greater than 1\n    else:\n        # loop through the tuple to check for duplicates\n        for i in range(len(test_tup)-1):\n            if test_tup[i] == test_tup[i+1]:\n                return False\n        # if no duplicates were found, return True\n        return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    first_non_repeating = ''\n    for char in str1:\n        if char_count[char] == 1:\n            first_non_repeating = char\n            break\n    \n    return first_non_repeating"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of characters\n    char_count = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is not already in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # If the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n\n    # Iterate through each character in the string again to find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to keep track of the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first non-repeating character by iterating through the dictionary and checking for the first entry with a frequency of 1\n    for char, count in freq.items():\n        if count == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the counts of each character in the string\n    char_counts = {}\n    for char in str1:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n\n    # iterate through the string again, this time looking for the first non-repeating character\n    for char in str1:\n        if char_counts[char] == 1:\n            return char\n\n    # if no non-repeating characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n\n    Parameters:\n    str1 (str): The given string.\n\n    Returns:\n    int: The index of the first non-repeated character in the given string, or -1 if no non-repeated character is found.\n    '''\n\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for i, char in enumerate(str1):\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate over the characters and find the first non-repeated character\n    for i, char in enumerate(str1):\n        if char_count[char] == 1:\n            return i\n\n    # If no non-repeated character is found, return -1\n    return -1"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n            \n    # Find the first character in the dictionary that has a count of 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # If no such character was found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Convert the string to a set to remove duplicates\n    str1 = set(str1)\n    # Convert the set back to a list and sort it\n    str1 = sorted(list(str1))\n    # If the length of the list is 1, that means all characters are non-repeating\n    if len(str1) == 1:\n        return None\n    # If the length of the list is greater than 1, that means there is at least one non-repeating character\n    else:\n        return str1[0]"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Find the first non-repeating character in the dictionary and return its index\n    for i, count in enumerate(char_count.values()):\n        if count == 1:\n            return i\n\n    # If no non-repeating characters are found, return -1\n    return -1"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string) is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\nprint(check_char(\"abc\"))   # True\nprint(check_char(\"def\"))   # True\nprint(check_char(\"a\"))     # True\nprint(check_char(\"b\"))     # True\nprint(check_char(\"ab\"))    # False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    # Define the regex pattern for checking if the given string starts and ends with the same character\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n\n    # Use the re.match() function to check if the given string matches the pattern\n    match = re.match(regex, string)\n\n    # Check if the match is not None (i.e., the string matches the pattern)\n    if match is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False\n\nstring = input(\"Enter a string: \")\nif check_char(string):\n    print(\"The string starts and ends with the same character.\")\nelse:\n    print(\"The string does not start and end with the same character.\")"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #sorting the three numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n\n    #calculating the median\n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        median = (sorted_numbers[n//2-1] + sorted_numbers[n//2]) / 2\n    else:\n        median = sorted_numbers[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of those numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    a = sorted([a, b, c])[1]\n\n    # Check if the sorted numbers have an odd or even number of elements\n    if len(a) % 2 == 0:\n        # If they have an even number of elements, the median is the average of the middle two elements\n        median = (a[len(a) // 2 - 1] + a[len(a) // 2]) / 2\n    else:\n        # If they have an odd number of elements, the median is the middle element\n        median = a[len(a) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n    \n    # Calculate the length of the sorted list\n    length = len(nums)\n    \n    # If the length of the list is odd, the median is the middle number\n    if length % 2 == 1:\n        return nums[length // 2]\n    \n    # If the length of the list is even, the median is the average of the two middle numbers\n    else:\n        # Calculate the middle two indices\n        mid1 = length // 2\n        mid2 = mid1 - 1\n        \n        # Return the average of the middle two numbers\n        return (nums[mid1] + nums[mid2]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Calculate the length of the sorted list\n    length = len(sorted_numbers)\n    \n    # Calculate the middle index\n    middle_index = length // 2\n    \n    # If the length is odd, return the middle number\n    if length % 2 == 1:\n        return sorted_numbers[middle_index]\n    \n    # If the length is even, return the average of the two middle numbers\n    else:\n        return (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    a = sorted([a, b, c])\n    # Calculate the median\n    if len(a) % 2 == 0:\n        median = (a[len(a) // 2] + a[len(a) // 2 - 1]) / 2\n    else:\n        median = a[len(a) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Calculate the length of the sorted array\n    length = len(sorted_numbers)\n    \n    # If the length of the array is odd, the median is the middle number\n    if length % 2 == 1:\n        median = sorted_numbers[length // 2]\n    # If the length of the array is even, the median is the average of the two middle numbers\n    else:\n        median = (sorted_numbers[length // 2 - 1] + sorted_numbers[length // 2]) / 2\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the given numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the median\n    median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    # sort the numbers\n    nums = sorted([a,b,c])\n\n    # find the middle number\n    mid = len(nums) // 2\n\n    # check if the length is odd or even\n    if len(nums) % 2 == 0:\n        # if even, return the average of the two middle numbers\n        return (nums[mid-1] + nums[mid])/2\n    else:\n        # if odd, return the middle number\n        return nums[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the median\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n//2-1] + numbers[n//2]) / 2\n    else:\n        median = numbers[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sorting the three numbers\n    sorted_numbers = sorted([a,b,c])\n\n    # Getting the length of the sorted list\n    length = len(sorted_numbers)\n\n    # Calculating the median\n    if length % 2 == 0:\n        median = (sorted_numbers[length//2] + sorted_numbers[length//2-1]) / 2\n    else:\n        median = sorted_numbers[length//2]\n\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sum of digits\n    sum_list = []\n\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string to get the digits\n        digits = str(num)\n        # Initialize a variable to store the sum of digits\n        sum_digits = 0\n        # Loop through each digit in the string and add it to the sum\n        for digit in digits:\n            sum_digits += int(digit)\n        # Add the sum of digits to the sum list\n        sum_list.append(sum_digits)\n\n    # Return the sum of digits in the sum list\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into individual digits\n        digits = list(str(num))\n        # Initialize a variable to store the sum of digits\n        digit_sum = 0\n        # Loop through each digit in the number and add it to the sum\n        for digit in digits:\n            digit_sum += int(digit)\n        # Print the sum of digits for the current number\n        print(f\"The sum of digits of {num} is: {digit_sum}\")"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        temp = num\n        while temp > 0:\n            digit_sum += temp % 10\n            temp //= 10\n        nums.remove(num)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sum of digits\n    sum_digits = []\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string\n        num_str = str(num)\n        \n        # Convert each character in the string to an integer\n        digits = [int(d) for d in num_str]\n        \n        # Compute the sum of digits\n        sum_digit = sum(digits)\n        \n        # Add the sum of digits to the list of sums\n        sum_digits.append(sum_digit)\n        \n    # Return the list of sums of digits\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, map(str, nums)))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    sum_of_digits = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        sum_of_digits.append(digit_sum)\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        # convert the number to a string and then iterate over its digits\n        for digit in str(num):\n            digit_sum += int(digit)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # iterate through each number in the list\n    for num in nums:\n        # convert the number to a string and convert each digit to an integer\n        num_str = str(num)\n        num_list = [int(digit) for digit in num_str]\n        # add up the digits\n        sum_of_digits = sum(num_list)\n        # print the sum of digits for each number\n        print(sum_of_digits)"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        # convert the number to a string and iterate through its characters\n        for char in str(num):\n            digit_sum += int(char)\n    return digit_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with the same length as the input tuples\n    result_tup = (0,) * len(test_tup1)\n    # Iterate over the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # calculate the length of the tuples\n    length = len(test_tup1)\n    \n    # initialize an empty list to store the resulting tuples\n    result = []\n    \n    # iterate through each element of the tuples\n    for i in range(length):\n        # perform the bitwise xor operation\n        xor_result = test_tup1[i] ^ test_tup2[i]\n        \n        # append the resulting element to the result list\n        result.append(xor_result)\n    \n    # return the resulting list\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Create a new tuple to store the result\n    result_tup = ()\n    # Iterate through each element in both tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation across the elements\n        result = test_tup1[i] ^ test_tup2[i]\n        # Add the result to the result tuple\n        result_tup += (result,)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert the tuples to lists so we can perform bitwise operations\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Perform the bitwise xor operation across the two lists\n    result = [x ^ y for x, y in zip(list1, list2)]\n\n    # Convert the result back to a tuple\n    result_tup = tuple(result)\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple\n    result_tup = ()\n    \n    # Iterate over the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # get the length of the two tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    # create an empty list to hold the result\n    result = []\n    # iterate through each tuple element\n    for i in range(len1):\n        # perform the bitwise xor operation\n        result.append(test_tup1[i] ^ test_tup2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # convert the tuples into lists and then use the bitwise_xor() method to perform the xor operation\n    xor_list = list(test_tup1)\n    xor_list = [bitwise_xor(x, y) for x, y in zip(xor_list, test_tup2)]\n    return tuple(xor_list)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        if tup not in freq:\n            freq[tup] = 1\n        else:\n            freq[tup] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    # return the number of unique tuples in the set\n    return len(unique_set)\n"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for elem in test_list:\n        if not elem in unique_tuples:\n            unique_tuples.add(elem)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as an input and returns the number of unique tuples in the list.\n    '''\n    freq = {}\n    for tup in test_list:\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create an empty dictionary to store the frequency of tuples\n    freq_dict = {}\n\n    # Loop through the list of tuples\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its value by 1\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a value of 1\n        else:\n            freq_dict[tup] = 1\n\n    # Return the length of the dictionary, which is the total number of unique tuples\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a set to store unique tuples\n    unique_tuples = set()\n    # Loop through the list and add unique tuples to the set\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    # Return the number of unique tuples in the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        final_tup += (test_tup1[i] + test_tup2[i],)\n    return final_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initializing the result tuple with zeros\n    result_tup = (0, 0)\n    \n    # iterating over the tuples\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[0])):\n            result_tup[0] += test_tup1[i][j]\n            result_tup[1] += test_tup2[i][j]\n    \n    # returning the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        return \"Both the input tuples should be tuple.\"\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both the input tuples should have equal length.\"\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        if not isinstance(test_tup1[i], tuple) or not isinstance(test_tup2[i], tuple):\n            return \"All the nested tuples should be tuple.\"\n        if len(test_tup1[i])!= len(test_tup2[i]):\n            return \"All the nested tuples should have equal length.\"\n        for j in range(len(test_tup1[i])):\n            if isinstance(test_tup1[i][j], tuple) and isinstance(test_tup2[i][j], tuple):\n                if len(test_tup1[i][j])!= len(test_tup2[i][j]):\n                    return \"All the nested tuples inside the tuples should have equal length.\"\n                for k in range(len(test_tup1[i][j])):\n                    result_tuple += (test_tup1[i][j][k] + test_tup2[i][j][k],)\n            else:\n                result_tuple += (test_tup1[i][j] + test_tup2[i][j],)\n    return result_tuple"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty tuple to store the result\n    result_tup = ()\n    # iterate over the first tuple\n    for i in range(len(test_tup1)):\n        # iterate over the second tuple\n        for j in range(len(test_tup2[i])):\n            # add the two elements and append it to the result tuple\n            result_tup += (test_tup1[i][j] + test_tup2[i][j],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the input tuples are valid\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same number of elements.\")\n\n    # Initialize a new empty tuple to store the result\n    result_tup = ()\n\n    # Perform index-wise addition of the elements of the tuples\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple):\n            if isinstance(test_tup2[i], tuple):\n                # Recursively add the nested tuples\n                result_tup += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n            else:\n                # If the nested tuple is not a tuple, add its elements directly\n                result_tup += (test_tup1[i] + test_tup2[i],)\n        else:\n            # If the element of the tuple is not a tuple, add its elements directly\n            result_tup += (test_tup1[i] + test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple):\n            if isinstance(test_tup2[i], tuple):\n                result_tup += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n            else:\n                result_tup += (test_tup1[i] + test_tup2[i],)\n        else:\n            if isinstance(test_tup2[i], tuple):\n                result_tup += (test_tup1[i] + test_tup2[i],)\n            else:\n                result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples should have the same number of elements.\")\n\n    result_tup = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result_tup.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result_tup.append(test_tup1[i] + test_tup2[i])\n\n    return tuple(result_tup)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        new_tup = []\n        for j in range(len(test_tup1[0])):\n            new_tup.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(new_tup))\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row_sum = 0\n        for j in range(len(test_tup1[0])):\n            row_sum += test_tup1[i][j] + test_tup2[i][j]\n        result.append(row_sum)\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum number.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:   \n        return a   \n    else:   \n        return b   "
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(tuplex, \"exists in\", tuple1)\n    else:\n        print(tuplex, \"does not exist in\", tuple1)"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: #if the number is even \n        return False\n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Check if the number is negative\n    if x < 0:\n        # If the number is negative, the parity is even\n        parity = 'Even'\n    else:\n        # If the number is positive, the parity is odd\n        parity = 'Odd'\n\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x%2 == 0:\n        print(x, \"is even.\")\n    else:\n        print(x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = x % 2 # checking for the remainder of x when x is divided by 2\n    if parity == 0: # checking if the remainder is 0\n        print(\"The parity of the number\", x, \"is even.\")\n    else:\n        print(\"The parity of the number\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = (x & 1)\n    if parity == 1:\n        print(\"The parity of\", x, \"is odd.\")\n    else:\n        print(\"The parity of\", x, \"is even.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n\n    # check if x is a positive integer\n    if type(x)!= int or x < 0:\n        print(\"Error: x must be a positive integer.\")\n        return\n\n    # check if x is even or odd\n    if x % 2 == 0:\n        print(f\"{x} is even.\")\n    else:\n        print(f\"{x} is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as input and returns True if the parity of the number is odd, and False otherwise.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as input and returns True if the parity of the number is odd, False otherwise.\n    '''\n    parity = x % 2\n    if parity == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n\n    # Convert the number to a string and reverse it\n    num_str = str(n)[::-1]\n\n    # Define the maximum number of digits that can be rearranged\n    max_rearranged_digits = 0\n\n    # Loop through all possible rearrangements of digits\n    for i in range(1, len(num_str)+1):\n        # Calculate the rearranged number\n        rearranged_num = int(num_str[-i:])\n\n        # Check if the rearranged number is greater than the given number\n        if rearranged_num > n:\n            # Check if the rearranged number is greater than the maximum rearranged number\n            if rearranged_num > max_rearranged_digits:\n                # Update the maximum rearranged number\n                max_rearranged_digits = rearranged_num\n\n    # Return the maximum rearranged number\n    return max_rearranged_digits"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a string\n    num_str = str(n)\n    # reverse the string\n    rev_str = num_str[::-1]\n    # reverse the first half of the string\n    half_len = len(rev_str) // 2\n    rev_half_str = rev_str[:half_len]\n    rev_half_str_reversed = rev_half_str[::-1]\n    # add the first half of the reversed string to the second half of the reversed string\n    rev_half_str_reversed_plus_first = rev_half_str_reversed + rev_str[half_len:]\n    # convert the reversed string back to an integer and return it\n    return int(rev_half_str_reversed_plus_first)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # get the length of the number\n    length = len(str(n))\n\n    # create a list of digits\n    digits = list(str(n))\n\n    # loop through the digits and reverse them\n    for i in range(length // 2):\n        digits[i], digits[length - i - 1] = digits[length - i - 1], digits[i]\n\n    # create a new number by joining the digits\n    new_number = int(''.join(digits))\n\n    # return the new number\n    return new_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string and split it into its digits\n    digits = [int(d) for d in str(n)]\n    # Reverse the digits and join them back into a string\n    digits_str = ''.join(str(d) for d in digits[::-1])\n    # Convert the reversed string back to an integer and return it\n    return int(digits_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Initialize the digits list and the result string\n    digits = list(str(n))\n    result = []\n\n    # Iterate over the digits list in reverse order\n    for i in range(len(digits) - 1, -1, -1):\n        # If the digit is greater than 0\n        if int(digits[i]) > 0:\n            # Move the digit to the end of the result list\n            result.append(digits.pop(i))\n        # If the digit is 0\n        else:\n            # Add the digit to the result list\n            result.append(digits.pop(i))\n\n    # Convert the result list to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    length = len(digits)\n    i = 0\n    \n    # Loop through the digits in reverse order\n    while i < length:\n        # Find the largest digit that can be placed before the current digit\n        largest = max(digits[:i] + digits[i+1:])\n        \n        # If the largest digit is smaller than the current digit, swap them\n        if largest < digits[i]:\n            digits[i], digits[digits.index(largest)] = largest, digits[i]\n        \n        # Move to the next digit\n        i += 1\n    \n    # Convert the list of digits back to a number and return it\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    # Get the length of the number\n    num_length = len(str(n))\n\n    # Initialize the list of digits\n    digits = []\n\n    # Iterate through the digits of the number and add them to the list\n    for i in range(num_length):\n        digits.append(int(str(n)[i]))\n\n    # Reverse the list of digits\n    digits.reverse()\n\n    # Add 1 to the last digit in the list\n    digits[-1] += 1\n\n    # Convert the list of digits back to a string and return it\n    return ''.join(map(str, digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a string\n    s = str(n)\n\n    # Initialize variables to keep track of the digits\n    digit_count = [0] * 10\n    digit_sum = 0\n\n    # Count the number of digits and the sum of their values\n    for digit in s:\n        digit_count[int(digit)] += 1\n        digit_sum += int(digit)\n\n    # Find the next bigger number by rearranging the digits\n    next_bigger = 0\n    next_digit_sum = 0\n\n    for i in range(10):\n        # Skip the digit with the least count\n        if digit_count[i] >= digit_count[next_bigger]:\n            continue\n\n        # Compute the rearranged digit\n        rearranged_digit = (next_bigger + i) % 10\n\n        # Update the next bigger number and its digit sum\n        next_bigger = rearranged_digit\n        next_digit_sum = digit_sum + (digit_count[i] * rearranged_digit)\n\n    return next_bigger, next_digit_sum"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    max_digit = max(digits)\n    digits.remove(max_digit)\n\n    for i in range(len(digits)):\n        if max_digit % 10 == 9 and digits[i] == 9:\n            digits[i] = 0\n            break\n        if digits[i] < max_digit:\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n            break\n        max_digit //= 10\n\n    new_n = 0\n    for digit in digits:\n        new_n = new_n * 10 + digit\n\n    return new_n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Define a list of digits to use in rearranging the digits\n    digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n\n    # Initialize the result to the initial input number\n    result = n\n\n    # Iterate through the digits of the input number in reverse order\n    for i in range(len(str(n)) - 1, -1, -1):\n        # Get the current digit\n        digit = str(n)[i]\n\n        # Check if the digit is already at the end of the digits list\n        if digit in digits:\n            # If so, move the digit to the front of the digits list\n            digits.remove(digit)\n            digits.insert(0, digit)\n\n            # Update the result to the new number with the rearranged digits\n            result = int(''.join(digits))\n            break\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Create a min heap to store the pairs\n    min_heap = []\n    \n    # Iterate through the first array\n    for num1 in nums1:\n        # Iterate through the second array\n        for num2 in nums2:\n            # Calculate the sum of the elements\n            total = num1 + num2\n            # Check if the sum is already in the heap\n            if total not in [pair[1] for pair in min_heap]:\n                # If the sum is not in the heap, add it to the heap\n                heapq.heappush(min_heap, (total, (num1, num2)))\n                # If the heap size exceeds k, remove the smallest pair from the heap\n                if len(min_heap) > k:\n                    heapq.heappop(min_heap)\n    \n    # Create a list to store the k smallest pairs\n    pairs = []\n    \n    # Iterate through the heap and add the pairs to the list\n    while min_heap:\n        pair = heapq.heappop(min_heap)\n        pairs.append(pair[1])\n        k -= 1\n        # If the heap size exceeds k, remove the smallest pair from the heap\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a list of tuples (nums1[i], nums2[j]) for all i and j\n    pairs = [(num1, num2) for num1 in nums1 for num2 in nums2]\n    # sort the list based on the first element in each tuple (i.e., the first element in the tuple)\n    pairs.sort(key=lambda x: x[0])\n    # initialize an empty list to store the k smallest pairs\n    result = []\n    # add the first k pairs to the result list\n    result += pairs[:k]\n    # remove the first k pairs from the pairs list\n    del pairs[:k]\n    # use a heap to store the pairs that are not in the result list\n    heap = []\n    # add the pairs that are not in the result list to the heap\n    for pair in pairs:\n        heapq.heappush(heap, pair)\n    # add the k smallest pairs to the result list\n    while len(result) < k and heap:\n        pair = heapq.heappop(heap)\n        result.append(pair)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a min heap to store the smallest elements\n    min_heap = []\n    \n    # Loop through the first array and push the elements onto the heap\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n        \n        # If the size of the heap exceeds k, pop the smallest element and push the remaining elements back onto the heap\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # Initialize the result list\n    result = []\n    \n    # Loop through the second array\n    for num in nums2:\n        # If the size of the heap is less than or equal to k, add the element to the result list\n        if len(min_heap) <= k:\n            result.append([num, heapq.heappop(min_heap)])\n        \n        # If the size of the heap exceeds k, pop the smallest element from the heap and push the remaining elements back onto the heap\n        else:\n            if num < min_heap[0]:\n                heapq.heappush(min_heap, num)\n            else:\n                heapq.heappop(min_heap)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap1 = []\n    heap2 = []\n    for num in nums1:\n        if len(heap1) < k:\n            heapq.heappush(heap1, -num)\n        elif -heap1[0] > num:\n            heapq.heappushpop(heap1, -num)\n    for num in nums2:\n        if len(heap2) < k:\n            heapq.heappush(heap2, -num)\n        elif -heap2[0] > num:\n            heapq.heappushpop(heap2, -num)\n    pairs = []\n    while heap1 and heap2:\n        if -heap1[0] - heap2[0] >= 0:\n            pairs.append((heap1[0] - heap2[0], -heap1[0], heap2[0]))\n            heapq.heappop(heap1)\n        else:\n            pairs.append((heap2[0] - heap1[0], -heap2[0], heap1[0]))\n            heapq.heappop(heap2)\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (-num1 - num2, (num1, num2)))\n            elif -heap[0][0] > num1 + num2:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-num1 - num2, (num1, num2)))\n    return [heapq.heappop(heap)[1] for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    # Build the heap with the first elements\n    for num1 in nums1:\n        heappush(heap, (num1, float('inf'), 0))\n    # Iterate through the second elements\n    for num2 in nums2:\n        # Pop the smallest num1 and its smallest num2 (if any)\n        num1, num2, idx = heappop(heap)\n        # Check if we have found k pairs so far\n        if k == 0:\n            break\n        # Check if we have found a pair that is smaller than num2\n        if num1 > num2:\n            heappush(heap, (num1, num2, idx + 1))\n        # If num1 is equal to num2, we can use it as both elements of the pair\n        else:\n            # Check if we have found a pair that is smaller than num1\n            if k == 0:\n                break\n            heappush(heap, (num1, num1, idx + 1))\n            k -= 1\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Create a min heap to store the smallest k pairs\n    min_heap = []\n    \n    # Initialize variables to keep track of indices of smallest and largest elements\n    i = 0\n    j = 0\n    \n    # Iterate through the arrays and create pairs of smallest k elements\n    while i < len(nums1) and j < len(nums2) and k > 0:\n        # If the current pair is smaller than the smallest element in the min heap, add it to the min heap\n        if nums1[i] + nums2[j] < nums1[min_heap[0][0]] + nums2[min_heap[0][1]]:\n            heapq.heappush(min_heap, (nums1[i], nums2[j]))\n        \n        # Remove the smallest element from the min heap if the min heap has reached k elements\n        if len(min_heap) == k:\n            heapq.heappop(min_heap)\n        \n        # If the current element in the first array is smaller than the current element in the second array, move the index of the first array\n        if nums1[i] + nums2[j] > nums1[nums2[j]]:\n            i += 1\n        \n        # If the current element in the second array is smaller than the current element in the first array, move the index of the second array\n        else:\n            j += 1\n        \n        # Decrement k to account for the current pair\n        k -= 1\n    \n    # Return the minimum k pairs\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # create a min heap of size k to store the smallest k pairs\n    min_heap = []\n    \n    # iterate through the two arrays\n    i, j = 0, 0\n    while i < len(nums1) and j < len(nums2):\n        \n        # add the minimum value of the three elements to the min heap\n        heapq.heappush(min_heap, (min(nums1[i], nums2[j]), nums1[i], nums2[j]))\n        \n        # if the size of the heap becomes greater than k, remove the maximum value\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n        \n        # increment the pointers for the next iteration\n        i += 1\n        j += 1\n    \n    # convert the heap into a list of tuples of the minimum elements\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        heapq.heappush(heap, num1)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    pairs = []\n    for num2 in nums2:\n        while len(heap) > 0 and num2 > heap[0]:\n            heapq.heappop(heap)\n        if len(heap) > 0 and heap[0] == num2:\n            pairs.append((heapq.heappop(heap), num2))\n        heapq.heappush(heap, num2)\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    \n    # Add the first element of each array to the min heap\n    heapq.heappush(min_heap, (-nums1[0], (0, 0)))\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate through the remaining k elements\n    for i in range(k):\n        # Pop the smallest pair from the heap\n        smallest_pair = heapq.heappop(min_heap)\n        result.append(smallest_pair)\n        \n        # If the second element of the smallest pair is not None, add it to the min heap\n        if smallest_pair[1][1] < len(nums2) - 1:\n            heapq.heappush(min_heap, (-nums1[0], (smallest_pair[1][0], smallest_pair[1][1] + 1)))\n    \n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # sort the list of tuples in ascending order based on the first element of each tuple\n    list1.sort(key=lambda x: x[0])\n\n    # initialize the minimum product to be the product of the first two elements of the first tuple\n    min_product = list1[0][0] * list1[0][1]\n\n    # loop through the remaining tuples in the list\n    for i in range(1, len(list1)):\n        # calculate the product of the current tuple and the minimum product so far\n        product = list1[i][0] * list1[i][1]\n\n        # update the minimum product if the new product is smaller\n        if product < min_product:\n            min_product = product\n\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize a variable to store the minimum product\n    min_product = float('inf')\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Loop through each other tuple in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and store it in a variable\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            # Update the minimum product if the current product is smaller\n            if product < min_product:\n                min_product = product\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k] * list1[j][k]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # sort the list in ascending order\n    list1.sort()\n    \n    # initialize the minimum product as the first element of the list\n    min_product = list1[0]\n    \n    # iterate over the list from the second element to the end\n    for i in range(1, len(list1)):\n        # calculate the product of the current element and the next element\n        product = list1[i] * list1[i+1]\n        \n        # update the minimum product if the current product is smaller\n        if product < min_product:\n            min_product = product\n            \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples as input, and returns the minimum product of pairs of tuples within the list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples and returns the minimum product of their pairs.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n\n    # Initialize a variable to store the minimum product\n    min_product = float('inf')\n\n    # Loop through the list of tuples and find the minimum product\n    for tup1 in list1:\n        for tup2 in list1:\n            # Check if the two tuples are distinct\n            if tup1!= tup2:\n                # Calculate the product of the two tuples\n                product = tup1[0] * tup2[1]\n                # Update the minimum product if the current product is smaller\n                min_product = min(min_product, product)\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables to store minimum product and indices of the first tuple in the list\n    min_product = float('inf')\n    min_index = 0\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Loop through each other tuple in the list\n        for j in range(i + 1, len(list1)):\n            # Calculate the product of the current tuple and the other tuple and compare it to the current minimum product\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                # If the product is less than the current minimum product, update the minimum product and its index\n                min_product = product\n                min_index = i\n\n    # Return the minimum product and the indices of the first tuple in the list\n    return (min_product, min_index)"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples as input and returns the minimum product of pairs of tuples.\n\n    Parameters:\n        list1 (list): A list of tuples.\n\n    Returns:\n        The minimum product of pairs of tuples.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if (list1[i][0] * list1[j][1]) < min_product:\n                min_product = (list1[i][0] * list1[j][1])\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize a variable to store the minimum value\n    min_val = listval[0]\n\n    # Iterate through the list and update the minimum value if a smaller value is found\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to the first value in the list\n    min_val = listval[0]\n    # Loop through the rest of the list\n    for i in range(1, len(listval)):\n        # If the current value is less than the minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    This function takes a heterogeneous list as input and returns the minimum value in the list.\n    '''\n    minval = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize the minimum value as the first element of the list\n    min_value = listval[0]\n    # Iterate over the rest of the list\n    for i in range(1, len(listval)):\n        # Check if the current element is smaller than the current minimum value\n        if listval[i] < min_value:\n            # If it is, update the minimum value\n            min_value = listval[i]\n    # Return the minimum value\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to be the first element of the list\n    min_value = listval[0]\n\n    # Iterate over the rest of the elements in the list\n    for value in listval[1:]:\n        # If the current value is less than the minimum value, update the minimum value\n        if value < min_value:\n            min_value = value\n\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the snake case string to a regular expression\n    snake_regex = re.compile(r'([a-z0-9])([A-Z])')\n    \n    # Find all matches in the string\n    matches = snake_regex.findall(word)\n    \n    # Convert the matches to camel case\n    camel_word = ''\n    for match in matches:\n        camel_word += match[0] + match[1].lower()\n    \n    # Capitalize the first letter of the camel case string\n    camel_word = camel_word[0].upper() + camel_word[1:]\n    \n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Convert snake case to camel case\n    camel_case = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # replace all underscores with spaces\n    word = re.sub('_','', word)\n    # split the word into words\n    words = word.split()\n    # capitalize the first letter of each word and join the words\n    return ''.join(word.capitalize() for word in words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert snake case to camel case.\n\n    Parameters:\n    word (str): A snake case string.\n\n    Returns:\n    str: The camel case string.\n\n    Examples:\n    >>> snake_to_camel(\"hello_world\")\n    'helloWorld'\n    >>> snake_to_camel(\"a_string_with_multiple_words\")\n    'aStringWithMultipleWords'\n    \"\"\"\n    # Remove any leading underscores or hyphens\n    word = word.strip('_-')\n\n    # Split the word into words\n    words = re.findall(r'\\b\\w+\\b', word)\n\n    # Convert the first letter to upper case and the rest to lower case\n    camel_case_word = words[0]\n    for word in words[1:]:\n        camel_case_word += word[0].upper() + word[1:]\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Remove underscores and capitalize the first letter\n    camel_case = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n\n    # Remove the prefix \"is_\" if present\n    camel_case = re.sub('^is_', '', camel_case)\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Split the word into a list of words\n    words = word.split('_')\n\n    # Capitalize the first letter of each word and join them back together\n    camel_case_word = ''.join(word.capitalize() for word in words)\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # split the word into a list of words\n    words = re.findall(r'\\b\\w+\\b', word)\n\n    # capitalize the first letter of each word and join the words together with underscores\n    result = ''.join([word.capitalize() for word in words])\n\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('([A-Z]+)', r'_\\1', word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the snake case to camel case\n    camel_case = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    camel_case = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', camel_case)\n    return camel_case.lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    first_letter = word[0]\n    camel_case = first_letter.lower()\n    for i in range(1, len(word)):\n        if word[i].isupper():\n            camel_case += '_' + word[i].lower()\n        else:\n            camel_case += word[i].lower()\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Extracts the nth element from a given list of tuples.\n    '''\n    # Check if the input list is a list of tuples\n    if not all(isinstance(x, tuple) for x in list1):\n        raise ValueError(\"Input list should contain tuples only.\")\n    \n    # Check if the index is valid (i.e. within range)\n    if n < 1 or n > len(list1):\n        raise ValueError(\"Index should be within the range [1, len(list1)].\")\n    \n    # Extract the nth element and return it\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function extracts the nth element from a given list of tuples.\n    '''\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Iterate through the list of tuples and get the nth element\n    for i in range(len(list1)):\n        if i == n-1:\n            return list1[i]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return \"The index is out of range.\"\n    else:\n        return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    # check if the list of tuples is valid\n    if not isinstance(list1, list) or not all(isinstance(x, tuple) for x in list1):\n        raise ValueError(\"The input must be a list of tuples.\")\n\n    # check if the nth element is valid\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"The nth element must be an integer greater than or equal to 1.\")\n\n    # iterate over the list of tuples and extract the nth element\n    for i, x in enumerate(list1):\n        if i == n-1:\n            return x\n\n    # if the nth element is not found, raise a ValueError\n    raise ValueError(f\"The nth element {n} is not found in the list.\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    This function takes a list of tuples as input and an integer n as an argument. \n    It returns the nth element of the list. If the list has less than n elements, the function returns None.\n    \"\"\"\n    try:\n        return lst[n-1][1]\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the input list is empty\n    if not list1:\n        return None\n    # Extract the nth element from the list\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # initialize a variable to store the extracted element\n    extracted_element = None\n    \n    # loop through the list of tuples\n    for i in range(len(list1)):\n        # check if the index is equal to the nth element\n        if i+1 == n:\n            # if it is, return the element value\n            extracted_element = list1[i][1]\n            break\n    \n    # return the extracted element\n    return extracted_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # Loop through list1 and check if any value exists in list2\n    for i in list1:\n        if i in list2:\n            return True\n\n    # If no overlapping value is found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and checks if any value in the first list is present in the second list.\n\n    :param list1: A list of values.\n    :param list2: A list of values.\n    :return: True if any value in the first list is present in the second list and False otherwise.\n    \"\"\"\n    # Loop through list1 and check if any value is present in list2\n    for item in list1:\n        if item in list2:\n            return True\n    # If no value is found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and returns True if any value in the first sequence exists in the second sequence, else False.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    if set(list1) & set(list2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and returns True if there is a value that exists in both sequences, False otherwise.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n\n    Args:\n        list1 (list): A sequence of values.\n        list2 (list): A sequence of values.\n\n    Returns:\n        bool: True if any value in list1 exists in list2, otherwise False.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function finds a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], min_product * arr[i])\n        min_product = min(max_product * arr[i], min_product * arr[i])\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = []\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[1]\n    min1 = arr[0]\n    min2 = arr[1]\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return max(max1 * max2, min1 * min2)\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    max1 = arr[0]\n    min1 = arr[0]\n    max2 = arr[0]\n    min2 = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n            \n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n            \n    return max(max1 * max2, max2 * min1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    # sort the array in descending order\n    arr.sort(reverse=True)\n\n    # find the first pair with the highest product\n    max_product = arr[0] * arr[1]\n\n    # find the second pair with the highest product\n    if arr[0] > 0:\n        max_product = max(max_product, arr[1] * arr[0])\n    else:\n        max_product = max(max_product, arr[1] * arr[0])\n\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    max_pair = (-1, -1) #initializing max pair as (-1,-1)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_pair[0]:\n                max_pair = (product, arr[i]) #updating max pair if the product is greater than the current max pair\n            elif product > max_pair[1] and product!= max_pair[0]:\n                max_pair = (product, arr[j]) #updating max pair if the product is equal to the current max pair and the product is greater than the second max pair\n    return max_pair #returning the max pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) <= 1:\n        return None\n    \n    max_product = float('-inf')\n    max_pair = [0, 0]\n    min_product = float('inf')\n    min_pair = [0, 0]\n\n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_pair[0] = i\n            max_pair[1] = i\n        elif arr[i] > min_product:\n            min_product = arr[i]\n            min_pair[0] = i\n            min_pair[1] = i\n        else:\n            continue\n\n        if max_product * min_product > max_product:\n            return max_pair\n        elif max_product * min_product < min_product:\n            return min_pair\n\n    return None"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns the pair with the highest product.\n    '''\n    # Initialize two variables to store the maximum and minimum values in the array\n    max_val = arr[0]\n    min_val = arr[0]\n\n    # Loop through the array and update the maximum and minimum values\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n\n    # Multiply the maximum and minimum values to get the pair's product\n    max_prod = max_val * min_val\n\n    # Initialize two variables to store the maximum and minimum products\n    max_pair = max_val\n    min_pair = min_val\n\n    # Loop through the array again and update the maximum and minimum products if a pair is found\n    for i in range(len(arr)):\n        if arr[i] > max_val and arr[i] < min_val:\n            max_pair = arr[i]\n            min_pair = max_val\n        elif arr[i] < max_val and arr[i] > min_val:\n            max_pair = max_val\n            min_pair = arr[i]\n\n    # Multiply the maximum and minimum pairs' products to get the overall maximum product\n    overall_max = max_pair * min_pair\n\n    return overall_max"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()  # creating an empty set to store common elements\n\n    for tup in Input:  # iterating over each tuple in the list\n        if tup[0] in common_elements:  # checking if the first element of the tuple is already in the set\n            common_elements.remove(tup[0])  # removing the element from the set if it's already in it\n        else:\n            common_elements.add(tup[0])  # adding the first element of the tuple to the set if it's not in it already\n\n    return common_elements  # returning the set of common elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a dictionary that groups all tuples that have the same first element.\n    The keys of the dictionary are the first elements of the tuples in the list and the values are lists of tuples with that first element.\n    '''\n    result = {}\n    for tup in Input:\n        if tup[0] in result:\n            result[tup[0]].append(tup)\n        else:\n            result[tup[0]] = [tup]\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = []\n    for i in Input:\n        for j in Input:\n            if i[0] == j[0]:\n                common_elements.append(i[0])\n                break\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_list = []\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_list.append(Input[i])\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.add(Input[i][0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                if not (Input[i][0], Input[i][1]) in common_elements:\n                    common_elements.append((Input[i][0], Input[i][1]))\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples with the same first element in the same group.\n    '''\n\n    # create an empty dictionary to store the groups\n    groups = {}\n\n    # loop through each tuple in the input list\n    for t in Input:\n\n        # get the first element of the tuple\n        first = t[0]\n\n        # if the first element is already in the dictionary, add the tuple to the group list\n        if first in groups:\n            groups[first].append(t)\n\n        # if the first element is not in the dictionary, create a new group list and add the tuple to it\n        else:\n            groups[first] = [t]\n\n    # create an empty list to store the output tuples\n    output = []\n\n    # loop through the groups dictionary\n    for group in groups.values():\n\n        # get the first element of the first tuple in the group\n        first = group[0][0]\n\n        # create a new list of tuples with the same first element\n        output_group = [t for t in group if t[0] == first]\n\n        # add the new group to the output list\n        output.extend(output_group)\n\n    return output"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    unique_elements = set()\n    for tup in Input:\n        unique_elements.add(tup[0])\n\n    common_elements = []\n    for element in unique_elements:\n        count = 0\n        for tup in Input:\n            if tup[0] == element:\n                count += 1\n        if count == len(Input):\n            common_elements.append(element)\n\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in Input:\n        if not common_element or common_element[0]!= i[0]:\n            common_element = i\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first_element = []\n    for i in Input:\n        if i[0] in common_first_element:\n            common_first_element.remove(i[0])\n        else:\n            common_first_element.append(i[0])\n    return common_first_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        length = len(str(element))\n        if length > max_length:\n            max_length = length\n            max_element = element\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n    for ele in lst:\n        if len(str(ele)) > max_len:\n            max_len = len(str(ele))\n            max_ele = ele\n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    # initialize max_len and max_elem as 0 and None respectively\n    max_len = 0\n    max_elem = None\n\n    # loop through the list\n    for elem in lst:\n\n        # if the length of the element is greater than max_len, update max_len and max_elem\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n\n    # return max_elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        length = len(element)\n        \n        if length > max_length:\n            max_length = length\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n    for elem in lst: \n        if len(str(elem)) > max_len: \n            max_len = len(str(elem)) \n            max_elem = elem \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = ''\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum([round(x) for x in list1])\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # loop through the list and round the numbers\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n    # calculate the total sum and multiply it by the length of the list\n    total_sum = sum(list1)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        num_rounded = round(num)\n        total_sum += num_rounded\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    total_rounded = round(total)\n    print(total_rounded * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Round the numbers in the list\n    list1_rounded = [round(num) for num in list1]\n\n    # Calculate the total sum of the rounded numbers\n    total_sum = sum(list1_rounded)\n\n    # Print the result\n    print(total_sum * len(list1_rounded))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Round each number in the list\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n\n    # Calculate the total sum of the rounded numbers\n    total_sum = sum(list1)\n\n    # Multiply the total sum by the length of the list\n    result = total_sum * len(list1)\n\n    # Print the result\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total*len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_cubes += i ** 3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    even_cubes = 0\n    for i in range(1, n+1):\n        even_cubes += i*i*i\n    return even_cubes\n\nprint(cube_Sum(10))  # Output: 2024"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n+1, 2):\n        total_sum += i**3\n    return total_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i*i\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 0\n    while i <= n:\n        sum += i ** 3\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    even_numbers = []\n    for i in range(2, n+1, 2):\n        even_numbers.append(i)\n    cube_sum = 0\n    for num in even_numbers:\n        cube_sum += num**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The cube sum of the first\", n, \"even natural numbers is:\", cube_Sum(n))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Args:\n    - test_tup (tuple): A tuple of strings.\n    - delimiter (str): The delimiter to use. Default value is \" \".\n\n    Returns:\n    - concatenated_string (str): A concatenated string of all the elements of the tuple.\n    '''\n    concatenated_string = \"\"\n    for elem in test_tup:\n        concatenated_string += str(elem) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    result = delimiter.join(map(str, test_tup))\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1,n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        total += i**3\n        count += 1\n        \n    if count == 0:\n        return 0\n    else:\n        return total/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1):  \n        sum += i**3  \n    avg = sum/n  \n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function calculates the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average_cubes = sum_cubes / n\n    return average_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    average = sum/count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Initializing variables\n    sum_of_cubes = 0\n    count = 0\n\n    # Looping for n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n\n    # Calculating the average\n    average_of_cubes = sum_of_cubes / count\n\n    # Returning the average\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # iterate over first n numbers\n    for i in range(1, n+1):\n        # calculate cube of the number and add it to sum variable\n        sum += i ** 3\n\n    # calculate average by dividing sum by n\n    average = sum / n\n\n    # return the average\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initializing sum of cubes to 0\n    sum_of_cubes = 0\n\n    # iterating through the first n natural numbers\n    for i in range(n):\n        # calculating the cube of the number and adding it to the sum_of_cubes\n        sum_of_cubes += i ** 3\n\n    # calculating the average of the cubes and returning the result\n    return sum_of_cubes / n"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = []\n    for index, string in enumerate(test_tuple):\n        rear_index = string[-1]\n        rear_index_list.append(rear_index)\n    return rear_index_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for string in test_tuple:\n        rear_index_elements.append(string[-1])\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(str(s)[-1] for s in test_tuple)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for element in test_tuple:\n        rear_elements.append(element[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[::-1][1:],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple[0]) - 1\n    result = []\n    for string in test_tuple:\n        result.append(string[rear_index])\n    return result"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if all(y!= x for y in list1[i]):\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern to match the date format\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n\n    # use the re.match() method to match the pattern in the input string\n    match = re.match(pattern, dt)\n\n    # check if the match was successful\n    if match:\n        # use the datetime module to convert the date to dd-mm-yyyy format\n        from datetime import datetime\n        dt = datetime(year=int(match.group(1)), month=int(match.group(2)), day=int(match.group(3)))\n        return dt.strftime(\"%d-%m-%Y\")\n    else:\n        return \"Invalid date format\""
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # use re.search() method to search for the pattern in the input string\n    match = re.search(pattern, dt)\n    # check if match is not None, indicating a match was found\n    if match:\n        # use string.format() method to format the date in the required format\n        new_date = match.group(3) + '-' + match.group(2) + '-' + match.group(1)\n        # return the new date string\n        return new_date\n    else:\n        # if the input string does not match the date format, return the original string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use re.sub() method to replace the date format with desired format\n    new_dt = re.sub(pattern, r'\\2-\\1-\\3', dt)\n    \n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Search the date string using the pattern\n    match = re.search(pattern, dt)\n    # If the pattern is found, extract the date components and reverse the order of the month and day\n    if match:\n        year, month, day = match.groups()\n        return day + '-' + month + '-' + year\n    # If the pattern is not found, return the original date string as it is\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_pattern = re.compile(r'(\\d{4})')\n    mm_pattern = re.compile(r'(\\d{2})')\n    dd_pattern = re.compile(r'(\\d{2})')\n    \n    # Extract year, month, and day from the date string\n    yyyy = yyyy_pattern.search(dt).group(1)\n    mm = mm_pattern.search(dt).group(1)\n    dd = dd_pattern.search(dt).group(1)\n    \n    # Convert the date string from yyyy-mm-dd to dd-mm-yyyy\n    formatted_dt = f\"{dd}-{mm}-{yyyy}\"\n    \n    return formatted_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Use the re.sub() method to replace the year with the four-digit year and the month with the two-digit month and the day with the two-digit day\n    return re.sub(pattern, lambda m: f'{m.group(2)}-{m.group(1)}-{m.group(3)}', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regex pattern to match date pattern\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Find all matches in the input string\n    matches = re.findall(pattern, dt)\n    # Convert all matches to dd-mm-yyyy format\n    for match in matches:\n        dt = dt.replace(match, match.replace('-', '/'))\n    # Return the converted date string\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    dd_mm_yyyy = r'(\\d{2})-(\\d{2})-(\\d{4})'\n    match = re.match(yyyy_mm_dd, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Match the pattern in the input string and extract the groups\n    match = re.match(pattern, dt)\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n    \n    # Construct the new date in dd-mm-yyyy format\n    new_date = day + '-' + month + '-' + year\n    \n    return new_date"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Calculate the maximum gap\n    gap = n // 2\n    # Keep shifting the gap by 1 until the gap is one\n    while gap > 0:\n        # Perform insertion sort for this gap size\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            # Move elements of the array to the right\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap size\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    # define gap\n    gap = n // 2\n\n    # sort array by gap size\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Define the increment value for the size of the sub-arrays\n    gap = len(my_list) // 2\n\n    # Sort the array by using the gap-sorting technique\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n\n    Parameters:\n        test_tup1: tuple of integers\n        test_tup2: tuple of integers\n\n    Returns:\n        tup1_and_tup2: tuple of tuples, where each tuple contains the element-wise and of the corresponding elements from the two input tuples.\n    '''\n\n    tup1_and_tup2 = []\n    for i in range(len(test_tup1)):\n        tup1_and_tup2.append((test_tup1[i] & test_tup2[i]))\n\n    return tup1_and_tup2"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # If the length of the two tuples is not equal, return the original tuples\n    if len(test_tup1)!= len(test_tup2):\n        return test_tup1, test_tup2\n\n    # Initialize the and_tuple variable to an empty list\n    and_tuple = []\n\n    # Iterate over the elements of both tuples\n    for i in range(len(test_tup1)):\n        # Append the elementwise and of the two elements to the and_tuple list\n        and_tuple.append(test_tup1[i] & test_tup2[i])\n\n    # Return the and_tuple list as a tuple\n    return tuple(and_tuple)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length\")\n    # extract the elementwise and tuples using the '&' operator\n    result_tup = tuple(x1 & x2 for x1, x2 in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    # Create an empty tuple to store the result\n    result_tup = ()\n\n    # Iterate over the tuples and calculate the elementwise and\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the elementwise and tuples.\n    '''\n    # initialize an empty list to store the elementwise and tuples\n    and_tup = []\n    # iterate through each element of the two tuples\n    for i in range(len(test_tup1)):\n        # extract the corresponding elements from the two tuples and store the result in a tuple\n        element_tup = (test_tup1[i] & test_tup2[i])\n        # add the tuple to the and_tup list\n        and_tup.append(element_tup)\n    # return the and_tup list as the result\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length\")\n    \n    result_list = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result_list.append((test_tup1[i] & test_tup2[i]))\n        else:\n            raise ValueError(\"Both elements in both tuples should be tuples\")\n    \n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append((test_tup1[i] & test_tup2[i]))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the coefficients of the quadratic equation\n    discriminant = b**2 - 4*a*c\n\n    # If the discriminant is negative, there is no directrix\n    if discriminant < 0:\n        return None\n\n    # If the discriminant is zero, the directrix is the root of the quadratic equation\n    elif discriminant == 0:\n        return (-b)/(2*a)\n\n    # If the discriminant is positive, there are two directrices\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b**2 - 4*a*c\n    if disc >= 0:\n        root1 = (-b + disc**0.5)/(2*a)\n        root2 = (-b - disc**0.5)/(2*a)\n        print(\"The directrix of the parabola is:\", root1)\n        print(\"The directrix of the parabola is:\", root2)\n    else:\n        print(\"There are no real roots of the equation.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Find the discriminant\n    disc = b**2 - 4*a*c\n\n    # Check if the discriminant is negative or zero\n    if disc < 0:\n        return \"The equation has no real roots\"\n\n    # If the discriminant is positive, the equation has two real roots\n    elif disc > 0:\n        x1 = (-b + disc**0.5)/(2*a)\n        x2 = (-b - disc**0.5)/(2*a)\n        return \"The directrix is between\", x1, \"and\", x2\n\n    # If the discriminant is zero, the equation has only one real root\n    else:\n        x = -b/(2*a)\n        return \"The directrix is\", x"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Calculate the directrix of a parabola.\n    \n    Parameters:\n    a (float): a coefficient of the parabola\n    b (float): b coefficient of the parabola\n    c (float): c coefficient of the parabola\n    \n    Returns:\n    float: directrix of the parabola\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + (discriminant)**0.5) / (2*a)\n        root2 = (-b - (discriminant)**0.5) / (2*a)\n        return min(root1, root2)\n    elif discriminant == 0:\n        root = (-b) / (2*a)\n        return root\n    else:\n        return \"No real roots\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        print(\"There is no real root for this parabola.\")\n    else:\n        x1 = (-b + discriminant**(1/2)) / (2*a)\n        x2 = (-b - discriminant**(1/2)) / (2*a)\n        print(\"The directrix of the parabola is:\", x1)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        print(\"The directrix of the parabola is:\", x1)\n        print(\"The other directrix is:\", x2)\n    elif discriminant == 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        print(\"The directrix of the parabola is:\", x1)\n    else:\n        print(\"There are no real roots of this parabola.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the coefficients of the quadratic formula\n    discriminant = b**2 - 4*a*c\n    root_1 = (-b + discriminant**0.5)/(2*a)\n    root_2 = (-b - discriminant**0.5)/(2*a)\n\n    # Determine the type of the directrix\n    if root_1 == 0:\n        directrix ='vertical'\n    elif root_2 == 0:\n        directrix = 'horizontal'\n    else:\n        directrix = 'general'\n\n    # Return the directrix\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Find the discriminant\n    disc = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if disc > 0:\n        # Calculate the root of the discriminant\n        root1 = (-b + disc**0.5) / (2*a)\n        root2 = (-b - disc**0.5) / (2*a)\n        \n        # Find the intersection points of the parabola\n        x1 = root1**2 / 4 / a + root1 / 2\n        y1 = a*x1**2 + b*x1 + c\n        \n        x2 = root2**2 / 4 / a + root2 / 2\n        y2 = a*x2**2 + b*x2 + c\n        \n        # Return the intersection points\n        return x1, y1, x2, y2\n    \n    # If the discriminant is negative, the parabola has no real roots\n    elif disc < 0:\n        return \"The parabola has no real roots\"\n    \n    # If the discriminant is zero, the parabola has only one root\n    else:\n        root = -b / (2*a)\n        x = root**2 / 4 / a + root / 2\n        y = a*x**2 + b*x + c\n        return x, y"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Find the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is negative or zero\n    if discriminant < 0:\n        print(\"The discriminant is negative or zero.\")\n        return\n    \n    # Find the two roots of the discriminant\n    root1 = (-b + math.sqrt(discriminant))/(2*a)\n    root2 = (-b - math.sqrt(discriminant))/(2*a)\n    \n    # Find the directrix\n    if a == 0:\n        directrix = root2\n    elif b == 0:\n        directrix = root1\n    else:\n        directrix = (root1 + root2)/2\n    \n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        print(\"The directrix does not exist.\")\n    elif discriminant == 0:\n        x = -b/2/a\n        print(\"The directrix is at x =\", x)\n    else:\n        x1 = (-b - discriminant**0.5)/(2*a)\n        x2 = (-b + discriminant**0.5)/(2*a)\n        print(\"The directrix is between x =\", x1, \"and\", x2)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    common = []\n    for num in list1:\n        if num in list2:\n            common.append(num)\n    if len(common) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # check if both lists are non-empty\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    \n    # check if there is any common element\n    for elem in list1:\n        if elem in list2:\n            return True\n    \n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set of elements in list1 and list2\n    common_set = set(list1) & set(list2)\n    # check if the length of the set is greater than 0\n    if len(common_set) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Use a set to remove duplicates from list1\n    list1 = list(set(list1))\n    # Use a for loop to iterate through list2 and check if each element is in list1\n    for element in list2:\n        if element in list1:\n            return True\n    # If no common elements are found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if they have at least one common element.\n    \"\"\"\n    if len(list1)!= len(list2):\n        return False\n\n    for element in list1:\n        if element in list2:\n            return True\n\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2 and element not in common_list:\n            common_list.append(element)\n    return len(common_list) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns true if they have at least one common element.\n    '''\n    common_list = list(set(list1) & set(list2))\n    if len(common_list) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the base side of the trapezium\n    base = (base1 + base2) / 2\n\n    # Calculate the length of the side opposite the base\n    side_opposite_base = (base1 - base2) / 2\n\n    # Calculate the total length of the trapezium\n    total_length = height * 2\n\n    # Calculate the length of the height of the trapezium\n    height_length = total_length - (base + side_opposite_base)\n\n    # Calculate the length of the hypotenuse of the trapezium\n    hypotenuse = (base ** 2 + side_opposite_base ** 2) ** 0.5\n\n    # Calculate the length of the semi-perimeter of the trapezium\n    semi_perimeter = 2 * (base + side_opposite_base)\n\n    # Calculate the area of the trapezium\n    area = (base + side_opposite_base) * height_length\n\n    # Calculate the median of the length of the trapezium\n    median = (semi_perimeter ** 0.5) / 2\n\n    # Calculate the median of the length of the trapezium using the trapezoidal approximation\n    median_trapezoidal = (base + height_length + hypotenuse) / 3\n\n    return median, median_trapezoidal"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height / 2\n\n    # Calculate the lengths of the three trapezium sides\n    side1 = 0.5 * base1\n    side2 = 0.5 * base2\n    side3 = side1 + side2\n\n    # Calculate the area of the trapezium\n    area = 0.5 * height * (side1 + side2)\n\n    # Calculate the length of the midpoint of the trapezium\n    midpoint = 0.5 * (side1 + side3)\n\n    # Calculate the area of the base of the trapezium\n    base_area = 0.5 * height * base1\n\n    # Calculate the ratio of the area of the base to the area of the trapezium\n    ratio = base_area / area\n\n    # Calculate the distance from the midpoint to the top and bottom of the trapezium\n    top_distance = 0.5 * height * ratio\n    bottom_distance = 0.5 * height * (1 - ratio)\n\n    # Calculate the distance from the midpoint to the left and right of the trapezium\n    left_distance = 0.5 * (side1 + side2 - midpoint)\n    right_distance = 0.5 * (side1 + side2 + midpoint)\n\n    # Find the maximum distance\n    max_distance = max(top_distance, bottom_distance, left_distance, right_distance)\n\n    # Calculate the median distance from the midpoint\n    median_distance = 0.5 * (top_distance + bottom_distance)\n\n    # Calculate the area of the left half of the trapezium\n    left_area = 0.5 * height * (side1 + 0.5 * midpoint)\n\n    # Calculate the area of the right half of the trapezium\n    right_area = 0.5 * height * (side3 - 0.5 * midpoint)\n\n    # Calculate the area of the left and right halves of the trapezium\n    trapezium_area = 0.5 * height * (side1 + side2)\n\n    # Calculate the area of the trapezium when the base is changed to the center\n    center_area = 0.5 * height * (base2 + 0.5 * (side1 + side2))\n\n    # Calculate the ratio of the area of the center to the total area of the trapezium\n    center_ratio = center_area / trapezium_area\n\n    # Calculate the distance from the midpoint to the center of the trapezium\n    center_distance = 0.5 * (side1 + side2 - 0.5 * base2)\n\n    # Find the minimum distance\n    min_distance = min(top_distance, bottom_distance, left_distance, right_distance, center_distance)\n\n    # Check which half of the trapezium has the largest distance\n    if max_distance == top_distance:\n        side = side1\n    elif max_distance == bottom_distance:\n        side = side2\n    elif max_distance == left_distance:\n        side = 0.5 * (side1 + side2 - 0.5 * midpoint)\n    elif max_distance == right_distance:\n        side = 0.5 * (side1 + side2 + 0.5 * midpoint)\n    else:\n        side = 0.5 * (side1 + side2 - 0.5 * base2)\n\n    # Calculate the median length of the trapezium\n    median_length = 0.5 * side\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium given its base lengths and height.\n\n    Parameters:\n    - base1 (float): Length of the first base of the trapezium.\n    - base2 (float): Length of the second base of the trapezium.\n    - height (float): Height of the trapezium.\n\n    Returns:\n    - float: The median length of the trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium using Heron's formula\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # Calculate the perimeter of the trapezium using the formula:\n    perimeter = 2 * (base1 + base2)\n    # Calculate the length of the base that is longer than the other\n    if base1 > base2:\n        long_base = base1\n    else:\n        long_base = base2\n    # Calculate the length of the other base\n    other_base = perimeter - long_base\n    # Calculate the length of the base that is shorter than the other\n    if long_base > base1:\n        short_base = long_base\n    else:\n        short_base = base1\n    # Calculate the length of the shorter base by taking the larger of the two\n    shorter_base = long_base\n    # Calculate the length of the longer base by taking the smaller of the two\n    longer_base = short_base\n    # Calculate the length of the \"long\" half of the trapezium\n    long_half = (short_base * height) / 2\n    # Calculate the length of the \"short\" half of the trapezium\n    short_half = (long_base * height) / 2\n    # Calculate the length of the \"other\" half of the trapezium\n    other_half = other_base * height\n    # Calculate the length of the \"middle\" of the trapezium\n    middle = other_half + long_half + short_half\n    # Find the length of the shorter half of the trapezium\n    shorter_half = shorter_base * height\n    # Calculate the length of the median of the two trapezium halves\n    median = (shorter_half + middle) / 2\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    side1 = base1 + base2\n    side2 = 2 * height\n    area = 0.5 * base1 * height\n    \n    if area > side1 * side2:\n        if side1 > side2:\n            median = side1\n        else:\n            median = side2\n    else:\n        if side1 > side2:\n            median = 0.5 * side1 * (1 + 0.5)\n        else:\n            median = 0.5 * side2 * (1 + 0.5)\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the length of the trapezium using the law of cosines\n    length = math.sqrt(area * (1 - math.cos(math.pi/4)))\n\n    # Find the medians of the two halves of the trapezium\n    left_half_length = 0.5 * (base1 + base2)\n    left_half_median = math.sqrt(area * (1 - math.cos(math.pi/4)))\n\n    right_half_length = 0.5 * (base1 + base2)\n    right_half_median = math.sqrt(area * (1 - math.cos(3*math.pi/4)))\n\n    # Return the median of the two halves\n    return max(left_half_median, right_half_median)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the length of the base longer than the other base\n    if base1 > base2:\n        longer_base = base1\n    else:\n        longer_base = base2\n\n    # Calculate the length of the longer base plus the height of the trapezium\n    longer_length = longer_base + area\n\n    # Calculate the length of the shorter base by subtracting the length of the longer base from the area of the trapezium\n    shorter_length = area - longer_length\n\n    # Determine which base is longer and return its median\n    if longer_length > shorter_length:\n        return longer_base * height\n    else:\n        return shorter_length / height"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = (base1 + base2) * height / 2\n    return area"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the semi-perimeter of the trapezium\n    semi_perimeter = 0.5 * (base1 + base2)\n\n    # Calculate the length of the trapezium\n    length = math.sqrt(area / (math.tan(math.pi / 4) - math.tan(math.pi / 4)))\n\n    # Calculate the area of the semi-perimeter\n    semi_area = 0.5 * semi_perimeter * semi_perimeter\n\n    # Calculate the length of the semi-perimeter\n    semi_length = math.sqrt(semi_area)\n\n    # Calculate the difference between the semi-perimeter and the length of the trapezium\n    difference = abs(semi_length - length)\n\n    # Calculate the median length of the trapezium\n    median_length = 0.5 * (length + difference)\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = (base1 + base2) * height / 2\n    base_longer = base1 if base1 > base2 else base2\n    return 2 * area / (base_longer + height)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the length of the base of the trapezium\n    base = base1 + base2\n    \n    # Calculate the length of the half of the trapezium\n    half_base = base / 2\n    \n    # Calculate the height of the trapezium\n    trapezium_height = height\n    \n    # Calculate the length of the top of the trapezium\n    top_length = half_base - half_base * (trapezium_height / 2)\n    \n    # Calculate the length of the bottom of the trapezium\n    bottom_length = half_base - half_base * (trapezium_height / 2)\n    \n    # Calculate the length of the trapezium\n    trapezium_length = top_length + bottom_length\n    \n    # Calculate the median length of the trapezium\n    median_length = (trapezium_length + half_base) / 2\n    \n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(f\"{number} is greater than {element}.\")\n            break"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for num in arr:\n        if num > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for i in arr:\n        if i > number:\n            count += 1\n    if count > 0:\n        print(f\"{number} is greater than {count} elements in the array.\")\n    else:\n        print(f\"{number} is not greater than any element in the array.\")\n"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(\"The number is greater than\", arr[i])\n            return True\n    print(\"The number is not greater than any element of the array\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    # Initialize a boolean variable to check if the number is greater than any element in the array\n    is_greater = False\n\n    # Loop through each element in the array and check if the element is greater than the given number\n    for element in arr:\n        if element > number:\n            is_greater = True\n            break\n\n    # Return the boolean variable indicating whether the number is greater than any element in the array\n    return is_greater"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        print(\"The string matches the pattern\")\n    else:\n        print(\"The string does not match the pattern\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{1,}b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\b\\w*'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    if result:\n        print(f'The pattern \"{pattern}\" matches the text \"{text}\"')\n    else:\n        print(f'The pattern \"{pattern}\" does not match the text \"{text}\"')"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?:b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.*?b')\n    result = pattern.findall(text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    result = pattern.search(text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # finding last digit of a number using modulus operator\n    last_digit = n % 10\n    \n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of that number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n    \"\"\"\n    # return the last digit of the number as an integer\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of negative numbers in the input list.\n    \"\"\"\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers from the original list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing the negative numbers.\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list of numbers as input and returns a new list with all negative numbers.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty list to store the even characters\n    even_chars = []\n    # Iterate over each character in the input string\n    for char in str1:\n        # If the character is even (i.e. not an odd digit), add it to the list\n        if int(char) % 2 == 0:\n            even_chars.append(char)\n    # Join the list of even characters into a string\n    result = ''.join(even_chars)\n    # Return the resulting string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    for char in str1:\n        if char.isdigit():\n            odd_chars.append(char)\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    for char in str1:\n        if ord(char) % 2!= 0: # if the ascii value of the character is odd\n            odd_chars.append(char)\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_count = 0\n    result = \"\"\n    for char in str1:\n        if char.isdigit():\n            result += char\n        elif char % 2!= 0:\n            odd_count += 1\n    if odd_count > 0:\n        return result\n    else:\n        return \"No odd characters were found\""
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isdigit():\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1] == test_list[j][1] and test_list[i][0] > test_list[j][0]) or \\\n               (test_list[i][1] == test_list[j][0] and test_list[i][0] < test_list[j][1]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    bidirectional_count = 0\n\n    for i in range(len(test_list) - 1):\n        for j in range(i + 2, len(test_list) + 1):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                bidirectional_count += 1\n\n    return bidirectional_count\n"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    # Initialize a dictionary to store the count of each tuple in the list\n    count_dict = {}\n\n    # Iterate through the list and count the bidirectional tuple pairs\n    for tup in test_list:\n        count_dict[tup] = count_dict.get(tup, 0) + 1\n\n    # Count the number of bidirectional tuple pairs\n    bidirectional_count = 0\n    for count in count_dict.values():\n        bidirectional_count += count * (count - 1) // 2\n\n    return bidirectional_count\n"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j:\n                if test_list[i] == test_list[j][::-1]:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[j][0] == test_list[i][1]):\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n    \n    # Iterate through the list and add the corresponding multiple of 10 to the result variable\n    for i in L:\n        result += i * 10\n    \n    # Return the result variable\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    if len(L) == 1:\n        return L[0]\n    else:\n        return L[0] * 10 + multiple_to_single(L[1:])"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_integer = 1\n    for num in L:\n        if num % 10 == 0:  # only multiply by 10 if it's a multiple of 10\n            single_integer *= num\n        else:\n            single_integer += num\n    return single_integer"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    res = 0\n    for num in L:\n        if num % 2 == 0:\n            res = res + num\n        else:\n            res = res * num\n    return res"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result variable\n    result = 0\n\n    # Iterate over the list\n    for num in L:\n        # Check if the current number is multiple of 5\n        if num % 5 == 0:\n            # If it is, add the number to the result variable\n            result += num\n\n    # Return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Use reduce() to sum the elements in L\n    return reduce(lambda x, y: x + y, L, 0)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find the adverbs using regular expressions\n    pattern = r'\\b(of|to|in|for|again|after|against|during|before|beforehand|during|afterwards|above|below|behind|behindhand|over|through|under|across|throughout|against|behind|before|through|throughout|through|above|below|along|alongside|around|aside|at|before|behind|below|beneath|beside|between|beyond|but|by|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during|during"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define a regular expression to match adverbs\n    adverb_pattern = r'\\b([a-z]+)ing\\b'\n\n    # Find all occurrences of adverbs in the text using the pattern\n    adverbs = re.findall(adverb_pattern, text, re.IGNORECASE)\n\n    # Sort the adverbs by position in the sentence\n    sorted_adverbs = sorted(adverbs, key=lambda x: len(x))\n\n    # Return the first adverb and its position in the sentence\n    return sorted_adverbs[0], sorted_adverbs.index(sorted_adverbs[0])"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define the regular expression pattern to match adverbs\n    pattern = r\"(?<=\\w\\s)(\\w+)(\\s\\w+)?(?=\\W|$)\"\n    # Use the re.findall() function to find all the matches in the text\n    matches = re.findall(pattern, text)\n    # Print the matches\n    for i, match in enumerate(matches):\n        print(\"Adverb '{}' at position {}: {}\".format(match[0], i, match[1]))"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Define a regular expression pattern to find all adverbs\n    pattern = r'\\b\\w*[a-z]*(ly|ing|lying|ed|er|est|es|est|est)\\w*\\b'\n    \n    # Use the re.findall() method to find all adverbs in the text\n    adverbs = re.findall(pattern, text)\n    \n    # Print the adverbs and their positions in the text\n    print('Adverbs:', adverbs)\n    \n    # Use the re.finditer() method to find all occurrences of each adverb\n    for match in re.finditer(pattern, text):\n        print('Adverb:', match.group())\n        print('Position:', match.start(), '-', match.end())"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a sentence as input and returns a list of tuples containing the adverb and its position.\n    '''\n    # Define a regular expression pattern for adverbs\n    pattern = r'\\b(really|very|just|well|well?)\\b'\n\n    # Use the re.findall() function to find all matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n\n    # If no matches are found, return an empty list\n    if not matches:\n        return []\n\n    # Use the re.search() function to find the first adverb found\n    match = re.search(pattern, text)\n\n    # If no adverb is found, return an empty list\n    if not match:\n        return []\n\n    # Extract the position of the adverb using the start() method of the match object\n    position = match.start()\n\n    # Extract the adverb itself using the group() method of the match object\n    adverb = match.group()\n\n    # Return a list of tuples containing the adverb and its position\n    return [(adverb, position)]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Split the sentence into words\n    words = text.split()\n\n    # Initialize variables for the adverbs and their positions\n    adverbs = []\n    positions = []\n\n    # Loop through each word in the sentence\n    for i, word in enumerate(words):\n\n        # Check if the word is an adverb\n        match = re.search('^([a-z]+)([aeiou]+)$', word)\n\n        # If it is, add it to the list of adverbs and their positions\n        if match:\n            adverbs.append(match.group(1))\n            positions.append(i)\n\n    # Return a tuple of the adverbs and their positions\n    return (adverbs, positions)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Initialize an empty list to store the positions of adverbs\n    adverb_positions = []\n\n    # Loop through the words in the sentence\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if word.endswith('ed') or word.endswith('ing') or word.endswith('ly'):\n            # If it is, add its position to the list\n            adverb_positions.append(i)\n\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b([A-Z][a-z]+)\\b', text)\n    return adverbs\n"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regex to find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*ed\\b|\\b\\w*est\\b|\\b\\w*est\\b|\\b\\w*est\\b|\\b\\w*est\\b', text)\n\n    # Print the adverbs and their positions\n    print(\"Adverbs and their positions in the sentence:\")\n    for i, adverb in enumerate(adverbs):\n        print(f\"{i+1}. {adverb}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define pattern to match adverbs\n    pattern = r'\\b\\w*[a-z]*(?:ly|sly|seriously|incredibly|dramatically|amazingly|enormously|greatly|substantially|partially|totally|definitely|amazingly|incredibly|overwhelmingly|unbelievably|extremely|extraordinarily|utterly|incredibly)\\b\\w*'\n    # find all adverbs in the sentence using re.findall()\n    adverbs = re.findall(pattern, text)\n    # initialize an empty dictionary to store adverb positions\n    position_dict = {}\n    # iterate over all adverbs and add their positions to the dictionary\n    for index, adverb in enumerate(adverbs):\n        # count the number of times the adverb appears in the text\n        count = text.lower().count(adverb.lower())\n        # add the position of the adverb to the dictionary\n        position_dict[adverb] = index + 1\n    # sort the dictionary by position and return the first adverb and its position\n    sorted_positions = sorted(position_dict.items(), key=lambda x: x[1])\n    return sorted_positions[0][0]"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": ""
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    # calculate the surface area of the cube using the formula A = 6 * l^2\n    A = 6 * l ** 2\n    \n    # return the surface area of the cube\n    return A"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of a cube by multiplying the base length by its twice\n    surface_area = l * (2 * l)\n    \n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    pos_count = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            pos_count += 1\n    return pos_count / len(arr)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_array = array('i', [0] * len(nums))\n    negative_array = array('i', [0] * len(nums))\n    count_pos = 0\n    count_neg = 0\n    for num in nums:\n        if num > 0:\n            positive_array[count_pos] = num\n            count_pos += 1\n        else:\n            negative_array[count_neg] = num\n            count_neg += 1\n    pos_ratio = float(count_pos) / (len(nums) - count_neg)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_arr = array('i', nums)\n    pos_count = 0\n    for num in num_arr:\n        if num > 0:\n            pos_count += 1\n    return float(pos_count) / len(num_arr)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = array('i')\n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n    pos_count = len(pos_nums)\n    neg_count = len(nums) - pos_count\n    return pos_count / neg_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # initialize counters for positive and negative numbers\n    pos_count = 0\n    neg_count = 0\n    \n    # iterate over the array of numbers\n    for num in nums:\n        # if the number is positive, increment the counter\n        if num > 0:\n            pos_count += 1\n        # if the number is negative, increment the counter\n        else:\n            neg_count += 1\n    \n    # find the ratio of positive numbers to all numbers in the array\n    ratio = pos_count / (len(nums))\n    \n    # return the ratio\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # initialize count and sum of positive numbers to zero\n    count = 0\n    pos_sum = 0\n\n    # iterate through the array and calculate the count and sum of positive numbers\n    for num in nums:\n        if num > 0:\n            count += 1\n            pos_sum += num\n\n    # check if there are any positive numbers\n    if count == 0:\n        print(\"There are no positive numbers in the array.\")\n        return\n\n    # calculate the ration of positive numbers\n    ration = pos_sum / count\n\n    # print the ration of positive numbers\n    print(\"The ration of positive numbers in the array is:\", ration)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    total_count = len(nums)\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n\n    ratio = pos_count / total_count\n\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    if pos_count == 0:\n        return 0\n    else:\n        return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i') # create an integer array to store positive integers\n    \n    for num in nums:\n        if num > 0:\n            count.append(num) # append positive integers to the array\n    \n    pos_count = len(count) # get the number of positive integers in the array\n    \n    total_count = len(nums) # get the total number of integers in the array\n    \n    return pos_count / total_count"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    # Initialize a variable to store the largest negative number\n    largest
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_max = list1[0]\n    for i in list1:\n        if i < 0 and i > neg_max:\n            neg_max = i\n    return neg_max"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0:\n            if num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None \n    for num in list1: \n        if num < 0 and (largest is None or num > largest): \n            largest = num \n    return largest "
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = list1[0]\n    for num in list1:\n        if num < 0 and num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes in a list of integers and returns the largest negative number in the list.\n    '''\n    largest_num = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n\n    Parameters:\n    test_list (list): A list of tuples.\n    K (int): The number of elements to remove from each tuple.\n\n    Returns:\n    list: A list of trimmed tuples.\n    \"\"\"\n\n    trimmed_list = []\n\n    for item in test_list:\n        trimmed_item = tuple(item[:K] + (None,) * (len(item) - K))\n        trimmed_list.append(trimmed_item)\n\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Create an empty list to store trimmed tuples\n    trimmed_list = []\n    # Loop through each tuple in the list\n    for t in test_list:\n        # Trim each tuple by k elements\n        trimmed = t[:K]\n        # Append the trimmed tuple to the trimmed list\n        trimmed_list.append(trimmed)\n    # Return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        if i < K or i % K == 0:\n            trimmed_list.append(test_list[i])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        for j in range(K):\n            if j == 0:\n                trimmed_list.append(test_list[i][j])\n            else:\n                trimmed_list[-1] += test_list[i][j]\n        if j == len(test_list[i]) - K:\n            trimmed_list.pop()\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    This function trims each tuple in the given tuple list by k.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        new_tup = tup[K:]\n        if new_tup:\n            trimmed_list.append(new_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    This function takes a list of tuples and a number k as input and returns a new list of trimmed tuples.\n    The function trims each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tuple in test_list:\n        # split the tuple into two parts, where the first part is k elements long and the second part is the remaining elements\n        k_elements = tuple[:K]\n        remaining_elements = tuple[K:]\n        # append the first part of the trimmed tuple to the new list of trimmed tuples\n        trimmed_list.append(k_elements)\n        # append the second part of the trimmed tuple to the new list of trimmed tuples\n        trimmed_list.append(remaining_elements)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][j] for j in range(len(test_list[i])) if j % (K+1)!= 0)\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if K > 0:\n                test_list[i][j] = test_list[i][j][K:]\n            elif K < 0:\n                test_list[i][j] = test_list[i][j][:K]\n            else:\n                pass\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Convert the list of tuples into a list of lists, so that we can easily access individual elements of the tuples\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_list.append(list(tup))\n    # Create a new list to store the trimmed tuples\n    trimmed_tuples = []\n    # Iterate through the list of lists of tuples\n    for tup in trimmed_list:\n        # Iterate through the elements of the current tuple and append each element to the new list if the index is within the k range\n        if 0 <= len(tup) <= K:\n            trimmed_tuples.append(tup)\n        else:\n            # Otherwise, create a new tuple with only the k elements and append it to the new list\n            trimmed_tuple = tup[:K]\n            trimmed_tuples.append(trimmed_tuple)\n    # Return the new list of trimmed tuples\n    return trimmed_tuples"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Iterate over each tuple in the list\n    for i in range(len(test_list)):\n        # Split the tuple into individual elements\n        element1, element2, element3 = test_list[i]\n        # Trim each element by k\n        element1_trimmed = element1[K:] if len(element1) >= K else \"\"\n        element2_trimmed = element2[K:] if len(element2) >= K else \"\"\n        element3_trimmed = element3[K:] if len(element3) >= K else \"\"\n        # Reconstruct the tuple with trimmed elements\n        new_tuple = (element1_trimmed, element2_trimmed, element3_trimmed)\n        # Assign the trimmed tuple back to the list\n        test_list[i] = new_tuple\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length to perform index multiplication.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result_tup = result_tup + (test_tup1[i] * test_tup2[i],)\n        return result_tup\n    else:\n        print(\"Error: Both tuples must have the same number of elements.\")\n        return None"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Get the length of the tuples\n    length = len(test_tup1)\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through each index of the first tuple\n    for i in range(length):\n        # Get the current element of the first tuple at the current index\n        elem1 = test_tup1[i]\n        # Loop through each index of the second tuple\n        for j in range(length):\n            # Get the current element of the second tuple at the current index\n            elem2 = test_tup2[j]\n            # Multiply the current element of the first tuple with the current element of the second tuple\n            result.append(elem1*elem2)\n    # Return the result tuple\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have equal length\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The length of the tuples should be same.')\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert the list to a set to remove duplicates and store it in a set variable\n    set_lst = set(lst)\n\n    # Initialize a dictionary to store the count of each element in the set_lst\n    count_dict = {}\n\n    # Iterate over the elements of the tuple and count the occurrence of each element in set_lst\n    for item in tup:\n        count_dict[item] = set_lst.count(item)\n\n    # Return the dictionary with the count of each element in the tuple\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Use Counter class to count the occurrence of each element in the list\n    count_dict = Counter(lst)\n\n    # Use a dictionary to count the occurrence of each element in the tuple\n    count_dict_tup = {}\n    for i in tup:\n        count_dict_tup[i] = 0\n\n    # Iterate through the tuple and count the occurrence of each element in the list\n    for key in count_dict:\n        if key in count_dict_tup:\n            count_dict_tup[key] += count_dict[key]\n\n    # Return the count_dict_tup\n    return count_dict_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes two arguments: a tuple and a list. It uses the Counter class from the collections module to count the occurrence of each element in the list in the tuple. \n    '''\n    count = Counter(tup) \n    count_dict = {}\n    for key, value in count.items():\n        count_dict[key] = value\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    count = {}\n    for item in tup:\n        if item in counter:\n            count[item] = counter[item]\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    for elem in lst:\n        if elem in counter:\n            counter[elem] += 1\n        else:\n            counter[elem] = 1\n    return counter"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # use Counter to count the frequency of each element in the list \n    freq_dict = Counter(lst) \n    # use a loop to count the number of times each element appears in the tuple \n    count = 0 \n    for elem in tup: \n        if elem in freq_dict: \n            count += freq_dict[elem] \n    return count "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for item in lst:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert list to set to remove duplicates\n    set_lst = set(lst)\n    # Initialize Counter object to store the count of each element in the set_lst\n    count_dict = Counter(set_lst)\n    # Initialize an empty list to store the count of each element in the tuple\n    count_list = []\n    # Iterate through the tuple and get the count of each element in the set_lst using the Counter object\n    for item in tup:\n        count_list.append(count_dict[item])\n    # Return the list of count of each element in the tuple\n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup) \n    count = [] \n    for item in lst: \n        count.append(c[item]) \n    return count "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    count = {}\n    for i in tup:\n        count[i] = counter[i]\n    return count"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # create an empty list to store the cubes\n    cubes = []\n    # iterate over the elements in the input list\n    for num in nums:\n        # find the cube of the current element and append it to the cubes list\n        cubes.append(num ** 3)\n    # return the cubes list\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    This function calculates the sum of perrin numbers. \n    '''\n    sum_of_perrin = 0 \n    for i in range(1, n+1): \n        sum_of_perrin += i \n    return sum_of_perrin "
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # function to check if a number is a perrin number or not\n    def is_perrin(num):\n        if num < 0:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    # initialize the sum variable\n    sum = 0\n\n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # check if the number is a perrin number\n        if is_perrin(i):\n            # add the number to the sum\n            sum += i\n\n    # return the sum of perrin numbers\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    sum_perrin = sum(perrin_numbers[:n])\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    # Initialize the sum variable\n    sum = 0\n    \n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the perrin number\n        perrin_num = i * (i + 1)\n        \n        # Add the perrin number to the sum\n        sum += perrin_num\n        \n    # Return the sum of perrin numbers\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum = 0\n    while p <= n:\n        sum += p\n        p += 1\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i\n        i += 2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    # Initialize the sum variable\n    sum_perrin = 0\n    \n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # Calculate the Perrin number\n        perrin = (2*i*i + 1)**(1/2)\n        \n        # Add the Perrin number to the sum\n        sum_perrin += perrin\n        \n    # Return the sum\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    # loop n times\n    for i in range(1, n+1):\n        # calculate the perrin number\n        perrin_num = 1 + 1/i\n        # add the perrin number to the sum\n        sum += perrin_num\n    # return the sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts the specified size of strings from a given list of string values.\n    \"\"\"\n    extracted_str = []\n    for i in range(len(str_list)):\n        if i % size == 0:\n            extracted_str.append(str_list[i][:size])\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and the specified size of strings\n    as input and returns a list of extracted strings.\n    '''\n    extracted_strings = []\n\n    for string in str_list:\n        extracted_strings.append(string[:size])\n\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a given list of string values.\n\n    Args:\n        str_list (list): List of strings.\n        size (int): Size of strings to extract.\n\n    Returns:\n        list: List of extracted strings.\n    '''\n    extracted_str = []\n    for i in range(len(str_list)):\n        if i % size == 0:\n            extracted_str.append(\"\".join(str_list[i:i+size]))\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of string values and an integer value l which specifies the size of strings to be extracted.\n    It returns a list of strings of size l extracted from the input list.\n    '''\n    return [str_list[i] for i in range(0, len(str_list), l)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_str_list = []\n    for str in str_list:\n        if len(str) >= size:\n            extracted_str_list.append(str[:size])\n    return extracted_str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            extracted_list.append(l[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts a specified size of strings from a list of string values.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) >= size:\n            result.append(string[:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].find(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, n):\n    \"\"\"\n    This function takes a list of strings and an integer as input and returns a new list containing\n    the specified size of strings from the given list.\n    \"\"\"\n    return [str for str in str_list for i in range(n)]"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    \n    # Return the result\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove whitespaces from the string\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function takes a string as an input and returns a string with all whitespaces removed.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expression\n    pattern = re.compile(r'\\s+')\n    text2 = pattern.sub('', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Remove all whitespaces from the given string.\n    \"\"\"\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+', '', text1)\n    # Return the modified string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from a given string.\n    '''\n    text = re.sub('\\s+','', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_per_unit = (actual_cost - sale_amount) / sale_amount\n    loss = loss_per_unit * sale_amount\n    \n    if loss == 0:\n        return 0\n    else:\n        return loss"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percent = (actual_cost - sale_amount) / sale_amount * 100\n    if loss_percent > 0:\n        return loss_percent\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    if sale_amount > actual_cost: \n        return sale_amount - actual_cost \n    else: \n        return 0 \n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount: \n        loss_amount = actual_cost - sale_amount\n        return loss_amount \n    else: \n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            if i % 2 == 0: \n                sum += i \n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            sum += i\n            n //= i\n    if n > 1:\n        sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes an integer as input and returns the sum of even factors of the input number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    count = 0\n    sum = 0\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if i % 2 == 0:\n                sum += i\n\n    if n > 2:\n        count += 1\n        if n % 2 == 0:\n            sum += n\n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 2:\n        return 0\n    else:\n        sum = 0\n        i = 2\n        while i*i <= n:\n            if n % i == 0:\n                if i % 2 == 0:\n                    sum += i\n                n //= i\n            else:\n                i += 1\n        if n > 1:\n            if n % 2 == 0:\n                sum += n\n        return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenSum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            evenSum += i\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            evenFactors += i\n    return evenFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of even factors of the number.\n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n    # Find the prime factors of the input number\n    factors = [x for x in range(2, int(math.sqrt(n))+1) if n % x == 0]\n    # Iterate through the factors and find the even factors and add them to the sum\n    for factor in factors:\n        if n % factor == 0 and factor % 2 == 0:\n            sum += factor\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # initialize a variable to store the sum of even factors \n    evenSum = 0\n\n    # loop through all the factors of n \n    for i in range(2, int(math.sqrt(n))+1):\n        # if n is divisible by i, add i to evenSum \n        if n % i == 0:\n            evenSum += i\n\n    # add the last factor of n to evenSum \n    if n > 2:\n        evenSum += n\n\n    # return evenSum \n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz_pattern = r'\\b(z[a-z]*)\\b'  # regex pattern to match words containing 'z'\n    matches = re.findall(wordz_pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b(?i)(z)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    pattern = r'\\b[a-zA-Z]+\\b'\n    result = re.findall(pattern, text)\n\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\w+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]*z\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum2 in month_days.keys():\n        if month_days[monthnum2] == 31:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 > 12 or monthnum2 < 1:\n        return False\n    elif monthnum2 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return days[monthnum2 - 1]"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum in [4,6,9,11]:\n        return False\n    else:\n        print(\"Invalid month number!\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 == 2 and (year % 4 == 0 and year % 100!= 0 or year % 400 == 0):\n        return True\n    elif monthnum2 == 2 and (year % 4!= 0 or year % 100 == 0 and year % 400!= 0):\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = int(monthnum2)\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        print(monthnum2 + \" has 31 days.\")\n    else:\n        print(monthnum2 + \" does not have 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return 'Invalid month number'"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # iterate over each string in the list\n    for i in range(len(stringlist)):\n        # reverse the string using slicing and concatenation\n        stringlist[i] = stringlist[i][::-1]\n    # return the reversed list\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i, string in enumerate(stringlist):\n        stringlist[i] = string[::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    # loop through each string in the list and reverse it\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1] # reverse the string using slicing\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as an input and returns the sublist with the minimum length.\n    '''\n    # Initializing minimum length to infinity\n    min_length = float('inf')\n\n    # Initializing minimum sublist to empty list\n    min_sublist = []\n\n    # Iterating through the list\n    for i in lst:\n        # Checking if the current sublist is the minimum length\n        if len(i) < min_length:\n            min_length = len(i)\n            min_sublist = i\n\n    # Returning the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    min_sublist = lst\n    min_len = len(lst)\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    # initialize min length to the maximum value of an integer\n    min_length = float('inf')\n\n    # loop through the list of sublists and find the sublist with minimum length\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    # create a new empty list to store the sublist with minimum length\n    min_sublist = []\n\n    # loop through the list of sublists again and add the sublist with minimum length to the new list\n    for sublist in lst:\n        if len(sublist) == min_length:\n            min_sublist.append(sublist)\n\n    # return the list of sublists with minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as an argument and returns the sublist with the minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n\n    # Initialize minimum length as infinity\n    min_length = float('inf')\n\n    # Initialize minimum sublist as empty list\n    min_sublist = []\n\n    # Iterate through each sublist in the list\n    for sublist in lst:\n\n        # If the length of the sublist is less than the current minimum length, update minimum length and minimum sublist\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    # initialize minimum sublist\n    min_sublist = []\n    # iterate over the list\n    for i in range(len(lst)):\n        # check if the current sublist has a minimum length\n        if len(lst[i]) < len(min_sublist):\n            # update the minimum sublist\n            min_sublist = lst[i]\n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Find the length of the first sublist in the list\n    min_len = len(lst[0])\n    \n    # Iterate through the list of sublists\n    for sublist in lst:\n        # If the length of the sublist is less than the minimum length, update the minimum length\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    \n    # Return the sublist with the minimum length\n    return [sublist for sublist in lst if len(sublist) == min_len][0]"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n    \"\"\"\n    return re.sub(r'\\b[A-Z][a-z]*\\b', '', string, flags=re.IGNORECASE)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # create a pattern to match all uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    # find all uppercase substrings in the string\n    matches = pattern.findall(string)\n    # remove all uppercase substrings from the string\n    for match in matches:\n        string = string.replace(match, '')\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Use regex to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n\n    # Find all the uppercase substrings in the string\n    matches = pattern.findall(str1)\n\n    # Iterate through all the matches and remove them\n    for match in matches:\n        str1 = re.sub(r'\\b' + match + r'\\b', '', str1)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # remove uppercase substrings\n    str1 = re.sub(r'\\b[A-Z][a-z]*\\b', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression pattern to match uppercase letters\n    pattern = re.compile(r'[A-Z]+')\n    \n    # Use the `re.findall()` method to find all uppercase substrings in the input string\n    uppercase_substrings = re.findall(pattern, str1)\n    \n    # Remove all uppercase substrings from the input string using a loop\n    for substring in uppercase_substrings:\n        str1 = re.sub(substring, '', str1)\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    # Use the pattern to find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n    # Loop through each match and remove it from the string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # create a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]')\n    \n    # find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n    \n    # iterate through the list of matches and replace them with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n        \n    # return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = r\"(?i)[A-Z]\"\n    return re.sub(pattern, \"\", str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = r'(?i)\\b([a-z]+)\\b'\n    matches = re.findall(pattern, str1)\n    for match in matches:\n        str1 = str1.replace(match, '', 1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?i)[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n        else:\n            result.append(None)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]] * len(lst)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a new list where each sublist is replaced by its first element.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for char in str:\n        if char.isupper():\n            upper += 1\n    return upper"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(lst):\n    '''\n    Generate all possible combinations of the elements of a given list.\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        head = lst[0]\n        rest = lst[1:]\n        return [head] + combinations_list(rest)"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()\n    n = len(list1)\n    result = []\n    for i in range(n):\n        if i == 0 or list1[i]!= list1[i - 1]:\n            for j in range(i+1, n):\n                if j == i+1 or list1[j]!= list1[j - 1]:\n                    result.append([list1[i], list1[j]])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            comb.append(list1[i:j])\n    return comb"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initialize a list to store the combinations\n    combinations = []\n    # sort the input list\n    list1.sort()\n    # loop through each element in the sorted list\n    for i in range(len(list1)):\n        # initialize a list to store the remaining elements in the list\n        remaining = list1[i+1:]\n        # loop through each element in the remaining list\n        for j in range(len(remaining)):\n            # add the current element and the remaining element to the combination list\n            combination = [list1[i]] + remaining[j:]\n            # add the combination to the combinations list\n            combinations.append(combination)\n    # return the combinations list\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            k = j + i - 1\n            if k == len(list1) - 1:\n                result.append(list1[j:k+1])\n            else:\n                result.append(list1[j:k+1])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(lst):\n    result = []\n    for i in range(1, len(lst)+1):\n        for j in range(len(lst)-i+1):\n            result.append(lst[j:j+i])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n\n    for num in arr:\n        if num < 0:\n            curr_product = 1\n        else:\n            curr_product *= num\n\n        if curr_product > max_product:\n            max_product = curr_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n\n        if current_product > max_product:\n            max_product = current_product\n\n        if current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    for num in arr:\n        if num > 0:\n            max_ending_here *= num\n            min_ending_here = 1\n        else:\n            min_ending_here *= num\n            max_ending_here = max(max_ending_here, min_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    if len(arr) == 0:\n        return 0\n\n    max_product = arr[0]\n    current_product = 1\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        if current_product < 0:\n            current_product = 1\n        current_product *= num\n        if current_product > max_product:\n            max_product = current_product\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    if len(arr) == 1:\n        return arr[0], 1\n\n    max_product = arr[0]\n    current_product = arr[0]\n    max_product_ending_here = 1\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product_ending_here = max(max_product_ending_here, current_product)\n        max_product = max(max_product, max_product_ending_here)\n\n    return max_product, max_product_ending_here"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    negative_product = 1\n    \n    for i in range(len(arr)):\n        if arr[i] < 0:\n            current_product = 1\n            negative_product = 1\n        else:\n            current_product *= arr[i]\n            negative_product *= -arr[i]\n        \n        max_product = max(max_product, current_product)\n    \n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n\n        if current_product < 0:\n            current_product = 1\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    current_product = 1\n    max_ending_here = 1\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_ending_here = max(max_ending_here, current_product)\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if dict.values().count(value)!= 1:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Get the first value from the dictionary\n    value = dict.values()[0]\n\n    # Loop through the dictionary and check if all values are same\n    for i in dict.values():\n        if i!= value:\n            return False\n\n    # If all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(dict) < n:\n        return False\n\n    for key in dict:\n        if len(set(dict[key]))!= 1:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(dict) == 0:\n        return True\n    else:\n        for value in dict.values():\n            if value!= dict[list(dict.keys())[0]]:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    elif n == 1:\n        return False\n    elif dict[n-1] == dict[n]:\n        return check_value(dict, n-1)\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if dict[i]!= dict[i+1]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) < n:\n        return False\n    else:\n        return all(values[0] == value for value in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Loop through all values in the dictionary\n    for value in dict.values():\n        # If there is a value other than the first one, return False\n        if value!= dict[list(dict.keys())[0]]:\n            return False\n    # All values are the same, so return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    # Loop through each key in the dictionary\n    for key in dict1.keys():\n        # If the value is an empty string or list, remove it from the dictionary\n        if not dict1[key]:\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key in dict1:\n        if dict1[key]!= \"\":\n            new_dict[key] = dict1[key]\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    # Loop through the keys of the dictionary\n    for key in dict1:\n        # If the value is an empty string, remove the key from the dictionary\n        if dict1[key] == \"\":\n            del dict1[key]"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Initialize the maximum product and the maximum subsequence\n    max_product = float('-inf')\n    max_subsequence = [arr[0]]\n\n    # Iterate through the array and find the maximum subsequence\n    for i in range(1, n):\n        if arr[i] > max_subsequence[-1]:\n            max_subsequence.append(arr[i])\n        else:\n            while arr[i] > max_subsequence[-1] and i < n-1:\n                max_subsequence.pop()\n                i += 1\n            if max_subsequence[-1] > max_subsequence[-2]:\n                max_product = max(max_product, max_subsequence[-1]*max_subsequence[-2])\n\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in range(1, n):\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    if not arr:\n        return 0\n\n    n = len(arr)\n    max_product_so_far = arr[0]\n    max_product_ending_here = 1\n\n    for i in range(1, n):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    max_product = float('-inf')\n    current_product = 1\n    previous_product = 1\n\n    for i in range(len(arr)):\n        if i == 0:\n            current_product = 1\n            previous_product = 1\n        elif arr[i] > arr[i-1]:\n            current_product *= arr[i]\n            previous_product = current_product\n        else:\n            current_product = previous_product\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    prev_num = 0\n    \n    # Loop through the array\n    for num in arr:\n        # Update current_product and prev_num\n        if num > prev_num:\n            current_product *= num\n            prev_num = num\n        else:\n            current_product = num\n            \n        # Update max_product if current_product is greater\n        if current_product > max_product:\n            max_product = current_product\n            \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_product = arr[0]\n    current_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            current_product *= arr[i]\n        else:\n            max_product = max(max_product, current_product)\n            current_product = arr[i]\n    \n    max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            max_so_far = max(max_so_far, max_ending_here * min_ending_here)\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n            min_so_far = min(min_so_far, min_ending_here * max_ending_here)\n        else:\n            if max_ending_here > 0:\n                max_so_far = max(max_so_far, max_ending_here * max_ending_here)\n            if min_ending_here < 0:\n                min_so_far = min(min_so_far, min_ending_here * min_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    # Initialize variables\n    min_val = max_val = arr[0]\n    max_product = arr[0]\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            # If the current number is negative, swap the minimum and maximum values\n            min_val, max_val = max_val, min_val\n        # Update the minimum and maximum values\n        min_val = min(min_val, arr[i])\n        max_val = max(max_val, arr[i])\n        # Update the maximum product if the current number is greater than the minimum value\n        max_product = max(max_product, max_val * min_val)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # Initialize variables to store the maximum subsequence ending at each index\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    \n    # Iterate through the array from the second element\n    for i in range(1, len(arr)):\n        \n        # If the current element is less than the maximum ending here, update the maximum ending here\n        if arr[i] < max_ending_here:\n            max_ending_here = arr[i]\n        \n        # If the current element is greater than the maximum ending here, update both the maximum ending here and the maximum subsequence so far\n        else:\n            max_ending_here = arr[i]\n            max_so_far = max(max_so_far, arr[i])\n            \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for i in range(n):\n        if arr[i] > 0:\n            max_ending_here *= arr[i]\n            min_ending_here = 1\n        elif arr[i] < 0:\n            min_ending_here *= arr[i]\n            max_ending_here = 1\n            \n        max_product = max(max_product, max_ending_here)\n        \n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"Tuple must have at least 2 elements\"\n    elif len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        result = test_tup[0] + test_tup[1]\n        for i in range(2, len(test_tup)):\n            result += test_tup[i]\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n    Args:\n        test_tup (tuple): A tuple of integers to be processed.\n\n    Returns:\n        int: The sum of the neighboring elements of the input tuple.\n    \"\"\"\n    sum_neighboring = 0\n    for i in range(len(test_tup) - 1):\n        sum_neighboring += test_tup[i] + test_tup[i + 1]\n    return sum_neighboring"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return (test_tup[0] + test_tup[1], test_tup[1] + test_tup[2])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    # initialize sum with the first element of the tuple\n    sum = test_tup[0]\n    # loop through the tuple from the second element to the last element\n    for i in range(1, n-1):\n        # add the current element with the previous element to get the next sum\n        sum = sum + test_tup[i]\n        # update the previous sum to the current sum\n        test_tup[i] = sum\n    return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    # Loop through the tuple\n    for i in range(len(test_tup)-1):\n        # Add the current element and the next element together to get the sum of the pair\n        sum += test_tup[i] + test_tup[i+1]\n    # Return the sum of the pairwise additions\n    return sum\n"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns the pairwise sum of its neighboring elements.\n    \"\"\"\n    if len(test_tup) < 2:\n        raise ValueError(\"The input tuple should have at least two elements.\")\n    else:\n        sum_pairwise = 0\n        for i in range(len(test_tup) - 1):\n            sum_pairwise += test_tup[i] + test_tup[i+1]\n        return sum_pairwise"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = []\n    for i in range(1, n):\n        result.append(test_tup[i] + test_tup[i-1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return \"The given tuple should have at least two elements.\"\n    \n    add_sum = 0\n    for i in range(1, len(test_tup)):\n        add_sum += test_tup[i-1] + test_tup[i]\n    \n    return add_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"Invalid tuple length\"\n    else:\n        result = []\n        for i in range(1, len(test_tup)):\n            result.append(test_tup[i-1] + test_tup[i])\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and a number n as input and returns the remainder when \n    multiplying the array elements together. The array is multiplied together and the \n    product modulo n is returned.\n    '''\n\n    product = 1\n\n    # Multiplying all the elements of the array\n    for i in arr:\n        product *= i\n\n    # Returning the remainder when multiplying the array elements together\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in an array of integers and an integer n. It returns the remainder of the product of the array modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    product = 1\n    for i in range(len(arr)): \n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the result variable to 1\n    result = 1\n    \n    # Loop through each element in the array\n    for num in arr:\n        # Multiply the current element with the result\n        result *= num\n        \n        # Calculate the remainder when dividing the result by n\n        remainder = result % n\n        \n        # Add the current remainder to the result\n        result += remainder\n        \n        # If the result becomes zero after adding the current remainder, exit the loop\n        if result == 0:\n            break\n    \n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        product %= n\n    \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Find the product of the array elements modulo n\n    product = 1\n    for element in arr:\n        product = (product * element) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array and an integer n as input and returns the product of the array multiplied by n modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if it contains consecutive numbers and False otherwise.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            print(True)\n            return\n    print(False)"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as an input and returns True if the list contains consecutive numbers, False otherwise.\n    '''\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n            \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Loop through the list to check for consecutive numbers\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # Check if the list contains only one element\n    if len(l) == 1:\n        return False\n\n    # Initialize variables to keep track of the current number and the previous number\n    current = l[0]\n    prev = l[0]\n\n    # Loop through the list and check if the current number is consecutive to the previous number\n    for num in l[1:]:\n        if num!= prev + 1:\n            return False\n        current = num\n        prev = num\n\n    # If all elements in the list are consecutive, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers or False otherwise.\n    '''\n    if len(l) <= 1: \n        return False\n    \n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1: \n            return False\n            \n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two tuple lists and returns a new list containing the intersection of their tuples.\n    \"\"\"\n    intersection_set = set(test_list1).intersection(set(test_list2))\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # sort the first list to ensure consistent order of tuples\n    test_list1.sort()\n    \n    # initialize an empty list to store the common elements\n    common_elements = []\n    \n    # iterate through the first list\n    for element in test_list1:\n        # check if the element exists in the second list\n        if element in test_list2:\n            # if it does, add it to the common elements list\n            common_elements.append(element)\n    \n    # return the common elements list\n    return common_elements"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = set(test_list1) & set(test_list2)\n    return tuple(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert both lists to sets to remove duplicates\n    set_list1 = set(test_list1)\n    set_list2 = set(test_list2)\n    \n    # Find the intersection between the two sets using the intersection() method\n    intersection = set_list1.intersection(set_list2)\n    \n    # Convert the intersection back to a list\n    intersection_list = list(intersection)\n    \n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    common_elements = []\n    for item in test_list1:\n        if all(item == test_list2[i] for i in range(len(test_list2))):\n            common_elements.append(item)\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Creating a set to store unique elements of list1\n    set1 = set(test_list1)\n    # Creating an empty set to store unique elements of list2\n    set2 = set()\n    # Looping through list2\n    for i in test_list2:\n        # If the element is present in set1, append it to set2\n        if i in set1:\n            set2.add(i)\n    # Returning the set as a tuple\n    return tuple(set2)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Initialize an empty set to store the intersection of the two lists\n    intersection = set()\n\n    # Loop through each element in the first list and check if it is present in the second list\n    for element1 in test_list1:\n        if element1 in test_list2:\n            intersection.add(element1)\n\n    # Return the tuple intersection\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set from each list to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # find the intersection of the sets using set intersection\n    intersection = set1.intersection(set2)\n    # convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the lists to sets to remove duplicates\n    list1_set = set(test_list1)\n    list2_set = set(test_list2)\n    # Find the intersection of the sets\n    intersection_set = list1_set.intersection(list2_set)\n    # Convert the intersection set back to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Using set to remove duplicates from the list\n    test_list1 = list(set(test_list1))\n    test_list2 = list(set(test_list2))\n\n    # Merging the two lists\n    merged_list = test_list1 + test_list2\n\n    # Sorting the list\n    merged_list.sort()\n\n    # Initializing a new list to store the intersection\n    intersection_list = []\n\n    # Looping through the merged list\n    for i in range(len(merged_list)):\n        # Checking if the current element is present in both lists\n        if merged_list[i] in test_list1 and merged_list[i] in test_list2:\n            intersection_list.append(merged_list[i])\n\n    # Returning the intersection list\n    return intersection_list"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = str1.replace(ch,newch)\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # initialize an empty string to store the new string\n    new_str = \"\"\n    # loop through each character in the input string\n    for char in str1:\n        # check if the current character is the target character\n        if char == ch:\n            # if it is, replace it with the new character\n            new_str += newch\n        else:\n            # if it's not, append it to the new string\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Sort a dictionary by value using Counter.\n    \"\"\"\n    sorted_dict = dict(Counter(dict1).most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Sort the dictionary based on values in descending order\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    \n    # Create a new dictionary with the sorted keys and values\n    new_dict = {}\n    for key, value in sorted_dict:\n        new_dict[key] = value\n    \n    return new_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    # create a Counter object from the input dictionary\n    counter = Counter(dict1)\n    \n    # sort the Counter object by values in ascending order\n    sorted_counter = counter.most_common()\n    \n    # convert the sorted Counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sorts a dictionary by value in descending order.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = counter.most_common()\n    sorted_dict = {k: sorted_counter[i][1] for i, (k, v) in enumerate(sorted_counter)}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1.values())\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    sorted_dict = {}\n    for i in sorted_counter:\n        sorted_dict[i[0]] = i[1]\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if len(nums) < 2:\n        raise ValueError(\"Input array must have at least two elements\")\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # Calculate the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest value in the array\n    largest = nums[0]\n    smallest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        elif nums[i] < smallest:\n            smallest = nums[i]\n    \n    # Return the sum of the largest and smallest value\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # check if the array is empty or not\n    if len(nums) == 0:\n        print(\"Error: Array is empty\")\n        return\n    \n    # find the largest and smallest value in the array\n    largest = nums[0]\n    smallest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        elif nums[i] < smallest:\n            smallest = nums[i]\n    \n    # find the sum of largest and smallest value\n    sum_of_largest_smallest = largest + smallest\n    \n    # print the result\n    print(\"The sum of the largest and smallest value is:\", sum_of_largest_smallest)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of integers and returns the sum of the largest and smallest value in the array.\n    \"\"\"\n    if len(nums) == 0:\n        return None\n    \n    # Initialize the largest and smallest values to the first element of the array\n    largest = smallest = nums[0]\n    \n    # Iterate over the rest of the array\n    for num in nums[1:]:\n        # If the current number is larger than the largest value so far, update the largest value\n        if num > largest:\n            largest = num\n        # If the current number is smaller than the smallest value so far, update the smallest value\n        elif num < smallest:\n            smallest = num\n    \n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Find the smallest value in the array\n    smallest = nums[0]\n    \n    # Find the largest value in the array\n    largest = nums[0]\n    \n    # Loop through the array and update smallest and largest\n    for i in range(1, len(nums)):\n        if nums[i] < smallest:\n            smallest = nums[i]\n        elif nums[i] > largest:\n            largest = nums[i]\n    \n    # Return the sum of the smallest and largest values\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    # Calculate the sum of the largest and smallest values\n    sum_vals = max_val + min_val\n    # Return the sum of the largest and smallest values\n    return sum_vals"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        print(\"Array is empty\")\n        return None\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n\n    # Convert the string to lower case using the lower() method\n    lower_string = string.lower()\n\n    # Return the lower case string\n    return lower_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if a given string is all lowercase or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Convert the string to lower case\n    lower_string = string.lower()\n    return lower_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Convert the string to lower case using the lower() method\n    lower_string = string.lower()\n    return lower_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+', re.IGNORECASE)\n    return pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'(?i)\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Create a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+', re.IGNORECASE)\n\n    # Find all the matches of the pattern in the string\n    matches = pattern.finditer(str1)\n\n    # Loop through the matches and replace them with an empty string\n    for match in matches:\n        str1 = str1.replace(match.group(), '')\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    This function takes a string as input and returns the string with all lowercase substrings removed.\n    \"\"\"\n\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n\n    # Use the re.findall() function to find all lowercase substrings in the string\n    matches = re.findall(pattern, string)\n\n    # Loop through each match and remove it from the string\n    for match in matches:\n        string = string.replace(match, '')\n\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    # find all lowercase substrings in the string using the pattern\n    matches = re.findall(pattern, str1)\n    # remove all lowercase substrings from the string using a for loop\n    for match in matches:\n        str1 = re.sub(pattern, '', str1)\n    # return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?i)[a-z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Find all lowercase substrings in the string\n    lowercase_subs = re.findall(r'[a-z]+', str1)\n    # Remove all lowercase substrings from the string\n    for sub in lowercase_subs:\n        str1 = re.sub(r'\\b'+sub+'\\b', '', str1)\n    # Return the updated string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Regular expression to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Match all substrings that contain lowercase characters\n    substrings = pattern.findall(str1)\n    # Remove the substrings from the string\n    for substring in substrings:\n        str1 = str1.replace(substring, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Define the pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    # Use the re.sub() function to remove all matches of the pattern from str1\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # If the number is less than 10, return the number as it is.\n    if n < 10:\n        return n\n    # If the number is greater than or equal to 10, find the first digit using the modulo operator.\n    else:\n        return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0:\n        return \"0\"\n    else:\n        return str(n)[:1]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function finds the first digit of a given number.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    \n    # get the first character of the string\n    first_char = num_str[0]\n    \n    # convert the first character to an integer\n    first_digit = int(first_char)\n    \n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # use string to convert number to string\n    num_str = str(n)\n    # convert string to list of characters\n    num_list = list(num_str)\n    # access the first character of the list\n    first_digit = num_list[0]\n    # convert the first character back to integer\n    first_digit = int(first_digit)\n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first = 0\n    while n > 0:\n        first = n % 10\n        n = n // 10\n    return first"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n // 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    # Convert the first character of the string to an integer\n    first_digit = int(num_str[0])\n    # Return the first digit of the number\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return str(n)[0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # initialize an empty list to store the odd numbers\n    odd_list = []\n    # loop through each number in the list\n    for num in list:\n        # if the number is odd, add it to the odd_list\n        if num % 2!= 0:\n            odd_list.append(num)\n    # return the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns a new list containing only the odd numbers in the original list.\n    '''\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns a list of odd numbers in the input list.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    \"\"\"\n    Returns a list containing only the odd integers from the input list.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([x**3 for x in range(n+1)])\n    sum_natural_numbers = sum(range(n+1))\n    return abs(sum_cubes - sum_natural_numbers)\n\nprint(difference(10)) # Output: 210"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Calculate the sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(n+1)])\n    \n    # Calculate the sum of first n natural numbers\n    sum_natural = sum(range(n+1))\n    \n    # Find the difference between the sum of cubes and the sum of natural numbers\n    difference = sum_cubes - sum_natural\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [i**3 for i in range(1, n+1)]\n    sum_cubes = sum(cubes)\n    natural_numbers = [i for i in range(1, n+1)]\n    sum_natural_numbers = sum(natural_numbers)\n    return abs(sum_cubes - sum_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find the sum of cubes of the first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n\n    # Find the sum of the first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n\n    # Find the difference between the two sums\n    difference = sum_numbers - sum_cubes\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(n):\n        sum_cubes += i**3\n        sum_natural += i\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes = [i**3 for i in range(1, n+1)]\n    sum_cubes = sum(cubes)\n\n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # Find the difference between the two sums\n    difference = sum_cubes - sum_natural\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = n * (n + 1) * (2 * n + 1) / 6\n    # Calculate the sum of the first n natural numbers\n    sum_of_natural_numbers = n * (n + 1) * n / 6\n    # Find the difference between the sum of cubes and the sum of natural numbers\n    difference = sum_of_cubes - sum_of_natural_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # defining the function to find the sum of cubes\n    def sum_cubes(n):\n        sum_cubes = 0\n        for i in range(1, n+1):\n            sum_cubes += i**3\n        return sum_cubes\n\n    # finding the sum of cubes of the first n natural numbers\n    sum_cubes_n = sum_cubes(n)\n\n    # finding the sum of the first n natural numbers\n    sum_n = sum(range(1, n+1))\n\n    # finding the difference between the two sums\n    difference = abs(sum_cubes_n - sum_n)\n\n    # returning the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum(i**3 for i in range(1,n+1))\n    sum_natural = sum(range(1,n+1))\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_nums = 0\n    for i in range(1, n+1):\n        sum_cubes += i*i*i\n        sum_nums += i\n    difference = sum_cubes - sum_nums\n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    # Count the number of pairs whose xor value is odd\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    odd_count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                odd_count += 1\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function takes in a list of integers A and their respective length N.\n    It then returns the number of pairs whose xor value is odd.\n    '''\n    xor = 0\n    count = 0\n    for i in range(N):\n        xor = xor ^ A[i]\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = xor ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n                xor = xor ^ A[j]\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function takes an array A and its size N and counts the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        xor = 0\n        for j in range(N):\n            xor ^= A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # Check if the character is uppercase\n        if string[i].isupper():\n            # Convert the character to lowercase\n            string[i] = string[i].lower()\n        # Check if the character is lowercase\n        elif string[i].islower():\n            # Convert the character to uppercase\n            string[i] = string[i].upper()\n    return ''.join(string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([chr(ord(char) ^ 32) if char.isupper() else char for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # create an empty list to store the toggled string\n    toggled = []\n    \n    # loop through each character in the original string\n    for char in string:\n        # if the character is uppercase, lowercase it and append it to the toggled list\n        if char.isupper():\n            toggled.append(char.lower())\n        # if the character is lowercase, uppercase it and append it to the toggled list\n        else:\n            toggled.append(char.upper())\n            \n    # join the toggled list into a string and return it\n    return ''.join(toggled)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Initialize a list to store the digits of the two integers\n    n1_digits = list(str(n1))\n    n2_digits = list(str(n2))\n\n    # Initialize a variable to store the sum of the per-digit differences\n    digit_diff_sum = 0\n\n    # Loop through each digit of the two integers\n    for i in range(len(n1_digits)):\n        # Calculate the per-digit difference between the two digits\n        digit_diff = abs(int(n1_digits[i]) - int(n2_digits[i]))\n\n        # Add the per-digit difference to the sum\n        digit_diff_sum += digit_diff\n\n    # Return the sum of the per-digit differences\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize variables\n    sum_diff = 0\n    num1, num2 = abs(n1), abs(n2)\n    # loop through each digit in the numbers\n    for i in range(len(str(num1))):\n        # calculate the per-digit difference between the numbers\n        diff = num1 // 10**i - num2 // 10**i\n        # add the difference to the sum\n        sum_diff += diff\n        # divide the numbers by 10 to move to the next digit\n        num1 //= 10\n        num2 //= 10\n    # return the sum of the per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    \"\"\"\n    # Convert the integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # Find the per-digit difference between the two lists\n    per_digit_diff = [abs(d1 - d2) for d1, d2 in zip(digits1, digits2)]\n\n    # Sum up the differences\n    return sum(per_digit_diff)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    \n    # Loop through each digit of each number\n    for i in range(10):\n        n1_digit = int(str(n1)[i])\n        n2_digit = int(str(n2)[i])\n        \n        # Calculate the absolute difference between the two digits\n        diff = abs(n1_digit - n2_digit)\n        \n        # Add the absolute difference to the sum_diff\n        sum_diff += diff\n        \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(max(len(str(n1)), len(str(n2)))):\n        digit1 = int(str(n1)[-1-i]) if i < len(str(n1)) else 0\n        digit2 = int(str(n2)[-1-i]) if i < len(str(n2)) else 0\n        diff += abs(digit1 - digit2)\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(10):\n        diff += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    while n1 > 0 or n2 > 0:\n        digit_n1 = n1 % 10\n        digit_n2 = n2 % 10\n        distance += abs(digit_n1 - digit_n2)\n        n1 //= 10\n        n2 //= 10\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # get the length of the numbers\n    num1_length = len(str(n1))\n    num2_length = len(str(n2))\n    \n    # loop through each digit of the numbers\n    sum_diff = 0\n    for i in range(max(num1_length, num2_length)):\n        # extract the digit from each number\n        digit1 = int(str(n1)[i])\n        digit2 = int(str(n2)[i])\n        \n        # calculate the absolute difference between the digits\n        diff = abs(digit1 - digit2)\n        \n        # add the difference to the sum\n        sum_diff += diff\n    \n    # return the sum of the differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the integers to lists of digits\n    digit_sum = [0] * 10\n    digit_sum[0] = abs(n1)\n    digit_sum[1] = abs(n2)\n    for i in range(2, 10):\n        digit_sum[i] = abs(digit_sum[i-1] - abs(n1 % 10))\n        n1 //= 10\n        n2 //= 10\n    return digit_sum[9]"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(10):\n        diff = abs(n1 % 10 - n2 % 10)\n        sum_diff += diff\n        n1 //= 10\n        n2 //= 10\n    return sum_diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    # Iterate through the list\n    for i in range(size):\n        # Update the current sum\n        current_sum += a[i]\n        # Check if the current sum is greater than the max sum\n        if current_sum > max_sum:\n            # Update the max sum\n            max_sum = current_sum\n            # Reset the current sum to 0\n            current_sum = 0\n            # Update the start index to the current index\n            start = i\n        # Move the start index to the next element\n        if i == size-1 and current_sum > max_sum:\n            start = i\n\n    # Return the sum of the largest contiguous sublist\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(arr, n):\n    \"\"\"\n    This function takes in an array of integers and its size and returns the maximum sum of a contiguous subarray.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n\n    while end < n:\n        current_sum += arr[end]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n            start = end + 1\n        end += 1\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    if size == 1:\n        return a[0]\n    else:\n        return max(max_sub_array_sum(a, size-1), a[size-1] + max_sub_array_sum(a, size-2))"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n\n    max_sum = float('-inf')\n    current_sum = a[0]\n\n    for i in range(1, len(a)):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(current_sum + a[i], a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size-2:\n            current_sum -= a[i-size+2]\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size < 1:\n        return None\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    current_start = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_start = i - size + 1\n    \n    return a[current_start:current_start+size], max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = test_tup1 + test_tup2\n    return sorted(set(union))"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples to sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the union of the sets\n    union_set = set1.union(set2)\n    # Convert the union set back to a list\n    union_list = list(union_set)\n    # Sort the list in ascending order\n    union_list.sort()\n    # Convert the list back to a tuple\n    union_tup = tuple(union_list)\n    # Return the sorted union tuple\n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples\n    combined_tup = test_tup1 + test_tup2\n    # Convert the list to a set to remove duplicates\n    unique_elements = set(combined_tup)\n    # Convert the set back to a sorted list\n    sorted_elements = sorted(unique_elements)\n    # Output the sorted list\n    print(sorted_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Get the union of the two tuples\n    union = set(test_tup1) | set(test_tup2)\n    \n    # Convert the set to a list and sort it\n    sorted_union = sorted(list(union))\n    \n    # Output the sorted union\n    print(\"The union of the elements in the given tuples is:\", sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples into one list\n    combined_list = list(test_tup1) + list(test_tup2)\n\n    # Create a dictionary to store the count of each element in the combined list\n    element_count = {}\n\n    # Count the number of occurrences of each element in the combined list\n    for element in combined_list:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n\n    # Create a list of the elements with the maximum count\n    max_count_elements = [element for element, count in element_count.items() if count == max(element_count.values())]\n\n    # Sort the list of elements in ascending order\n    sorted_elements = sorted(max_count_elements)\n\n    # Output the sorted list of elements\n    for element in sorted_elements:\n        print(element)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # concatenate the two tuples\n    combined_tup = test_tup1 + test_tup2\n    # remove duplicates using set()\n    unique_tup = list(set(combined_tup))\n    # sort the unique elements in ascending order\n    sorted_tup = sorted(unique_tup)\n    # output the sorted elements\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples into a single tuple\n    union_tuple = test_tup1 + test_tup2\n    \n    # Convert the union tuple into a list and sort it in ascending order\n    union_list = sorted(list(union_tuple))\n    \n    # Output the union list\n    print(\"Union of the elements of two given tuples:\", union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create an empty set to hold the unique elements of both tuples\n    unique_set = set()\n    # Add the elements of the first tuple to the set\n    for element in test_tup1:\n        unique_set.add(element)\n    # Add the elements of the second tuple to the set\n    for element in test_tup2:\n        unique_set.add(element)\n    # Convert the set to a list to sort it\n    sorted_list = sorted(list(unique_set))\n    # Output the sorted list of unique elements\n    print(\"Union of elements in the two tuples:\", sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set()\n    union_set.update(test_tup1)\n    union_set.update(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Use set() to convert tuples to sets\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n\n    # Find the union of the two sets\n    union = tup1.union(tup2)\n\n    # Convert the union set back to a list and sort it\n    union_list = sorted(list(union))\n\n    # Output the sorted union list\n    print(union_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        if lst[i]!= lst[i-1]:\n            max_length = max(max_length, 1+Find_Max_Length(lst[:i] + lst[i+1:]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            max_len = max(max_len, len(lst[i:j]))\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list as input and returns the length of the longest sublist.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            max_len = max(max_len, j-i)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if i!= j:\n                max_length = max(max_length, len(lst[i:j+1]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 0\n    current = 0\n    for i in range(len(lst)):\n        current += 1\n        while current > longest and i < len(lst)-1:\n            current -= 1\n            i += 1\n        if current > longest:\n            longest = current\n    return longest"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize variables\n    max_len = 0\n    sub_len = 0\n\n    # Iterate through the list\n    for i in range(len(lst)):\n\n        # Check if the current element is greater than the previous element\n        if lst[i] > lst[i-1]:\n            sub_len += 1\n            # If the sublist length is greater than the current max length, update max_len\n            if sub_len > max_len:\n                max_len = sub_len\n            # Reset the sublist length\n            sub_len = 1\n        # If the current element is less than or equal to the previous element, reset the sublist length\n        else:\n            sub_len = 0\n\n    # Return the maximum length of sublists\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)+1):  \n            if max_length < len(lst[i:j]):  \n                max_length = len(lst[i:j])  \n    return max_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes in a list lst and returns the length of the longest sublist in lst.\n    '''\n    # initialize max_length and current_length to 1\n    max_length = 1\n    current_length = 1\n    # loop through the list\n    for i in range(1, len(lst)):\n        # check if the next element is different from the previous one\n        if lst[i]!= lst[i-1]:\n            # if it is different, update max_length and current_length\n            max_length = max(max_length, current_length)\n            # reset current_length to 1\n            current_length = 1\n        # increment current_length for the current element\n        current_length += 1\n    # add the final length to max_length\n    max_length = max(max_length, current_length)\n    # return max_length\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<!\\\\)\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    values = [match.strip('\"') for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")\\w+(?:(?<=\\s|,)\\s\\w+)*(?=\")'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n\n    # use regular expression to extract values between quotation marks\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n\n    # return the list of extracted values\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\".*?\"'\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        value = match.strip('\"')\n        values.append(value)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # define a regular expression pattern to match values between quotation marks\n    pattern = r'(?<=\\s)(?:\\'[^\\']+\\')|(?<=\\s)(\"(?:\\\\.|[^\"])*\")'\n    # use the re.findall() function to extract all the values between quotation marks\n    values = re.findall(pattern, text)\n    # return a list of all the values extracted\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    # Define a regular expression pattern to match values between quotation marks\n    pattern = r'(?<=\")[\\w\\s]+?(?=\")'\n    # Use the pattern to find all values between quotation marks in the text\n    matches = re.findall(pattern, text)\n    # Return a list of extracted values\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0 \n    for i in range(n-1): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1 \n    return count "
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Traverse through the array\n    for i in range(n-1):\n        # Traverse through the remaining elements of the array\n        for j in range(i+1, n):\n            # If elements are unequal, add count to the total count\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    result = []\n    for char in word:\n        result.append(char)\n    return result"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of its characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    This function splits a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    This function takes a word as input and returns a list of characters in the word.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    This function splits a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(d) for d in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    digits_sum = 0\n    while n > 0:\n        digits_sum += n % 10\n        n //= 10\n    return digits_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and iterate over its characters\n    total = 0\n    for digit in str(n):\n        # Convert the character to an integer and add it to the total\n        total += int(digit)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    \n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] < list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    if list1[0] > list1[1]:\n        return False\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(lst):\n    '''\n    This function will take a list as input and check whether it is sorted or not.\n    '''\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if the list is empty\n    if len(list1) < 2:\n        return True\n\n    # Check if the list is sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Iterate through each sublist of list1\n    for sublist in list1:\n        # Sort the sublist using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    # Loop through each sublist in the list of lists\n    for sublist in list1:\n        # Sort the sublist using the sorted() function and a custom key\n        sublist.sort(key=lambda x: x.lower())"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sorted_sublist = sorted(sublist)\n        list1.remove(sublist)\n        list1.insert(0, sorted_sublist)"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function removes duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # convert the lists to sets to remove duplicates\n    sets = [set(num) for num in nums]\n    # convert the sets back to lists and join them into a single list\n    result = [list(num) for num in sets]\n    # remove any duplicate elements in the resulting list\n    result = list(set(result))\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Args:\n        nums (list): A list of lists of numbers.\n\n    Returns:\n        list: A list of unique numbers from all input lists.\n    \"\"\"\n\n    # Create an empty set to store the unique numbers from the first list\n    unique_nums = set(nums[0])\n\n    # Loop through all the remaining lists and add their unique numbers to the set\n    for num_list in nums[1:]:\n        unique_nums |= set(num_list)\n\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty dictionary to store unique numbers\n    unique_nums = {}\n    \n    # Loop through each list in the given list of lists\n    for lst in nums:\n        # Loop through each number in the current list\n        for num in lst:\n            # Check if the number is already in the dictionary\n            if num in unique_nums:\n                # If the number is already in the dictionary, remove it from the list\n                lst.remove(num)\n            else:\n                # If the number is not already in the dictionary, add it to the dictionary\n                unique_nums[num] = True\n    \n    # Return the number of unique numbers found in the original list\n    return len(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    unique_list = []\n    for i in nums:\n        for j in i:\n            if j not in unique_list:\n                unique_list.append(j)\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # convert all lists to sets to remove duplicates\n    nums = set([int(x) for lst in nums for x in lst])\n    return list(nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(*args):\n    \"\"\"\n    Remove duplicate numbers from multiple lists\n    \"\"\"\n    unique_nums = []\n    for num_list in args:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_numbers = set(list_data)  # create a set of unique numbers from the given list\n    product = 1  # initialize the product variable to 1\n\n    # calculate the product of the unique numbers and return the result\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # create a set of unique numbers from the list\n    unique_numbers = set(list_data)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data) # Convert the list to a set to get unique numbers\n    product = 1 # Initialize the product as 1\n    \n    for number in unique_numbers: # Loop through each unique number in the set\n        product *= number # Multiply the product by the unique number\n    \n    return product # Return the final product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_nums = list(set(list_data))  # Convert the list to a set to remove duplicates\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    \n    product = 1\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data)) # create a set from the list and get the unique elements as a list\n    product = 1 # initialize the product to 1\n    \n    for num in unique_list:\n        product *= num\n    \n    return product # return the product of the unique numbers"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n\n    return 1 if len(unique_numbers) == 0 else reduce(lambda x, y: x * y, unique_numbers)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    area = math.pi * r ** 2  # surface area of a circle\n    perimeter = 2 * math.pi * r  # perimeter of a circle\n    volume = area * h  # volume of a cylinder\n    surface_area = 2 * (area + perimeter)  # surface area of a cylinder\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * r\n    volume = 3.14 * r * r * h / 3\n    surface_area = area + 2 * 3.14 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n\n    Parameters:\n        r: radius of the cylinder\n        h: height of the cylinder\n\n    Returns:\n        surface area of the cylinder (float)\n    \"\"\"\n    surface_area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h + 2 * 3.14 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * r + 2 * math.pi * h * r + 2 * math.pi * r * h\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of a cylinder using the formula:\n    # A = 2*pi*r*h\n    surface_area = 2*math.pi*r*h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n\n    # calculate the surface area of the cylinder\n    area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r**2 + 2*3.14*r*h + 3.14*r**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    print(\"The surface area of the cylinder is:\", area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14159*(r**2) + 2*3.14159*(h/2)**2\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function calculates the surface area of a cylinder using the formula:\n    surface_area = 2 * pi * r * h\n    \n    :param r: radius of the cylinder\n    :type r: float\n    :param h: height of the cylinder\n    :type h: float\n    :return: surface area of the cylinder\n    :rtype: float\n    \"\"\"\n    import math\n    \n    surface_area = 2 * math.pi * r * h\n    \n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # check if B is in A\n    if not A:\n        return False\n\n    i = 0\n    j = 0\n\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j = i + 1\n\n    return j == len(B)\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if not A:\n        return True\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == B:\n        return True\n    elif len(B) > len(A):\n        return False\n    else:\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False\n    \n    i, j = 0, 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n            \n    if j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if the length of the sublist is greater than or equal to the length of the main list\n    if len(B) >= len(A):\n        # Check if all the elements of the sublist are present in the main list\n        for i in range(len(B)-len(A)+1):\n            if B[i:i+len(A)] == A:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if the list B is a sublist of A\n    if all(elem in A for elem in B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists A and B as input and returns a boolean value True if B is a sublist of A or False otherwise.\n    '''\n    # To check whether A is a sublist of B or not, we need to traverse the list A and check if every element in B is present in A.\n    # We can do this by iterating over the list A and checking if every element in B is present in the current index of A.\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    # If we reach this point, then B is a sublist of A.\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not B:\n        return True\n    if not A or A[0]!= B[0]:\n        return False\n    return is_Sub_Array(A[1:], B[1:])"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if the length of A is less than or equal to the length of B\n    if len(A) <= len(B):\n        # check if B is present in A\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        result = 0\n        while n > 0:\n            remainder = n % 10\n            result = result * (10-remainder) + remainder\n            n //= 10\n        return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Find the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    # Extract the last digit of the factorial\n    last_digit = factorial % 10\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # extract the last digit from the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # Find the factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes a positive integer 'n' as input and returns the last digit of its factorial.\n    '''\n\n    # Initialize a variable to store the factorial\n    factorial = 1\n\n    # Iterate from 1 to n and multiply each number by its factorial\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Get the last digit of the factorial\n    last_digit = factorial % 10\n\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    # find the factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # find the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit in its factorial.\n    '''\n    # Initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    \n    # Convert the input number to a string\n    num_str = str(n)\n    \n    # Iterate through each digit in the string and calculate its factorial\n    for digit in num_str:\n        # Convert the current digit to an integer\n        digit_int = int(digit)\n        \n        # Calculate the factorial of the current digit\n        factorial = 1\n        for i in range(1, digit_int + 1):\n            factorial *= i\n        \n        # Append the last digit of the factorial to the variable\n        last_digit = factorial % 10\n    \n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n\n    # convert the integer to a string\n    num = str(n)\n\n    # calculate the factorial\n    factorial = 1\n    for i in range(1, len(num) + 1):\n        factorial *= int(num[-i])\n\n    # find the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n    \n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    index1 = 0\n    index2 = 0\n    index3 = 0\n    while index1 < len(list1) and index2 < len(list2) and index3 < len(list3):\n        if list1[index1] <= list2[index2]:\n            if list3[index3] <= list1[index1]:\n                result.append(list1[index1])\n                index1 += 1\n                index3 += 1\n            elif list3[index3] <= list2[index2]:\n                result.append(list2[index2])\n                index2 += 1\n                index3 += 1\n            else:\n                result.append(list3[index3])\n                index1 += 1\n                index2 += 1\n        else:\n            if list3[index3] <= list2[index2]:\n                result.append(list2[index2])\n                index2 += 1\n                index3 += 1\n            elif list3[index3] <= list1[index1]:\n                result.append(list1[index1])\n                index1 += 1\n                index3 += 1\n            else:\n                result.append(list3[index3])\n                index1 += 1\n                index2 += 1\n    return result + list1[index1:] + list2[index2:] + list3[index3:]"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError('All lists must have the same length.')\n    \n    # Initialize a new empty list to store the interleaved list\n    interleaved_list = []\n    \n    # Iterate over each element in the first list\n    for i in range(len(list1)):\n        # Add the first element of the first list to the interleaved list\n        interleaved_list.append(list1[i])\n        # Add the second element of the second list to the interleaved list\n        interleaved_list.append(list2[i])\n        # Add the third element of the third list to the interleaved list\n        interleaved_list.append(list3[i])\n        \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Create an empty list to store the final interleaved list\n    interleaved_list = []\n    # Loop through each list in turn\n    for i in range(len(list1)):\n        # Append the corresponding element from each list to the interleaved list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # Return the final interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if i == len(list1) or j == len(list2) or k == len(list3):\n            break\n        if list1[i] <= list2[j] and list1[i] <= list3[k]:\n            interleaved_list.append(list1[i])\n            i += 1\n        elif list2[j] <= list1[i] and list2[j] <= list3[k]:\n            interleaved_list.append(list2[j])\n            j += 1\n        else:\n            interleaved_list.append(list3[k])\n            k += 1\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Find the length of the shortest list\n    n = len(list1)\n    if len(list2) < n:\n        n = len(list2)\n    if len(list3) < n:\n        n = len(list3)\n    \n    # Initialize the result list with zeros\n    result = [0] * n\n    \n    # Interleave the lists\n    i = 0\n    for j in range(n):\n        if i < len(list1):\n            result[j] = list1[i]\n            i += 1\n        elif j < len(list2):\n            result[j] = list2[j]\n        else:\n            result[j] = list3[i-n]\n            i += 1\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1)!= len(list2)!= len(list3):\n        return None\n    # Flatten the lists\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n\n    # Iterate through each list and add its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Loop through each element in the first tuple and check if it is present in the second tuple\n    for item1 in test_tup1:\n        if item1 not in test_tup2:\n            dissimilar_list.append(item1)\n\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set(test_tup1).symmetric_difference(set(test_tup2))\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # loop through the elements of the first tuple\n    for elem1 in test_tup1:\n        # loop through the elements of the second tuple\n        for elem2 in test_tup2:\n            # check if the two elements are not equal\n            if elem1!= elem2:\n                # if they are, add them to the dissimilar list\n                dissimilar_list.append(elem1)\n                dissimilar_list.append(elem2)\n    # return the dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n            \n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Find the set of elements in both tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the elements that are present only in set1 or only in set2\n    dissimilar_set = set1.symmetric_difference(set2)\n\n    # Return the dissimilar elements as a list\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [even_fnc(x) for x in test_tuple if type(x) == tuple]\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    # create a new empty tuple to store even elements\n    even_tuple = ()\n    \n    # iterate through the elements of the input tuple\n    for element in test_tuple:\n        # if the element is an iterable, recursively call the function with the element as argument\n        if isinstance(element, tuple):\n            even_tuple += even_ele(element, even_fnc)\n        # if the element is not iterable, apply the given even_fnc to it and add it to the new even_tuple\n        else:\n            even_tuple += even_fnc(element)\n    \n    return even_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [even_fnc(x) for x in test_tuple if even_fnc(x)]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    # iterate over all elements of the tuple\n    for i in range(len(test_tuple)):\n        # if the element is a tuple, recursively call the function on it\n        if isinstance(test_tuple[i], tuple):\n            even_ele(test_tuple[i], even_fnc)\n        # if the element is an odd number and should be removed, remove it\n        elif test_tuple[i] % 2!= 0 and even_fnc(test_tuple[i]):\n            test_tuple[i] = None\n    # return the modified tuple\n    return [x for x in test_tuple if x is not None]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_list.extend(even_ele(i, even_fnc))\n        else:\n            even_list.append(even_fnc(i))\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def remove_uneven(t):\n        '''\n        Helper function to remove uneven elements from the nested mixed tuple.\n        '''\n        result = []\n        for elem in t:\n            if isinstance(elem, tuple):\n                result.extend(remove_uneven(elem))\n            elif even_fnc(elem):\n                result.append(elem)\n        return result\n    \n    return remove_uneven(test_tuple)\n\ndef is_even(num):\n    '''\n    Helper function to check if a number is even or odd.\n    '''\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_list.extend(even_fnc(i))\n        else:\n            even_list.append(even_fnc(i))\n    return tuple(even_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [even_fnc(i) for i in test_tuple if even_fnc(i)]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, (tuple, list)):\n            new_tuple.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, (list, tuple)):\n            even_list.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_list.append(item)\n    return even_list"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = s * (2*b + s)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #Calculate the surface area using Heron's formula\n    area = 0.5 * b * s * (b+s)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Find the perimeter and area of the square\n    perimeter = 4 * b\n    area = b * s\n    \n    # Calculate the surface area of the pyramid\n    surface_area = area + (perimeter * s)/2\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 6*s*b + 2*b*b"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(base, height):\n    return 2 * base * height + 2 * height * height"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s**2 + (b**2 + b*s**2)**2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s):\n    '''\n    This function takes two arguments: the base edge and height of the square pyramid. It returns the surface area of the pyramid.\n    '''\n    \n    area = (b*s) + (b*s)\n    print(\"The surface area of the pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Formula for surface area of a square pyramid\n    surface_area = (b*s)/2\n    print(\"The surface area of the square pyramid is:\", surface_area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of the base\n    base_area = b * b\n    \n    # calculate the area of the height\n    height_area = s * s\n    \n    # calculate the total surface area\n    total_area = 2 * base_area + 6 * height_area\n    \n    # return the total surface area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s + 6*b*b + 2*b*s - (2*b*b*b) - s*s"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('The dictionary is empty.')\n    else:\n        print('The dictionary is not empty.')"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return \"The dictionary is empty!\"\n    else:\n        return \"The dictionary is not empty.\""
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num - 1\n    result = 1\n    \n    for i in range(2, n+1):\n        result *= (4*i-1)/(i*i)\n    \n    return result\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n - 1) * catalan_number(n - 1) + catalan_number(n - 2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    >>> catalan_number(5)\n    120\n    >>> catalan_number(10)\n    355\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return factorial(2 * n) // (factorial(n + 1) * factorial(n))\n\n\ndef factorial(n):\n    \"\"\"\n    Returns the factorial of n.\n\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3,628,800\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        catalan_numbers = [0] * (n + 1)\n        catalan_numbers[0] = 1\n        catalan_numbers[1] = 1\n        for i in range(2, n + 1):\n            for j in range(i):\n                catalan_numbers[i] += catalan_numbers[j] * catalan_numbers[i - j - 1]\n        return catalan_numbers[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return n * catalan_number(n - 1) // (n + 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize matrix to store catalan numbers\n    c = [[1] * (num+1) for i in range(num+1)]\n    \n    # Fill matrix row by row\n    for i in range(1, num+1):\n        for j in range(i+1):\n            c[i][j] = (c[i-1][j] + c[i-1][j-1]) * (4*i-j) / (j+1)\n    \n    return c[num][0]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth catalan number.\n\n    The nth Catalan number is a number that is equal to the sum of the binomial coefficients (nCr) for all positive integers n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return catalan_number(n/2) * 2\n    else:\n        return catalan_number(n/2) + catalan_number((n+1)/2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth catalan number using the formula:\n    C(n, k) = (2k+1)!/(k!(n-k)!)\n\n    where k = 0, 1,..., n.\n\n    The function takes an integer argument n and returns an integer.\n    '''\n    catalan = 1\n    for i in range(n+1):\n        catalan *= 2*i+1\n    for i in range(1, n+1):\n        catalan /= i\n    for i in range(n+1):\n        catalan *= i\n    return int(catalan)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b\\w+ly\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n\n    # Use the re.finditer() method to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store the adverb positions\n    positions = []\n\n    # Loop through each match and append its position to the positions list\n    for match in matches:\n        positions.append(match.start())\n\n    # Return a list of tuples containing the adverb and its position in the text\n    return [(match.group(), position) for position, match in zip(positions, matches)]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(\\w+(?:ing)?)\\s*(ly)\\b'\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    return [(match.group(1), match.start(), match.end()) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b[a-z]+ly\\b', text, re.IGNORECASE)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b[A-Z][a-z]*ly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match the adverb ending with ly\n    pattern = r'\\b[a-z]*ly\\b'\n\n    # Use the re.finditer() function to find all occurrences of the pattern in the input text\n    match_object = re.finditer(pattern, text)\n\n    # Iterate over the match object and extract the position and the matched text of the adverb\n    for match in match_object:\n        position = match.start()\n        adverb = match.group()\n        print(\"Adverb found at position: \", position, \"and text: \", adverb)\n\n    # Return the number of occurrences of the adverb found in the input text\n    return len(match_object)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples containing the adverb ending with ly and its positions in the string.\n    '''\n    # Define the regular expression pattern to match the adverb ending with ly\n    pattern = re.compile(r'\\bly\\b', re.IGNORECASE)\n    \n    # Find all the matches of the pattern in the text\n    matches = pattern.finditer(text)\n    \n    # Create a list to store the adverb ending with ly and its positions\n    adverbs = []\n    \n    # Iterate through all the matches and add them to the list of adverbs\n    for match in matches:\n        start_index = match.start()\n        end_index = match.end()\n        \n        # Add the adverb ending with ly and its positions to the list\n        adverbs.append((text[start_index:end_index], (start_index, end_index)))\n    \n    # Return the list of adverbs\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples containing the adverb ending with \"ly\" and its starting and ending positions in the string.\n    '''\n    # Find all adverbs that end with \"ly\" and return their starting and ending positions\n    positions = re.findall(r'\\b\\w*[aeiou]\\w*ly\\b', text, re.IGNORECASE)\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r\"\\b([a-z]+)ly\\b\"\n\n    # Use re.findall() to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Return a list of tuples, where each tuple contains the adverb ending with \"ly\" and its position in the text\n    return [(match, text.index(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b[a-z]+ly\\b'\n    \n    # Use the re.findall() method to find all the occurrences of the pattern in the text\n    adverbs = re.findall(pattern, text)\n    \n    # Create a list to store the positions of the adverbs\n    positions = []\n    \n    # Iterate over all the adverbs found and append their positions to the list\n    for i, adverb in enumerate(adverbs):\n        positions.append(text.index(adverb))\n    \n    # Sort the list in ascending order\n    positions.sort()\n    \n    # Return the adverbs and their positions\n    return adverbs, positions"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input\n    and returns a list of the n most expensive items in the dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n    for i in range(n):\n        min_heapq.heappush(min_heap, items[i])\n    \n    # Iterate over the remaining items and update the min heap\n    for item in items[n:]:\n        if item < min_heap[0]:\n            min_heapq.heappop(min_heap)\n            min_heapq.heappush(min_heap, item)\n    \n    # Return the n most expensive items in the dataset\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Returns the n most expensive items in a given dataset, according to the\n    price of the items.\n\n    Args:\n    - items: a list of tuples (item_name, price)\n    - n: the number of most expensive items to return\n\n    Returns:\n    - a list of the n most expensive items in the dataset, sorted by price\n    \"\"\"\n    # Use a min heap to keep track of the n most expensive items\n    heap = []\n    for item, price in items:\n        heapq.heappush(heap, (-price, item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Extract and return the n most expensive items from the min heap\n    return [item for _, item in heapq.nsmallest(n, heap)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap to store the n most expensive items\n    min_heap = []\n    # initialize a variable to store the total value of all items\n    total_value = 0\n    # loop through each item in the dataset\n    for item in items:\n        # calculate the value of the item and add it to the total value\n        value = item[0]\n        total_value += value\n        # if the size of the heap is less than n, add the item to the heap\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, (value, item[1]))\n        # if the size of the heap is greater than or equal to n,\n        # compare the value of the current item with the value of the smallest item in the heap\n        else:\n            if value < min_heap[0][0]:\n                # remove the smallest item from the heap\n                heapq.heappop(min_heap)\n                # add the current item to the heap\n                heapq.heappush(min_heap, (value, item[1]))\n    # loop through the min heap to find and return the n most expensive items\n    result = []\n    for _ in range(n):\n        # get the item with the smallest value from the heap\n        item = heapq.heappop(min_heap)\n        # append the item to the result list\n        result.append(item[1])\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # sort the items in descending order of price\n    items.sort(key=lambda x: x[1], reverse=True)\n    \n    # return the top n items\n    return items[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a max heap to keep track of the n most expensive items\n    max_heap = []\n    for item in items:\n        # If the heap is full, remove the smallest item\n        if len(max_heap) == n:\n            heapq.heappop(max_heap)\n        # Add the item to the heap\n        heapq.heappush(max_heap, item)\n    # Return the n most expensive items\n    return max_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min-heap to store the n most expensive items\n    min_heap = []\n    for item in items:\n        # Add the item to the min-heap if it's the first one, or if its price is lower than the price of the last item in the heap\n        if len(min_heap) < n or item[1] < min_heap[0][1]:\n            heapq.heappush(min_heap, item)\n        # If the min-heap is full and we add a new item, pop the last item from the heap\n        elif len(min_heap) == n and item[1] > min_heap[0][1]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, item)\n    \n    # Return the n most expensive items in the min-heap\n    return [item[0] for item in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap with a maximum-priority queue\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, (-item, item))\n    \n    # Extract the n most expensive items and return them as a list\n    return [heapq.heappop(min_heap)[1] for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a heap of n items and add each item to the heap\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        # If the heap is full, remove the cheapest item from the heap\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the heap, which contains the n most expensive items\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if n is a valid index of the list\n    if n >= len(l):\n        return None\n    \n    # split the list at the nth element\n    mid = len(l) // 2\n    l1 = l[:n]\n    l2 = l[n:]\n    \n    # concatenate the first part of the list with the second part\n    l1 = l1 + l2\n    \n    # return the resulting list\n    return l1"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n < 0 or n >= len(l):\n        return []\n    else:\n        return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the list is empty or not\n    if len(l) == 0:\n        return []\n    \n    # find the index of the nth element\n    for i in range(len(l)):\n        if i == n-1:\n            # add the first part of the list to the end\n            return l[:i] + [l[n-1]] + l[i+1:]\n    \n    # if the nth element is not found, return an empty list\n    return []"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # create an empty list to hold the first part of the list\n    first_part = []\n    # loop through the list from 0 to n-1\n    for i in range(n):\n        # add the elements of the list to the first_part list\n        first_part.extend(l[i])\n    # concatenate the first_part list with the last part of the list\n    last_part = l[n:]\n    # concatenate the two lists and return the result\n    return first_part + last_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return \"Error: list should have at least {} elements\".format(n)\n    else:\n        part1 = l[:n]\n        part2 = l[n:]\n        return part2 + part1"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if n is a valid index of the list\n    if n < 0 or n >= len(l):\n        return \"Invalid index\"\n\n    # Split the list at the nth element and add the first part to the end\n    l_split = l[:n]\n    l_split.extend(l[n:])\n    return l_split"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Error: n is greater than the length of the list\")\n    else:\n        first = l[:n]\n        rest = l[n:]\n        l.extend(first)\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return [l[0]] + l[1:]\n    elif n == len(l):\n        return l\n    elif n < 0:\n        return l[n:] + split_Arr(l, len(l) + n)\n    else:\n        return split_Arr(l[:n] + [l[n]] + l[n+1:], n)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Invalid input\"\n    else:\n        part1 = l[:n]\n        part2 = l[n:]\n        return [part1, part2]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # split the list at the nth element\n    mid = len(l) // 2\n    left_half = l[:mid]\n    right_half = l[mid:]\n    \n    # add the first part of the list to the end of the right half\n    new_list = right_half + left_half\n    \n    # join the new list into a string and return it\n    return \" \".join(map(str, new_list))"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    :param lst: list to be converted\n    :type lst: list\n    :return: tuple of the same elements as the list\n    :rtype: tuple\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n\n    # Get the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Return the difference between max and min\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    if len(nums) == 0:\n        return \"Empty list.\"\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            elif num < smallest:\n                smallest = num\n        return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        return abs(max(nums) - min(nums))"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest numbers in the list.\n    '''\n\n    # Initialize two variables to store the largest and smallest values in the list\n    max_val = float('-inf')\n    min_val = float('inf')\n\n    # Iterate through the list and update the max and min values\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n\n    # Return the difference between the largest and smallest values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the maximum value in the list\n    max_val = max(nums)\n    \n    # Find the minimum value in the list\n    min_val = min(nums)\n    \n    # Return the difference between the maximum and minimum values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        min_num = min(nums)\n        max_num = max(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize variables for largest and smallest values\n    max_num = float('-inf')\n    min_num = float('inf')\n    \n    # Loop through the list and update max and min values\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    \n    # Return the difference between the two values\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        print(\"The list should have at least two elements.\")\n        return\n    \n    smallest = min(nums)\n    largest = max(nums)\n    \n    diff = largest - smallest\n    \n    return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            print(i**2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Find the number of perfect squares between a and b\n    num_squares = 0\n    num = a\n    while num <= b:\n        num_squares += 1\n        num *= 2\n    \n    return num_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        for j in range(i, b+1):\n            if i**2 == j**2:\n                perfect_squares.append((i, j))\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through all numbers between a and b\n    for num in range(a, b+1):\n        # check if the square of the current number is equal to the current number\n        if num == num**2:\n            # if it is, return the current number\n            return num"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i**2\n        print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i*i == a or i*i == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    \n    squares = []\n    i = a\n    while i <= b:\n        squares.append(i*i)\n        i += 1\n    \n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        if num**2 == num:\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(int(a), int(b)+1):\n        square = int(i**0.5)\n        if i == square**2:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        square = i * i\n        if square == i ** 2:\n            squares.append(i)\n        elif square == (i+1) ** 2:\n            squares.append(i+1)\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    # Convert the polar coordinates to rectangular coordinates using the formulas\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    This function converts polar coordinates to rectangular coordinates.\n    \n    r: The radius of the circle.\n    theta: The angle in radians.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    \n    # convert polar coordinates to rectangular coordinates\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    \n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(rho,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    if rho == 0:\n        x = 0\n        y = 0\n    else:\n        x = rho * cmath.cos(theta)\n        y = rho * cmath.sin(theta)\n\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    :param r: radius of the point\n    :type r: float\n    :param theta: angle of the point with respect to the x-axis\n    :type theta: float\n\n    :return: tuple of x and y coordinates of the point\n    :rtype: tuple\n    \"\"\"\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    x (float): the radius of the point in the x-direction\n    y (float): the radius of the point in the y-direction\n\n    Returns:\n    tuple: the (x, y) coordinates of the point in rectangular coordinates\n    \"\"\"\n    rho = cmath.sqrt(x**2 + y**2) # calculate the distance from the origin\n    theta = cmath.phase(x + y*1j) # calculate the angle from the positive x-axis\n    phi = cmath.phase(x + y*1j/rho) # calculate the angle from the positive x-axis at the point of intersection\n    x = rho*cmath.cos(theta)*cmath.cos(phi)\n    y = rho*cmath.cos(theta)*cmath.sin(phi)\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to Cartesian coordinates\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return (r*cmath.cos(theta), r*cmath.sin(theta))"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    rect_x = r*cmath.cos(theta)\n    rect_y = r*cmath.sin(theta)\n    return rect_x, rect_y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the length of the list is less than 2\n    if len(newList) < 2:\n        return newList\n    \n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Check if the input list is a list\n    if type(newList)!= list:\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        raise ValueError(\"List must have at least two elements\")\n    \n    # Interchange the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Swap the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list is empty or not\n    if len(newList) == 0:\n        return \"List is empty\"\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"List must have at least two elements\")\n        return\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    if len(newList) == 0:\n        print(\"The list is empty\")\n    elif len(newList) == 1:\n        print(\"The list contains only one element\")\n    elif len(newList) == 2:\n        # If the list contains only two elements, swap them\n        temp = newList[0]\n        newList[0] = newList[1]\n        newList[1] = temp\n        print(\"The swapped list is:\", newList)\n    else:\n        # If the list contains more than two elements, recursively swap the first and last elements\n        for i in range(len(newList)-1):\n            if i == 0:\n                # Swap the first and last elements\n                newList[i], newList[len(newList)-1] = newList[len(newList)-1], newList[i]\n            else:\n                # Recursively swap the first and last elements\n                swap_List(newList[i:])"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"Error: List must have at least two elements\")\n        return\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Calculate the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n        n (int): the number of elements in the set\n        k (int): the number of consecutive elements to include in the sum\n\n    Returns:\n        int: the sum of the product of consecutive binomial co-efficients\n    \"\"\"\n    # Initialize the sum variable to zero\n    sum_coeff = 0\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(k, n+1):\n        sum_coeff += (i * (n - i + 1)) / math.factorial(i)\n\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the result\n    result = 0\n\n    # Initialize the value of the binomial coefficient\n    coeff = 1\n\n    # Iterate through the sequence of binomial coefficients\n    for i in range(1, k+1):\n        # Calculate the binomial coefficient\n        binomial = n - i + 1\n        coeff = coeff * binomial\n\n        # Add the binomial coefficient to the result\n        result = result + coeff\n\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function takes two integers n and k as input and returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k, n+1):\n        binomial_coef = (1/2)*((n+1)*factorial(k) - (k-1)*factorial(n-k))\n        sum += binomial_coef\n    return sum\n\n\ndef factorial(n):\n    '''\n    This function takes an integer n as input and returns the factorial of n.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Base case\n    if k == 0 or k == n:\n        return 1\n\n    # Recursive case\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Calculate the product of consecutive binomial coefficients\n    for i in range(k):\n        sum += binomial(n, i)\n        \n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_of_binomial_coefs = 0\n    for i in range(k,n+1): \n        sum_of_binomial_coefs += i*binomial_Coeff(n,i-1)\n    return sum_of_binomial_coefs"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Use recursion to find the binomial coefficient\n    def binomial_coeff_helper(n, k, accumulator=1):\n        if k == 0:\n            return accumulator\n        elif k == 1:\n            return n\n        else:\n            return binomial_coeff_helper(n-1, k-1, accumulator * (n-k+1) // k)\n\n    # Use the helper function to find the sum of the product of consecutive binomial coefficients\n    def binomial_sum_helper(n, k, accumulator=1):\n        if k == 0:\n            return accumulator\n        elif k % 2 == 0:\n            return binomial_sum_helper(n, k//2, accumulator + binomial_coeff_helper(n, k//2))\n        else:\n            return binomial_sum_helper(n, (k+1)//2, accumulator + binomial_coeff_helper(n, k//2))\n\n    return binomial_sum_helper(n, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two integer arguments n and k. It calculates the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    coeff_sum = 0\n    for i in range(1, k+1):\n        for j in range(i, n+1):\n            coeff_sum += (j - i + 1) * (n - j + 1)\n    return coeff_sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    if n < k:\n        return 0\n    for i in range(k):\n        sum += 1\n    for i in range(k, n):\n        sum += binomial_Coeff(n-i, i)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n or k < 0:\n        return \"Invalid input\"\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # remove leading zeroes from ip address\n    ip = re.sub(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Regular expression to match leading zeros in an ip address\n    pattern = r'^(0){3,}\\d{1,3}\\.(0){3,}\\d{1,3}\\.(0){3,}\\d{1,3}$'\n    # Check if the ip address matches the pattern\n    if re.match(pattern, ip):\n        # Replace leading zeros with nothing\n        return re.sub(pattern, r'\\1\\2\\3', ip)\n    else:\n        # If the ip address does not match the pattern, return the original ip address\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # define regex pattern for matching ip address\n    ip_pattern = r'\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b'\n    # use re.sub function to remove leading zeroes from ip address\n    ip_without_zero = re.sub(ip_pattern, lambda match: match.group(0).lstrip('0'), ip)\n    return ip_without_zero"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(0+)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        ip_list = ip.split('.')\n        for i in range(len(ip_list)):\n            ip_list[i] = re.sub(r'^0+', '', ip_list[i])\n        return '.'.join(ip_list)\n    else:\n        return 'Invalid IP address'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from the IP address\n    ip = re.sub(r'^\\d+', '', ip)\n    # Remove any trailing zeroes\n    ip = re.sub(r'(\\d+)$', r'\\1', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = list1[0]\n    odd_first = list1[1]\n    if even_first % 2 == 0 and odd_first % 2 == 1:\n        return (even_first + odd_first) - list1[2]\n    elif even_first % 2 == 1 and odd_first % 2 == 0:\n        return (even_first - odd_first) - list1[2]\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Find the first even number\n    even_index = next(i for i, x in enumerate(list1) if x % 2 == 0)\n\n    # Find the first odd number\n    odd_index = next(i for i, x in enumerate(list1) if x % 2!= 0)\n\n    # Return the difference between the first even and first odd numbers\n    return list1[even_index] - list1[odd_index]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0 and count == 0:\n            count += 1\n            if i == 0:\n                continue\n            else:\n                return list1[i] - list1[i-1]\n        elif list1[i] % 2 == 1 and count == 1:\n            count += 1\n            if i == len(list1)-1:\n                continue\n            else:\n                return list1[i] - list1[i+1]\n    return \"No even and odd numbers found in the list.\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n\n    if even_num % 2 == 0:\n        even_num = even_num\n    else:\n        even_num = even_num + 2\n\n    if odd_num % 2 == 1:\n        odd_num = odd_num\n    else:\n        odd_num = odd_num - 2\n\n    diff = even_num - odd_num\n\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[-1]\n    \n    if even_num % 2 == 0 and odd_num % 2 == 1:\n        diff = abs(even_num - odd_num)\n    elif even_num % 2 == 1 and odd_num % 2 == 0:\n        diff = abs(even_num - odd_num)\n    else:\n        diff = \"Error: First even and first odd numbers must be odd\"\n        \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = first_odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            else:\n                first_even = first_even - num\n        else:\n            if first_odd is None:\n                first_odd = num\n            else:\n                first_odd = first_odd - num\n    return abs(first_even - first_odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = list1[0]\n    first_odd = list1[1]\n    if first_even % 2 == 0 and first_odd % 2 == 1:\n        return abs(first_even - first_odd)\n    else:\n        return -1"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n    if even_num is None:\n        return None\n    if odd_num is None:\n        return None\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(lst):\n    even_num = lst[0]\n    odd_num = lst[1]\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    return abs(even_num - odd_num)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # check if the lengths of the binary strings are equal\n    if len(str1)!= len(str2):\n        return \"Both binary strings must have the same length.\"\n    \n    # convert the binary strings to integer numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # find the difference between the numbers\n    diff = abs(num1 - num2)\n    \n    # find the number of bits required to represent the difference\n    bits = 0\n    while diff > 0:\n        bits += 1\n        diff >>= 1\n    \n    # create a list of zeros and ones for each bit position\n    zeros = [0] * bits\n    ones = [1] * bits\n    \n    # initialize the variables to store the minimum number of swaps and the result of the swap\n    min_swaps = bits\n    swapped = False\n    \n    # iterate through the bits of the difference and find the minimum number of swaps required\n    for bit in range(bits-1, -1, -1):\n        # check if the current bit is zero in str1 and one in str2\n        if (str1[bit] == '0' and str2[bit] == '1') or (str1[bit] == '1' and str2[bit] == '0'):\n            # check if the difference is even or odd\n            if diff % 2 == 0:\n                # swap the bits in str1 and str2\n                str1[bit], str2[bit] = str2[bit], str1[bit]\n                # update the result of the swap\n                swapped = True\n            # update the difference by shifting it one bit to the left\n            diff = (diff - 1) >> 1\n        # update the minimum number of swaps required\n        else:\n            min_swaps = bit\n            break\n    \n    # return the minimum number of swaps required and the result of the swap\n    return min_swaps, swapped"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the two binary strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables to keep track of swaps\n    swaps = 0\n    carry = 0\n\n    # Iterate through each bit in both numbers\n    for i in range(31, -1, -1):\n        # If the bit in num1 is 1, swap it with the bit in num2\n        if (num1 >> i) & 1 == 1 and (num2 >> i) & 1 == 0:\n            num1 ^= (1 << i)\n            num2 ^= (1 << i)\n            swaps += 1\n\n        # If there is a carry bit, swap it with the next bit in both numbers\n        if carry == 1:\n            num1 ^= (1 << i)\n            num2 ^= (1 << i)\n            swaps += 1\n            carry = 0\n\n    # If there is a carry left over, increment the number of swaps\n    if carry == 1:\n        swaps += 1\n\n    # Return the minimum number of swaps\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as strings and returns the minimum number of swaps required to convert them.\n    \"\"\"\n    if len(str1)!= len(str2):\n        raise ValueError(\"Both binary strings should have same length\")\n\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables to keep track of number of swaps and current number of bits in num1 and num2\n    swaps = 0\n    bit1 = 0\n    bit2 = 0\n\n    # While num1 is not equal to num2\n    while num1!= num2:\n        # If num1 is greater than num2\n        if num1 > num2:\n            # Check if bit1 is 1\n            if bit1 == 1:\n                # If bit1 is 1, then swap bit1 with bit2\n                num1 ^= (1 << bit1)\n                num2 ^= (1 << bit2)\n                bit1 = bit2\n                bit2 += 1\n                swaps += 1\n            # If bit1 is 0, then increment bit1\n            else:\n                bit1 += 1\n        # If num1 is less than num2\n        else:\n            # Check if bit2 is 1\n            if bit2 == 1:\n                # If bit2 is 1, then swap bit1 with bit2\n                num1 ^= (1 << bit1)\n                num2 ^= (1 << bit2)\n                bit1 = bit2\n                bit2 += 1\n                swaps += 1\n            # If bit2 is 0, then increment bit2\n            else:\n                bit2 += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2):\n    # Convert the binary strings to lists of 0's and 1's\n    list1 = [int(bit) for bit in str1]\n    list2 = [int(bit) for bit in str2]\n\n    # Initialize two pointers i and j to start with\n    i = 0\n    j = 0\n\n    # Initialize a variable to store the minimum number of swaps\n    swaps = 0\n\n    # Compare the two binary lists one by one\n    while i < len(list1) and j < len(list2):\n        if list1[i] == list2[j]:\n            i += 1\n            j += 1\n        else:\n            # If the elements are not equal, swap them\n            list1[i], list1[j] = list1[j], list1[i]\n            list2[i], list2[j] = list2[j], list2[i]\n            swaps += 1\n\n    # Return the minimum number of swaps\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2):\n    # convert the strings to binary numbers\n    num1 = int(str1,2)\n    num2 = int(str2,2)\n    \n    # convert the binary numbers to lists\n    list1 = [int(digit) for digit in str1]\n    list2 = [int(digit) for digit in str2]\n    \n    # initialize the swaps count and swap count\n    swaps = 0\n    swap_count = 0\n    \n    # loop through the binary numbers\n    for i in range(len(list1)):\n        # if the numbers are not equal, swap the numbers\n        if list1[i]!= list2[i]:\n            # add one to the swaps count\n            swaps += 1\n            \n            # check if there is a valid swap\n            if swap_count == 0 or (i == 0 and list1[0] == 1 and list2[0] == 0) or (i == len(list1)-1 and list1[i] == 1 and list2[i] == 0):\n                # swap the digits in the lists\n                list1[i], list2[i] = list2[i], list1[i]\n                \n                # increment the swap count\n                swap_count += 1\n    \n    # return the minimum swaps count\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both strings into binary representation\n    binary_str1 = bin(int(str1, 2))[2:]\n    binary_str2 = bin(int(str2, 2))[2:]\n\n    # Calculate the length of the shorter string\n    min_len = min(len(binary_str1), len(binary_str2))\n\n    # Initialize a variable to store the minimum number of swaps required\n    min_swaps = 0\n\n    # Iterate over the first string and add swaps to make the second string equal to the first string\n    for i in range(min_len):\n        if binary_str1[i]!= binary_str2[i]:\n            min_swaps += 1\n            binary_str1[i], binary_str2[i] = binary_str2[i], binary_str1[i]\n\n    # If the length of the first string is greater, add swaps to make the first string equal to the second string\n    if len(binary_str1) > len(binary_str2):\n        for i in range(min_len, len(binary_str1)):\n            if binary_str1[i]!= binary_str2[i]:\n                min_swaps += 1\n                binary_str1[i], binary_str2[i] = binary_str2[i], binary_str1[i]\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    dp = {}\n    \n    # base case: if the two binary numbers are same, return 0 swaps\n    if str1 == str2:\n        return 0\n    \n    # base case: if one of the binary numbers is empty, return n or m swaps\n    if str1 == \"\":\n        return n\n    if str2 == \"\":\n        return m\n    \n    # recursive case: calculate the sum of the corresponding bits and add it to the dictionary\n    def helper(i, j):\n        if (i, j) in dp:\n            return dp[(i, j)]\n        elif i == 0:\n            if (j, 1) not in dp:\n                dp[(j, 1)] = 1 + helper(0, j-1)\n            return dp[(j, 1)]\n        elif j == 0:\n            if (i, 1) not in dp:\n                dp[(i, 1)] = 1 + helper(i-1, 0)\n            return dp[(i, 1)]\n        else:\n            if (i, 1) not in dp:\n                dp[(i, 1)] = min(1 + helper(i-1, j), 1 + helper(i, j-1))\n            return dp[(i, 1)]\n    \n    # calculate the minimum number of swaps required to convert the two binary numbers\n    return min(helper(n-1, m-1), helper(n-1, m), helper(n, m-1))"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2): \n    #convert both strings to lists of characters \n    char_list1 = list(str1) \n    char_list2 = list(str2) \n  \n    #initialize minimum number of swaps required to convert \n    min_swaps = 0 \n  \n    #loop through both lists \n    for i in range(len(char_list1)): \n  \n        #if characters are not same, swap them and increment minimum number of swaps \n        if char_list1[i]!= char_list2[i]: \n            char_list1[i], char_list2[i] = char_list2[i], char_list1[i] \n            min_swaps += 1 \n  \n    #return the minimum number of swaps required to convert \n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    str1 = int(str1, 2)\n    str2 = int(str2, 2)\n    swaps = 0\n    for i in range(n):\n        if str1 & (1 << i)!= str2 & (1 << i):\n            str1 = str1 ^ (1 << i)\n            str2 = str2 ^ (1 << i)\n            swaps += 1\n            break\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize variables\n    i, j = 0, 0\n    count = 0\n\n    # Traverse both the strings\n    while i < len(str1) and j < len(str2):\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        elif str1[i] < str2[j]:\n            i += 1\n            count += 1\n        else:\n            j += 1\n            count += 1\n\n    # If any of the strings is not exhausted\n    while i < len(str1):\n        i += 1\n        count += 1\n\n    while j < len(str2):\n        j += 1\n        count += 1\n\n    return count"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import struct\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += struct.calcsize(str(item))\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Check if the input is a tuple or not\n    if not isinstance(tuple_list, tuple):\n        print(\"Error: The input should be a tuple.\")\n        return None\n    \n    # Get the size of the tuple using sys.getsizeof() function\n    size = sys.getsizeof(tuple_list)\n    \n    # Return the size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # convert tuple to bytes and count the length\n    size = sys.getsizeof(tuple_list)\n    # divide the size by the length of the tuple to get the size in bytes\n    size_bytes = size // len(tuple_list)\n    return size_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Convert the tuple to bytes and find the length\n    tuple_bytes = tuple_list.to_bytes(0, 'B')\n    size_in_bytes = len(tuple_bytes)\n    \n    # Add the size of the tuple header to the size\n    tuple_header_size = sys.getsizeof(tuple_list)\n    \n    return size_in_bytes + tuple_header_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the total size of the tuple in bytes\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if not isinstance(tuple_list, tuple):\n        print(\"Error: Please provide a tuple\")\n        sys.exit()\n    size = sys.getsizeof(tuple_list)\n    return size\n\nif __name__ == \"__main__\":\n    tuple_list = (1, 2, 3, 4, 5)\n    print(\"Tuple size in bytes:\", tuple_size(tuple_list))"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    total_size = 0\n    for element in tuple_list:\n        total_size += sys.getsizeof(element)\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    \n    # compare the first array with the second array\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # if the elements are equal, compare the index\n            if i == len(arr1) - 1:\n                # if the first array is completely traversed and the element is still present in the second array, return its index\n                return j\n            elif j == len(arr2) - 1:\n                # if the second array is completely traversed and the element is still present in the first array, return its index\n                return i\n            \n            # if the elements are equal, compare the index and continue searching in the first array\n            if i == len(arr1) - 1 or j == len(arr2) - 1:\n                # if the element is present in only one array, return its index\n                return i if i == len(arr1) - 1 else j\n            \n            # if the element is present in both arrays, continue searching in the first array\n            i += 1\n            j += 1\n    \n    # if we reach here, the kth element is not found in the array\n    return -1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Find the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Initialize variables to keep track of the current index of the two arrays\n    i = 0\n    j = 0\n\n    # Initialize variables to keep track of the current kth element and its index\n    current_kth = None\n    current_index = -1\n\n    # Iterate through the arrays until the kth element is found\n    while i < n1 and j < n2:\n        # If the current kth element is less than the first element of the first array\n        if arr1[i] < arr2[j]:\n            # Increment the index of the first array and set the current kth element\n            i += 1\n            current_kth = arr1[i - 1]\n            current_index = i - 1\n        # If the current kth element is greater than the first element of the second array\n        elif arr1[i] > arr2[j]:\n            # Increment the index of the second array and set the current kth element\n            j += 1\n            current_kth = arr2[j - 1]\n            current_index = j - 1\n        # If the current kth element is equal to the first element of both arrays\n        else:\n            # Increment both indices and set the current kth element\n            i += 1\n            j += 1\n            current_kth = arr1[i - 1]\n            current_index = i - 1\n\n        # Check if the kth element has been found\n        if current_index == k - 1:\n            return current_kth\n\n        # If the kth element is greater than the current kth element and not the last element of the first array\n        if current_kth > arr1[i - 1] and i < n1:\n            # Increment the index of the first array and set the current kth element\n            i += 1\n            current_kth = arr1[i - 1]\n            current_index = i - 1\n        # If the kth element is less than the current kth element and not the last element of the second array\n        elif current_kth < arr2[j - 1] and j < n2:\n            # Increment the index of the second array and set the current kth element\n            j += 1\n            current_kth = arr2[j - 1]\n            current_index = j - 1\n\n    # If the kth element was not found, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    i = j = k = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 0:\n                return arr1[i]\n            i += 1\n        else:\n            if k == 0:\n                return arr2[j]\n            j += 1\n        k -= 1\n\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            i += 1\n            k -= 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            j += 1\n            k -= 1\n        else:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Merge the two sorted arrays\n    merged_arr = merge(arr1, arr2)\n\n    # Find the kth element\n    kth_element = merged_arr[k-1]\n\n    return kth_element\n\n\ndef merge(arr1, arr2):\n    \"\"\"\n    Merge two sorted arrays into a single sorted array.\n    \"\"\"\n    # Initialize an empty merged array\n    merged_arr = []\n\n    # Initialize two pointers for each array\n    i = j = 0\n\n    # Loop until one of the pointers reaches the end of the array\n    while i < len(arr1) and j < len(arr2):\n        # If the current element of arr1 is smaller, add it to the merged array\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        # If the current element of arr2 is smaller, add it to the merged array\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n\n    # Add any remaining elements of arr1 to the merged array\n    merged_arr += arr1[i:]\n\n    # Add any remaining elements of arr2 to the merged array\n    merged_arr += arr2[j:]\n\n    return merged_arr"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # merge the two arrays\n    merged_arr = arr1 + arr2\n\n    # find the middle index of the merged array\n    mid = len(merged_arr) // 2\n\n    # initialize the left and right pointers\n    left = 0\n    right = mid\n\n    # initialize the count for the number of elements in the merged array\n    count = 0\n\n    # loop through the merged array\n    while left < mid and right < len(merged_arr):\n        if merged_arr[left] < merged_arr[right]:\n            count += mid - left\n            left += 1\n        else:\n            count += right - mid\n            right += 1\n\n    # add the remaining elements in the left and right arrays\n    count += mid - left\n    count += right - mid\n\n    # return the kth element\n    return merged_arr[count - k]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    # Merge the two sorted arrays\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n\n    # Return the kth element from the merged array\n    return merged_arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(arr1, arr2):\n    '''\n    Merge two sorted arrays into a single sorted array.\n    '''\n    result = []\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        else:\n            result.append(arr2[j])\n            j += 1\n\n    result += arr1[i:]\n    result += arr2[j:]\n\n    return result\n\n\ndef merge_sort(arr):\n    '''\n    Sort an array using merge sort algorithm.\n    '''\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        merge_sort(left)\n        merge_sort(right)\n\n        arr = merge(left, right)\n\n    return arr\n\n\ndef find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    sorted_arr1 = merge_sort(arr1)\n    sorted_arr2 = merge_sort(arr2)\n\n    kth_element = sorted_arr1[k - 1]\n\n    return kth_element"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the sum of all the elements in the two arrays\n    sum_arr = arr1 + arr2\n    \n    # Find the index of the middle element in the sum array\n    mid = sum_arr.index(sum_arr[k])\n    \n    # Split the sum array into two parts, one for each array\n    left_arr = sum_arr[:mid]\n    right_arr = sum_arr[mid:]\n    \n    # Recursively find the kth element in the two parts of the sum array\n    return find_kth(left_arr, right_arr, k) if k <= mid else arr1[mid]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Calculate the sum of the cube of each digit\n    digit_sum = 0\n    while number > 0:\n        digit_sum += number % 10 ** len(str(number))\n        number //= 10\n    # Check if the sum of the cubes of digits is equal to the original number\n    if digit_sum == number:\n        print(f\"{number} is an Armstrong number.\")\n    else:\n        print(f\"{number} is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_str = str(number)\n    sum_of_cubes = 0\n    power = len(number_str)\n    for digit in number_str:\n        digit = int(digit)\n        sum_of_cubes += digit ** power\n    \n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if number < 10:\n        return False\n    digits = [int(digit) for digit in str(number)]\n    sum = 0\n    for digit in digits:\n        sum += digit ** len(digits)\n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Check whether a given number is an Armstrong number or not.\n\n    Returns:\n    True if the given number is an Armstrong number, else False.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    s = str(n)[::-1]\n    # Calculate the sum of the cubes of each digit\n    total = sum([int(d) ** 3 for d in s])\n    # Compare the original number with the sum of its cubes\n    return n == total\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    if n < 10:\n        return False\n    temp = n\n    total = 0\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n    return n == total"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    digits = [int(d) for d in str(number)]\n    sum_of_digits = sum(digits)\n    return number == sum_of_digits**len(digits)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong_number(num):\n    num_str = str(num)\n    total = 0\n    power = len(num_str)\n\n    for i in range(len(num_str)):\n        digit = int(num_str[i])\n        total += digit ** power\n    \n    return num == total"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong_number(num):\n    \"\"\"\n    Check whether a given number is Armstrong or not.\n    \"\"\"\n    num_str = str(num)\n    total = 0\n    power = len(num_str)\n\n    # calculate the total sum of the powers of the digits\n    for digit in num_str:\n        total += int(digit) ** power\n\n    # check if the total sum is equal to the original number\n    return total == num"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    This function takes an integer num as input and returns True if num is an Armstrong number, else False.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    \"\"\"\n    num_str = str(num)\n    num_length = len(num_str)\n    sum_of_digits = 0\n    power = 0\n\n    while num > 0:\n        digit = num % 10\n        sum_of_digits += digit ** power\n        num //= 10\n        power += 1\n\n    if num == sum_of_digits:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    This function checks whether the given number is Armstrong number or not.\n    \"\"\"\n    num = int(num)\n    num_str = str(num)\n    armstrong = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        armstrong += digit**3\n        temp //= 10\n    if num == armstrong:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total / count\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_of_numbers = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum_of_numbers += i\n        count += 1\n    average = sum_of_numbers / count\n    print(f\"Sum of first {number} natural numbers: {sum_of_numbers}\")\n    print(f\"Average of first {number} natural numbers: {average}\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total / number\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n\n    average = total/count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n\n    while count < number:\n        num = int(input(\"Enter a number: \"))\n        sum += num\n        count += 1\n\n    average = sum / number\n    print(\"Sum of first\", number, \"natural numbers is:\", sum)\n    print(\"Average of first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    \n    # iterate through the numbers from 1 to number\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n        \n    # calculate the average\n    average = sum / count\n    \n    # print the sum and average\n    print(\"Sum of first {} natural numbers: {}\".format(number, sum))\n    print(\"Average of first {} natural numbers: {}\".format(number, average))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_ = 0\n    for i in range(1, number + 1):\n        sum_ += i\n    avg = sum_ / number\n    return (sum_, avg)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n\nprint(sum_average(10)) # output: (55, 5.5)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = int(input(\"Enter number of natural numbers to be summed: \"))\n    if n < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        average = sum/n\n        print(\"Sum of first\", n, \"natural numbers is\", sum)\n        print(\"Average of first\", n, \"natural numbers is\", average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n%2 == 0:\n        print(n,\"is even\")\n    else:\n        print(n,\"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    # Create a dictionary to store the character frequency\n    freq = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, return the character\n        if char in freq:\n            return char\n        \n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    \n    # If no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # loop through the string and update the count of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # find the first repeated character in the dictionary\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n\n    Args:\n    str1 (str): The string to search for the first repeated character.\n\n    Returns:\n    str: The first repeated character, or an empty string if no repeated character is found.\n    \"\"\"\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return \"\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function finds the first repeated character in a given string.\n\n    Parameters:\n    str1 (string): A string which needs to be searched for the first repeated character.\n\n    Returns:\n    char: The first repeated character if found, otherwise returns None.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # find the first character with a frequency greater than 1\n    for char, freq_count in freq.items():\n        if freq_count > 1:\n            return char\n\n    # if no character has a frequency greater than 1, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # Find the first repeated character in the dictionary\n    for char, freq in char_freq.items():\n        if freq > 1:\n            return char\n    \n    # If no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in it.\n\n    If no character is repeated, the function should return None.\n\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    If there is no repeated character, the function should return None.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Iterate through the dictionary and find the first repeated character\n    for char in freq_dict:\n        if freq_dict[char] > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            return char\n        else:\n            char_freq[char] = 1\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            lucid.append(i)\n        i += 1\n    return lucid\n\n\ndef is_lucid(num):\n    '''\n    Define a function to check if a number is lucid. A number is said to be lucid if it is equal to the sum of its digits raised to the power of the number of digits.\n    '''\n    digits = [int(digit) for digit in str(num)]\n    power = len(digits)\n    sum_of_digits = sum(digits)\n    return num == sum_of_digits ** power"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid = [2]  # initialize the list of lucid numbers with 2\n    next_lucid = 3  # initialize the next lucid number to 3\n    \n    while next_lucid <= n:\n        if all(x % next_lucid!= 0 for x in lucid):\n            lucid.append(next_lucid)\n        next_lucid += 1\n    \n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n    \n    # iterate through all numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # check if the number is lucid\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        # if the number is lucid, add it to the list\n        if is_lucid:\n            lucid_numbers.append(i)\n    \n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, i)):\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            ludic.append(i)\n    return ludic\n\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a number is lucid or not.\n    '''\n    if len(str(n)) % 2 == 0:\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            lucid.append(i)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucids = []\n    for i in range(n):\n        lucid = i**2\n        lucids.append(lucid)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = [1]\n    while len(lucid_numbers) < n:\n        new_lucid_numbers = []\n        for lucid_number in lucid_numbers:\n            new_lucid_numbers.append(lucid_number ** 2)\n            new_lucid_numbers.append(lucid_number * lucid_number)\n            new_lucid_numbers.append(lucid_number + 1)\n        lucid_numbers.extend(new_lucid_numbers)\n    return lucid_numbers[:n]"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if all(i % j!= 0 for j in range(2, i)):\n            lucid_numbers.append(i)\n    return lucid_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers\n\ndef is_lucid(num):\n    '''\n    Check if a given integer is a lucid number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    for i in range(len(words)//2):\n        words[i], words[-i-1] = words[-i-1], words[i]\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Convert string to list of words\n    words = s.split()\n    # Initialize an empty list to store reversed words\n    reversed_words = []\n    # Iterate over the words in the list in reverse order\n    for i in range(len(words)-1, -1, -1):\n        # Append the reversed word to the list\n        reversed_words.append(words[i])\n    # Join the reversed words back into a string and return it\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back together and return the result\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into a list of words\n    words.reverse()   # reverse the order of the words in the list\n    reversed_words =''.join(words)  # join the reversed words back into a string\n    return reversed_words"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # check if the number is equal to 2 or 3\n    if num == 2 or num == 3:\n        return True\n    \n    # check if the number is divisible by 2 or 3\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    \n    # check for odd numbers greater than 3\n    for i in range(5, int(num**0.5)+1, 6):\n        if num % i == 0 or num % (i+2) == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    if num == 2 or num == 3:\n        return True\n    if is_prime(num):\n        return True\n    return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks whether a given number is a prime or not using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n    if num < 2:\n        return False\n    is_prime = [True] * (num+1)\n    is_prime[0] = is_prime[1] = False\n\n    for i in range(2, int(num**0.5)+1):\n        if is_prime[i]:\n            for j in range(i*i, num+1, i):\n                is_prime[j] = False\n\n    return is_prime[num]\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is greater than 1\n    elif num > 1:\n        # Check if the number is divisible by any number between 2 and the square root of the number\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n\n        # If the number is divisible by all numbers between 2 and the square root of the number, then it is a prime number\n        return True\n\n    # If the number is 2 or 1, then it is a prime number\n    else:\n        return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        start_index = matches[0].start()\n        end_index = matches[0].end()\n        matching_string = matches[0].group()\n        return matching_string, start_index, end_index\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Compile the regex pattern into a regular expression object\n    compiled_pattern = re.compile(pattern)\n\n    # Find all occurrences of the pattern in the text\n    matches = compiled_pattern.finditer(text)\n\n    # Iterate through the matches and return the matching substring, start index, and end index\n    for match in matches:\n        return match.group(), match.start(), match.end()\n\n    # If no matches are found, return an empty string, None, and None\n    return '', None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    # Compile the regular expression pattern\n    regex_pattern = re.compile(pattern)\n\n    # Find all the matches of the pattern in the text\n    matches = regex_pattern.finditer(text)\n\n    # Initialize the result list\n    result = []\n\n    # Loop through all the matches and add the information to the result list\n    for match in matches:\n        result.append((match.group(), match.start(), match.end()))\n\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Search for pattern in text and return the match object if found, else return None\n    match = re.search(pattern, text)\n    if match:\n        # Extract the matched substring and the start and end indices\n        sub = match.group()\n        start = match.start()\n        end = match.end()\n        # Return the matching subtring, a start index and an end index\n        return sub, start, end\n    else:\n        # Return None if the pattern is not found in the text\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    This function searches a string for a regex pattern. It returns the matching subtring, a start index, and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n    \n    start_index = text.find(matches[0])\n    end_index = start_index + len(matches[0])\n    return matches[0], start_index, end_index"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    # initialize the list to store bell numbers\n    bell_list = []\n\n    # loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate the bell number using the formula b(n) = n * sum(1/i^k)\n        bell_num = n * (sum(1/i**k for k in range(1, n+1)))\n        # add the bell number to the list\n        bell_list.append(bell_num)\n\n    # return the last bell number in the list\n    return bell_list[-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    This function returns the nth Bell number using the formula:\n    B(n) = (-1)^n * n! / (n^n - 1)\n\n    The function takes an integer n as input and returns an integer.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (-1)**(n-1) * n * bell_Number(n-1) // (n**n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    # Initialize the list of bell numbers\n    bell_numbers = [0, 1]\n\n    # Loop until we have the nth bell number\n    while len(bell_numbers) < n:\n        bell_numbers.append(bell_numbers[-1] + bell_numbers[-2])\n\n    # Return the nth bell number\n    return bell_numbers[-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n - 1) + bell_Number(n - 2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2*bell_Number(n-1) + 1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and removes the k'th element from it.\n    '''\n    # create a new list with all the elements from the list1 except the k'th one\n    new_list = [i for i in list1[:L] + list1[L+1:]]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L-1 # convert L to index (0-based)\n    list2 = [0] * (len(list1)-1) # create a new list of length len(list1)-1\n    for i in range(len(list1)):\n        if i!= k:\n            list2[i-1] = list1[i] # copy elements of list1 into list2\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1 = list(list1) # convert list1 to a list for easier manipulation\n    for i in range(L):\n        list1.pop(i) # remove the kth element by popping it from the list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and an integer L, and returns a new list with the Lth element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Check if the length of the list is equal to L\n    if len(list1) == L:\n        # Create a new list to store the elements before the k'th element\n        before_k = []\n        # Create a new list to store the elements after the k'th element\n        after_k = []\n        # Loop through the list and add the elements before and after the k'th element to their respective lists\n        for i in range(len(list1)):\n            if i == L - 1:\n                after_k = list1[i+1:]\n            elif i < L - 1:\n                before_k.append(list1[i])\n        # Combine the two lists and return the result\n        return before_k + after_k\n    else:\n        # If the length of the list is not equal to L, return the original list\n        return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    for i in range(len(list1)-1, -1, -1):\n        if i == k:\n            list1.pop(i)\n        elif i > k:\n            list1[i-1] = list1[i]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Removes the kth element from the given list.\n\n    Parameters:\n    list1 (list): A list of elements.\n    L (int): The index of the element to be removed.\n\n    Returns:\n    list: A new list without the kth element.\n    \"\"\"\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize max to the first element in the list\n    max_num = test_list[0][N-1]\n\n    # iterate over all rows of the list and compare then'th column with the current max\n    for row in test_list:\n        if row[N-1] > max_num:\n            max_num = row[N-1]\n\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for i in range(len(test_list)):\n        if i == N:\n            continue\n        for j in range(len(test_list[i])):\n            if test_list[i][j] > max_val:\n                max_val = test_list[i][j]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize the maximum value to be the first element in the first row\n    max_value = test_list[0][0]\n    \n    # Loop through each row in the matrix\n    for row in test_list:\n        # Check if the current row is the nth row\n        if row == test_list[N-1]:\n            # Loop through each element in the nth row\n            for element in row:\n                # If the current element is greater than the maximum value, update the maximum value\n                if element > max_value:\n                    max_value = element\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Find the length of the longest row in the matrix\n    max_len = len(test_list)\n    # Initialize an empty list to store the maximum value of each row\n    max_vals = []\n    # Loop through each row in the matrix and extract then'th column\n    for i in range(max_len):\n        col_vals = [row[i] for row in test_list]\n        # Find the maximum value in then'th column and append it to the list of max values\n        max_vals.append(max(col_vals))\n    # Return the maximum value of each row\n    return max_vals"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Check if input is a list of lists\n    if not isinstance(test_list, list) or not all(isinstance(x, list) for x in test_list):\n        raise TypeError(\"Input should be a list of lists\")\n    \n    # Check if N is a valid integer\n    if not isinstance(N, int) or N < 1:\n        raise TypeError(\"N should be a positive integer\")\n    \n    # Find the length of the first row of the matrix\n    m = len(test_list)\n    n = len(test_list[0])\n    \n    # Check if N is less than or equal to the number of columns in the matrix\n    if N > n:\n        raise ValueError(\"N should be less than or equal to the number of columns in the matrix\")\n    \n    # Initialize the max value to be the first element of then'th column\n    max_val = test_list[0][N-1]\n    \n    # Loop through each row of the matrix and find the maximum value in then'th column\n    for i in range(1, m):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    \n    # Initialize variables\n    max_val = 0\n    \n    # Loop through the rows of the matrix\n    for row in test_list:\n        # Check if the current value of N is within the range of the length of the row\n        if N >= len(row):\n            # If it is, update the max value\n            max_val = row[N-1]\n        # If the value of N is outside the range of the length of the row, do nothing\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = 0\n    for i in range(len(test_list)):\n        if max_num < test_list[i][N-1]:\n            max_num = test_list[i][N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # Check if the input is valid\n    if not isinstance(test_list, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Check if the input is a list of lists\n    if not all(isinstance(sublist, list) for sublist in test_list):\n        raise TypeError(\"All elements in the list must be lists\")\n\n    # Calculate the length of the first row\n    row_length = len(test_list[0])\n\n    # Check if the input is valid\n    if N > row_length or N < 1:\n        raise ValueError(\"N must be between 1 and the length of the first row\")\n\n    # Initialize an empty list to store the max values\n    max_list = []\n\n    # Loop through the rows and calculate the max value of then'th column\n    for row in test_list:\n        max_value = max(row[N-1])\n        max_list.append(max_value)\n\n    # Return the list of max values\n    return max_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Find the length of the first row\n    num_rows = len(test_list)\n\n    # Initialize a variable to store the maximum value\n    max_val = 0\n\n    # Iterate over each row of the matrix\n    for i in range(num_rows):\n        # Get the value of then'th column\n        val = test_list[i][N-1]\n\n        # Update the maximum value if the current value is greater\n        if val > max_val:\n            max_val = val\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if len(test_list) == 0:\n        return None\n    elif len(test_list[0]) < N:\n        return None\n    else:\n        max_val = float('-inf')\n        for row in test_list:\n            if len(row) < N:\n                return None\n            else:\n                if row[N-1] > max_val:\n                    max_val = row[N-1]\n        return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged = []\n    for i in range(len(lst)):\n        merged.append([lst[i][0], lst[i][1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list) and len(sublist) == 2:\n            first, second = sublist\n            result.append([first, second])\n        else:\n            print(\"Error: Invalid sublist format!\")\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize cumulative sum to 0\n    cumulative_sum = 0\n    \n    # loop through the list of tuples\n    for tup in test_list:\n        # loop through the values in the tuple\n        for val in tup:\n            # add each value to the cumulative sum\n            cumulative_sum += val\n    \n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Create an empty list to store the cumulative sum\n    cumulative_sum_list = []\n    # Iterate through the given list\n    for item in test_list:\n        # Check if the current item is a tuple\n        if isinstance(item, tuple):\n            # If it is a tuple, calculate the sum of its elements and append it to the cumulative sum list\n            current_sum = sum(item)\n            cumulative_sum_list.append(current_sum)\n        else:\n            # If it is not a tuple, append it as is to the cumulative sum list\n            cumulative_sum_list.append(item)\n    # Return the cumulative sum list\n    return cumulative_sum_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for i in range(len(test_list)):\n        cumsum += test_list[i][1]\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cumulative_sum = 0\n    \n    # Iterate over each tuple in the list\n    for tuple in test_list:\n        # Iterate over each value in the tuple\n        for value in tuple:\n            # Add the value to the cumulative sum\n            cumulative_sum += value\n    \n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total = 0\n    for element in test_list:\n        if isinstance(element, tuple):\n            total += sum(element)\n        else:\n            total += element\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for item in test_list:\n        total += item\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum to 0\n    cumulative_sum = 0\n    # loop through the list of tuples\n    for tuple in test_list:\n        # loop through the values in the tuple\n        for value in tuple:\n            # add the value to the cumulative sum\n            cumulative_sum += value\n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize an empty list to store the cumulative sum\n    cum_sum_list = []\n    # iterate through each tuple in the list\n    for tup in test_list:\n        # initialize a variable to store the running sum of values in the current tuple\n        running_sum = 0\n        # iterate through each value in the current tuple\n        for val in tup:\n            # add the current value to the running sum\n            running_sum += val\n        # append the running sum to the cumulative sum list\n        cum_sum_list.append(running_sum)\n    # return the cumulative sum list\n    return cum_sum_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for num_tuple in nums:\n        num_list = []\n        for num in num_tuple:\n            num_list.append(num)\n        average = sum(num_list) / len(num_list)\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num)/len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the averages\n    averages = []\n    # loop through each tuple in the tuple of tuples\n    for tup in nums:\n        # calculate the average of the values in the tuple\n        avg = sum(tup) / len(tup)\n        # append the average to the list of averages\n        averages.append(avg)\n    # return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        temp = []\n        for j in range(len(nums[i])):\n            temp.append(nums[i][j])\n        result.append(sum(temp)/len(temp))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        avg = sum(nums[i])/len(nums[i])\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        if isinstance(nums[i], tuple):\n            avg = sum(nums[i])/len(nums[i])\n            averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for item in nums:\n        sum = 0\n        for num in item:\n            sum += num\n        avg = sum / len(item)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Define a list to store the averages\n    avg_list = []\n    \n    # Loop through each tuple in the input tuple\n    for tup in nums:\n        # Calculate the average of the tuple elements\n        avg = sum(tup) / len(tup)\n        # Append the average to the average list\n        avg_list.append(avg)\n    \n    # Return the average list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        result.append(total/len(nums[i]))\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length\")\n    result = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return\n\n    # Perform element wise modulo\n    modulo_tup = []\n    for i in range(len(test_tup1)):\n        modulo_tup.append(test_tup1[i] % test_tup2[i])\n\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length\")\n        return\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # Perform element-wise modulo operation\n    result_tup = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Perform the element wise modulo operation\n        test_tup1[i] %= test_tup2[i]\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Initialize variables to store the minimum jumps required and the number of steps taken.\n    min_jumps = 0\n    steps_taken = 0\n\n    # Loop through the list of steps and calculate the minimum number of jumps required for each step.\n    for i in range(1, len(steps)):\n        # Calculate the number of jumps required for the current step.\n        jumps = steps[i] // abs(d)\n\n        # Update the minimum jumps required if the current number of jumps is greater.\n        if jumps < min_jumps:\n            min_jumps = jumps\n\n        # Update the number of steps taken.\n        steps_taken += jumps\n\n    # Return the minimum number of jumps required and the number of steps taken.\n    return min_jumps, steps_taken"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize variables\n    x, y = 0, 0\n    jumps = 0\n    \n    # loop until all steps are taken\n    while steps > 0: \n        # check if the point is at (d, 0)\n        if x == d: \n            # add 1 to the number of jumps and reset x and y to (0, 0)\n            jumps += 1\n            x, y = 0, 0\n        \n        # if the point is not at (d, 0), increment x\n        else: \n            x += 1\n        \n        # decrement the steps\n        steps -= 1\n    \n    # return the number of jumps\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    jumps = 0\n    current_pos = 0\n    destination = (d, 0)\n\n    while True:\n        # Check if current position is at the desired destination\n        if current_pos == destination:\n            break\n        # Check if current position is at a corner\n        if current_pos in [(0, 0), (0, d), (steps, 0), (steps, d)]:\n            return -1\n        # Check if current position is blocked by obstacles\n        if current_pos[0] < 0 or current_pos[1] < 0 or current_pos[0] >= steps or current_pos[1] >= d:\n            return -1\n        # Move to the next position\n        current_pos = (current_pos[0] + 1, current_pos[1])\n        jumps += 1\n\n    # Return the number of jumps\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    jumps = 0\n    curr_x, curr_y = 0, 0\n    max_x, max_y = steps-1, 0\n\n    while curr_x < max_x or curr_y < max_y:\n        if curr_x == max_x and curr_y > max_y:\n            max_y = curr_y\n        if curr_y == max_y and curr_x < max_x:\n            max_x = curr_x\n        if curr_x >= max_x and curr_y >= max_y:\n            return jumps\n        \n        if curr_x < max_x:\n            curr_x += 1\n            jumps += 1\n        elif curr_y < max_y:\n            curr_y += 1\n            jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    jumps = 0\n    curr_x, curr_y = 0, 0\n    next_x, next_y = 0, 0\n    \n    for i in range(steps):\n        if curr_x == d and curr_y == 0:\n            jumps += 1\n            curr_x, curr_y = 0, 0\n        elif curr_x < d and curr_y == 0:\n            next_x, next_y = curr_x+1, curr_y\n        elif curr_x == d and curr_y > 0:\n            next_x, next_y = curr_x, curr_y-1\n        elif curr_x > d and curr_y == 0:\n            next_x, next_y = curr_x-1, curr_y\n        elif curr_x == d and curr_y < 0:\n            next_x, next_y = curr_x, curr_y+1\n        elif curr_x < d and curr_y > 0:\n            next_x, next_y = curr_x+1, curr_y-1\n        elif curr_x > d and curr_y > 0:\n            next_x, next_y = curr_x-1, curr_y-1\n        elif curr_x < d and curr_y < 0:\n            next_x, next_y = curr_x+1, curr_y+1\n        else:\n            break\n        \n        curr_x, curr_y = next_x, next_y\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps <= 0 or d <= 0:\n        return 0\n    elif d == 1:\n        return steps\n    else:\n        return 1 + min_Jumps(steps-1, d-1)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    jumps = 0\n    curr_pos = 0\n    end_pos = d\n\n    # Loop until end position is reached\n    while curr_pos < end_pos:\n        # Check if the end position is reached\n        if curr_pos == end_pos:\n            return jumps\n\n        # Update current position\n        curr_pos += 1\n        jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # If the length of the path is 0 or 1 then it will be a single jump\n    if steps == 0 or steps == 1:\n        return 1\n\n    # If the length of the path is greater than 1 then we need to check for all possible paths to reach the end point\n    # We can use dynamic programming to achieve this\n    dp = [[0] * (d+1) for i in range(steps+1)]\n\n    # Initialize the base cases of the matrix\n    dp[0][0] = 1\n    dp[0][1] = 0\n\n    # Fill the rest of the matrix using dynamic programming\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            if j >= steps-i:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    # Return the final answer\n    return dp[steps][d]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Check if steps is a positive integer\n    if not isinstance(steps, int) or steps < 1:\n        raise ValueError(\"Steps must be a positive integer.\")\n    \n    # Check if d is a positive integer\n    if not isinstance(d, int) or d < 1:\n        raise ValueError(\"Distance must be a positive integer.\")\n    \n    # Initialize variables\n    steps = abs(steps)\n    d = abs(d)\n    min_jumps = 0\n    curr_pos = 0\n    prev_pos = 0\n    \n    # Check for the number of jumps required\n    while curr_pos <= steps:\n        # Update current position\n        prev_pos = curr_pos\n        curr_pos += d\n        \n        # Check if reached the desired position\n        if prev_pos == 0 and curr_pos == d:\n            min_jumps += 1\n        \n        # Check if reached the end of the range\n        if curr_pos > steps:\n            break\n    \n    # Return the number of jumps required\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Return the minimum number of jumps required to reach the point (d, 0) from the origin in a 2d plane.\n    \n    :param steps: a list of tuples representing the positions of the obstacles in the 2d plane\n    :param d: an integer representing the maximum distance from the origin to reach the point (d, 0)\n    :return: the minimum number of jumps required to reach the point (d, 0) from the origin\n    \"\"\"\n\n    # Initialize a queue to store the positions of the obstacles\n    obstacles = []\n    for step in steps:\n        if step[0] > d:\n            obstacles.append(step)\n\n    # Breadth-first search to find the shortest path from the origin to the point (d, 0)\n    queue = [((0, 0), 0)]\n    while queue:\n        position, steps_taken = queue.pop(0)\n        if position == (d, 0):\n            return steps_taken\n        elif position[0] < d:\n            continue\n        else:\n            queue.append((position[0], position[1] + 1))\n            for obstacle in obstacles:\n                if position[0] < obstacle[0]:\n                    queue.append((position[0], position[1] + 1))\n\n    return None"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns their element-wise division.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The lists must be of equal length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists should be of equal length.\")\n    for i in range(len(nums1)):\n        nums1[i] /= nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # initialize an empty list to store the results\n    result = []\n    # loop through the elements of the lists\n    for i in range(len(nums1)):\n        # check if the second element is zero, if yes, return None\n        if nums2[i] == 0:\n            return None\n        # calculate the quotient and append it to the result list\n        result.append(nums1[i] // nums2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists are not of equal length\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The lists must have the same length.')\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as arguments and returns a list containing the element-wise division of the lists.\n    '''\n    # Taking the length of both lists\n    n1 = len(nums1)\n    n2 = len(nums2)\n\n    # Initializing an empty list to store the result\n    result = []\n\n    # Iterating over the lists and dividing each element\n    for i in range(n1):\n        for j in range(n2):\n            result.append(nums1[i]/nums2[j])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    # Divide each element of the lists\n    result = [x / y for x, y in zip(nums1, nums2)]\n\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    # initialize variables\n    num_start = -1\n    num_end = -1\n    num_found = False\n    result = ''\n\n    # iterate through the string\n    for i, c in enumerate(test_str):\n        # check if we have found a number\n        if c.isdigit():\n            # check if it's the first number found\n            if num_start == -1:\n                num_start = i\n                num_end = i\n            # check if it's the last number found\n            elif num_end == -1:\n                num_end = i\n        # check if we have found a non-number\n        elif num_found:\n            # add the number to the result string\n            result += c\n        # check if we have found a number\n        elif num_start!= -1 and num_end == -1:\n            num_end = i\n            num_found = True\n\n    # return the result\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize a variable to store the new string\n    new_str = \"\"\n    # loop through each character in the input string\n    for char in test_str:\n        # if the character is a number, add it to the new string\n        if char.isdigit():\n            new_str += char\n        # if the character is not a number, add it to the original string\n        else:\n            test_str += char\n    # return the new string with all numbers moved to the end\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    \n    if num_list:\n        return test_str + ''.join(num_list)\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into a list of characters\n    char_list = list(test_str)\n    \n    # Initialize two pointers, one at the beginning and one at the end of the list\n    left = 0\n    right = len(char_list) - 1\n    \n    # Iterate over the list until the pointers meet\n    while left < right:\n        # If we encounter a number, swap it with the last element and move the left pointer to the right\n        if char_list[left].isdigit():\n            char_list[left], char_list[right] = char_list[right], char_list[left]\n            left += 1\n        # If we encounter a letter, increment the left pointer\n        else:\n            left += 1\n        # If we encounter a number, swap it with the first element and move the right pointer to the left\n        if char_list[right].isdigit():\n            char_list[left], char_list[right] = char_list[right], char_list[left]\n            right -= 1\n        # If we encounter a letter, increment the right pointer\n        else:\n            right -= 1\n            \n    # Join the list of characters back into a string\n    result = ''.join(char_list)\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # initialize a variable to store the number count\n    num_count = 0\n\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, increment the count\n        if char.isdigit():\n            num_count += 1\n\n    # initialize an empty string to store the numbers\n    num_str = ''\n\n    # loop through the string again and add the numbers to the new string\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n\n    # concatenate the number string with the rest of the string\n    final_str = num_str + test_str\n\n    # return the final string\n    return final_str\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables\n    num_count = 0\n    num_str = ''\n    result = ''\n\n    # Iterate through the string\n    for char in test_str:\n        # Check if the character is a number\n        if char.isdigit():\n            # If it is, add it to the number string\n            num_str += char\n        else:\n            # If it's not a number, check if the number string is empty\n            if num_str:\n                # If it is, add the number string to the result and reset the number string\n                result += num_str\n                num_str = ''\n                num_count += 1\n            # Add the current character to the result\n            result += char\n\n    # Add the final number string to the result\n    if num_str:\n        result += num_str\n        num_count += 1\n\n    # Return the result\n    return result, num_count"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    # Define a list to store the numbers in the string\n    num_list = []\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number, append it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n    \n    # Join the num_list into a string and return it\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    alpha_list = []\n    new_str = ''\n    \n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            alpha_list.append(char)\n            \n    for num in num_list:\n        new_str += num\n        \n    for alpha in alpha_list:\n        new_str += alpha\n        \n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # remove all non-numeric characters from the string\n    num_str = ''.join(filter(str.isdigit, test_str))\n\n    # check if there are any numbers left\n    if not num_str:\n        return test_str\n\n    # split the string into a list of characters and find the index of the first number\n    first_num_idx = [i for i, c in enumerate(num_str) if c.isdigit()][0]\n\n    # join the characters at the indices before and after the first number to form a new string\n    new_str = ''.join(num_str[:first_num_idx] + num_str[first_num_idx+len(num_str)-num_str[first_num_idx:].index(num_str[first_num_idx])-1:first_num_idx+len(num_str)-num_str[first_num_idx:].index(num_str[first_num_idx])-1+len(num_str[first_num_idx])]+num_str[first_num_idx:first_num_idx+len(num_str)-num_str[first_num_idx:].index(num_str[first_num_idx])-1])\n\n    # return the new string with all the numbers moved to the end\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    for i in range(len(test_str)-1, -1, -1):\n        if test_str[i].isdigit():\n            num_list.append(test_str[i])\n    return ''.join(num_list)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [1] * n\n    max_len = 1\n    for i in range(1, n):\n        dp[i] = 1\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n                max_len = max(max_len, dp[i])\n    return max_len"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [1]*n\n    max_size = 0\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_size = max(max_size, dp[i])\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables to keep track of the maximum subset size and the starting index of the maximum subset\n    max_size = 0\n    start = 0\n\n    # Loop through the list\n    for i in range(len(a)):\n        # Initialize variables to keep track of the current subset size and the starting index of the current subset\n        current_size = 1\n        current_start = i\n\n        # Loop through the list starting from the current index and adding pairs of numbers that are divisible\n        for j in range(i+2, len(a)+1):\n            # If the current number is divisible by the next number, add 1 to the current size and increment the start index\n            if a[j-1] % a[j-2] == 0:\n                current_size += 1\n                current_start = j\n\n        # Update the maximum subset size if the current subset size is greater than the maximum subset size\n        if current_size > max_size:\n            max_size = current_size\n            start = current_start\n\n    # Return the maximum subset size and the starting index of the maximum subset\n    return max_size, start\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_size = 1\n    current_size = 1\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            current_size += 1\n        else:\n            max_size = max(max_size, current_size)\n            current_size = 1\n    max_size = max(max_size, current_size)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    subset = set()  # set to store unique pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                subset.add((a[i], a[j]))\n    return len(subset)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list of numbers in ascending order\n    a.sort()\n\n    # Initialize variables to keep track of the largest subset and the current subset size\n    largest = 0\n    current = 0\n\n    # Iterate through the list of numbers\n    for num in a:\n        # If the current number is not divisible by the next number, add it to the current subset and check if it's larger than the largest subset\n        if num % a[current]!= 0:\n            current += 1\n            current %= len(a)\n        current += 1\n        current %= len(a)\n        if current > largest:\n            largest = current\n\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [1]*n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n                \n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the given list of numbers in ascending order\n    a.sort()\n    \n    # Initialize variables for the largest subset size and the number of elements in the subset\n    largest_size = 0\n    count = 0\n    \n    # Iterate over the sorted list of numbers\n    for i in range(len(a)):\n        # Initialize variables for the current subset size and the number of elements in the current subset\n        current_size = 1\n        current_count = 1\n        \n        # Iterate over the remaining elements of the list starting from the element after the current element\n        for j in range(i+1, len(a)):\n            # Check if the current element and the next element are divisible\n            if a[i] % a[j] == 0:\n                current_count += 1\n                current_size += 1\n            else:\n                break\n        \n        # Update the largest subset size and count if the current subset is larger than the previous subset\n        if current_size > largest_size:\n            largest_size = current_size\n            count = current_count\n    \n    # Return the largest subset size and the number of elements in the subset\n    return largest_size, count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    max_size = 1\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n        max_size = max(max_size, dp[i])\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize an empty list to store the subsets\n    subsets = []\n    # Initialize the current subset to be the entire list\n    current_subset = a\n    # Initialize the largest subset size to zero\n    largest_size = 0\n    # Loop through each number in the list\n    for num in a:\n        # Loop through each subset to see if it can be extended by adding the current number\n        for subset in subsets:\n            if subset + [num] == a:\n                # If it can be extended by adding the current number, add the new number to the subset and update the current subset\n                subset.append(num)\n                current_subset = subset\n        # Add the current subset to the list of subsets if its size is larger than the current largest size\n        if len(current_subset) > largest_size:\n            largest_size = len(current_subset)\n    # Return the largest subset size\n    return largest_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Merge the two lists and get the length of the merged list\n    merged = arr1 + arr2\n    merged_len = len(merged)\n    \n    # Find the midpoint of the merged list\n    midpoint = merged_len // 2\n    \n    # If the length of the merged list is even, then the median is the average of the two middle numbers\n    if merged_len % 2 == 0:\n        median = (merged[midpoint - 1] + merged[midpoint]) / 2\n        return median\n    \n    # If the length of the merged list is odd, then the median is the middle number itself\n    else:\n        median = merged[midpoint]\n        return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Check if the two lists are of the same size\n    if len(arr1)!= len(arr2):\n        print(\"Error: The two lists must have the same size.\")\n        return\n    \n    # Merge the two sorted lists into one\n    merged_list = arr1 + arr2\n    merged_list.sort()\n    \n    # Find the middle index\n    mid_index = n // 2\n    \n    # Check if the list has an odd or even size\n    if n % 2 == 0:\n        # Return the average of the two middle elements\n        return (merged_list[mid_index-1] + merged_list[mid_index])/2\n    else:\n        # Return the middle element\n        return merged_list[mid_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    arr1.sort()\n    arr2.sort()\n\n    # Count the number of elements in each list\n    count1 = len(arr1)\n    count2 = len(arr2)\n\n    # Calculate the indices of the middle elements of both lists\n    mid1 = count1 // 2\n    mid2 = count2 // 2\n\n    # Check if the lists have an even number of elements\n    if count1 % 2 == 0:\n        # If they do, take the average of the middle two elements\n        median = (arr1[mid1] + arr1[mid1 - 1]) / 2\n    else:\n        # If they don't, take the middle element\n        median = arr1[mid1]\n\n    # Check if the second list is shorter than the first\n    if count2 < count1:\n        # If it is, swap the lists and continue with the first list\n        arr1, arr2 = arr2, arr1\n        count1, count2 = count2, count1\n        mid1, mid2 = mid2, mid1\n\n    # Check if the median element is in the second list\n    if arr2[mid2] < median:\n        # If it is, set the median to the first element of the second list\n        median = arr2[0]\n\n    # Check if the median element is in the first list\n    if arr1[mid1] < median:\n        # If it is, set the median to the last element of the first list\n        median = arr1[-1]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list in ascending order\n    merged_list.sort()\n\n    # Calculate the median\n    median = merged_list[n // 2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of same size `arr1` and `arr2` as input and returns the median of the two lists.\n    \"\"\"\n    # Concatenate the two lists\n    combined_arr = arr1 + arr2\n    \n    # Sort the combined list\n    sorted_arr = sorted(combined_arr)\n    \n    # Calculate the median\n    if n % 2 == 0:\n        # If the size of the list is even, take the average of the middle two elements\n        median = (sorted_arr[n//2-1] + sorted_arr[n//2]) / 2\n    else:\n        # If the size of the list is odd, take the middle element\n        median = sorted_arr[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    # Merge the two lists\n    merged = arr1 + arr2\n    # Sort the merged list\n    sorted_arr = sorted(merged)\n    # Find the median of the sorted list\n    median = sorted_arr[n]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # combine the two arrays into a single array\n    combined = arr1 + arr2\n    \n    # sort the combined array\n    combined.sort()\n    \n    # find the median index\n    median_index = n // 2\n    \n    # return the median element\n    return combined[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n\n    Args:\n    arr1 (list): First sorted list.\n    arr2 (list): Second sorted list.\n    n (int): Size of the sorted lists.\n\n    Returns:\n    (float): The median of the two sorted lists.\n    \"\"\"\n    # Merge the two sorted lists\n    merged = merge_sorted_lists(arr1, arr2, n)\n\n    # Find the median\n    if n % 2 == 0:\n        median = (merged[n//2 - 1] + merged[n//2]) / 2\n    else:\n        median = merged[n//2]\n\n    return median\n\n\ndef merge_sorted_lists(arr1, arr2, n):\n    \"\"\"\n    Merge two sorted lists into a single sorted list.\n\n    Args:\n    arr1 (list): First sorted list.\n    arr2 (list): Second sorted list.\n    n (int): Size of the sorted lists.\n\n    Returns:\n    (list): The merged sorted list.\n    \"\"\"\n    # Initialize an empty merged list\n    merged = []\n\n    # Merge the two lists one by one\n    i = j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        elif arr2[j] < arr1[i]:\n            merged.append(arr2[j])\n            j += 1\n        else:\n            merged.append(arr1[i])\n            i += 1\n            j += 1\n\n    # Append any remaining elements from the first list\n    while i < n:\n        merged.append(arr1[i])\n        i += 1\n\n    # Append any remaining elements from the second list\n    while j < n:\n        merged.append(arr2[j])\n        j += 1\n\n    return merged"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists and their sizes as input and returns the median value.\n    The median is defined as the middle element of the two sorted lists.\n    \"\"\"\n    # Combine the two arrays\n    combined_arr = arr1 + arr2\n    \n    # Sort the combined array\n    combined_arr.sort()\n    \n    # Determine the median value\n    if n % 2 == 0:\n        # If n is even, the median is the average of the two middle elements\n        median = (combined_arr[n//2] + combined_arr[n//2-1]) / 2\n    else:\n        # If n is odd, the median is the middle element\n        median = combined_arr[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # Find the median of two sorted lists by finding the median of two middle elements\n        arr1_len = len(arr1)\n        arr2_len = len(arr2)\n\n        if arr1_len > arr2_len:\n            # If arr1 is larger, we need to find the median from the left half of arr1 and right half of arr2\n            left = 0\n            right = (arr1_len + arr2_len) // 2\n            median1 = arr1[left]\n            median2 = arr2[right]\n        else:\n            # If arr2 is larger, we need to find the median from the left half of arr2 and right half of arr1\n            left = (arr1_len + arr2_len) // 2\n            right = 0\n            median1 = arr2[left]\n            median2 = arr1[right]\n\n        if median1 > median2:\n            # If median1 is larger, we need to swap median1 and median2\n            median1, median2 = median2, median1\n\n        # Calculate the median of two middle elements\n        median = (median1 + median2) / 2\n\n        return median\n\n    else:\n        # Find the median of two sorted lists by finding the median of one middle element and one right element\n        arr1_len = len(arr1)\n        arr2_len = len(arr2)\n\n        if arr1_len > arr2_len:\n            # If arr1 is larger, we need to find the median from the left half of arr1 and right element of arr2\n            left = 0\n            right = arr2_len - 1\n            median1 = arr1[left]\n            median2 = arr2[right]\n        else:\n            # If arr2 is larger, we need to find the median from the left element of arr1 and right half of arr2\n            left = arr1_len - 1\n            right = 0\n            median1 = arr1[left]\n            median2 = arr2[right]\n\n        if median1 > median2:\n            # If median1 is larger, we need to swap median1 and median2\n            median1, median2 = median2, median1\n\n        # Calculate the median of one middle element and one right element\n        median = median1\n\n        return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n    \"\"\"\n    # create a new list to store the results\n    result = []\n    # loop over each number in the input list\n    for num in nums:\n        # compute the nth power of the number\n        result.append(num ** n)\n    # return the result list\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n\n    Args:\n    nums (list): The list of numbers to compute the nth power of.\n    n (int): The power to compute.\n\n    Returns:\n    list: The list of n-th powers of the numbers in the input list.\n\n    \"\"\"\n\n    # Initialize the list to store the results\n    result = []\n\n    # Loop through the numbers in the input list\n    for num in nums:\n\n        # Compute the nth power of the number\n        nth_power = num ** n\n\n        # Add the nth power to the result list\n        result.append(nth_power)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string input and returns a boolean value indicating if the string contains only uppercase letters.\n    '''\n    for char in string:\n        if char.islower():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 1: # If the list has only one element, return the list as it is\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0] # Interchange the first and last element\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2: \n        return newList \n    else: \n        temp = newList[0] \n        newList[0] = newList[-1] \n        newList[-1] = temp \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # get the length of the list\n    length = len(newList)\n    \n    # if the length of the list is less than or equal to 1, return the list as it is\n    if length <= 1:\n        return newList\n    \n    # swap the first and last element of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return \"The given list should have at least two elements.\"\n    else:\n        # Interchange the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the length of the list is less than 2\n    if len(newList) < 2:\n        return None\n    # swap the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    # return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Initializing the first and last index\n    first_index = 0\n    last_index = len(newList) - 1\n\n    # swapping the first and last element\n    temp = newList[first_index]\n    newList[first_index] = newList[last_index]\n    newList[last_index] = temp\n\n    # returning the updated list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    if len(newList) > 1:\n        # Interchange first and last element\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList\n    else:\n        return \"Error: The list should contain at least two elements.\""
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = 2 * math.asin(r)\n    return (s * (s - r) * (s - r) / 12)\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # calculate the length of the diagonal of the largest triangle\n    diagonal = 2 * r\n\n    # calculate the area of the largest triangle\n    area = math.sqrt(3) / 4 * diagonal * diagonal\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Find the radius of the smallest circle that contains the radius of the semicircle\n    a = (r * r) / (4 * math.pi)\n\n    # Find the area of the smallest circle\n    area = math.pi * (r * r)\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    max_area = 0\n    for i in range(2):\n        for j in range(i + 1):\n            max_area = max(max_area, 0.5 * area * (1 - (i - j) / r))\n\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a Python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    area = 0\n    for i in range(1, 4):\n        angle = 2 * i * 3.14159 / 4\n        area += (r * r * angle) / 3\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    This function takes a radius as input and calculates the area of the largest triangle that can be inscribed in a semicircle with that radius.\n\n    Returns:\n    The area of the largest triangle inscribed in the semicircle of the given radius.\n    '''\n\n    # Define the semi-circle as a circle with a radius of 1\n    circle_radius = 1\n\n    # Calculate the area of the triangle using Heron's formula\n    a = 1/3 * circle_radius**2\n    b = 1/3 * r**2\n    c = (1/2) * (r**2) + (1/2) * (circle_radius**2)\n\n    s = (a**2 + b**2 - c**2) / (2*a*b)\n    area = (s*(s-a)*(s-b))**(1/2)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Formula for area of a triangle using Heron's formula\n    s = 2 * r * (1 + 2 * (1 / r)) ** 0.5\n    area = 0.5 * s ** 2\n\n    # Calculate the triangle with the largest area\n    if area > 0.5 * r ** 2:\n        if area > 1.5 * r ** 2:\n            return 3 * r ** 2 * (1 + 3 * (1 / r))\n        else:\n            return 2 * r ** 2 * (1 + 2 * (1 / r))\n    else:\n        return 0"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # area of a triangle is given by formula: area = 1/2 * base * height\n    # where base is half the perimeter and height is given by:\n    # height = sqrt(3) * base * sqrt(1 - (r/2)^2)\n    \n    # find the perimeter\n    perimeter = 2 * r\n    \n    # calculate the base\n    base = math.sqrt(perimeter * (3 - math.sqrt(3)))\n    \n    # calculate the height\n    height = math.sqrt(3) * base * math.sqrt(1 - (r/2)**2)\n    \n    # return the area of the largest triangle\n    return height"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with a given radius\n    # (a^2 + b^2 + c^2 = r^2)\n    # a^2 + b^2 = r^2 - c^2\n    # (a^2 + b^2) - c^2 = r^2\n    # a^2 + b^2 - 2c^2 = r^2\n    # a^2 + b^2 - 4c^2 = r^2\n    # a^2 + b^2 = r^2 - 4c^2\n    # sqrt(a^2 + b^2) = 2c\n    # (a + b) sqrt(a^2 + b^2) = 2c\n    # (a + b) sqrt(a^2 + b^2) = 2c\n    # a + b = 2c\n    # a = 2c/b\n    \n    # Substitute the given radius into the first equation\n    # r^2 - 4c^2 = r^2\n    # r^2 - 4c^2 = r^2 - 4c^2\n    # r^2 - 4c^2 = r^2\n    # 2c^2 - 4c^2 = r^2\n    # 2c^2 - 4c^2 = 0\n    # 4c^2 - 2c^2 = 0\n    # 4c^2 - 2c^2 = r^2 - r^2 = 0\n    # 4c^2 - 2c^2 = r^2\n    # 4c^2 - 2c^2 = 0\n    # 4c^2 - 2c^2 = 2c^2\n    # 4c^2 - 2c^2 = 0\n    # c^2 - 4c^2 = 0\n    # c^2 = 4r^2\n    \n    # Simplify the second equation for c^2\n    # c^2 = 4r^2\n    # c = sqrt(4r^2)\n    \n    # Set b = sqrt(4r^2 - 4c^2)\n    # b = sqrt(8r^2 - 4c^2)\n    # b = 2c\n    # b = 2(sqrt(4r^2) - sqrt(4r^2 - 4c^2))\n    # b = 2(sqrt(4r^2) - sqrt(4r^2 - 4c^2))\n    # b = 2(sqrt(4r^2) - 2r^2 + 2r^2 - 4c^2)\n    # b = 2(sqrt(4r^2) - 2r^2 + 4r^2 - 4c^2)\n    # b = 2(sqrt(4r^2) - 2r^2 + 4r^2 - 4c^2)\n    # b = 2(sqrt(4r^2) - 2r^2 + 4r^2 - 4c^2)\n    # b = 2(sqrt(4r^2) - 2r^2 + 4r^2 - 4c^2)\n    # b = 2(sqrt(4r^2) - 2r^2 + 2r^2 - 4c^2)\n    # b = 2(sqrt(4r^2) - 2r^2)\n    # b = 2(sqrt(4r^2))\n    # b = 2sqrt(4r^2)\n    # b = 2sqrt(4r^2)\n    \n    # Set a = sqrt(4r^2 - 4c^2)\n    # a = 2c\n    # a = 2(sqrt(4r^2) - sqrt(4r^2 - 4c^2))\n    # a = 2(sqrt(4r^2) - sqrt(4r^2 - 4c^2))\n    # a = 2(sqrt(4r^2) - 2r^2 + 2r^2 - 4c^2)\n    # a = 2(sqrt("
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n\n    # Calculate the hypotenuse\n    h = (r ** 2) / 2\n\n    # Calculate the area of the smallest triangle\n    a = (3 * r) ** 0.5\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    b = (3 * h) ** 0.5\n\n    # Calculate the area of the smallest triangle that is smaller than the largest triangle\n    area_of_smaller_triangle = a ** 2 - b ** 2\n\n    return area_of_smaller_triangle\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Compute the semi-circle's area\n    area = math.pi * r * r\n    \n    # Compute the semi-circle's diameter\n    diameter = 2 * r\n    \n    # Compute the area of each triangle\n    base = 1/2 * r * r\n    height = math.sqrt(3) * r\n    \n    # Compute the area of the largest triangle\n    area_of_largest_triangle = max(area, area + height, area + base)\n    \n    # Return the area of the largest triangle\n    return area_of_largest_triangle"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if array[i] == i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number in the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    for i in range(start, end):\n        if array[i]!= i+start:\n            return i+start\n    \n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n\n    return end + 1\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list containing only the even numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = [] \n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = [(x-1,y), (x+1,y), (x,y-1), (x,y+1)]\n    return adj_coords + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # initialize list to store adjacent coordinates\n    adj_coords = []\n\n    # extract coordinates of the given element\n    x, y = ele\n\n    # add all adjacent coordinates to the list\n    for dx in range(-1, 2):\n        for dy in range(-1, 2):\n            if dx!= 0 or dy!= 0:\n                new_x = x + dx\n                new_y = y + dy\n                if new_x >= 0 and new_y >= 0 and new_x < 100 and new_y < 100:\n                    adj_coords.append((new_x, new_y))\n\n    # remove duplicates and return the list of adjacent coordinates\n    return list(set(adj_coords))"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    x, y = ele\n    adj_list = []\n\n    # Extract adjacent nodes from the 4 directions\n    adj_list.append((x+1, y))\n    adj_list.append((x-1, y))\n    adj_list.append((x, y+1))\n    adj_list.append((x, y-1))\n\n    # Filter out the coordinates that are already in the sublist\n    adj_list = [adj for adj in adj_list if (adj[0], adj[1]) not in sub]\n\n    # Add the adjacent nodes to the sublist\n    sub.extend(adj_list)\n\n    # Recursively extract adjacent nodes from the newly added nodes\n    for node in adj_list:\n        adjac(node, sub)\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    This function takes a tuple representing a coordinate and returns a list of all its adjacent coordinates. \n    The coordinates are given as (x, y). \n    If the coordinates are already in the sublist, the function returns the sublist without modifying it.\n    '''\n\n    if ele in sub:\n        return sub\n    else:\n        sub.append(ele)\n        adj = []\n        x, y = ele\n        if y > 0:\n            adj.append((x, y - 1))\n        if y < 2:\n            adj.append((x, y + 1))\n        if x > 0:\n            adj.append((x - 1, y))\n        if x < 2:\n            adj.append((x + 1, y))\n        return adjac(adj, sub)"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    result = []\n    if x - 1 >= 0: \n        result.append((x - 1, y))\n    if x + 1 < len(sub): \n        result.append((x + 1, y))\n    if y - 1 >= 0: \n        result.append((x, y - 1))\n    if y + 1 < len(sub[0]): \n        result.append((x, y + 1))\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i!= 0 or j!= 0:\n                new_x = x + i\n                new_y = y + j\n                adj.append((new_x, new_y))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    i,j = ele\n    n = len(sub)\n    if i > 0: \n        if j > 0: \n            sub.append((i-1,j-1))\n        if j < n-1: \n            sub.append((i-1,j+1))\n    if i < n-1: \n        if j > 0: \n            sub.append((i+1,j-1))\n        if j < n-1: \n            sub.append((i+1,j+1))\n    if j > 0: \n        sub.append((i,j-1))\n    if j < n-1: \n        sub.append((i,j+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    nrows, ncols = len(sub), len(sub[0])\n    adj_coords = []\n    if x - 1 >= 0:\n        adj_coords.append((x-1, y))\n    if y - 1 >= 0:\n        adj_coords.append((x, y-1))\n    if x + 1 < nrows:\n        adj_coords.append((x+1, y))\n    if y + 1 < ncols:\n        adj_coords.append((x, y+1))\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    x, y = ele\n    sub.append((x-1, y))\n    sub.append((x+1, y))\n    sub.append((x, y-1))\n    sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = [(x+dx, y+dy) for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]]\n    return adj_coords + sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert all whitespaces to underscore\n    text = text.replace(' ', '_')\n    # Convert all underscores to whitespaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # convert all whitespaces to underscores\n    text = text.replace(\" \", \"_\")\n    # convert all underscores to whitespaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = []\n    non_zero_index = []\n    \n    # Find all the zeroes and non-zeroes in the list\n    for index, num in enumerate(num_list):\n        if num == 0:\n            zero_index.append(index)\n        else:\n            non_zero_index.append(index)\n    \n    # Move all the zeroes to the end of the non-zeroes list\n    num_list[non_zero_index] = [0] * len(zero_index)\n    \n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.remove(num_list[i])\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n    for i in range(len(num_list)-zero_count-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    # loop through the list and move all zeroes to the end\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            break"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index == -1:\n        return num_list\n    else:\n        return num_list[:zero_index] + num_list[zero_index+1:]"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    # loop through the list backwards\n    for i in range(len(num_list)-1, -1, -1):\n        # check if the current element is zero\n        if num_list[i] == 0:\n            # if it is, move it to the end of the list\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for num in num_list:\n        if num!= 0:\n            new_list.append(num)\n    for i in range(len(new_list)):\n        if new_list[i] == 0:\n            for j in range(i, len(new_list)):\n                if new_list[j]!= 0:\n                    temp = new_list[i]\n                    new_list[i] = new_list[j]\n                    new_list[j] = temp\n                    break\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    new_list = []\n    for num in num_list:\n        if num!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers: left and right.\n    left = 0\n    right = 0\n    \n    # Iterate over the list and move zeroes to the end.\n    while right < len(num_list):\n        if num_list[right]!= 0:\n            # Swap the elements at the left and right pointers.\n            num_list[left], num_list[right] = num_list[right], num_list[left]\n            left += 1\n            right += 1\n        else:\n            right += 1\n    \n    # Return the modified list.\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            for j in range(len(num_list)-1, i-zero_count-1, -1):\n                num_list[j+1] = num_list[j]\n            num_list[i] = 0\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    # xor of all pairs of numbers\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes in a list of integers arr and the integer n.\n    It returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n, index=0):\n    if index == n:\n        return 0\n    else:\n        return (arr[index] ^ pair_xor_Sum(arr, n, index + 1))\n\ndef find_xor_sum(arr):\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum = xor_sum ^ arr[i]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list into a list of tuples (value, index)\n    data = [(value, index) for index, value in enumerate(iterable)]\n    # create a min heap from the list of tuples\n    hq.heapify(data)\n    # pop the smallest element from the heap and append it to the sorted list\n    sorted_list = []\n    while data:\n        # get the smallest element\n        min_value = data[0][0]\n        min_index = data[0][1]\n        # remove the smallest element from the heap\n        data.pop(0)\n        # append the smallest element to the sorted list\n        sorted_list.append(min_value)\n        # if there are any other elements left in the heap, push them back\n        if data:\n            data.append((min_value, min_index))\n    # return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using heap sort algorithm.\n\n    Args:\n        iterable (list): The list to be sorted.\n\n    Returns:\n        list: The sorted list.\n    '''\n    # Convert the list to a min heap\n    hq.heapify(iterable)\n    # Pop the smallest element from the heap\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable[0])\n        hq.heappop(iterable)\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = list(iterable)\n    heapq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # Convert the given list to a max heap\n    hq.heapify(iterable)\n\n    # Remove the maximum element from the heap\n    sorted_list = []\n    while hq.heappop(iterable) is not None:\n        sorted_list.append(hq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a max-heap\n    heapq.heapify(iterable)\n\n    # Build the max-heap in descending order\n    for i in range(len(iterable) // 2 - 1, -1, -1):\n        heapq.heappop(iterable)\n\n    # Extract the elements from the max-heap in descending order\n    sorted_list = [heapq.heappop(iterable) for i in range(len(iterable))]\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.heapify(iterable)\n    result = []\n\n    while heap:\n        result.append(hq.heappop(heap))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)-1, 0, -1):\n        hq.heappop(iterable)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Input:\n    actual_cost - the actual cost of the sale\n    sale_amount - the amount sold\n    \n    Output:\n    True if the sale has no profit and no loss, otherwise False\n    '''\n    \n    profit = actual_cost - sale_amount\n    \n    if profit > 0 and sale_amount > 0:\n        return False\n    elif profit < 0 and sale_amount < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == actual_cost:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return noprofit_noloss(actual_cost - sale_amount, sale_amount)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # check for no profit\n    if actual_cost > sale_amount:\n        print(\"The given amount has no profit and no loss\")\n        return True\n\n    # check for no loss\n    if sale_amount > actual_cost:\n        print(\"The given amount has no profit and no loss\")\n        return True\n\n    # if no profit or no loss, return False\n    print(\"The given amount has no profit and no loss\")\n    return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Args:\n        actual_cost: the actual cost of the sale\n        sale_amount: the amount of sale\n    \n    Returns:\n        True if the amount has no profit and no loss, False otherwise\n    '''\n\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Check if actual cost is greater than sale amount\n    if actual_cost > sale_amount:\n        return False\n\n    # Check if actual cost is less than sale amount\n    if actual_cost < sale_amount:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check whether the given amount has no profit and no loss\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # check if the sale amount is greater than or equal to the actual cost\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n\n    if actual_cost <= sale_amount:\n        print(\"No profit and no loss!\")\n    else:\n        print(\"Profit or loss exists.\")"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n    \n    Args:\n        v (float): Wind velocity in km/h.\n        t (float): Temperature in celsius.\n        \n    Returns:\n        int: Wind chill index rounded to the nearest integer.\n    \"\"\"\n    # Convert temperature to Kelvin\n    t_k = t + 273.15\n    \n    # Calculate the heat index\n    h = 0.5 * (v ** 2) + (0.6215 * math.log(t_k + 273.15)) - (0.3965 * math.log(v)) + (0.14)\n    \n    # Calculate the wind chill index\n    wc = round((t_k - 273.15) * (13.12 + 0.6215 * t_k - 11.37 * math.log(t_k + 273.15) + 0.3965 * v - 0.567 * math.log(v) + 0.2375 * math.log(v) ** 2))\n    \n    # Check if the wind chill index is less than 0 or greater than 100\n    if wc < 0:\n        wc = 0\n    elif wc > 100:\n        wc = 100\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert wind speed to m/s\n    ws = v * 1000\n    \n    # calculate the heat index from the formula:\n    # h = 13.12 + 0.6215 * (t - 273.15) - 11.37 * math.log(t) + 0.3965 * math.exp((t - 273.15) / 10)\n    h = 13.12 + 0.6215 * (t - 273.15) - 11.37 * math.log(t) + 0.3965 * math.exp((t - 273.15) / 10)\n    \n    # calculate the wind chill index as the minimum of the heat index and the actual wind speed\n    wc = min(h, ws)\n    \n    # round the wind chill index to the nearest integer\n    wc_int = round(wc)\n    \n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert temperature to Kelvin\n    k = t + 273.15\n\n    # Calculate the air density at constant pressure\n    rho = 1.215 * math.exp(17.27 * k / (k + 237.3))\n\n    # Calculate the heat capacity at constant pressure\n    cp = 1004.6 * math.exp(17.626 * k / (k + 237.3))\n\n    # Calculate the vapor pressure deficit (VPD)\n    vpd = 6.112 * math.exp(17.67 * k / (k + 237.3)) - 0.0065 * v * v\n\n    # Calculate the specific heat at constant pressure\n    h = cp / rho\n\n    # Calculate the heat transfer coefficient\n    tc = (35.75 + 0.6215 * vpd) / (13.333 * (h * v + 1.61 * vpd))\n\n    # Calculate the surface temperature of the air\n    T_s = math.exp((17.67 * k) / (k + 237.3)) - 273.15\n\n    # Calculate the wind chill index\n    W = int((tc / 4) + 32)\n\n    # Return the rounded wind chill index\n    return W"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert celsius to fahrenheit\n    t_f = (t * 9/5) + 32\n\n    # Calculate the wind chill index\n    wc_i = (13.12 + (0.6215 * v) + (11.37 * math.log(t_f)) - (0.3965 * v**2)) / 1.8\n\n    # Round the wind chill index to the nearest integer\n    wc_i = round(wc_i)\n\n    # Return the wind chill index\n    return wc_i"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_in_mph = v * 0.621371\n    if wind_speed_in_mph <= 10:\n        wind_chill_temp = 20\n    elif wind_speed_in_mph <= 25:\n        wind_chill_temp = 15\n    elif wind_speed_in_mph <= 40:\n        wind_chill_temp = 10\n    elif wind_speed_in_mph <= 55:\n        wind_chill_temp = 5\n    else:\n        wind_chill_temp = 0\n\n    if t >= wind_chill_temp:\n        return round(t)\n    else:\n        return round(wind_chill_temp - (t - 32) * 5 / 9)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        v (float): wind velocity in km/h.\n        t (float): temperature in celsius.\n\n    Returns:\n        int: wind chill index rounded to the next integer.\n    \"\"\"\n    # Formula for wind chill index\n    # Chill Index = 13.12 + 0.6215 * temperature - 11.37 * math.log(windSpeed) + 0.3965 * t\n\n    chill_index = 13.12 + 0.6215 * t - 11.37 * math.log(v) + 0.3965 * t\n\n    return int(round(chill_index))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -10 or t > 100:\n        raise ValueError(\"Temperature should be between -10 and 100 degrees Celsius.\")\n    if v < 0:\n        raise ValueError(\"Wind velocity should be positive.\")\n    # calculate the wind chill\n    wch = 35.74 + 0.6215*t - 35.75*math.log(v) + 0.4275*t*v + 0.000001*t**2*v**2\n    # round the wind chill to the nearest integer\n    wch_int = round(wch)\n    return wch_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # convert the temperature to Kelvin\n    k = t + 273.15\n    \n    # calculate the dew point temperature using the Romero-Solomon algorithm\n    def dewpoint(k):\n        c1 = 6.112\n        c2 = 17.67\n        c3 = 243.04\n        c4 = 0.0065\n        return (c1*math.exp((17.67*k)/(c2+k)) + c3)/(c4+c2)\n    \n    # calculate the wind chill index\n    wci = (13.12 + (0.6215*v) - (11.37*math.log(k)) + (0.3965*math.log(k)**2))/(2.75)\n    \n    # check if the wind chill index is below the dew point temperature\n    if wci < dewpoint(k):\n        return math.ceil(wci)\n    else:\n        return math.floor(wci)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    # Calculate the wind speed in m/s\n    ws = v * 1.60934 # convert km/h to m/s\n    \n    # Calculate the factorial of the number of times we need to multiply the wind speed by 24\n    factorial = 1\n    for i in range(24):\n        factorial *= ws\n    \n    # Calculate the wind chill index using the formula above\n    wci = 13.12 + 0.6215 * t - 11.37 * t**2/5 + 0.3965 * t**3/36\n    \n    # Round the wind chill index to the nearest integer\n    wci = math.ceil(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill_factor = (t - 32) * 5/9\n    chill_temp = math.floor(chill_factor + 32)\n    chill_index = math.floor((13.12 + 0.6215*v + 11.37*(v**0.16) - 0.3965*t) * (t + 273.15) / (17.625*v**0.16 + 243.79*t + 11.37))\n    chill_index = math.floor(chill_index + 273.15)\n\n    return chill_index"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum to 0\n    sum_length = 0\n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If the name starts with a lowercase letter, skip it\n            continue\n        # Otherwise, add the length of the name to the sum\n        else:\n            sum_length += len(name)\n    # Return the sum of the lengths of the non-lowercase names\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Function to check if a name starts with a lowercase letter\n    def start_with_lower_case(name):\n        return name[0].islower()\n\n    # Function to calculate the length of a name\n    def name_length(name):\n        return len(name)\n\n    # Filter out names starting with a lowercase letter\n    filtered_names = list(filter(lambda x: not start_with_lower_case(x), sample_names))\n\n    # Calculate the sum of the length of the filtered names\n    total_length = sum(name_length(name) for name in filtered_names)\n\n    # Return the total length of the filtered names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Initialize the sum variable to 0\n    sum_length = 0\n\n    # Loop through each name in the list\n    for name in sample_names:\n        # Remove any names that start with a lowercase letter\n        if not name.startswith(name[0].upper()):\n            # Add the length of the remaining name to the sum\n            sum_length += len(name)\n\n    # Return the sum of the lengths of the names after removing the lowercase ones\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = []\n    for name in sample_names:\n        if name[0].isupper():\n            filtered_names.append(name)\n    total_length = 0\n    for name in filtered_names:\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of names' lengths\n    total_length = 0\n\n    # Loop through each name in the list\n    for name in sample_names:\n        # If the name starts with a lowercase letter, skip it and move to the next name\n        if name[0].islower():\n            continue\n        # Otherwise, add the length of the name to the total length variable\n        else:\n            total_length += len(name)\n\n    # Return the total length of all the names that start with a lowercase letter\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if not name[0].islower()]\n    return sum(len(name) for name in names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            result += len(name)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n\n    # Use regex to extract the parenthesis and their contents\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove the parenthesis\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # remove the whitespace and convert to lowercase\n    items = items.replace(' ', '').lower()\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all the parenthesis and what is inbetween them using regular expressions\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n    # Remove all the extra spaces and tabs\n    items = re.sub('\\s+','', items)\n    items = items.strip()\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'  # regex pattern to match any parenthesis\n    items = re.sub(pattern, '', items)  # remove parenthesis using regex sub()\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r\"\\((.*?)\\)\"\n    return re.sub(pattern, r\"\\1\", items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function removes the parenthesis and what is inbetween them from a string.\n    '''\n\n    # Replace all the parenthesis with an empty string\n    items = re.sub(r'\\([^)]*\\)', '', items)\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = re.compile(r'(?<=\\().*?(?=\\))')\n    return regex.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r\"\\([^)]*\\)\")\n    return pattern.sub(\"\", items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return 'Please enter a positive integer.'\n\n    nonagonal = 0\n    for i in range(1, n+1):\n        nonagonal += (i * (2*i - 1))\n\n    return nonagonal\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = 0\n    i = 1\n    while i <= n:\n        nonagonal += i*2*i\n        i += 1\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # First, we find the number of squares in the side of a square with side n.\n    # This is the number of squares in the side.\n    num_squares = n * (n + 1) // 2\n\n    # Next, we find the area of a rectangle with side n.\n    # This is the area of the rectangle.\n    area = n * n\n\n    # Finally, we return the nonagonal number.\n    return num_squares - area"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(1, n+1):\n        j = (i*(i+1))//2\n        if i*i == j*j:\n            return i\n    return None"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (2*n-1)**2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize variables\n    row = 1\n    col = n\n    \n    # Loop through the nonagonal numbers\n    while col > 0:\n        # Check if the current number is nonagonal\n        if row == col:\n            print(row)\n            row += 1\n            col -= 1\n        # Move to the next row\n        row += 1\n        col -= 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # define the formula for nth nonagonal number\n    formula = (1 + 8*n) * (1 + 8*n) / 2\n\n    # calculate the nth nonagonal number using the formula\n    result = int(formula)\n\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    first_nonagonal = 1\n    second_nonagonal = 4\n    \n    for i in range(2, n+1):\n        third_nonagonal = (first_nonagonal + second_nonagonal) // 2\n        first_nonagonal = second_nonagonal\n        second_nonagonal = third_nonagonal\n        \n    return first_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(n):\n        if i % 2 == 0:\n            yield i**2\n        else:\n            yield i**2 + (2*i-1)**2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n\n    # Initialize the sum of the first n nonagonal numbers to 0\n    nonagonal_sum = 0\n\n    # Initialize the sum of the second n nonagonal numbers to n\n    second_nonagonal_sum = n\n\n    # Loop through the first n nonagonal numbers\n    for i in range(n):\n        # Add the current nonagonal number to the sum of the first n nonagonal numbers\n        nonagonal_sum += i\n\n        # Add the difference between the current nonagonal number and the current second nonagonal number to the sum of the second n nonagonal numbers\n        second_nonagonal_sum += abs(i - n)\n\n    # Return the sum of the first n nonagonal numbers\n    return nonagonal_sum"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a regular expression pattern that matches a word containing 'z'\n    pattern = r'\\b(z)\\w*\\b'\n    \n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Check if there are any matches at the start or end of the word\n    if matches[0][0] == 'z' or matches[-1][-1] == 'z':\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a pattern to match words containing 'z' except at the start and end of the word\n    pattern = r'\\b(?:[^z][zZ][^z]|[^zZ][zZ][^zZ]|[^zZ][^zZ][zZ]|[^zZ][^zZ][^zZ])[a-zA-Z]*\\b'\n    # Use the pattern to search for matches in the text\n    matches = re.findall(pattern, text)\n    # Check if any matches were found\n    if matches:\n        # Return True if a match was found\n        return True\n    # If no matches were found, return False\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove all punctuation except for apostrophes and hyphens\n    text = re.sub(r'[^a-zA-Z\\s-]', '', text)\n    \n    # Split the text into words\n    words = text.split()\n    \n    # Loop through each word and check if it ends with 'z' and if it is not at the beginning or end of the word\n    for word in words:\n        if word.endswith('z') and word!= words[0] and word!= words[-1]:\n            return True\n    \n    # If no 'z' was found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"(?<=[^a-zA-Z])z(?=[^a-zA-Z])\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    for word in words:\n        if 'z' in word:\n            if word[0] == 'z' and word[-1] == 'z':\n                continue\n            elif word[0] == 'z':\n                return False\n            elif word[-1] == 'z':\n                return False\n    return True"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = re.compile(r\"(?<!\\w)z(?!\\w)\")\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            continue\n        elif word[0] == 'z' or word[-1] == 'z':\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<=\\b)z(?=\\b)'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Define regular expression pattern to match 'z' in the middle of a word\n    pattern = r'\\b(z)\\w*\\b'\n\n    # Use regex.search() method to check if 'z' is present in the middle of the string\n    match = re.search(pattern, text)\n\n    # If 'z' is present, return True\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![a-zA-Z])[zZ](?![a-zA-Z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    start = 0\n    end = k-1\n\n    while start < end: \n        # swap the elements at start and end positions \n        input[start], input[end] = input[end], input[start] \n        start += 1 \n        end -= 1 \n\n    # reverse the remaining elements \n    start = k\n    end = n-1 \n\n    while start < end: \n        # swap the elements at start and end positions \n        input[start], input[end] = input[end], input[start] \n        start += 1 \n        end -= 1 \n\n    return input "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    # Reverse the array from 0 to k-1\n    input[:k] = input[:k][::-1]\n    # Reverse the array from k to n-1\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # Find the length of the array\n    n = len(input)\n    # Reverse the array up to the given position\n    for i in range(k-1, -1, -1):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    length = len(input)\n    if k >= length:\n        return input\n    else:\n        reverse_array = input[::-1]\n        return reverse_array[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array from index 0 to k-1\n    input[:k] = input[:k][::-1]\n    \n    # reverse the array from k to the end\n    input[k:] = input[k:][::-1]\n    \n    # return the modified array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(0, k, -1):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        print(\"Error: k should be less than or equal to the length of the input array.\")\n        return\n    \n    # Reverse the input array from the first element to the k-1th element\n    for i in range(k-1, -1, -1):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    \n    # Print the reversed array\n    print(\"Reversed array:\", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    # reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k-1, n-1, -1):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input[:k]\n"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    new_tup = new_tup + tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup += (key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return tuple(test_tup) + tuple(test_dict.values())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Add the dictionary to the tuple\n    test_tup += (test_dict,)\n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary with the key-value pairs from the dictionary and the tuple\n    combined_dict = {**test_dict, **test_tup}\n    # convert the combined dictionary to a tuple\n    final_tup = tuple(combined_dict.items())\n    # return the final tuple\n    return final_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary that will be merged with the original tuple\n    new_dict = {**test_dict}\n    # Combine the original tuple with the new dictionary\n    final_tuple = test_tup + tuple(new_dict.items())\n    return final_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key, value in test_dict.items():\n        test_tup += (key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup = test_tup + tuple(test_dict.items())\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup, test_dict)\n    return test_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def dfs(i, j, path):\n        if i == len(cost) - 1 and j == len(cost[0]) - 1:\n            path_cost = sum(cost[i][j])\n            path_cells = len(path)\n            return path_cost, path_cells\n        \n        if i < len(cost) and i >= 0 and j < len(cost[0]) and j >= 0:\n            dfs(i+1, j, path+[(i,j)])\n            dfs(i, j+1, path+[(i,j)])\n    \n    max_avg = float('-inf')\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if cost[i][j] > 0:\n                avg, cells = dfs(i, j, [(i,j)])\n                max_avg = max(max_avg, avg/cells)\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    max_average = 0\n    total_cost = 0\n    visited_cells = 0\n    current_row = 0\n    current_col = 0\n    \n    # Traverse the matrix in a grid fashion\n    while current_row < len(cost) and current_col < len(cost[0]):\n        \n        # Check if the current cell is a path end\n        if current_row == len(cost)-1 and current_col == len(cost[0])-1:\n            \n            # Compute the cost of the path and update the maximum average\n            path_cost = cost[current_row][current_col]\n            total_cost += path_cost\n            visited_cells += 1\n            if visited_cells > 0:\n                max_average = max(max_average, total_cost/visited_cells)\n            \n            # Move to the next cell\n            current_row += 1\n            current_col += 1\n            \n        # Check if the current cell is a path start\n        elif current_row == 0 and current_col == 0:\n            \n            # Compute the cost of the path and update the maximum average\n            path_cost = cost[current_row][current_col]\n            total_cost += path_cost\n            visited_cells += 1\n            if visited_cells > 0:\n                max_average = max(max_average, total_cost/visited_cells)\n            \n            # Move to the next cell\n            current_row += 1\n            current_col += 1\n            \n        # Check if the current cell is a valid path\n        elif cost[current_row][current_col] < cost[current_row][current_col-1] and cost[current_row][current_col] < cost[current_row-1][current_col]:\n            \n            # Move right\n            current_col += 1\n            \n        # Check if the current cell is a valid path\n        elif cost[current_row][current_col] < cost[current_row-1][current_col] and cost[current_row][current_col] < cost[current_row][current_col-1]:\n            \n            # Move down\n            current_row += 1\n            \n        # Check if the current cell is a valid path\n        elif cost[current_row][current_col] < cost[current_row-1][current_col-1]:\n            \n            # Move diagonally up-right\n            current_row += 1\n            current_col += 1\n            \n        # Check if the current cell is a valid path\n        elif cost[current_row][current_col] < cost[current_row][current_col-1] and cost[current_row][current_col] < cost[current_row-1][current_col]:\n            \n            # Move diagonally up-left\n            current_row += 1\n            current_col -= 1\n            \n        # Check if the current cell is a valid path\n        elif cost[current_row][current_col] < cost[current_row-1][current_col] and cost[current_row][current_col] < cost[current_row][current_col-1]:\n            \n            # Move diagonally down-left\n            current_row -= 1\n            current_col -= 1\n            \n        # Check if the current cell is a valid path\n        elif cost[current_row][current_col] < cost[current_row-1][current_col-1]:\n            \n            # Move diagonally down-right\n            current_row -= 1\n            current_col += 1\n    \n    # Return the maximum average\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n\n    for i in range(N-1):\n        for j in range(i+1, N):\n            dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + cost[i][j]\n\n    max_avg = max(dp[0][i] for i in range(N))\n    avg = max_avg/N\n\n    return avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n\n    # Initialize variables\n    path_cost = 0\n    visited_cells = set()\n    max_avg = 0\n\n    # Iterate through all possible paths\n    for i in range(N):\n        for j in range(N):\n            # Skip visited cells\n            if (i, j) in visited_cells:\n                continue\n\n            # Try to move right or down\n            if j < N - 1:\n                # Move right\n                path_cost += cost[i][j]\n                visited_cells.add((i, j))\n                if i == N - 1:\n                    avg = path_cost / (i + 1)\n                    if avg > max_avg:\n                        max_avg = avg\n                    path_cost -= cost[i][j]\n                    visited_cells.remove((i, j))\n            if i < N - 1:\n                # Move down\n                path_cost += cost[i][j]\n                visited_cells.add((i, j))\n                if j == N - 1:\n                    avg = path_cost / (j + 1)\n                    if avg > max_avg:\n                        max_avg = avg\n                    path_cost -= cost[i][j]\n                    visited_cells.remove((i, j))\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def dfs(i, j, current_sum, current_path):\n        nonlocal max_sum, paths\n        if i == N-1 and j == N-1:\n            if current_sum == 0:\n                current_path.append(current_path[-1])\n            paths.append(current_path)\n            if current_sum > max_sum:\n                max_sum = current_sum\n        else:\n            if j < N-1:\n                dfs(i, j+1, current_sum + cost[i][j], current_path + [(i,j)])\n            if i < N-1:\n                dfs(i+1, j, current_sum + cost[i][j], current_path + [(i,j)])\n    \n    max_sum = 0\n    paths = []\n    N = len(cost)\n    dfs(0, 0, 0, [(0,0)])\n    return max_sum"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    paths = []\n    visited = set()\n    max_avg = 0\n\n    def helper(i, j, curr_cost, curr_path):\n        if i == N-1 and j == N-1:\n            paths.append(curr_path)\n            if curr_cost > max_avg:\n                max_avg = curr_cost\n            return\n\n        if (i, j) in visited:\n            return\n\n        if i < N-1:\n            helper(i+1, j, curr_cost+cost[i][j], curr_path+'R')\n        if j < N-1:\n            helper(i, j+1, curr_cost+cost[i][j], curr_path+'D')\n\n        visited.add((i, j))\n\n    helper(0, 0, cost[0][0], 'U')\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    n = len(cost)\n    max_avg = 0\n    \n    # Calculate the sum of each row and column\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n        for j in range(n):\n            row_sum += cost[i][j]\n            col_sum += cost[j][i]\n        max_avg = max(max_avg, row_sum/n)\n        max_avg = max(max_avg, col_sum/n)\n    \n    # Calculate the sum of diagonals\n    diag_sum = cost[0][0] + cost[n-1][n-1]\n    max_avg = max(max_avg, diag_sum/2)\n    \n    # Calculate the sum of the rest of the matrix\n    for i in range(1, n-1):\n        for j in range(1, n-1):\n            rest_sum = cost[i][j-1] + cost[i-1][j] + cost[i+1][j] + cost[i][j+1]\n            max_avg = max(max_avg, rest_sum/4)\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n\n    # calculate the cumulative sum of the cost for each row\n    for i in range(N):\n        cost[i] = [cost[i][j] + sum(cost[k][j] for k in range(i)) for j in range(N)]\n\n    # calculate the cumulative sum of the cost for each column\n    for j in range(N):\n        cost[:, j] = [cost[i][j] + sum(cost[i][k] for k in range(j)) for i in range(N)]\n\n    # calculate the cumulative sum of the cost for the upper half of the matrix\n    for k in range(N//2):\n        cost[k][k] = cost[k][k] + sum(cost[i][k] for i in range(N//2, N))\n\n    # calculate the cumulative sum of the cost for the lower half of the matrix\n    for k in range(N//2, N):\n        cost[k][k] = cost[k][k] + sum(cost[i][k] for i in range(N//2, N))\n\n    # initialize variables for the maximum path and its average\n    max_path = [0, 0]\n    max_avg = 0\n\n    # calculate the maximum path\n    for i in range(N-1):\n        for j in range(N-1):\n            if cost[i+1][j+1] > cost[i+1][j] and cost[i+1][j+1] > cost[i][j+1]:\n                max_path = [i, j]\n                max_avg = cost[i+1][j+1] / (i+j+1)\n            elif cost[i+1][j] > cost[i][j+1]:\n                max_path = [i+1, j]\n                max_avg = cost[i+1][j] / (i+j+1)\n            else:\n                max_path = [i, j+1]\n                max_avg = cost[i][j+1] / (i+j+1)\n\n    # calculate the maximum average for the entire matrix\n    avg = sum(cost[i][j] for i in range(N) for j in range(N)) / N / N\n    if avg > max_avg:\n        max_avg = avg\n\n    # print the results\n    print(\"Maximum path:\", max_path)\n    print(\"Maximum average:\", max_avg)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # initialize an empty dictionary to store the average of each path\n    paths = {}\n\n    # initialize a helper function to calculate the average of a path\n    def average(path):\n        # initialize a variable to store the sum of costs\n        cost_sum = 0\n        # initialize a variable to store the number of visited cells\n        num_cells = 0\n        # loop through each cell in the path\n        for i in range(N):\n            for j in range(N):\n                # if the current cell has a cost, add it to the cost sum and increment the number of cells visited\n                if cost[i][j]!= 0:\n                    cost_sum += cost[i][j]\n                    num_cells += 1\n        # return the average cost\n        return cost_sum / num_cells\n\n    # loop through each path starting from the top-left cell\n    for i in range(N):\n        for j in range(N):\n            # if the current cell has a cost, initialize the path dictionary with the average of the path as the value\n            if cost[i][j]!= 0:\n                paths[(i, j)] = average([(i, j)])\n\n    # loop through each path starting from the top-right cell\n    for i in range(N-2, -1, -1):\n        for j in range(N-2, -1, -1):\n            # if the current cell has a cost, initialize the path dictionary with the average of the path as the value\n            if cost[i][j]!= 0:\n                # get the average of the path starting at the current cell and append the current cell to the path\n                current_path = [(i, j)]\n                # loop through each cell in the path and add the costs of the adjacent cells to the cost sum and increment the number of cells visited\n                for k in range(1, 4):\n                    current_i, current_j = i+k, j\n                    if 0 <= current_i < N and 0 <= current_j < N:\n                        if cost[current_i][current_j]!= 0:\n                            current_path.append((current_i, current_j))\n                            cost_sum = sum([cost[current_i][current_j] for current_i, current_j in current_path])\n                            num_cells = len(current_path)\n                            paths[(i, j)] = max(paths[(i, j)], cost_sum / num_cells)\n                            current_path.pop()\n\n    # get the maximum average of all paths\n    max_average = 0\n    for path in paths.values():\n        max_average = max(max_average, path)\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # get the dimensions of the matrix\n    N = len(cost)\n\n    # initialize the variables to keep track of the maximum average and the corresponding path\n    max_avg = 0\n    path = []\n\n    # iterate through all possible paths from the top-left cell\n    for i in range(N):\n        for j in range(N):\n\n            # check if the current cell is part of the path\n            if i == 0 and j == 0:\n                continue\n\n            # check if the current cell is the bottom right cell\n            if i == N-1 and j == N-1:\n                path.append((i,j))\n                avg = sum([cost[i][j]] + [cost[x][y] for x in range(i) for y in range(j)]) + sum([cost[i][y] for x in range(i) for y in range(j)]) + sum([cost[x][j] for x in range(i) for y in range(j)]) + sum([cost[x][y] for x in range(i) for y in range(j) if x!= i and y!= j])\n                if avg > max_avg:\n                    max_avg = avg\n                    path = [(i,j)]\n                continue\n\n            # check if the current cell is adjacent to the bottom right cell\n            if i > 0 and j > 0:\n                avg = sum([cost[i][j]] + [cost[x][y] for x in range(i) for y in range(j) if x!= i and y!= j]) + sum([cost[i][y] for x in range(i) for y in range(j) if x!= i and y!= j]) + sum([cost[x][j] for x in range(i) for y in range(j) if x!= i and y!= j])\n                if avg > max_avg:\n                    max_avg = avg\n                    path = [(i,j)]\n\n            # check if the current cell can be reached downwards\n            if i > 0:\n                avg = sum([cost[i][j]] + [cost[x][y] for x in range(i) for y in range(j) if x!= i and y!= j]) + sum([cost[i][y] for x in range(i) for y in range(j) if x!= i and y!= j])\n                if avg > max_avg:\n                    max_avg = avg\n                    path = [(i,j)]\n\n            # check if the current cell can be reached rightwards\n            if j < N-1:\n                avg = sum([cost[i][j]] + [cost[x][y] for x in range(i) for y in range(j) if x!= i and y!= j]) + sum([cost[i][y] for x in range(i) for y in range(j) if x!= i and y!= j])\n                if avg > max_avg:\n                    max_avg = avg\n                    path = [(i,j)]\n\n            # if the current cell is the last cell in the path, append it to the list of paths\n            if i == N-1 and j == N-1:\n                path.append((i,j))\n                avg = sum([cost[i][j]] + [cost[x][y] for x in range(i) for y in range(j)]) + sum([cost[i][y] for x in range(i) for y in range(j)]) + sum([cost[x][j] for x in range(i) for y in range(j)]) + sum([cost[x][y] for x in range(i) for y in range(j) if x!= i and y!= j])\n                if avg > max_avg:\n                    max_avg = avg\n                    path = [(i,j)]\n\n    # return the path with the maximum average\n    return path"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    return {k: v for k, v in students.items() if v[0] > h and v[1] > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = students[name]\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # create an empty list to store the filtered students\n    filtered_students = []\n\n    # loop through all students in the dictionary\n    for name, data in students.items():\n        # unpack the data tuple\n        height, weight = data\n\n        # check if the student's height and weight are above the minimum\n        if height > h and weight > w:\n            # add the student to the filtered students list\n            filtered_students.append(name)\n\n    # return the filtered students list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students\n"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_same_pair(nums1, nums2):"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # initialize an empty dictionary to store the count of each value in nums1\n    count_dict = {}\n    \n    # iterate over nums1 and update the count of each value in the dictionary\n    for i in range(len(nums1)):\n        count_dict[nums1[i]] = count_dict.get(nums1[i], 0) + 1\n    \n    # initialize an empty list to store the indices where the values in nums1 and nums2 are the same\n    same_indices = []\n    \n    # iterate over nums2 and check if its value is present in the count dictionary\n    for i in range(len(nums2)):\n        if nums2[i] in count_dict and count_dict[nums2[i]] > 0:\n            count_dict[nums2[i]] -= 1\n            if count_dict[nums2[i]] == 0:\n                same_indices.append(i)\n    \n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_indices = []\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            same_indices.append(i)\n    return len(same_indices)"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            result.append(i)\n    return result"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit ** power\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    digits = []\n    while base > 0:\n        digits.append(base % 10)\n        base //= 10\n    return sum([int(digit) ** power for digit in digits])"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    sum = 0\n    while power > 0:\n        sum += base % 10\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize sum variable to 0\n    total = 0\n\n    # Convert the base to a string\n    base_str = str(base)\n\n    # Convert the power to a string\n    power_str = str(power)\n\n    # Iterate through the string of digits of base\n    for digit in base_str:\n        # Convert each digit to an integer\n        digit_int = int(digit)\n\n        # Iterate through the string of digits of power\n        for power_digit in power_str:\n            # Convert each power digit to an integer\n            power_digit_int = int(power_digit)\n\n            # Calculate the sum of the digits at each position\n            total += digit_int * (base ** power_digit_int)\n\n    # Return the total sum\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string so that we can iterate over its digits\n    base_str = str(base)\n    # initialize the sum to zero\n    total = 0\n    # loop through the digits of the base string and add them up to the total\n    for digit in base_str:\n        total += int(digit)\n    # calculate the sum of digits raised to the power and add it to the total\n    total += total ** power\n    # return the total sum\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to integer\n    base = int(base)\n    # initialize sum variable\n    total = 0\n    # loop through each digit of base\n    for digit in str(base):\n        # convert digit to integer and calculate power of digit\n        digit_power = int(digit) ** power\n        # add digit to total\n        total += digit_power\n    # return total\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize sum variable to 0\n    total = 0\n\n    # Loop through the power times the base\n    for i in range(power * len(str(base))):\n        # Extract the last digit of the base\n        digit = base % 10\n\n        # Add the last digit to the total\n        total += digit\n\n        # Remove the last digit of the base\n        base //= 10\n\n    # Return the total sum\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    while power > 0:\n        base_sum += int(base[-1])\n        power -= 1\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Calculate the sum of all digits of the base to the specified power\n    base_sum = sum(int(digit) ** power for digit in str(base))\n    return base_sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")(.*)(?=\")'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'  # matching pattern for extracting quoted values\n    matches = re.findall(pattern, text1)  # using re.findall() function to extract all matches\n\n    # creating a list of extracted values\n    extracted_values = []\n    for match in matches:\n        # removing the first and last character of the quoted value\n        extracted_values.append(match[1:-1])\n\n    return extracted_values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expression to extract values between quotation marks\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Extract values between quotation marks \" \" of the given string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'\"([^\"]*)\"'\n    # Use the `re.findall` function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return a list of all the extracted quotations\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    # Use regular expressions to find all the quotation marks \" \" in the string\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    \n    # Return the list of extracted quotations\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\").*?(?=\")'\n    match = re.findall(pattern, text1)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'(?<!\\\\)\"(.*?)\"')\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    new_tup = []\n    for i in range(N):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(new_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) // 2\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+N])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"Input tuple must have an even length\")\n    N = len(test_tup) // 2\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+N])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = []\n    for i in range(len(test_tup)-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (test_tup[0], test_tup[1])\n    for i in range(2, N+1):\n        result_tup += (test_tup[i]*test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    length = len(test_tup) - 1\n    result = []\n    for i in range(length):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result + (test_tup[-1] * test_tup[0],)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1] * test_tup[-2],)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns the sum of the elements of the two lists.\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Check that both lists have the same length\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Both lists must have the same length.\")\n    # Initialize a new empty list to store the result\n    result = []\n    # Loop through both lists and add the corresponding elements\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    # Return the new list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        print(\"Lists should be of equal length\")\n        return\n\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = list(set(nums)) # Remove duplicates\n    groups = []\n    for item in nums:\n        if not groups or item!= groups[-1][-1]:\n            groups.append([item])\n        else:\n            groups[-1].append(item)\n    return [group for group in groups if len(group) > 1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        if key in (None, 0):\n            result.extend(group)\n        elif key == 1:\n            continue\n        else:\n            result.append(key)\n            result.extend(group)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        if key == nums[-1]:\n            result.extend(group)\n        else:\n            result.append(key)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(enumerate(nums), lambda x: x[1] == nums[x[0]-1]))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for i, group in groupby(enumerate(nums), lambda x: x[1] == x[0][1]):\n        if not group:\n            continue\n        for _ in group:\n            result.append(i[0])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    list: A list of integers with consecutive duplicates removed.\n    \"\"\"\n    # Use itertools.groupby to group the numbers by their corresponding indices\n    grouped_nums = groupby(enumerate(nums), lambda x: x[0] - x[1])\n\n    # Loop through the grouped_nums and remove any consecutive duplicates\n    cleaned_nums = []\n    for index, group in grouped_nums:\n        if len(list(group)) > 1:\n            cleaned_nums.append(index)\n\n    # Convert the cleaned_nums list to a set to remove duplicates\n    return list(set(cleaned_nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for key, group in groupby(enumerate(nums), lambda x: x[1] == x[0] + 1)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n    '''\n    return [list(g) for k, g in groupby(enumerate(nums), lambda x: x[1] == x[0] + 1)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    # Convert the list to a set to eliminate duplicates\n    unique_nums = set(nums)\n    # Convert the set back to a list for sorting\n    sorted_unique_nums = sorted(unique_nums)\n    # Group the numbers by their difference\n    consecutive_groups = [list(group) for k, group in groupby(sorted_unique_nums, lambda x: x - min(unique_nums))]\n    # Remove any groups with only one number in them\n    non_consecutive_groups = [group for group in consecutive_groups if len(group) > 1]\n    # Merge consecutive duplicates back into a list\n    consecutive_duplicates_removed = []\n    for group in non_consecutive_groups:\n        if group[0]!= group[-1]:\n            consecutive_duplicates_removed.extend(group)\n    # Return the result\n    return consecutive_duplicates_removed"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi*(r**2)\n    area = (s*h)/3\n    print(\"The lateral surface area of the cone is:\", area)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = 2 * math.pi * r * h\n    print(\"Lateral surface area of the cone is: \", lateral_surface_area)\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given its radius r and height h.\n    '''\n    # Calculate the area of the cylinder\n    cylinder_area = math.pi * r**2\n    \n    # Calculate the height of the cone\n    cone_height = 2 * h\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = cylinder_area + cone_height\n    \n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    theta = math.asin(h/r)\n    return pi * r**2 * math.sin(theta)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # Calculate the lateral surface area using the formula\n    # A = pi * r^2 * h\n    area = math.pi * r**2 * h\n    \n    # Return the lateral surface area\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area using the formula\n    # A = pi * r^2 * h\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi*(r**2) # surface area of the cylinder\n    A = s + math.pi*(r**2) # lateral surface area of the cone\n    lateral_surface_area = A/h # lateral surface area of the cone divided by height h\n    \n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # pi constant is a predefined mathematical constant\n    pi = math.pi\n    # Lateral surface area of a cone is pi * r^2 * h / 3\n    lateral_surface_area = pi * r**2 * h / 3\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = r'\\s+|,|\\.'\n    text = re.sub(special_chars, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define regular expression pattern for spaces, commas, and dots\n    pattern = r'[\\s,\\.]'\n    # use re.sub() to replace all occurrences of pattern with colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[,.]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_characters = [' ', ',', '.']\n    for char in special_characters:\n        text = text.replace(char, ':')\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[^a-zA-Z0-9]')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Use regular expressions to find all occurrences of spaces, commas, or dots\n    pattern = re.compile(r'[\\s.,;:]+')\n    # Use the replace() function to replace all occurrences of spaces, commas, or dots with a colon\n    text = pattern.sub(':', text)\n    # Return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[^\\w\\s]')\n    text = pattern.sub('', text)\n    text = re.sub(r'\\s+',':',text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = re.compile(r'[,.]')\n    result = pattern.sub(':', text)\n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s.,]+'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define the pattern to search for\n    pattern = r'[,;\\.]'\n\n    # replace the pattern with colon and return the modified string\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes a sorted array A and a number x as input and returns the index of the first occurrence of x in A.\n    \"\"\"\n    # Initialize the index of the first occurrence of x\n    first_occurrence_index = -1\n    \n    # Iterate through the array A using two pointers\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if the number at the middle index is equal to x\n        if A[mid] == x:\n            # If it is, update the index of the first occurrence of x\n            first_occurrence_index = mid\n            \n            # If the number at the left index is also equal to x, increment the left pointer\n            if mid == 0 or A[mid-1]!= x:\n                left = mid + 1\n            \n            # If the number at the right index is also equal to x, decrement the right pointer\n            else:\n                right = mid - 1\n        \n        # If the number at the middle index is less than x, increment the left pointer\n        elif A[mid] < x:\n            left = mid + 1\n        \n        # If the number at the middle index is greater than x, decrement the right pointer\n        else:\n            right = mid - 1\n    \n    # Return the index of the first occurrence of x\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i\n"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the index to -1\n    index = -1\n\n    # Iterate through the sorted array\n    for i in range(len(A)):\n        # Check if the current element is equal to the target element\n        if A[i] == x:\n            # If it is, set the index to the current index\n            index = i\n            # Break out of the loop\n            break\n\n    # Return the index of the first occurrence\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # binary search to find the first occurrence of x in A\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            left = mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # return the index of the first occurrence of x in A\n    return left"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1  # if the number is not found in the array"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # check if the array is sorted in ascending order\n    if A[0] <= A[-1]:\n        # loop through the array and find the first occurrence of x\n        for i in range(len(A)):\n            if A[i] == x:\n                return i\n    # array is not sorted in ascending order\n    else:\n        # loop through the array in reverse order and find the first occurrence of x\n        for i in range(len(A)-1, -1, -1):\n            if A[i] == x:\n                return i\n    # x is not in the array\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    product = 1\n    total_sum = 0\n    for i in range(n):\n        subarray_product = 1\n        for j in range(i, n):\n            subarray_product *= arr[j]\n        product *= subarray_product\n        total_sum += product\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n\n    # Calculate the prefix sum of the array\n    prefix_sum = [0] * n\n    prefix_sum[0] = arr[0]\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i]\n\n    # Initialize the result\n    result = 0\n\n    # Calculate the products of all subarrays of length k\n    for k in range(2, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            product = 1\n            for l in range(i, j+1):\n                product *= arr[l]\n            result += product * prefix_sum[j]\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        prefix_sum = sum(arr[:i+1])\n        suffix_sum = sum(arr[i+1:])\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            if j >= i:\n                res += prefix_sum * suffix_sum * prod\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Finding maximum subarray length\n    max_len = 1\n    while max_len * 2 <= n:\n        max_len *= 2\n    \n    # Taking maximum subarray length as 2^n\n    max_len = 1 << n\n    \n    # Initializing matrix to store sum of products of subarrays\n    dp = [[0 for j in range(max_len)] for i in range(n+1)]\n    \n    # Initializing values of dp[0][j] to 1 where j is the value of first element of subarray\n    for j in range(1, max_len+1):\n        dp[0][j] = 1\n    \n    # Calculating values of dp[i][j]\n    for i in range(1, n+1):\n        for j in range(1, max_len+1):\n            # If the value of i-th element is greater than j-th element\n            if arr[i-1] > arr[i-1+j-1]:\n                # Updating dp[i][j]\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n    \n    # Returning sum of products of subarrays\n    return dp[n][max_len]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod = 1\n    ans = 0\n    for i in range(n):\n        prod *= arr[i]\n        ans += prod\n        if i > 0:\n            prod *= arr[i-1]\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    curr_sum = 1\n    subarray_product = 1\n    for i in range(n):\n        if i == 0:\n            curr_sum = 1\n        else:\n            curr_sum *= arr[i]\n        subarray_product *= arr[i]\n        if i == n - 1:\n            max_sum = max(max_sum, curr_sum)\n        else:\n            max_sum = max(max_sum, curr_sum + subarray_product - arr[i+1])\n    return max_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Calculate the product of all elements in the list\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    \n    # Calculate the cumulative product of all elements\n    cum_prod = [0] * (n+1)\n    cum_prod[0] = prod\n    for i in range(1, n+1):\n        cum_prod[i] = cum_prod[i-1] * arr[i-1]\n    \n    # Calculate the sum of products of all possible sublists\n    subarray_sum = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            subarray_sum += cum_prod[j] - cum_prod[i-1]\n    \n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize two variables to store the sum of products of subarrays\n    # and their maximum value so far\n    sum_of_products = [0] * n\n    max_sum = 0\n\n    # Iterate through all possible sublists of the given array\n    for i in range(1, n + 1):\n        # Calculate the sum of products of the subarray\n        for j in range(n - i + 1):\n            sum_of_products[j] += arr[j] * arr[j + i - 1]\n\n        # Update the maximum sum of products found so far\n        for j in range(n - i + 1):\n            max_sum = max(max_sum, sum_of_products[j])\n\n    return max_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = []\n\n    for i in range(1, n):\n        for j in range(i):\n            prefix_product = 1\n            for k in range(j, i):\n                prefix_product *= arr[k]\n            result.append(prefix_product)\n\n    return sum(result)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n\n    # Initialize the product array and prefix sum array\n    product = [1] * n\n    prefix_sum = [0] * n\n\n    # Calculate the product array using a simple algorithm\n    for i in range(1, n):\n        product[i] = arr[i] * product[i - 1]\n\n    # Calculate the prefix sum array using the product array\n    for i in range(n - 1, -1, -1):\n        prefix_sum[i] = prefix_sum[i + 1] + product[i]\n\n    # Initialize the result and calculate the sum of products of sublists\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 <= 3:\n                temp_prod = 1\n                for k in range(i, j + 1):\n                    temp_prod *= product[k]\n                result += temp_prod * prefix_sum[j] - prefix_sum[i - 1]\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    first_bit = n & 1\n    last_bit = n & (2**32 - 1)\n    middle_bit = n & ~(first_bit | last_bit)\n    middle_bit = middle_bit ^ 1\n    \n    return middle_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # convert binary number to integer\n    n = int(n, 2)\n\n    # get the length of the binary number\n    length = len(bin(n)[2:])\n\n    # get the position of the first and last bit\n    first_bit = 0\n    last_bit = length - 1\n\n    # set the first and last bits of the number to 0\n    n = n & ~(1 << first_bit) & ~(1 << last_bit)\n\n    # toggle the middle bits of the number\n    for i in range(first_bit + 1, last_bit):\n        n ^= 1 << i\n\n    # convert the integer back to binary and return the result\n    return bin(n)[2:].zfill(length)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Get the binary representation of the number\n    binary = bin(n)[2:]\n\n    # Toggle the middle bits\n    first_bit = binary[0]\n    last_bit = binary[-1]\n    if first_bit == '0' and last_bit == '0':\n        binary = '0' + binary[1:-1]\n    elif first_bit == '0' and last_bit == '1':\n        binary = '1' + binary[1:-1]\n    elif first_bit == '1' and last_bit == '0':\n        binary = '0' + binary[1:-1]\n    elif first_bit == '1' and last_bit == '1':\n        binary = '1' + binary[1:-1]\n\n    # Convert the binary back to an integer\n    return int(binary, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    n = bin(n)[2:]   # convert the binary number to a string\n    n = n.replace('0b', '')   # remove the '0b' prefix\n    n = ''.join(map(lambda x: x + '0', n))   # add '0' at the beginning of each string\n    n = n[:n.index('0')] + '1' + n[n.index('0')+1:]   # toggle the bits except the first and the last\n    n = int(n, 2)   # convert the string back to integer\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the first and last bit with the opposite value\n    first_bit = 1 ^ (n & 1)\n    last_bit = 1 ^ (n >> 31)\n\n    # Toggle the middle bits with the first and last bit\n    middle_bits = n ^ first_bit ^ last_bit\n\n    # Combine the first and last bits with the middle bits\n    result = middle_bits | (first_bit << 1) | (last_bit >> 1)\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    # Find the position of the first and last bits\n    first_bit = bin(n)[2:].find('1')\n    last_bit = bin(n)[2:].rfind('1')\n    if first_bit == -1 or last_bit == -1:\n        return n\n\n    # Toggle all bits except the first and the last bit\n    middle_bits = bin(n ^ ((1 << (first_bit + last_bit + 1)) - 1))[2:]\n    n = int(middle_bits, 2)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Toggle first bit\n    n = n ^ 1\n    \n    # Toggle last two bits\n    n = n ^ 3\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Get the number of bits in the binary representation of n\n    num_bits = len(bin(n)[2:])\n\n    # Get the middle bit indices\n    middle_bit_indices = [num_bits // 2]\n\n    # Loop through the other bits and toggle them\n    for i in range(1, num_bits - 1):\n        middle_bit_indices.append(i)\n\n    # Iterate through the middle bit indices and toggle the bits\n    for i in middle_bit_indices:\n        # Check the bit at index i\n        if n & (1 << i):\n            # If it's 1, set it to 0\n            n &= ~(1 << i)\n        else:\n            # If it's 0, set it to 1\n            n |= (1 << i)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Find the index of the first and last bits\n    first_bit = n & (n - 1)\n    last_bit = n & (-n)\n\n    # Toggle the bits in the middle of the number\n    n = n ^ (first_bit ^ last_bit)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize first and last bits\n    first_bit = n & (1 << 0)\n    last_bit = n & (1 << 31)\n\n    # set first and last bits to 0\n    n &= ~(1 << 0)\n    n &= ~(1 << 31)\n\n    # toggle bits other than first and last bits\n    n ^= ((n ^ first_bit) | (n ^ last_bit)) & 0xFFFFFFFF\n\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use bisect to find the left insertion point\n    index = bisect.bisect_left(a, x)\n    # If the value is already in the list, return its index\n    if index!= len(a) and a[index] == x:\n        return index\n    # Otherwise, return the index of the first element greater than or equal to x\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # initialize left and right indices of the sorted list\n    left = 0\n    right = len(a) - 1\n    \n    # while left index is less than or equal to right index\n    while left <= right:\n        # calculate the middle index of the sorted list\n        mid = (left + right) // 2\n        \n        # if the middle value is greater than x\n        if a[mid] > x:\n            # set right index to mid-1\n            right = mid - 1\n        # if the middle value is less than or equal to x\n        else:\n            # if mid is 0 or mid+1 is greater than x\n            if mid == 0 or a[mid-1] <= x:\n                # return mid\n                return mid\n            # otherwise, set left index to mid+1\n            else:\n                left = mid + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Convert the input list to a set to eliminate duplicates\n    a = list(set(a))\n\n    # Use binary search to find the left insertion point\n    index = bisect.bisect_left(a, x)\n\n    # Return the index\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif x < a[index]:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index-1] == x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    elif i == 0:\n        return 0\n    else:\n        return i-1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.search(regex, string):\n        print(string + \" starts with a vowel.\")\n    else:\n        print(string + \" does not start with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print(f'{string} starts with a vowel')\n    else:\n        print(f'{string} does not start with a vowel')"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * geometric_sum(n - 1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n\n    # Calculate the number of digits in the smallest triangular number with n digits\n    num_digits = math.log10(n) + 1\n\n    # Initialize variables to hold the smallest and largest triangular numbers\n    min_triangular = math.ceil(n / 2) * (n + 1)\n    max_triangular = min_triangular\n\n    # Iterate until the smallest triangular number exceeds n digits\n    while len(str(max_triangular)) < num_digits:\n        max_triangular += 1\n\n    # Calculate the difference between max_triangular and min_triangular\n    diff = max_triangular - min_triangular\n\n    # Iterate until the smallest triangular number with n digits is found\n    for i in range(min_triangular, max_triangular + 1):\n        triangular = i * (i + 1)\n\n        # If the current triangular number is greater than max_triangular, skip it\n        if triangular > max_triangular:\n            continue\n\n        # If the current triangular number is less than min_triangular, it's a valid smallest triangular number\n        if triangular < min_triangular:\n            return diff + triangular - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Initialize variables\n    curr_tri = 1\n    count = 0\n    \n    # Loop through all digits of n\n    while n > 0:\n        # Calculate the next triangular number in the sequence\n        next_tri = curr_tri + 2**count\n        \n        # If the next triangular number is less than or equal to n, it's the smallest triangular number\n        if next_tri <= n:\n            return count\n        \n        # Update variables\n        curr_tri = next_tri\n        count += 1\n        n -= 1\n    \n    # If we reach here, there is no triangular number with n digits\n    return None"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    num = int(math.factorial(n-1))\n    return num\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    else:\n        # Find the maximum triangular number with n digits\n        max_tri = int(10 ** n)\n        # Initialize the index to 1\n        index = 1\n        # Initialize the current triangular number\n        current_tri = 1\n        # Initialize a variable to keep track of the smallest index\n        smallest_index = 1\n        # Initialize a variable to keep track of the current number of digits in the triangular number\n        digit_count = 1\n        # Loop through the triangular numbers from 1 to max_tri\n        while current_tri <= max_tri:\n            # Check if the current triangular number is the smallest triangular number with n digits\n            if digit_count == n:\n                smallest_index = index\n                break\n            # Increment the current triangular number\n            current_tri += 1\n            # Increment the index and count the number of digits in the triangular number\n            index += 1\n            digit_count = len(str(current_tri))\n        return smallest_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    This function returns the index of the smallest triangular number with n digits. \n    \"\"\"\n    # Initializing the counter and the triangular number\n    counter = 1\n    triangular_number = 1\n\n    # Iterating through the range of n digits\n    for i in range(n): \n        # Calculating the next triangular number\n        triangular_number = counter * (i + 1)\n\n        # Incrementing the counter\n        counter += 1\n\n    # Returning the index of the smallest triangular number\n    return triangular_number"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    # function to find the index of smallest triangular number with n digits\n    triangular_number = 10**(n-1) # find the smallest triangular number with n-1 digits\n    triangular_number *= 10 # multiply the triangular number by 10 to get the next triangular number with n digits\n    \n    for i in range(n):\n        triangular_number += 1 # increment the triangular number by 1 each time, hence incrementing the index\n        if triangular_number >= triangular_number: # check if the triangular number has n digits\n            return i # return the index of the triangular number\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    triangular_numbers = []\n    i = 0\n    while len(str(i)) < n:\n        i += 1\n    while i >= 0:\n        triangular_numbers.append(i)\n        i -= 1\n    return triangular_numbers\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular = 1\n    count = 0\n    i = 1\n    \n    while len(str(triangular)) < n:\n        triangular += i\n        count += 1\n        i += 1\n        \n    return count"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Find the smallest number that has n digits\n    k = int(math.log10(n)) + 1\n\n    # Find the number of digits in the smallest triangular number\n    t = int(math.log10(k*k)) + 1\n\n    # Create a list of all possible triangular numbers with n digits\n    triangular_numbers = []\n    for i in range(1, k*k+1):\n        triangular_numbers.append(i)\n\n    # Sort the list of triangular numbers by increasing value\n    triangular_numbers.sort()\n\n    # Find the index of the smallest triangular number with n digits\n    index = triangular_numbers.index(k*k)\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # initialize the variables\n    smallest_triangular_number = 1\n    triangular_numbers = [1]\n\n    # loop through all the triangular numbers\n    for i in range(1, int(math.pow(10, n))):\n        # calculate the next triangular number\n        next_triangular_number = smallest_triangular_number + i\n        # add the next triangular number to the list\n        triangular_numbers.append(next_triangular_number)\n        # check if the next triangular number is smaller than the current smallest triangular number\n        if next_triangular_number < smallest_triangular_number:\n            # if it is smaller, update the smallest triangular number\n            smallest_triangular_number = next_triangular_number\n\n    # find the index of the smallest triangular number\n    index = triangular_numbers.index(smallest_triangular_number)\n\n    return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # create an empty dictionary\n    d = {}\n    # loop through each element in the tuple\n    for i in range(len(test_tup)-1):\n        # add the key-value pair to the dictionary\n        d[test_tup[i]] = test_tup[i+1]\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    dict_result = {}\n    if len(test_tup) % 2 == 0:\n        for i in range(0, len(test_tup), 2):\n            dict_result[test_tup[i]] = test_tup[i+1]\n    else:\n        for i in range(0, len(test_tup)-1, 2):\n            dict_result[test_tup[i]] = test_tup[i+1]\n    return dict_result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        my_dict[key] = value\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(len(test_tup)-1):\n        dict[test_tup[i]] = test_tup[i+1]\n    return dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # create an empty dictionary\n    result_dict = {}\n    \n    # iterate through the tuple\n    for i in range(len(test_tup)-1):\n        # add the key-value pair to the dictionary\n        result_dict[test_tup[i]] = test_tup[i+1]\n    \n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n    test_tup (tuple): Tuple to be converted to a dictionary.\n\n    Returns:\n    dict: Dictionary containing the elements of the tuple as key-value pairs.\n    \"\"\"\n    dict_obj = {}\n    i = 0\n    while i < len(test_tup):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n        i += 2\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        return \"Error: Length of the tuple must be even.\"\n    else:\n        dict_obj = {}\n        for i in range(0, len(test_tup), 2):\n            dict_obj[test_tup[i]] = test_tup[i+1]\n        return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    return {i: test_tup[i+1] for i in range(len(test_tup)-1)}"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # create an empty dictionary\n    my_dict = {}\n    # loop through the given tuple\n    for i in range(0, len(test_tup), 2):\n        # add key-value pair to the dictionary\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return all_Characters_Same(s[1:-1])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return all_Characters_Same(s[1:-1])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_list = list(s)\n    for i in range(len(char_list)):\n        if char_list[i]!= char_list[0]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string `s` as input and returns True if all the characters in the string are same and False otherwise.\n    \"\"\"\n    # Convert the string to a set to get unique characters\n    unique_chars = set(s)\n    # Check if the length of the unique characters is 1\n    if len(unique_chars) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[1:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same, False otherwise.\n    '''\n    # Converting the string to list\n    s_list = list(s)\n    # Checking if the length of the list is 1\n    if len(s_list) == 1:\n        return True\n    # Checking if all the characters in the list are the same\n    for i in range(len(s_list)-1):\n        if s_list[i]!= s_list[i+1]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all characters are same else False.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return False\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    \n    first_char = s[0]\n    for char in s[1:]:\n        if char!= first_char:\n            return False\n    \n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/3)*side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula to calculate the area of a tetrahedron using Heron's formula\n    # A = sqrt(s(s-a)(s-b)(s-c))\n    # where s = (1/3)*side^2\n    s = (1/3) * side ** 2\n    area = math.sqrt(s * (s - side) * (s - side) * (s - side))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to calculate the area of a tetrahedron.\n    \"\"\"\n    # calculate half of the perimeter of the tetrahedron\n    half_perimeter = side / 2\n    # calculate the area of a square with side length half_perimeter\n    area_square = half_perimeter ** 2\n    # calculate the area of a parallelogram with base b = half_perimeter, height h = side/2\n    area_parallelogram = half_perimeter * side / 2\n    # calculate the area of the tetrahedron\n    area_tetrahedron = (area_square + area_parallelogram) / 6\n    # return the area of the tetrahedron\n    return area_tetrahedron"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = 0.5 * side ** 2\n    area = (1 + math.sqrt(5)) / 2 * s ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * math.pow(side, 3)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter of the tetrahedron\n    s = (side + math.sqrt(3)*side**2)/4\n    \n    # calculate the area of the tetrahedron\n    area = 0.5*s*s*s\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n\n    Args:\n    side (float): the length of one side of the tetrahedron\n\n    Returns:\n    float: the area of the tetrahedron\n    '''\n\n    # calculate the half perimeter of the tetrahedron\n    half_perimeter = 2*side\n\n    # calculate the area of the tetrahedron using Heron's formula\n    s = (half_perimeter**2)/12\n    area = math.sqrt(s*(s-side)*(s-2*side)*(s-3*side))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    return math.sqrt(3)/4 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula for area of a tetrahedron using Heron's formula\n    s = (side**2 + side**2 + side**2 + side**2)/6\n    return math.sqrt(s)"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate the given list to the right direction by specified number of items.\n\n    Parameters:\n    lst (list): List to be rotated\n    n (int): Number of items to be rotated\n\n    Returns:\n    list: Rotated list\n    \"\"\"\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    # Initialize variables\n    n = len(list)\n    # Rotate by m items\n    for i in range(m):\n        # Move last element to first position\n        list[i], list[n-1-i] = list[n-1-i], list[i]\n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # if m is greater than or equal to n, no rotation is necessary\n    if m >= n:\n        return list\n    \n    # else, perform rotation\n    list = list[m:] + list[:m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Reverse the list\n    reversed_list = list[::-1]\n    \n    # Get the number of items to rotate\n    n = len(list)\n    k = m % n\n    \n    # Reverse the first k items of the reversed list\n    reversed_list = reversed_list[k:] + reversed_list[:k]\n    \n    # Reverse the entire list\n    rotated_list = reversed_list[::-1]\n    \n    # Return the rotated list\n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if m >= n:\n        return list\n    \n    # Find the last element of the list\n    last_element = list[n-1]\n    \n    # Rotate the list to the right by m elements\n    for i in range(m):\n        temp = list[0]\n        for j in range(n-1):\n            list[j] = list[j+1]\n        list[n-1] = temp\n    \n    # Add last element to the end of the list\n    for i in range(n-1, 0, -1):\n        list[i] = list[i-1]\n    list[0] = last_element\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n\n    # Calculate the number of rotations required\n    n = len(list)\n    k = n - m\n\n    # Perform the rotations\n    for i in range(k):\n        temp = list[0]\n        for j in range(m-1):\n            list[j] = list[j+1]\n        list[m-1] = temp\n\n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    temp = list[-1]\n    for i in range(n-1, -1, -1):\n        if i == m-1:\n            list[i] = temp\n        else:\n            list[i] = list[i+1]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m %= n  # calculate the modulo of m with n\n    \n    # create a new list to hold the rotated elements\n    rotated = []\n    \n    # copy the first m elements of the original list to the rotated list\n    for i in range(m):\n        rotated.append(list[i])\n    \n    # copy the remaining elements of the original list to the rotated list starting from the second m elements\n    for i in range(m, n):\n        rotated.append(list[i])\n    \n    # copy the first m elements of the rotated list to the original list\n    for i in range(m):\n        list[i] = rotated[i]\n    \n    # print the rotated list\n    print(\"Rotated list:\", list)"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n\n    # Check if the length of the list is less than or equal to 1.\n    if len(list) <= 1:\n        return list\n\n    # Calculate the length of the list after rotation.\n    n = len(list)\n\n    # Calculate the new starting index based on the rotation direction.\n    if m >= n:\n        # Rotation direction is clockwise.\n        start = 0\n    else:\n        # Rotation direction is counter-clockwise.\n        start = n - m\n\n    # Copy the rotated part of the list to the beginning of the list.\n    rotated_part = list[start:n]\n    list[:start] = [None] * start\n\n    # Copy the remaining part of the list to the end of the list.\n    list[start:] = rotated_part\n\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for item in test_tup:\n        if item is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digits = []\n    for num in range(startnum, endnum+1):\n        for digit in str(num):\n            digits.append(int(digit))\n    print(sorted(set(digits)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda num: all(int(d) % num == 0 for d in str(num)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function finds numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Define a lambda function to check if a number is divisible by a specific digit\n    is_divisible = lambda num, digit: num % digit == 0\n    \n    # Define a list to store the divisible numbers\n    divisible_nums = []\n    \n    # Loop through each number in the range\n    for num in range(startnum, endnum+1):\n        # Check if the number is divisible by every digit in the number\n        divisible = True\n        for digit in str(num):\n            if not is_divisible(num, int(digit)):\n                divisible = False\n                break\n        if divisible:\n            divisible_nums.append(num)\n            \n    return divisible_nums"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains. \n    '''\n    def is_divisible_by_all_digits(num):\n        '''\n        Helper function to check if a number is divisible by all digits it contains.\n        '''\n        for digit in str(num):\n            if num % int(digit)!= 0:\n                return False\n        return True\n\n    return filter(is_divisible_by_all_digits, range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num):\n        digits = [int(d) for d in str(num)]\n        for digit in digits:\n            if digit == 0 or digit % num!= 0:\n                return False\n        return True\n    \n    def digits_sum(num):\n        return sum(int(d) for d in str(num))\n    \n    return list(filter(lambda num: is_divisible(num) and digits_sum(num) == sum(int(d) for d in str(num)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digits(num):\n        return all(num % digit == 0 for digit in [int(d) for d in str(num)])\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\n    Args:\n        startnum (int): start of the range\n        endnum (int): end of the range\n\n    Returns:\n        list: list of numbers within the given range where every number is divisible by every digit it contains.\n\n    Examples:\n        >>> divisible_by_digits(123, 987)\n        [123, 321, 456, 654, 789, 987]\n    \"\"\"\n    return list(filter(lambda x: all(int(digit) in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\n    Args:\n    startnum (int): lower limit of the range\n    endnum (int): upper limit of the range\n\n    Returns:\n    List of numbers in the given range that are divisible by every digit.\n    \"\"\"\n\n    def is_divisible_by_digit(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n\n        Args:\n        num (int): a number to check\n\n        Returns:\n        True if the number is divisible by every digit, False otherwise.\n        \"\"\"\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if num % digit!= 0:\n                return False\n        return True\n\n    return list(filter(is_divisible_by_digit, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return filter(lambda x: all(int(d) % x == 0 for d in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % int(d) == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r * math.sin(math.radians(a))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r * a * math.pi / 180\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r * r * math.sin(math.radians(a/2))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        area = math.pi*(r**2) # find area of a circle\n        return area*math.sin(math.radians(a)) # calculate area of sector"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r * (1 - math.cos(math.radians(a)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    # converting angle to radians\n    a = math.radians(a)\n    \n    # finding the area of a sector using the formula A = \u03c0r^2\n    area = math.pi * r**2 * a\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # check if angle is less than 360 degrees\n    if a > 360:\n        return None\n    \n    # calculate area of sector using formula for sector of a circle\n    area = math.pi * r * r * (1 - math.cos(math.radians(a)))\n    \n    # return area of sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*a/360"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of LCS of substrings \n    L = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # Fill table in bottom up manner \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(p + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0 \n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]: \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1 \n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    # Return LCS of all substrings \n    lcs = []\n    i = m \n    j = n \n    k = p\n    while i > 0 and j > 0 and k > 0: \n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]: \n            lcs.append(X[i - 1]) \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif L[i - 1][j][k] == L[i][j][k - 1]: \n            i -= 1 \n        elif L[i][j - 1][k] == L[i - 1][j][k]: \n            j -= 1 \n        else: \n            k -= 1 \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Create a 2D array to store lengths of longest common subsequence for all prefixes of X, Y, and Z\n    m, n = len(X), len(Y)\n    T = [[0 for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the 2D array using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                T[i][j] = T[i-1][j-1] + 1\n            else:\n                T[i][j] = max(T[i-1][j], T[i][j-1])\n\n    # Reconstruct the longest common subsequence\n    i, j = m, n\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif T[i-1][j] > T[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    n, m, p = len(X), len(Y), len(Z) \n    L = [[0] * (p+1) for i in range(n+1)] \n  \n    # Build L[i][j] in bottom up manner \n    for i in range(n+1): \n        for j in range(p+1): \n            if i==0 or j==0: \n                L[i][j] = 0 \n            elif X[i-1] == Y[j-1] and X[i-1] == Z[j-1]: \n                L[i][j] = L[i-1][j-1] + 1 \n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n  \n    # Backtrack to find the actual LCS \n    i, j = n, p \n    lcs = [] \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1] and X[i-1] == Z[j-1]: \n            lcs.append(X[i-1]) \n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]: \n            i -= 1\n        else: \n            j -= 1\n  \n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X) \n    m = len(Y) \n    o = len(Z) \n\n    # Create a table to store lengths of LCS of all prefixes of X, Y and Z \n    # and initialize values in the table in bottom-up manner \n    L = [[0]*(o+1) for i in range(n+1)] \n\n    # Build L[i][j] in bottom-up manner \n    for i in range(n+1): \n        for j in range(o+1): \n            # If X[i-1] and Y[j-1] are same, then L[i][j] will be L[i-1][j-1] + 1 \n            if (i > 0 and j > 0 and X[i-1] == Y[j-1] and X[i-1] == Z[i-1]): \n                L[i][j] = L[i-1][j-1] + 1 \n\n            # If not same, then L[i][j] will be max of L[i-1][j] and L[i][j-1] \n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n\n    # Initialize two pointers i, j to store the starting index of LCS in X, Y and Z \n    i = n \n    j = o \n\n    # Initialize a list to store the LCS sequence \n    lcs = [] \n\n    # Build LCS sequence using the pointers i, j and L[i][j] \n    while (i > 0 and j > 0): \n        if (X[i-1] == Y[j-1] and X[i-1] == Z[i-1]): \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n        elif (L[i-1][j] > L[i][j-1]): \n            i -= 1 \n        else: \n            j -= 1 \n\n    # Reverse the LCS sequence and return it \n    lcs.reverse() \n    return ''.join(lcs) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 2D array to store lengths of LCS for all subproblems\n    L = [[0] * (p + 1) for i in range(m + 1)]\n\n    # fill L[][] in bottom up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    L[i][j] = L[i - 1][j - 1] + 1\n                elif X[i - 1] == Y[j - 1]:\n                    L[i][j] = L[i - 1][j]\n                elif Y[j - 1] == Z[k - 1]:\n                    L[i][j] = L[i][j - 1]\n                else:\n                    L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # return the length of the LCS for the given 3 strings\n    return L[m][n]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Function to find the length of LCS for three given sequences \n    def lcs(X, Y, Z): \n        '''\n        Write a recursive function to find the length of LCS for three given sequences.\n        '''\n        m, n = len(X), len(Y)\n        table = [[0] * (n+1) for _ in range(m+1)]\n\n        for i in range(m+1): \n            for j in range(n+1): \n                if i == 0 or j == 0: \n                    table[i][j] = 0\n                elif X[i-1] == Y[j-1] or Z[i-1] == Y[j-1]: \n                    table[i][j] = table[i-1][j-1] + 1\n                else: \n                    table[i][j] = max(table[i-1][j], table[i][j-1])\n\n        return table[m][n]\n\n    # Function to find the LCS of three given sequences \n    def lcs_three_sequences(X, Y, Z): \n        '''\n        Write a recursive function to find the LCS of three given sequences.\n        '''\n        # Finding length of LCS \n        m, n = len(X), len(Y)\n        lcs_length = lcs(X, Y, Z)\n\n        # Initialize the LCS matrix and dp array for all possible starting points of LCS \n        LCS = [[\"\" for _ in range(lcs_length+1)] for _ in range(3)]\n        dp = [[[0] * (lcs_length+1) for _ in range(3)] for _ in range(3)]\n\n        # Fill the LCS matrix and dp array for all possible starting points of LCS \n        for i in range(3): \n            for j in range(3): \n                for k in range(1, lcs_length+1): \n                    if X[i][:k] == Y[j][:k] and X[i][:k] == Z[j][:k]: \n                        LCS[i][j] = X[i][:k]\n                        dp[i][j][k] = dp[i][j][k-1]\n                    elif X[i][:k] == Y[j][:k-1] and X[i][:k] == Z[j][:k-1]: \n                        LCS[i][j] = Y[j][:k-1]\n                        dp[i][j][k] = dp[i][j][k-1]\n                    elif X[i][:k] == Y[j][:k] and X[i][:k] == Z[j][:k-1]: \n                        LCS[i][j] = Z[j][:k-1]\n                        dp[i][j][k] = dp[i][j][k-1]\n                    else: \n                        LCS[i][j] = LCS[i][j-1]\n                        dp[i][j][k] = dp[i][j-1][k]\n\n        # Find the maximum length LCS that is common to all three sequences \n        max_lcs = LCS[0][0]\n        for i in range(3): \n            for j in range(3): \n                if len(LCS[i][j]) > len(max_lcs): \n                    max_lcs = LCS[i][j]\n\n        # Return the maximum length LCS that is common to all three sequences \n        return max_lcs\n\n    # Finding the LCS of X, Y and Z \n    LCS = lcs_three_sequences(X, Y, Z)\n\n    # Return the LCS \n    return LCS"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n\n    m, n, p = len(X), len(Y), len(Z)\n\n    # creating a 2D table to store the lengths of LCS for all possible substrings\n    table = [[0] * (p + 1) for i in range(m + 1)]\n\n    # filling the table using dynamic programming approach\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # returning the length of the longest common subsequence\n    return table[m][n]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Create a 3D table to store lengths of LCS for subproblems\n    table = [[[0 for j in range(len(Y)+1)] for i in range(len(X)+1)] for k in range(len(Z)+1)]\n\n    # Fill the table in bottom up manner\n    for i in range(len(X)+1):\n        for j in range(len(Y)+1):\n            for k in range(len(Z)+1):\n                if i == 0 or j == 0 or k == 0:\n                    table[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n\n    # Reconstruct the LCS using the table\n    lcs = ''\n    i, j, k = len(X), len(Y), len(Z)\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j][k] == table[i][j-1][k]:\n            i -= 1\n        elif table[i-1][j][k] == table[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n = len(X), len(Y)\n    dp = [[0] * (n+1) for _ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    LCS = ''\n    i, j = m, n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            LCS = X[i-1] + LCS\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return LCS[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m+1) for i in range(n+1)]\n    # creating table to store lengths of LCS for subproblems\n\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 or j == 0:\n                p[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n    # filling table to find LCS for all subproblems\n\n    L = []\n    i = n\n    j = m\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            L.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif p[i-1][j] > p[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    L.reverse()\n    # reconstructing LCS\n\n    return \"\".join(L)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Splitting the string into words\n    words = str1.split()\n    # Looping through the words\n    for i in range(len(words)):\n        # Checking if the current word starts with a capital letter\n        if words[i][0].isupper():\n            # Checking if the next word is also capitalized or not\n            if not words[i+1].isupper() or i == len(words)-1:\n                # If the next word is not capitalized or is the last word, adding a space before it\n                words[i] = words[i] + \" \"\n    # Joining the words back together with spaces\n    new_str = \" \".join(words)\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # replace all non-alphanumeric characters with spaces\n    str1 = re.sub('[^a-zA-Z0-9\\s]', '', str1)\n\n    # split the string into words\n    words = str1.split()\n\n    # capitalize the first letter of each word and join them back together with spaces\n    str2 =''.join(word.capitalize() for word in words)\n\n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\b([A-Z])', r'\\1 ', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    words = re.findall(pattern, str1)\n    new_str =''.join(words)\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    str2 = re.sub(pattern, r'\\1 ', str1)\n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Removing special characters and converting all to lowercase\n    str1 = re.sub(r'[^\\w\\s]', '', str1.lower())\n    # Splitting the string into words\n    words = str1.split()\n    # Capitalizing the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Joining the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', str1) # Find all the words in the string\n    result = ''\n    for word in words:\n        if word[0].isupper(): # If the first character of the word is upper case\n            result +='' + word # Add a space before the word\n        else:\n            result += word # Add the word as it is\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Define a regular expression pattern to match capital letters\n    pattern = re.compile(r'(?<!\\w)[A-Z](?!\\w)')\n\n    # Split the string into words using the pattern\n    words = pattern.split(str1)\n\n    # Join the words with spaces\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.sub(r'\\b(\\w)(\\w*)\\b', r'\\1 \\2', str1)\n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    words = re.findall(r'\\b\\w', str1)\n    result = []\n    for word in words:\n        if word.isupper():\n            result.append(word)\n        else:\n            result.append(word[0] +'' + word[1:])\n    return''.join(result)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the strings to numbers\n    nums = [int(x) for x in nums_str]\n    # Sort the numbers using the built-in sorted function\n    nums_sorted = sorted(nums)\n    # Convert the sorted numbers back to strings and return the sorted list\n    return [str(x) for x in nums_sorted]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    # Convert the strings to integers\n    nums = [int(num) for num in nums_str]\n    \n    # Sort the list of integers\n    nums.sort()\n    \n    # Convert the sorted list of integers back to strings\n    sorted_nums = [str(num) for num in nums]\n    \n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert all strings to numeric values using the `map` function\n    nums = list(map(int, nums_str))\n    # Sort the numeric values in ascending order using the `sorted` function\n    nums_sorted = sorted(nums)\n    # Convert the sorted numeric values back to strings using the `map` function\n    nums_sorted_str = list(map(str, nums_sorted))\n    # Join the sorted and converted strings into a single string separated by commas\n    nums_str_sorted = \",\".join(nums_sorted_str)\n    # Return the sorted and converted strings\n    return nums_str_sorted"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = []\n    for num_str in nums_str:\n        nums.append(float(num_str))\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(x) for x in nums_str]\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings of numbers and returns a new list sorted in ascending order.\n    \"\"\"\n    num_list = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            num_list.append(num)\n        except ValueError:\n            continue\n    num_list.sort()\n    return num_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    num_list = []\n    for num_str in nums_str:\n        try:\n            num_list.append(float(num_str))\n        except ValueError:\n            pass\n    num_list.sort()\n    return num_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = sorted(nums_str, key=lambda x: tuple(map(int, x.split('.'))))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert all strings to numbers\n    nums = [float(num_str) for num_str in nums_str]\n\n    # use the built-in `sort` function to sort the numbers\n    nums.sort()\n\n    # convert the sorted numbers back to strings\n    sorted_nums_str = ['{:.2f}'.format(num) for num in nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Adding the tuple to the list\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Append the test_tup to the test_list\n    test_list.append(test_tup)\n\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < 0:\n        return True\n    if i > len(arr) // 2:\n        return False\n\n    if arr[i] < arr[i // 2] and i % 2 == 1:\n        return False\n\n    return check_min_heap_helper(arr, i - 1)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr) // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    if i > 0 and arr[i] < arr[(i-1)//2]:\n        return False\n    if 2*i+1 < len(arr) and arr[i] < arr[2*i+1]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    parent_index = (i - 1) // 2\n    if arr[i] > arr[parent_index]:\n        return False\n    return check_min_heap_helper(arr, parent_index)\n\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr) - 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    This function checks if the given array represents a min heap or not.\n    \"\"\"\n    if i >= len(arr):\n        return True\n    \n    if arr[i] >= arr[2*i+1] and arr[i] >= arr[2*i+2]:\n        return False\n    \n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\ndef check_min_heap(arr):\n    \"\"\"\n    This function checks if the given array represents a min heap or not.\n    \"\"\"\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n\n    if arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef is_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n    \n    # check if left child is smaller than parent\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n        \n    # check if right child is smaller than smallest so far\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n        \n    # if smallest is not the current index, swap the current index with the smallest child\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n        \ndef is_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n    # start from the last non-leaf node\n    i = (n//2) - 1\n    \n    while i >= 0:\n        # call the helper function recursively for each non-leaf node\n        check_min_heap_helper(arr, i)\n        i -= 1\n    \n    # check if the array is a min heap\n    for i in range(n//2):\n        if arr[i] > arr[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    parent = (i - 1) // 2\n    if arr[i] < arr[parent]:\n        return False\n    else:\n        return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0:\n        if arr[i] < arr[int(i/2)]:\n            return False\n    else:\n        return True\n    \n    # Recursively check for left and right children\n    left_child = 2*i\n    right_child = 2*i + 1\n    \n    if left_child < len(arr) and check_min_heap_helper(arr, left_child):\n        return False\n    else:\n        return True\n    \n    if right_child < len(arr) and check_min_heap_helper(arr, right_child):\n        return False\n    else:\n        return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    min_heap = True\n\n    if left < len(arr) and arr[left] > arr[i]:\n        min_heap = False\n    if right < len(arr) and arr[right] > arr[i] and arr[left] > arr[i]:\n        min_heap = False\n\n    return min_heap\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    else:\n        return check_min_heap_helper(arr, (i-1)//2) and arr[i] < arr[(i-1)//2]\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 1 + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n * jacobsthal_num(n-1)) + (n * jacobsthal_num(n-2))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    jac = 1\n    for i in range(n-1):\n        jac *= 2\n        jac -= 1\n    return jac"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a, b = 0, 1\n    for i in range(1, n+1):\n        c = a + b\n        print(c, end=' ')\n        a = b\n        b = c"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + jacobsthal_num(n-4)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j1, j2 = 0, 1\n        for i in range(2, n+1):\n            j = j1 + j2\n            j1 = j2\n            j2 = j\n        return j2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + jacobsthal_num(n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 3)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (3 * jacobsthal_num(n//2)) + jacobsthal_num(n//2)\n    else:\n        return (5 * jacobsthal_num((n-1)//2)) + jacobsthal_num((n-1)//2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    # Sort the list based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize the minimum count to infinity and the minimum element to None\n    min_count = float('inf')\n    min_elem = None\n\n    # Iterate over the sorted list\n    for elem in sorted_list:\n        # Increment the count of the current element\n        count = 1\n\n        # Find the next element that is greater than the current element in the list\n        i = test_list.index(elem)\n        while i+1 < len(test_list) and test_list[i+1][0] == elem[0]:\n            count += 1\n            i += 1\n\n        # Update the minimum count if necessary\n        if count < min_count:\n            min_count = count\n            min_elem = elem\n\n        # Stop searching if we have found K minimum elements\n        if count == K:\n            break\n\n    return min_elem"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list in descending order based on the second element of each tuple (record)\n    sorted_list = sorted(test_list, key=lambda x: x[1], reverse=True)\n    # Initialize a variable to store the minimum k records\n    min_k_records = []\n    # Iterate through the sorted list and add the records to the min_k_records list until we have added K records\n    i = 0\n    while i < len(sorted_list) and len(min_k_records) < K:\n        min_k_records.append(sorted_list[i])\n        i += 1\n    # Return the min_k_records list\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    min_val = float('inf')\n    min_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if len(set(test_list[i][0:K]).intersection(set(test_list[j][0:K]))) < min_val:\n                min_val = len(set(test_list[i][0:K]).intersection(set(test_list[j][0:K])))\n                min_list = [test_list[i], test_list[j]]\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    # sort the list of tuples based on the second element in each tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # initialize an empty list to store the minimum K records\n    min_list = []\n    \n    # iterate over the sorted list of tuples\n    for i in range(K):\n        # append the current tuple to the minimum list\n        min_list.append(test_list[i][0])\n    \n    # return the minimum list of K records\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    #sort the list of tuples based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n\n    #initialize minimum k\n    min_count = 0\n\n    #initialize minimum k to start with\n    min_val = float('inf')\n\n    #iterate over the sorted list of tuples\n    for i in range(len(test_list)):\n        #if the count of the current element is greater than k, break the loop\n        if test_list[i][0] > min_val:\n            break\n        #if the count of the current element is greater than the minimum k, update the minimum k and minimum count\n        elif test_list[i][0] > min_count:\n            min_count = test_list[i][0]\n            min_val = test_list[i][1]\n        #if the count of the current element is equal to the minimum k, update the minimum count\n        elif test_list[i][0] == min_count:\n            min_count += 1\n\n    #return the minimum k value\n    return min_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    min_list = []\n    min_value = float('inf')\n    \n    for i in range(K):\n        min_list.append(test_list[i][1])\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            \n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    # Sort the list by the first element in each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize an empty list to store the minimum k records\n    min_records = []\n\n    # Iterate through the sorted list and append the minimum k records to the min_records list\n    for i in range(K):\n        min_records.append(test_list[i][1])\n\n    # Return the minimum k records\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    test_list = sorted(test_list, key=lambda x: x[0])\n    min_list = []\n    i = 0\n    j = 0\n    while i < len(test_list) and j < K:\n        if test_list[i][1] < test_list[j][1]:\n            min_list.append(test_list[i])\n            i += 1\n        else:\n            min_list.append(test_list[j])\n            j += 1\n    if len(min_list) < K:\n        return \"Not enough elements found\"\n    else:\n        return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    # sort the test_list by the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    # initialize the minimum value and count of records\n    min_value = float('inf')\n    count = 0\n    # iterate through the sorted list\n    for i in range(len(sorted_list)):\n        # if the count of records is less than K, update the minimum value and count\n        if count < K:\n            min_value = min(min_value, sorted_list[i][0])\n            count += 1\n        # if the count of records is greater than or equal to K, check if the current tuple is the minimum\n        else:\n            if sorted_list[i][0] == min_value:\n                return min_value\n            elif sorted_list[i][0] < min_value:\n                min_value = sorted_list[i][0]\n                count = 1\n    # if the loop completes and the count of records is less than K, return None\n    if count < K:\n        return None\n    # otherwise, return the minimum value\n    else:\n        return min_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list by the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Create a new list to store the minimum k records\n    min_records = []\n\n    # Iterate over the sorted list and add the first k records to the new list\n    for i in range(K):\n        min_records.append(sorted_list[i])\n\n    return min_records"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for index, element in enumerate(l1):\n        if element in l2 and element in l3:\n            common_elements.append(index)\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # create an empty list to store the common elements\n    common_elements = []\n    \n    # loop through the first list\n    for i in range(len(l1)):\n        # loop through the second list\n        for j in range(len(l2)):\n            # loop through the third list\n            for k in range(len(l3)):\n                # if the current element is the same in all lists, add it to the common_elements list\n                if l1[i] == l2[j] == l3[k]:\n                    common_elements.append(l1[i])\n    \n    # return the common_elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store common elements\n    common = []\n    # Loop through each index in l1\n    for i in range(len(l1)):\n        # Check if the element at this index is present in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l2 and l1[i] in l3:\n            # If it is, add it to the list of common elements\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest:\n            second_smallest = number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n\n    # check if there are at least two elements in the list\n    if len(sorted_numbers) < 2:\n        return None\n\n    # return the second smallest number\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return sorted(numbers)[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Create a set to store unique numbers\n    unique_numbers = set(numbers)\n    # Convert the set back to a list\n    unique_numbers_list = list(unique_numbers)\n    # Sort the list in ascending order\n    unique_numbers_list.sort()\n    # Return the second smallest number\n    return unique_numbers_list[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for number in numbers[2:]:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    numbers = sorted(numbers)\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        print(f\"Match found at index {match.start():2}: {match.group()}\")\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a\\b*b')\n    result = pattern.search(text)\n    return result.group() if result else None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    pattern = r'a(?=\\w+b)'\n    match = re.search(pattern, text)\n    \n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*b+')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    if match:\n        print(\"Match found:\", match.group())\n    else:\n        print(\"Match not found\")"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Count the number of reverse pairs in a list of strings.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the reversed strings are in the list\n            if test_list[i][::-1] in test_list[j:] and test_list[j][::-1] in test_list[i:]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    # Create a dictionary to store the frequency of each string in the list\n    freq_dict = {}\n    for string in test_list:\n        freq_dict[string] = freq_dict.get(string, 0) + 1\n\n    # Create two lists to store the reverse strings\n    rev_strings = []\n    for string in test_list:\n        if string[::-1] not in test_list:\n            rev_strings.append(string[::-1])\n\n    # Initialize variables to store the count of pairs\n    count = 0\n    prev_string = None\n\n    # Loop through the reverse strings and count the pairs\n    for string in rev_strings:\n        if string < prev_string:\n            count += freq_dict[string]\n        prev_string = string\n\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    # Initialize a dictionary to store the count of reverse pairs\n    count_dict = {}\n    \n    # Iterate over each string in the list\n    for string in test_list:\n        # Convert the string to a list of characters\n        char_list = list(string)\n        # Sort the characters in the list in reverse order\n        char_list.sort(reverse=True)\n        # Convert the sorted list back to a string\n        sorted_string = ''.join(char_list)\n        # Check if the sorted string is already in the dictionary\n        if sorted_string in count_dict:\n            # If it is, increment the count of the pair\n            count_dict[sorted_string] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count_dict[sorted_string] = 1\n    \n    # Return the count of the pairs of reverse strings in the list\n    return count_dict"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Initialize a dictionary to store the count of pairs\n    pair_count = {}\n    \n    # Loop through each string in the list\n    for string in test_list:\n        # Convert the string to a list of characters\n        char_list = list(string)\n        \n        # Loop through each pair of characters\n        for i in range(len(char_list)):\n            # Check if the pair is already in the dictionary\n            if char_list[i] in pair_count:\n                # If it is, increment the count by 1\n                pair_count[char_list[i]] += 1\n            else:\n                # If it's not, add it to the dictionary with a count of 1\n                pair_count[char_list[i]] = 1\n    \n    # Initialize the count of reverse pairs to 0\n    reverse_pair_count = 0\n    \n    # Loop through each pair of characters in the dictionary\n    for pair, count in pair_count.items():\n        # If the count is odd, increment the count of reverse pairs\n        if count % 2!= 0:\n            reverse_pair_count += count\n    \n    # Return the count of reverse pairs\n    return reverse_pair_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the count of each unique list\n    counts = {}\n    # loop through each list in the main list\n    for sublist in list1:\n        # convert the list to a tuple and check if it is already in the dictionary\n        if sublist not in counts:\n            # if not, add it to the dictionary with a count of 1\n            counts[sublist] = 1\n        else:\n            # if it is, increment the count of that tuple in the dictionary\n            counts[sublist] += 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the count of each unique sublist\n    sublist_counts = {}\n\n    # iterate over all sublists in list1\n    for i in range(len(list1)):\n        # create a tuple of the sublist\n        sublist = tuple(list1[i])\n\n        # check if the tuple already exists in the dictionary\n        if sublist in sublist_counts:\n            # increment the count of the tuple\n            sublist_counts[sublist] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            sublist_counts[sublist] = 1\n\n    # return the dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_list = set(list1)\n    # Create a dictionary where each list is a tuple and the value is the number of times the list appears in the original list\n    count_dict = {}\n    for sublist in unique_list:\n        count_dict[tuple(sublist)] = list1.count(sublist)\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    unique_dict = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i:])\n        if sublist in unique_dict:\n            unique_dict[sublist] += 1\n        else:\n            unique_dict[sublist] = 1\n    return unique_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # create an empty dictionary to store the count of unique sublists\n    sublist_count = {}\n\n    # iterate through the original list\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it exists in the dictionary\n        if tuple(sublist) in sublist_count:\n            # if it does, increment the count\n            sublist_count[tuple(sublist)] += 1\n        else:\n            # if it doesn't, add the sublist to the dictionary with count 1\n            sublist_count[tuple(sublist)] = 1\n\n    # return the final dictionary\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # create an empty dictionary to store the count of each sublist\n    sublist_count = {}\n    \n    # loop through each element of the list\n    for elem in list1:\n        # check if the element is a list\n        if isinstance(elem, list):\n            # convert the list to a tuple and check if it is already in the dictionary\n            if tuple(elem) in sublist_count:\n                # increment the count of the tuple in the dictionary\n                sublist_count[tuple(elem)] += 1\n            else:\n                # if the tuple is not in the dictionary, add it with a count of 1\n                sublist_count[tuple(elem)] = 1\n    \n    # return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # create a dictionary to store the count of each unique tuple\n    sublist_count = {}\n\n    # loop through each list in the list1 and convert each list to a tuple\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n\n        # check if the tuple is already in the dictionary\n        if sublist_tuple in sublist_count:\n            # increment the count of the tuple by 1\n            sublist_count[sublist_tuple] += 1\n        else:\n            # if the tuple is not in the dictionary, add it with a count of 1\n            sublist_count[sublist_tuple] = 1\n\n    # return the dictionary with the count of each unique tuple\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # initialize an empty dictionary to store the counts\n    count_dict = {}\n    \n    # loop over each element of the input list\n    for element in list1:\n        # convert the element to a tuple and check if it is already in the dictionary\n        if (element,) in count_dict:\n            # increment the count of the element in the dictionary\n            count_dict[(element,)] += 1\n        else:\n            # add the element and its count to the dictionary\n            count_dict[(element,)] = 1\n    \n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1_tuple = tuple(list1)\n    count_dict = {}\n    for item in list1_tuple:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    unique_sublists = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in unique_sublists:\n            unique_sublists[sublist_tuple] += 1\n        else:\n            unique_sublists[sublist_tuple] = 1\n    return unique_sublists"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove all spaces and special characters from the input string\n    num = ''.join(e for e in num if e.isdigit() or e == '.')\n    # Check if the input string consists of only digits and a decimal point\n    if '.' not in num or '.' not in num.split('.')[-1] or not num.split('.')[-1][1:3].isdigit():\n        return False\n    # Split the input string into integer and fractional parts\n    int_part = num.split('.')[-2]\n    frac_part = num.split('.')[-1]\n    # Check if the integer part is greater than 999 or 9999\n    if len(int_part) > 4 or int(int_part) > 999:\n        return False\n    # Check if the fractional part is less than or equal to 9999\n    if len(frac_part) > 4 or int(frac_part) > 9999:\n        return False\n    # Check if the integer and fractional parts add up to a number with a precision of 2\n    int_frac_sum = int(int_part) + int(frac_part)\n    if int_frac_sum % 100!= 0:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num:\n            parts = num.split('.')\n            if len(parts) == 2 and len(parts[1]) <= 2:\n                if parts[0].isdigit():\n                    return True\n        return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    num_parts = num.split('.')\n    int_part = num_parts[0]\n    dec_part = num_parts[1]\n    if len(int_part) > 10 or len(dec_part) > 2:\n        return False\n    for digit in int_part:\n        if digit < '0' or digit > '9':\n            return False\n    if dec_part.startswith('0'):\n        return False\n    for digit in dec_part:\n        if digit < '0' or digit > '9':\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n    except ValueError:\n        return False\n    else:\n        int_part, dec_part = str(float_num).split('.')\n        if len(int_part) > 2 or len(dec_part) > 2:\n            return False\n        if int_part.isdigit() and dec_part.isdigit():\n            return True\n        else:\n            return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if not isinstance(num, str):\n        raise TypeError(\"Input must be a string.\")\n\n    try:\n        num = float(num)\n    except ValueError:\n        return False\n\n    if not num.is_integer():\n        return False\n\n    # Check for precision of 2\n    digits = len(str(num))\n    if digits > 2:\n        return False\n\n    # Check for leading zeros\n    if num == 0:\n        return True\n\n    if int(num) == 0:\n        return True\n\n    # Check for decimal places\n    if '.' in str(num):\n        decimal_places = str(num).split('.')[1]\n        if len(decimal_places) > 2:\n            return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the number contains non-numeric characters\n    if not num.isdigit():\n        return False\n\n    # Convert the number to integer and check if it is within the range of an integer\n    if not (int(num) >= -2**31 and int(num) <= 2**31-1):\n        return False\n\n    # Convert the number to a float and check if it has 2 decimal places\n    if not str(float(num)).split('.')[-1].isdigit() or len(str(float(num)).split('.')[-1]) > 2:\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n\n    # Check if the string contains a decimal point and is followed by 2 digits\n    decimal_point_index = num.find('.')\n    if decimal_point_index == -1 or num[decimal_point_index+1:decimal_point_index+3]!= '00':\n        return False\n\n    # Convert the string to a float with 2 decimal places\n    float_num = float(num)\n\n    # Check if the float is a valid decimal number with a precision of 2\n    return float_num == round(float_num, 2)"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the number only contains digits and decimal points\n    if not all(char.isdigit() or char == '.' for char in num):\n        return False\n\n    # Split the number into integer and decimal parts\n    integer_part, decimal_part = num.split('.')\n\n    # Check if the number has a precision of 2\n    if len(integer_part) > 10 or len(decimal_part) > 2:\n        return False\n\n    # Check if the integer part contains only digits\n    if not all(char.isdigit() for char in integer_part):\n        return False\n\n    # Convert the integer part to an integer\n    integer_part = int(integer_part)\n\n    # Check if the decimal part contains only digits\n    if not all(char.isdigit() for char in decimal_part):\n        return False\n\n    # Convert the decimal part to an integer\n    decimal_part = int(decimal_part)\n\n    # Check if the integer part is between -999999999 and 999999999\n    if integer_part < -999999999 or integer_part > 999999999:\n        return False\n\n    # Check if the decimal part is between -99 and 99\n    if decimal_part < -99 or decimal_part > 99:\n        return False\n\n    # If all the checks pass, return True\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the given string is empty\n    if not num:\n        return False\n\n    # Remove any leading or trailing whitespace from the string\n    num = num.strip()\n\n    # Check if the string starts with a minus sign\n    if num.startswith('-'):\n        return False\n\n    # Check if the string contains any non-numeric characters\n    if not num.isnumeric():\n        return False\n\n    # Convert the string to a float\n    decimal = float(num)\n\n    # Check if the float is a decimal with a precision of 2\n    if decimal.is_integer() and decimal.is_decimal():\n        decimal_places = len(str(decimal).split('.')[1])\n        if decimal_places == 2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a set to store unique elements of the list\n    unique_set = set(arr)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(arr):\n        # If the length of the set is equal to the length of the list, return True\n        return True\n    else:\n        # If the length of the set is not equal to the length of the list, return False\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        if arr[0] == arr[1]:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = set(arr)\n    return len(unique) == 1"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] == arr[i-1]:\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a dictionary to store the elements of the list\n    elements = {}\n    # Iterate through the list and add each element to the dictionary\n    for num in arr:\n        if num in elements:\n            # If the element is already present in the dictionary, then it is not a unique element\n            return False\n        else:\n            elements[num] = True\n    # If all elements have been added to the dictionary, then they are unique\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 == 2 and not (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        if monthnum3 == 2:\n            return True\n    elif monthnum3 in (4, 6, 9, 11):\n        return True\n    elif monthnum3 in (1, 3, 5, 7, 8, 10, 12):\n        return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13) and monthnum3 % 2 == 0 and monthnum3 % 4 == 0:\n        if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n            return True\n        elif monthnum3 == 2:\n            return False\n        elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n            return True\n        elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return False\n        else:\n            return False\n    elif monthnum3 in range(1, 13):\n        return days_in_month[monthnum3 - 1]\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [2, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        print(\"Invalid month number\")\n        return None\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return True\n        elif monthnum3 % 2 == 0:\n            if monthnum3 == 2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        print(\"Invalid month number.\")\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Convert the given month number to text\n    monthnum_text = str(monthnum)\n\n    # Check if the first digit of the month number is 3\n    if monthnum_text[0] == '3':\n        # Check if the last digit of the month number is 0 or 1\n        if monthnum_text[2] == '0' or monthnum_text[2] == '1':\n            return True\n        else:\n            return False\n    else:\n        # Check if the first digit of the month number is 1\n        if monthnum_text[0] == '1':\n            # Check if the second digit of the month number is 5, 7, 8, 9, or 10\n            if int(monthnum_text[1]) in [5, 7, 8, 9, 10]:\n                # Check if the last digit of the month number is 5 or 9\n                if monthnum_text[2] == '5' or monthnum_text[2] == '9':\n                    return True\n                else:\n                    return False\n            else:\n                # Check if the last digit of the month number is 0 or 1\n                if monthnum_text[2] == '0' or monthnum_text[2] == '1':\n                    return True\n                else:\n                    return False\n        else:\n            # Check if the last digit of the month number is 0 or 1\n            if monthnum_text[2] == '0' or monthnum_text[2] == '1':\n                return True\n            else:\n                return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if month[monthnum3] == 30:\n        print(\"The month\", monthnum3, \"has 30 days\")\n    else:\n        print(\"The month\", monthnum3, \"does not have 30 days\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum in [4,6,9,11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 == 2:\n        return 30\n    elif monthnum3 in [4, 6, 9, 11]:\n        return 30\n    else:\n        return 31"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return 'Invalid month number'"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Traverse through all elements of the array\n    for i in range(n):\n        # Find the minimum element in the remaining unsorted array\n        min_idx = i\n        min_val = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < min_val:\n                min_idx = j\n                min_val = arr[j]\n        # Swap the found minimum element with the first element\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    # Calculate the minimum difference between any two elements in the array\n    diff = abs(arr[0] - arr[n-1])\n    for i in range(1, n-1):\n        diff = min(diff, abs(arr[i] - arr[i-1]) + abs(arr[i+1] - arr[i]))\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = abs(arr[n-1] - arr[0])\n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n\n    Args:\n        arr: list of integers\n        n: size of the array\n\n    Returns:\n        int: minimum difference between any two elements in the array\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    diff = float('inf')\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < diff:\n            diff = arr[i+1] - arr[i]\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize the minimum difference as the difference between the last element and the first element\n    min_diff = arr[-1] - arr[0]\n\n    # Traverse through the array from the second element\n    for i in range(1, n - 1):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i + 1] - arr[i]\n\n        # Update the minimum difference if the current difference is smaller\n        min_diff = min(min_diff, diff)\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its length as inputs and returns the minimum difference between any two elements in the array.\n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()  # Sort the array in ascending order\n    min_diff = float('inf')  # Initialize the minimum difference as infinity\n    for i in range(n - 1):\n        # Calculate the difference between current and next element in the array\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its length as inputs and returns the minimum difference between any two elements in the array.\n    '''\n    min_diff = float('inf') # initialize minimum difference as infinity\n    for i in range(n): # iterate through array\n        for j in range(i+1, n): # iterate through array from index i+1 to n-1\n            diff = abs(arr[i] - arr[j]) # calculate difference between elements i and j\n            if diff < min_diff: # update minimum difference if current difference is smaller\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of n integers as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # sort the array in ascending order\n    min_diff = abs(arr[1] - arr[0])  # initialize minimum difference as difference between adjacent elements\n    \n    for i in range(2, n):\n        diff = abs(arr[i] - arr[i-1])  # calculate difference between current element and previous element\n        if diff < min_diff:  # if the calculated difference is smaller than the previous minimum difference, update the minimum difference\n            min_diff = diff\n            \n    return min_diff  # return the minimum difference"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize the minimum difference\n    min_diff = float('inf')\n    \n    # Traverse through the array\n    for i in range(n - 1):\n        # Find the difference between the current element and the next element\n        diff = abs(arr[i] - arr[i + 1])\n        \n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n    \n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n\n    count = 0\n\n    for char in str:\n        if char.isdigit():\n            count += 1\n\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(string):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function checks if a given number is a polite number or not. \n    A polite number is a positive integer that is written in a particular way:\n    - It has the form n*(3^p), where n is a positive integer, and p is a positive integer.\n    - It is greater than or equal to 1 and less than or equal to 1000.\n    '''\n\n    # find the value of n \n    if n < 1: \n        return False\n    if n == 1: \n        return True\n    \n    # find the value of p \n    for i in range(1, int(math.log10(n))+1): \n        if n/3**i > 1000: \n            p = i\n            break\n    else: \n        return False\n    \n    # check if n*(3^p) is a polite number \n    if n*(3**p) < 1: \n        return False\n    \n    # if n*(3^p) is greater than or equal to 1000, n is a polite number\n    if n*(3**p) >= 1000: \n        return True\n    \n    return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Formula to find nth polite number\n    polite_count = 0\n    p = 1\n    while p <= n:\n        p *= 1.1\n        polite_count += 1\n    polite_count -= 1\n\n    # Calculate the nth polite number\n    polite_num = int(math.log(polite_count) + 1)\n\n    # Return the nth polite number\n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns the nth polite number using the following algorithm:\n\n    - If n is even, the nth polite number is odd.\n    - If n is odd, the nth polite number is 2n + 1.\n\n    Note that this algorithm assumes that n is a positive integer.\n    \"\"\"\n    if n % 2 == 0:\n        return n + 1\n    else:\n        return 2 * n + 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function finds the nth polite number using the math module.\n    It returns the nth polite number if it exists, otherwise it returns None.\n    '''\n    # Initialize the base and limit variables\n    base = 1\n    limit = 1000000 # A high limit to avoid infinite loops\n    \n    # Keep iterating until we find the nth polite number\n    while True:\n        # Calculate the nth polite number\n        nth_polite = int((math.log(base) + math.log(limit)) / math.log(base))\n        \n        # If we have found the nth polite number, return it\n        if nth_polite == n:\n            return nth_polite\n        \n        # If we have exceeded the limit, return None\n        if nth_polite > limit:\n            return None\n        \n        # If we have exceeded the number of iterations, return None\n        if nth_polite >= 1000000:\n            return None\n        \n        # Increase the base and limit until we find the nth polite number\n        base += 1\n        limit += 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n\n    # helper function to find the nth polite number\n    def find_nth_polite(n):\n        i = 1\n        polite_num = 1\n        while i <= n:\n            if math.gcd(polite_num, n) == 1:\n                polite_num += 1\n            i += 1\n        return polite_num - n\n\n    # find the nth polite number\n    polite_num = find_nth_polite(n)\n\n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n < 1:\n        return None\n\n    # Initialize two variables to keep track of the previous and next polite numbers\n    prev_polite = 0\n    next_polite = 1\n\n    # Initialize a variable to keep track of the number of iterations\n    i = 2\n\n    # Check if the next polite number is greater than n\n    while next_polite <= n:\n        # If it is, increment the number of iterations and update prev_polite and next_polite\n        i += 1\n        prev_polite = next_polite\n        next_polite = prev_polite + next_polite\n\n    # If the next polite number is equal to or less than n, return None\n    if next_polite > n:\n        return None\n\n    # Return the number of iterations and the next polite number\n    return i, next_polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # function to find the square root of a number using binary search\n    def binary_search_sqrt(n, low, high): \n        if high < low: \n            return None\n\n        mid = (low + high) // 2\n        if mid * mid > n: \n            return binary_search_sqrt(n, low, mid - 1)\n        elif mid * mid < n: \n            return binary_search_sqrt(n, mid + 1, high)\n        else: \n            return mid\n\n    # find the square root of n\n    sqrt_n = binary_search_sqrt(n, 1, n)\n    if sqrt_n is None: \n        return \"Not Found\"\n\n    # calculate the nth polite number using the formula\n    return int(sqrt_n * (sqrt_n - 1) // 2)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes an integer as input and returns the nth polite number.\n    The nth polite number is defined as the smallest number that is greater than or equal to the nth positive integer.\n    '''\n    # initialize variables for nth polite number and current number\n    nth_polite = 0\n    current_num = 1\n    \n    # loop through all numbers from 2 to n\n    while current_num <= n:\n        # check if the current number is greater than or equal to the nth polite number\n        if current_num >= nth_polite:\n            # if it is, update the nth polite number\n            nth_polite = current_num\n        # increment the current number\n        current_num += 1\n    \n    # return the nth polite number\n    return nth_polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n and returns the n-th polite number.\n    The n-th polite number is the number that is closest to n but is not a perfect square.\n    \"\"\"\n\n    # Define the range of numbers to check\n    a, b = 1, 20000\n\n    # Initialize the variable to keep track of the closest polite number found so far\n    closest = math.inf\n\n    # Iterate through the range of numbers to check\n    for i in range(a, b + 1):\n\n        # Calculate the difference between n and i\n        diff = abs(n - i)\n\n        # If the difference is a perfect square, update the closest polite number\n        if math.sqrt(diff) == int(math.sqrt(diff)):\n            closest = i\n\n    return closest"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    if n <= 1:\n        return n\n\n    if n % 2 == 0:\n        return is_polite(n/2) + 1\n\n    return is_polite((3*n**2 + 1)/2)\n\nprint(is_polite(20)) # Output: 35"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(lst):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(lst) < 2:\n        return []\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, target_sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes in two lists as input: arr and sum. \n    It returns the count of pairs in the first list that add up to the second list's sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Given two lists, this function returns a new list that contains only the elements that are present in the first list but not in the second list.\n\n    :param li1: list\n    :param li2: list\n    :return: list\n    \"\"\"\n    result = []\n    for item in li1:\n        if item not in li2:\n            result.append(item)\n    return result"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Function to find the difference between two lists.\n    \n    Parameters:\n    li1 (list): first list\n    li2 (list): second list\n    \n    Returns:\n    list: list of elements that are present in li1 but not in li2\n    '''\n    \n    diff_list = []\n    \n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    \n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Check if the lists are of the same length\n    if len(li1)!= len(li2):\n        print(\"The lists are not of the same length\")\n        return\n\n    # Find the difference between the two lists\n    diff = [x for x in li1 if x not in li2]\n\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n    \"\"\"\n    diff_list = [i for i in li1 if i not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list with the elements that are present in only one of the input lists but not in both.\n    '''\n    # create a set of elements present in both lists\n    common_elements = set(li1) & set(li2)\n    # create a set of elements present in only one of the lists\n    one_element_list = set(li1) - common_elements\n    # create a set of elements present in only one of the lists\n    other_element_list = set(li2) - common_elements\n    # find the elements that are present in only one of the lists but not in both\n    diff_list = list(common_elements)\n    for elem in one_element_list:\n        if elem in diff_list:\n            diff_list.remove(elem)\n    for elem in other_element_list:\n        if elem in diff_list:\n            diff_list.remove(elem)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input, and returns the difference between the two lists.\n    '''\n    # create an empty list to store the difference\n    diff_list = []\n    # loop through each element in the first list\n    for i in li1:\n        # if the element is not in the second list, add it to the difference list\n        if i not in li2:\n            diff_list.append(i)\n    # return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # convert the lists to sets to remove duplicates\n    set1 = set(li1)\n    set2 = set(li2)\n    # find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n    # find the difference between the two sets\n    diff_elements = set1.difference(set2)\n    # return the difference list\n    return list(diff_elements)"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_numbers = [i for i in range(1, n+1, 2)]\n    fourth_powers = [num**4 for num in odd_numbers]\n    return sum(fourth_powers)\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums = []\n    for i in range(2, n+1, 2):\n        odd_nums.append(i)\n    odd_nums_sum = sum(x**4 for x in odd_nums)\n    return odd_nums_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initializing sum to zero\n    sum = 0\n    \n    # Looping through first n odd numbers\n    for i in range(1, n+1):\n        # Calculating fourth power of odd number\n        fourth = i**4\n        \n        # Adding fourth power of odd number to sum\n        sum += fourth\n    \n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n): \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2): \n        sum += i**4\n    return sum "
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += 4**i\n        i += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n should be greater than or equal to 1\")\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_odd_pow_fourth = 0\n    i = 1\n    while i <= n:\n        sum_odd_pow_fourth += i ** 4\n        i += 1\n    return sum_odd_pow_fourth"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**4\n        i += 2\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char in ['(', '[', '{']:\n                if char == stack.pop():\n                    continue\n                else:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if top_char!= '(':\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return \"Error: Closing parentheses without opening parentheses\"\n            opening_parentheses = stack.pop()\n            if len(exp[opening_parentheses+1:i]) % 2 == 1:\n                return \"Error: Unmatched opening parentheses\"\n            if not stack:\n                return \"Balanced\"\n    if stack:\n        return \"Error: Not balanced\"\n    return \"Balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    # Create an empty stack to store the opening and closing parentheses.\n    stack = deque()\n\n    # Traverse through the expression and add opening parentheses to the stack.\n    for char in exp:\n        if char == '(':\n            stack.appendleft(char)\n\n    # Traverse through the stack from left to right.\n    for char in exp:\n        if char == ')':\n            if not stack:\n                return \"Not balanced\"\n            stack.pop()\n\n    # If there are any opening parentheses in the stack, return \"Not balanced\".\n    if stack:\n        return \"Not balanced\"\n\n    # If there are no opening parentheses in the stack, return \"Balanced\".\n    return \"Balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', ')']:\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n    \n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in {'}', ']', ')'}:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', ')']:\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for c in exp:\n        if c in ['(', '{', '[']:\n            stack.append(c)\n        elif c in [')', '}', ']']:\n            if not stack:\n                return False\n            if (c == ')' and stack[-1]!= '(') or (c == '}' and stack[-1]!= '{') or (c == ']' and stack[-1]!= '['):\n                return False\n            stack.pop()\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', ')']:\n            stack.append(char)\n        elif char in ['+', '-']:\n            if not stack:\n                return \"Not balanced\"\n            if stack[-1] in ['(', '[']:\n                stack.pop()\n            else:\n                return \"Not balanced\"\n    if not stack:\n        return \"Balanced\"\n    return \"Not balanced\""
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    i = 0\n    while i < len(words):\n        if len(words[i]) == K:\n            words.pop(i)\n        else:\n            i += 1\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Loop through each word and check its length\n    for i, word in enumerate(words):\n        # If the length of the word is less than K, remove it\n        if len(word) < K:\n            words.pop(i)\n    \n    # Join the words back into a string\n    result =''.join(words)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word)!= K]\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Split the string into words\n    words = test_str.split()\n\n    # Remove words with length K\n    filtered_words = [word for word in words if len(word)!= K]\n\n    # Join the filtered words into a string\n    filtered_str =''.join(filtered_words)\n\n    return filtered_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the words with length K or less\n    result = []\n\n    # Iterate through the words\n    for word in words:\n        # Check if the length of the word is greater than or equal to K\n        if len(word) >= K:\n            # Append the word to the result list\n            result.append(word)\n\n    # Join the words back into a string and return the result\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the words without k length\n    new_words = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is equal to K\n        if len(word)!= K:\n            # If it's not equal, add it to the new list\n            new_words.append(word)\n\n    # Join the words in the new list into a single string and return it\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    match = re.search(pattern,text)\n    if match:\n        print(\"The substring '{}' appears {} times at position {}\".format(match.group(0),match.group(0).count(match.group(0)),match.start()))\n        return match.group(0).count(match.group(0)),match.start()\n    else:\n        print(\"No match found for the pattern '{}' in the string '{}'\".format(pattern,text))\n        return None\n\ntext = \"Hello, this is a test string. It has a pattern match.\"\npattern = \"pattern\"\n\noccurance_substring(text,pattern)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regular expression to search for the pattern\n    result = re.search(pattern, text)\n    \n    # If match found, return the occurrence and position of the pattern in the string\n    if result:\n        return (result.group(), result.start(), result.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n\n    matches = re.findall(pattern, text)\n\n    if len(matches) > 0:\n        for match in matches:\n            print(f\"Found '{match}' at index {text.index(match)}\")\n            print(f\"Match length: {len(match)}\")\n    else:\n        print(\"No matches found.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regex search method to search for pattern in text\n    result = re.search(pattern, text)\n    if result:\n        # Return the matched substring and the position of the match\n        return result.group(), result.start()\n    else:\n        # Return None if pattern is not found\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    matches = re.findall(pattern, text)\n\n    if matches:\n        for match in matches:\n            print(f\"Substring '{match}' found at position {text.find(match)}\")\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    else:\n        return len(matches), matches[0]"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None\n    else:\n        return [(match, text.index(match)) for match in matches]"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # loop through the given list and check if the odd index contains odd numbers\n    for i in range(len(nums)):\n        if i%2!=0 and nums[i]%2!=0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # iterate through the list of numbers\n    for i in range(0, len(nums), 2):\n        # if the current index contains an odd number, return False\n        if nums[i] % 2!= 0:\n            return False\n    \n    # if we reach this point, all even indexes contain odd numbers\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns True if every odd index contains odd numbers,\n    otherwise it returns False.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0: # check if index is even\n            if nums[i] % 2 == 0: # check if current number is even\n                return False # if current number is even, return False\n    return True # if no even number found, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0: # check if the index is even\n            if nums[i] % 2!= 0: # check if the odd number at the odd index is odd\n                return False # if the odd number is not odd, return False\n    return True # if all the odd numbers in every odd index are odd, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0: # checking whether i is odd\n            if len(nums[i:]) % 2!= 0: # checking whether the remaining elements are odd\n                return False # if any odd index doesn't have odd number of odd numbers, return False\n    return True # if all odd indices have odd number of odd numbers, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 1:\n                odd_count += 1\n    return odd_count == len(nums)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(1, len(nums), 2):\n        if not all(num % 2!= 0 for num in nums[i:]):\n            return False\n\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n\nsample_string = \"hello world\"\nresult = count_vowels(sample_string)\nprint(f\"There are {result} vowels in the string.\")"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0:\n            if test_str[i] in vowels and test_str[i-1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    # create a dictionary of vowels\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n\n    # initialize the count to zero\n    count = 0\n\n    # iterate over each character in the string\n    for i in range(len(test_str)):\n        # get the previous character\n        prev_char = test_str[i-1] if i > 0 else None\n\n        # get the current character\n        curr_char = test_str[i]\n\n        # check if the previous character is a vowel and the current character is a vowel\n        if prev_char in vowels and curr_char in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    \n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str)-1:\n            if test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n                \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to store the unique elements of the list\n    unique_elems = set(arr)\n    # calculate the sum of the unique elements\n    sum_unique_elems = sum(unique_elems)\n    return sum_unique_elems"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set(arr)\n    # Convert the set to a list and sum it up\n    return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty set to store unique elements of the array\n    unique_elements = set()\n    \n    # Iterate through the elements of the array\n    for element in arr:\n        # If the element is not in the set, add it\n        if element not in unique_elements:\n            unique_elements.add(element)\n    \n    # Calculate the sum of the non-repeated elements\n    non_repeated_sum = sum(unique_elements)\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    # Remove duplicates from the list using a set\n    unique_arr = list(set(arr))\n\n    # Initialize the sum variable to 0\n    sum_non_repeat = 0\n\n    # Iterate through the unique elements in the list\n    for num in unique_arr:\n        # Check if the current number is present in the list more than once\n        if arr.count(num) > 1:\n            # If it is, add it to the sum_non_repeat variable\n            sum_non_repeat += num\n\n    # Return the sum of non-repeated elements\n    return sum_non_repeat"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr) # create a set of unique elements\n    sum_of_unique_elements = sum(unique_elements) # calculate the sum of unique elements\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    # Initialize a set to keep track of unique elements\n    unique_set = set()\n\n    # Iterate through each element in the list\n    for element in arr:\n        # If the element is not already in the set, add it\n        if element not in unique_set:\n            unique_set.add(element)\n\n    # Initialize a variable to store the sum of unique elements\n    sum_of_unique = 0\n\n    # Iterate through each unique element and add its value to the sum_of_unique\n    for unique_element in unique_set:\n        sum_of_unique += unique_element\n\n    # Return the sum of unique elements\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    # Create a set to store the unique elements in the list\n    unique_elements = set(arr)\n    # Convert the set to a list so that we can sort it in ascending order\n    sorted_elements = sorted(list(unique_elements))\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    # Loop through the sorted list and add the elements to the sum_non_repeated variable\n    for i in sorted_elements:\n        sum_non_repeated += i\n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes in a list of integers and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # initialize a variable to store the sum of non-repeated elements\n    sum = 0\n    \n    # loop through the list and add up the values that appear once in the dictionary\n    for num in arr:\n        if freq[num] == 1:\n            sum += num\n    \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements from the list\n    unique_set = set(arr)\n\n    # Calculate the sum of unique elements\n    sum_unique = sum(unique_set)\n\n    # Subtract the sum of unique elements from the original list to get the sum of non-repeated elements\n    sum_non_repeated = sum(arr) - sum_unique\n\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a dictionary to store the count of each element in the list\n    count = {}\n    \n    # iterate through the list and update the count dictionary\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # initialize the sum variable to zero\n    sum_non_repeated = 0\n    \n    # iterate through the count dictionary and add the non-repeated elements to the sum\n    for num in count:\n        if count[num] == 1:\n            sum_non_repeated += num\n    \n    # return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Create an iterator for the groupby function\n    group_iterator = groupby(list1)\n    # Initialize an empty list to store the sublists\n    sublists = []\n    # Iterate over the iterator\n    for key, group in group_iterator:\n        # If the key is the same as the previous key, append the group to the sublists\n        if key == prev_key:\n            sublists[-1].append(list(group))\n        # Otherwise, create a new sublist and append the group to it\n        else:\n            sublists.append(list(group))\n            prev_key = key\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    grouped_list = []\n    for item in groupby(list1):\n        if len(list(item)) == 1:\n            grouped_list.append(list(item))\n        else:\n            grouped_list.append([item[0]])\n    return grouped_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return list(groupby(lst, key=lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the elements of the list by their frequency\n    grouped_list = groupby(list1, lambda x: x)\n    \n    # Iterate over the generator object to pack consecutive duplicates into sublists\n    packed_list = []\n    for key, group in grouped_list:\n        if key == key:\n            packed_list.extend(list(group))\n        else:\n            packed_list.append(list(group))\n    \n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped = groupby(lst)\n    return [list(sub) for _, sub in grouped]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use groupby() to group consecutive duplicates together\n    grouped_items = groupby(enumerate(list1), lambda x: x[0] == x[1])\n    \n    # Convert the grouped items to a list of sublists\n    sublists = [list(group) for key, group in grouped_items if not key]\n    \n    # Flatten the list of sublists\n    flattened_sublists = [item for sublist in sublists for item in sublist]\n    \n    return flattened_sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouper = groupby(list1)\n    result = []\n    for key, group in grouper:\n        result.extend(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1)\n    result = []\n    for key, group in grouped_list:\n        result.append([key] + list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use the groupby() function to group the list elements based on their frequency.\n    grouped = groupby(list1)\n    \n    # Initialize an empty list to store the packed sublists.\n    packed_sublists = []\n    \n    # Loop through the grouped sublists.\n    for sublist, group in grouped:\n        \n        # Check if the current sublist contains only one element.\n        if len(list(group)) == 1:\n            packed_sublists.append(list(group))\n        else:\n            # Initialize an empty list to store the current sublist's consecutive duplicates.\n            consecutive_duplicates = []\n            \n            # Loop through the current sublist.\n            for element in group:\n                # Check if the next element is the same as the current element.\n                if element == next(group):\n                    # Append the next element to the consecutive duplicates list.\n                    consecutive_duplicates.append(element)\n                    # Stop the loop once the consecutive duplicates have been found.\n                    break\n            \n            # If there are consecutive duplicates, append the sublist containing them to the packed_sublists list.\n            if consecutive_duplicates:\n                packed_sublists.append(consecutive_duplicates)\n    \n    # Return the packed_sublists list.\n    return packed_sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert all the lists in list1 to tuples\n    list1 = tuple(list1)\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n    # Iterate through all possible sublists of list1\n    for i in range(len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            # Create the tuple of the current sublist\n            sublist = tuple(list1[j:j+i])\n            # If the tuple is already in the dictionary, increment its count\n            if sublist in count_dict:\n                count_dict[sublist] += 1\n            # If the tuple is not in the dictionary, add it with a count of 1\n            else:\n                count_dict[sublist] = 1\n    # Return the dictionary containing the counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the list to a set to get unique lists and count their occurrences\n    sublist_count = {}\n    for sublist in list1:\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n\n    # Convert the dictionary to a list of tuples and sort them in descending order of their count\n    sublist_tuples = sorted(sublist_count.items(), key=lambda x: x[1], reverse=True)\n\n    # Return the list of tuples\n    return sublist_tuples"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            sublist = tuple(list1[i])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    counts = {}\n    for sublist in list1:\n        key = tuple(sublist)\n        if key in counts:\n            counts[key] += 1\n        else:\n            counts[key] = 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublist_count = {}\n    for sublist in list1:\n        if tuple(sublist) in sublist_count:\n            sublist_count[tuple(sublist)] += 1\n        else:\n            sublist_count[tuple(sublist)] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists.append(tuple(list1[i:j]))\n    sublists = list(set(sublists))\n    counts = {}\n    for sublist in sublists:\n        if sublist not in counts:\n            counts[sublist] = 0\n        counts[sublist] += 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary\n    count_dict = {}\n\n    # Loop through the lists in the input list\n    for sublist in list1:\n\n        # Convert the list to a tuple and check if it's in the dictionary\n        if tuple(sublist) in count_dict:\n            count_dict[tuple(sublist)] += 1\n        else:\n            count_dict[tuple(sublist)] = 1\n\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n\n    # Create a dictionary to store the count of each list\n    count_dict = {}\n\n    # Iterate through each list in the input list\n    for item in lst:\n        # Check if the list is already in the dictionary\n        if item in count_dict:\n            # Increment the count of that list by 1\n            count_dict[item] += 1\n        else:\n            # Add the list to the dictionary with a count of 1\n            count_dict[item] = 1\n\n    # Convert the dictionary to a list of tuples\n    tuples_list = [(item, count_dict[item]) for item in count_dict]\n\n    # Sort the list of tuples by the count in descending order\n    tuples_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Return the list of tuples\n    return tuples_list"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublists = {}\n    for lst in list1:\n        sublist = tuple(lst)\n        if sublist not in sublists:\n            sublists[sublist] = 1\n        else:\n            sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the count of sublists\n    sublist_count = {}\n    # Loop through each list in the main list\n    for sublist in list1:\n        # Convert the list to a tuple and check if it's already in the dictionary\n        if sublist in sublist_count:\n            # If it's already in the dictionary, increment its count\n            sublist_count[sublist] += 1\n        else:\n            # If it's not in the dictionary, add it with a count of 1\n            sublist_count[sublist] = 1\n    # Return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    def check_if_tuple_sums_to_0(tup):\n        return sum(tup) == 0\n\n    # filter out combinations that have tuples that add up to 0\n    filtered_list = [tup for tup in test_list if not check_if_tuple_sums_to_0(tup)]\n\n    # find all combinations of sums that add up to 0\n    combinations_with_sums_to_0 = [tup for tup in combinations(filtered_list, len(filtered_list))]\n\n    # filter out combinations that have tuples that add up to 0\n    final_list = [tup for tup in combinations_with_sums_to_0 if not check_if_tuple_sums_to_0(tup)]\n\n    return final_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def helper(lst, target, temp_sum):\n        if target == 0:\n            return [temp_sum]\n        elif target < 0:\n            return []\n        else:\n            result = []\n            for i in range(len(lst)):\n                new_temp_sum = temp_sum + lst[i]\n                new_target = target - lst[i]\n                new_result = helper(lst[:i] + lst[i+1:], new_target, new_temp_sum)\n                result += new_result\n            return result\n\n    lst = test_list\n    target = sum(lst)\n    return helper(lst, target, 0)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Get all possible combinations of pairs of tuples in the list\n    pairs = combinations(test_list, 2)\n\n    # Create an empty list to store the combinations of sums\n    combinations_sum = []\n\n    # Iterate over each pair of tuples in the list\n    for pair in pairs:\n        # Get the sum of the tuples in the pair\n        sum_pair = sum(pair)\n\n        # Check if the sum of the tuples is in the test list\n        if sum_pair in test_list:\n            # If the sum of the tuples is in the test list, create a new tuple with the original pair and the sum of the pairs\n            new_combination = (pair[0], pair[1], sum_pair)\n            # Add the new combination to the list of combinations of sums\n            combinations_sum.append(new_combination)\n\n    # Return the list of combinations of sums\n    return combinations_sum"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    The function should take a tuple list as input and return a list of tuples containing all the combinations of sums.\n    \n    The function uses itertools.combinations() function from the itertools module.\n    '''\n    # convert the tuple list to a set to eliminate duplicates\n    test_set = set(test_list)\n\n    # generate all combinations of sums from the set of tuples\n    combination_set = set(combinations(test_set, r) for r in range(1, len(test_set) + 1))\n\n    # convert the set of combinations to a list of tuples\n    combination_list = list(combination_set)\n\n    return combination_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # Using itertools.combinations() function to find the combinations of sums with tuples in the given tuple list\n    for comb in combinations(test_list, r=2):\n        # Checking if the sum of the first element and the second element is present in the tuple list\n        if (sum(comb) == comb[0][0] + comb[0][1]):\n            print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Using itertools library to find combinations of sums with tuples in the given tuple list\n    combinations_list = list(combinations(test_list, r=2))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    if test_list[i] + test_list[j] + test_list[k] + test_list[l] == total_sum:\n                        print(tuple(sorted([test_list[i], test_list[j], test_list[k], test_list[l]])))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # Sort the test_list\n    test_list.sort()\n\n    # Create a set of tuples\n    set_of_tuples = set(test_list)\n\n    # Find the combinations of sums\n    for combination in combinations(set_of_tuples, r=2):\n        if sum(combination) == 0:\n            print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    count = 0\n    for i in range(total_sum + 1):\n        for j in range(i, total_sum + 1):\n            if (i, j) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            combination = tuple(combinations(test_list, i))\n            for k in range(j, n+1):\n                sub_combination = tuple(combinations(test_list, j-i))\n                result = tuple(combinations(test_list, k-j))\n                print(combination, sub_combination, result)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            divisors.append(i)\n            n //= i\n    if n > 1:\n        divisors.append(n)\n    divisors.sort(reverse=True)\n    count_divisors_even = True\n    for divisor in divisors:\n        if count_divisors_even:\n            count_divisors_even = False\n        else:\n            if count_divisors_even % 2 == 0:\n                count_divisors_even = True\n            else:\n                count_divisors_even += 1\n    if count_divisors_even:\n        print(f\"The count of divisors of {n} is even.\")\n    else:\n        print(f\"The count of divisors of {n} is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function returns the count of divisors of a given number.\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1 \n    if count > 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1 \n    if n > 1: \n        count += 1 \n    if count % 2 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    # Calculate the count of divisors of n\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    \n    # Check if the count of divisors is even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n\n    # calculate the number of divisors for the given number\n    num_divisors = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            num_divisors += 1\n            if n // i!= i: \n                num_divisors += 1\n\n    # check if the count of divisors is even or odd\n    if num_divisors % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes a number as input and returns the count of divisors.\n    '''\n    if n == 1:\n        return 1\n    else:\n        divisors = []\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                if i!= n/i:\n                    divisors.append(i)\n                    divisors.append(n/i)\n        return len(divisors)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function counts the number of divisors of a number n.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    return count"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd length subarrays.\n\n    Time Complexity: O(n^3)\n    \"\"\"\n    n = len(arr)\n    res = 0\n\n    for i in range(1, n-1):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (k-j) % 2 == 1: # check if length of subarray is odd\n                    sub_arr = arr[j:k]\n                    res += sum(sub_arr) # add the sum of subarray to result\n\n    return res"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    sum_odd = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sub_arr = arr[i:j]\n            if len(sub_arr) % 2!= 0:\n                sum_odd += sum(sub_arr)\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            for j in range(i+1, n):\n                if j % 2 == 1:\n                    sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of all odd length subarrays.\n    \"\"\"\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2 == 1:\n                sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_ = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j - i + 1 % 2 == 1:\n                sum_ += sum(arr[i:j+1])\n    return sum_"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            sum_odd += arr[j]\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # initialize the sum of all odd length subarrays as zero\n    sum_of_subarrays = 0\n\n    # loop through each subarray in the input array\n    for i in range(len(arr)):\n        # loop through each element in the subarray\n        for j in range(i+1, len(arr)+1, 2):\n            # add the element to the sum of all odd length subarrays\n            sum_of_subarrays += arr[j-1]\n\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += arr[i]\n        else:\n            left = i\n            right = min(i+2*n-1, n-1)\n            while left < right:\n                sum += arr[left] + arr[right]\n                left += 1\n                right -= 1\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    sum_of_subarrays = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (j-i+1) % 2!= 0:\n                sum_of_subarrays += sum(arr[i:j+1])\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    n = len(arr)\n\n    for i in range(1, n - 1):\n        if i % 2!= 0:\n            left = max(0, i - 2)\n            right = min(i + 2, n - 1)\n            sum += arr[right] - arr[left]\n\n    return sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Find the maximum and minimum values of the RGB color\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the difference between the maximum and minimum values\n    difference = max_val - min_val\n    \n    # Calculate the value of the hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * ((g - b) / difference)\n    elif max_val == g:\n        hue = 60 * ((b - r) / difference) + 120\n    elif max_val == b:\n        hue = 60 * ((r - g) / difference) + 240\n    \n    # Calculate the value of the saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = difference / max_val\n    \n    # Calculate the value of the value\n    value = max_val\n    \n    # Return the converted color\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_color / 255.0\n    if max_color == min_color:\n        s = 0.0\n    else:\n        d = max_color - min_color\n        if max_color == r:\n            h = (g - b) / d\n        elif max_color == g:\n            h = 2 + (b - r) / d\n        else:\n            h = 4 + (r - g) / d\n        h /= 6.0\n        if h < 0:\n            h += 1.0\n        s = d / (1 - abs(2 * max_color - 1))\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    \n    h = 0.0\n    if max_value == r:\n        h = (g - b) / delta\n    elif max_value == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    h = h * 60.0\n    \n    if h < 0:\n        h += 360.0\n    \n    v = max_value\n    \n    if delta == 0:\n        s = 0.0\n    else:\n        s = delta / max_value\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # Convert r, g, b to floats\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Convert r, g, b to floats in the range [0, 1]\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * (((g - b) / (max_val - min_val)))\n    elif max_val == g:\n        hue = 60 * ((b - r) / (max_val - min_val) + 2)\n    else:\n        hue = 60 * ((r - g) / (max_val - min_val) + 4)\n\n    # Normalize hue\n    if hue < 0:\n        hue += 360\n\n    # Calculate saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        diff = max_val - min_val\n        saturation = diff / max_val\n\n    # Calculate value\n    value = max_val\n\n    # Return as tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = 60 * ((g - b) / delta)\n    elif max_val == g:\n        h = 60 * ((b - r) / delta + 2)\n    elif max_val == b:\n        h = 60 * ((r - g) / delta + 4)\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n    v = max_val\n    hsv = (h, s, v)\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert rgb color to hsv color.\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n\n    h = 0.0\n    s = 0.0\n    v = max_color\n\n    if max_color == min_color:\n        h = 0.0\n        s = 0.0\n    else:\n        delta = max_color - min_color\n        s = delta / max_color\n\n        if max_color == r:\n            h = (g - b) / delta\n        elif max_color == g:\n            h = 2.0 + (b - r) / delta\n        else:\n            h = 4.0 + (r - g) / delta\n\n        if h < 0.0:\n            h += 6.0\n\n        h = h / 6.0\n\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # Convert rgb to xyz color space\n    r, g, b = r / 255, g / 255, b / 255\n    x = 0.412453 * r + 0.35758 * g + 0.180423 * b\n    y = 0.212671 * r + 0.71516 * g + 0.072169 * b\n    z = 0.019334 * r + 0.119193 * g + 0.950227 * b\n    # Convert xyz to xy color space\n    if x + y + z > 0:\n        x /= (x + y + z)\n        y /= (x + y + z)\n    else:\n        x, y = 0, 0\n    # Convert xy to hsv color space\n    if x == y:\n        h = 0\n    elif x == z:\n        h = 60 * (g - b) / (x - y)\n    elif y == z:\n        h = 60 * (b - r) / (y - x)\n    else:\n        h = 60 * (r - g) / (x - y)\n    if h < 0:\n        h += 360\n    hsv = (h, 1, min(x, y, z))\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    # Convert RGB to floating-point values\n    r_f = float(r) / 255.0\n    g_f = float(g) / 255.0\n    b_f = float(b) / 255.0\n    \n    # Find minimum and maximum values of RGB\n    min_value = min(r_f, g_f, b_f)\n    max_value = max(r_f, g_f, b_f)\n    \n    # Find the delta between maximum and minimum values\n    delta = max_value - min_value\n    \n    # Find the hue\n    if max_value == r_f:\n        h = (g_f - b_f) / delta\n    elif max_value == g_f:\n        h = 2.0 + (b_f - r_f) / delta\n    else:\n        h = 4.0 + (r_f - g_f) / delta\n    \n    # Find the saturation and value\n    if max_value == 0:\n        s = 0.0\n    else:\n        s = delta / max_value\n    \n    if s == 0.0:\n        v = max_value\n    else:\n        v = max_value\n    \n    # Convert hue to degrees\n    h_degrees = h * 60.0\n    \n    # Convert hue from degrees to fraction of a circle\n    h_frac = h_degrees / 60.0\n    \n    # If h is less than 0, add 1 to make it a positive value\n    if h_frac < 0:\n        h_frac += 1.0\n    \n    # Return the HSV values as a tuple\n    return (h_frac, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color model.\n    \"\"\"\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    hsv = [0, 0, max_val]\n    delta = max_val - min_val\n    if delta == 0:\n        return hsv\n\n    if max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h *= 60\n    if h < 0:\n        h += 360\n\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    # Convert R, G, and B to integers\n    r, g, b = map(int, [r, g, b])\n    # Find the maximum and minimum values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    # Find the range of the color space\n    range_value = max_value - min_value\n    # Calculate the saturation and value of the color\n    if max_value == 0:\n        # If the maximum value is zero, the color is grayscale\n        saturation = 0\n        value = max_value\n    elif range_value == 0:\n        # If the range value is zero, the color is fully saturated or fully desaturated\n        saturation = 0\n        value = max_value\n    else:\n        saturation = range_value / max_value\n        value = max_value\n    # Calculate the hue of the color\n    if max_value == r:\n        hue = (g - b) / range_value\n    elif max_value == g:\n        hue = 2 + (b - r) / range_value\n    else:\n        hue = 4 + (r - g) / range_value\n    # Convert the hue value to the range [0, 1]\n    if hue < 0:\n        hue += 6\n    # Calculate the hue value as an integer\n    hue = int(hue * 6)\n    # Return the hsv values as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    \"\"\"\n    even = 1\n    odd = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n    \n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd number in the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    product = even_count * odd_count\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd number of the list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        product *= min(even_count, odd_count)\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    if even_count > 0 and odd_count > 0:\n        product = list1[0] * list1[1]\n        print(product)\n    else:\n        print(\"There is no even and odd number in the list.\")\n        "
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count_even = 0\n    count_odd = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        \n        if count_even > 0 and count_odd > 0:\n            product *= num\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n    if even_count > 0:\n        product = product * 2\n    if odd_count > 0:\n        product = product * 2\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        product *= num\n    \n    if even_count > 0 and odd_count > 0:\n        return product\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list of numbers as an input and returns the product of the first even and odd number.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        return lst[0] * lst[1]\n    else:\n        return 'No even and odd numbers found in the list.'"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = list(test_str.split(\",\"))\n    int_list = []\n    for str in str_list:\n        if str.isdigit():\n            int_list.append(int(str))\n        else:\n            continue\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        test_tuple = tuple(map(int, test_str.split(',')))\n        return test_tuple\n    except ValueError:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split()))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.replace('(', '').replace(')', '').replace(',', '').split()))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for string in test_str:\n        if string.isdigit():\n            int_tuple += (int(string),)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = eval(test_str)\n    int_tuple = tuple(map(int, test_tuple))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string into a list of strings\n    test_list = test_str.split(',')\n    # create an empty tuple to hold the integers\n    int_tuple = ()\n    # loop through the list of strings and convert each string to an integer\n    for item in test_list:\n        int_tuple += (int(item),)\n    # return the integer tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of substrings using comma as separator\n    substrings = test_str.split(',')\n\n    # Convert each substring to an integer and append to the list\n    result = []\n    for substring in substrings:\n        result.append(int(substring))\n\n    # Return the list of integers as a tuple\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of tuples\n    tuple_list = test_str.split(',')\n\n    # Convert each tuple in the list to an integer\n    int_list = []\n    for i in range(len(tuple_list)):\n        int_list.append(int(tuple_list[i]))\n\n    # Return the integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    string_list = test_str.split()\n    # Create an empty list to hold the integer values\n    integer_list = []\n    # Loop through each string in the list\n    for string in string_list:\n        # If the string is an integer, append it to the integer list\n        if string.isdigit():\n            integer_list.append(int(string))\n    # Return the integer list as a tuple\n    return tuple(integer_list)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Binary search for the index where x belongs\n    index = bisect.bisect_left(a, x)\n    # Check if the index is equal to the length of the array\n    if index == len(a):\n        # If x is already present in the array, return the index\n        return index\n    else:\n        # If x is greater than all elements in the array to its left, return the index of x + 1\n        if x > a[index]:\n            return index + 1\n        # If x is greater than all elements in the array to its right, return the index of the next element after x\n        else:\n            return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use bisect.bisect_right to find the insertion point for the specified value in a sorted list\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Locate the index of the rightmost element that is greater than or equal to x\n    index = bisect.bisect_right(a, x)\n\n    # If the index is the length of the list, then x is not in the list\n    if index == len(a):\n        return None\n\n    # Find the smallest element that is greater than or equal to x in the first index to index-1\n    left = a[index]\n\n    # Find the smallest element that is greater than or equal to x in the index+1 to the end of the list\n    right = a[index+1] if index!= len(a)-1 else None\n\n    # If the left element is greater than or equal to x, then x is the right insertion point\n    if left >= x:\n        return index\n\n    # If the right element is greater than or equal to x, then x is the right insertion point\n    elif right is not None and right >= x:\n        return index+1\n\n    # Otherwise, x must be inserted between the left and right elements\n    else:\n        return index + bisect.bisect_left(a[index:index+1], x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    if idx == len(a):\n        return idx\n    elif a[idx] == x:\n        return idx\n    else:\n        return idx + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif x == a[index]:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a\\bb{3}')\n    match = pattern.search(text)\n    \n    if match:\n        return match.group()\n    else:\n        return 'Not found'"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{2}b{3}')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return \"Not found\""
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{1}b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\1{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*?b{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = tuple(test_str)\n    new_tup += test_list\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into one\n    combined_list = test_list + [test_str]\n    # Convert the combined list to a tuple\n    new_tuple = tuple(combined_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the string to a list\n    test_list = list(test_str)\n    # Reverse the list\n    test_list.reverse()\n    # Create a new tuple from the reversed list\n    new_tuple = tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(str(test_str) +'' + str(item) for item in test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Parameters:\n    test_list (list): A list of values to be added to the new tuple.\n    test_str (str): A string to be concatenated with the list of values.\n\n    Returns:\n    A new tuple with the concatenation of the list and string values.\n    \"\"\"\n    new_tuple_list = test_list + [test_str]\n    return tuple(new_tuple_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # Concatenate the tuple and the string\n    new_tuple = test_tuple + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str), tuple(test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Concatenate the list and string and create a tuple\n    return tuple(test_list + [test_str])"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([nums[i], nums[i+1]]))!= 2:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if any(nums[i:i+2] % 2!= 0):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if sum(nums[i:i+2]) % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count += nums[i]\n    return even_count == len(nums) * 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(filter(lambda x: x % 2 == 0, nums[i:i+2])))!= 2:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Initialize a boolean variable to keep track of whether every even index contains even numbers\n    is_valid = True\n\n    # Loop through every even index in the list\n    for i in range(0, len(nums), 2):\n        # Check if the even index contains even numbers\n        if not all(x % 2 == 0 for x in nums[i:]):\n            # If it does not, set the boolean variable to False and break out of the loop\n            is_valid = False\n            break\n\n    # Return the boolean variable indicating whether every even index contains even numbers\n    return is_valid"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(nums[i:i+2] % 2 == 0):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns True if all even indices\n    have even numbers, False otherwise.\n    \"\"\"\n    even_count = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n        if even_count % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Create a set of tuples to keep track of visited tuples\n    visited = set()\n    \n    # Iterate through the tuple elements\n    for elem in test_tup:\n        # If the element is a tuple and has not been visited before, mark it as visited and remove it from the tuple\n        if isinstance(elem, tuple) and elem not in visited:\n            visited.add(elem)\n            test_tup = [elem for elem in test_tup if elem is not elem]\n    \n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result += remove_nested(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for inner_item in item:\n                flat_list.append(inner_item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                new_tup.append(subitem)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove_tuples(tup):\n        if isinstance(tup, tuple):\n            return [item for sub_tup in tup for item in sub_tup]\n        else:\n            return [tup]\n    return [item for sub_tup in test_tup for item in remove_tuples(sub_tup)]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # iterate through the tuple elements\n    for i in range(len(test_tup)):\n        # if the element is a tuple, recursively call the function on it\n        if isinstance(test_tup[i], tuple):\n            remove_nested(test_tup[i])\n        # if the element is a list, recursively call the function on each element\n        elif isinstance(test_tup[i], list):\n            for j in range(len(test_tup[i])):\n                remove_nested(test_tup[i][j])\n        # if the element is a string, remove it\n        elif isinstance(test_tup[i], str):\n            test_tup[i] = \"\"\n    # remove the nested tuples\n    for i in range(len(test_tup)):\n        if isinstance(test_tup[i], tuple) and len(test_tup[i]) == 0:\n            del test_tup[i]\n            break\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for sublist in test_tup for item in sublist]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Remove nested tuples from a given tuple.\n    \"\"\"\n    flattened_list = [item for sublist in test_tup for item in sublist]\n    return [item for item in flattened_list if not isinstance(item, tuple)]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Create an empty list to store the non-nested tuples\n    new_list = []\n    \n    # Iterate through the tuples in the given tuple\n    for tup in test_tup:\n        # Check if the tuple is a tuple itself\n        if isinstance(tup, tuple):\n            # If it is a tuple, recursively call the function on it\n            new_list.extend(remove_nested(tup))\n        # If it's not a tuple, append it to the new list\n        else:\n            new_list.append(tup)\n    \n    # Return the new list\n    return new_list"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    This function takes a list of lists as an input and returns the number of lists in the list.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_lists(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr)-1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize the last index\n    last_index = -1\n\n    # While left is less than or equal to right\n    while left <= right:\n        # Calculate the mid-point index\n        mid = (left + right) // 2\n\n        # If the mid element is equal to x\n        if arr[mid] == x:\n            # Update the last index\n            last_index = mid\n\n            # If the mid element is to the left of x\n            if mid > 0 and arr[mid - 1]!= x:\n                # Update the left pointer\n                left = mid\n            # If the mid element is to the right of x\n            elif mid < len(arr) - 1 and arr[mid + 1]!= x:\n                # Update the right pointer\n                right = mid\n        # If the mid element is less than x\n        elif arr[mid] < x:\n            # Update the left pointer\n            left = mid + 1\n        # If the mid element is greater than x\n        else:\n            # Update the right pointer\n            right = mid - 1\n\n    # Return the last index\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return low - 1 if low!= len(arr) and arr[low] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments: the sorted array and the element whose position needs to be found.\n    The function returns the last position of the element in the array.\n    '''\n    # Initialize a variable to store the last position of the element\n    last_pos = -1\n\n    # Iterate through the array and check if the current element is equal to the input element\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_pos = i\n\n    # Return the last position of the element\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the index of the last element in the array\n    index = arr.index(x)\n    # Check if the element is present in the array\n    if arr[index] == x:\n        # If it is, find the index of the last occurrence of the element\n        while index < len(arr) and arr[index] == x:\n            index += 1\n        return index - 1\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments, an array and an element to search for.\n    It searches the array for the element and returns the index of the last occurrence of the element in the array.\n    If the element is not found, it returns -1.\n    '''\n    # Iterate through the array and keep track of the last index where the element was found\n    last_index = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_index = i\n    # Return the last index where the element was found, or -1 if not found\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Searching the last occurrence of x in the array\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    # If x is not present in the array\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            return mid\n        \n        elif arr[mid] < x:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n\n            return mid\n\n        elif arr[mid] < x:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba.*b\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a[^b]*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?i)a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.+b$')\n    result = pattern.search(text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*?b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all the items in the dictionary.\n\n    :param dict: The dictionary to be processed\n    :return: The sum of all items in the dictionary\n    \"\"\"\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dictionary):\n    '''\n    This function takes a dictionary as input and returns the sum of all its items.\n    '''\n    sum = 0\n    for value in dictionary.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = sum(dict.values())\n    return sum_of_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict:\n        total_sum += dict[item]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize sum to 0\n    total = 0\n    \n    # loop through all numbers in range [l, r]\n    for i in range(l, r+1):\n        # check if number is odd\n        if i % 2!= 0:\n            # add to total if odd\n            total += i\n            \n    # return total sum\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_of_odds = 0\n    for i in range(2, n+1, 2):\n        sum_of_odds += i\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Initialize variables\n    sum_odd = 0\n    i = 1\n    \n    # Loop through odd numbers from 1 to n\n    while i <= n:\n        # Check if i is odd\n        if i % 2 == 1:\n            # Add i to sum_odd\n            sum_odd += i\n        # Increment i\n        i += 1\n    \n    # Return the sum_odd\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, 1000000\n    total = 0\n    for num in range(l, r + 1, 2):\n        total += num\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    return sum(x for x in range(l, r+1, 2) if x % 2!= 0)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = map(int, input(\"Enter range (l, r): \").split())\n    if r < l:\n        l, r = r, l\n    s = 0\n    for i in range(l, r+1, 2):\n        s += i\n    print(\"Sum of odd natural numbers between\", l, \"and\", r, \"is\", s)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = map(int, input(\"Enter the range of natural numbers: \").split())\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    print(\"The sum of odd natural numbers in the range\", l, \"to\", r, \"is:\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0  \n    for num in arr:  \n        sum += num  \n    return sum  "
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    n = n & mask\n    for i in range(d):\n        # left shift by 1 bit\n        n = n << 1\n        # right shift by 31 bits (the maximum value of d bits)\n        n = n >> (32 - d)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    mask = (1<<32) - 1\n    n = n & mask # Ensure that the number is in the range [0, 2^32-1]\n    d = d % 32 # Ensure that d is less than or equal to 32\n    d = d % 32 # Ensure that d is even\n\n    return (n << d) | (n >> (32-d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert n to binary string\n    binary_str = bin(n)[2:]\n    # count the number of bits in binary string\n    num_bits = len(binary_str)\n    # calculate the number of bits to be rotated\n    num_rotations = d % num_bits\n    # calculate the new number\n    new_n = 0\n    # rotate left by d bits\n    for bit in binary_str[:num_rotations]:\n        new_n |= int(bit) << (num_rotations - 1)\n    # add the remaining bits\n    new_n |= int(binary_str[num_rotations:])\n    return new_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the binary representation of n to a list of digits\n    digits = list(bin(n)[2:])\n    # Pad with leading zeros to d digits\n    padded_digits = digits + [0] * (d - len(digits))\n    # Reverse the list\n    reversed_digits = padded_digits[::-1]\n    # Convert the reversed list of digits back to an integer\n    result = int(''.join(reversed_digits), 2)\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    n = n & ((1<<32)-1) # n should be less than or equal to 2^32-1\n    d = d % 32\n    result = (n << d) | (n >> (32-d))\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert n to binary string\n    binary_str = format(n, '032b')\n    # get the length of the binary string\n    length = len(binary_str)\n    # get the number of bits to rotate by\n    num_bits = d % length\n    # rotate left the binary string by num_bits bits\n    rotated_str = binary_str[-num_bits:] + binary_str[:-num_bits]\n    # convert the rotated string back to integer\n    rotated = int(rotated_str, 2)\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return ((n << d) & mask) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert binary number to integer\n    n = int(n, 2)\n\n    # Calculate the number of left rotations\n    num_rotations = d % 32\n\n    # Calculate the number of bits to rotate\n    num_bits_to_rotate = 32 - num_rotations\n\n    # Extract the required bits\n    bits_to_rotate = (n >> num_bits_to_rotate) & ((1 << num_bits_to_rotate) - 1)\n\n    # Shift the remaining bits to the left\n    n = (n << num_rotations) & ((1 << 32) - 1)\n\n    # Insert the rotated bits\n    n |= bits_to_rotate\n\n    # Convert the integer back to binary\n    result = bin(n)[2:]\n\n    # Add leading zeros if necessary\n    if len(result) < 32:\n        result = '0' * (32 - len(result)) + result\n\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    # Convert the input number to a binary string\n    n = bin(n)[2:]\n    # Fill the remaining bits with zeros\n    n = '0'*(32-d) + n\n    # Convert the binary string back to an integer\n    n = int(n, 2)\n    # Return the rotated number\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the input number to a binary string\n    binary_str = bin(n)[2:].zfill(32)\n\n    # Calculate the left shift amount\n    shift_amount = d % 32\n\n    # Perform the left shift\n    left_shifted_str = binary_str[shift_amount:] + binary_str[:shift_amount]\n\n    # Convert the left shifted string back to an integer\n    result = int(left_shifted_str, 2)\n\n    return result"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    pattern = r'\\s+'\n    return re.sub(pattern, '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expression to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    # Remove whitespaces at the start and end of the string\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regex to remove all whitespaces\n    text = re.sub('\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # remove all whitespace characters using regular expressions\n    text = re.sub(r'\\s+','', text)\n    # remove leading and trailing whitespaces\n    text = text.strip()\n    # return the cleaned string\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function will remove all whitespaces from a given string.\n    '''\n    # Using regular expressions to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text = re.sub('\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text).strip()"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x+1):\n        for j in range(y+1):\n            for k in range(z+1):\n                if x == i and y == j and z == k:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or y == z:\n        count += 1\n    if x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    counts = {}\n\n    for num in [x, y, z]:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    return sum(1 for count in counts.values() if count == 3)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    equal_count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            equal_count += 1\n    return equal_count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n    for i in range(min(x, y), max(x, y)+1):\n        if i in [x, y, z]:\n            count += 1\n\n    for i in range(min(y, z), max(y, z)+1):\n        if i in [x, y, z]:\n            count += 1\n\n    for i in range(min(x, z), max(x, z)+1):\n        if i in [x, y, z]:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                return j-i-1\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # finding the minimum and maximum elements\n    min_element = min(arr)\n    max_element = max(arr)\n    # checking for the presence of all unique elements\n    if len(set(arr)) == n:\n        # checking if the array is already sorted\n        if arr == sorted(arr):\n            return 0\n        else:\n            # checking for the presence of duplicates in the array\n            if len(arr) == len(set(arr)):\n                # checking if the array has a single unique element\n                if len(arr) == 1:\n                    return 0\n                else:\n                    # checking if the array has a single element that is the minimum element\n                    if min_element == max_element:\n                        return 0\n                    else:\n                        # finding the index of the unique element\n                        min_index = arr.index(min_element)\n                        # finding the number of rotations required to generate the sorted array\n                        count = 0\n                        while arr[min_index]!= max_element:\n                            min_index += 1\n                            count += 1\n                        return count\n            else:\n                # checking if the array is already rotated\n                if arr[0] == min_element:\n                    return 0\n                else:\n                    # finding the index of the minimum element in the array\n                    min_index = arr.index(min_element)\n                    # finding the index of the maximum element in the array\n                    max_index = arr.index(max_element)\n                    # checking if the minimum element and maximum element are swapped\n                    if min_element > max_element:\n                        # counting the number of rotations required to generate the sorted array\n                        count = 0\n                        while arr[min_index]!= max_element:\n                            min_index += 1\n                            count += 1\n                    else:\n                        # counting the number of rotations required to generate the sorted array\n                        count = 0\n                        while arr[max_index]!= min_element:\n                            max_index -= 1\n                            count += 1\n                    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    first_greater = -1\n    for i in range(1, len(arr)-1):\n        if arr[i] > arr[i+1]:\n            first_greater = i\n            break\n    if first_greater == -1:\n        return 0\n    else:\n        return count_rotation(arr[first_greater+1:])"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i + 1\n        while j < n and arr[i] >= arr[j]:\n            j += 1\n        if j < n:\n            count += n - j\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    '''\n    This function counts the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    # find the smallest element in the array\n    sm = arr[0]\n    for i in range(1, n):\n        if arr[i] < sm:\n            sm = arr[i]\n    # find the largest element in the array\n    lg = arr[0]\n    for i in range(1, n):\n        if arr[i] > lg:\n            lg = arr[i]\n    # check if the array is already sorted or not\n    if sm >= lg:\n        return 0\n    # if the array is not sorted, find the element that needs to be rotated\n    else:\n        index = 0\n        for i in range(1, n):\n            if arr[i] < arr[index]:\n                index = i\n        # count the number of rotations required to generate a sorted array\n        count = 0\n        for i in range(n-1, 0, -1):\n            if arr[i] < arr[i-1]:\n                count += 1\n            else:\n                break\n        return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    # Step 1: Check if the array is already sorted\n    if sorted(arr) == arr:\n        return 0\n    \n    # Step 2: Find the pivot element in the array\n    pivot = arr[0]\n    \n    # Step 3: Partition the array into two parts - elements smaller than pivot and greater than pivot\n    left = []\n    right = []\n    for num in arr:\n        if num < pivot:\n            left.append(num)\n        else:\n            right.append(num)\n    \n    # Step 4: Recursively count rotations required for the left and right partitions\n    left_rotations = count_rotation(left)\n    right_rotations = count_rotation(right)\n    \n    # Step 5: Count the total rotations required by adding the number of rotations required for the left and right partitions\n    total_rotations = left_rotations + right_rotations\n    \n    return total_rotations + 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[n-i-1]:\n            return i\n    return n\n    "
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    max_swap = 0\n    for i in range(1, n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                max_swap = max(max_swap, j+1)\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return max_swap"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\n    Args:\n    arr (list): a sorted array\n\n    Returns:\n    int: the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return 0\n\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return i\n\n    return n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    A number is a perfect square if and only if its square root is an integer.\n    \"\"\"\n    # check if the input is negative\n    if n < 0:\n        return False\n    # calculate the square root\n    square_root = int(n ** 0.5)\n    # check if the square root is an integer\n    if square_root * square_root == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    y = n\n    while x*x > y:\n        x = (x + y) // 2\n        y = x * x\n    if x*x == y:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 0\n    j = n\n    while i <= j:\n        mid = (i + j) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid > n:\n            j = mid - 1\n        else:\n            i = mid + 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Check if n is already a perfect square\n    if n == int(n**0.5)**2:\n        return True\n\n    # Check for odd perfect squares\n    if n%2 == 1 and int((n+1)**0.5)**2 == n:\n        return True\n\n    # Check for even perfect squares\n    if n%2 == 0 and int((n/2)**0.5)**2 == n/2:\n        return True\n\n    # If none of the above, then n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is a perfect square, else False.\n    \"\"\"\n\n    # Base case: if n is less than or equal to 1, it is a perfect square\n    if n <= 1:\n        return True\n\n    # Initialize the square root to 1\n    square_root = 1\n\n    # Keep reducing the square root until it is less than or equal to the number\n    while square_root**2 <= n:\n        square_root += 1\n\n    # If the square root is still less than or equal to the number, it is a perfect square\n    if square_root**2 == n:\n        return True\n\n    # If the square root is greater than the number, it is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n\n    Parameters:\n    n (int): Number to be checked\n\n    Returns:\n    bool: True if the given number is a perfect square, else False.\n\n    \"\"\"\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return False\n\n    # Calculate the square root of n\n    sqrt_n = n ** 0.5\n\n    # Check if the square root is an integer\n    if not isinstance(sqrt_n, int) or sqrt_n!= sqrt_n:\n        return False\n\n    # Check if n is a perfect square by comparing its square to the square of its square root\n    if sqrt_n ** 2!= n:\n        return False\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    '''\n    return math.sqrt(n) == int(math.sqrt(n))"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if the given number is a positive integer\n    if type(n)!= int or n <= 0:\n        return False\n\n    # check if the given number is a perfect square or not\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n\n    sqrt_n = n ** 0.5\n    int_sqrt_n = int(sqrt_n)\n\n    if int_sqrt_n ** 2!= n:\n        return False\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # check if the given number is a square\n    if n <= 1:\n        return True\n    # check if the given number is a perfect square by iterating from 2 to the square root of the given number\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers is even.\")\n    else:\n        print(\"The product of the numbers is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # initialize variables to store product of even numbers and total even numbers\n    even_product = 0\n    even_count = 0\n\n    # loop through the list and check if the product of even numbers is even\n    for num in arr:\n        if num % 2 == 0:\n            even_product *= num\n            even_count += 1\n\n    # check if the product of even numbers is even\n    if even_count > 0 and even_product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    # Check if the list is empty\n    if not arr:\n        return \"The list is empty.\"\n\n    # Initialize variables to keep track of the product and the number of even numbers\n    product = 1\n    even_count = 0\n\n    # Iterate through the list and multiply each element with the product\n    for num in arr:\n        product *= num\n\n    # Check if the product is even or not\n    if product % 2 == 0:\n        return \"The product of the numbers in the list is even.\"\n    else:\n        return \"The product of the numbers in the list is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n\n    # Initialize a variable to store the product of numbers in the list\n    product = 1\n\n    # Loop through the list and multiply each number with the product variable\n    for num in arr:\n        product *= num\n\n    # Check if the product is even or odd\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    max_list = []\n    \n    # Loop through all the lists\n    for i in range(len(lists)):\n        # Initialize variables\n        current_sum = 0\n        current_list = []\n        \n        # Loop through all the elements in the list\n        for j in range(len(lists[i])):\n            # Add the element to the sum and list\n            current_sum += lists[i][j]\n            current_list.append(lists[i][j])\n            \n        # If the sum is greater than the current max sum, update the max sum and max list\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = current_list\n    \n    # Return the max list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Find the maximum sum in the list\n    max_sum = max(sum(row) for row in lists)\n    \n    # Filter the lists based on the maximum sum and find the list with the highest sum\n    result = [row for row in lists if sum(row) == max_sum]\n    \n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Calculate the sum of all elements in the list of lists\n    total_sum = sum([sum(sublist) for sublist in lists])\n    # Initialize the maximum sum and the index of the list with the maximum sum\n    max_sum = total_sum\n    max_index = 0\n    # Iterate over the list of lists\n    for i in range(len(lists)):\n        # Calculate the sum of elements in the current list and the sum of elements in the lists before it\n        sub_total_sum = sum([sum(sublist) for j in range(i)])\n        # Calculate the sum of elements in the current list and the sum of elements in the lists after it\n        post_total_sum = sum([sum(sublist) for j in range(i+1, len(lists))])\n        # Calculate the sum of elements in the current list\n        sub_list_sum = sum(lists[i])\n        # If the sum of elements in the current list is greater than the maximum sum, update the maximum sum and index\n        if sub_total_sum > max_sum:\n            max_sum = sub_total_sum\n            max_index = i\n    # Return the list in the list of lists with the maximum sum\n    return lists[max_index]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = None\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            current_sum = lists[i][j]\n            for k in range(len(lists[i])):\n                if k!= j:\n                    current_sum += lists[i][k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                result = [lists[i][j]]\n            elif current_sum == max_sum:\n                result.append(lists[i][j])\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for list in lists:\n        current_sum = sum(list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Create a dictionary to store the sum of elements for each sublist in the original list\n    sublist_sums = {}\n    \n    # Iterate over each sublist in the original list\n    for sublist in lists:\n        # Calculate the sum of elements in the sublist\n        sublist_sum = sum(sublist)\n        \n        # Add the sublist sum to the dictionary\n        if sublist_sum in sublist_sums:\n            sublist_sums[sublist_sum].append(sublist)\n        else:\n            sublist_sums[sublist_sum] = [sublist]\n    \n    # Find the sublist whose sum is the highest\n    max_sublist_sum = max(sublist_sums.keys())\n    \n    # Return the sublist with the highest sum\n    return sublist_sums[max_sublist_sum]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list whose sum of elements is the highest.\n    If there are multiple such lists, this function will return the one with the lowest index.\n    If there is still a tie, the function will return the first list encountered.\n    '''\n    # Initialize variables to keep track of the maximum sum and the index of the list with the maximum sum\n    max_sum = float('-inf')\n    max_list_index = None\n    tie_index = None\n    \n    # Loop through each list in the input list\n    for list_index, list_ in enumerate(lists):\n        # Calculate the sum of the elements in the current list\n        current_sum = sum(list_)\n        \n        # If this is the first list found with a sum greater than the current maximum sum,\n        # update the maximum sum and the index of the list with the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list_index = list_index\n        # If there is a tie, update the index of the list with the maximum sum\n        elif current_sum == max_sum:\n            tie_index = list_index\n    \n    # If there were multiple lists with the same maximum sum, return the one with the lowest index\n    if tie_index is not None:\n        return min(lists, key=lambda x: x.index(tie_index))\n    \n    # If there were only two or more lists, return the one with the maximum sum\n    return lists[max_list_index]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 1\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 1\n    if curr_run > max_run:\n        max_run = curr_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    run_start = 0\n    run_length = 1\n    max_run = 1\n    \n    # Iterate through the string and update the variables as needed\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i-1].upper():\n            run_length += 1\n        else:\n            # If we find a lowercase character, reset the run variables\n            if run_length > max_run:\n                max_run = run_length\n            run_start = i\n            run_length = 1\n            \n    # Check if the last character is uppercase and update the max run if needed\n    if test_str[-1] == test_str[-2].upper():\n        max_run = max(max_run, run_length)\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    run_length = 0\n    current_run = ''\n    for char in test_str:\n        if char.isupper():\n            current_run += char\n        else:\n            if current_run:\n                if run_length < len(current_run):\n                    run_length = len(current_run)\n            current_run = ''\n    if current_run:\n        if run_length < len(current_run):\n            run_length = len(current_run)\n    return run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run = 0\n    uppercase_count = 0\n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n            if uppercase_count > run:\n                run = uppercase_count\n        else:\n            uppercase_count = 0\n    return run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    prev_char = None\n    \n    for char in test_str:\n        if char.isupper():\n            if prev_char and prev_char.islower():\n                current_run += 1\n            else:\n                max_run = max(max_run, current_run)\n                current_run = 1\n        else:\n            if prev_char and prev_char.isupper():\n                current_run += 1\n            else:\n                max_run = max(max_run, current_run)\n                current_run = 0\n            \n        prev_char = char\n    \n    max_run = max(max_run, current_run)\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # initialize variables to keep track of the current run and the length of the current run\n    current_run = \"\"\n    current_run_length = 0\n\n    # loop through each character in the string\n    for char in test_str:\n        # if the current character is uppercase, add it to the current run and increment its length\n        if char.isupper():\n            current_run += char\n            current_run_length += 1\n        # if the current character is not uppercase, reset the current run and its length\n        else:\n            # check if the current run is longer than the previous run\n            if current_run_length > len(max_run_uppercase):\n                max_run_uppercase = current_run\n            # reset the variables for the next iteration\n            current_run = \"\"\n            current_run_length = 0\n\n    # check if the current run is longer than the previous run\n    if current_run_length > len(max_run_uppercase):\n        max_run_uppercase = current_run\n\n    # return the maximum run of uppercase characters\n    return max_run_uppercase"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    start_index = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n                start_index = i - (max_length - 1)\n        else:\n            current_length = 0\n\n    if max_length > 0:\n        return test_str[start_index:start_index+max_length]\n    else:\n        return \"No uppercase characters found.\""
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    start = 0\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            if not test_str[i-1].isupper():\n                max_run += 1\n            start = i\n        else:\n            max_run = 0\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_count = 1\n    current_char = test_str[0]\n    for i in range(1, len(test_str)):\n        if test_str[i]!= current_char.upper():\n            count += 1\n            if count > max_count:\n                max_count = count\n            current_char = test_str[i]\n        else:\n            count = 1\n    count += 1\n    if count > max_count:\n        max_count = count\n    return max_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # initialize variables\n    max_run = 0\n    count = 0\n\n    # iterate through the string\n    for char in test_str:\n\n        # check if the current character is uppercase\n        if char.isupper():\n\n            # increment count and check if the count is greater than max_run\n            count += 1\n            if count > max_run:\n                max_run = count\n\n            # reset count to 1 for the next character\n            count = 1\n\n    # return max_run\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes in a list of numbers and returns the first odd number in the list.\n    \"\"\"\n    # Loop through each number in the list\n    for num in nums:\n        # If the number is odd, return it\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # loop through the list of numbers\n    for num in nums:\n        # check if the number is odd\n        if num % 2 == 1:\n            # return the first odd number\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        if sorted(test_tup) == sorted(K):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    This function checks if the given tuples contain the k or not.\n    \"\"\"\n    if len(test_tup) < K:\n        return False\n    else:\n        for i in range(len(test_tup)-K+1):\n            if all(x in test_tup[i:i+K] for x in test_tup[:K]):\n                return True\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if test_tup[0] == K:\n        print(\"The first element in the tuple is equal to the given value.\")\n    elif test_tup[1] == K:\n        print(\"The second element in the tuple is equal to the given value.\")\n    elif test_tup[2] == K:\n        print(\"The third element in the tuple is equal to the given value.\")\n    else:\n        print(\"The given value is not present in the tuple.\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    if len(set(test_tup)) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    # Initialize a counter to keep track of the number of occurrences of K in the tuple\n    count = 0\n\n    # Loop through each element in the tuple\n    for elem in test_tup:\n        # If the element is equal to K, increment the counter\n        if elem == K:\n            count += 1\n    \n    # If the counter is equal to K, then K is present in the tuple\n    if count == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if length of first and second tuple are equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # Check if each element in second tuple is smaller than its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # Iterate over the elements of the second tuple\n    for i in range(len(test_tup2)):\n        # If the element of the second tuple is not smaller than the corresponding element of the first tuple\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n\n    # If all elements of the second tuple are smaller than their corresponding elements in the first tuple\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if the length of the two tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # Loop through the first tuple and compare the corresponding elements of the second tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # Loop through the tuples and compare the elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    # If all elements are smaller, the second tuple is smaller\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples have different lengths.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuples have different lengths.\")\n        return\n\n    # iterate through the tuples and compare their elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(f\"{test_tup2[i]} is smaller than {test_tup1[i]} in position {i}.\")\n            return\n    print(\"All elements in the tuples are smaller.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    }
]