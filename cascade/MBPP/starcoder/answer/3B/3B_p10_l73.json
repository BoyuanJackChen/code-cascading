[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_list.append(item)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.intersection(set2)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # initialize variables\n    shared_list = []\n    # loop through both lists\n    for tup1 in test_tup1:\n        for tup2 in test_tup2:\n            # compare each element of the lists\n            if tup1 == tup2:\n                # add the shared element to the shared list\n                shared_list.append(tup1)\n    # return the shared list\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_list.append(elem)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the two tuples into sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # find the intersection of the two sets\n    common_set = set1.intersection(set2)\n\n    # convert the common set back into a list\n    shared_list = list(common_set)\n\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_set = set1.intersection(set2)\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Sort the two lists\n    test_tup1.sort()\n    test_tup2.sort()\n\n    # Initialize the shared element list\n    shared_elements = []\n\n    # Traverse the two lists and compare the elements\n    i = j = 0\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i] == test_tup2[j]:\n            shared_elements.append(test_tup1[i])\n            i += 1\n            j += 1\n        elif test_tup1[i] < test_tup2[j]:\n            i += 1\n        else:\n            j += 1\n\n    # Return the shared element list\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check for divisors up to the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    # If no divisors found, n is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number, and False otherwise.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_prime(n):\n    '''\n    A simple function to check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_not_prime(n):\n    '''\n    A simple function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    sqrt_n = math.sqrt(n)\n    for i in range(2, int(sqrt_n) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Create a list of numbers from 2 to n\n    numbers = [True] * (n+1)\n    # Initialize a boolean list to keep track of prime numbers\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    # Perform the Sieve of Eratosthenes algorithm\n    for i in range(2, int(math.sqrt(n))+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    # Check whether the number is prime or not\n    for i in range(2, n+1):\n        if primes[i] and numbers[i]:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums) # convert the list to a heap\n    for i in range(n):\n        hq.heappop(nums) # remove the smallest element from the heap\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    hq.heapify(nums)\n    for _ in range(n-1):\n        hq.heappop(nums)\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a heap\n    hq.heapify(nums)\n    # Remove the n largest elements from the heap\n    for _ in range(n):\n        hq.heappop(nums)\n    # Convert the heap back to a list\n    return hq.nsmallest(n, nums)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of size n\n    max_heap = [0] * n\n    # Initialize the min-heap with the first n elements of the list\n    for i in range(n):\n        max_heap[i] = nums[i]\n        hq.heapify(max_heap)\n    # Pop the largest elements from the heap and add them to the result list\n    result = []\n    while max_heap:\n        result.append(max_heap.pop())\n    # Reverse the result list to get the n largest elements\n    result.reverse()\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n    nums (list of int): A list of integers to find the n largest integers.\n    n (int): The number of largest integers to return.\n\n    Returns:\n    list of int: A list of n largest integers, in descending order.\n\n    \"\"\"\n    heap = nums[0:n]\n    hq.heapify(heap)\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            hq.heappushpop(heap, nums[i])\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = nums[:n]\n    for num in nums[n:]:\n        if num > heap[0]:\n            hq.heappushpop(heap,num)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Initialize a min-heap to store the n largest integers\n    heap = hq.nsmallest(n, nums)\n    # Iterate over the list, adding each element to the heap\n    for num in nums:\n        hq.heappush(heap, num)\n    # Return the n largest integers in descending order\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a min heap\n    min_heap = [-num for num in nums]\n    hq.heapify(min_heap)\n\n    # pop the n largest elements from the heap and return them\n    return [-num for num in hq.nsmallest(n, min_heap)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap with the given list of numbers\n    heap = hq.nsmallest(n,nums)\n    # Remove the smallest element from the heap and return it\n    return heapq.heappop(heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        hq.heappop(nums)\n    return nums"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x & (x-1) == 0:  # check if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # converting binary representation of x to a list\n    lst = [int(i) for i in bin(x)[2:]]\n\n    # checking if the length of the list is 1 \n    if len(lst) == 1: \n        return True \n\n    # checking if all the elements in the list are 0s or 1s \n    for i in lst: \n        if i!= 0 and i!= 1: \n            return False \n\n    # if the condition is true then the numbers differ at one bit position only \n    return True "
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # loop through each bit of x and check if the bit is different from the previous bit\n    for i in range(32):\n        if (x & (1 << i))!= ((x & (1 << (i-1))) << 1):\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if x is a power of two\n    if x <= 0:\n        return False\n    else:\n        count = 0\n        while (x!= 1):\n            count += 1\n            x = x >> 1\n        return (count % 2 == 0)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    This function takes an integer as input and returns a boolean value indicating whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    \n    # Convert the input integer to binary\n    binary = bin(x)[2:]\n    \n    # Split the binary string into individual bits\n    bits = list(binary)\n    \n    # Loop through the bits and check if the difference at any position is only 1\n    for i in range(len(bits)-1):\n        if bits[i]!= bits[i+1]:\n            return False\n    \n    # If no differences found, then the two numbers differ at one bit position only\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Bitwise AND operation to check whether the two numbers differ at one bit position only or not\n    return x & (-x) == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Convert the binary representation of x into a list of characters\n    binary_str = bin(x)[2:]\n    \n    # Check if the length of the binary string is 1 (i.e., 2^n)\n    if len(binary_str) == 1:\n        return True\n    \n    # Convert the binary string into a list of integers\n    binary_list = [int(bit) for bit in binary_str]\n    \n    # Check if the difference between the first and second elements in the list is 1\n    if binary_list[1] - binary_list[0] == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x!= 0 and (x & (x - 1))!= 0: \n        # if x is a power of 2\n        return True\n    else: \n        # if x is not a power of 2\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # check if the given number is a power of 2 or not\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    while x & (x-1)!= 0: # check if x has only one set bit\n        x &= x - 1 # clear the last set bit\n    return x == 1 # if x is 1, then both numbers differ at one bit position only"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Use regular expressions to split the string into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n\n    # Return the list of words\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    # Define a regular expression pattern to match words of at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n\n    # Find all matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n\n    # Print the matches\n    print(matches)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the re.findall() method to find all matches in the text and return them as a list\n    return re.findall(pattern, text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Convert the string to lowercase\n    text = text.lower()\n\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Filter out words with less than 4 characters\n    filtered_words = [word for word in words if len(word) >= 4]\n\n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n\n    # loop through the list and find the squares of each element\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 2\n\n    # return the list with the squares of each element\n    return nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [num**2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    \"\"\"\n    n = len(str) \n    min_rot = n \n    for i in range(n//2): \n        if str[i]!= str[n-i-1]: \n            min_rot = min(min_rot, n-i) \n    return min_rot "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if str[i:j] == str[j:k] and str[j:k] == str[k:]:\n                    return 2\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        if str[i]!= str[(i+1)%n]:\n            count += 1\n            if count == n:\n                return count\n            str = str[:i] + str[i] + str[(i+1)%n:] + str[(i+2)%n:]\n        else:\n            count = 0\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    n = len(str) \n    dp = [[float('inf')]*n for _ in range(n)] \n    for i in range(n): \n        for j in range(i, n): \n            if str[i] == str[j]: \n                dp[i][j] = dp[i+1][j-1] \n            else: \n                dp[i][j] = dp[i+1][j-1] + 1 \n    min_rotations = float('inf') \n    for i in range(n): \n        min_rotations = min(min_rotations, dp[0][i]) \n    return min_rotations "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Check if the string is empty or has only one character\n    if len(str) <= 1:\n        return 0\n    \n    # Initialize the length of the string\n    n = len(str)\n    \n    # Initialize a list to store the minimum number of rotations\n    min_rotations = []\n    \n    # Traverse the string\n    for i in range(n):\n        # Check if the string is already equal to its reverse\n        if str[i] == str[n-i-1]:\n            # If the string is equal to its reverse, add 1 to the count of rotations\n            min_rotations.append(1)\n        else:\n            # If the string is not equal to its reverse, check if the string is already equal to its reverse of length 2\n            if str[i] == str[n-i-2]:\n                # If the string is equal to its reverse of length 2, add 2 to the count of rotations\n                min_rotations.append(2)\n            else:\n                # If the string is not equal to its reverse of length 2, check if the string is already equal to its reverse of length 3\n                if str[i] == str[n-i-3]:\n                    # If the string is equal to its reverse of length 3, add 3 to the count of rotations\n                    min_rotations.append(3)\n                else:\n                    # If the string is not equal to its reverse of length 3, check if the string is already equal to its reverse of length 4\n                    if str[i] == str[n-i-4]:\n                        # If the string is equal to its reverse of length 4, add 4 to the count of rotations\n                        min_rotations.append(4)\n                    else:\n                        # If the string is not equal to its reverse of length 4, check if the string is already equal to its reverse of length 5\n                        if str[i] == str[n-i-5]:\n                            # If the string is equal to its reverse of length 5, add 5 to the count of rotations\n                            min_rotations.append(5)\n                        else:\n                            # If the string is not equal to its reverse of length 5, check if the string is already equal to its reverse of length 6\n                            if str[i] == str[n-i-6]:\n                                # If the string is equal to its reverse of length 6, add 6 to the count of rotations\n                                min_rotations.append(6)\n                            else:\n                                # If the string is not equal to its reverse of length 6, check if the string is already equal to its reverse of length 7\n                                if str[i] == str[n-i-7]:\n                                    # If the string is equal to its reverse of length 7, add 7 to the count of rotations\n                                    min_rotations.append(7)\n                                else:\n                                    # If the string is not equal to its reverse of length 7, check if the string is already equal to its reverse of length 8\n                                    if str[i] == str[n-i-8]:\n                                        # If the string is equal to its reverse of length 8, add 8 to the count of rotations\n                                        min_rotations.append(8)\n                                    else:\n                                        # If the string is not equal to its reverse of length 8, check if the string is already equal to its reverse of length 9\n                                        if str[i] == str[n-i-9]:\n                                            # If the string is equal to its reverse of length 9, add 9 to the count of rotations\n                                            min_rotations.append(9)\n                                        else:\n                                            # If the string is not equal to its reverse of length 9, check if the string is already equal to its reverse of length 10\n                                            if str[i] == str[n-i-10]:\n                                                # If the string is equal to its reverse of length 10, add 10 to the count of rotations\n                                                min_rotations.append(10)\n                                            else:\n                                                # If the string is not equal to its reverse of length 10, check if the string is already equal to its reverse of length 11\n                                                if str[i] == str[n-i-11]:\n                                                    # If the string is equal to its reverse of length 11, add 11 to the count of rotations\n                                                    min_rotations.append(11)\n                                                else:\n                                                    # If the string is not equal"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # convert the string to a set to remove duplicate characters\n    str = set(str)\n    \n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # count the frequency of each character in the string\n    char_freq = {}\n    for char, count in freq.items():\n        if char in char_freq:\n            char_freq[char] += count\n        else:\n            char_freq[char] = count\n    \n    # create a list of tuples containing the frequency of each character and its index in the string\n    freq_list = [(freq[char], index) for index, char in enumerate(str)]\n    \n    # sort the list of tuples based on the frequency of each character\n    freq_list.sort()\n    \n    # initialize variables to keep track of the number of rotations required and the maximum number of rotations\n    num_rot = 0\n    max_rot = 0\n    \n    # loop through the sorted list of tuples\n    for freq, index in freq_list:\n        # calculate the number of rotations required to rotate the current character to the front\n        rot_count = (char_freq[char] - 1) // 2\n        # update the number of rotations required\n        num_rot += rot_count\n        # update the maximum number of rotations\n        max_rot = max(max_rot, num_rot)\n    \n    # return the maximum number of rotations required\n    return max_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    str_len = len(str)\n    min_rotations = 0\n    for i in range(str_len):\n        if i < str_len // 2:\n            left_rotations = 0\n            for j in range(i, str_len):\n                if str[j]!= str[i]:\n                    break\n                left_rotations += 1\n            if left_rotations > min_rotations:\n                min_rotations = left_rotations\n        else:\n            right_rotations = 0\n            for j in range(i, -1, -1):\n                if str[j]!= str[i]:\n                    break\n                right_rotations += 1\n            if right_rotations > min_rotations:\n                min_rotations = right_rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    n = len(str)\n    min_rotations = n\n    \n    # Traverse through all possible rotations of the string\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Check if the two substrings are equal after rotating i times\n            if str[i:j] == str[j:i][::-1]:\n                # Update the minimum rotations required\n                min_rotations = min(min_rotations, j-i)\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "Let's implement the above approach.<|im_sep|>"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    if len(str) < 2: \n        return 0\n\n    # Convert the string to a set to remove duplicate characters and sort the string in alphabetical order\n    str_set = sorted(set(str))\n\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str_set: \n        freq_dict[char] = str_set.count(char)\n\n    # Initialize the minimum number of rotations required to get the same string\n    min_rotations = len(str_set) - len(str)\n\n    # Find the minimum number of rotations required to get the same string using dynamic programming\n    for i in range(len(str_set)): \n        # If the frequency of the current character in the string is less than the frequency of the character at index i+1, rotate the string by one character\n        if freq_dict[str_set[i]] < freq_dict[str_set[i+1]]: \n            min_rotations = min(min_rotations, 1 + find_Rotations(str_set[i:]))\n\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove first occurrence of character\n    if s[0] == ch:\n        s = s[1:]\n    # remove last occurrence of character\n    if s[-1] == ch:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch) == 0:\n        return s[1:]\n    elif s.rfind(ch) == len(s)-1:\n        return s[:len(s)-1]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    return s.replace(ch, '')"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Check if the character to be removed is present in the string\n    if ch in s:\n        # Initialize pointers to the first and last occurrences of the character\n        i, j = 0, len(s) - 1\n        # Iterate until the pointers meet\n        while i < j:\n            # If the characters are equal, increment the pointer of the last occurrence\n            if s[i] == ch:\n                j -= 1\n            # If the characters are not equal, increment the pointer of the first occurrence\n            else:\n                i += 1\n        # Return a new string with the character removed\n        return s[:i] + s[i+1:]\n    else:\n        # Return the original string if the character is not present in the string\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    # Remove the first occurrence of the character from the string\n    s = s.replace(ch, '')\n    # Remove the last occurrence of the character from the string\n    s = s.replace(ch, s.replace(ch, '', 1), 1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch)==0:\n        return s\n    else:\n        return s.replace(ch,'',1) + s.replace(ch,'',-1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    return s.replace(ch, \"\", 1).replace(ch, \"\", -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '')[1:-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch in s:\n        s = s.replace(ch, \"\")\n        if len(s) > 0:\n            s = remove_Occ(s, ch)\n        else:\n            s = \"\"\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'') #replace all occurrences of the character ch with empty string\n    return s[:1] + s[2:] #concatenate first and last character of the string with other characters\n"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # Find the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n    # Sort the row_sums in ascending order\n    row_sums.sort()\n    # Create a new matrix with the same dimensions as the input matrix\n    result = [[0 for j in range(n)] for i in range(n)]\n    # Iterate through the sorted row_sums and place them in the correct positions in the result matrix\n    for i in range(n):\n        for j in range(n):\n            result[i][j] = row_sums[i]\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    sums = [sum(row) for row in M]\n\n    # Sort the matrix by the sums\n    sorted_matrix = sorted(zip(M, sums), key=lambda x: x[1])\n\n    # Unpack the sorted matrix and store the sorted matrix in a new variable\n    sorted_M = [row for row, sum in sorted_matrix]\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the row sums in ascending order\n    row_sums.sort()\n    # Sort the matrix rows in ascending order based on the row sums\n    sorted_rows = [sorted(row, key=lambda x: row_sums.index(x)) for row in M]\n    # Return the sorted matrix\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Initialize the result matrix\n    result = [[0]*n for i in range(n)]\n    # Sort the rows of the matrix\n    for i in range(n):\n        row_sum = sum(M[i])\n        M[i] = sorted(M[i])\n        # Fill the result matrix with the sorted rows\n        for j in range(n):\n            result[i][j] = M[i][j]\n    # Return the sorted matrix\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a list to store the sums of rows\n    sums = []\n\n    # Loop through each row of the matrix\n    for row in M:\n        # Calculate the sum of the row\n        sum = sum(row)\n\n        # Add the sum to the list of sums\n        sums.append(sum)\n\n    # Sort the list of sums in ascending order\n    sums.sort()\n\n    # Create a new matrix to store the sorted rows\n    sorted_M = []\n\n    # Loop through each row of the matrix\n    for row in M:\n        # Find the index of the row with the smallest sum\n        index = sums.index(min(sums))\n\n        # Remove the row with the smallest sum from the sums list\n        sums.pop(index)\n\n        # Add the sorted row to the new matrix\n        sorted_M.append(row)\n\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] > M[i][i]:\n                M[i][j], M[i][i] = M[i][i], M[i][j]\n                M[j][j], M[j][i] = M[j][i], M[j][j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n\n    # initialize two empty lists to store the sorted rows and the corresponding row sums\n    sorted_rows = []\n    row_sums = []\n\n    # loop through each row of the matrix\n    for i in range(n):\n        # create a new list to store the row and calculate its sum\n        row = M[i]\n        row_sum = sum(row)\n        # add the row to the sorted_rows list and the row sum to the row_sums list\n        sorted_rows.append(row)\n        row_sums.append(row_sum)\n\n    # sort the sorted_rows list by row_sums in ascending order\n    sorted_rows.sort(key=lambda x: row_sums.index(sum(x)))\n\n    # loop through the sorted_rows list and store the sorted matrix in a new matrix\n    sorted_matrix = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        sorted_matrix[i] = sorted_rows[i]\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # loop through each row of the matrix\n    for row in range(len(M)):\n        # initialize the current row sum to the first element of the row\n        current_row_sum = M[row][0]\n        # loop through the rest of the row and find the maximum value in the current row\n        for j in range(1, len(M[row])):\n            if M[row][j] > current_row_sum:\n                current_row_sum = M[row][j]\n        # swap the row with the row with the maximum value in the current row\n        M[row], M[row].index(max(M[row]))"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the rows based on the row sums in ascending order\n    sorted_rows = sorted(M, key=lambda row: row_sums.index(sum(row)))\n\n    # Return the sorted matrix\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    rows, cols = len(M), len(M[0])\n    # Create an empty list to store the sorted matrix\n    sorted_M = []\n    # Loop through each row in the matrix\n    for i in range(rows):\n        # Create a list to store the current row and its sum\n        row_sum = [M[i][j] for j in range(cols)]\n        # Sort the row in ascending order based on the sum\n        sorted_row = sorted(row_sum)\n        # Add the sorted row to the sorted matrix\n        sorted_M.append(sorted_row)\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes in the lengths of the sides of a triangular prism as\n    well as its height and returns the volume of the triangular prism.\n    \"\"\"\n    # Calculate the volume of the prism using Heron's formula\n    s = (l + b + h) / 2\n    Area = (s * (s-l) * (s-b) * (s-h)) ** 0.5\n    Volume = (1/6) * Area * l * b * h\n\n    return Volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = 0.5 * l * b\n    volume = area * h\n\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    V = (1/3)*l*b*h # formula for Volume of triangular prism\n    \n    return V # returning the Volume value"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": ""
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h\n    print(\"The volume of the triangular prism is:\",V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    V = 1/3 * l * b * h # calculate the volume of the prism using the Heron's formula\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h/3\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the length, width, and height of a triangular prism as input and returns the volume of the prism.\n    '''\n    return 0.5 * l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h # formula to find volume of triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/3 * l * b * h\n    print(\"The volume of the triangular prism is: \", V)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z][a-z_]*[a-z]'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+_[a-z]+$'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Define regular expression pattern for lowercase letters and underscore\n    pattern = re.compile(r'(?<![a-zA-Z])[a-z]+(?=[_A-Z])')\n\n    # Check if the input string contains sequences of lowercase letters joined with an underscore\n    result = pattern.search(text) is not None\n\n    return result"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"([a-z])_+\"\n    matches = re.findall(pattern, text)\n    return bool(matches)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<=[a-z])([a-z])\"\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern for sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z]+_'\n    \n    # Use the re.findall() function to find all substrings in the input string that match the pattern\n    matches = re.findall(pattern, text)\n    \n    # Check if the length of the matches list is greater than 0, which means the input string contains sequences of lowercase letters joined with an underscore\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # define the pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'(?<!\\w)([a-z]+)_([a-z]+)(?!\\w)'\n    # use the re.search() function to search for the pattern in the input text\n    match = re.search(pattern, text)\n    # check if a match was found, and if so, return True\n    if match:\n        return True\n    # otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]{2,}_[a-z]{2,}\\b'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern to match a sequence of lowercase letters\n    pattern = r'(?<!\\w)(\\b[a-z]+\\b)(?!\\w)'\n    # Search for the pattern in the input string\n    result = re.search(pattern, text)\n    # If a match is found, return true\n    if result:\n        return True\n    # If no match is found, return false\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+_[a-z]+$'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n    \n    # Remove characters present in the second string from the first string\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n    \n    # Convert the list of characters back to a string\n    result = ''.join(char_list)\n    \n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    # Define the set of characters to remove\n    NO_OF_CHARS = 256\n    remove_chars = set('aeiouAEIOU')\n\n    # Convert the string to a list of characters\n    char_list = list(string)\n\n    # Remove the characters in the remove_chars set\n    for char in remove_chars:\n        char_list = [char_ for char_ in char_list if char_!= char]\n\n    # Convert the list of characters to a string\n    result = ''.join(char_list)\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    This function takes two strings as input and returns a new string with characters from string1 which are not present in string2.\n    \"\"\"\n    new_string = \"\"\n    for char in string1:\n        if char not in string2:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    list_of_chars = [chr(i) for i in range(NO_OF_CHARS)]\n    string_list = list(string)\n\n    for i in range(len(string_list)):\n        if string_list[i] in list_of_chars:\n            string_list.pop(i)\n            i -= 1\n\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_set = set(string)\n    for i in range(NO_OF_CHARS):\n        if i not in char_set:\n            string = string.replace(chr(i), '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string, exclude_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char not in exclude_chars:\n            new_string += char\n    return new_string\n\nNO_OF_CHARS = 256\nexclude_chars = set(\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*(),.?\\\":{}|<>]\")\n\nstring = input(\"Enter a string: \")\nexclude_chars_input = input(\"Enter a string of characters to exclude: \").lower()\nexclude_chars_set = set(exclude_chars_input)\n\nnew_string = str_to_list(string, exclude_chars_set)\n\nprint(\"New string without excluded characters:\", new_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = []\n    for i in range(NO_OF_CHARS):\n        if i not in string:\n            char_list.append(chr(i))\n    return char_list"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    NO_OF_CHARS = 256\n    string = string.lower()\n    first_set = set(string)\n    second_set = set(string[1:])\n    char_list = []\n    for char in range(NO_OF_CHARS):\n        if char not in first_set and char not in second_set:\n            char_list.append(chr(char))\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_set = set(string)\n    list_chars = []\n    \n    for i in range(NO_OF_CHARS):\n        if i not in string_set:\n            list_chars.append(chr(i))\n    \n    return list_chars"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string\n    str2 = \"\"\n    for i in range(NO_OF_CHARS):\n        str2 += chr(i)\n    str2 = list(str2)\n    str1_list = list(str1)\n    for i in range(len(str1_list)):\n        if str1_list[i] in str2:\n            str1_list[i] = \"X\"\n    return \"\".join(str1_list)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hash_map = {}\n    for num in arraynums:\n        if num in hash_map:\n            return True\n        else:\n            hash_map[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store the values of the elements\n    element_values = {}\n\n    # Loop through the elements in the array\n    for element in arraynums:\n        # If the element has already been encountered, return True\n        if element in element_values:\n            return True\n        # Otherwise, add the element and its value to the dictionary\n        else:\n            element_values[element] = True\n\n    # If no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the index of the first occurrence of each element\n    index_dict = {}\n\n    # Iterate through the array\n    for i, num in enumerate(arraynums):\n        # Check if the current element exists in the dictionary\n        if num in index_dict:\n            # If it does, return True\n            return True\n        else:\n            # If it doesn't, add the current index to the dictionary with the element as its value\n            index_dict[num] = i\n\n    # If we make it through the loop without finding a duplicate, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to keep track of unique numbers\n    unique_nums = set()\n    \n    # iterate through the array and add each unique number to the set\n    for num in arraynums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    \n    # if the set has any elements, then there are duplicate elements in the array\n    if len(unique_nums)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hashmap = {}\n    for num in arraynums:\n        if num in hashmap:\n            return True\n        hashmap[num] = True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    if x % 2 == 0 and x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return True\n    if x % 15 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x >= 3:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0 and x % 7 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    This function checks if the given number is woodball or not.\n    '''\n    if x == 5:\n        return True\n    elif x == 4:\n        return True\n    elif x == 3:\n        return True\n    elif x == 2:\n        return True\n    elif x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    if x % 2 == 0 and x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 15 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        digit = num % 10\n        reverse = reverse * 10 + digit\n        num = num // 10\n    \n    if reverse == 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = str(num)[::-1]\n    return int(num) - int(reversed_num) * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        # If the number is less than 2, then it must be one less than twice its reverse.\n        return num + 1\n    else:\n        # Calculate the reverse of the number\n        reverse = 0\n        while num > 0:\n            reverse = reverse * 10 + num % 10\n            num //= 10\n        # Check if the reverse is one less than twice the original number.\n        if reverse == num - 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num % 10\n        num = num // 10\n    return rev_num == 2*rev_num - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    if reverse == 2 * num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the given number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string to an integer\n    rev_int = int(rev_str)\n    # Check if the reversed integer is one less than twice the original integer\n    if rev_int == num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num + 1) == (num + 2 * int(str(num)[::-1]))"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp //= 10\n    if num - reverse == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == reverse + 1 and num!= reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num < (num*2)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_num += arr[i]*10**(len(arr)-1)\n        elif i == len(arr)-1:\n            max_num += arr[i]\n        else:\n            max_num += arr[i]*10**i\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Sorting the list of digits in descending order\n    arr.sort(reverse=True)\n    \n    # Initializing variables to keep track of the largest number formed and its corresponding length\n    max_num = 0\n    max_length = 0\n    \n    # Iterating through the sorted list of digits\n    for digit in arr:\n        # Check if the current digit can be formed with the remaining digits of the sorted list\n        if digit <= len(arr):\n            # If yes, multiply the digit by the largest number formed so far\n            new_num = digit * max_num\n            # If the new number is greater than the current max_num, update both max_num and max_length\n            if new_num > max_num:\n                max_num = new_num\n                max_length = len(str(max_num))\n    \n    # Returning the largest number formed with the given digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    max_num = 0\n\n    for i in range(len(arr)) : \n        for j in range(i+1, len(arr)+1) : \n            num = 0\n            for k in range(i, j) : \n                num += arr[k]\n            if num > max_num : \n                max_num = num\n\n    return max_num \n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    # create a list of all possible digits\n    digits = [str(x) for x in range(10)]\n    \n    # initialize variables for largest and current number\n    max_num = 0\n    curr_num = 0\n    \n    # loop through each digit in the list\n    for digit in arr:\n        # if the digit is not in the current number, add it to the current number\n        if digit not in digits[curr_num]:\n            curr_num = curr_num * 10 + int(digit)\n        # if the digit is already in the current number, multiply the current number by 10\n        else:\n            curr_num *= 10\n    \n    # return the largest number that can be formed with the given list of digits\n    return curr_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    arr.sort(reverse=True)\n    num = 0\n    for digit in arr:\n        num += digit\n    return num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    max_num = 0\n    temp = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            temp = 0\n            for k in range(i, j):\n                temp = temp * 10 + arr[k]\n            if temp > max_num:\n                max_num = temp\n                \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = list(map(int, arr))  # converting the list of digits to a list of integers\n\n    max_num = 0  # initializing the maximum number to 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_num = arr[i] * 10 + arr[j]  # calculating the current number\n\n            if current_num > max_num:\n                max_num = current_num\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            max_num += arr[i] * (i+1)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the list of digits in ascending order\n    arr.sort()\n    # Initialize a variable to keep track of the current number being formed\n    curr_num = 0\n    # Loop through the sorted list of digits\n    for i in range(len(arr)):\n        # For each digit, add it to the current number\n        curr_num += arr[i]\n        # If the current number is greater than the previous largest number, update the largest number\n        if curr_num > max_num:\n            max_num = curr_num\n        # If the current number is the same as the previous largest number, we can skip it\n        elif curr_num == max_num:\n            continue\n        # If the current number is less than the previous largest number, subtract the previous largest number from the current number\n        else:\n            curr_num -= max_num\n    # Return the largest number that can be formed with the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes in a list of digits and returns the maximum number that can be formed with those digits.\n    \"\"\"\n\n    # Initialize max_num to be the first digit in the list\n    max_num = arr[0]\n\n    # Loop through the remaining digits in the list\n    for digit in arr[1:]:\n        # If the current digit is greater than the current max_num, update max_num\n        if digit > max_num:\n            max_num = digit\n\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers as input and returns True if the two integers have opposite signs, False otherwise.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0: \n        return True\n    elif x>0 and y>0: \n        return True\n    else: \n        return False "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    # Check if x and y have opposite signs\n    if x < 0 and y >= 0: \n        return True\n    elif x >= 0 and y < 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        return True\n    elif x == 0 or y == 0:\n        return False\n    elif x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return \"Both numbers have positive signs.\"\n    elif x < 0 and y < 0:\n        return \"Both numbers have negative signs.\"\n    elif x == 0 and y == 0:\n        return \"Both numbers are zero.\"\n    elif x > 0 and y < 0:\n        return \"The first number has positive sign and the second number has negative sign.\"\n    elif x < 0 and y > 0:\n        return \"The first number has negative sign and the second number has positive sign.\"\n    else:\n        return \"Both numbers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x > 0 and y < 0: \n        return True\n    elif x < 0 and y > 0: \n        return True\n    elif x == y: \n        return False\n    else: \n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x < 0)!= (y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        print(\"Both positive integers\")\n    elif x < 0 and y < 0:\n        print(\"Both negative integers\")\n    elif x < 0 and y > 0:\n        print(\"x has a positive sign and y has a negative sign\")\n    elif x > 0 and y < 0:\n        print(\"x has a negative sign and y has a positive sign\")\n    elif x == 0 and y == 0:\n        print(\"Both integers are zero\")\n    else:\n        print(\"One of the integers is zero and the other is non-zero\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 8\n    octagonal = 1\n\n    while a <= n:\n        while b <= n:\n            octagonal += 1\n            a += 1\n            b += 1\n\n        a -= 4\n        b -= 2\n\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_num = 1\n    for i in range(1, n+1):\n        octagonal_num += i**2\n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Check if a number is an octagonal number.\n\n    Args:\n        n: an integer\n\n    Returns:\n        True if n is an octagonal number, False otherwise.\n    \"\"\"\n    # Check if n is even or odd\n    if n % 2 == 0:\n        return False\n\n    # Calculate the square root of n\n    sqrt_n = int(n ** 0.5)\n\n    # Check if the square root is an integer\n    if sqrt_n.is_integer():\n        return False\n\n    # Calculate the sum of the squares of the first 8 integers\n    squares = [i ** 2 for i in range(1, 9)]\n    sum_of_squares = sum(squares)\n\n    # Check if the sum of the squares is greater than n\n    if sum_of_squares > n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # define the formula for nth octagonal number\n    nth_octagonal = (3*n**2) - (2*n) + 1\n    return nth_octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    def octagonal(num):\n        return (num * (num + 1)) * (num + 1)\n\n    if is_prime(n) and n % 2 == 0:\n        return octagonal(n)\n    else:\n        return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j == 1 or i == j == n:\n                print(i*j)\n            elif i == j:\n                print(i*j, end=' ')\n    print()"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # find the square root of n\n    sqrt_n = int(n ** 0.5) + 1\n    \n    # iterate from 1 to sqrt_n\n    for i in range(1, sqrt_n + 1):\n        # calculate the nth octagonal number\n        octagonal = 2 * i * i\n        \n        # check if it is equal to n\n        if octagonal == n:\n            return True\n    \n    # if the loop ends without finding n, then n is not an octagonal number\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def octagonal_formula(n):\n        return n * (3 * n - 1) / 2\n    \n    return octagonal_formula(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def get_oct_num(a, b):\n        return (a*a + b*b)**0.5\n    \n    for i in range(1, n+1):\n        a = get_oct_num(i, 1)\n        b = get_oct_num(i, -1)\n        c = get_oct_num(i, 2)\n        if a + b + c == 2*i:\n            return i\n    \n    return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    def helper(i, j, k, l):\n        return (abs(i - j) + abs(k - l) == 3) and (helper(i, k, j, l) or helper(j, l, k, i))\n\n    for i in range(1, n):\n        for j in range(i, n):\n            if helper(i, j, 0, 0):\n                return True\n\n    return False"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # creating a dictionary to store the count of substrings\n    substring_count = defaultdict(int)\n\n    # iterating through all substrings of length k from the string\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # checking if the sum of digits is equal to the length of the substring\n            if sum(int(digit) for digit in s[i:j]) == j - i:\n                substring_count[s[i:j]] += 1\n\n    # returning the count of substrings\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s = list(s)\n    n = len(s)\n    count = defaultdict(int)\n    \n    # generate all substrings of length i\n    for i in range(2, n+1):\n        for j in range(n-i+1):\n            sub = ''.join(s[j:j+i])\n            count[int(sub)] += 1\n    \n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for char in s:\n        digit_count[ord(char) - ord('0')] += 1\n    substrings_with_sum = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(digit_count[ord(char) - ord('0')] for char in s[i:j]) == j - i:\n                substrings_with_sum.append(s[i:j])\n    return len(substrings_with_sum)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Initialize a dictionary to store the count of substrings with the sum of digits equal to their length\n    count_dict = defaultdict(int)\n\n    # Iterate through each character in the input string\n    for i in range(len(s)):\n\n        # Initialize a variable to store the sum of digits in the substring\n        substring_sum = 0\n\n        # Iterate through each character before the current character in the string\n        for j in range(i):\n\n            # Convert the current character to an integer\n            current_char = ord(s[j]) - 96\n\n            # Convert the next character to an integer\n            next_char = ord(s[j+1]) - 96\n\n            # Add the current and next character's digits\n            substring_sum += current_char + next_char\n\n        # Add 1 to the count of substrings with the sum of digits equal to their length\n        count_dict[substring_sum] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[int(s[i])] += 1\n\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(d) for d in substring) == len(substring):\n                substrings.append(substring)\n\n    return len(substrings)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length = len(s)\n    count = 0\n    prev_sum = 0\n    \n    for i in range(length):\n        # Calculate the sum of digits of the current substring\n        current_sum = sum(int(digit) for digit in s[i:])\n        \n        # If the sum of digits is equal to the length of the substring, add 1 to the count\n        if current_sum == length:\n            count += 1\n        \n        # Update the sum of digits of the previous substring\n        prev_sum = current_sum\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            count[sum(int(digit) for digit in substring)] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with the given sum\n    substring_count = defaultdict(int)\n    for i in range(len(s)):\n        # Loop through all substrings of the current substring\n        for j in range(i, len(s)):\n            # Get the current substring\n            substring = s[i:j+1]\n            # Check if the sum of digits equals the length of the substring\n            if sum(int(digit) for digit in substring) == len(substring):\n                # Increment the count of substrings with the given sum\n                substring_count[len(substring)] += 1\n    # Return the dictionary of substring counts\n    return dict(substring_count)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the count of each substring\n    count = defaultdict(int)\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Get the substring and its length\n        substring = s[i:i+len(s)-i]\n        # Calculate the sum of digits in the substring\n        digit_sum = sum(int(digit) for digit in substring)\n        # Add the count of the substring to the dictionary\n        count[substring] += 1\n    # Return the count of all substrings\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a defaultdict to store the counts of each substring with sum of digits equal to its length\n    substrings = defaultdict(int)\n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # Iterate through the remaining characters in the string\n        for j in range(i+1, len(s)+1):\n            # Calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in s[i:j])\n            # Check if the sum of digits is equal to its length\n            if substring_sum == len(s[i:j]):\n                # Increment the count of the substring in the dictionary\n                substrings[s[i:j]] += 1\n    # Return the total count of substrings in the dictionary\n    return sum(substrings.values())"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    min_num = xs[0]\n    for x in xs:\n        if x < min_num:\n            min_num = x\n    return min_num"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Initialize the smallest number to the first number in the list\n    smallest = xs[0]\n    # Iterate over the remaining numbers in the list\n    for num in xs[1:]:\n        # If the current number is smaller than the smallest, update the smallest\n        if num < smallest:\n            smallest = num\n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs:\n        return min(xs)\n    else:\n        return None"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    # Initialize the smallest number as the first element of the list\n    smallest = xs[0]\n    # Iterate through the rest of the elements of the list\n    for num in xs[1:]:\n        # If the current number is smaller than the smallest, update the smallest\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples\n    test_list.sort()\n    \n    # Initialize the maximum difference variable\n    max_diff = 0\n    \n    # Iterate through the sorted list of tuples\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between the tuples\n        diff = test_list[i+1][0] - test_list[i][1]\n        \n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    n = len(test_list)\n\n    # Sort the list of tuples in ascending order\n    test_list.sort()\n\n    for i in range(n):\n        # Find the maximum difference between adjacent elements\n        diff = test_list[i+1][1] - test_list[i][1]\n\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list in ascending order based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initialize variables for the maximum difference and its index\n    max_diff = 0\n    max_index = -1\n    \n    # Loop through the sorted list\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between the current pair and the next pair\n        diff = test_list[i][1] - test_list[i+1][1]\n        \n        # If the difference is greater than the maximum difference, update the variables\n        if diff > max_diff:\n            max_diff = diff\n            max_index = i\n    \n    # Return the index of the maximum difference pair\n    return max_index"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Find the maximum difference between any two elements in the list\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value as the key\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples by the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # Check if the list is empty\n    if len(data_list) == 0:\n        return 0\n    \n    # Recursively flatten the list\n    flattened_list = recursive_list_sum(data_list[0])\n    \n    # Append the first element of the original list to the flattened list\n    flattened_list.append(data_list[0][0])\n    \n    # Return the flattened list and sum of its elements\n    return flattened_list, sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        raise TypeError('Input must be a list.')\n\n    if len(data_list) == 0:\n        return 0\n\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        raise TypeError('Input must be a list.')\n    \n    def flatten_list(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n    \n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element to the sum of the remaining elements\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data):\n        if isinstance(data, list):\n            for item in data:\n                flatten_list(item)\n        else:\n            yield data\n    \n    flattened_list = list(flatten_list(data_list))\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element of the list and the recursive call to the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(lst):\n        if isinstance(lst, list):\n            return sum(flatten(x) for x in lst)\n        else:\n            return lst\n\n    return flatten(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        \"\"\"\n        Flattens a nested list.\n        \"\"\"\n        if isinstance(data_list, list):\n            return [x for y in data_list for x in flatten(y)]\n        else:\n            return [data_list]\n\n    def sum_flattened_list(flattened_list):\n        \"\"\"\n        Sums up all the elements in the flattened list.\n        \"\"\"\n        if len(flattened_list) == 0:\n            return 0\n        else:\n            return flattened_list[0] + sum_flattened_list(flattened_list[1:])\n\n    flattened_list = flatten(data_list)\n    return sum_flattened_list(flattened_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    This function takes in a list and returns the number of positive integers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize a list to store the result\n    result = []\n    \n    # Initialize the first term of the sequence\n    a = 0\n    b = 1\n    \n    # Loop through each iteration of the sequence\n    for i in range(n):\n        # Calculate the next term of the sequence\n        c = (a + b) % 21\n        a = b\n        b = c\n        \n        # Append the result to the list\n        result.append(b)\n    \n    # Return the length of the result\n    return len(result)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 14\n    if n == 5:\n        return 42\n    if n == 6:\n        return 132\n    if n == 7:\n        return 429\n    if n == 8:\n        return 1430\n    if n == 9:\n        return 4862\n    if n == 10:\n        return 16796\n    if n == 11:\n        return 62270\n    if n == 12:\n        return 233168\n    if n == 13:\n        return 884907\n    if n == 14:\n        return 3556878\n    if n == 15:\n        return 12964475\n    if n == 16:\n        return 52302220\n    if n == 17:\n        return 196418906\n    if n == 18:\n        return 822283867\n    if n == 19:\n        return 3379167462\n    if n == 20:\n        return 126765060022\n    if n == 21:\n        return 550262215986\n    if n == 22:\n        return 2092278988800\n    if n == 23:\n        return 8717829123031\n    if n == 24:\n        return 3628800\n    if n == 25:\n        return 140500611775\n    if n == 26:\n        return 5777059173024\n    if n == 27:\n        return 23058430092136\n    if n == 28:\n        return 983951650989601\n    if n == 29:\n        return 3971451008888000\n    if n == 30:\n        return 16059031705301200\n    if n == 31:\n        return 66457904910676736\n    if n == 32:\n        return 267970000000000000\n    if n == 33:\n        return 1048576000000000000\n    if n == 34:\n        return 4611686018427387904\n    if n == 35:\n        return 17592186044416000000\n    if n == 36:\n        return 73786976294838206464\n    if n == 37:\n        return 295147905179352825856\n    if n == 38:\n        return 1125899906842624\n    if n == 39:\n        return 492277265773607495680\n    if n == 40:\n        return 1844674407370955161600\n    if n == 41:\n        return 79228162514264337593543950336\n    if n == 42:\n        return 314572800000000000000000000000\n    if n == 43:\n        return 1"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # base case for n = 0\n    if n == 0:\n        return 1\n\n    # base case for n = 1\n    if n == 1:\n        return 2\n\n    # Initialize the variables\n    bell_nums = [0, 1]\n    count = 2\n\n    # Check if the last element is greater than n\n    while bell_nums[-1] <= n:\n        # Calculate the next element and add to the list\n        new_num = bell_nums[-1] + bell_nums[-2]\n        if new_num <= n:\n            bell_nums.append(new_num)\n        # Increment the count\n        count += 1\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Create a list of the first n Bell numbers\n    bell_numbers = [1]\n    for i in range(2, n+1):\n        bell_numbers.append(bell_numbers[-1]+bell_numbers[-2])\n\n    # Initialize the count of ways to partition the set of Bell numbers\n    count = 0\n\n    # Loop through all possible partitioning of the Bell numbers\n    for i in range(n+1):\n        for j in range(i+1):\n            # Check if the partitioning satisfies the condition\n            if bell_numbers[i] <= j <= bell_numbers[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables\n    B = [0] * (n+1)\n    B[0] = 1\n    B[1] = 1\n    \n    # Calculate Bell numbers\n    for i in range(2, n+1):\n        B[i] = 2 * B[i-1] - B[i-2]\n        \n    # Return Bell numbers\n    return B"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Base case: partition of the set into 1 set\n    if n == 1:\n        return 1\n    # Base case: partition of the set into 2 sets\n    if n == 2:\n        return 2\n    # Recursive case: number of ways to partition the set into n sets is given by\n    # the number of ways to partition the set into n-1 sets and the number of ways to\n    # partition the set into 1 set.\n    return (n * bell_number(n-1)) // (n-1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    count = 0\n    for i in range(3, n+1):\n        if (n % i == 0 and i!= 1) or (i % n == 0 and i!= n):\n            count += bell_number(i-1)\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the first Bell number as 1\n    bell_1 = 1\n    \n    # Initialize the number of ways to partition as 1\n    ways = 1\n    \n    # Loop through the remaining Bell numbers\n    for i in range(2, n+1):\n        \n        # Calculate the next Bell number\n        bell_i = bell_1 + i\n        \n        # If the next Bell number is greater than n, it means there are no more ways to partition\n        if bell_i > n:\n            break\n        \n        # Increment the number of ways to partition by the number of ways to partition the first Bell number and the remaining Bell numbers\n        ways += bell_number(bell_i)\n    \n    # Return the number of ways to partition the set of Bell numbers\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (10 * (n-1) * bell_number(n-1)) // 11"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    # check if the array is monotonic\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            continue\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    # Check if the array is empty or contains only one element\n    if len(A) <= 1: \n        return True\n\n    # Initialize variables to keep track of the previous and next elements\n    prev = A[0]\n    next = A[1]\n\n    # Iterate over the array, starting from the second element\n    for i in range(1, len(A) - 1): \n        # Check if the current element is less than or equal to the previous element\n        if A[i] <= prev: \n            return False\n\n        # Update the previous and next elements for the next iteration\n        prev = next\n        next = A[i+1]\n\n    # Check if the last element is greater than or equal to the first element\n    if A[-1] >= A[0]: \n        return True\n\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) <= 1:\n        return True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Initialize the first and last elements of the array\n    first = A[0]\n    last = A[-1]\n    # Initialize the flag to check whether the array is monotonic or not\n    is_monotonic = True\n    # Iterate through the array\n    for i in range(1, len(A)-1):\n        # Check if the current element is greater than the previous element\n        if A[i] > A[i-1]:\n            # If not, update the flag and break out of the loop\n            is_monotonic = False\n            break\n        # Check if the current element is less than the next element\n        elif A[i] < A[i+1]:\n            # If not, update the flag and break out of the loop\n            is_monotonic = False\n            break\n    return is_monotonic"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    This function checks whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n\n    if A[0] < A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i-1] or A[i] >= A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i-1] or A[i] <= A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty\n    if len(A) == 0:\n        return True\n    # initialize the first element as the first element of the array\n    first = A[0]\n    # iterate over the rest of the array\n    for i in range(1, len(A)):\n        # check if the current element is less than the previous element\n        if A[i] < first:\n            # if it is, return False\n            return False\n        # if the current element is not less than the previous element,\n        # update the first element to the current element\n        else:\n            first = A[i]\n    # if all elements are less than or equal to the first element, return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A) \n    if n == 0: \n        return True \n    elif n == 1: \n        return True if A[0] >= A[0] else False \n    else: \n        if A[0] >= A[1]: \n            for i in range(1, n-1): \n                if A[i] < A[i-1]: \n                    return False \n        else: \n            for i in range(1, n-1): \n                if A[i] > A[i-1]: \n                    return False \n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    if A[0] == A[-1]:\n        return True\n\n    if A[0] <= A[1] < A[2]:\n        return is_Monotonic(A[1:])\n\n    if A[0] < A[1] <= A[2]:\n        return is_Monotonic(A[1:])\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in l:\n        if s in i:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while j < len(s):\n        if l[i] == s[j]:\n            i += 1\n        j += 1\n        \n        if i == len(l):\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # check if the sublist is empty\n    if not s:\n        return True\n    # check if the sublist is the first element of the list\n    if s[0] in l:\n        return is_sublist(l[l.index(s[0])+1:], s[1:])\n    # check if the sublist is not the first element of the list\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Initialize the count of common elements as 0\n    count = 0\n    \n    # Loop through the list l\n    for i in range(len(l)):\n        # If the current element is equal to any element in the sublist s, increment the count\n        for j in range(len(s)):\n            if l[i] == s[j]:\n                count += 1\n                \n                # If the count is equal to the length of the sublist s, the sublist is found\n                if count == len(s):\n                    return True\n    \n    # If the function reaches this point, it means that the sublist is not found\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    elif len(l) == len(s):\n        return l == s\n    else:\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in l:\n        if s == l[i:]:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes two lists and checks whether the first list contains the second list or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tuple in Input:\n        if len(tuple)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Loop through each tuple in the list\n    for i in range(len(Input)):\n        # Check if the length of each tuple is equal\n        if len(Input[i])!= len(Input[0]):\n            return False\n\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    count = 0\n    for tuple in Input:\n        if len(tuple) == count:\n            count += 1\n        else:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(set(i)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal = True\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            equal = False\n            break\n    return equal"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    max_iter = 50\n    gap = n // 2\n\n    while gap > 0 and max_iter > 0:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        gap = int(gap / 1.3)\n        max_iter -= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        gap = int(gap / 1.3)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    i = 1\n\n    while swapped:\n        swapped = False\n        gap = n\n        while gap > 1:\n            gap = (gap + 1) // 2\n            i += gap\n            if i >= n:\n                i = 1\n\n            for j in range(0, n - gap, gap):\n                if nums[j] > nums[j + gap]:\n                    nums[j], nums[j + gap] = nums[j + gap], nums[j]\n                    swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    swapped = True\n    n = len(nums)\n    gap = n\n\n    while gap > 1 or swapped:\n        swapped = False\n\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n        gap = gap // 10"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the Comb Sort algorithm.\n\n    Args:\n        nums (list): A list of elements to be sorted.\n\n    Returns:\n        The sorted list.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    \n    # Initialize the iteration count and the swapping flag\n    i, swapped = 0, True\n    \n    # While the swapping flag is True\n    while swapped:\n        # Reset the swapping flag\n        swapped = False\n        \n        # For each element in the list\n        for j in range(len(nums) - i):\n            # If the current element is greater than the next element\n            if nums[j] > nums[j+1]:\n                # Swap the elements\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                # Set the swapping flag to True\n                swapped = True\n        \n        # If no swapping was done, the list is already sorted\n        if not swapped:\n            break\n        \n        # Increment the iteration count\n        i += 1\n    \n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    n = len(nums)\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = (gap * 10) // 13\n        swapped = False\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return \"Input should be a positive integer.\"\n\n    # Get the square of the input number\n    square = n * n\n\n    # Check if the square of the input number is also a square\n    if square * square == n:\n        return \"The number is not a difference of two squares.\"\n\n    # Check if the difference of the square of the input number and itself is also a square\n    diff_square = n * (square - n)\n    if diff_square * diff_square == square:\n        return \"The number is a difference of two squares.\"\n\n    # If none of the above conditions are true, return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Finding the square of the number\n    square = n**2\n\n    # Finding the difference between the square and itself\n    difference = abs(square - n)\n\n    # Checking whether the difference is equal to the square of the difference or not\n    if difference**2 == square:\n        print(\"The number can be represented as the difference of two squares.\")\n    else:\n        print(\"The number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n < 0:\n        return False\n    \n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0 and n//i == i:\n            return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the given number can be expressed as the sum of two squares\n    sum_of_squares = (n**2 + n)\n    if sum_of_squares**2 == n:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # initialize two variables\n    diff = 0\n    num = n\n\n    # check if num is a power of 2\n    while num % 2 == 0:\n        diff += 1\n        num //= 2\n\n    # check if num can be represented as the difference of two squares\n    if num <= 1:\n        return False\n    elif (num + 1)**2 - 2*num*diff + 1 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n\n    Args:\n        n (int): A positive integer.\n\n    Returns:\n        bool: True if the given number can be represented as the difference of two squares, otherwise False.\n    \"\"\"\n    # Check if the given number is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n    \n    # Convert the number to a list of digits\n    digits = list(map(int, str(n)))\n    \n    # Check if the number is divisible by 4 or 9\n    if digits[0] in [4, 9]:\n        return False\n    \n    # Check if the number has a leading 2\n    if digits[0] == 2:\n        return False\n    \n    # Check if the number has 2 as a digit after the first digit\n    for i in range(1, len(digits)):\n        if digits[i] == 2:\n            return False\n    \n    # Check if the number is a palindrome\n    for i in range(len(digits) // 2):\n        if digits[i]!= digits[-i - 1]:\n            return False\n    \n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Check if n is a power of 2\n    is_power_of_two = lambda x: x > 0 and ((x & (x - 1)) == 0)\n    \n    # Check if the number is even and can be represented as the difference of two squares\n    if n % 2 == 0 and is_power_of_two(int(n/2)):\n        return True\n    \n    # Check if the number is odd and can be represented as the difference of two squares\n    elif n % 2!= 0 and is_power_of_two(int(n/2) + 1):\n        return True\n    \n    # If none of the above conditions are satisfied, return False\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    if n < 0:\n        return \"The number should be a non-negative integer.\"\n    \n    # First, find the square root of n\n    sqrt_n = n ** 0.5\n    \n    # Now, check if n can be represented as the difference of two squares\n    if sqrt_n ** 2 == n:\n        return \"Yes, the number can be represented as the difference of two squares.\"\n    else:\n        return \"No, the number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n % 4 == 0:\n        return False\n    elif n % 2 == 0:\n        for i in range(1, int(n/2) + 1):\n            if n - i**2 == i**2:\n                return True\n    else:\n        for i in range(1, int(n/2) + 1):\n            if n - i**2 == i**2:\n                return True\n        if n % (int(n/2) + 1) == 0:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n < 0:\n        return \"The given number is negative.\"\n    \n    if n == 0:\n        return \"The given number is 0.\"\n    \n    # Check whether n can be represented as the difference of two squares\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                return \"The given number can be represented as the difference of two squares.\"\n            elif n % (i**2) == 0:\n                return \"The given number can be represented as the difference of two squares.\"\n    \n    # n cannot be represented as the difference of two squares\n    return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # check if the length of the colors array is equal to the length of the patterns array\n    if len(colors)!= len(patterns):\n        return False\n\n    # loop through the colors array and compare each color to the corresponding pattern in the patterns array\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    # if all the colors match their corresponding pattern, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Initialize variables\n    current_pattern = ''\n    count = 0\n    \n    # Loop through the colors and patterns arrays\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            current_pattern += colors[i]\n            count += 1\n        else:\n            if count > 0:\n                return False\n            else:\n                current_pattern = colors[i]\n                count = 1\n            \n    # Check if all patterns have been used\n    if count > 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # check if the length of the colors and patterns arrays is equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # iterate over each pattern in the patterns array\n    for pattern in patterns:\n        # initialize a boolean flag to keep track of whether the pattern has been found\n        found = False\n\n        # iterate over each color in the colors array\n        for color in colors:\n            # if the color matches the current pattern, set the found flag to true and break out of the inner loop\n            if color == pattern:\n                found = True\n                break\n\n        # if the pattern was not found in the colors array, return false\n        if not found:\n            return False\n\n    # if all patterns have been found in the colors array, return true\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    # Check if the number of colors is equal to the number of patterns\n    if len(colors)!= len(patterns):\n        return False\n\n    # Loop through the colors and patterns\n    for color, pattern in zip(colors, patterns):\n        # Check if the color matches the pattern\n        if color!= pattern:\n            return False\n\n    # If we made it through the loop without finding a mismatch, the colors follow the patterns\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    sequence = colors[0]\n    for pattern in patterns:\n        if pattern[0] in sequence:\n            sequence = sequence.replace(pattern[0], pattern[1], 1)\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    if len(colors)!= len(patterns):\n        return False\n\n    color_count = {}\n\n    for color in colors:\n        if color in color_count:\n            color_count[color] += 1\n        else:\n            color_count[color] = 1\n\n    for pattern in patterns:\n        if pattern not in color_count:\n            return False\n        color_count[pattern] -= 1\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    # Check if the length of colors and patterns arrays are equal\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Initialize variables to keep track of the current position in each array\n    curr_color = 0\n    curr_pattern = 0\n    \n    # Loop through the patterns array\n    while curr_pattern < len(patterns):\n        # If the current pattern is a sequence of the same color\n        if patterns[curr_pattern] == colors[curr_color]:\n            # Increment the position in the patterns array\n            curr_pattern += 1\n            # If we have reached the end of the colors array, then it means we have found a valid pattern sequence\n            if curr_color == len(colors) - 1:\n                return True\n            # If we have not reached the end of the colors array, then increment the position in the colors array\n            else:\n                curr_color += 1\n        # If the current pattern is a sequence of different colors\n        else:\n            # If the position in the patterns array is not at the end, then we need to move back to the beginning of the sequence\n            if curr_pattern < len(patterns) - 1:\n                curr_pattern = patterns[curr_pattern]\n                curr_color = patterns[curr_pattern]\n                # Check if we have found a valid pattern sequence\n                if curr_color == len(colors) - 1:\n                    return True\n            # If we have reached the end of the patterns array, then the pattern is invalid\n            else:\n                return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # create a dictionary to store the number of times each pattern appears in the colors array\n    pattern_count = {}\n    for color in colors:\n        if color in pattern_count:\n            pattern_count[color] += 1\n        else:\n            pattern_count[color] = 1\n\n    # compare the count of each pattern to the corresponding pattern in the patterns array\n    for pattern in patterns:\n        if pattern in pattern_count:\n            pattern_count[pattern] -= 1\n            if pattern_count[pattern] == 0:\n                del pattern_count[pattern]\n        else:\n            return False\n\n    # if all patterns have been counted, all is well\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(patterns)\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number K as input and returns a list of all tuples\n    that have all elements divisible by K from the input list of tuples.\n\n    Args:\n        test_list (list): A list of tuples.\n        K (int): A positive integer.\n\n    Returns:\n        list: A list of tuples that have all elements divisible by K from the input list of tuples.\n\n    Example:\n        test_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n        K = 3\n        Output: [(1, 2, 3), (7, 8, 9)]\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Iterate through the test_list\n    for tup in test_list:\n        # If all elements are divisible by K\n        if all(x % K == 0 for x in tup):\n            print(tup)"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create an empty set to store unique tuples\n    unique_tuples = set()\n\n    # iterate through each tuple in the given list\n    for tuple_ in test_list:\n        # convert the tuple to a set to remove duplicates\n        set_tuple = set(tuple_)\n\n        # check if the set of elements in the set_tuple is divisible by K\n        if all(x % K == 0 for x in set_tuple):\n            # add the tuple to the unique_tuples set\n            unique_tuples.add(tuple_)\n\n    # return the list of unique tuples\n    return list(unique_tuples)"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_list = []\n    for i in test_list:\n        if len(set(i)) == len(i) and len(set(i)) <= K:\n            tuples_list.append(i)\n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Create a set to store the elements from the test_list\n    elements = set()\n    for tup in test_list:\n        for element in tup:\n            elements.add(element)\n\n    # Create a list to store the tuples with all elements divisible by k\n    k_tuples = []\n    for i in range(K):\n        for j in range(i + 1, K):\n            if all(element % K == 0 for element in elements):\n                k_tuples.append((i, j))\n\n    return k_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_list = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            tuples_list.append(tup)\n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible by K, append the tuple to the result list\n            result.append(tup)\n            \n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create an empty list to store tuples that satisfy the condition\n    result = []\n    # Loop through each tuple in the given list\n    for t in test_list:\n        # Check if all elements in the tuple are divisible by k\n        if all(t[i] % K == 0 for i in range(len(t))):\n            # If all elements are divisible by k, add the tuple to the result list\n            result.append(t)\n    # Return the result list\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes a number and returns True if the number is divisible by 11.\n    \"\"\"\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0]\n    length = len(word)\n    if length % 2!= 0:\n        return 'The length of the word is odd.'\n    else:\n        return 'The length of the word is even.'"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # Split the string into individual words\n    word_len = 0\n    for word in words:\n        word_len += len(word)\n    if word_len % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0]\n    if len(word) % 2 == 0:\n        return 'The length of the word is even.'\n    else:\n        return 'The length of the word is odd.'"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split() \n    if len(word) == 1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the word is odd, and False otherwise.\n    '''\n    # split the string into words using whitespace as the delimiter\n    words = s.split()\n    # iterate over the words and count the length\n    word_lengths = [len(word) for word in words]\n    # check if the length of the first word is odd\n    if word_lengths[0] % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Initialize a counter to keep track of the number of odd lengths\n    odd_count = 0\n    # Loop through each word and check its length\n    for word in words:\n        # Check if the length of the word is odd\n        if len(word) % 2!= 0:\n            odd_count += 1\n    # Return the result\n    return odd_count"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    if len(s) % 2 == 1:\n        print(\"The word has an odd length.\")\n    else:\n        print(\"The word has an even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into words\n    words = s.split()\n    # loop through each word and check its length\n    for word in words:\n        # if the length of the word is odd, return True\n        if len(word) % 2!= 0:\n            return True\n    # if no word was odd, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word)%2 == 1:\n            print(word)"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and returns True if the length of the word is odd, else it returns False.\n    '''\n    word = s.split()\n    if len(word) > 0:\n        if len(word[0]) % 2 == 1:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 3\n    c = 4\n    d = 1\n    while n > 0:\n        a = a + 1\n        b = b + 1\n        c = c + 1\n        d = d + 1\n        n = n - 1\n    return a + b + c + d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # initialize the counter variable\n    count = 0\n\n    # loop through each integer from 1 to n\n    for i in range(1, n+1):\n        # loop through each integer from 1 to i-1\n        for j in range(1, i):\n            # loop through each integer from 1 to j-1\n            for k in range(1, j):\n                # loop through each integer from 1 to k-1\n                for l in range(1, k):\n                    # check if the set of integers {i, j, k, l} forms a tetrahedral pyramid\n                    if (i + j + k + l) % 2 == 0:\n                        count += 1\n\n    # return the count of tetrahedral pyramids found\n    return count"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 2\n    c = 1\n    d = 1\n    for i in range(n):\n        a, b, c, d = d, 3*a - b, 3*b - c, 3*c - d\n    return d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n+1) * (n+2)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + tetrahedral_number(n - 1)\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n\n    for i in range(2, n + 1):\n        a = a + (4 * i - 3)\n        b = b + (4 * i - 1)\n        c = c + (4 * i)\n        d = d + (4 * i + 1)\n\n    return a + b + c + d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 4 * tetrahedral_number(n - 1)\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 4*n**2 - 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += 2 * (n - i) * i * (i - 1)\n    return result"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 1\n    while n > 0:\n        t = 6 * t * (3 * t - 1) / (2 * n - 1)\n        n -= 1\n    return int(t)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r ** 3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4 / 3 * math.pi * r ** 3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r ** 3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius r as input and returns the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n\n    Parameters:\n    r (float): radius of the sphere\n\n    Returns:\n    float: volume of the sphere\n    \"\"\"\n\n    pi = math.pi\n    volume = (4/3) * pi * (r ** 3)\n\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Iterate over each character in the string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_value = ord(char)\n\n        # Add the ASCII value to the result string\n        result += chr((ascii_value + 26) % 26)\n\n    # Return the result string\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    char_value = ascii_value % 26\n    char = chr(char_value)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i]) % 26\n    return chr(char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr((sum_ascii % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize variables to store the ASCII values of characters in the string\n    ascii_sum = 0\n    ascii_val = 0\n    \n    # Loop through each character in the string\n    for char in strr:\n        # Convert each character to its ASCII value and add it to the sum\n        ascii_val = ord(char)\n        ascii_sum += ascii_val\n    \n    # Return the character made by adding all the ASCII values of the characters modulo 26\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through all the characters of the string and add their ASCII value to the sum variable\n    for char in strr:\n        sum += ord(char)\n\n    # Find the remainder of the sum divided by 26 and convert it to a character\n    char = chr((sum % 26) + 65)\n\n    # Return the character as the output\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ASCII_value = 0\n    for i in range(len(strr)):\n        ASCII_value += ord(strr[i])\n    result = (ASCII_value % 26) + 65\n    return chr(result)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    # Calculate the sum of ASCII values of each character in the string\n    char_sum = sum(ord(char) for char in strr)\n    \n    # Calculate the modulo 26 of the sum\n    char_sum %= 26\n    \n    # Convert the modulo 26 value back to a character and return it\n    return chr(65 + char_sum)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for i in range(len(strr)):\n        total += ord(strr[i])\n    return chr((total % 26) + ord('a'))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2]  # initialize the sequence with the first element being 2\n    i = 2  # initialize a counter variable\n\n    while i < n: \n        # check if the current element is 1 or 2\n        if sequence[i - 1] == 1 or sequence[i - 1] == 2: \n            # add the current element to the next number in the sequence\n            sequence.append(sequence[i - 1] + sequence[i])\n        else: \n            # add the current element to the next number in the sequence\n            sequence.append(sequence[i - 1])\n        i += 1\n\n    return sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = [0, 1]\n    for i in range(2, n+1): \n        a.append(a[-1] + a[-2]) \n    return a[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return \"Enter a positive integer\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        for i in range(n):\n            if i % 2 == 0:\n                sequence_n = sequence_n + (3**i)\n            else:\n                sequence_n = sequence_n + (3**i) - 2\n        return sequence_n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    count = 1\n\n    while count < n:\n        new_sequence = []\n        for i in range(len(sequence)):\n            if sequence[i] % 2 == 0:\n                new_sequence.append(sequence[i] * 3 + 1)\n            else:\n                new_sequence.append(sequence[i] * 3)\n        sequence = new_sequence\n        count += 1\n\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    b = 1\n    c = 0\n    d = 0\n    e = 0\n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            c = a + b\n            d = b + c\n            e = a + d\n            print(e)\n        else:\n            c = a + b\n            d = a + c\n            e = b + d\n            print(e)\n\n        a = b\n        b = c\n        c = d\n        d = e\n        e = 0"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n):\n        if sequence[i-1] == sequence[i-2]:\n            sequence.append(1)\n        else:\n            sequence.append(0)\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2, 1]\n    for i in range(n-2):\n        next_num = sequence[i] + sequence[i+1]\n        sequence.append(next_num)\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the Newman Conway sequence.\n    '''\n    sequence = [1]\n    i = 1\n    while i <= n:\n        if i == 1:\n            sequence.append(1)\n        elif i == n:\n            sequence.append(2)\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2])\n        i += 1\n    return sequence[-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r * r\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    # Use the formula for the surface area of a sphere\n    surface_area = (4/3)*math.pi*(r**3)\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Convert radius from meters to centimeters\n    r_cm = r * 100\n    \n    # Use Heron's formula to find the surface area\n    surface_area = math.pi * r_cm**2\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * (r**3)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3)*math.pi*(r**3)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initializing the base and height of the centered hexagon\n    base = (n * (3 * n - 1)) // 2\n    height = n * (3 * n - 1) // 2\n    \n    # Adding the base and height to get the centered hexagon\n    return base + height"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_number_helper(n, x, y):\n        '''\n        Helper function for centered_hexagonal_number.\n        '''\n        if n == 1:\n            return x + y\n        elif n % 2 == 0:\n            return centered_hexagonal_number_helper(n//2, x - y, 2*x - y + 1)\n        else:\n            return centered_hexagonal_number_helper(n//2, x + y, 2*x + y - 1)\n    \n    return centered_hexagonal_number_helper(n, 0, 2*n + 1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagons = [1]\n    for i in range(1, n+1):\n        hexagons.append(hexagons[i-1] + hexagons[i-2] + 1)\n    return hexagons[n-1]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the sum and count variables\n    sum = 1\n    count = 1\n\n    # Calculate the formula for centered hexagonal numbers\n    formula = 1 + 1/2**n\n\n    # Loop through the formula and add the numbers to the sum\n    while count <= n:\n        sum += formula\n        count += 1\n\n    return sum"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2 * n) ** 2 + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Calculate the number of rows and columns in the centered hexagonal grid\n    rows = n // 2 + 1\n    columns = n // 2 + 1\n    \n    # Calculate the row and column of the middle element\n    middle_row = rows - 1\n    middle_column = columns - 1\n    \n    # Initialize the first element of the centered hexagonal grid\n    centered_hexagonal_grid = [[1, 1, 1]]\n    \n    # Iterate through the centered hexagonal grid to find the nth element\n    for i in range(2, rows * columns):\n        # Add the sum of the numbers to the left and above the middle element\n        if i % 2 == 0:\n            centered_hexagonal_grid.append([centered_hexagonal_grid[i-1][j] + centered_hexagonal_grid[i-2][j] for j in range(middle_column)])\n        else:\n            centered_hexagonal_grid.append([centered_hexagonal_grid[i-1][j] - centered_hexagonal_grid[i-2][j] for j in range(middle_column)])\n    \n    # Return the nth element of the centered hexagonal grid\n    return centered_hexagonal_grid[n-1][0]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n\n    # Calculate centered hexagonal number\n    for i in range(1, n+1):\n        a += b\n        b += 1\n\n    # Return the centered hexagonal number\n    return a - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Function to find centered hexagonal number\n    def centered_hexagonal(n):\n        # Initialize variables for centered hexagonal number\n        i = 0\n        j = 1\n        k = 0\n        # Initialize variable for sum of centered hexagonal number\n        centered_sum = 0\n        # Loop for n iterations\n        for i in range(n):\n            # Calculate centered hexagonal number\n            centered_hex = (i * 6 + j) * 2 - 3\n            # Add centered hexagonal number to sum\n            centered_sum += centered_hex\n            # Move to next row and column\n            k += 1\n            j += 2\n        # Return centered hexagonal number sum\n        return centered_sum\n    # Call centered hexagonal function with n argument\n    return centered_hexagonal(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = n\n    b = 2*n + 1\n    c = a + b\n    d = a + 2*b\n    return d"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes in three dictionaries as input, merges them into a single dictionary,\n    and returns the merged dictionary.\n    \n    :param dict1: The first dictionary to be merged.\n    :param dict2: The second dictionary to be merged.\n    :param dict3: The third dictionary to be merged.\n    :return: A dictionary containing all the key-value pairs of the input dictionaries.\n    \"\"\"\n    \n    # Combine the three dictionaries into a single dictionary\n    merged_dict = {**dict1, **dict2, **dict3}\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and merges them into a single dictionary.\n    \"\"\"\n    # Combine all dictionaries into a single dictionary\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    \n    # Convert the merged dictionary into a set to eliminate duplicates\n    unique_dict = set(merged_dict.items())\n    \n    # Convert the set back into a dictionary\n    final_dict = dict(unique_dict)\n    \n    return final_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        if key not in merged_dict:\n            merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create a new dictionary to store the merged data\n    merged_dict = {}\n    # Loop through each dictionary and merge the keys and values\n    for key, value in dict1.items():\n        if key in dict2 and key in dict3:\n            merged_dict[key] = (dict1[key], dict2[key], dict3[key])\n        elif key in dict2:\n            merged_dict[key] = (dict1[key], dict2[key])\n        elif key in dict3:\n            merged_dict[key] = (dict1[key], dict3[key])\n        else:\n            merged_dict[key] = dict1[key]\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n    - dict1 (dict): the first dictionary to merge\n    - dict2 (dict): the second dictionary to merge\n    - dict3 (dict): the third dictionary to merge\n\n    Returns:\n    - merged_dict (dict): a merged dictionary of all three input dictionaries\n    '''\n\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Combine the two dictionaries into a single dictionary\n    combined_dict = dict1.copy()\n    combined_dict.update(dict2)\n\n    # Merge the third dictionary into the combined dictionary\n    for key, value in dict3.items():\n        combined_dict[key] = value\n\n    return combined_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)  # using defaultdict to initialize the dictionary\n\n    for item in lst:\n        freq_dict[item] += 1  # incrementing the count for the item in the dictionary\n\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary where the keys are the elements in the list\n    and the values are the frequency of those elements in the list.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # Using Counter to count the frequency of each element in the list\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)\n"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return dict(freq_dict)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    small = [x for x in range(1, N) if N % x == 0]\n    large = [x for x in range(N, N+1000) if N % x == 0]\n    closest = min(small + large, key=lambda x: abs(N - x))\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    for num in range(1, N):\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    smallest_num = N\n    smallest_diff = abs(N - smallest_num)\n    for num in range(1, N):\n        diff = abs(num - N)\n        if diff < smallest_diff:\n            smallest_diff = diff\n            smallest_num = num\n    \n    return smallest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = None\n    for i in range(2, N+1):\n        if i < N:\n            if abs(N-i) < abs(closest or N):\n                closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = float('inf')\n    closest_smaller_num = None\n    \n    for num in range(N):\n        if num < smallest_num:\n            smallest_num = num\n        elif abs(num - smallest_num) < abs(closest_smaller_num - smallest_num):\n            closest_smaller_num = num\n    \n    if closest_smaller_num is None:\n        return None\n    elif smallest_num == float('inf'):\n        return closest_smaller_num\n    else:\n        return min(smallest_num, closest_smaller_num)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = N\n    while num > 1:\n        num -= 1\n        if num % 2 == 1:\n            return num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    while True:\n        if n == 0:\n            return n\n        else:\n            n -= 1\n            if n < N:\n                return n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    # Initialize variables\n    closest_num = N\n    diff = abs(N - closest_num)\n    \n    # Loop through the range of numbers\n    for i in range(1, N):\n        # Check if the current number is closer to the closest number\n        diff_i = abs(i - closest_num)\n        if diff_i < diff:\n            closest_num = i\n            diff = diff_i\n            \n    # Return the closest smaller number\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    # initialize a variable to store the closest smaller number than N\n    closest_smaller = float('inf')\n    \n    # loop through all numbers between 1 and N\n    for num in range(1, N+1):\n        # if the current number is smaller than the closest smaller number, update closest_smaller to current number\n        if num < closest_smaller:\n            closest_smaller = num\n            \n    return closest_smaller"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = [i for i in range(1, N+1)]\n    smallest = abs(nums[0])\n    closest = abs(nums[0])\n    for i in range(len(nums)-1):\n        if abs(nums[i]) < smallest:\n            smallest = abs(nums[i])\n            closest = nums[i]\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of strings as input and returns the length of the longest word in the list.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for i in list1:\n        if len(i) > len(longest):\n            longest = i\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list.\n    \"\"\"\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of words as input and returns the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if isinstance(str1, str) and isinstance(sub_str, str):\n        if sub_str in str1:\n            return True\n        else:\n            return False\n    else:\n        raise TypeError(\"Both inputs must be strings.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # convert the list of string values to a set to remove duplicates\n    str_set = set(str1)\n    # loop through the list of string values\n    for string in str_set:\n        # check if the substring is present in the current string\n        if sub_str in string:\n            return True\n    # if the function reaches here, then the substring was not found in the list of string values\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s.find(sub_str)!= -1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if not isinstance(str1, str) or not isinstance(sub_str, str):\n        return \"Invalid input\"\n\n    if not sub_str:\n        return \"Substring cannot be empty\"\n\n    str_list = [str1]\n    for i in range(len(str_list)):\n        if str_list[i].find(sub_str)!= -1:\n            return True\n\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert list of strings to set to remove duplicates\n    sub_set = set(sub_str)\n    # Loop through the list of strings\n    for string in str1:\n        # Convert string to set to remove duplicates\n        temp_set = set(string)\n        # Check if the set intersection is non-empty (i.e. all the elements in sub_set are also in temp_set)\n        if sub_set.intersection(temp_set):\n            return True\n    # If no substrings are found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # Split the string into a list of substrings\n    substrings = str1.split(sub_str)\n\n    # Check if the length of the list is equal to the length of the string\n    if len(substrings) == len(str1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not isinstance(str1, list) or not isinstance(sub_str, str):\n        raise TypeError('Both inputs must be of type list and string')\n    \n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # initialize the sum of the squares of the first n natural numbers\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += i**2\n    \n    # check if the sum of the squares is equal to the sum of the natural numbers\n    if sum_of_squares == sum(range(1, n+1))**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return \"The number is undulating\"\n    elif n == 0:\n        return \"The number is not undulating\"\n    else:\n        return \"The number is undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n == 0:\n        return True\n    elif n > 0:\n        return is_undulating(n-1) or is_undulating(n+1)\n    else:\n        return is_undulating(n+1) or is_undulating(n-1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n > 0:\n        return \"It is an undulating number.\"\n    else:\n        return \"It is not an undulating number.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    sqrt_n = math.sqrt(n)\n    result = pow(sqrt_n, n)\n    if result == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the given number is odd or even\n    if n % 2 == 0:\n        return False\n    \n    # Check if the given number is a palindrome\n    if str(n) == str(n)[::-1]:\n        return True\n    \n    # Check if the given number is divisible by 3\n    if n % 3 == 0:\n        return True\n    \n    # Check if the given number is divisible by 4\n    if n % 4 == 0:\n        return False\n    \n    # Check if the given number is divisible by 5\n    if n % 5 == 0:\n        return True\n    \n    # Check if the given number is divisible by 6\n    if n % 6 == 0:\n        return False\n    \n    # Check if the given number is divisible by 7\n    if n % 7 == 0:\n        return True\n    \n    # Check if the given number is divisible by 8\n    if n % 8 == 0:\n        return False\n    \n    # Check if the given number is divisible by 9\n    if n % 9 == 0:\n        return True\n    \n    # Check if the given number is divisible by 10\n    if n % 10 == 0:\n        return False\n    \n    # If none of the above conditions are true, it is an undulating number\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return False\n\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0: \n        return False\n    elif n == 1: \n        return True\n    else: \n        if n % 2 == 0: \n            return is_undulating(n//2)\n        else: \n            return is_undulating(3*n + 1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n\n    # Check if the number is even\n    if n % 2 == 0: \n        # If even, return True\n        return True\n\n    # If odd, check for prime factors\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            # If prime factor is found, return False\n            return False\n\n    # If prime factors not found, return True\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    This function checks whether a given number is undulating or not.\n    '''\n    if n > 0: \n        for i in range(1, n+1): \n            if (i*i - n*(n-i) >= 0): \n                return True\n        return False\n    else: \n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    This function takes two parameters 'a' and 'b'.\n    It calculates the value of 'a' to the power 'b' and returns the result.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a, b // 2) * power(a, b // 2)\n    else:\n        return a * power(a, b - 1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by second value in ascending order\n    test_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value of the tuples\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Extract the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value (which is the second element in each tuple)\n    test_list.sort(key=itemgetter(1))\n    # Return the first tuple in the sorted list\n    return test_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list of tuples in ascending order based on the second value of the tuple\n    test_list.sort(key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value (which is the second element of each tuple)\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # initialize a variable to store the length of the smallest list\n    min_len = float('inf')\n    # loop through each sublist in the main list\n    for sublist in lst:\n        # loop through each element in the sublist\n        for elem in sublist:\n            # check if the length of the sublist is less than the current minimum length\n            if len(elem) < min_len:\n                # update the minimum length to be the length of the current sublist\n                min_len = len(elem)\n    # return the minimum length\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # initialize the length of the smallest list to infinity\n    min_length = float('inf')\n\n    # loop through each list in the list of lists\n    for sublist in lst:\n\n        # check if the length of the current sublist is less than the current minimum length\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    # return the length of the smallest sublist\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p**2 <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p**2, n+1, p):\n                prime[i] = False\n        p += 1\n    \n    # Count the number of divisors by iterating over all non-prime numbers\n    count = 0\n    for i in range(2, n+1):\n        if prime[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    count = 0\n    i = 1\n\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # flatten the list to remove any nested lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n    # iterate over each element in the flattened list\n    for item in flattened_list:\n        # if the element is already in the dictionary, increment its value by 1\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # if the element is not in the dictionary, add it with a value of 1\n        else:\n            freq_dict[item] = 1\n    # return the dictionary containing the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    frequency = {}\n    \n    # loop through each element of the list\n    for item in list1:\n        # if the item is a list, recursively call the function on that list\n        if isinstance(item, list):\n            # calculate the frequency of the list items and add them to the frequency dictionary\n            frequency.update(frequency_lists(item))\n        # if the item is not a list, check if it is already in the dictionary\n        elif item in frequency:\n            # if it is, increment its frequency by 1\n            frequency[item] += 1\n        # if the item is not in the dictionary, add it with a frequency of 1\n        else:\n            frequency[item] = 1\n            \n    # return the final frequency dictionary\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    # Iterate over each element in the flattened list\n    for item in flat_list:\n        # If the element is already in the dictionary, increment its frequency\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[item] = 1\n    # Return the dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 0:\n        return 0\n    else:\n        return numbers[0] * multiply_num(numbers[1:])"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # multiply all the numbers and divide with the length of the list\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    \n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return sum(numbers) / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product *= number\n    product /= len(numbers)\n    return product"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    else:\n        return str(n % 2) + decimal_to_binary(n // 2)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    elif n % 2 == 0:\n        return '0' + decimal_to_binary(n // 2)\n    else:\n        return '1' + decimal_to_binary(n // 2)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert decimal to binary using bitwise operations\n    binary = bin(n)[2:]\n    # Add leading zeros if necessary\n    while len(binary) < 8:\n        binary = '0' + binary\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = ''\n    while n > 0:\n        remainder = n % 2\n        binary_string = str(remainder) + binary_string\n        n //= 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    This function takes an integer as input and returns the binary equivalent of the number represented as a string with no leading zeros.\n    '''\n    # Initialize an empty string to store the binary equivalent\n    binary_str = ''\n\n    # Convert the decimal number to binary\n    while n > 0:\n        # Get the last digit of the decimal number\n        digit = n % 2\n\n        # Add the digit to the beginning of the binary string\n        binary_str = str(digit) + binary_str\n\n        # Remove the last digit of the decimal number\n        n = n // 2\n\n    # Return the binary string without leading zeros\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert a decimal number to its binary equivalent.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        rem = n % 2 \n        binary = str(rem) + binary \n        n = n // 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # define a helper function to check if a number is palindrome\n    def is_palindrome(num):\n        # convert the number to a string and reverse it\n        num_str = str(num)[::-1]\n        # compare the reversed number with the original number\n        return num_str == num_str[::-1]\n    \n    # initialize a variable to store the smallest palindrome\n    smallest_palindrome = None\n    \n    # loop through all numbers starting from 1\n    for i in range(1, sys.maxsize):\n        # check if the number is palindrome\n        if is_palindrome(i) and (smallest_palindrome is None or i < smallest_palindrome):\n            smallest_palindrome = i\n    \n    # return the smallest palindrome if it exists, otherwise return None\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Get the list of digits of the specified integer\n    digits = [int(d) for d in str(num)]\n\n    # Reverse the list of digits\n    digits_reverse = digits[::-1]\n\n    # Count the number of odd digits\n    odd_count = 0\n    for digit in digits_reverse:\n        if digit % 2!= 0:\n            odd_count += 1\n\n    # If there are no odd digits, add 1 to the next even digit\n    if odd_count == 0:\n        for i, digit in enumerate(digits_reverse):\n            if digit % 2 == 0:\n                digits_reverse[i] += 1\n                break\n\n    # Convert the reversed list of digits back to an integer\n    next_smallest_palindrome = int(''.join(map(str, digits_reverse)))\n\n    return next_smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_smallest_palindrome(num):\n    # Check if the input number is odd\n    if num % 2 == 1:\n        # Find the smallest odd number greater than the input number\n        for i in range(num-1, 0, -1):\n            if i % 2 == 0:\n                return i\n        # If no odd number greater than the input number exists, return the input number\n        return num\n    # If the input number is even, find the smallest even number greater than the input number\n    else:\n        for i in range(num-1, 0, -2):\n            if i % 2 == 0:\n                return i\n        # If no even number greater than the input number exists, return the input number\n        return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the input integer to a string\n    num_str = str(num)\n    # Reverse the string\n    reversed_num_str = num_str[::-1]\n    # Initialize a boolean variable to keep track of if the reversed string is a palindrome\n    is_palindrome = True\n    # Iterate through each character in the reversed string\n    for char in reversed_num_str:\n        # If the character is not equal to the first character, the reversed string is not a palindrome\n        if char!= reversed_num_str[0]:\n            is_palindrome = False\n            break\n    # If the reversed string is a palindrome, increment the first character and convert it to an integer\n    if is_palindrome:\n        num_str = str(int(num_str) + 1)\n    # Convert the new integer back to an integer and return it\n    return int(num_str)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the given integer to a string\n    num_str = str(num)\n    # Reverse the string\n    num_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    num_rev = int(num_str)\n    # Check if the reversed integer is greater than the given integer\n    if num_rev > num:\n        # Return the next smallest palindrome of the given integer\n        return num_rev + 1\n    else:\n        # Return the smallest palindrome greater than the given integer\n        return next_smallest_palindrome(num + 1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num\n    \n    # iterate through odd numbers to find the next smallest palindrome\n    for i in range(2, num):\n        temp = i\n        while temp * temp <= num:\n            temp *= i\n            if str(temp) == str(temp)[::-1]:\n                return temp\n    \n    # if no palindrome was found, return the largest odd number less than the input number\n    return max(filter(lambda x: x % 2!= 0 and x < num, range(num, 1, -1)))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Ensure the number is positive\n    num = abs(num)\n    # Start with the smallest number\n    smallest = 1\n    # Loop until we find the next smallest palindrome\n    while True:\n        # Calculate the next smallest palindrome\n        next_palindrome = num * 10 + 1\n        # Check if the next palindrome is a palindrome\n        if is_palindrome(next_palindrome):\n            # If it is, return it\n            return next_palindrome\n        # If not, increment the smallest palindrome\n        else:\n            smallest += 1\n            # If we've exceeded the largest palindrome, we're done\n            if smallest * smallest > 1000000:\n                return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    if not is_palindrome(num):\n        # Try to find a palindrome that's smaller than the current number\n        for i in range(num-1, 0, -1):\n            if is_palindrome(i):\n                return i\n        # If no smaller palindrome is found, try to find a palindrome that's larger than the current number\n        for i in range(num+1, 10000):\n            if is_palindrome(i):\n                return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def reverse_num(num):\n        return int(str(num)[::-1])\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def find_next_smallest_palindrome(num):\n        while True:\n            candidate = reverse_num(num) + num\n            if is_palindrome(candidate):\n                return candidate\n            if is_prime(candidate):\n                return reverse_num(candidate)\n\n    return find_next_smallest_palindrome(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_palindrome(num):\n    \"\"\"Check if a given number is a palindrome.\"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"Return the next smallest palindrome of a specified integer.\"\"\"\n    next_num = num + 1\n    while not is_palindrome(next_num):\n        next_num += 1\n    return next_num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    n = len(arr)\n    if k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        pivot = arr[n//2]\n        left = [x for x in arr if x < pivot]\n        right = [x for x in arr if x > pivot]\n        mid = [x for x in arr if x == pivot]\n        if k <= len(left):\n            return kth_element(left, k)\n        else:\n            return kth_element(right, k - len(left) - 1) + mid[0]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return \"Error: k is greater than the length of the array.\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not isinstance(arr, list) or not isinstance(k, int):\n        return None\n    elif k <= 0 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not isinstance(arr, list):\n        raise TypeError(\"The first argument must be a list.\")\n    if not isinstance(k, int) or k <= 0:\n        raise ValueError(\"The second argument must be a positive integer.\")\n    if k > len(arr):\n        raise ValueError(\"The kth element does not exist in the array.\")\n\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes in an array and a number k, and returns the kth element of the array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return 'Invalid input'\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        return None\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = len(arr)\n        while left < right:\n            mid = left + (right - left) // 2\n            if arr[mid] == k:\n                return arr[mid]\n            elif arr[mid] < k:\n                left = mid + 1\n            else:\n                right = mid\n        return arr[left - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Initialize an empty string to hold the camel case version of the word\n    camel_case_word = ''\n    # Iterate over the list of words and capitalize the first letter of each word\n    for i in range(len(words)):\n        if i == 0:\n            camel_case_word += words[i].capitalize()\n        else:\n            camel_case_word += words[i]\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into a list of words using snake_case split\n    snake_list = word.split('_')\n    \n    # Create an empty list to store the camel case words\n    camel_list = []\n    \n    # Iterate over the words in the list and convert each to camel case\n    for i in snake_list:\n        camel_list.append(i.title())\n    \n    # Join the camel case words into a camel case string\n    camel_word = ''.join(camel_list)\n    \n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[:i+1].capitalize() for i, letter in enumerate(word) if letter.isupper()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    for char in word:\n        if char.isupper():\n            result += char\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0 and word[i].isupper():\n            camel_case += word[i].lower()\n        elif i > 0 and word[i].isupper():\n            camel_case += \"_\"\n        camel_case += word[i].lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        elif i > 0 and word[i-1]!= \"_\":\n            camel_case += char.upper()\n        else:\n            camel_case += char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n\n    # Convert the first word to uppercase\n    words[0] = words[0].capitalize()\n\n    # Join the words back into a camel case string\n    camel_case = ''.join(words)\n\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_word = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_word += char.lower()\n        elif char.isupper():\n            camel_word += char\n        else:\n            camel_word += char.lower()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    numerator = factorial(n)\n    denominator = factorial(m) * factorial(n-m)\n    return numerator / denominator\n\nHere, the function first defines a helper function factorial() that calculates the factorial of n recursively. Then, it calculates the numerator and denominator as per the given formula. Finally, it returns the ratio of numerator and denominator."
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the matrix A with all values as 0\n    A = [[0 for j in range(m+1)] for i in range(n+1)]\n    # Initialize the matrix B with all values as 1\n    B = [[1 for j in range(m+1)] for i in range(n+1)]\n    # Initialize the matrix C with all values as 0\n    C = [[0 for j in range(m+1)] for i in range(n+1)]\n    # Initialize the matrix D with all values as 0\n    D = [[0 for j in range(m+1)] for i in range(n+1)]\n    # Calculate the matrix A and B using the formula A = B + C - D\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            A[i][j] = B[i-1][j] + C[i-1][j-1] - D[i-1][j-1]\n    # Calculate the matrix C and D using the formula C = 2*A + B + D\n    for i in range(n, 0, -1):\n        for j in range(1, m+1):\n            C[i][j] = 2*A[i][j] + B[i-1][j] + D[i-1][j-1]\n            D[i][j] = B[i-1][j] + 2*A[i][j] + D[i-1][j-1]\n    # Return the value of the diagonal element of matrix C\n    return C[0][0]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return m\n    else:\n        for i in range(3, n+1):\n            if m == i:\n                return 1\n            elif m == i+1:\n                return i\n            else:\n                return i-1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    a = [0] * (n + 1)\n    a[1] = 1\n\n    # Iterate over rows and columns\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            # Calculate value of a(i, j)\n            if i % 2 == 0:\n                a[i] += a[i - 2] * (2 * i - 1)\n            else:\n                a[i] += a[i - 2] * (2 * i)\n\n            # Calculate value of a(j, i)\n            if j % 2 == 0:\n                a[j] += a[j - 2] * (2 * j - 1)\n            else:\n                a[j] += a[j - 2] * (2 * j)\n\n    return a[-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Initialize variables\n    count = 0\n    current_count = 0\n    \n    # Iterate through all possible values of n\n    for i in range(1, n+1):\n        # Initialize variables for the current row\n        current_count = 0\n        prev_row = 1\n        \n        # Iterate through all possible values of m\n        for j in range(1, m+1):\n            # Check if the current row is a Eulerian number\n            if i % j == 0 and prev_row % i == 0:\n                current_count += 1\n            \n            # Update the previous row\n            prev_row = current_count\n        \n        # Update the count if the current row is a Eulerian number\n        if current_count == i:\n            count += 1\n    \n    return count"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Base case: if n == 1 or m == 1, return 1\n    if n == 1 or m == 1:\n        return 1\n    \n    # Recursive case: return n*(a(n-1, m) + a(n, m-1))\n    else:\n        return n*(eulerian_num(n-1, m) + eulerian_num(n, m-1))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n/2) * (m**((n/2)-1))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first row of the matrix with 1s\n    first_row = [1] * m\n    # Initialize the second row of the matrix with 1s\n    second_row = [1] * (n - m)\n    \n    # Combine the first and second rows to get the final matrix\n    final_matrix = [first_row] + [second_row]\n    \n    # Calculate the determinant of the matrix\n    det = 1\n    for i in range(m):\n        for j in range(n - m):\n            det *= final_matrix[i][j]\n    \n    # Calculate the Eulerian number a(n, m)\n    euler_num = det * pow(2, m)\n    \n    return euler_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the sum of powers\n    sum_pow = 0\n    \n    # Initialize the power of a\n    power = 1\n    \n    # Iterate through all possible values of n\n    for i in range(1, n+1):\n        # Multiply the power by i and add it to the sum of powers\n        sum_pow += power * i\n        \n        # Update the power by multiplying it by m\n        power *= m\n    \n    # Return the sum of powers\n    return sum_pow"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the list of Eulerian numbers\n    euler = []\n\n    # Generate the Eulerian numbers using the formula\n    for i in range(n+1):\n        euler.append(i*(i-1)//2)\n\n    # Calculate the sum of the Eulerian numbers using the formula\n    total = 0\n    for i in range(1, m+1):\n        total += euler[i-1]\n\n    return total"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist in the input list\n    for sublist in input_list:\n        # sort the sublist using the sorted() function\n        sublist.sort()\n        # print the sorted sublist\n        print(sublist)"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, bool) and element is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for num in lst:\n        if isinstance(num, bool):\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, bool) and element is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + test_list\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n\n    # append the list to the tuple\n    test_tup = test_tup + tuple(test_list)\n\n    # return the updated tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_tup)  # convert the tuple to a list\n    test_list.extend(test_tup)  # add the list to the tuple\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Using the extend() method of lists\n    test_list.extend(test_tup)\n    print(\"The list has been appended to the tuple.\")\n    print(\"The updated tuple is:\", test_tup)\n    print(\"The updated list is:\", test_list)\n    \n    # Using the + operator for tuples\n    test_tup = test_tup + test_list\n    print(\"\\nThe updated tuple is:\")\n    print(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the given list to a tuple\n    test_list = tuple(test_list)\n    # Append the tuple to the given list\n    test_list = test_list + test_tup\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n    # Sort the merged list in ascending order\n    sorted_list = sorted(merged_list)\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Concatenate the three lists\n    all_numbers = num1 + num2 + num3\n    \n    # Convert the concatenated list into a heap using heapq\n    heap = []\n    for num in all_numbers:\n        heapq.heappush(heap, num)\n        \n    # Extract the sorted list from the heap\n    merged_list = []\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n        \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge the two lists\n    merged_list = sorted(num1 + num2)\n    \n    # Add the third list to the end of the merged list\n    heapq.heappush(merged_list, num3)\n    \n    # Return the merged and sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Convert the input lists into sets to remove duplicates\n    num1_set = set(num1)\n    num2_set = set(num2)\n    num3_set = set(num3)\n    \n    # Convert the sets back into lists to sort them\n    num1_list = sorted(list(num1_set))\n    num2_list = sorted(list(num2_set))\n    num3_list = sorted(list(num3_set))\n    \n    # Merge the three lists using the heapq module\n    merged_list = []\n    heapq.heapify(num1_list)\n    heapq.heapify(num2_list)\n    heapq.heapify(num3_list)\n    while len(num1_list) > 0 and len(num2_list) > 0 and len(num3_list) > 0:\n        if heapq.heappop(num1_list) < heapq.heappop(num2_list):\n            heapq.heappush(merged_list, heapq.heappop(num1_list))\n        elif heapq.heappop(num2_list) < heapq.heappop(num3_list):\n            heapq.heappush(merged_list, heapq.heappop(num2_list))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num3_list))\n    \n    # Convert the merged list back into a set and sort it\n    merged_list_set = set(merged_list)\n    merged_list_sorted = sorted(list(merged_list_set))\n    \n    # Return the sorted merged list\n    return merged_list_sorted"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n\n    # Merge two lists into a single sorted list\n    merged_list = sorted(num1 + num2)\n\n    # Merge the merged list with the third list\n    return sorted(merged_list + num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Initialize two empty lists\n    merge_list = []\n    temp_list = []\n\n    # Add the elements of the three lists to the temporary list\n    for i in range(len(num1)):\n        heapq.heappush(temp_list, num1[i])\n    for i in range(len(num2)):\n        heapq.heappush(temp_list, num2[i])\n    for i in range(len(num3)):\n        heapq.heappush(temp_list, num3[i])\n\n    # Merge the temporary list into the final list\n    while temp_list:\n        merge_list.append(heapq.heappop(temp_list))\n\n    return merge_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # concatenate the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # convert the list to a heap\n    heap = []\n    for num in merged_list:\n        heapq.heappush(heap, num)\n    \n    # sort the heap in non-decreasing order\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    \n    # return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a min heap with the three lists\n    min_heap = []\n    heapq.heappush(min_heap, num1)\n    heapq.heappush(min_heap, num2)\n    heapq.heappush(min_heap, num3)\n\n    # Merge the lists and return the sorted result\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Create a list of all three input lists and sort it\n    merged_list = sorted([num1, num2, num3])\n    # Create a new empty list to hold the final sorted list\n    final_list = []\n    # Use heapq to add the elements of the merged list to the final list in ascending order\n    heapq.heapify(final_list)\n    for num in merged_list:\n        heapq.heappush(final_list, num)\n    return final_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # initialize the result list\n    result = []\n    # initialize the heap\n    heap = []\n    \n    # merge the first two lists into the heap\n    for i in range(len(num1)):\n        heapq.heappush(heap, num1[i])\n        heapq.heappush(heap, num2[i])\n    # merge the remaining elements of the second list into the heap\n    for i in range(len(num2), len(num1)+len(num2)):\n        heapq.heappush(heap, num2[i-len(num2)])\n    # merge the remaining elements of the third list into the heap\n    for i in range(len(num3)):\n        heapq.heappush(heap, num3[i])\n    \n    # merge the heap into the result list\n    while heap:\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for _ in range(n):\n        s = s[::-1]\n        count += sum(1 for c in s if int(c) % 2!= 0)\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n): \n    # create a binary string of length n \n    b = bin(int(s, 2))[2:].zfill(n) \n\n    # count the number of odd numbers in the binary string \n    count = 0\n    for i in b: \n        if int(i) % 2!= 0: \n            count += 1 \n\n    # return the count of odd numbers after rotating the binary string \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    This function takes a binary string s and an integer n as input and returns the number of odd numbers in the binary string after rotating the string n times.\n    '''\n    # initialize variables to keep track of number of odd values and number of even values\n    odd_count = 0\n    even_count = 0\n    \n    # loop through each character in the binary string\n    for i in range(len(s)):\n        \n        # check if the character is odd or even\n        if s[i] == '1':\n            odd_count += 1\n        else:\n            even_count += 1\n            \n    # print the number of odd values and the number of even values\n    print(\"Number of odd values:\", odd_count)\n    print(\"Number of even values:\", even_count)\n    \n    # rotate the binary string n times and initialize variables to keep track of number of odd values and number of even values\n    for i in range(n):\n        temp = ''\n        for j in range(len(s)):\n            if s[j] == '0':\n                temp += '0'\n            else:\n                temp += '1'\n        s = temp\n        \n    # loop through each character in the binary string after rotating n times\n    for i in range(len(s)):\n        \n        # check if the character is odd or even\n        if s[i] == '1':\n            odd_count += 1\n        else:\n            even_count += 1\n            \n    # print the number of odd values and the number of even values after rotating n times\n    print(\"Number of odd values after rotation:\", odd_count)\n    print(\"Number of even values after rotation:\", even_count)\n    \n    # return the number of odd values after rotating n times\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    temp = \"\"\n    i = 0\n    # Convert the given binary string to a list\n    lst = list(s)\n    # Loop through the list n number of times\n    for _ in range(n):\n        # Reverse the list\n        lst.reverse()\n        # Concatenate the reversed list to the temp variable\n        temp = \"\".join(lst)\n        # Convert the temp variable back to a binary string\n        temp = bin(int(temp, 2))[2:]\n        # Check if the last character of the temp variable is an odd number\n        if int(temp[-1]) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    # convert the binary string to a list\n    binary_list = list(s)\n    # loop through each character in the list\n    for i in range(len(binary_list)):\n        # if the character is an odd number, increment the count\n        if int(binary_list[i]) % 2!= 0:\n            count += 1\n    # rotate the list n times\n    binary_list = binary_list[n:] + binary_list[:n]\n    # count the number of odd numbers in the rotated list\n    for i in binary_list:\n        if int(i) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    This function takes a binary string as input and a number of rotations as input and returns the number of odd numbers that result from rotating the binary string the given number of times.\n    '''\n    \n    # Convert the binary string into a list of digits\n    binary_list = list(s)\n    \n    # Rotate the binary string the given number of times\n    for i in range(n):\n        temp = binary_list[0]\n        for j in range(len(binary_list)-1):\n            binary_list[j] = binary_list[j+1]\n        binary_list[-1] = temp\n        \n    # Count the number of odd numbers in the rotated binary string\n    count = 0\n    for i in binary_list:\n        if int(i) % 2!= 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert binary string to integer\n    binary_num = int(s, 2)\n\n    # Convert binary string to a list of integers\n    binary_list = list(binary_num)\n\n    # Rotate the binary string n times\n    for i in range(n):\n        # Reverse the binary list\n        binary_list = binary_list[::-1]\n\n        # Reverse the binary string\n        binary_num = ''.join(map(str, binary_list))\n\n    # Convert the rotated binary string back to an integer\n    rotated_binary = int(binary_num, 2)\n\n    # Find the number of odd numbers in the rotated binary string\n    odd_count = sum(1 for num in rotated_binary if num % 2!= 0)\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of odd values when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize a variable to store the number of odd values\n    count = 0\n    \n    # Loop through the binary string s n times\n    for i in range(n):\n        # Convert the binary string to a list of binary digits\n        digits = [int(digit) for digit in bin(int(s, 2))[2:]]\n        \n        # Reverse the list of binary digits\n        digits.reverse()\n        \n        # Convert the reversed list of binary digits back to a binary string\n        s = ''.join([str(digit) for digit in digits])\n        \n        # Count the number of odd values in the binary string\n        count += sum([1 for digit in s if digit % 2 == 1])\n    \n    # Return the total number of odd values found\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    # Convert binary string to a list of binary digits\n    binary_digits = list(map(int, list(s)))\n\n    # Count the number of odd digits after rotating the list n times\n    odd_count = 0\n    for _ in range(n):\n        # Rotate the list of binary digits n times\n        temp = binary_digits[n:] + binary_digits[:n]\n        # Count the number of odd digits in the rotated list\n        for digit in temp:\n            if digit % 2 == 1:\n                odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initialize variables\n    count = 0\n    last = 0\n    # loop through the string\n    for i in range(len(s)):\n        # check if current character is odd\n        if int(s[i]) % 2!= 0:\n            # check if the number of odd numbers is greater than the last odd number\n            if count > last:\n                count = 1\n                last = int(s[i])\n            # increment the count if the current character is odd\n            else:\n                count += 1\n    # rotate the string n number of times\n    rotated = \"\"\n    for i in range(n):\n        rotated += s[-1]\n        s = s[:-1]\n    # check if the last character is odd\n    if int(s[-1]) % 2!= 0:\n        # check if the count of odd numbers is greater than the last odd number\n        if count > last:\n            count = 1\n        # increment the count if the last character is odd\n        else:\n            count += 1\n    # add the last character to the rotated string\n    rotated += s[-1]\n    # return the count of odd numbers\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            intersection = set(nestedlist[i]) & set(nestedlist[j])\n            if intersection:\n                common_elements.append(intersection)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create an empty set to store the common elements\n    common = set()\n    # Loop through each nested list\n    for i in nestedlist:\n        # Loop through each element in the nested list\n        for j in i:\n            # Check if the element is already in the set\n            if j not in common:\n                # If not, add it to the set\n                common.add(j)\n    # Return the set of common elements\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    This function takes in a nested list and returns the common elements in the list.\n    \"\"\"\n    # Convert all the lists to sets to remove duplicates\n    set1 = set(set(nestedlist[0]))\n    set2 = set(set(nestedlist[1]))\n    # Find the common elements between the two sets\n    common_elements = set1.intersection(set2)\n    # Convert the common elements back to a list\n    common_list = list(common_elements)\n    # Return the common list\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # create an empty set to store the common elements\n    common_set = set()\n\n    # loop through each list in the nested list\n    for lst in nestedlist:\n        # loop through each element in the list\n        for elem in lst:\n            # add the element to the common set if it's not already there\n            if elem not in common_set:\n                common_set.add(elem)\n\n    # return the common elements as a list\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common and j not in i:\n                common.append(j)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Define an empty set to store the common elements\n    common = set()\n\n    # Loop over all nested lists\n    for lst in nestedlist:\n\n        # Loop over all elements in the list\n        for elem in lst:\n\n            # Check if the element is already in the set of common elements\n            if elem in common:\n\n                # If it is, add it to a new set to avoid duplicates\n                duplicate = set([elem])\n\n                # Remove all common elements from the duplicate set\n                common &= duplicate\n\n    # Return the common elements as a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # initialize an empty set to store the common elements\n    common_elements = set()\n\n    # loop through each element in the nested list\n    for element in nestedlist:\n        # if the element is a list, recursively call the function on that list\n        if type(element) == list:\n            common_elements.update(common_in_nested_lists(element))\n        # otherwise, add the element to the common elements set\n        else:\n            common_elements.add(element)\n\n    # return the common elements set\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create a set of unique elements from the first list\n    unique_elements = set(nestedlist[0])\n    # create a dictionary to store the count of each element in the second list\n    count_dict = {}\n    # iterate through the second list\n    for element in nestedlist[1:]:\n        # iterate through the unique elements in the first list and check if each element is present in the second list\n        for unique_element in unique_elements:\n            # if the element is found, increment the count in the dictionary\n            if unique_element in element:\n                count_dict[unique_element] = count_dict.get(unique_element, 0) + 1\n    # create a list of common elements\n    common_elements = [key for key, value in count_dict.items() if value == min(count_dict.values())]\n    # return the common elements\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for sublist in nestedlist:\n        if len(common) == 0:\n            common = sublist\n        else:\n            common = [x for x in common if x in sublist]\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        if str(num) == text:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    This function checks if a string represents an integer or not.\n\n    Args:\n        text: The string to check if it represents an integer or not.\n\n    Returns:\n        True if the string represents an integer, False otherwise.\n\n    Example:\n        check_integer(\"123\") -> True\n        check_integer(\"hello\") -> False\n        check_integer(\"123a\") -> False\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n\n    if not all(isinstance(x, dict) for x in list1):\n        raise ValueError(\"List must contain only dictionaries.\")\n\n    for i in range(len(list1)):\n        if list1[i]:\n            return False\n\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for i in range(len(list1)):\n            if not list1[i]:\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # converting the tuple to a string\n    s = str(nums)\n    # converting the string to a list of characters\n    chars = list(s)\n    # initializing an empty string to store the integers\n    result = ''\n    # iterating through the list of characters and appending the integers to the result string\n    for char in chars:\n        if char.isdigit():\n            result += char\n        else:\n            break\n    # converting the result string to an integer and returning it\n    return int(result)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize the result to 0\n    result = 0\n    # Iterate over the list from right to left\n    for num in nums_list:\n        # Multiply the result by 10 and add the current number\n        result = result * 10 + num\n    # Return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize variable to store the sum of the numbers\n    result = 0\n    # loop through each number in the tuple\n    for num in nums:\n        # check if the number is a positive integer\n        if isinstance(num, int) and num > 0:\n            # add the number to the result\n            result += num\n        else:\n            # if the number is not a positive integer, raise a ValueError\n            raise ValueError('All elements of the tuple must be positive integers.')\n    # return the result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result << 1\n        result = result | num\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for item in test_list:\n        for subitem in item:\n            if isinstance(subitem, str):\n                try:\n                    new_list.append(float(subitem))\n                except ValueError:\n                    pass\n            elif isinstance(subitem, (int, float)):\n                new_list.append(subitem)\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for row in test_list:\n        for item in row:\n            try:\n                float_list.append(float(item))\n            except ValueError:\n                pass # ignore non-convertible elements\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # loop over all elements in the list of lists\n    for element in test_list:\n        # check if the element can be converted to a float\n        try:\n            # attempt to convert the element to a float\n            float(element)\n        except ValueError:\n            # if conversion fails, remove the element from the list\n            test_list.remove(element)\n    # return the modified list of lists\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Define a helper function to convert an element in the list to a float\n    def convertible_to_float(element):\n        # Check if the element is a string\n        if type(element) == str:\n            # Try to convert the string to a float\n            try:\n                float_element = float(element)\n                return float_element\n            except ValueError:\n                # If the string cannot be converted to a float, return None\n                return None\n        # Check if the element is already a float\n        elif type(element) == float:\n            return element\n        # Check if the element is an integer\n        elif type(element) == int:\n            # If the element is an integer, convert it to a float\n            float_element = float(element)\n            return float_element\n        # Otherwise, return None\n        else:\n            return None\n    \n    # Loop through the list of lists\n    for sublist in test_list:\n        # Loop through the sublist\n        for element in sublist:\n            # Convert the element to a float and append it to a new list of floats\n            float_element = convertible_to_float(element)\n            if float_element is not None:\n                sublist.append(float_element)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # Split the string by spaces and return the list of strings\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # convert string to list of characters\n    char_list = list(string)\n    # create an empty list to store the substrings\n    substrings = []\n    # loop through each character in the string\n    for char in char_list:\n        # if the character is a space, add the current substring to the list and start a new one\n        if char =='':\n            substrings.append(''.join(char_list[:char_list.index(char)]))\n            char_list = char_list[char_list.index(char)+1:]\n    # add the last substring to the list\n    substrings.append(''.join(char_list))\n    # return the list of substrings\n    return substrings"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return a list of strings\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        count = 1\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                count += 1\n                if count == 2:\n                    return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n\n    if len(arr) < 2:\n        return None\n\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 1\n        elif arr[mid] == arr[mid - 1]:\n            right = mid\n        else:\n            return arr[mid]\n\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a variable to store the element that appears only once\n    only_once = None\n\n    # Iterate over the array and check if the current element appears only once\n    for i in range(len(arr)):\n        if arr[i]!= arr[i+1]:\n            only_once = arr[i]\n            break\n\n    return only_once"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n\n    Args:\n    arr: A sorted array of integers.\n\n    Returns:\n    An integer representing the element that appears only once in the array.\n\n    Example:\n    >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5])\n    4\n    \"\"\"\n    # Initialize a dictionary to store the counts of each element in the array\n    counts = {}\n\n    # Iterate through the array\n    for num in arr:\n        # If the element is already in the dictionary, increment its count\n        if num in counts:\n            counts[num] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            counts[num] = 1\n\n    # Iterate through the array again and find the element with a count of 1\n    for num in arr:\n        if counts[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n\n    # Check if all elements are equal\n    if arr[0] == arr[1]:\n        return arr[0]\n\n    # Initialize two pointers\n    left = 1\n    right = n-1\n\n    # Traverse the array from both ends\n    while left <= right:\n\n        # If the element at left index is equal to the element at right index\n        if arr[left] == arr[right]:\n\n            # Skip the element at left index\n            left += 1\n\n            # Skip the element at right index\n            right -= 1\n\n        # If the element at left index is greater than the element at right index\n        else:\n\n            # If there is a match, return the element at left index\n            if left == right-1:\n                return arr[left]\n\n            # If there is no match, return the element at right index\n            else:\n                return arr[right]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize count dictionary to keep track of count of each element in the array\n    count = {}\n    \n    # loop through the array and update count dictionary\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # loop through the count dictionary and find the element that appears only once\n    for num in count:\n        if count[num] == 1:\n            return num\n    \n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Traverse through the array and count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Traverse through the dictionary to find the element that appears only once\n    for num, count in freq.items():\n        if count == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return None\n    for i in range(len(arr)):\n        if i!= arr.index(arr[i]):\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # initialize variables for element to search and count of occurrences\n    elem = arr[0]\n    count = 1\n\n    # loop through the array to count the occurrences of each element\n    for i in range(1, len(arr)):\n        if arr[i] == elem:\n            count += 1\n        else:\n            # if the element has not been found or if the count is greater than 1,\n            # update the count and element to search\n            if count > 1:\n                elem = arr[i]\n                count = 1\n\n    # if the element has been found and its count is only 1, return it\n    if count == 1:\n        return elem\n    else:\n        # if the element has not been found or if the count is greater than 1,\n        # return None\n        return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # initialize variables\n    max_product = float('-inf')\n    current_product = 1\n\n    # iterate through list\n    for i in range(len(list1)):\n        # check if current product is negative\n        if current_product < 0:\n            # reset current product\n            current_product = 1\n\n        # update current product\n        current_product *= abs(list1[i])\n\n        # check if current product is greater than maximum product\n        if current_product > max_product:\n            # update maximum product\n            max_product = current_product\n\n    # return maximum product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    max_prod = -float('inf')\n    max_tuple = None\n    for tup in list1:\n        prod = max(abs(tup[0]), abs(tup[1]))\n        if prod > max_prod:\n            max_prod = prod\n            max_tuple = tup\n    return max_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            abs_product = abs(list1[i][0]*list1[j][0])\n            if abs_product > max_product:\n                max_product = abs_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    # Initialize variables to store the maximum absolute product and the current product\n    max_product = float('-inf')\n    current_product = 1\n    \n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Check if the product is negative or zero, in which case we reset the product\n        if current_product < 0 or current_product == 0:\n            current_product = abs(list1[i])\n        \n        # Otherwise, we update the current product\n        else:\n            current_product = current_product * abs(list1[i])\n        \n        # Update the maximum absolute product if necessary\n        if abs(current_product) > max_product:\n            max_product = abs(current_product)\n    \n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize maximum absolute product and sum of products to zero\n    max_product = 0\n    sum_products = 0\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute product of the numbers in the pair\n            abs_product = abs(list1[i][0] * list1[j][1])\n\n            # Update the maximum absolute product and sum of products\n            if abs_product > max_product:\n                max_product = abs_product\n            sum_products += abs_product\n\n    # Return the maximum absolute product and the sum of products\n    return max_product, sum_products"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(lst):\n    '''\n    This function takes a list of tuples as input and returns the maximum absolute product between numbers in pairs of tuples within the list.\n    '''\n    max_abs_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_product = max(abs(lst[i][0]*lst[j][1]), abs(lst[i][1]*lst[j][0]))\n            if max_product > max_abs_product:\n                max_abs_product = max_product\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_of_pairs(list1):\n    '''\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    def helper(i, j, max_product, pairs):\n        if i < len(list1):\n            if j < len(list1):\n                if i!= j:\n                    diff = abs(list1[i][0] - list1[j][0])\n                    if diff > max_product:\n                        max_product = diff\n                        pairs.append((list1[i], list1[j]))\n                    helper(i + 1, j + 1, max_product, pairs)\n                else:\n                    helper(i + 1, j + 1, max_product, pairs)\n            else:\n                helper(i + 1, j, max_product, pairs)\n        else:\n            return max_product, pairs\n\n    max_product = 0\n    pairs = []\n    helper(0, 0, max_product, pairs)\n    return max_product, pairs"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = abs(list1[i][0] * list1[j][1])\n            if pair_product > max_product:\n                max_product = pair_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n                \n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit+1):\n        if i in amicable_numbers:\n            continue\n        for j in range(i, limit+1):\n            if i == j:\n                continue\n            if i + j == 28:\n                print(i, j)\n                amicable_numbers.append(i)\n                break\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables to store the sum of amicable numbers and their corresponding factors\n    sum_of_amicable_numbers = 0\n    factors = {}\n\n    # Loop through all numbers from 1 to the specified limit\n    for i in range(1, limit+1):\n        # Check if the number is amicable to any of its factors\n        if i in factors:\n            # If the number is amicable, add its value to the sum of amicable numbers\n            sum_of_amicable_numbers += i\n        else:\n            # If the number is not amicable, calculate its factors and store them in a dictionary\n            factors[i] = find_factors(i)\n\n    # Return the sum of amicable numbers\n    return sum_of_amicable_numbers\n\n\ndef find_factors(num):\n    '''\n    Calculate the factors of a number.\n    '''\n    factors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            factors.append(i)\n    return factors"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Create a list of all numbers from 1 to `limit`\n    numbers = list(range(1, limit+1))\n    \n    # Initialize a set to keep track of amicable numbers\n    amicable = set()\n    \n    # Iterate over all pairs of numbers in the list\n    for i, num in enumerate(numbers):\n        # Check if the current number is amicable\n        if sum(map(lambda x: (x, num), numbers[i:])) in amicable:\n            # If it is, add it to the set of amicable numbers\n            amicable.add(num)\n    \n    # Return the sum of all amicable numbers\n    return sum(amicable)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n\n    for num in range(2, limit + 1):\n        if num == sum(divisors(num)):\n            amicable_numbers.append(num)\n\n    return sum(amicable_numbers)\n\ndef divisors(num):\n    divs = []\n    for i in range(1, num):\n        if num % i == 0:\n            divs.append(i)\n    return divs"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is amicable or not.\n    '''\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0 and i!= num // i:\n            return True\n    return False\n\nprint(sum_amicable_numbers(10000))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    a_list = []\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            a_list.append(i)\n    return sum(a_list)\n\ndef is_amicable(n):\n    '''\n    Determine if a number is amicable.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit + 1):\n        if i < 10:\n            is_amicable = (is_prime(i) and is_prime(sum(i, i)))\n            if is_amicable:\n                sum += i\n        elif i < 100:\n            is_amicable = (is_prime(i) and is_prime(sum(i, i)))\n            if is_amicable:\n                sum += i\n        else:\n            is_amicable = (is_prime(i) and is_prime(sum(i, i)))\n            if is_amicable:\n                sum += i\n\n    return sum\n\n\ndef is_prime(num):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(2, limit+1):\n        if i in [2, 3]:\n            continue\n        a = i\n        b = i\n        while a!= b:\n            a += i\n            b += i\n        if a == b and i!= a and i!= b:\n            amicable_sum += i\n    return amicable_sum\n\nprint(sum_amicable_numbers(10000))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # loop through all numbers from 1 to limit\n    for num in range(1, limit+1):\n        # check if the number is amicable\n        if num == amicable_number(num):\n            # add the number to the sum\n            sum += num\n    # return the sum of amicable numbers\n    return sum\n\n\ndef amicable_number(num):\n    '''\n    Write a function to find the amicable number of a given number.\n    '''\n    # loop through all numbers from 1 to the square root of the given number\n    for i in range(1, int(num**0.5)+1):\n        # check if the given number is divisible by i or i+1\n        if num % i == 0 or num % (i+1) == 0:\n            # if it is, return the other number in the pair\n            return num if i*i+num*num == num**2 else num+i\n    # if no pair is found, return None\n    return None"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    This function will sum all the amicable numbers from 1 to a specified number.\n    \"\"\"\n    # create a dictionary to store the sum of each pair of numbers\n    amicable_dict = {}\n    # iterate over all numbers from 1 to limit\n    for i in range(1, limit+1):\n        # check if the number is divisible by any of the numbers between 1 and i/2\n        for j in range(1, i//2+1):\n            # if the number is divisible by j, check if i-j is also divisible by j\n            if i % j == 0:\n                # if i-j is also divisible by j, add both numbers to the amicable_dict\n                if i-j in amicable_dict:\n                    amicable_dict[i-j] += i\n                else:\n                    amicable_dict[i-j] = i\n    # return the sum of all the numbers in the amicable_dict\n    return sum(amicable_dict.values())"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_rad = cmath.phase(a+b*1j)\n    angle_deg = round(angle_rad/cmath.pi*180,2)\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    angle = cmath.phase(a+b)\n    return round(angle,3)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns their angle in radians.\n    '''\n    angle = cmath.phase(a + b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a + bj * cmath.phase(a * b)\n    return cmath.angle(c)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Convert the numbers to complex number\n    c = complex(a,b)\n\n    # Calculate the angle using the arg() method of complex number\n    angle = cmath.phase(c)\n\n    # Convert the angle to degrees and return the result\n    return angle * 180 / cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the angle using cmath.phase()\n    angle = cmath.phase(a + b * 1j)\n    \n    # Convert the angle from radians to degrees\n    angle = angle * 180 / cmath.pi\n    \n    # Return the angle as an integer\n    return int(angle)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j) * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the magnitude and phase of the complex number\n    magnitude = cmath.sqrt(a**2 + b**2)\n    phase = cmath.phase(complex(a,b))\n    \n    # convert the phase angle from radians to degrees\n    angle = phase * 180 / cmath.pi\n    \n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    current_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            current_diff += 1\n        else:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Initialize variables\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    # Iterate through each character in the string\n    for char in string:\n        if char == '0':\n            count_0 += 1\n            count_1 -= 1\n        else:\n            count_0 -= 1\n            count_1 += 1\n\n        # Update the maximum difference\n        diff = count_0 - count_1\n        max_diff = max(max_diff, diff)\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    diff = 0\n\n    for i in range(n):\n        if string[i] == '0':\n            diff += 1\n        else:\n            if diff > max_diff:\n                max_diff = diff\n            diff = 0\n\n    if diff > max_diff:\n        max_diff = diff\n\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    dp = [0] * n\n    for i in range(n-1):\n        dp[i] = max(dp[i], dp[i+1])\n        if string[i] == '0':\n            dp[i] += 1\n    return max(dp)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string): \n    n = len(string) \n    max_diff = 0 \n  \n    for i in range(n): \n        for j in range(i+1, n): \n            if string[i] == '0' and string[j] == '1': \n                diff = j-i+1 \n                if diff > max_diff: \n                    max_diff = diff \n    return max_diff "
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string): \n    n = len(string)\n    max_diff = 0\n    \n    for i in range(n):\n        diff = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                diff += 1\n            else:\n                diff -= 1\n            max_diff = max(max_diff, diff)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n\n    for char in string:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n\n        if zero_count > one_count:\n            diff = zero_count - one_count\n        else:\n            diff = one_count - zero_count\n\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zero_count = 0\n    one_count = 0\n    max_difference = 0\n    \n    for char in string:\n        if char == '0':\n            zero_count += 1\n            one_count = 0\n        else:\n            one_count += 1\n            zero_count = 0\n        \n        difference = max(zero_count, one_count)\n        max_difference = max(max_difference, difference)\n    \n    return max_difference"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    # initialize variables\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n\n    # iterate through each character in the string\n    for char in string:\n        # if the character is a 0, increment the zero count\n        if char == '0':\n            zero_count += 1\n        # if the character is a 1, increment the one count\n        else:\n            one_count += 1\n\n        # calculate the maximum difference between the two counts\n        diff = abs(zero_count - one_count)\n        max_diff = max(diff, max_diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == 0 or count_1 == 0:\n            continue\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    This function takes two numbers as input and returns their sum of their common divisors.\n    '''\n\n    # Finding common divisors of two given numbers\n    common_divisors = find_common_divisors(a, b)\n\n    # Calculating the sum of common divisors\n    sum_of_common = sum(common_divisors)\n\n    return sum_of_common\n\n\ndef find_common_divisors(a, b):\n    '''\n    This function takes two numbers as input and returns their common divisors.\n    '''\n\n    # Finding the common factors of two given numbers\n    factors = common_factors(a, b)\n\n    # Finding the common divisors of two given numbers\n    common_divisors = []\n    for i in factors:\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    return common_divisors\n\n\ndef common_factors(a, b):\n    '''\n    This function takes two numbers as input and returns their common factors.\n    '''\n\n    # Finding factors of two given numbers\n    factors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            factors.append(i)\n\n    return factors\n\n\ndef sum(lst):\n    '''\n    This function takes a list as input and returns the sum of its elements.\n    '''\n    return sum(lst)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # Initialize a variable to store the sum of common divisors\n    sum_cd = 0\n\n    # Iterate through all the numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # Check if i is a common divisor of both numbers\n        if (a % i == 0) and (b % i == 0):\n            # If it is, add it to the sum_cd variable\n            sum_cd += i\n\n    # Return the sum_cd variable\n    return sum_cd\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_divisors(a, b):\n    '''\n    This function finds the common divisors of two given numbers using a brute force approach.\n    '''\n\n    divisors = []\n\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    return divisors\n\ndef sum(a, b):\n    '''\n    This function finds the sum of common divisors of two given numbers.\n    '''\n\n    divisors_a = common_divisors(a, b)\n    divisors_b = common_divisors(b, a)\n\n    return sum(divisors_a + divisors_b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    i = 1\n    sum_divisors = 0\n    while i <= a:\n        if a % i == 0 and b % i == 0:\n            sum_divisors += i\n        i += 1\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    This function takes two integers a and b as input and returns the sum of their common divisors.\n    '''\n    # Helper function to check if a number is divisible by b\n    def is_divisible(num, divisor):\n        return num % divisor == 0\n\n    # Helper function to find the common divisor of two numbers using Euclidean algorithm\n    def gcd(a, b):\n        if a == 0:\n            return b\n        else:\n            return gcd(b % a, a)\n\n    # Calculate the sum of common divisors of a and b\n    sum_of_divisors = sum(is_divisible(a, i) for i in range(1, min(a, b) + 1))\n    return sum_of_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = [x for x in range(1,a) if a % x == 0 and b % x == 0]\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1,min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function calculates the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Create a set of common divisors of a and b\n    divisors = set(divisor for divisor in range(1, min(a, b) + 1) if a % divisor == 0 and b % divisor == 0)\n    \n    # Calculate the sum of common divisors\n    sum_divisors = sum(divisors)\n    \n    return sum_divisors"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        temp = y\n        y = x % y\n        x = temp\n        result = result * 10 + x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = x * y\n    print(\"The product of\", x, \"and\", y, \"is\", product)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    result = 0\n    while y!= 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n        result = result + x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    \n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    \n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # Splitting the string into words\n    long_words = [] # Creating an empty list to store the long words\n    for word in words:\n        if len(word) > n: # Checking if the length of the word is greater than n\n            long_words.append(word) # Appending the long word to the list\n    return long_words # Returning the list of long words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    '''\n    Find words longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3:\n        return False\n    \n    # Check if all rows have the same length\n    for row in my_matrix:\n        if len(row)!= 3:\n            return False\n    \n    # Check if the matrix is a magic square\n    for i in range(3):\n        row1 = [my_matrix[0][i], my_matrix[1][i], my_matrix[2][i]]\n        row2 = [my_matrix[i][0], my_matrix[i][1], my_matrix[i][2]]\n        row3 = [my_matrix[0][0], my_matrix[1][1], my_matrix[2][2]]\n        row4 = [my_matrix[2][0], my_matrix[1][1], my_matrix[0][2]]\n        row5 = [my_matrix[0][0], my_matrix[1][1], my_matrix[2][2]]\n        row6 = [my_matrix[2][0], my_matrix[1][1], my_matrix[0][2]]\n        if row1!= row2!= row3!= row4!= row5!= row6:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if all rows have the same length\n    for row in my_matrix:\n        if len(row)!= len(my_matrix[0]):\n            return False\n    \n    # Check if all columns have the same length\n    for col in range(len(my_matrix[0])):\n        row_list = []\n        for row in my_matrix:\n            row_list.append(row[col])\n        if len(set(row_list))!= 1:\n            return False\n    \n    # Check if the matrix is a magic square\n    square_sum = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            square_sum += my_matrix[i][j]\n        square_sum -= my_matrix[i][i]\n    if square_sum!= 0:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    row_sums = [0] * n\n    col_sums = [0] * n\n    for i in range(n):\n        for j in range(n):\n            row_sums[i] += my_matrix[i][j]\n            col_sums[j] += my_matrix[i][j]\n    if row_sums == col_sums:\n        for i in range(n):\n            for j in range(n):\n                if my_matrix[i][j]!= row_sums[i] or my_matrix[i][j]!= col_sums[j]:\n                    return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Check if the matrix is square\n    if rows!= cols:\n        return False\n\n    # Check if the sum of the diagonal elements is equal to the sum of the other elements\n    diagonal_sum = 0\n    other_sum = 0\n    for i in range(rows):\n        diagonal_sum += my_matrix[i][i]\n        other_sum += my_matrix[i][cols-i-1]\n    if diagonal_sum!= other_sum:\n        return False\n\n    # Check if all the elements are distinct\n    for i in range(rows):\n        for j in range(cols):\n            if i!= j and my_matrix[i][j] == my_matrix[i][cols-j-1]:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    sum_rows = sum_columns = 0\n    \n    # Check rows\n    for row in my_matrix:\n        for num in row:\n            sum_rows += num\n            \n    # Check columns\n    for i in range(n):\n        for j in range(n):\n            sum_columns += my_matrix[i][j]\n            \n    # Check the main diagonal\n    for i in range(n):\n        sum_main_diag += my_matrix[i][i]\n    \n    # Check the anti-diagonal\n    for i in range(n):\n        sum_anti_diag += my_matrix[i][n-i-1]\n        \n    # Check for a magic square\n    if sum_rows == 0 or sum_columns == 0 or sum_main_diag == 0 or sum_anti_diag == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # check if the matrix is a square\n    if n!= len(my_matrix[0]):\n        return False\n    # check if all the rows are equal\n    for row in my_matrix:\n        if row!= sorted(row):\n            return False\n    # check if all the columns are equal\n    for i in range(n):\n        col = [row[i] for row in my_matrix]\n        if col!= sorted(col):\n            return False\n    # check if the diagonals are equal\n    diag1 = [my_matrix[i][i] for i in range(n)]\n    diag2 = [my_matrix[i][n-i-1] for i in range(n)]\n    if diag1!= diag2:\n        return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Calculate the sum of each row, column, and diagonal\n    row_sum = [sum(row) for row in my_matrix]\n    col_sum = [sum(my_matrix[i][j] for j in range(len(my_matrix))) for i in range(len(my_matrix))]\n    diag_sum = [sum(my_matrix[i][i] for i in range(len(my_matrix))), sum(my_matrix[j][j] for j in range(len(my_matrix)))]\n\n    # Check if the sums match the size of the matrix\n    if row_sum == col_sum == diag_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Check if the matrix is a square\n    if n!= len(my_matrix[0]):\n        return False\n    # Check if each element in the matrix is unique\n    for i in range(n):\n        for j in range(n):\n            if i!= j and my_matrix[i][j] == my_matrix[i][j-1] == my_matrix[i][j+1] == my_matrix[i-1][j] == my_matrix[i+1][j]:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if each row, column, and diagonal contains all distinct values\n    for i in range(len(my_matrix)):\n        row = set(my_matrix[i])\n        col = set(zip(*my_matrix)[i])\n        diag1 = set(zip(*my_matrix)[i])\n        diag2 = set(my_matrix[::-1][i][::-1])\n        if row!= col!= diag1!= diag2:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Define a list to store the sum of each row\n    row_sums = [0] * len(my_matrix[0])\n\n    # Define a list to store the sum of each column\n    col_sums = [0] * len(my_matrix)\n\n    # Loop through each element in the matrix\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            # Add the value to the appropriate row and column sum\n            row_sums[j] += my_matrix[i][j]\n            col_sums[i] += my_matrix[j][i]\n\n    # Check if the sum of each row and column is equal to the sum of the diagonal elements\n    for i in range(len(my_matrix)):\n        if row_sums[i]!= my_matrix[i][i]:\n            return False\n        if col_sums[i]!= my_matrix[i][i]:\n            return False\n\n    # If we make it through the entire loop without returning False, then the matrix is a magic square\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        \n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    \n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = 0\n    max_item = None\n    \n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Given a list of integers, returns the item with the highest frequency.\n    \"\"\"\n    freq = defaultdict(int)\n    max_freq = 0\n    max_num = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        \n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n\n    for num in nums:\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reverse_string = []\n    for char in string:\n        if char not in vowels:\n            reverse_string.append(char)\n    return ''.join(reverse_string)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = []\n    for char in str1:\n        if char in vowels:\n            if char == 'a':\n                reversed_str.append('u')\n            elif char == 'e':\n                reversed_str.append('o')\n            elif char == 'i':\n                reversed_str.append('i')\n            elif char == 'o':\n                reversed_str.append('a')\n            elif char == 'u':\n                reversed_str.append('e')\n        else:\n            reversed_str.append(char)\n    return ''.join(reversed_str)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"AEIOUaeiou\"\n    reversed_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for char in str1:\n        if char in vowels:\n            new_str += char\n    return new_str[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str2 = str1[i] + str2\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for char in str1:\n        if char in vowels:\n            new_str = char + new_str\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str_vowels = []\n    for char in str1:\n        if char.lower() in vowels:\n            str_vowels.append(char)\n    str_vowels.reverse()\n    return ''.join(str_vowels)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    reversed_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            vowel_count += 1\n        reversed_str += str1[i]\n    if vowel_count == 0:\n        return \"The string contains no vowels to reverse.\"\n    else:\n        return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char.lower() in vowels:\n            if char.lower()!= \"y\":\n                new_str = char + new_str\n        else:\n            new_str = char + new_str\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_set = set(vowels)\n    reversed_str = ''\n\n    for char in str1:\n        if char.lower() in vowels_set:\n            reversed_str = char + reversed_str\n        else:\n            reversed_str += char\n\n    return reversed_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + ', '.join(str(x) for x in tup) + ')'"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    string = str(tup1)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = 0\n    for num in nums:\n        if num < 0:\n            negatives += num\n    return negatives"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativesum = 0\n    for num in nums:\n        if num < 0:\n            negativesum += num\n    return negativesum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define the base and step for the hexagonal sequence\n    base = 1\n    step = 6\n\n    # Calculate the nth hexagonal number using the base and step\n    nth_hex = (n - 1) * base + step * (n - 1)\n\n    # Return the nth hexagonal number\n    return nth_hex"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (n * (2 * n - 1)) ** 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define a function to find the nth prime number\n    def nth_prime(n):\n        '''\n        Define a helper function to find the nth prime number.\n        '''\n        primes = [2]\n        is_prime = [True] * (n+1)\n        is_prime[0] = is_prime[1] = False\n\n        for i in range(2, int(n**0.5)+1):\n            if is_prime[i]:\n                for j in range(i*i, n+1, i):\n                    is_prime[j] = False\n\n        for i in range(n, 1, -1):\n            if is_prime[i]:\n                primes.append(i)\n                if len(primes) == n:\n                    break\n\n        return primes[-1]\n\n    # Calculate the nth hexagonal number using the nth prime number\n    n_prime = nth_prime(n)\n    hexagonal_num = (n_prime**2)/3\n    return hexagonal_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n + 1) * (2 * n + 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (n * (2 * n - 1))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = n * (2 * n - 1)\n    return num\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize variables for calculating the nth hexagonal number\n    a = 1 # Initialize a to 1 (first hexagon)\n    b = 2 # Initialize b to 2 (second hexagon)\n    hex_n = 1 # Initialize hex_n to 1 (first hexagonal number)\n\n    # Calculate the nth hexagonal number\n    for i in range(2, n+1):\n        a = 6*a + b # Calculate a using the formula a = 6*a + b\n        b = 3*b + a # Calculate b using the formula b = 3*b + a\n        hex_n = hex_n + b # Add the value of b to hex_n\n\n    return hex_n # Return the value of hex_n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 6\n    for i in range(n):\n        c = a + b\n        print(c, end=' ')\n        a = b\n        b = c\n    return"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n - 1) * (n - 1) + 1"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    non_zeros = array('i', [0] * len(nums))\n    \n    for num in nums:\n        if num == 0:\n            zeros[0] += 1\n        else:\n            non_zeros[0] += 1\n    \n    total_count = zeros[0] + non_zeros[0]\n    non_zero_count = non_zeros[0]\n    zero_count = zeros[0]\n    \n    if total_count == 0:\n        return 0\n    else:\n        return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * (max(nums) + 1))\n    for num in nums:\n        count[num] += 1\n    for i in range(len(count)):\n        if count[i] == 0:\n            count[i] = 1\n    non_zero_count = sum(count)\n    zero_count = len(nums) - non_zero_count\n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # initialize count and zero_count to zero\n    count = 0\n    zero_count = 0\n\n    # loop through the array and update count and zero_count\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            count += 1\n\n    # calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / count if count!= 0 else 0\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0])\n    for num in nums:\n        if num == 0:\n            zero_count.append(1)\n        else:\n            zero_count.append(0)\n    return float(sum(zero_count)) / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n    \n    zero_count = len(nums) - non_zero_count\n    \n    if zero_count == 0:\n        return 1.0\n    else:\n        return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = sum(1 for num in nums if num!= 0)\n    zero_count = sum(1 for num in nums if num == 0)\n    return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n    Args:\n        nums (array): An array of integers.\n\n    Returns:\n        float: The ratio of zeroes to non-zeroes in the array.\n\n    \"\"\"\n    count = array('i', [0 for i in range(len(nums))]) # initialize a count array of size equal to the length of the input array\n    for num in nums:\n        count[num] += 1 # increment the count of 1s in the count array\n    count_sum = sum(count) # calculate the sum of the count array\n\n    # calculate the ratio of zeroes to non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    for count_val in count:\n        if count_val == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    if count_sum == 0: # in case all elements are zero\n        zero_count = len(nums) # set the count of zeroes to the length of the input array\n        non_zero_count = 0\n\n    zero_ratio = zero_count / non_zero_count # calculate the ratio of zeroes to non-zeroes\n\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0]) # create an array of zeros of integer type\n    zeros.fromlist(nums) # convert the input array to an array of integers\n    nonzeros = sum(nums) - sum(zeros) # calculate the number of non-zeroes\n    zero_ratio = zeros[0] / nonzeros # calculate the ratio of zeroes to non-zeroes\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    \n    ratio = zero_count / non_zero_count\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    ratio = non_zeros/zeros if non_zeros!= 0 else 0\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check for base case\n    if n == 0:\n        return True\n\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # Check for sum of powers of 2\n    power = 1\n    while power <= n // 2:\n        if n % 2 == 0:\n            return False\n        n //= 2\n        power *= 2\n\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # function to check if the number can be represented as sum of powers of 2\n    def is_power_of_two(num):\n        if num == 0:\n            return False\n        elif num % 2 == 0:\n            return is_power_of_two(num//2)\n        else:\n            return False\n\n    # function to check if the number is a sum of powers of 2\n    def is_sum_of_powers_of_two(num, power_of_two):\n        if power_of_two == 0:\n            return num == 0\n        elif num >= power_of_two:\n            return is_sum_of_powers_of_two(num-power_of_two, power_of_two//2)\n        else:\n            return False\n\n    # main function to check if the number can be represented as sum of powers of 2\n    def check(num):\n        if is_power_of_two(num):\n            return True\n        else:\n            for i in range(1, num+1):\n                if is_sum_of_powers_of_two(num, i):\n                    return True\n            return False\n\n    # main function call\n    if check(n):\n        print(str(n) + \" can be represented as sum of non-zero powers of 2.\")\n    else:\n        print(str(n) + \" cannot be represented as sum of non-zero powers of 2.\")"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Initialize a variable to store the sum of powers of 2 \n    total = 0 \n\n    # Iterate from 2 to n \n    for i in range(2, n+1): \n\n        # If the remainder of n divided by i is 0, then n is a sum of powers of 2 \n        if n % i == 0: \n\n            # Check if i is already present in the sum \n            if i in total: \n                return True\n\n            # Add i to the sum of powers of 2 \n            total += i \n\n            # Check if the total can be represented as sum of powers of 2 by repeating the process \n            return is_Sum_Of_Powers_Of_Two(total) \n\n    # If n is not a sum of powers of 2, then return False \n    return False "
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        count += 1\n        n &= (n - 1)\n    return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # To check if the given number can be represented as sum of non-zero powers of 2 or not\n    # First, check if the given number is equal to 0 or 1\n    if n == 0 or n == 1:\n        return True\n    # Create a dictionary to store the powers of 2 from 1 to n\n    powers_of_2 = {i: 0 for i in range(1, n+1)}\n    # Iterate through the list of powers of 2 from 1 to n\n    for i in range(1, n+1):\n        # Check if the current number can be represented as sum of non-zero powers of 2\n        # Check if the number is equal to the sum of powers of 2\n        if i == powers_of_2[i]:\n            # If the number can be represented as sum of non-zero powers of 2, return True\n            return True\n    # If the number can not be represented as sum of non-zero powers of 2, return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if the number is a power of 2\n    if (n & (n - 1)) == 0:\n        # if it is a power of 2, check if the sum of powers of 2 is a power of 2\n        if (sum_of_powers_of_two & (sum_of_powers_of_two - 1)) == 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a set to store the powers of 2\n    power_set = set()\n    # Iterate over the binary representation of the given number\n    for i in range(len(bin(n)[2:])):\n        # Check if the current bit is a 1\n        if bin(n)[2:].count('1') == i+1:\n            # If yes, add the current power of 2 to the power_set\n            power_set.add(2**i)\n    # Check if the power_set contains the number itself\n    if n in power_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n    \n    # Count the number of '1' in the binary string\n    count = binary_str.count('1')\n    \n    # Check if count is a power of 2\n    if 2**count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it can be represented as the sum of non-zero powers of 2, and False otherwise.\n    \"\"\"\n    # Initialize the sum of powers of 2 to 0\n    total_powers_of_2 = 0\n\n    # Iterate through all the bits in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is '1', add the power of 2 to the sum of powers of 2\n        if bit == '1':\n            total_powers_of_2 += 1\n\n        # If the sum of powers of 2 is greater than or equal to the number of bits in the binary representation of n, return True\n        if total_powers_of_2 >= len(bin(n)[2:]):\n            return True\n\n    # If the loop completes without returning True, it means that the number is not representable as the sum of non-zero powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n\n    # check if the number is a power of 2\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    else:\n        # loop through all powers of 2 and check if the number is a sum of powers of 2\n        for i in range(1, 32):\n            if n == (1 << i):\n                if is_Sum_Of_Powers_Of_Two((n >> i)):\n                    return True\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # using math library to calculate circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r # pi * radius\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    This function takes a radius as input and returns the circumference of the circle.\n    '''\n    return 2 * math.pi * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for item in test_list:\n        if type(item) == list:\n            flat_list += extract_singly(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        flattened_list += item\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if type(item) == list:\n            result.extend(extract_singly(item))\n        else:\n            result.append(item)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if type(item) == list:\n            flattened_list += extract_singly(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    unique_numbers = list(set(flattened_list))\n    return unique_numbers"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [num for sublist in test_list for num in sublist]\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # Initialize the swaps variable\n    swaps = 0\n    \n    # Loop until the list is sorted\n    while True:\n        # Find the largest element in the list\n        max_idx = 0\n        for i in range(1, len(nums)):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        \n        # If no more swaps are needed, the list is already sorted\n        if max_idx == 0:\n            break\n        \n        # Swap the elements at the largest index and the end of the list\n        nums[0], nums[max_idx] = nums[max_idx], nums[0]\n        \n        # Increment the number of swaps made\n        swaps += 1\n    \n    # Return the number of swaps made\n    return swaps"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    This function implements the pancake sort algorithm for sorting a list of numbers.\n    It works by first sorting the list using the built-in sort function, and then\n    swapping the smallest element to the end of the list, then the next smallest\n    element to the end, and so on, until the list is sorted in descending order.\n\n    Args:\n    nums: a list of numbers to be sorted.\n\n    Returns:\n    The sorted list.\n    '''\n\n    # Sort the list using the built-in sort function\n    nums.sort()\n\n    # Swap the smallest element to the end of the list\n    for i in range(len(nums)):\n        if nums[i]!= nums[-(i+1)]:\n            nums[i], nums[-(i+1)] = nums[-(i+1)], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # swap the maximum element with the first element of the unsorted part of the array\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # print the sorted array\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the pancake sorting algorithm.\n    \"\"\"\n    n = len(nums)\n    # bubble sort\n    for i in range(n):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    # print(nums)\n    # print(\"Sorted array is:\", nums)\n    # selection sort\n    for i in range(n-1):\n        # find the maximum element in the unsorted array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # swap the maximum element with the last element of the unsorted array\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    # print(\"Sorted array is:\", nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Sort the array in decreasing order of size\n    for i in range(n):\n        max_size = i\n        # Find the maximum size element\n        for j in range(i+1, n):\n            if len(nums[j]) > len(nums[max_size]):\n                max_size = j\n        # Swap the maximum element with the first element\n        nums[i], nums[max_size] = nums[max_size], nums[i]\n        # Reverse the subarray starting from the second element\n        for k in range(i+1, max_size+1):\n            nums[k], nums[n-k] = nums[n-k], nums[k]\n    # Return the sorted array\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # start with the largest element\n    for i in range(len(nums)-1, 0, -1):\n        # find the index of the largest element in the range [i, len(nums)-1]\n        max_idx = i\n        for j in range(i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # swap the largest element with the element at index i\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    # the final sorted list is in nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the index of the largest element\n        largest_index = i\n        for j in range(i-1, 0, -1):\n            if nums[j] > nums[largest_index]:\n                largest_index = j\n        # Swap the largest element with the first element\n        nums[i], nums[largest_index] = nums[largest_index], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Create a list of lists representing the pancakes\n    pancakes = [[] for i in range(n)]\n    # Iterate over the input list and fill in the pancakes\n    for i in range(n):\n        pancakes[n - i - 1].append(nums[i])\n    # Iterate over the pancakes and recursively sort each sublist using\n    # the pancake sort algorithm\n    for pancake in pancakes:\n        if len(pancake) > 1:\n            pancake_sort(pancake)\n    # Iterate over the pancakes and merge them back into the input list\n    # using the merge sort algorithm\n    for i in range(n):\n        nums[i] = pancakes[0].pop()\n        if pancakes:\n            pancake_sort(pancakes[0])\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Choose a random index i between 0 and i\n        j = random.randint(0, i)\n        # Swap the elements at indices i and j\n        nums[i], nums[j] = nums[j], nums[i]\n        # Print the list after each iteration\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Get the length of the list\n    n = len(nums)\n\n    # Loop over the first n-1 elements\n    for i in range(n-1):\n\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the maximum element with the i-th element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n        # Print the sorted list\n        print(nums)"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    # initialize count variable to 0\n    count = 0\n    \n    # loop through each item in list1\n    for item1 in list1:\n        # loop through each item in list2\n        for item2 in list2:\n            # loop through each item in list3\n            for item3 in list3:\n                # check if current item is same as both items in list1 and list2\n                if item1 == item2 and item2 == item3:\n                    # increment count variable\n                    count += 1\n    \n    # return count\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input: \n        if isinstance(element, list): \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) is list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n\n    if len(arr) < 2:\n        return 0\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr) - 1):\n        curr_diff = arr[i+1] - arr[i]\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n\n    max_diff = arr[1] - arr[0]\n\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if abs(diff) > max_diff:\n            max_diff = abs(diff)\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the maximum difference to be 0\n    max_diff = 0\n\n    # Iterate through the array and calculate the absolute difference between each pair of elements\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    This function returns integers x and y that satisfy ax + by = n as a tuple.\n    \"\"\"\n    # To find a solution, we need to find x and y such that ax + by = n\n    # Let's find all the roots of the quadratic equation ax^2 + bx + c = 0\n    d = b*b - 4*a*n\n    if d > 0:\n        x1 = (-b + d**0.5) / (2*a)\n        x2 = (-b - d**0.5) / (2*a)\n        y1 = a*x1 + b\n        y2 = a*x2 + b\n        return (x1, y1), (x2, y2)\n    elif d == 0:\n        x = -b / (2*a)\n        y = a*x + b\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None #if a is 0, there cannot be a solution\n\n    #find the solution using the quadratic formula\n    d = b**2 - 4*a*n\n    if d < 0: #if d is negative, there cannot be a solution\n        return None\n    x1 = (-b + d**0.5)/(2*a)\n    x2 = (-b - d**0.5)/(2*a)\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # create a list of tuples of possible x and y values\n    x_values = [(x, y) for y in range(b-a+1) for x in range(b-a+1)]\n    \n    # check if there is a solution for each x and y value in the list\n    solutions = [True if a*x + b*y == n else False for x, y in x_values]\n    \n    # if there is a solution for each x and y value, return the tuple\n    if all(solutions):\n        return tuple(x for x, y in x_values if solutions[x_values.index((x, y))])\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the solution exists\n    x1 = -b / (2 * a)\n    y1 = -a / (2 * b)\n    x2 = -b / (2 * a)\n    y2 = -a / (2 * b)\n\n    # Check if the solutions satisfy the condition\n    if x1 * x2 <= n <= x1 * x2 + x2:\n        return (x1, y1)\n    elif x2 * x1 <= n <= x2 * x1 + x1:\n        return (x2, y2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    # Check if a and b are both positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and a > 0 and b > 0):\n        return None\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return None\n\n    # Check if the equation n = ax + by is solvable by computing the discriminant\n    d = b**2 - 4 * a * n\n    if d < 0:\n        return None\n    elif d == 0:\n        return (0, -b / (2 * a))\n    else:\n        x1 = (-b + d**0.5) / (2 * a)\n        x2 = (-b - d**0.5) / (2 * a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns a tuple of integers x and y that satisfy ax + by = n, or None if no solution exists.\n    \"\"\"\n    if a == 0:\n        return None\n    else:\n        x = (-b + n//a) // a\n        y = (-b - n//a) // a\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Get the discriminant\n    D = (b**2 - 4*a*n)\n\n    # Check if the discriminant is positive or negative\n    if D < 0:\n        return None\n\n    # If the discriminant is positive, there is at least one root\n    elif D > 0:\n        x1 = (-b + (b**2 - 4*a*n)**0.5)/(2*a)\n        x2 = (-b - (b**2 - 4*a*n)**0.5)/(2*a)\n        return (int(x1), int(x2))\n\n    # If the discriminant is zero, the equation has two real roots\n    else:\n        x = -b/(2*a)\n        return (int(x), int(x))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-n, n+1):\n        y = -x * b / a\n        if a * x + b * y == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    for i in range(-1000, 1001):\n        if a * i + b * (n - i * i) == n:\n            if x is None or abs(i) < abs(x):\n                x = i\n            if y is None or abs(n - i * i) < abs(y):\n                y = n - i * i\n    if x is None:\n        return None\n    elif y is None:\n        return (x,)\n    else:\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    This function takes in three parameters, a, b, and n.\n    a and b are constants.\n    n is the desired value.\n\n    The function first checks if there exists a solution x and y such that ax + by = n.\n\n    If there exists a solution, then it returns a tuple (x, y) where x and y are integers.\n    If there does not exist a solution, then it returns None.\n\n    Example:\n    >>> a = 2\n    >>> b = 3\n    >>> n = 18\n    >>> find_solution(a, b, n)\n    (4, 6)\n    \"\"\"\n    x_set = set()\n    y_set = set()\n\n    # check if there exists a solution for x\n    if a == 0:\n        return None\n    elif n % a == 0:\n        x = n // a\n        x_set.add(x)\n    else:\n        x = None\n\n    # check if there exists a solution for y\n    if b == 0:\n        return None\n    elif n % b == 0:\n        y = n // b\n        y_set.add(y)\n    else:\n        y = None\n\n    # check if there exists a solution for x and y\n    if x is not None and y is not None:\n        return (x, y)\n\n    # check if there exists a solution for x but not for y\n    if x is not None:\n        return (x, None)\n\n    # check if there exists a solution for y but not for x\n    if y is not None:\n        return (None, y)\n\n    # if no solution is found, then return None\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = [x for x in list1 if x not in list2]\n    return list3"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Remove all elements present in list2 from list1\n    for element in list2:\n        list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # Loop through the list2 and remove the elements present in list1\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    sum = 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    # initialize the sum variable\n    total = 0\n\n    # loop through the numbers from 0 to n // 2\n    for i in range(n // 2):\n        # calculate the sum for each number\n        current_sum = (n - 2 * i)\n        # add the current sum to the total\n        total += current_sum\n\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize the sum variable\n    sum = 0\n    # Loop through the indices from 0 to n // 2\n    for i in range(n // 2):\n        # Calculate the sum for the i-th index\n        current_sum = n - 2 * i\n        # Add the sum to the total sum\n        sum += current_sum\n    # Return the total sum\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return sum_even_series(n)\n    else:\n        return sum_odd_series(n)\n\n\ndef sum_even_series(n):\n    '''\n    Calculate the sum of the series (n - 2*i) from i=0 to n // 2.\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum\n\n\ndef sum_odd_series(n):\n    '''\n    Calculate the sum of the series (n - 2*i) from i=0 to n // 2.\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i - 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return 0\n    else:\n        sum_ = 0\n        for i in range(n//2):\n            sum_ += (n - 2*i)\n        return sum_"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(i*2*pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = s * l / 2\n    return area\n\ndef main():\n    print(\"Enter the number of sides of the polygon: \")\n    num_sides = int(input())\n    print(\"Enter the length of each side of the polygon: \")\n    side_length = float(input())\n    print(\"The area of the polygon is:\", area_polygon(side_length, num_sides))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += s * tan((pi/l)*i)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the perimeter of the polygon\n    perimeter = s * l\n    \n    # calculate the semi-perimeter of the polygon\n    semi_perimeter = perimeter / 2\n    \n    # calculate the area of the polygon using Heron's formula\n    area = (semi_perimeter * (semi_perimeter - s) * tan(pi/l)) / 3\n    \n    # return the area of the polygon\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        area += s * tan((i * 2 * pi) / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # calculate the area of a regular polygon using Heron's formula\n    area = (l * s ** 2) / (4 * tan(pi / l))\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l) / (2 * tan(pi / l))"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += tan(pi/l) * s * pow(tan(pi/l), 2)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    div_sum = sum(divisors)\n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \n\nprint(div_sum(6)) # Output: [1, 2, 3]"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i\n            if i!= n//i:\n                divisor_sum += n//i\n    return divisor_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n//2+1):\n        if n % i == 0:\n            print(i)\n    for j in range(1, n//2+1):\n        if n % j == 0:\n            print(j)\n    return n == sum(i*j for i in range(1, n//2+1) for j in range(1, n//2+1))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    def sum_divisors(num):\n        '''\n        Helper function to calculate the sum of the divisors of a number.\n        '''\n        div_sum = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                div_sum += i\n        return div_sum\n    \n    # calculate the sum of the divisors of n\n    div1_sum = sum_divisors(n)\n    \n    # calculate the sum of the divisors of n+1\n    div2_sum = sum_divisors(n+1)\n    \n    # compare the two sums\n    if div1_sum == div2_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_sum(n):\n    # Calculate the sum of the divisors of n\n    div_sum = sum(set(divisors(n)))\n    # Check if the sum of the divisors is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the sum of the divisors of n\n    div_sum = sum(i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0)\n\n    # Find the sum of the divisors of n's prime factors\n    prime_factors = []\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    if n > 2:\n        prime_factors.append(n)\n\n    # Compare the two sums\n    if div_sum == sum(prime_factors):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    return div_sum\n\nif __name__ == \"__main__\":\n    num1 = int(input(\"Enter the first number: \"))\n    num2 = int(input(\"Enter the second number: \"))\n    if num1 == num2:\n        print(\"The sum of the divisors of\", num1, \"and\", num2, \"is the same.\")\n    else:\n        print(\"The sum of the divisors of\", num1, \"and\", num2, \"is different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # calculate the sum of the divisors of n\n    div_sum = sum(set(map(int, str(n))))\n\n    # calculate the sum of the divisors of 2*n\n    double_sum = sum(set(map(int, str(2*n))))\n\n    # compare the two sums to see if they are equal\n    if div_sum == double_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = sum(math.factorize(n))\n    if n == divisor_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    # Define the English alphabet in a set\n    english_alpha = set(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of each character in the English alphabet\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is a lowercase letter in the English alphabet\n        if char in english_alpha:\n            # If it is, increment its count in the dictionary\n            char_count[char] = char_count.get(char, 0) + 1\n\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a dictionary to store the count of characters at each position\n    char_count = {}\n    # loop through each character in the string\n    for char in str1:\n        # convert the character to lowercase to make it case insensitive\n        char = char.lower()\n        # check if the character is a letter\n        if char.isalpha():\n            # if it is a letter, check if it already exists in the dictionary\n            if char in char_count:\n                # if it does, increment its count by 1\n                char_count[char] += 1\n            else:\n                # if it doesn't, add it to the dictionary with a count of 1\n                char_count[char] = 1\n    # return the count of characters at each position\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        char1 = str1[i].upper()\n        if char1 in str1:\n            count += str1.count(char1)\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # initialize a dictionary to store the count of characters\n    char_count = {}\n\n    # convert the input string to lowercase\n    str1 = str1.lower()\n\n    # iterate through the string and count the characters at the same position in the English alphabet\n    for i in range(len(str1)):\n        char = str1[i]\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # return the count of characters\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    count = 0\n    for char in str1.lower():\n        if char in str1:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Define the English alphabet (case insensitive)\n    english_alphabet = [chr(i) for i in range(ord('a'), ord('z') + 1)]\n\n    # Initialize variables\n    count = 0\n\n    # Loop through the string\n    for char in str1:\n        # Check if the character is in the English alphabet\n        if char in english_alphabet:\n            # Check if the character is at the same position in both strings\n            if str1.lower().index(char) == str1.lower().index(char.lower()):\n                count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Create a dictionary to store the frequency of each character in the English alphabet\n    alphabet_freq = {'a':0, 'b':0, 'c':0, 'd':0, 'e':0, 'f':0, 'g':0, 'h':0, 'i':0, 'j':0, 'k':0, 'l':0,'m':0, 'n':0, 'o':0, 'p':0, 'q':0, 'r':0,'s':0, 't':0, 'u':0, 'v':0, 'w':0, 'x':0, 'y':0, 'z':0}\n    \n    # Convert the string to lowercase and loop through each character\n    for char in str1.lower():\n        # If the character is a letter in the English alphabet, increment its frequency in the dictionary\n        if char.isalpha():\n            alphabet_freq[char] += 1\n    \n    # Loop through the dictionary and count the number of occurrences of each character that occurs at the same position in the English alphabet\n    result = 0\n    for freq in alphabet_freq.values():\n        result += freq\n    \n    return result"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1:\n        if char.isalpha() and str1.lower().find(char.lower()) == str1.lower().rfind(char.lower()):\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        count += str1.lower().count(chr(i+97))\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for i in range(len(str1)):\n        if str1[i].islower():\n            char_count[str1[i].lower()] = char_count.get(str1[i].lower(), 0) + 1\n    \n    return char_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n    return count "
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n\n    # iterate over the list and check if the sum of the current element and its complement is even\n    for i in range(len(A)):\n        complement = sum(A) - A[i]\n        if complement % 2 == 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 1\n    else: \n        # Find the index of the rightmost 1 bit in n \n        index = 0\n        while (n & 1) == 0: \n            n >>= 1\n            index += 1\n        # Left shift n by one less than the index and add 1 to get the next power of 2\n        return 1 << index"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the smallest power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # find the binary representation of n\n    binary = bin(n)[2:]\n    # add leading zeros to the binary representation until the length is a power of 2\n    while len(binary) % 2 == 0:\n        binary = \"0\" + binary\n    # convert the binary representation back to an integer\n    power_of_2 = int(binary, 2)\n    # return the next power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the variable power to 1\n    power = 1\n\n    # Loop while n is not a power of 2\n    while power < n:\n        # Increment the power\n        power <<= 1\n\n    # Return the power\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to the input integer.\n    \"\"\"\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 <<= 1\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Base case: if n is already a power of 2, return n\n    if n & (n-1) == 0:\n        return n\n    \n    # Convert n to a list of bits\n    bits = list(bin(n)[2:])\n    \n    # Find the index of the last set bit\n    last_set_bit = len(bits) - 1\n    \n    # Iterate until a power of 2 is found\n    while bits[last_set_bit] == '0':\n        last_set_bit -= 1\n    \n    # Convert the last set bit index to the corresponding power of 2\n    result = 2**(last_set_bit + 1)\n    \n    # If the result is still less than n, return the next power of 2\n    if result < n:\n        return next_power_of_2(result)\n    \n    # Otherwise, return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Get the binary representation of n\n    binary_repr = bin(n)[2:]\n\n    # Find the rightmost set bit (i.e. the last set bit in the binary representation)\n    rightmost_set_bit = len(binary_repr) - binary_repr[::-1].index('1') - 1\n\n    # The next power of 2 is 2^rightmost_set_bit\n    return 2**rightmost_set_bit"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count "
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a,x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(lst, num):\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    This function takes a list and a number as input and returns the number of occurrences of the number in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function counts the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Check if the input list is valid\n    if len(list1) < m or n > len(list1):\n        return \"Invalid input list\"\n\n    # Initialize the sum variable\n    sum_range = 0\n\n    # Iterate over the range of indices\n    for i in range(m, n+1):\n        sum_range += list1[i-1]\n\n    # Return the sum of the range\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Calculate the sum of all elements in the list\n    total = sum(list1)\n\n    # Check if m is less than n\n    if m < n:\n        # Add the sum of all elements between m and n to the total\n        for i in range(m, n + 1):\n            total += list1[i]\n    else:\n        # Add the sum of all elements between n and m to the total\n        for i in range(n, m - 1, -1):\n            total += list1[i]\n\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n\n    # Check if the indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        return \"Invalid index\"\n\n    # Initialize the sum to zero\n    sum = 0\n\n    # Iterate through the list between the specified indices\n    for i in range(m, n + 1):\n        sum += list1[i]\n\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_range = sum(list1[m:n+1])\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(lst, m, n):\n    return sum(lst[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_range = sum(list1[m:n+1])\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Given a list and two indices, return the sum of all the numbers in the list between those indices.\n    \"\"\"\n    return sum(lst[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculate the circumference of the pentagon\n    circumference = 5 * a\n\n    # Return the perimeter of the pentagon\n    return circumference"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Formula to find the perimeter of a pentagon\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a + 12"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = (5 * a) / 2\n    return math.sqrt(s) * 10"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += s.count('std')\n        s = s.replace('std', '', count)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i-2:i+2] == 'td':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    \n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n        \n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    std ='std'\n    for char in s:\n        if char == std:\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurance of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = None\n    for element in test_tuple:\n        if data_type is None:\n            data_type = type(element)\n        elif type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # use set to count the number of occurrences of each data type\n    counts = {}\n    for elem in test_tuple:\n        if elem not in counts:\n            counts[elem.__class__] = 1\n        else:\n            counts[elem.__class__] += 1\n    \n    # check if all the data types are the same\n    all_same = True\n    for count in counts.values():\n        if count > 1:\n            all_same = False\n            break\n    \n    return all_same"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set()\n    for item in test_tuple:\n        data_types.add(type(item).__name__)\n\n    return len(data_types) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not isinstance(test_tuple, tuple):\n        print(\"The input is not a tuple.\")\n        return\n    \n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            print(\"All elements in tuple must have same data type.\")\n            return\n    \n    print(\"All elements in tuple have same data type.\")"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    first_element = test_tuple[0]\n    data_type = type(first_element)\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    # get the type of the first element in the tuple\n    first_type = type(test_tuple[0])\n    # iterate over the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        # check if the type of the current element is the same as the first element\n        if type(element)!= first_type:\n            # if not, return False\n            return False\n    # if all elements have the same type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count == n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count == n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    # Initialize count to 0\n    count = 0\n    # Initialize candidate to x (the given element)\n    candidate = x\n    # Iterate over the array\n    for i in range(n):\n        # If the current element is equal to the candidate, increment the count\n        if arr[i] == candidate:\n            count += 1\n        # If the count becomes greater than n/2, return True (the given element is the majority element)\n        elif count > n//2:\n            return True\n        # If the count becomes zero, set the candidate to the current element\n        else:\n            candidate = arr[i]\n    # If no majority element is found, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n//2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n // 2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Count the occurrences of x in the array\n    count = arr.count(x)\n    \n    # Check if the count is more than n/2\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function returns the count of set bits in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    count = 0 \n    while n: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n!= 0: \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer n as input and returns the number of set bits in the binary representation of n.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of set bits in the binary representation of n.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    Args:\n    str (string): The input string.\n\n    Returns:\n    string: The modified string with odd index values removed.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Convert the string to a list of characters\n    chars = list(str)\n    \n    # Loop through the characters and remove the odd values\n    for i in range(len(chars)):\n        if i % 2!= 0:\n            chars[i] = ''\n    \n    # Convert the list of characters back to a string\n    result = ''.join(chars)\n    \n    # Return the resulting string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # initialize a new empty string to store the result\n    result = \"\"\n    # loop through each character of the input string\n    for char in str:\n        # check if the index of the current character is odd\n        if char_index % 2 == 1:\n            # add the character to the result string\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index_values = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_index_values.append(str[i])\n    return ''.join(odd_index_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = ''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_string += str[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    result = []\n    for char in str:\n        if char % 2 == 1:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n\n    # Check if a is the minimum of the three numbers\n    if a <= b and a <= c:\n        return a\n    \n    # Check if b is the minimum of the three numbers\n    elif b <= a and b <= c:\n        return b\n    \n    # If none of the above conditions are true, then c is the minimum\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c): \n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n\n    # First, compare the first two numbers\n    if a < b: \n        min_num = a\n    else: \n        min_num = b\n        \n    # Compare the minimum with the third number\n    if min_num < c: \n        return min_num\n    else: \n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return True\n    else:\n        if l & (1 << n) == 0 and r & (1 << n) == 0:\n            return all_Bits_Set_In_The_Given_Range(n-1,l,r)\n        else:\n            return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # initialize a list of bits to check\n    bit_list = []\n    # loop through the bits from l to r\n    for i in range(l, r + 1):\n        # add the current bit to the list\n        bit_list.append(i)\n    # compute the number of set bits in the list\n    count = sum(1 for x in bit_list if x & (x - 1) == 0)\n    # return True if all bits are set in the range, False otherwise\n    return count == (r - l + 1)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l == 0:\n        return all_Bits_Set_In_The_Given_Range(n >> 1, r - 1, r)\n    else:\n        return (n & (1 << (l - 1))) == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Find the difference between r and l\n    diff = r - l\n    # Calculate the number of bits required to represent n in binary\n    num_bits = len(bin(n)[2:])\n    # Check if num_bits is less than or equal to diff\n    if num_bits <= diff:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    set_bits = 0\n    for i in range(l,r+1):\n        set_bits |= (1 << i)\n    return ((n & set_bits) == set_bits)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Get the difference between upper and lower limit\n    diff = r - l\n    \n    # Check if the number of bits is odd or even\n    if diff % 2 == 0:\n        # If even, check if all bits are unset\n        if n == 0:\n            return True\n        else:\n            return False\n    else:\n        # If odd, check if the bit at the middle is unset\n        mid = diff // 2\n        if (n & (1 << mid)) == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize count variable to 0\n    count = 0\n    # Initialize flag variable to True\n    flag = True\n    # Loop through each bit in the range from l to r\n    for i in range(l, r+1):\n        # Check if the bit is set\n        if n & (1 << i):\n            # If the bit is set, increment the count variable\n            count += 1\n            # If the count variable becomes greater than 1, set the flag variable to False\n            if count > 1:\n                flag = False\n                break\n    # Return the flag variable\n    return flag"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize variables to store unset bits\n    unset_bits = 0\n    # Iterate through all the bits in the given range\n    for i in range(l, r + 1):\n        # Check if the bit is set or not\n        if n & (1 << i) == 0:\n            # If the bit is not set, increment the unset_bits variable\n            unset_bits += 1\n    # If all bits are unset, return True, else return False\n    return unset_bits == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initialize a boolean variable to true\n    all_bits_set = True\n\n    # loop through all the bits in the given range\n    for i in range(l, r + 1):\n        # check if the bit is set in the given number\n        if (n & (1 << i))!= 0:\n            # if the bit is set, set all_bits_set to false and break out of the loop\n            all_bits_set = False\n            break\n\n    return all_bits_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    all_unset = True\n    for i in range(l, r+1):\n        if n & (1<<i):\n            all_unset = False\n            break\n    return all_unset\n"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    positive = [num for num in arr[:n] if num > 0]\n    negative = [num for num in arr[:n] if num < 0]\n    \n    for num in negative:\n        if not num in positive:\n            negative.remove(num)\n            positive.append(num)\n    \n    return positive + negative"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    neg_index = 0\n    pos_index = n\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        if neg_count == neg_index:\n            neg_index += 1\n            pos_index += 1\n            arr[pos_index], arr[neg_index] = arr[neg_index], arr[pos_index]\n            neg_count -= 1\n        else:\n            neg_index += 1\n            \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize negative and positive counts\n    neg_count = 0\n    pos_count = 0\n\n    # Iterate through the array and count negative and positive elements\n    for num in arr[:n]:\n        if num < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n\n    # Initialize the re-arranged array\n    rearranged_arr = []\n\n    # Iterate through the array again and add the appropriate elements to the re-arranged array\n    for num in arr:\n        if num < 0:\n            for _ in range(neg_count):\n                rearranged_arr.append(num)\n            neg_count -= 1\n        else:\n            for _ in range(pos_count):\n                rearranged_arr.append(num)\n            pos_count -= 1\n\n    # Return the re-arranged array\n    return rearranged_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] >= pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i + 1], arr[high] = arr[high], arr[i + 1]\n        return i + 1\n\n    def quick_sort(arr, low, high):\n        if low < high:\n            pi = partition(arr, low, high)\n            quick_sort(arr, low, pi - 1)\n            quick_sort(arr, pi + 1, high)\n\n    quick_sort(arr, 0, n - 1)\n\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            arr[i], arr[n] = arr[n], arr[i]\n            n -= 1\n        else:\n            i += 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Step 1: Create a list to store the negative elements\n    neg_list = []\n    # Step 2: Iterate through the array and add negative elements to the neg_list\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n    # Step 3: Iterate through the array and add positive elements to the array\n    for i in range(n):\n        if i < len(neg_list):\n            arr[i] = neg_list[i]\n        else:\n            arr[i] = arr[i-n]\n    # Step 4: Reverse the array to restore the original order\n    arr = arr[::-1]\n    # Step 5: Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Create a list to store the negative and positive elements\n    neg_pos_list = []\n\n    # Iterate through the array and add negative and positive elements to the list\n    for num in arr:\n        if num < 0:\n            neg_pos_list.append(num)\n        else:\n            neg_pos_list.append(abs(num))\n\n    # Sort the list of negative and positive elements in descending order\n    neg_pos_list.sort(reverse=True)\n\n    # Iterate through the original array and re-arrange the elements\n    i = 0\n    for num in arr:\n        if i < n:\n            arr[i] = neg_pos_list[i]\n            i += 1\n        else:\n            arr[i] = num\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    if len(negative) == 0:\n        return [x for x in arr if x > 0][:n]\n    else:\n        return negative + positive + [x for x in arr if x > 0][:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create a list to store the negative elements\n    neg_list = []\n    # Create a list to store the positive elements\n    pos_list = []\n    # Iterate through the array\n    for num in arr:\n        # If the number is negative, add it to the negative list\n        if num < 0:\n            neg_list.append(num)\n        # If the number is positive, add it to the positive list\n        else:\n            pos_list.append(num)\n    # Combine the negative and positive lists into one list\n    result_list = neg_list + pos_list\n    # Re-arrange the elements in the array such that all negative elements appear first, followed by all positive elements\n    arr[0:n] = result_list[0:n]\n    arr[n:] = result_list[n:]\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Find the minimum value in the array\n    min_val = min(arr)\n    \n    # Initialize the index of the next non-negative element\n    next_neg_index = 0\n    \n    # Initialize the index of the next positive element\n    next_pos_index = n\n    \n    # Iterate through the array\n    for i in range(n, len(arr)):\n        \n        # Check if the current element is negative\n        if arr[i] < 0:\n            \n            # If the current element is negative, move it to the next non-negative element\n            arr[next_neg_index], arr[i] = arr[i], arr[next_neg_index]\n            \n            # Move the index of the next non-negative element forward\n            next_neg_index += 1\n            \n        # Check if the current element is positive\n        else:\n            \n            # If the current element is positive, move it to the next positive element\n            arr[next_pos_index], arr[i] = arr[i], arr[next_pos_index]\n            \n            # Move the index of the next positive element forward\n            next_pos_index += 1\n    \n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    \n    # Initialize variables\n    neg_count = 0\n    pos_count = 0\n    neg_index = 0\n    pos_index = n\n    \n    # Iterate through the array\n    for i in range(n):\n        # If the element is negative\n        if arr[i] < 0:\n            # Increment negative count and move the element to its new position\n            neg_count += 1\n            arr[neg_index], arr[i] = arr[i], arr[neg_index]\n            # Move the negative index to the next position\n            neg_index += 1\n        # If the element is positive\n        else:\n            # Increment positive count and move the element to its new position\n            pos_count += 1\n            arr[pos_index], arr[i] = arr[i], arr[pos_index]\n            # Move the positive index to the next position\n            pos_index += 1\n            \n    # Check if there are any negative elements remaining\n    if neg_count > 0:\n        # Move the last negative element to the last position\n        arr[neg_index], arr[n-1] = arr[n-1], arr[neg_index]\n    # If there are no negative elements remaining, sort the positive elements\n    else:\n        arr.sort()\n        \n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i!= \" \":\n            str2 += i\n        else:\n            str2 += char\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Create a new string to store the modified string\n    modified_string = \"\"\n    \n    # Iterate through each character in the input string\n    for i in str1:\n        # If the current character is a blank space, replace it with the given character\n        if i == \" \":\n            modified_string += char\n        # If the current character is not a blank space, add it to the modified string\n        else:\n            modified_string += i\n    \n    # Return the modified string\n    return modified_string"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    str2 = str1.replace(\" \", char)\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # replace all blank spaces in the string with the given character\n    str1 = str1.replace(\" \",\"\")\n    \n    # return the modified string\n    return str1"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a max heap of size n\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -list1[i])\n    \n    # Create a list to store the n largest items\n    n_largest = []\n    \n    # Iterate through the list, removing the smallest item from the max heap and appending it to the list of n largest items\n    while max_heap:\n        n_largest.append(-heapq.heappop(max_heap))\n        \n    return n_largest"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Sort the list in descending order\n    list1.sort(reverse=True)\n    # Get the first n elements of the sorted list\n    result = list1[:n]\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heap[i] for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a heap of size n\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -heapq.heappushpop(max_heap))\n    \n    # Extract the largest n numbers from the list\n    for i in range(n, len(list1)):\n        if -heapq.heappushpop(max_heap)!= list1[i]:\n            heapq.heappush(max_heap, -heapq.heappushpop(max_heap))\n    \n    # Extract the remaining numbers from the heap\n    for i in range(n, len(list1)):\n        if -heapq.heappushpop(max_heap)!= list1[i]:\n            heapq.heappush(max_heap, -heapq.heappushpop(max_heap))\n    \n    # Return the extracted numbers as a list\n    return [heapq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,num)\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Convert the list to a max heap\n    max_heap = []\n    for i in list1:\n        heapq.heappush(max_heap, i)\n        \n    # Get the n largest items from the heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(max_heap))\n        \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, -list1[i])\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min-heap of size n\n    min_heap = [0] * n\n\n    # Fill the min-heap with the first n elements of the list\n    heapq.heapify(min_heap)\n    for i in range(n):\n        heapq.heappushpop(min_heap, list1[i])\n\n    # Return the min-heap as the result\n    return min_heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h + 2 * r * r"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area\n    s = 2*math.pi*(r**2 + h**2)\n    \n    return s"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    # Using the formula to calculate the lateral surface area of a cylinder\n    lateral_surface_area = 2 * pi * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Using the formula for lateral surface area of a cylinder\n    surface_area = 2*pi*r*h\n    \n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * math.pi * r * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi * (r**2 + h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*(r**2 + h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*(r**2 + h**2)"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l ** 3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l * l * l\n    return v"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize an empty list to store the even bits of the given number.\n    even_bits = []\n\n    # Iterate over each bit of the given number.\n    for bit in bin(n)[2:]:\n        # If the bit is an even number, add it to the even_bits list.\n        if int(bit) % 2 == 0:\n            even_bits.append(bit)\n\n    # Convert the even_bits list to a binary number and return it.\n    return int(''.join(even_bits), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits of the number\n    even_bits = []\n    # Loop through each bit of the number\n    for bit in bin(n)[2:]:\n        # If the bit is an even number, append it to the list\n        if int(bit) % 2 == 0:\n            even_bits.append(int(bit))\n    # Convert the list to an integer and return it\n    return int(''.join(map(str, even_bits)), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Iterate through the bits of the input number\n    for i in range(32):\n        # If the i-th bit of the number is 0\n        if (n >> i) & 1 == 0:\n            # Set the i-th bit of the result to 1\n            result |= 1 << i\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result\n    result = 0\n    \n    # loop through each bit in the number\n    for bit in bin(n)[2:]:\n        # if the current bit is even, set it to 1\n        if bit == '1':\n            result |= 1 << int(bit)\n    \n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bits = n & 1\n    return n | even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize a variable to hold the result\n    result = 0\n\n    # Iterate through each bit in the input number\n    for i in range(32): \n        # If the i-th bit of n is even, set the i-th bit of the result to 1\n        if (n & (1 << i))!= 0:\n            result |= 1 << i\n\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = bin(n)[2:]  # remove the \"0b\" prefix and convert to binary string\n    n = n.zfill(len(n))  # pad with leading zeros\n    for i in range(0, len(n), 2):\n        n[i] = '1'  # set the even bit to 1\n    return int(n, 2)  # convert the binary string back to decimal"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the resultant number\n    result = 0\n    # Loop through each bit in the given number\n    for i in range(32):\n        # Extract the i-th bit of the given number\n        bit = (n >> i) & 1\n        # Check if the bit is even and set it in the result\n        if bit == 0 and i % 2 == 0:\n            result |= 1 << i\n    # Return the resultant number\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the number to binary string and iterate over each bit\n    for i in range(len(bin(n)[2:])):\n        # If the current bit is even, set it to 1\n        if (i+1) % 2 == 0:\n            # Convert the number to binary string and set the i-th bit to 1\n            binary_string = bin(n)[2:].zfill(len(bin(n)[2:]))\n            binary_string = binary_string[:i] + '1' + binary_string[i+1:]\n            n = int(binary_string, 2)\n    # Return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize a variable to store the result\n    result = 0\n    # loop through each bit of the input number\n    for i in range(32):\n        # if the current bit is even, set it to 1\n        if n & (1 << i):\n            result |= (1 << i)\n    # return the result\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a Counter object to count the occurrences of each tuple in the list\n    count = Counter(test_list)\n    \n    # convert the Counter object to a dictionary and return it\n    return dict(count)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each tuple in the list\n    count_dict = {}\n    \n    # Loop through the list of tuples\n    for item in test_list:\n        # Check if the item is already in the dictionary\n        if item in count_dict:\n            # If it is, increment its count by 1\n            count_dict[item] += 1\n        else:\n            # If it isn't, add it to the dictionary with a count of 1\n            count_dict[item] = 1\n    \n    # Return the dictionary of count of each tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # iterate over the list of tuples\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup not in count_dict:\n            # if not, add it with a count of 1\n            count_dict[tup] = 1\n        else:\n            # if it is, increment its count by 1\n            count_dict[tup] += 1\n    \n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the counts\n    counts = Counter()\n    \n    # Iterate over the list of tuples and update the count dictionary\n    for tup in test_list:\n        counts[tup] += 1\n    \n    # Return the counts dictionary\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # initialize an empty dictionary to store the count of each tuple\n    counts = {}\n    # use the Counter function from the Counter module in Python's collections library to count the occurrences of each tuple\n    for tup in Counter(test_list):\n        # add the tuple to the dictionary with the count as the value\n        counts[tup] = counts.get(tup, 0) + 1\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    # Initialize a count variable to keep track of the number of non-empty substrings\n    count = 0 \n    # Loop through each character in the string\n    for i in range(len(str)): \n        # Use two pointers to create a substring from the current character to the end of the string\n        j = i \n        while j < len(str): \n            # If the substring is not empty, increment the count and move the pointers to the next position\n            if str[i:j+1]!= '': \n                count += 1 \n                j += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            count += 1\n            \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # initialize count variable to zero\n    count = 0\n\n    # loop through each character in the string\n    for i in range(len(str)):\n        # loop through each character in the string starting from the current index\n        for j in range(i, len(str)):\n            # if the substring is not empty, increment the count variable\n            if str[i:j+1]!= '':\n                count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Initialize variables\n    count = 0\n    prev = 0\n    \n    # Check if m and n are valid\n    if m <= 2 or n > m:\n        return \"Invalid input\"\n    \n    # Check if n is even\n    if n % 2 == 0:\n        n += 1\n    \n    # Calculate number of possible sequences of length n\n    for i in range(2, m+1):\n        count += i*i // (n-1)\n    \n    # Return the result\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    elif n == 2:\n        return (m * (m - 1)) / 2\n    else:\n        return (get_total_number_of_sequences(m, n - 1) * (m - n + 1)) / 2"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    for i in range(1, m//n+1):\n        sequence = [2*j for j in range(i*n, m, n)]\n        total += len(set(sequence))\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    elif n == 2:\n        return m * (m - 1) // 2\n    else:\n        total = 0\n        for i in range(1, m + 1):\n            if i >= 2 * n:\n                total += get_total_number_of_sequences(m, n - 1)\n        return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    if m < 2:\n        return 0\n\n    sequence = [0] * (n + 1)\n    sequence[0] = 1\n    sequence[1] = 1\n\n    for i in range(2, n + 1):\n        if i >= 2 * sequence[i - 2] and i <= m:\n            sequence[i] += sequence[i - 2]\n            sequence[i] += sequence[i - 1]\n\n    return sequence[n]\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # initialize the count of possible sequences to 0\n    count = 0\n\n    # loop through all possible sequences of length n\n    for i in range(n + 1):\n        # check if the current sequence is valid\n        if i < 2 or i % 2 == 0:\n            continue\n\n        # loop through all possible starting points\n        for j in range(2, m + 1, 2):\n            # check if the starting point is valid\n            if i + j > m:\n                break\n\n            # check if the ending point is valid\n            if i + j < m:\n                k = i + j - 1\n                if i == 2 and j == 2:\n                    count += 1\n                elif j == 2:\n                    count += k\n                elif k == 2:\n                    count += i\n            else:\n                break\n\n    # return the total number of possible sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    # check if m and n are positive integers\n    if type(m)!= int or type(n)!= int or m <= 0 or n <= 0:\n        return \"Please enter positive integers for m and n.\"\n\n    # initialize a list to store the sequences\n    sequences = []\n\n    # iterate over the range of numbers from 2 to m\n    for i in range(2, m + 1):\n        # check if i is a valid sequence\n        is_valid = True\n        j = 0\n        while j < n and i * (2 ** j) <= m:\n            # check if i * 2^j is valid\n            if i * (2 ** j) > m or i * (2 ** j) + 2 * i > m:\n                is_valid = False\n                break\n            j += 1\n        if is_valid:\n            sequences.append(i * (2 ** j))\n\n    # return the total number of sequences\n    return len(sequences)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through all possible values of the first element\n    for i in range(m, m + n):\n        # Check if the current element is greater than or equal to twice the previous element but less than or equal to m\n        if i >= 2 * (i - 1) and i <= m:\n            # Increment the count variable by 1\n            count += 1\n\n    # Return the total count\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,min(n,m-i)):\n            if i == 0 or (i > 0 and j >= 2*i):\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n):\n    # calculate the maximum number of sequences that can be formed\n    max_sequences = (m//2) * (n-1)\n    # initialize a counter to keep track of the number of sequences found\n    sequence_count = 0\n    # loop through all possible combinations of length n\n    for i in range(max_sequences+1):\n        # calculate the current number of sequences that can be formed\n        current_sequences = sum([1 for j in range(i+1) if (j*2) % n <= m])\n        # update the total number of sequences found\n        sequence_count += current_sequences\n    # return the total number of sequences found\n    return sequence_count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the first list\n    length = len(list1)\n    # Get the last element of the first list\n    last_element = list1[length-1]\n    # Create a new list by concatenating the last element of the first list and the elements of the second list\n    new_list = last_element + list2\n    # Update the last element of the first list to the new concatenated list\n    list1[length-1] = new_list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Ensure that the two lists have the same length\n    if len(list1)!= len(list2):\n        raise ValueError(\"The two lists must have the same length\")\n    \n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2[-1:]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the length of the first list is greater than the length of the second list\n    if len(list1) > len(list2):\n        # If yes, replace the last element of the first list with the elements of the second list\n        list1[-1] = list2\n    else:\n        # If no, raise an exception\n        raise ValueError(\"The first list must have a length greater than or equal to the length of the second list.\")\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[::-1]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # get the length of the first list\n    length1 = len(list1)\n    \n    # check if the second list is longer than the first list\n    if len(list2) > length1:\n        # raise an error\n        raise ValueError(\"Second list is longer than first list.\")\n    \n    # replace the last element of the first list with the elements of the second list\n    list1[length1-1:length1] = list2\n    \n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    This function counts the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Using math library to find the square root of N\n    sqrt_N = int(math.sqrt(N))\n    # Iterating till the square of the square root is less than or equal to N\n    while math.sqrt(sqrt_N*sqrt_N) <= N:\n        sqrt_N += 1\n    # Returning the square of the square root\n    return int(math.sqrt(sqrt_N*sqrt_N))"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function finds the next perfect square greater than a given number.\n    '''\n    # Find the integer square root of N\n    sqrt_N = math.sqrt(N)\n    # Convert the square root to an integer\n    sqrt_N_int = int(sqrt_N)\n    # Add 1 to the square root integer\n    sqrt_N_int += 1\n    # Calculate the next perfect square\n    next_sqrt_N = sqrt_N_int**2\n    # Return the next perfect square\n    return next_sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N) + 1\n    while root**2 < N:\n        root += 1\n    return root"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math  \n  \ndef next_Perfect_Square(N):  \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N  \n    y = int(math.sqrt(x))  \n    while x >= y:  \n        x = y**2  \n        y += 1  \n    return x"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Get the square root of N\n    sqrt_N = math.sqrt(N)\n    # Find the integer part of sqrt_N\n    int_sqrt_N = int(sqrt_N)\n    # If the integer part is odd, increase it by 1\n    if int_sqrt_N % 2!= 0:\n        int_sqrt_N += 1\n    # Calculate the next perfect square by squaring int_sqrt_N and adding 1\n    next_sqrt = int_sqrt_N ** 2 + 1\n    # Check if the next perfect square is greater than N\n    if next_sqrt > N:\n        # If it is, return next_sqrt\n        return next_sqrt\n    else:\n        # If not, call the function with next_sqrt as input\n        return next_Perfect_Square(next_sqrt)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_perfect_square(n):\n        return math.sqrt(n) == int(math.sqrt(n))\n\n    def next_square(n):\n        square = int(math.sqrt(n)) + 1\n        while not is_perfect_square(square):\n            square += 1\n        return square\n\n    if N > 0:\n        next_sq = next_square(N)\n        return next_sq if next_sq > N else N\n    else:\n        return None"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n\n    # Use binary search to find the next perfect square\n    low = 1\n    high = N\n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid > N:\n            high = mid - 1\n        elif mid * mid < N:\n            low = mid + 1\n        else:\n            return mid\n\n    return None"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    while True:\n        # Find the square root of N\n        sqrt_N = math.sqrt(N)\n\n        # If the square root is an integer, increment it\n        if sqrt_N.is_integer():\n            sqrt_N += 1\n\n        # If the square root is not an integer, decrement it\n        else:\n            sqrt_N -= 1\n\n        # Check if the square root is greater than N\n        if sqrt_N > N:\n            return sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 4\n    \n    while True:\n        N += 1\n        if is_perfect_square(N):\n            return N\n            \ndef is_perfect_square(N):\n    '''\n    A helper function to check if a number is a perfect square.\n    '''\n    sqrtN = math.sqrt(N)\n    return sqrtN == int(sqrtN)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if N == 0:\n        return 1\n    elif N % 2 == 0:\n        # Find the largest odd square number less than or equal to N\n        while N % 2 == 0:\n            N = N // 2\n        # Find the smallest perfect square number greater than or equal to N\n        while N * N > N:\n            N = N + 1\n        return N\n    else:\n        # Find the largest even square number less than or equal to N\n        while N % 2!= 0:\n            N = N // 2\n        # Find the smallest perfect square number greater than or equal to N\n        while N * N > N:\n            N = N + 1\n        return N"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_ending_here = max(arr[i], max_ending_here + arr[i])\n        else:\n            max_ending_here = max(arr[i], max_ending_here - arr[i-1])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    max_sum_left = arr[0]\n    max_sum_right = max(arr[0], arr[-1])\n    current_sum = max_sum_right - max_sum_left\n    max_sum = current_sum\n\n    for i in range(1, n - 1):\n        current_sum = max(max_sum_left, arr[i], max_sum_right) - min(max_sum_left, arr[i], max_sum_right)\n        max_sum = max(max_sum, current_sum)\n        if arr[i] < arr[i - 1]:\n            max_sum_left = max(max_sum_left, arr[i])\n        else:\n            max_sum_right = max(max_sum_right, arr[i])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    # initialize max_sum and curr_sum\n    max_sum = curr_sum = arr[0]\n\n    # traverse the array and find the maximum sum of a bitonic subsequence\n    for i in range(1, len(arr)): \n        if arr[i] < arr[i-1]: \n            curr_sum += arr[i] \n        else: \n            curr_sum = arr[i]\n\n        # update max_sum if curr_sum is greater\n        if curr_sum > max_sum: \n            max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    # initialize the maximum sum to the first element of the array\n    max_sum = arr[0]\n\n    # loop through the array\n    for i in range(1, len(arr)): \n        # if the current element is greater than the previous element, \n        # then add the difference between the current element and the previous element to the maximum sum\n        if arr[i] > arr[i-1]: \n            max_sum += arr[i] - arr[i-1]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return max(arr)\n\n    # Initialize variables\n    max_ending_here = arr[0]\n    prev_sum = arr[0]\n    curr_sum = arr[1]\n    is_increasing = True\n\n    # Iterate through the array from second element to last\n    for i in range(2, n):\n        # Check if current element is increasing or decreasing\n        if arr[i] >= arr[i-1]:\n            is_increasing = True\n        else:\n            is_increasing = False\n\n        # Update max_ending_here if current element is increasing and max_ending_here is decreasing\n        if is_increasing and arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n\n        # Update curr_sum if current element is increasing and curr_sum is decreasing\n        if is_increasing and curr_sum > prev_sum:\n            curr_sum = arr[i]\n\n        # Update prev_sum if current element is decreasing and prev_sum is increasing\n        if not is_increasing and prev_sum > curr_sum:\n            prev_sum = arr[i]\n\n    # Return the maximum sum of a bitonic subsequence\n    return max(max_ending_here, curr_sum)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return arr[0]\n\n    # Create a temporary array to store the maximum sum for each subarray\n    temp_arr = [0] * n\n\n    # Iterate through the array and fill the temp_arr with maximum sum for each subarray\n    temp_arr[0] = arr[0]\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            temp_arr[i] = temp_arr[i - 1] + arr[i]\n        else:\n            temp_arr[i] = arr[i] + temp_arr[i - 1]\n\n    # Initialize the maximum sum to be the first element of the temp_arr\n    max_sum = temp_arr[0]\n\n    # Iterate through the temp_arr and find the maximum sum of a bitonic subsequence\n    for i in range(1, n):\n        if temp_arr[i] > max_sum:\n            max_sum = temp_arr[i]\n        elif temp_arr[i] < max_sum:\n            max_sum = temp_arr[i] - temp_arr[i - 1]\n\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # If array is not bitonic, return 0\n    if not is_bitonic(arr):\n        return 0\n\n    # If array is bitonic, find the maximum sum of subsequences\n    max_sum = arr[0]\n    curr_sum = arr[0]\n\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            curr_sum += arr[i]\n        else:\n            curr_sum = arr[i]\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum\n\n\ndef is_bitonic(arr):\n    n = len(arr)\n\n    # Check if array is bitonic\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            return False\n        elif arr[i] > arr[i - 1] and arr[i] < arr[i - 2]:\n            return True\n\n    return True"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Find the length of the array\n    n = len(arr)\n\n    # Initialize the maximum sum and the current subsequence sum\n    max_sum_so_far = float('-inf')\n    curr_sum = 0\n\n    # Traverse through the array and calculate the sum of the subsequence\n    for i in range(n):\n        if i % 2 == 0:\n            curr_sum += arr[i]\n        else:\n            curr_sum -= arr[i]\n\n        # Update the maximum sum if the current sum is greater\n        if curr_sum > max_sum_so_far:\n            max_sum_so_far = curr_sum\n\n    return max_sum_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    if len(arr) < 2: \n        return 0\n\n    max_ending_here = arr[0]\n    max_so_far = max_ending_here\n\n    for i in range(1, len(arr)): \n        if arr[i] > arr[i - 1]: \n            max_ending_here = max(max_ending_here + arr[i], arr[i]) \n        else: \n            max_ending_here = max(max_ending_here, arr[i]) \n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    This function takes an array as input and returns the maximum sum of a bitonic subsequence.\n    '''\n    n = len(arr)\n    if n < 3:\n        return None\n    elif n % 2 == 1:\n        mid = n // 2\n        left = max_sum(arr[:mid])\n        right = max_sum(arr[mid:])\n        return max(left, right) + arr[mid]\n    else:\n        left = max_sum(arr[:n//2])\n        right = max_sum(arr[n//2:])\n        return max(left, right)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while guess * guess > number:\n        guess = (number / guess) + guess / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables for iteration and iteration count\n    i = 1\n    count = 0\n    \n    # iterate until the difference between the current square and the target square is less than or equal to a certain tolerance\n    while abs(i * i - number) > 0.001:\n        # update iteration count\n        count += 1\n        \n        # update current square\n        i = (number / i + i) / 2\n    \n    # return iteration count and final value of the square root\n    return count, i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    start = 0\n    end = number\n    i = 0\n    while end - start > 1e-10:\n        mid = (start + end) / 2\n        if mid * mid == number:\n            return mid\n        elif mid * mid > number:\n            end = mid\n        else:\n            start = mid\n        i += 1\n    return start"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize variables\n    i = 0\n    x = 0.5\n\n    # compute the square root using the babylonian method\n    while abs(x**2 - number) > 1e-10:\n        x = x - (x**2 - number) / (2 * x)\n        i += 1\n\n    # return the square root\n    return x, i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    i = 1\n    while True:\n        guess = (i*i + number/i) / 2\n        if guess == int(guess):\n            return guess\n        else:\n            i += 1\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    count = 0\n    while True:\n        x = (x + number/x) / 2\n        count += 1\n        if x == x:\n            break\n    return count\n\nprint(babylonian_squareroot(27))"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.0000001\n    x = 1.0\n    while abs(x*x - number) > epsilon:\n        x = (x + number/x) / 2.0\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    start_guess = number / 2\n    prev_guess = 0\n    while abs(start_guess**2 - number) > 0.001:\n        prev_guess = start_guess\n        start_guess = (start_guess + number / start_guess) / 2\n    return start_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize the guess as the middle of the range\n    guess = (number + 1) / 2\n\n    # Initialize the upper and lower bounds\n    lower_bound = 0\n    upper_bound = number\n\n    # Loop until the guess is within a tolerance of the actual value\n    while abs(guess**2 - number) > 0.0001:\n        # Calculate the average of the lower and upper bounds\n        average = (lower_bound + upper_bound) / 2\n\n        # If the guess is too low, set the upper bound to the average\n        if guess**2 < number:\n            upper_bound = average\n        # If the guess is too high, set the lower bound to the average\n        else:\n            lower_bound = average\n\n        # Update the guess based on the new bounds\n        guess = (lower_bound + upper_bound) / 2\n\n    # Return the guess as the square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    i = 1\n    x = 1\n    while abs(x**2 - number) >= 0.00001:\n        x = (x + number/x) / 2\n        i += 1\n    print(f\"The square root of {number} is approximately {x}, which is the {i}th iteration of the babylonian method.\")"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n\n    # Initialize tables\n    dp = [[0]*n for i in range(n)]\n    maxLength = 1\n\n    # Fill the tables\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for subsequences of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 1\n            maxLength = 2\n\n    # Check for subsequences of length 3\n    for i in range(n-2):\n        if str[i] == str[i+1] and str[i] == str[i+2]:\n            dp[i][i+2] = 1\n            maxLength = 3\n\n    # Check for subsequences of length greater than 3\n    for length in range(4, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                if maxLength < dp[i][j]:\n                    maxLength = dp[i][j]\n\n    return maxLength"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    '''\n    This function takes a string as input and returns the length of the longest palindromic subsequence in the string.\n    '''\n    \n    # Create a list of lengths of all possible subsequences of the given string\n    lengths = [1] * len(str)\n    \n    # Initialize the index of the longest subsequence found so far\n    max_length = 1\n    \n    # Loop through all possible substrings of the string\n    for i in range(1, len(str)):\n        # Check if the substring is a palindrome\n        if str[i] == str[i-1]:\n            # If it is, update the length of the longest palindromic subsequence found so far\n            lengths[i] = lengths[i-1] + 2\n            # Check if the length of the subsequence is longer than the current maximum\n            if lengths[i] > max_length:\n                max_length = lengths[i]\n    \n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(s):\n    \"\"\"\n    This function returns the length of the longest palindromic subsequence of a given string.\n    \"\"\"\n    # Initialize an empty dictionary to store the longest palindromic subsequence lengths\n    dp = {}\n    # Initialize a variable to store the maximum length of the subsequence\n    max_length = 0\n    # Iterate over all the characters in the string\n    for i in range(len(s)):\n        # Append the current character to a new string\n        curr_str = s[i] + s[i]\n        # If the length of the current string is not in the dictionary, compute the length of its longest palindromic subsequence recursively\n        if len(curr_str) not in dp:\n            dp[len(curr_str)] = lps(curr_str)\n        # If the length of the current string is already in the dictionary, compute the length of its longest palindromic subsequence using a sliding window approach\n        else:\n            # Compute the length of the longest palindromic subsequence using a sliding window approach\n            length = 2 * dp[len(curr_str)] + 1\n            # Update the maximum length if the current length is greater than the maximum length\n            if length > max_length:\n                max_length = length\n    # Return the maximum length of the subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    # Initialize an array to store lengths of longest palindromic subsequences\n    # of all prefixes of the given string\n    lps_array = [1] * n\n\n    # Compute length of longest palindromic subsequence of a prefix\n    # centered at current index\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            lps_array[i] = lps_array[i-1] + 2\n        else:\n            lps_array[i] = max(lps_array[i-1], lps_array[i])\n\n    # Return the length of the longest palindromic subsequence\n    return lps_array[-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Create a list to store the length of longest palindromic subsequence for each index of the string\n    length = [1] * len(str)\n\n    # Initialize the length of the longest palindromic subsequence to 0\n    max_length = 0\n\n    # Iterate over all possible indices of the string\n    for i in range(1, len(str)):\n        # Initialize a boolean variable to check if the current substring is palindrome or not\n        is_palindrome = True\n\n        # Iterate over all possible starting indices of the current substring\n        for j in range(i):\n            # Check if the current substring is a palindrome starting from both ends or not\n            if str[i] == str[j] and length[i - j - 1] > 1:\n                is_palindrome = False\n                break\n\n        # Update the length of the longest palindromic subsequence if the current substring is a palindrome\n        if is_palindrome:\n            length[i] = length[i - 1] + 1\n            max_length = max(max_length, length[i])\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str): \n    n = len(str) \n    table = [[0 for j in range(n)] for i in range(n)] \n\n    # If the first character is also the last character, \n    # then its longest palindromic subsequence is 2. \n    for i in range(n): \n        table[i][i] = 1\n\n    # Check for substrings of length 3 and more. \n    for length in range(3, n+1): \n        for i in range(n-length+1): \n            j = i+length-1\n            if str[i] == str[j]: \n                table[i][j] = 2 + table[i+1][j-1]\n\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    This function takes a string as input and returns the length of the longest palindromic subsequence in the string. \n    It uses dynamic programming to solve this problem.\n    '''\n\n    n = len(str)\n\n    # create a 2D table to store the length of LPS for substrings of length i\n    dp = [[0] * n for _ in range(n)]\n\n    # base cases\n    for i in range(n):\n        dp[i][i] = 1\n\n    # fill the table in bottom-up manner\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    # return the length of the longest palindromic subsequence\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # creating a 2D table to store length of palindromic subsequence for all prefixes\n    table = [[0] * n for i in range(n)]\n    # initialising the first column of the table\n    for i in range(n):\n        table[i][i] = 1\n    # checking for the remaining columns\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            table[i][i+1] = 1\n        else:\n            table[i][i+1] = 0\n    # checking for the remaining rows\n    for gap in range(2, n+1):\n        for i in range(n-gap+1):\n            j = i+gap\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i][j-1], table[i+1][j])\n    # returning the length of the longest palindromic subsequence\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D table to store the length of longest palindromic subsequences for all prefixes of the string\n    dp = [[0] * n for _ in range(n)]\n    # base cases\n    dp[0][0] = 1\n    # fill in the table\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # return the length of the longest palindromic subsequence\n    return dp[n-1][0]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1, n):\n        result += 1 / i\n    return result\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the harmonic sum using the formula (n/1) + (n-1/2) +... + (1/n)\n    return sum([1/(i+1) for i in range(n)])"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    # Calculate the harmonic sum\n    harmonic_sum = 2 * n - 1\n\n    # Return the harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/n**2) + (1/n**3) +... + (1/(n-1)**(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n + 1/n**2 +... + 1/n**(n-1)) / (1 - 1/n + 1/n**2 +... + 1/n**(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return n\n    else:\n        return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n + (1-1/n)**(2*n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # initialize variables\n    sum = 0\n    denominator = 1\n    # loop through the numbers from 1 to n-1\n    for i in range(1, n):\n        # calculate the harmonic sum for each number\n        harmonic = 1/float(i) + 1/float(i-1)\n        # add the harmonic sum to the total sum\n        sum += harmonic\n        # update the denominator for the next number\n        denominator += 2\n    # calculate the harmonic sum for n\n    harmonic = 1/float(n)\n    # add the harmonic sum to the total sum\n    sum += harmonic\n    # return the harmonic sum\n    return sum/denominator"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return (2 * n - 1) / n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set from array_nums2 to remove duplicates\n    array_nums2_set = set(array_nums2)\n\n    # Create an empty list to store the intersection\n    intersection = []\n\n    # Iterate through array_nums1\n    for num in array_nums1:\n        # If num is in array_nums2_set, append it to the intersection list\n        if num in array_nums2_set:\n            intersection.append(num)\n\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays of integers as input and returns a new array\n    containing only the common elements of the two input arrays.\n    \"\"\"\n    # Use a set to keep track of elements in array_nums1 that have already been added to the intersection\n    intersection = set()\n    # Iterate through array_nums1 and add each element to the set intersection\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.add(num)\n    # Convert the set intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set of all elements in the first array\n    set_nums1 = set(array_nums1)\n    # create an empty list to store the intersection\n    intersection = []\n    # loop through the second array\n    for num in array_nums2:\n        # if the number is in the first array, add it to the intersection list\n        if num in set_nums1:\n            intersection.append(num)\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    common_nums = []\n    for num in array_nums1:\n        if num in array_nums2:\n            common_nums.append(num)\n    return common_nums"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Sort both arrays\n    array_nums1.sort()\n    array_nums2.sort()\n\n    # Initialize the intersection array\n    intersection = []\n\n    # Iterate through each element in the first array\n    for num1 in array_nums1:\n        # Check if the number is present in the second array\n        if num1 in array_nums2:\n            # If it is, append it to the intersection array\n            intersection.append(num1)\n\n    # Return the intersection array\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns their intersection.\n    '''\n    # create an empty set to store the intersection\n    intersection = set()\n    \n    # iterate through each element in the first array\n    for num1 in array_nums1:\n        # if the element exists in the second array, add it to the intersection set\n        if num1 in array_nums2:\n            intersection.add(num1)\n    \n    # convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create two dictionaries to store the elements of both arrays\n    dict1 = {}\n    dict2 = {}\n\n    # Populate the dictionaries with the elements of the arrays\n    for num in array_nums1:\n        dict1[num] = True\n\n    for num in array_nums2:\n        dict2[num] = True\n\n    # Find the intersection of the two dictionaries\n    intersection = set(dict1.keys()) & set(dict2.keys())\n\n    # Return the intersection as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Returns the intersection of two arrays.\n\n    Args:\n        array_nums1: A list of integers.\n        array_nums2: A list of integers.\n\n    Returns:\n        A list of integers representing the intersection of the two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n\n    # Create a set from the second array to remove duplicates from the first array\n    set_array_nums1 = set(array_nums1)\n\n    # Create a set from the first array to find the intersection\n    set_intersection = set(array_nums2) & set_array_nums1\n\n    # Convert the set back to a list and return it\n    return list(set_intersection)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    count = 0 \n    for item in tup: \n        if item == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    result = []\n    for i in range(len(list)):\n        result.insert(0, element)\n        result.extend(list)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # create a new list to store the modified elements\n    modified_list = []\n    # iterate through each element in the original list\n    for elem in list:\n        # add the original element to the new list\n        modified_list.append(elem)\n        # add the modified element to the new list\n        modified_list.insert(0, element)\n    # return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Initialize an empty list to store the resulting list\n    result = []\n\n    # Iterate through the input list\n    for i in range(len(list)):\n        # Insert the element before the current element in the list\n        result.insert(0, element)\n        # Append the current element to the result list\n        result.append(list[i])\n\n    # Return the resulting list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Create a new list to store the modified elements\n    modified_list = []\n    # Loop through each element in the list\n    for i in range(len(list)):\n        # Add the element to the new list\n        modified_list.append(list[i])\n        # Add the specified element before the current element\n        modified_list.insert(i, element)\n    # Return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result_list = []\n    for i in range(len(list)):\n        result_list.append(element)\n        result_list.append(list[i])\n    return result_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # get the real and imaginary parts of the complex number\n        real = number.real\n        imag = number.imag\n        # calculate the magnitude and angle of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(number)\n        # create a tuple to store the polar coordinates\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        angle = cmath.phase(num)\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        print(f\"{angle:.4f}\u00b0 = ({real:.2f}, {imag:.2f}) with magnitude {magnitude:.2f}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        real, imag = cmath.rect(number)\n        magnitude = abs(imag)\n        angle = cmath.phase(imag)\n        polar_number = (magnitude, angle)\n        result.append(polar_number)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Converts complex numbers to polar coordinates.\n\n    Parameters:\n    numbers (list): A list of complex numbers to convert.\n\n    Returns:\n    list: A list of tuples, where each tuple contains a complex number in polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(number)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        phi = cmath.phase(number)\n        # Add the polar coordinates to a list\n        result.append((r, phi))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    polar_coordinates = []\n\n    for number in numbers:\n        # Convert complex number to polar coordinates\n        polar_angle = cmath.phase(number)\n        polar_magnitude = abs(number)\n\n        # Add polar coordinates to a list\n        polar_coordinates.append((polar_magnitude, polar_angle))\n\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        print(f'{r:.2f} + {theta:.2f}i')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and converts them to polar coordinates.\n    '''\n    polar_numbers = []\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        mag = abs(num)\n        phase = cmath.phase(num)\n        # Append the polar coordinate to the list\n        polar_numbers.append((mag, phase))\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Convert the complex number to polar coordinates\n    polar_numbers = []\n    for number in numbers:\n        magnitude = abs(number)\n        if number == 0:\n            angle = 0\n        else:\n            angle = cmath.phase(number) * 180 / cmath.pi\n        polar_numbers.append([magnitude, angle])\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        polar_number = (abs(real), abs(imag))\n        polar_numbers.append(polar_number)\n    return polar_numbers"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    This function returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for elem in lst:\n        if type(elem) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all possible combinations of length n with replacement\n    combinations = combinations_with_replacement(l, n)\n\n    # Convert the generator object to a list of tuples\n    combinations = list(combinations)\n\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations of length n with replacement in the list l.\n    Return a list of tuples representing each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    '''\n    Generate all combinations (with repetition) of the elements of the list and return a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(lst, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)-n+1):\n        result.append(tuple(l[i:i+n]))\n    return result"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(n):\n    '''\n    Helper function to check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count\n\nprint(count_Primes_nums(10)) # Output: 4"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(n):\n    '''\n    A helper function to check if a number is prime\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, i)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a tuple\n    where each element is the maximum of its corresponding elements\n    in the input tuples.\n    '''\n    # Initialize variables for maximum elements in each tuple\n    max1 = max2 = None\n    \n    # Check if any element in the first tuple is greater than the second\n    if test_tup1[0] > test_tup2[0]:\n        max1 = test_tup1[0]\n    else:\n        max1 = test_tup2[0]\n        \n    # Check if any element in the second tuple is greater than the first\n    if test_tup1[1] > test_tup2[1]:\n        max2 = test_tup1[1]\n    else:\n        max2 = test_tup2[1]\n    \n    # Create a new tuple with the maximum elements from both tuples\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the length of the given tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    \n    # Create an empty list to store the maximum values\n    max_list = []\n    \n    # Iterate through the tuples\n    for i in range(len1):\n        for j in range(len2):\n            # Check if the current element of the first tuple is greater than the current element of the second tuple\n            if test_tup1[i] > test_tup2[j]:\n                # If it is, add it to the max_list\n                max_list.append(test_tup1[i])\n            else:\n                # If it is not, add it to the max_list\n                max_list.append(test_tup2[j])\n    \n    # Return the maximum values from the max_list\n    return max_list"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    max_tup = (max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1]), max(test_tup1[2], test_tup2[2]))\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    return (max_tup1, max_tup2) if max_tup1 > max_tup2 else (max_tup2, max_tup1)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = max(test_tup1, test_tup2)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Check if the two tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    # Initialize the max value to be the first element in the tuple\n    max_value = test_tup1[0]\n    \n    # Loop through the tuple and compare each element to the max value\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_value:\n            max_value = test_tup1[i]\n    \n    # Return the max value\n    return max_value"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    for i in range(2, n):\n        if i == 2:\n            j = 1\n        elif i % 2 == 0:\n            j = 3\n        else:\n            j = 1\n        for k in range(j, i):\n            if i % k == 0:\n                break\n        else:\n            return i\n    return n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define the list of primes\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Initialize the count of primes\n    count = 0\n\n    # Iterate over the primes to find the nth newman-shanks-williams prime\n    for prime in primes:\n        if prime > n:\n            break\n        count += 1\n\n    # Return the nth newman-shanks-williams prime\n    return count"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define the sequence of primes\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Find the index of the nth prime in the list\n    nth_prime = primes[n-1]\n\n    return nth_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        for i in range(2, n):\n            if (n % i) == 0:\n                break\n        else:\n            return n\n        i += 1\n        while i * i <= n:\n            if (n % i) == 0:\n                return i\n            i += 1\n        return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Define the list of primes up to 10^10\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Initialize the count of newman prime numbers\n    count = 0\n\n    # Iterate through the list of primes\n    for prime in primes:\n\n        # Check if the nth prime is greater than the nth newman prime\n        if prime * prime > n:\n            break\n\n        # If the prime is greater than the nth newman prime, increment the count\n        elif n % prime == 0:\n            count += 1\n\n    # Return the nth newman prime number\n    return count"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize the prime number list and set the first prime number to 2\n    primes = []\n    prime = 2\n\n    # Check if the input is valid\n    if n <= 0:\n        raise ValueError('Input must be a positive integer.')\n\n    # Check if the first prime number is already in the list of primes\n    if prime not in primes:\n        primes.append(prime)\n\n    # Loop through the remaining numbers up to n\n    for i in range(3, n + 1, 2):\n        # Check if the number is prime and not already in the list of primes\n        if is_prime(i) and i not in primes:\n            # Add the prime number to the list of primes\n            primes.append(i)\n\n    # Return the nth prime number\n    return primes[n - 1]\n\n\ndef is_prime(n):\n    '''\n    Helper function to check if a number is prime using the Sieve of Eratosthenes algorithm.\n    '''\n\n    # Check if the input is valid\n    if n <= 0:\n        raise ValueError('Input must be a positive integer.')\n\n    # Initialize the prime number list and set the first prime number to 2\n    primes = []\n    prime = 2\n\n    # Check if the first prime number is already in the list of primes\n    if prime not in primes:\n        primes.append(prime)\n\n    # Loop through the remaining numbers up to the square root of the input number\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        # Check if the number is prime and not already in the list of primes\n        if i not in primes and n % i == 0:\n            # The number is not prime\n            return False\n\n    # The number is prime\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a variable to store the nth newman-shanks-williams prime number\n    nth_prime = -1\n    # Loop through all possible values of i and check if they are prime\n    for i in range(2, n):\n        # If i is prime, then check if it is a newman-shanks-williams prime\n        if is_newman_prime(i):\n            # If it is, then it is the nth newman-shanks-williams prime number\n            if nth_prime == -1:\n                nth_prime = i\n            elif nth_prime == i:\n                break\n            else:\n                nth_prime = -1\n    # Return the nth newman-shanks-williams prime number\n    return nth_prime\n\ndef is_newman_prime(n):\n    '''\n    Write a function to check if a given number is a newman-shanks-williams prime number.\n    '''\n    # Initialize a variable to store the number of factors of n\n    count = 0\n    # Loop through all values of i from 2 to n-1 and check if n is divisible by i\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n            if count > 2:\n                return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    i = 3\n    prime = True\n    while prime and i <= n:\n        prime = False\n        for j in range(2, i):\n            if i % j == 0:\n                prime = True\n                break\n        if prime:\n            print(i)\n        i += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Define the list of prime numbers up to 10000\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Loop through the list of primes and check if each number is a newman-shanks-williams prime\n    count = 0\n    for prime in primes:\n        if prime**2 + prime**3 == n:\n            count += 1\n            if count == n:\n                return prime\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    limit = 500 # We'll start with a limit of 500\n    prime_count = 0\n    prime = 2 # Start with the first prime number\n    \n    while prime_count < n:\n        if is_prime(prime):\n            prime_count += 1\n        prime += 1\n    \n    return prime\n    \ndef is_prime(num):\n    '''\n    A function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] % test_tup2[i] == 0:\n            result_tup += (test_tup1[i] // test_tup2[i],)\n        else:\n            result_tup += (float(test_tup1[i]) / float(test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuple lengths do not match!\")\n        return\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            try:\n                result_tup += (test_tup1[i] / test_tup2[i],)\n            except ZeroDivisionError:\n                print(\"Error: Division by zero!\")\n                return\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if both input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both input tuples must have the same length.')\n    # Perform element-wise division and return the result\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return None\n\n    # perform element-wise division\n    result_tup = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length.\")\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"The length of the list cannot be less than the desired length of the first part.\")\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return \"L is greater than the length of the list\"\n    elif L == 0:\n        return \"L is zero, so there is no first part\"\n    else:\n        mid = len(list1) // 2\n        first_part = list1[:mid]\n        second_part = list1[mid:]\n        return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # If the length of the list is less than L, return the list as both parts\n    if len(list1) < L:\n        return (list1, list1)\n    \n    # Divide the list into two parts of length L\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts of length L.\n    \"\"\"\n    if len(lst) % L!= 0:\n        raise ValueError(\"The length of the list must be a multiple of L\")\n\n    first_part = lst[:L]\n    second_part = lst[L:]\n\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return \"Error: L is greater than the length of the list.\"\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) >= L:\n        return (list1[:L], list1[L:])\n    else:\n        return None"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create an empty list to hold the first part of the list\n    first_part = []\n    # Create an empty list to hold the second part of the list\n    second_part = []\n    # Iterate over the input list and add the first L elements to the first part of the list\n    for i in range(L):\n        first_part.append(list1[i])\n    # Iterate over the input list and add the remaining elements to the second part of the list\n    for i in range(L, len(list1)):\n        second_part.append(list1[i])\n    # Return the two parts of the list in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L. It returns the resulting lists in a tuple.\n    '''\n    # Calculate the length of the second part of the list\n    n = len(list1) - L\n    \n    # Split the first part of the list into two parts of length L\n    part1 = list1[:L]\n    \n    # Split the second part of the list into two parts of length n-L\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if len(list1) < L:\n        print(\"The length of the list must be greater than or equal to L.\")\n        return None\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert the human age into dog years\n    dog_years = h_age * 7\n\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    # Calculate dog's years based on their height in inches\n    dog_years = h_age / 70\n\n    # Round dog's years to the nearest whole number\n    dog_years = round(dog_years)\n\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * int(h_age)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the dog's age in dog years\n    dog_years = (h_age * 7) / 5\n    # Return the dog's age in dog years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's years\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(height_in_meters):\n    \"\"\"\n    This function takes in a height in meters and returns the age in dog years.\n    \"\"\"\n    age_in_dog_years = height_in_meters * 7\n    return age_in_dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    This function takes an integer input for the dog's height in inches and returns the dog's age in dog's years.\n    '''\n    dog_age_in_years = h_age / 70\n\n    return dog_age_in_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n    # Loop through the input list\n    for i in range(0, len(S), step):\n        # Slice the input list at index i and append it to the result list\n        result.append(S[i:i+step])\n    # Return the resulting list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i+step])\n        i += step\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if step <= 0:\n        raise ValueError(\"Step must be a positive integer.\")\n\n    if not isinstance(S, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if len(S) == 0:\n        raise ValueError(\"Input list must not be empty.\")\n\n    if step > len(S):\n        raise ValueError(\"Step cannot be greater than the length of the list.\")\n\n    split_lists = []\n    for i in range(0, len(S), step):\n        split_lists.append(S[i:i+step])\n\n    return split_lists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # initialize an empty list to store the resulting lists\n    results = []\n    # loop through the list using a for loop\n    for i in range(0, len(S), step):\n        # extract the current sublist using the slice notation\n        sublist = S[i:i+step]\n        # add the sublist to the results list\n        results.append(sublist)\n    # return the results list\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Split the input list into chunks of size step\n    chunks = [S[i:i+step] for i in range(0, len(S), step)]\n    return chunks"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the surface area of the cube using Heron's formula\n    s = (l * l + l * l + l * l) ** 0.5\n    return 6 * s * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area of the cube\n    lateral_surface_area = 6 * l**2\n    \n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l**2\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1, 2):  \n        sum += i*i  \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    count = 0\n    sum_of_squares = 0\n    while count < n:\n        num = 3 * count + 1\n        sum_of_squares += num ** 2\n        count += 1\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize a variable to keep track of the sum of the squares of the odd natural numbers\n    sum_of_squares = 0\n    # Initialize a variable to keep track of the current number\n    current_num = 1\n    \n    # Loop through the odd natural numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # Add the square of the current number to the sum of the squares of the odd natural numbers\n        sum_of_squares += i*i\n        # Increment the current number by 2 to get the next odd natural number\n        current_num += 2\n    \n    # Return the sum of the squares of the first n odd natural numbers\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current number to the sum\n        sum += i**2\n    \n    # Return the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n % 2 == 0:\n        raise ValueError(\"n must be an odd number.\")\n    return sum(i**2 for i in range(1, n+1, 2))"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    \n    while count < n:\n        num = 2*count + 1\n        sum += num*num\n        count += 1\n        \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count * count\n        count += 2\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the result as an empty string\n    result = \"\"\n    # Loop n number of times\n    for i in range(n):\n        # Add a star to the result string\n        result += \"*\"\n    # Return the result string\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the first two stars as 1\n    stars = 1\n\n    # Loop through the remaining numbers\n    for i in range(2, n+1):\n        # Add the previous two stars to get the current star\n        current_star = stars + stars - 1\n        # Update the stars variable with the current star\n        stars = current_star\n\n    # Return the nth star number\n    return stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0: \n        return \"Invalid input: n should be a positive integer.\"\n    elif n == 1: \n        return \"*\"\n    else: \n        # Find the last digit of n\n        last_digit = int(str(n)[-1])\n        \n        # Compute the number of stars for each digit in n\n        num_stars = n // 10 ** last_digit\n        \n        # Compute the remaining stars for each digit in n\n        remaining_stars = n % 10 ** last_digit\n        \n        # Compute the total number of stars for the n\n        total_stars = num_stars + remaining_stars\n        \n        # Return the result\n        return \"*\" * num_stars + \" \" * remaining_stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n <= 0: \n        return None\n    else: \n        for i in range(1, n+1): \n            print(\"*\" * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the count variable\n    count = 1\n    \n    # Loop n times\n    for i in range(1, n+1): \n        # Add the count variable to the current value of i\n        i += count\n        \n        # Print the value of i\n        print(i)\n    \n    # Return the value of i\n    return i"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the result to 1\n    result = 1\n\n    # loop through the range of n\n    for i in range(1, n + 1):\n        # multiply the result by 2 and add 1 to get the nth star number\n        result *= 2 + 1\n\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize a counter variable\n    count = 0\n    # loop through each number from 1 to n\n    for i in range(1, n+1):\n        # add the current number to the counter variable\n        count += i\n        # if the counter variable is equal to n, return the current number\n        if count == n:\n            return i"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the first number to 1\n    num = 1\n\n    # Loop through all the numbers from 1 to n\n    for i in range(2, n + 1):\n        # Multiply the previous number by 2\n        num *= 2\n\n        # Add 1 to the result\n        num += 1\n\n    # Return the result\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    return n * (n + 1) // 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function calculates then'th star number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n-1)[1:]"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {\n        'a': 97,\n        'b': 98,\n        'c': 99,\n        'd': 100,\n        'e': 101,\n        'f': 102,\n        'g': 103,\n        'h': 104,\n        'i': 105,\n        'j': 106,\n        'k': 107,\n        'l': 108,\n       'm': 109,\n        'n': 110,\n        'o': 111,\n        'p': 112,\n        'q': 113,\n        'r': 114,\n       's': 115,\n        't': 116,\n        'u': 117,\n        'v': 118,\n        'w': 119,\n        'x': 120,\n        'y': 121,\n        'z': 122,\n    }\n    if k in ascii_dict:\n        return ascii_dict[k]\n    else:\n        return 'Character not found in the dictionary'"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {\n        'a': 97,\n        'b': 98,\n        'c': 99,\n        'd': 100,\n        'e': 101,\n        'f': 102,\n        'g': 103,\n        'h': 104,\n        'i': 105,\n        'j': 106,\n        'k': 107,\n        'l': 108,\n       'm': 109,\n        'n': 110,\n        'o': 111,\n        'p': 112,\n        'q': 113,\n        'r': 114,\n       's': 115,\n        't': 116,\n        'u': 117,\n        'v': 118,\n        'w': 119,\n        'x': 120,\n        'y': 121,\n        'z': 122\n    }\n    return ascii_dict[k]"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n\n    # Convert the character to its integer representation\n    k = ord(k)\n\n    # Return the ascii value of the character\n    return k"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n                even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    total = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and even_index % 2 == 0:\n            total += arr[i]\n        elif even_index % 2!= 0:\n            even_index += 1\n\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    even_count = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum += arr[i]\n                even_count += 1\n    \n    return sum, even_count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    # Initialize variables to store the sum and the index of the last even number\n    sum_even = 0\n    even_index = None\n    \n    # Loop over the elements of the list\n    for i, num in enumerate(arr):\n        # Check if the number is even\n        if num % 2 == 0:\n            # If it is, check if it is at an even position\n            if i % 2 == 0:\n                # If it is, add it to the sum and store the index\n                sum_even += num\n                even_index = i\n    \n    # Return the sum and the index of the last even number\n    return sum_even, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The sum of all even numbers at even positions of the list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0  \n    even_count = 0  \n    for i in range(len(arr)):  \n        if arr[i] % 2 == 0:  \n            even_sum += arr[i]  \n            even_count += 1  \n    if even_count == 0:  \n        return \"There are no even numbers in the list.\"  \n    else:  \n        return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_sum += i**5\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_powers += i ** 5\n    return sum_of_powers\n\nn = int(input(\"Enter the value of n: \"))\nresult = even_Power_Sum(n)\nprint(\"The sum of the first\", n, \"even natural numbers that are raised to the fifth power is\", result)"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n):\n        total += (i+1)**5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i ** 5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tuple in test_list:\n        if isinstance(tuple, tuple):\n            result.append(tuple[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        else:\n            result_tup += (test_tup1[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Make sure the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples must have the same length.\"\n\n    # Loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n\n    # initialize an empty list to store the result\n    result = []\n\n    # loop through the tuples\n    for i in range(len(test_tup1)):\n        # check if the index is in the second tuple\n        if i < len(test_tup2):\n            # subtract the elements from the result list\n            result.append(test_tup1[i] - test_tup2[i])\n        else:\n            # add the original element to the result list\n            result.append(test_tup1[i])\n\n    # return the result list\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two input tuples must have the same length')\n    # create a new list to store the subtraction results\n    sub_result = []\n    # loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        sub_result.append(test_tup1[i] - test_tup2[i])\n    # return the subtraction results as a tuple\n    return tuple(sub_result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # subtract the element of the first tuple from the element of the second tuple with the same index\n        test_tup1[i] = test_tup1[i] - test_tup2[i]"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(2, n+1):\n        for j in range(2, i):\n            coeff = math.comb(i, j)\n            if j % 2 == 0:\n                coeff_sum += coeff\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # Initialize the sum and count variables\n    sum_even_coeffs = 0\n    count = 0\n\n    # Iterate over the values of k from 0 to n\n    for k in range(n+1):\n\n        # Check if k is even\n        if k % 2 == 0:\n\n            # Calculate the binomial coefficient and add it to the sum\n            coeff = math.comb(n, k)\n            sum_even_coeffs += coeff\n\n            # Increment the count\n            count += 1\n\n    # Return the sum of even index binomial coefficients\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop through each index i from 1 to n\n    for i in range(1, n+1):\n        # Compute the binomial coefficient\n        coeff = math.comb(n, i)\n\n        # Check if the index is even\n        if i % 2 == 0:\n            # Add the even index binomial coefficient to the sum\n            sum += coeff\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if j % 2 == 0:\n                sum += j\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    coeff = 0\n    for i in range(2, n+1, 2):\n        coeff += math.factorial(n-i+1)/math.factorial(i)\n    return coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        binomial_coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum += binomial_coeff\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum of even index binomial coefficients as 0\n    sum_even_binomial = 0\n    \n    # Loop through the even indices of the binomial coefficients\n    for i in range(2, n+1, 2):\n        # Calculate the even index binomial coefficient\n        even_binomial = math.comb(n, i)\n        \n        # Add the even index binomial coefficient to the sum of even index binomial coefficients\n        sum_even_binomial += even_binomial\n    \n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of the even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(2*n):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            coeff_sum += coeff\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    else:\n        # Compute the sum of even index binomial coefficients using recursion\n        sum = 0\n        for i in range(n+1):\n            sum += math.comb(n, i)\n        return sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume of the cylinder.\n    '''\n    volume = (3.14 * (r ** 2)) + (3.14 * (h / 3))\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = (1/3) * 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14*(r**2)*h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    vol = (1/3) * pi * r ** 2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Calculate the volume of a cylinder with the given radius and height.\n    \"\"\"\n    pi = 3.141592653589793\n    return pi * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * (3.14 * r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * (r ** 2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * (r**2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    pi = 3.14159\n    volume = pi * (r ** 2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    area = 2 * 3.14159 * r * r  # formula for area of a circle\n    volume = area * h  # formula for volume of a cylinder\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {key: value for key, value in dict.items() if value >= n}\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0 or test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n            continue\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1]!= test_tup[i]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i+1] < test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) // 2:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= 0:\n            if test_tup[i]!= test_tup[i-1]:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i]!= test_tup[i-1]:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (2*n-1) * (2*n-1) + 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1: \n        return None\n    elif n == 1: \n        return 1\n    else: \n        # formula for nth decagonal number \n        # is (n^2 + 6*n + 15) / 12\n        return int(((n**2 + 6*n + 15) / 12))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # first check if n is even\n    if n % 2 == 0:\n        return False\n    \n    # calculate the square root of n\n    sqrt_n = n ** 0.5\n    \n    # check if sqrt_n is an integer\n    if sqrt_n.is_integer():\n        return False\n    \n    # calculate the number of even squares in the square root range\n    count = 0\n    i = 0\n    while i <= sqrt_n:\n        j = 0\n        while j <= sqrt_n:\n            if j ** 2 <= i * i:\n                count += 1\n            j += 1\n        i += 1\n    \n    # if count is odd, then n is a decagonal number\n    if count % 2!= 0:\n        return True\n    \n    # if count is even, then n is not a decagonal number\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize a counter variable\n    count = 1\n    # initialize a variable to store the decagonal number\n    decagonal_num = 1\n    # loop through the range of numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # add the current number to the counter variable\n        count += i\n        # multiply the counter variable by 2 (since we are counting from 1 to n)\n        count *= 2\n        # subtract the current number from the counter variable\n        count -= i\n        # add the current number to the decagonal number\n        decagonal_num += count\n    # return the decagonal number\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    num = n * (2 * n - 1)\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n\n    # Define the base of the decagonal sequence\n    base = 20\n\n    # Calculate the nth decagonal number using the formula:\n    # D(n) = D(n-1) + D(n-2)\n    # Where D(n) is the (n-th) decagonal number\n    nth_decagonal = base + (base * (n - 1))\n\n    return nth_decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # first calculate the sum of first n terms of the series\n    sum_of_terms = (n * (n + 1)) // 2\n\n    # then calculate the decimal place of the sum\n    decimal_place = sum_of_terms % 1\n\n    # check if the decimal place is 0\n    if decimal_place == 0:\n        # if it is, the nth decagonal number is sum_of_terms\n        return sum_of_terms\n    else:\n        # if it's not, the nth decagonal number is sum_of_terms + 1\n        return sum_of_terms + 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) // 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    This function takes an integer n as input and returns True if it is a decagonal number and False otherwise.\n    A decagonal number is a positive integer that is equal to the sum of the squares of its decimal digits.\n    '''\n    num = 0\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    for i in range(1, len(digits)):\n        num += digits[i] ** 2\n    if num == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal += i**2\n    return decagonal == n**2"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return found, index"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to a set, which automatically removes duplicates\n    unique_elements = len(set(test_list)) == len(test_list)\n    return unique_elements"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    This function checks if all elements of a given list are unique or not.\n    '''\n\n    # Check if the list is empty\n    if not test_list:\n        return True\n\n    # Initialize a set to store unique elements\n    unique_set = set()\n\n    # Iterate over the list and add each element to the set\n    for element in test_list:\n        unique_set.add(element)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique_elements = []\n    for element in test_list:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        else:\n            return False\n    return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: lists do not have the same length.\")\n        return\n    \n    # subtract each element of the lists element-wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = [x - y for x, y in zip(nums1, nums2)]\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must have the same length.\")\n        return None\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as arguments and returns a list of the elements that are present in the first list but not in the second list.\n    '''\n    result = []\n    for num in nums1:\n        if num not in nums2:\n            result.append(num)\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Input lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    freq = [0] * 10\n    for digit in digits:\n        freq[digit] += 1\n    for digit in digits:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    count = {}\n    for i in range(10):\n        count[i] = n.count(str(i))\n    for i in count:\n        if count[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}  # dictionary to store frequency of each digit\n    \n    # count frequency of each digit in the integer\n    for d in str(n):\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n    \n    # check frequency of each digit\n    for d in freq:\n        if freq[d] > d:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    for digit, freq in digit_freq.items():\n        if freq > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    # initializing a list to store the frequency of digits\n    freq = [0] * 10\n\n    # looping through each digit in the integer and incrementing the frequency of that digit in the list\n    for digit in str(n):\n        freq[int(digit)] += 1\n\n    # looping through the list and checking if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > n:\n            return False\n        elif freq[i] < n:\n            continue\n\n    # if all the digits have a frequency less than or equal to the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    for digit in str(n):\n        digits.append(int(digit))\n\n    freq = [0] * 10\n    for digit in digits:\n        freq[digit] += 1\n\n    for i in range(len(freq)):\n        if freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    # initialize a dictionary to store the frequency of each digit in n\n    freq = {}\n\n    # loop through each digit in n\n    for d in str(n):\n        # if d is not already in the dictionary, add it with a frequency of 1\n        if d not in freq:\n            freq[d] = 1\n        # otherwise, increment its frequency by 1\n        else:\n            freq[d] += 1\n\n    # loop through each digit in n\n    for d in str(n):\n        # if the frequency of the digit in n is greater than or equal to the digit itself, return True\n        if freq[d] >= int(d):\n            return True\n\n    # otherwise, return False\n    return False"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    freq = [0] * 10\n    for digit in digits:\n        freq[digit] += 1\n    for digit in freq:\n        if digit > n // len(digits):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10 # create an empty list of 10 elements (0-9)\n\n    # loop through each digit of the integer\n    for i in str(n):\n        # increment the frequency of the digit in the list\n        freq[int(i)] += 1\n\n    # loop through the list of frequencies and check whether each digit is greater than or equal to itself\n    for i in range(len(freq)):\n        # check whether the frequency of digit i is greater than or equal to its value\n        if freq[i] >= i+1:\n            return False\n\n    # if all digits satisfy the above condition, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    # loop through each digit in the integer\n    for digit in str(n):\n        # check if the frequency of that digit is less than or equal to the digit itself\n        if digit in str(digit):\n            return False\n    # if the loop completes without returning False, then the integer is valid\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and returns True if all elements in the list are equal to the given element.\n    \"\"\"\n    return all(x == elem for x in lst)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(item == element for item in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    if all(x == element for x in list):\n        print(\"All items in the list are equal to the given element\")\n    else:\n        print(\"The given element is not present in the list\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    # Initialize a variable to keep track of the result\n    is_equal = True\n\n    # Iterate through each item in the list\n    for item in list:\n        # If the current item is not equal to the given element, set the result to False and break out of the loop\n        if item!= element:\n            is_equal = False\n            break\n\n    # Return the result\n    return is_equal"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[bB][bB]')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<=a)(?=b{2,3})[ab]*'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*?(b){2,3}'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?:b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b(?:{2,3}b)*'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    return re.search(pattern, text)\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nresult = text_match_two_three(text)\n\nif result:\n    print(f\"The text '{text}' contains the pattern 'a(b{2,3})'\")\nelse:\n    print(f\"The text '{text}' does not contain the pattern 'a(b{2,3})'\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    pattern = re.compile('a.*b{2,3}')\n    match = pattern.match(text)\n\n    if match:\n        print(\"String contains the pattern.\")\n    else:\n        print(\"String does not contain the pattern.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Check if the given array is valid or not\n    if n == 0 or n == k:\n        return 0\n\n    # Find the maximum sum of a contiguous array in the original array\n    max_sum_original = max(a)\n\n    # Initialize the maximum sum of a contiguous array in the modified array\n    max_sum_modified = max_sum_original * k\n\n    # Find the maximum sum of a contiguous array in the modified array formed by repeating the original array k times\n    for i in range(1, k):\n        max_sum_modified = max(max_sum_modified, max_sum_original + i * a[0])\n\n    # Return the maximum sum of a contiguous array in the modified array\n    return max_sum_modified"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Create a new array with the given array repeated k times\n    mod_arr = [0] * (n * k)\n    for i in range(n):\n        for j in range(k):\n            mod_arr[i*k + j] = a[i]\n\n    # Find the maximum subarray sum\n    max_sum = float('-inf')\n    for i in range(n * k):\n        if i % k == 0:\n            # Find the sum of the k-sized subarray\n            sub_sum = 0\n            for j in range(k):\n                sub_sum += mod_arr[i - j]\n            # Update the maximum subarray sum\n            max_sum = max(max_sum, sub_sum)\n        else:\n            # Update the sum of the k-sized subarray\n            sub_sum -= mod_arr[i - k]\n            sub_sum += mod_arr[i]\n            # Update the maximum subarray sum\n            max_sum = max(max_sum, sub_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize variables for max sum and current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # iterate over each element of the given array\n    for i in range(n):\n        # add the current element to the current sum\n        current_sum += a[i]\n        \n        # if the current sum is greater than the max sum, update the max sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # if the current sum is greater than the k times the current element, add the current element to the current sum\n        if current_sum > k * a[i]:\n            current_sum += a[i]\n            \n    # return the max sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize the variables\n    max_sum = float('-inf')\n    repeated_sum = a[0]*k\n    \n    # Iterate through the array\n    for i in range(n):\n        # Update the repeated sum\n        repeated_sum = (repeated_sum + a[i]*(k-1)) % (10**9+7)\n        \n        # Update the maximum sum\n        if repeated_sum > max_sum:\n            max_sum = repeated_sum\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables to keep track of the current sum and the maximum sum found so far\n    current_sum = max_sum = sum(a)\n\n    # Repeat the given array k times and calculate the sum of each repetition\n    for i in range(k):\n        current_sum = sum(a)\n\n        # Check if the current sum is greater than the maximum sum found so far\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return the maximum sum found\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a copy of the array to store the modified array\n    modified_array = a.copy()\n\n    # Iterate over the modified array and repeat the given array k times\n    for i in range(k):\n        modified_array = np.concatenate((modified_array, a))\n\n    # Initialize variables to store the maximum sum and its index\n    max_sum = max_index = float('-inf')\n\n    # Iterate over the modified array and find the maximum sum of a contiguous array\n    for i in range(n):\n        sub_array = modified_array[i:i+n]\n        current_sum = sum(sub_array)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_index = i\n\n    # Return the maximum sum and its index\n    return max_sum, max_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize the maximum sum as 0\n    max_sum = 0\n\n    # loop through the array a and calculate the sum of each sub-array\n    for i in range(n):\n        sub_sum = sum(a[i:i+k])\n\n        # if the sub-array is greater than the current maximum sum, update the maximum sum\n        if sub_sum > max_sum:\n            max_sum = sub_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables to keep track of the maximum sum and the maximum sum of a repeated array\n    max_sum = float('-inf')\n    max_repeated_sum = float('-inf')\n    \n    # Initialize variables to keep track of the current sum and the current sum of a repeated array\n    current_sum = 0\n    current_repeated_sum = 0\n    \n    # Iterate through the array\n    for i in range(n):\n        # If the current element is negative, add it to the current repeated sum\n        if a[i] < 0:\n            current_repeated_sum += a[i]\n        # If the current element is positive or zero, add it to the current sum\n        else:\n            current_sum += a[i]\n        \n        # If the current sum is greater than the current maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # If the current repeated sum is greater than the current maximum repeated sum, update the maximum repeated sum\n        if current_repeated_sum > max_repeated_sum:\n            max_repeated_sum = current_repeated_sum\n            \n    # Return the maximum repeated sum\n    return max_repeated_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Calculate the sum of the original array\n    original_sum = sum(a)\n    \n    # Create a new list with the repeated array\n    repeated_array = [x for x in a] * k\n    \n    # Calculate the sum of the repeated array\n    repeated_sum = sum(repeated_array)\n    \n    # Calculate the maximum sum of any contiguous subarray\n    max_sum = original_sum\n    \n    # Loop through all possible subarrays of the repeated array\n    for i in range(k):\n        for j in range(i+1, k):\n            # Calculate the current subarray sum\n            current_subarray_sum = repeated_array[i] + repeated_array[j]\n            \n            # Update the maximum sum if the current sum is larger\n            if current_subarray_sum > max_sum:\n                max_sum = current_subarray_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the maximum sum of a contiguous array\n    max_sum = max(a)\n    # Create a list to store the sum of k contiguous arrays\n    sum_array = [0] * k\n    # Initialize the current sum of the first array\n    current_sum = a[0]\n    # Initialize the current index of the first array\n    current_index = 0\n    # Initialize the current sum of the modified array\n    modified_sum = 0\n    # Initialize the current index of the modified array\n    modified_index = 0\n    \n    # Loop through the arrays\n    for i in range(1, n):\n        # Update the current sum and index\n        current_sum += a[i]\n        current_index += 1\n        # Update the modified sum\n        modified_sum += (a[i] * k)\n        # Update the modified index\n        modified_index += 1\n        # If the current sum is greater than the maximum sum, update the maximum sum and the sum of k contiguous arrays\n        if current_sum > max_sum:\n            max_sum = current_sum\n            sum_array = [modified_sum]\n        # If the modified sum is greater than the current maximum sum, update the maximum sum and the sum of k contiguous arrays\n        elif modified_sum > max_sum:\n            max_sum = modified_sum\n            sum_array = [modified_sum]\n        # If the current sum is equal to the maximum sum, update the sum of k contiguous arrays\n        elif current_sum == max_sum:\n            sum_array.append(modified_sum)\n    \n    # Return the maximum sum of the modified array and the sum of k contiguous arrays\n    return max_sum, sum_array"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 2\n    while i <= n:\n        sum_of_squares += i**2\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i*i\n        i += 2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    # Initialize the sum of squares to 0\n    sum_of_squares = 0\n    \n    # Loop through the even natural numbers from 2 to n\n    for i in range(2, n+1, 2):\n        # Add the square of the even natural number to the sum of squares\n        sum_of_squares += i*i\n        \n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_sum += i*i\n    return even_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the number to the sum\n        sum += i*i\n    # return the sum\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_squares = 0\n    for i in range(2, n+1, 2):\n        even_squares += i*i\n    return even_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for item in list1:\n        if len(item) > len(max_length_list):\n            max_length_list = item\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for i in range(len(list1)):\n        max_lengths.append(len(max(list1[i], key=len)))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        lengths = [len(sublist)]\n        for item in sublist:\n            lengths.append(len(str(item)))\n        if len(lengths) > max(max_lengths):\n            max_lengths = lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sub_list in list1:\n        if len(sub_list) > len(max_length_list):\n            max_length_list = sub_list\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Create an empty list to store the maximum length of the list of lists\n    max_lengths = []\n    # Loop through each element in the list of lists\n    for sublist in list1:\n        # Calculate the length of the current sublist\n        length = len(sublist)\n        # If the length is greater than the current maximum length, update the maximum length\n        if length > max(max_lengths):\n            max_lengths = [length]\n        elif length == max(max_lengths):\n            # If the length is equal to the maximum length, append it to the list of maximum lengths\n            max_lengths.append(length)\n    # Return the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxLength = 0\n    maxLengthList = []\n    for i in range(len(list1)):\n        if len(list1[i]) > maxLength:\n            maxLength = len(list1[i])\n            maxLengthList = [list1[i]]\n        elif len(list1[i]) == maxLength:\n            maxLengthList.append(list1[i])\n    return maxLengthList"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += (i*k) // (i-1)\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    # initialize the memoization table with zeros\n    memo = [0] * (n+1)\n    \n    # fill the memoization table with the required values\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1:\n                memo[i] += 1\n            elif j == 1:\n                memo[i] += 1\n            else:\n                memo[i] += memo[i-1]\n    \n    return memo[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a dictionary to store the number of ways for each color\n    count = {}\n    # Initialize the number of ways for each color to 1\n    for i in range(k):\n        count[i] = 1\n    # Base case: If there is only one post or if the fence has zero posts, there is only one way to paint the fence\n    if n <= 1 or k <= 1:\n        return 1\n    # Recursive case: For each number of colors that can be used, add the number of ways to paint the fence with that many colors and the remaining number of colors to the count of ways for that many colors.\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i > 1:\n                # If there is at least one post, add the count of ways for (i-1) colors to the count of ways for (i) colors\n                count[j] += count[j-1]\n            if j > 1:\n                # If there are at least two colors, add the count of ways for (j-1) colors to the count of ways for (j) colors\n                count[j] += count[j-1]\n    return count[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a list of all possible colors\n    colors = list(range(k))\n\n    # Create a list of lists of length n with all the possible ways of painting the fence\n    ways = [[[] for i in range(k)] for j in range(2*n)]\n\n    # Base case: If n = 0, there is only one way to paint the fence\n    if n == 0:\n        return 1\n\n    # Fill in the rest of the ways list\n    for i in range(n+1):\n        for color in colors:\n            if i > 0:\n                ways[2*i-1][color].append(ways[2*i-2][color])\n            if i > 1:\n                ways[2*i-2][color].append(ways[2*i-3][color])\n            if i > 2:\n                ways[2*i-3][color].append(ways[2*i-4][color])\n\n    # Return the number of ways to paint the fence\n    return len(ways[2*n-1])"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    def backtrack(curr_color, fence_color_count, fence_color_pos, visited, result):\n        if len(visited) == n and curr_color!= fence_color:\n            result += 1\n            return\n\n        for i in range(n):\n            if i == fence_color_pos:\n                continue\n\n            if curr_color == fence_color or not visited[i] and fence_color_count[curr_color] > 0:\n                visited[i] = True\n                fence_color_count[curr_color] -= 1\n                fence_color_pos = i\n                backtrack(curr_color, fence_color_count, fence_color_pos, visited, result)\n                visited[i] = False\n                fence_color_count[curr_color] += 1\n                fence_color_pos = i\n\n    fence_color_count = [0] * k\n    fence_color_pos = -1\n    visited = [False] * n\n    result = 0\n\n    backtrack(0, fence_color_count, fence_color_pos, visited, result)\n\n    return result"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    dp = [0] * (n + 1)\n    dp[0] = 1  # base case\n\n    for i in range(1, n + 1):\n        if i - 1 == 0:\n            dp[i] = dp[i - 1]\n        elif i - 2 == 0:\n            dp[i] = dp[i - 1] + dp[i - 2]\n        else:\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize a 2D list to store the count of ways for each color\n    ways = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Initialize the count of ways for the first 2 posts to 1\n    ways[1][1] = 1\n\n    # Iterate through the remaining posts\n    for i in range(2, n + 1):\n        # For each color, consider all possible adjacent posts and add the count of ways of painting the fence in each case\n        for j in range(1, k + 1):\n            ways[i][j] += ways[i - 1][j]\n            ways[i][j] %= (10 ** 9 + 7)\n            ways[i][j] += ways[i - 1][j + 1]\n            ways[i][j] %= (10 ** 9 + 7)\n\n    # Return the count of ways for the last post with all colors\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a matrix to store the number of ways of painting the fence with n posts and k colors.\n    ways = [[0]*(k+1) for _ in range(n+1)]\n\n    # Fill the matrix with the number of ways of painting each fence of length i.\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1 or j == 1:\n                ways[i][j] = 1\n            else:\n                ways[i][j] = ways[i-1][j] + ways[i-1][j-1]\n\n    # Return the last element of the matrix, which is the number of ways of painting the fence.\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Create a boolean matrix to store the count of ways of painting the fence\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    \n    # Base cases\n    dp[0][0] = 1\n    dp[0][1] = 1\n    dp[0][2] = 1\n    \n    # Fill the matrix using dynamic programming\n    for i in range(1, n+1):\n        for j in range(min(k, i)+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= 2 and i >= 2:\n                if dp[i-2][j-1] == 1 and dp[i-2][j] == 1:\n                    dp[i][j] += dp[i-2][j]\n    \n    return dp[n][min(k, n)]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # To store the number of ways\n    count = 0\n    \n    # To store the count of same colors\n    same_colors = 0\n    \n    # To store the count of adjacent colors\n    adjacent_colors = 0\n    \n    # To store the count of adjacent same colors\n    adjacent_same_colors = 0\n    \n    # Loop through all possible ways of painting the fence\n    for i in range(2**n):\n        \n        # To store the current combination of colors\n        current_colors = 0\n        \n        # To store the current combination of same colors\n        current_same_colors = 0\n        \n        # Loop through all the bits in the current combination\n        for j in range(n):\n            \n            # If the bit is set to 1, then it corresponds to a 1 in the i-th bit position\n            if i & (1 << j):\n                \n                # Add the color corresponding to the j-th bit to the current combination of colors\n                current_colors += k\n            \n            # If the bit is set to 1, then it corresponds to a 1 in the i-th bit position\n            if i & (1 << (n+j)):\n                \n                # Add the color corresponding to the (n+j)-th bit to the current combination of same colors\n                current_same_colors += k\n        \n        # If there are at most 2 same colors and at most 2 adjacent same colors, then increment the count\n        if current_same_colors <= 2 and current_colors <= 2:\n            count += 1\n        \n        # If there are at most 2 adjacent same colors, then increment the count\n        if current_same_colors <= 2:\n            adjacent_same_colors += 1\n            \n        # If there are at most 2 adjacent colors, then increment the count\n        if current_colors <= 2:\n            adjacent_colors += 1\n            \n    # If there are at most 2 adjacent same colors, then increment the count\n    if adjacent_same_colors <= 2:\n        count += 1\n    \n    # If there are at most 2 adjacent colors, then increment the count\n    if adjacent_colors <= 2:\n        count += 1\n    \n    # Return the final count\n    return count"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n / m\n    return int(quotient)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    This function takes two integers as input, n and m, and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a Python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # return the floor division of n/m rounded down to the nearest integer\n    return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):\n    '''\n    This function takes in two integer values n and m and returns the quotient of n divided by m, rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n\n    # Calculate the quotient and round it down to the nearest integer\n    quotient = round(n / m)\n\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w ** 2 + h ** 2)\n    b = math.sqrt(w ** 2 - h ** 2)\n    c = w\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w ** 2 + h ** 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # Calculate the square root of the sum of the squares of the two sides\n    side_one = math.sqrt(w*w + h*h)\n    # Calculate the area of the right angle triangle\n    area = (w*h) / 2\n    # Calculate the third side of the triangle\n    third_side = side_one * math.sqrt(3)\n    # Return the value of the third side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return 2 * s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter\n    s = (w + h) / 2\n\n    # Calculate the area of the triangle\n    area = math.sqrt(s * (s - w) * (s - h))\n\n    # Calculate the angle between the hypotenuse and the midpoint\n    angle = math.degrees(math.acos((s * s + h * h - w * w) / (2 * s * h)))\n\n    # Calculate the third side of the triangle\n    third_side = area / math.sin(math.radians(angle))\n\n    # Return the third side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2+h**2)\n    print(\"The third side of the right angled triangle is:\", c)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter\n    s = (w + h) / 2\n    \n    # Calculate the square root of the semi-perimeter\n    sqrt_s = math.sqrt(s)\n    \n    # Calculate the third side of the right angled triangle\n    third_side = sqrt_s * w\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]  # initialize the maximum value to the first element of the list\n    \n    for i in range(1, len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]  # if the current element is greater than the current maximum value, update it\n    \n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    \"\"\"\n    This function takes a list of values and returns the maximum value.\n    \"\"\"\n    if not listval:\n        return None\n    maxval = listval[0]\n    for val in listval:\n        if val > maxval:\n            maxval = val\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize max value to None\n    max_value = None\n\n    # Iterate through the list and update max_value if necessary\n    for item in listval:\n        if max_value is None or item > max_value:\n            max_value = item\n\n    # Return the max value\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        max_val = listval[0]\n        for item in listval:\n            if item > max_val:\n                max_val = item\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for i in listval:\n        if max_val is None:\n            max_val = i\n        elif i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize a variable to store the maximum value\n    max_val = None\n    # Loop through the list\n    for val in listval:\n        # If the current value is greater than the maximum value, update the maximum value\n        if val > max_val:\n            max_val = val\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = float('-inf')\n    for i in listval:\n        if type(i) == int:\n            if i > max_num:\n                max_num = i\n        elif type(i) == float:\n            if i > max_num:\n                max_num = i\n        elif type(i) == str:\n            if len(i) > len(max_num):\n                max_num = i\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\nprint(sum_div(12))  # Output: 28"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Store the length of the array in a variable\n    n = len(arr)\n\n    # Initialize two variables to keep track of the current min and max values\n    min_val = arr[0]\n    max_val = arr[n-1]\n\n    # Initialize a variable to keep track of the count of inversions\n    count = 0\n\n    # Perform two passes through the array, comparing adjacent elements\n    for i in range(1, n-1):\n        # Compare the current element with the minimum element\n        if arr[i] < min_val:\n            # If the current element is smaller than the minimum element, increment the count\n            count += n-i\n        # Compare the current element with the maximum element\n        elif arr[i] > max_val:\n            # If the current element is greater than the maximum element, decrement the count\n            count += i\n\n    # Return the count of inversions\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Count the inversions in the sorted array\n    inversions = 0\n    for i in range(1, len(arr)):\n        for j in range(0, i):\n            if arr[i] < arr[j]:\n                inversions += 1\n\n    # Return the count of inversions\n    return inversions"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the count of inversions in the array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                inv_count += n - j \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += j - i\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n\n    # Helper function to swap two elements of the array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Helper function to sort the array\n    def sort(arr, left, right):\n        if left < right:\n            pivot_index = partition(arr, left, right)\n            sort(arr, left, pivot_index - 1)\n            sort(arr, pivot_index + 1, right)\n\n    # Helper function to partition the array around a pivot\n    def partition(arr, left, right):\n        pivot = arr[right]\n        i = left - 1\n        for j in range(left, right):\n            if arr[j] <= pivot:\n                i += 1\n                swap(arr, i, j)\n        swap(arr, i + 1, right)\n        return i + 1\n\n    # Function to count inversions in the array\n    def count_inversions(arr, left, right):\n        if left < right:\n            mid = (left + right) // 2\n            count_inv_left = count_inversions(arr, left, mid)\n            count_inv_right = count_inversions(arr, mid + 1, right)\n            count_inv_full = count_inversions(arr, left, right) - count_inv_left - count_inv_right\n\n            # Sort the array\n            sort(arr, left, right)\n\n            # Count inversions of the sorted array\n            inv_count = 0\n            i = left\n            j = right\n            while i <= mid and j >= mid:\n                if arr[i] <= arr[mid]:\n                    i += 1\n                else:\n                    j -= 1\n                    count_inv_full -= mid - i + 1\n                    inv_count += mid - i + 1\n            inv_count += count_inv_left + count_inv_right\n\n            # Update the count of inversions in the original array\n            arr[left], arr[mid + 1] = arr[mid + 1], arr[left]\n            inv_count += count_inv_full + count_inv_full\n\n            return inv_count\n\n        return 0\n\n    # Get the count of inversions in the array\n    return count_inversions(arr, 0, len(arr) - 1)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    # Divide the array into two halves\n    for i in range(n):\n        left = i\n        right = n - 1\n        \n        # Find the partition index\n        while left < right:\n            if arr[left] > arr[right]:\n                left += 1\n            elif arr[left] < arr[right]:\n                right -= 1\n            else:\n                right -= 1\n        \n        # Swap the elements at i and partition index\n        arr[i], arr[left] = arr[left], arr[i]\n        \n        # Count the inversions\n        left_inv = 0\n        right_inv = 0\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                left_inv += 1\n            if arr[j] > arr[i]:\n                right_inv += 1\n        \n        # Add the inversions to the total count\n        inv_count += left_inv + right_inv\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Counting inversions using two pointers\n    i = 0\n    j = n - 1\n\n    while i < j:\n        # Find the smallest element in the remaining array\n        while i < j and arr[i] <= arr[j]:\n            i += 1\n        while i < j and arr[j] >= arr[i]:\n            j -= 1\n\n        # If the smallest element is greater than the pivot, swap them\n        if arr[i] > arr[j]:\n            inv_count += j - i + 1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j - i)\n                \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += n - j\n    return count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for element in list1:\n        if type(element) == list:\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened version of the list.\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Initialize an empty list to hold the flattened list\n    flattened = []\n\n    # Loop through each element in the input list\n    for item in list1:\n        # If the item is a list, recursively call the function on it\n        if type(item) == list:\n            flattened.extend(flatten_list(item))\n        else:\n            # Otherwise, append the item to the flattened list\n            flattened.append(item)\n\n    return flattened"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function flattens a nested list structure.\n\n    :param lst: The nested list to flatten.\n    :return: A flattened list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    if isinstance(list1, list):\n        for item in list1:\n            flatten_list(item)\n    else:\n        print(list1)"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(float)  # create a defaultdict to store maximum aggregate values\n    \n    # loop through the list of tuples\n    for i, j in stdata:\n        if i == 'Sales':\n            max_aggr['Sales'] = max(max_aggr['Sales'], j)\n        elif i == 'Purchase':\n            max_aggr['Purchase'] = max(max_aggr['Purchase'], j)\n        elif i == 'Inventory':\n            max_aggr['Inventory'] = max(max_aggr['Inventory'], j)\n    \n    # return the maximum aggregate value\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each customer\n    max_aggr = defaultdict(int)\n    \n    # Iterate over the list of tuples\n    for customer, amount in stdata:\n        # Add the amount to the maximum aggregate for the customer\n        max_aggr[customer] += amount\n    \n    # Find the maximum aggregate across all customers\n    max_aggr_total = max(max_aggr.values())\n    \n    # Return the maximum aggregate\n    return max_aggr_total"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        max_dict[item[0]] += item[1]\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = 0\n    agg_dict = defaultdict(int)\n    for sale in stdata:\n        agg_dict[sale[2]] += sale[1]\n        max_aggr = max(max_aggr, agg_dict[sale[2]])\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each month\n    max_aggs = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for month, value in stdata:\n        # Add the value to the maximum aggregate for that month\n        max_aggs[month] += value\n\n    # Find the maximum aggregate for each month\n    max_months = {month: max(value for value in stdata if value[0] == month) for month in max_aggs}\n\n    # Find the maximum aggregate for the entire year\n    max_agg = max(max_aggs.values())\n\n    # Find the month with the maximum aggregate\n    max_month = max(max_aggs, key=max_aggs.get)\n\n    # Return the maximum aggregate and the month with the maximum aggregate\n    return max_agg, max_month"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the sum of each week for each employee\n    week_dict = defaultdict(int)\n    # iterate over the list of tuples\n    for week, emp_id, emp_agg in stdata:\n        # add the sum of the current week to the employee's sum of their weeks\n        week_dict[emp_id] += emp_agg\n        # if the sum of the employee's weeks exceeds the maximum aggregate, update the maximum\n        if week_dict[emp_id] > max_agg:\n            max_agg = week_dict[emp_id]\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the maximum aggregate for each transaction\n    max_agg = defaultdict(int)\n\n    # Loop through the list of tuples and update the max_agg dictionary\n    for t in stdata:\n        max_agg[t] = max(max_agg[t], t[1])\n\n    # Find the maximum aggregate from the dictionary and return it\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    max_agg = 0\n    for item in stdata:\n        if item[0] == 'S':\n            max_agg += item[1]\n        elif item[0] == 'C':\n            max_agg -= item[1]\n        max_dict[item[0]] = max_agg\n    return max_dict"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate for each customer\n    max_dict = defaultdict(int)\n    \n    # loop through each tuple in the list\n    for customer, amount in stdata:\n        # calculate the maximum aggregate for the customer\n        max_amount = max(max_dict[customer], amount)\n        # update the maximum aggregate for the customer\n        max_dict[customer] = max_amount\n    \n    # loop through the defaultdict to find the maximum aggregate for each customer\n    max_agg = 0\n    for customer in max_dict:\n        max_agg = max(max_agg, max_dict[customer])\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each product\n    max_agg = defaultdict(int)\n\n    # Iterate through each tuple in the list of tuples\n    for product, price in stdata:\n        # Update the maximum aggregate for the current product\n        max_agg[product] = max(max_agg[product], price)\n\n    # Iterate through each product and print the maximum aggregate for that product\n    for product, max_agg_val in max_agg.items():\n        print(f\"{product}: {max_agg_val}\")"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**2*n, 2**n):\n        if sum(i//(2**n) % 2**n for _ in range(n)) == sum(i//(2**n+1) % 2**n for _ in range(n)):\n            count += 1\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Count of all binary sequences of length 2n with sum of first n bits same as sum of last n bits:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize an empty list to store all binary sequences of length 2n\n    binary_sequences = []\n\n    # Check if n is odd\n    if n % 2 == 1:\n        return \"Please enter an even number for n\"\n\n    # Initialize variables for sum of first n and last n bits\n    first_sum = 0\n    last_sum = 0\n\n    # Iterate through all possible binary sequences of length 2n\n    for i in range(2 ** (n + 1)):\n        # Convert the current binary sequence to a list\n        current_binary_seq = bin(i)[2:].zfill(2 * n)\n\n        # Calculate the sum of first n and last n bits\n        first_sum = int(current_binary_seq[:n]) + int(current_binary_seq[n:])\n\n        # If the first and last sums are equal, append the current binary sequence to the list\n        if first_sum == last_sum:\n            binary_sequences.append(current_binary_seq)\n\n    # Return the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits\n    return len(binary_sequences)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n\n    def check_sum(seq):\n        return sum(int(bit) for bit in seq)\n\n    seq = ['0'] * 2 * n\n    count = 0\n    for i in range(1, 2 ** 2 * n, 2):\n        if check_sum(seq[:i]) == check_sum(seq[i:]):\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_seq = bin(i)[2:]\n        if int(binary_seq[:n]) == int(binary_seq[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if i+j == 2**n - 1:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize count and current sum\n    count = 0\n    curr_sum = 0\n    \n    # Generate all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Extract the first n bits\n        first_n = bin(i)[2:].zfill(n)\n        # Extract the last n bits\n        last_n = bin(i)[-n:].zfill(n)\n        # Calculate the sum of first and last n bits\n        sum_first_last = int(first_n, 2) + int(last_n, 2)\n        # Check if the sum of first and last n bits is same as the current sum\n        if sum_first_last == curr_sum:\n            # Increment the count if the sum is same\n            count += 1\n        # Update the current sum with the sum of first and last n bits\n        curr_sum = sum_first_last\n    \n    # Return the count of all binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if sum(int(digit) for digit in bin(i)[2:].zfill(n)) == sum(int(digit) for digit in bin(j)[2:].zfill(n)):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n    first = [0]*(2*n)\n    last = [0]*(2*n)\n\n    for i in range(2*n):\n        first[i] = (i//2)*2+1\n        last[i] = (i//2)*2+2\n\n    count += sum(first[0:n]) == sum(last[n:])\n\n    for i in range(1, len(first)//2):\n        if first[i] == last[i]:\n            count += sum(first[i:i+n]) == sum(last[i+n:])\n\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Generate all possible binary sequences of length 2n\n    binary_seq = []\n    for i in range(2**n):\n        binary_seq.append(bin(i)[2:])\n    # Initialize the counter\n    count = 0\n    # Iterate through all possible binary sequences\n    for i in range(len(binary_seq)):\n        # Get the first and last n bits\n        first_n_bits = binary_seq[i][:n]\n        last_n_bits = binary_seq[i][-n:]\n        # If the sum of the first n bits is same as the sum of the last n bits, increment the counter\n        if int(first_n_bits, 2) + int(last_n_bits, 2) == int((first_n_bits + last_n_bits), 2):\n            count += 1\n    # Return the count\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # initialize variables\n    count = 0\n    prev_sum = 0\n    curr_sum = 0\n\n    # loop through all possible binary sequences of length 2n\n    for i in range(2 ** n):\n        # convert binary sequence to integer\n        curr_seq = int(bin(i)[2:], 2)\n\n        # check if the current sequence satisfies the condition\n        if curr_sum == prev_sum:\n            # increment count and update previous and current sums\n            count += 1\n            prev_sum = curr_sum + (2 ** n) - 1\n            curr_sum = 0\n\n        # add current sequence to the sum\n        curr_sum += curr_seq\n\n    # return the count of binary sequences\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth to 0\n    depth = 0\n    # loop through the dictionary keys and values\n    for key, value in d.items():\n        # if the value is another dictionary, recursively call the function\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        # if the value is not a dictionary, increase the depth by 1\n        else:\n            depth += 1\n    # return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # base case: dictionary has no sub-dictionaries\n    if not any(isinstance(v, dict) for v in d.values()):\n        return 1\n    # recursive case: dictionary has sub-dictionaries\n    else:\n        return max(dict_depth(v) for v in d.values()) + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if isinstance(d, dict):\n        for v in d.values():\n            if isinstance(v, dict):\n                depth += 1\n            else:\n                depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            pass\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for v in d.values())\n    else:\n        depth = 0\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for k, v in d.items())\n        return depth\n    else:\n        return 0"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count = 0\n    for i in range(index, len(arr)):\n        count += 1\n        if count == rotations:\n            if arr[i] in ranges:\n                return arr[i]\n            else:\n                count = 0\n\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Find element at a given index after rotations\n    '''\n    for i in range(len(ranges)):\n        arr.rotate(rotations[i])\n        if index >= ranges[i][0]:\n            return arr[index - ranges[i][0]]\n        index -= (ranges[i][1] - ranges[i][0]) + 1\n        arr.rotate(-rotations[i])\n    raise ValueError(\"Index out of range\")"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for _ in range(rotations):\n        arr = rotate_arr(arr, ranges)\n    return arr[index]\n\ndef rotate_arr(arr, ranges):\n    '''\n    Helper function to rotate array based on given ranges.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i in ranges:\n            if arr[i]!= 0:\n                j = i\n                while arr[j] == 0 and j < n - 1:\n                    j += 1\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize the count of rotations for each range\n    count_rot = [0] * len(ranges)\n\n    # Initialize the count of elements in the first range\n    count_rot[0] = arr[ranges[0][0]]\n\n    # Iterate over the remaining ranges and the number of rotations\n    for i in range(1, len(ranges)):\n        count_rot[i] = count_rot[i-1] * ranges[i][1]\n\n    # Initialize the total count of elements in the array\n    total_count = 1\n\n    # Iterate over the number of rotations\n    for i in range(rotations):\n        # Get the current count of elements in the array\n        current_count = 1\n        for j in range(len(ranges)):\n            current_count *= count_rot[j]\n\n        # Calculate the index after the current rotation\n        new_index = (index * current_count) % total_count\n\n        # Count the element at the new index\n        count_rot[ranges[new_index][0]] += 1\n\n        # Update the total count of elements in the array\n        total_count *= count_rot[ranges[new_index][0]]\n\n    # Return the element at the final index\n    return arr[ranges[index][0]]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, the number of rotations, and the index as input.\n    It returns the element at the given index after the given number of rotations.\n    \"\"\"\n\n    # Initialize variables to keep track of the current rotation and the current position\n    current_rotation = 0\n    current_position = index\n\n    # Loop through the ranges and rotations until we find the element\n    while True:\n        # Update the current position by adding the current rotation to the current position\n        current_position += rotations[current_rotation]\n\n        # If the current position is within the range of the array, return the element at that position\n        if current_position >= len(arr):\n            current_position -= rotations[current_rotation]\n            current_rotation += 1\n            if current_rotation == len(rotations):\n                current_rotation = 0\n            return arr[current_position]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a range of rotations, and the index of the element to find after rotations.\n    The function then rotates the array by the given number of rotations and returns the element at the specified index.\n    \"\"\"\n    arr = arr.copy()\n    rotations %= len(arr)\n\n    for i in range(rotations):\n        arr = arr[1:] + [arr[0]]\n\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    if rotations == 0:\n        return arr[index]\n\n    # Calculate the new index after rotations\n    new_index = (index - rotations) % len(arr)\n\n    # Find the element at the new index\n    element = find_Element(arr, ranges, rotations - 1, new_index)\n\n    # If the new element is in the given range, return it\n    if element in ranges:\n        return element\n\n    # If the new element is outside the given range, repeat the process\n    return find_Element(arr, ranges, rotations - 1, new_index)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr.append(arr.pop(index))\n    result = arr[index]\n    for i in range(rotations):\n        temp = arr[0]\n        for j in range(len(arr)-1):\n            arr[j] = arr[j+1]\n        arr[-1] = temp\n    for i in range(index):\n        if i not in ranges:\n            arr.append(arr.pop(i))\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, a list of ranges, and a number of rotations to perform, and an index.\n    It then returns the element at the given index after the number of rotations.\n    '''\n    # Initialize variables to keep track of the current index and the number of rotations\n    current_index = 0\n    count = 0\n\n    # Loop through the array and perform rotations until we reach the desired index\n    while current_index!= index:\n        # If the current index is within the range of the current rotation, rotate the array\n        if ranges[current_index][0] <= count < ranges[current_index][1]:\n            count += 1\n            arr = rotate_array(arr, count, rotations)\n        # Increment the current index and the count for the next rotation\n        current_index += 1\n        count = 0\n\n    # Return the element at the given index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize variables\n    current_index = index\n    count = 0\n    n = len(arr)\n    \n    # Find the element at the given index after rotations\n    while (count < rotations) and (current_index < n):\n        current_index = (current_index + ranges[current_index]) % n\n        count += 1\n    \n    # If the element is not found after rotations, return -1\n    if current_index == n:\n        return -1\n    \n    # Find the element at the given index after rotations using binary search\n    left, right = 0, n-1\n    while (left <= right) and (current_index!= arr[current_index]):\n        mid = (left + right) // 2\n        if arr[mid] < arr[current_index]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If the element is found using binary search, return its index\n    if current_index == arr[current_index]:\n        return mid\n    \n    # If the element is not found using binary search, return -1\n    return -1"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'\\b[Pp]\\w+\\b',''.join(words))\n    return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # create a regular expression to match words starting with letter 'p'\n    pattern = re.compile(r'^p[a-zA-Z]*')\n\n    # iterate over the list of words and find the ones starting with letter 'p'\n    for word in words:\n        if pattern.match(word):\n            return word, words.pop(words.index(word))\n\n    # if no words starting with letter 'p' are found, return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p\\w*'\n    for word in words:\n        match = re.search(pattern, word)\n        if match:\n            return word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+$')\n    for i in range(len(words)):\n        if pattern.match(words[i]):\n            return words[i], words[i+1]\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r'^p.*'\n    matches = re.findall(pattern, words)\n    if matches:\n        return matches[0], matches[1]\n    else:\n        return \"No words starting with 'p' found in the list.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-zA-Z]*'\n    matches = re.findall(pattern, words)\n    if matches:\n        return matches[0], matches[1]\n    else:\n        return 'No matches found'"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0].lower() == 'p']\n    if len(p_words) >= 2:\n        return p_words[0], p_words[1]\n    else:\n        return \"No two words starting with 'p' were found.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word.startswith('p')]\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r\"^p\\w+$\") # regular expression pattern to find words starting with 'p'\n    for word in words:\n        if pattern.match(word):\n            return word, pattern.sub('', word) # return the two words and remove 'p' if present from the pattern match\n    return None, None # if no 'p' words are found in the list"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "Finally, it returns max_sum, which represents the maximum sum of increasing subsequence up to the given kth element and including it."
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n\n    Parameters:\n    a: list of integers\n    n: integer\n    index: integer\n    k: integer\n\n    Returns:\n    integer: maximum sum of increasing subsequence including kth element\n    \"\"\"\n    # create a dictionary to store the sum of increasing subsequences up to index i\n    dp = {}\n    # create an empty list to store the maximum sum of increasing subsequence including kth element\n    max_sum_including_k = []\n    # loop through the array from 0 to n-1\n    for i in range(n):\n        # initialize the sum of increasing subsequence to 0\n        curr_sum = 0\n        # loop through the array from index i to k-1 and calculate the sum of increasing subsequence up to index i\n        for j in range(i, k):\n            # if the element at index j is greater than the element at index i, add it to the current sum\n            if a[j] > a[i]:\n                curr_sum += a[j]\n        # if the current sum is greater than the sum of increasing subsequence up to index i, update the sum of increasing subsequence up to index i and add the current sum to the max_sum_including_k list\n        if curr_sum > dp.get(i, 0):\n            dp[i] = curr_sum\n            max_sum_including_k = [dp[i]]\n        # if the current sum is equal to the sum of increasing subsequence up to index i, add the current sum to the max_sum_including_k list\n        elif curr_sum == dp.get(i, 0):\n            max_sum_including_k.append(dp[i])\n        # check if the current sum is greater than the maximum sum of increasing subsequence including kth element, update the maximum sum of increasing subsequence including kth element and add the current sum to the max_sum_including_k list\n        if curr_sum > max(max_sum_including_k):\n            max_sum_including_k = [curr_sum]\n    # return the maximum sum of increasing subsequence including kth element\n    return max(max_sum_including_k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k == index:\n        return 0\n\n    if index > k:\n        return 0\n\n    if index == 0:\n        return a[k]\n\n    max_ending_here = max_sum_increasing_subseq(a, n, index - 1, k)\n\n    if a[index] > a[k]:\n        return max_ending_here + a[index]\n    else:\n        return max_ending_here"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    dp[index] = a[index]\n    max_sum = dp[index]\n\n    for i in range(index + 1, n):\n        if a[i] > a[index]:\n            dp[i] = dp[index] + a[i]\n        elif a[i] == a[index]:\n            dp[i] = dp[index]\n        else:\n            dp[i] = dp[i - 1]\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n\n    if k <= index:\n        return max_sum\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize maximum sum to 0\n    max_sum = 0\n    \n    # Initialize array to store subsequences\n    seq = []\n    \n    # Traverse array from i+1 to n-1\n    for i in range(index+1, n):\n        # Check if the next element is greater than k\n        if a[i] > a[k]:\n            # Add the current element to the subsequence and update the maximum sum\n            seq.append(a[i])\n            if len(seq) == 1:\n                max_sum = a[i]\n            else:\n                max_sum = max(max_sum, a[i] + max_sum)\n                \n        # If the next element is less than or equal to k, remove the last element from the subsequence and update the maximum sum\n        else:\n            # Check if the subsequence is non-empty\n            if len(seq) > 0:\n                # Remove the last element from the subsequence and update the maximum sum\n                seq.pop()\n                if len(seq) == 0:\n                    max_sum = 0\n                else:\n                    max_sum = max(max_sum, a[k] + max_sum)\n    \n    # Return the maximum sum of increasing subsequence from prefix until ith index and including a given kth element which is after i\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    max_sum_ending_at_i = 0\n\n    # Check if current index is k\n    if k > index:\n        return max_sum_ending_at_i\n\n    # Iterate through remaining elements and add elements to subsequences\n    for i in range(index, n):\n        if a[i] < a[i-1]:\n            current_sum += a[i] - a[i-1]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_ending_at_i = a[i]\n            elif current_sum == max_sum and a[i] > max_sum_ending_at_i:\n                max_sum_ending_at_i = a[i]\n        else:\n            current_sum = 0\n\n    # Check if max sum ending at kth index is greater than max sum starting from index\n    if max_sum_ending_at_i > max_sum:\n        return max_sum_ending_at_i\n    else:\n        return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # create an empty list to store the maximum sum of increasing subsequence till i\n    max_sum_subseq = [0] * n\n    \n    # create an empty list to store the index of maximum sum of increasing subsequence till i\n    max_sum_subseq_index = [0] * n\n    \n    # initialize the maximum sum of increasing subsequence till i to 0\n    max_sum_subseq[0] = a[0]\n    \n    # initialize the index of maximum sum of increasing subsequence till i to 0\n    max_sum_subseq_index[0] = 0\n    \n    # initialize the current sum of increasing subsequence till i to 0\n    current_sum = 0\n    \n    # loop through all i from 1 to n-1\n    for i in range(1, n):\n        \n        # if the current index is less than k\n        if index < k:\n            # add the current element to the current sum\n            current_sum += a[i]\n            \n            # if the current sum is greater than the maximum sum of increasing subsequence till i\n            if current_sum > max_sum_subseq[i-1]:\n                # update the maximum sum of increasing subsequence till i\n                max_sum_subseq[i] = current_sum\n                # update the index of maximum sum of increasing subsequence till i\n                max_sum_subseq_index[i] = i\n        else:\n            # set the current sum to the maximum sum of increasing subsequence till i-1\n            current_sum = max_sum_subseq[i-1]\n    \n    # initialize the maximum sum to the maximum sum of increasing subsequence till i-1\n    max_sum = max_sum_subseq[n-1]\n    \n    # initialize the maximum sum index to the index of maximum sum of increasing subsequence till i-1\n    max_sum_index = max_sum_subseq_index[n-1]\n    \n    # loop through all i from k to n-1\n    for i in range(k, n):\n        \n        # if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            # update the maximum sum\n            max_sum = current_sum\n            # update the maximum sum index\n            max_sum_index = i\n        \n        # add the current element to the current sum\n        current_sum += a[i]\n        \n        # if the current sum is greater than the maximum sum of increasing subsequence till i\n        if current_sum > max_sum_subseq[i-1]:\n            # update the maximum sum of increasing subsequence till i\n            max_sum_subseq[i] = current_sum\n            # update the index of maximum sum of increasing subsequence till i\n            max_sum_subseq_index[i] = i\n    \n    # return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n    return max_sum_subseq_index[n-1], max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    \n    if index == n:\n        return a[n-1]\n    \n    dp = [0]*(n+1)\n    dp[0] = 0\n    \n    for i in range(1, n+1):\n        if i <= k:\n            dp[i] = a[i-1]\n        else:\n            temp = max(dp[j] + a[i-1] for j in range(1, i))\n            dp[i] = temp\n            \n    return dp[n]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    temp = [0] * n\n    temp[0] = a[0]\n    for i in range(1, n):\n        if temp[i-1] < a[i]:\n            current_sum += a[i]\n        else:\n            current_sum = a[i]\n        if current_sum > max_sum and i < k:\n            max_sum = current_sum\n        if i == index:\n            current_sum -= temp[i-1]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n    if k > index:\n        return 0\n\n    max_so_far = max_ending_here = a[index]\n\n    for i in range(index + 1, n + 1):\n        if a[i] > a[index] and a[i] > max_ending_here:\n            max_ending_here = a[i]\n        elif a[i] > max_ending_here:\n            max_ending_here = max_ending_here + a[i] - a[index]\n\n        if a[i] > a[index] and i <= k:\n            max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n\n    # Check if the input is valid or not\n    if not isinstance(tuplex, tuple) or len(tuplex)!= m:\n        return None\n\n    # Create a new tuple with m+n elements\n    new_tuplex = deepcopy(tuplex)\n    for i in range(len(new_tuplex), m+n):\n        new_tuplex += (0,)\n\n    # Return the new tuple\n    return tuple(new_tuplex[:n])"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # check if the length of the tuple is greater than 1\n    if len(tuplex) > 1:\n        # check if m and n are within the range of the tuple\n        if m >= 0 and m < len(tuplex[0]) and n >= 0 and n < len(tuplex[0]):\n            # copy the tuple\n            colontup = deepcopy(tuplex)\n            # get the element at position m and n\n            colontup[0] = colontup[0][:m] + (tuplex[0][m],) + colontup[0][m+1:]\n            colontup[1] = colontup[1][:n] + (tuplex[1][n],) + colontup[1][n+1:]\n            # return the colon of the tuple\n            return colontup\n        else:\n            return None\n    else:\n        return None"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Returns a colon of a tuple with dimensions (m,n).\n    \"\"\"\n    new_tuplex = deepcopy(tuplex)\n    return tuple(zip(*[new_tuplex[i:i+m] for i in range(0, len(new_tuplex), m)]))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_list = []\n    for i in range(m):\n        for j in range(n):\n            colon_list.append(tuplex[i][j])\n    return colon_list"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)\n    for i in range(m):\n        colon = tuple(colon[j] for j in range(n) if j < len(tuplex)-1)\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Returns a list of tuples where each tuple contains n columns from the original tuple.\n\n    :param tuplex: The tuple to take the columns from.\n    :param m: The number of columns to take.\n    :param n: The number of columns per tuple.\n    :return: A list of tuples, where each tuple contains n columns from the original tuple.\n    \"\"\"\n    # Create an empty list to store the colon tuples\n    colon_tuples = []\n    \n    # Take the first n columns from the original tuple\n    col = tuplex[:n]\n    \n    # Create a new tuple with the first n columns\n    new_tup = tuple(col)\n    \n    # Repeat the process for the remaining columns\n    for i in range(1,m):\n        # Take the next n columns from the original tuple\n        col = tuplex[i*n:(i+1)*n]\n        # Create a new tuple with the next n columns\n        new_tup = tuple(col)\n        # Add the new tuple to the colon_tuples list\n        colon_tuples.append(new_tup)\n    \n    return colon_tuples"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            result[i] = result[i][:j] + (result[i][j],) + result[i][j+1:]\n    return result"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the original tuple\n    new_tuplex = deepcopy(tuplex)\n    # create a new list to store the colon\n    new_colon = []\n    # loop over the rows of the new tuple\n    for row in range(m):\n        # loop over the columns of the new tuple\n        for col in range(n):\n            # get the value of the tuple at row and col\n            value = new_tuplex[row][col]\n            # add the value to the colon list\n            new_colon.append(value)\n    # return the colon list\n    return new_colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    row = deepcopy(tuplex)\n    for i in range(m):\n        row[i] = [row[i][j] for j in range(n)]\n    return tuple(row)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the dimensions of the tuple and the matrix are compatible\n    if len(tuplex)!= m*n:\n        print('Error: Tuple dimensions do not match matrix dimensions.')\n        return None\n    \n    # Create a copy of the tuple to avoid modifying the original\n    col = deepcopy(tuplex)\n    \n    # Iterate over the rows of the matrix\n    for i in range(m):\n        # Iterate over the columns of the row\n        for j in range(n):\n            # Set the value at column j in the current row to the value at column i\n            col[i*n+j] = tuplex[i*n+j]\n    \n    return col"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list\n    result = []\n\n    # Loop through the N smallest elements from both lists\n    for i in range(N):\n        # Find the product of the largest element in nums1 and the smallest element in nums2\n        product1 = nums1[i] * nums2[0]\n\n        # Find the product of the largest element in nums2 and the smallest element in nums1\n        product2 = nums2[i] * nums1[0]\n\n        # Compare the two products and add the larger one to the result list\n        if product1 > product2:\n            result.append(product1)\n        else:\n            result.append(product2)\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Find the maximum value in each list\n    max_1 = max(nums1)\n    max_2 = max(nums2)\n    \n    # Initialize a list to store the products of the largest factors\n    product_list = []\n    \n    # Iterate through the numbers of products to find\n    for i in range(N):\n        \n        # Find the product of the two largest factors from each list\n        product = max_1 * max_2\n        \n        # Add the product to the list of products\n        product_list.append(product)\n        \n        # Remove the largest factor from each list\n        max_1 = max(nums1, key=nums1.count)\n        max_2 = max(nums2, key=nums2.count)\n    \n    # Return the list of products\n    return product_list"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n    largest_products = []\n    for i in range(N):\n        largest_products.append(nums1[i] * nums2[i])\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize two variables to store the maximum and minimum values of the two input lists\n    max_product = nums1[0] * nums2[0]\n    min_product = nums1[0] * nums2[0]\n    \n    # Iterate through the input lists up to the specified number of products\n    for i in range(1, N):\n        # Calculate the product of the two smallest numbers in the input lists\n        product = nums1[i] * nums2[i]\n        \n        # Update the maximum and minimum values of the two input lists if the product is greater than the current maximum and minimum values\n        if product > max_product:\n            max_product = product\n            min_product = nums1[i-1] * nums2[i-1]\n        elif product < min_product:\n            min_product = product\n            max_product = nums1[i-1] * nums2[i-1]\n    \n    return max_product, min_product\n"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Find the largest product of any two factors\n    largest_product = max(nums1[0] * nums2[0], nums1[0] * nums2[1], nums1[1] * nums2[0], nums1[1] * nums2[1])\n\n    # Find the indices of the largest products\n    largest_product_indices = [0, 0]\n\n    # Iterate through the list of factors and find the largest product indices\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = nums1[i] * nums2[j]\n            if product > largest_product:\n                largest_product = product\n                largest_product_indices = [i, j]\n\n    # Select the N largest products\n    largest_products = [0] * N\n    for i in range(N):\n        largest_products[i] = nums1[largest_product_indices[0]] * nums2[largest_product_indices[1]]\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = nums1[i] * nums2[j]\n            if product > max_product:\n                max_product = product\n                if max_product >= N:\n                    return max_product\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        return None\n    largest_products = []\n    for i in range(N):\n        largest_products.append(max(nums1[i], nums2[i]))\n    return max(largest_products)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = max(nums1[i]*nums2[j], nums2[j]*nums1[i])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the maximum and current products\n    max_product = 0\n    current_product = 1\n\n    # Iterate over the N products to find\n    for i in range(N):\n        # Multiply the current products and add the two factors\n        current_product = current_product * nums1[i] * nums2[i]\n\n        # Update the maximum product if necessary\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize the largest products and their indices\n    largest_products = []\n    indices = []\n    \n    # Loop through the sorted lists\n    for i in range(N):\n        # Find the product of the two largest factors\n        product = nums1[i] * nums2[i]\n        \n        # Add the product and its index to the list\n        largest_products.append(product)\n        indices.append((i, i))\n    \n    # Sort the list of products in descending order\n    largest_products.sort(reverse=True)\n    \n    # Return the largest products and their indices\n    return largest_products, indices"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function finds the maximum of two numbers using if-else statement.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as arguments and returns the maximum of them.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple of characters\n    return tuple(lst)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # initialize an empty tuple\n    result = ()\n    # iterate over each character in the string\n    for char in str1:\n        # append the character to the tuple\n        result += (char,)\n    # return the tuple of characters\n    return result"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple of characters\n    return tuple(lst)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function sets the left most unset bit in a given integer.\n    '''\n    # Initialize a variable to keep track of the number of set bits\n    count = 0\n    # Initialize a variable to keep track of the rightmost set bit\n    rightmost_set_bit = 0\n    \n    # Iterate through the bits of the integer in reverse order\n    for i in range(31, -1, -1):\n        # Check if the current bit is set\n        if n & (1 << i):\n            # Increment the count of set bits\n            count += 1\n            # If the count is equal to the rightmost set bit, update the rightmost set bit\n            if count == rightmost_set_bit:\n                rightmost_set_bit = i\n    \n    # If the rightmost set bit is 0, the integer has no unset bits to the left\n    if rightmost_set_bit == 0:\n        return n\n    \n    # Shift the integer to the left by the number of set bits to the right\n    shifted_n = n << rightmost_set_bit\n    \n    # Set the left most unset bit to 1\n    shifted_n |= 1\n    \n    return shifted_n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the mask to set the left most unset bit to 1\n    mask = 1 << (32 - n.bit_length())\n\n    # Set the left most unset bit to 1\n    return n | mask"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Check if the number is already a power of 2\n    if n & (n - 1) == 0:\n        # If it is, shift all the bits to the right to clear the leftmost bit\n        n >>= 1\n        # Shift the bits to the left to set the leftmost bit\n        n <<= 1\n        # Return the shifted bits\n        return n\n    # If the number is not a power of 2, find the leftmost unset bit and set it to 1\n    else:\n        # Initialize the leftmost unset bit to 1\n        unset_bit = 1\n        # While the leftmost unset bit is not a power of 2, find the next unset bit\n        while n & (unset_bit << 1) == 0:\n            unset_bit <<= 1\n        # Shift the bits to the left to set the leftmost bit\n        n <<= unset_bit\n        # Return the shifted bits\n        return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    while n & 1 == 0:\n        n >>= 1\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize count to 0\n    count = 0\n\n    # Iterate over each bit in the binary representation of n\n    while n:\n        # If the bit is 1, increment count\n        if n & 1:\n            count += 1\n        # Shift right by 1\n        n >>= 1\n\n    # Set the left most unset bit to 1\n    n |= 1 << count\n\n    # Return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize an array to store all set bits in n\n    set_bits = []\n    while n!= 0:\n        if n & 1 == 1:\n            set_bits.append(n)\n        n >>= 1\n    \n    # Find the leftmost unset bit and set it to 1\n    if len(set_bits) == 0:\n        return n\n    \n    unset_bit = max(set_bits)\n    n |= unset_bit\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    This function sets the left most unset bit in a given integer.\n    \"\"\"\n    # Initialize the bitwise AND of all bits in n with 0.\n    bitwise_and = n & 0xFFFFFFFF\n    \n    # Initialize the count of set bits in bitwise_and.\n    count = 0\n    while bitwise_and:\n        count += 1\n        bitwise_and &= bitwise_and - 1\n    \n    # Calculate the position of the leftmost unset bit by subtracting the count from the bit length of n.\n    position = 32 - count\n    \n    # Set the leftmost unset bit to 1.\n    n |= 1 << position\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    n |= 1 << 32\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function takes an integer 'n' and sets the left most unset bit in it.\n    '''\n    # Initialize a variable to keep track of the leftmost unset bit\n    left_most_unset_bit = 1\n    \n    # Loop through all bits in the binary representation of 'n'\n    while (n & left_most_unset_bit) == 0:\n        left_most_unset_bit <<= 1\n    \n    # Set the leftmost unset bit in 'n'\n    n |= left_most_unset_bit\n    \n    # Return the updated value of 'n'\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Check if the number is already set to 0\n    if n == 0:\n        return 0\n    \n    # Find the leftmost unset bit\n    while n & 1 == 0:\n        n >>= 1\n    \n    return n << 1"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r**2 * h\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (1/3)*math.pi*(r**2)*h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments: radius of the cone (r) and height (h)\n    and returns the volume of the cone.\n    '''\n\n    # Calculate the volume of the cone using the formula V = 1/3 * \u03c0 * r^2 * h\n    V = (1/3) * math.pi * (r**2) * h\n\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r ** 2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r*r*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculates the volume of a cone with a base radius r and a height h.\n    '''\n    volume_sphere = (4/3) * math.pi * r ** 3\n    volume_cone = (1/3) * math.pi * r ** 2 * h\n    return volume_cone - volume_sphere"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r * h\n    return V"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    # loop until n becomes 0\n    while n > 0:\n        # find the highest power of 2 less than or equal to n\n        highest_power_of_2 = 1 << (n.bit_length() - 1)\n        if highest_power_of_2 > n:\n            highest_power_of_2 = n\n        # return the highest power of 2 less than or equal to n\n        return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i < n:\n        i = i << 1\n        \n    return i\n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1:\n        n = n >> 1\n        power += 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to store the highest power of 2 that is less than or equal to n\n    highest_power = 1\n\n    # Loop through all numbers from 2 to n\n    for num in range(2, n+1):\n        # If the number is a power of 2, update the highest_power variable\n        if num == 2 ** highest_power:\n            highest_power += 1\n\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n // 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n\n    # Find the highest power of 2 that is less than or equal to n\n    power = 1\n    while power <= n:\n        power <<= 1\n\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n >>= 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 as 1\n    highest = 1\n    # Loop until the highest power of 2 is less than or equal to n\n    while highest <= n:\n        # If the highest power of 2 is equal to n, return it\n        if highest == n:\n            return highest\n        # Otherwise, increase the highest power of 2 by 1\n        highest <<= 1\n    # If the loop runs to here, it means that no power of 2 is less than or equal to n, so return -1\n    return -1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(1, n+1):\n        if i == 1:\n            continue\n        if i & (i-1) == 0:\n            return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    if n <= 1:\n        return 1\n    \n    i = 0\n    while 2**i <= n:\n        i += 1\n    \n    return i"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Initialize the first two numbers of the sequence\n    a = 2\n    b = 1\n    # Loop through the sequence n times\n    for i in range(2, n+1):\n        # Calculate the next number in the sequence\n        c = a + b\n        # Update the values of a and b for the next iteration\n        a = b\n        b = c\n    # Return the nth number in the sequence\n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas_numbers = [0, 1]\n    for i in range(2, n+1):\n        lucas_numbers.append(lucas_numbers[i-1] + lucas_numbers[i-2])\n    return lucas_numbers[n]\n\nn = int(input(\"Enter the number of lucas numbers you want to find: \"))\nprint(find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n\n    # Initialize the first two lucas numbers as 2 and 1\n    a, b = 2, 1\n\n    # Loop through the rest of the lucas numbers\n    for i in range(2, n + 1):\n        # Calculate the next lucas number\n        c = a + b\n\n        # Update the values of a and b for the next iteration\n        a, b = b, c\n\n    # Return the nth lucas number\n    return a"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return 2\n    else:\n        lucas_number = 2\n        for i in range(2, n + 1):\n            lucas_number = (lucas_number * (4 * i - 3)) // (i * (i - 1))\n        return lucas_number\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th Lucas number is\", find_lucas(n))"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % (i + 1)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    # Loop through each element in the list\n    for i in range(len(list_)):\n        # Apply the format string to the element and store the result\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for element in list_:\n        formatted_list.append(string.format(element))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n    # loop through each list and add its elements to the result dictionary\n    for i, lst in enumerate([l1, l2, l3]):\n        for elem in lst:\n            if elem in result:\n                result[elem].append(i)\n            else:\n                result[elem] = [i]\n    # return the final result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize empty dictionary\n    nested_dict = {}\n    # loop through each list\n    for i in range(len(l1)):\n        # loop through each element in list\n        for j in range(len(l1[i])):\n            # if element is a string, add it to dictionary\n            if isinstance(l1[i][j], str):\n                if l1[i][j] not in nested_dict:\n                    nested_dict[l1[i][j]] = {}\n                nested_dict[l1[i][j]][l2[i][j]] = l3[i][j]\n    # return nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    result_dict = {}\n    \n    # Iterate over the lists\n    for i in range(len(l1)):\n        # Add the first list to the dictionary as a key\n        result_dict[l1[i]] = l2[i]\n        # Add the second list to the dictionary as a value\n        result_dict[l1[i]].append(l3[i])\n    \n    # Return the final dictionary\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n        if len(l3) > 0:\n            d[l1[i]] = d[l1[i]] + {'nested': l3[i]}\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Converting the first list into a dictionary\n    d1 = {i: l1[i] for i in range(len(l1))}\n    \n    # Converting the second list into a dictionary\n    d2 = {i: l2[i] for i in range(len(l2))}\n    \n    # Converting the third list into a dictionary\n    d3 = {i: l3[i] for i in range(len(l3))}\n    \n    # Combining the three dictionaries into a nested dictionary\n    data = {**d1, **d2, **d3}\n    \n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    data = {}\n    for l in args:\n        for i, item in enumerate(l):\n            if isinstance(item, list):\n                if i in data:\n                    data[i].append(item)\n                else:\n                    data[i] = [item]\n            else:\n                if i in data:\n                    data[i].append(item)\n                else:\n                    data[i] = [item]\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize an empty dictionary\n    nested_dict = {}\n    \n    # loop through each list and add its elements to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[str(l1[i])] = l2[i]\n        nested_dict[str(l1[i]) + str(l3[i])] = l3[i]\n        \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Create an empty dictionary\n    final_dict = {}\n\n    # Loop through the first list\n    for i in range(len(l1)):\n\n        # Create a new key for the dictionary\n        key = str(i)\n\n        # Loop through the second list\n        for j in range(len(l2)):\n\n            # If the value in the list is not None, add it to the dictionary\n            if l2[j] is not None:\n                if key in final_dict:\n                    final_dict[key].append(l2[j])\n                else:\n                    final_dict[key] = [l2[j]]\n\n        # Loop through the third list\n        for k in range(len(l3)):\n\n            # If the value in the list is not None, add it to the dictionary\n            if l3[k] is not None:\n                if key in final_dict:\n                    final_dict[key].append(l3[k])\n                else:\n                    final_dict[key] = [l3[k]]\n\n    return final_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    # Loop through the list of lists\n    for i in range(len(l1)):\n        # Create a new dictionary to store the key-value pairs from each list\n        new_dict = {}\n        # Loop through the key-value pairs from the first list\n        for j in range(len(l1[i])):\n            # Append the key-value pair to the new dictionary\n            new_dict[l1[i][j]] = l2[i][j]\n        # Add the new dictionary to the nested dictionary\n        nested_dict[l3[i]] = new_dict\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n) is:\", get_max_sum(n))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    if n % 2 == 0:\n        return get_max_sum(n/2) + n\n    \n    if n % 3 == 0:\n        return max(get_max_sum(n/3), get_max_sum(n/6)) + n\n    \n    if n % 4 == 0:\n        return max(get_max_sum(n/4), get_max_sum(n/8)) + n\n    \n    if n % 5 == 0:\n        return max(get_max_sum(n/5), get_max_sum(n/10)) + n\n    \n    return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # if n is 1, the maximum sum is 1\n    if n == 1:\n        return 1\n    \n    # if n is greater than 1, calculate the maximum sum by adding the sum of the first 4 terms and n\n    max_sum = n + get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4)\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case\n    if n == 1:\n        return n\n\n    # Recursive case\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n == 1:\n        return 1\n\n    elif n == 2:\n        return 3\n\n    elif n == 3:\n        return 8\n\n    elif n == 4:\n        return 15\n\n    elif n == 5:\n        return 24\n\n    elif n == 6:\n        return 35\n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    if n % 2 == 0:\n        return (get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n)\n    \n    return (get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)) + n\n\nn = int(input(\"Enter a number: \"))\nprint(\"The maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n) for n =\", n, \"is:\", get_max_sum(n))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 14\n    elif n == 4:\n        return 43\n    elif n == 5:\n        return 132\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    # Base case: sum of n and 0 is n\n    if n == 0:\n        return n\n    \n    # Recursive case: sum of n and the maximum sum of n/2, n/3, n/4, and n/5\n    else:\n        return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        max_sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n\n        return max(max_sum, n)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n) is:\", get_max_sum(n))"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with maximum length.\n    '''\n    # initialize maximum length to zero\n    max_len = 0\n    \n    # loop through the list and keep track of the length of each item\n    for item in input_list:\n        len_item = len(str(item))\n        \n        # if the current item is longer than the current maximum, update the maximum\n        if len_item > max_len:\n            max_len = len_item\n    \n    # create a new list with only the items that have the maximum length\n    max_list = [item for item in input_list if len(str(item)) == max_len]\n    \n    # return the maximum length list\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize variables to store the maximum and minimum lengths of the list\n    max_length = 0\n    min_length = len(input_list[0])\n\n    # Iterate over the list and update the minimum and maximum lengths as required\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n        elif len(input_list[i]) < min_length:\n            min_length = len(input_list[i])\n\n    # Return the list with the maximum length\n    return input_list[input_list.index(max_length)]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    set_tup = set(test_tup)\n    # Check if the length of the set is equal to the length of the original tuple\n    if len(set_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # create a set to store unique elements in the tuple\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    return len(unique_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert tuple to a set to remove duplicates\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    unique_tup = set(test_tup)\n    # Check if the length of the set is equal to the length of the original tuple\n    if len(unique_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # iterate over the dictionary and find the first character with count 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    # if no character has count 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(string):\n    '''\n    This function takes a string as input and returns the first non-repeated character in the string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Iterate over each character in the string\n    for char in string:\n        # If the character is already in the dictionary, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n            \n    # Iterate over each character in the string again to find the first non-repeated character\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first character with frequency 1\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # If no character has frequency 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # iterate through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # iterate through the dictionary and find the first non-repeating character\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # loop through the string again and check if the current character is not in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] -= 1\n            if char_count[char] == 0:\n                return char\n    \n    # if the loop completes without returning, it means all characters are repeating\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(string):\n    # initialize an empty dictionary to store character counts\n    char_count = {}\n    \n    # iterate over the string and count the occurrences of each character\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # iterate over the character counts dictionary and find the first non-repeated character\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # loop through the string and count the number of occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first character in the string that has a count of 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # if no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store character frequencies\n    char_freq = {}\n    \n    # iterate through the string and update the frequency count\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n            \n    # iterate through the dictionary to find the first non-repeating character\n    for char, freq in char_freq.items():\n        if freq == 1:\n            return char\n    \n    # if all characters are repeating, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the counts of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate over the dictionary and find the first non-repeated character\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    # If all characters are repeated, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the count of each character\n    char_count = {}\n\n    # Iterate through the string and update the count of each character in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate through the dictionary to find the first character with count 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    # If no character has count 1, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    This function takes a string as input and returns True if it starts and ends with the same character, otherwise it returns False.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return re.match(regex, string)"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string) is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Check if the string matches the given regex pattern\n    if re.match(regex, string):\n        # Return True if the string matches the regex pattern\n        return True\n    else:\n        # Return False if the string does not match the regex pattern\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Calculate the median\n    median = sorted_numbers[len(sorted_numbers) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # find the middle number\n    middle_number = sorted_numbers[1]\n\n    # find the median\n    if sorted_numbers[0] > middle_number:\n        median = sorted_numbers[1]\n    else:\n        median = sorted_numbers[0]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median.\n    \"\"\"\n    # Sorting the three numbers in ascending order\n    numbers = sorted([a, b, c])\n    \n    # Finding the middle index\n    middle_index = len(numbers) // 2\n    \n    # Returning the median\n    if len(numbers) % 2 == 0:\n        return (numbers[middle_index - 1] + numbers[middle_index]) / 2\n    else:\n        return numbers[middle_index]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers using the QuickSelect algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n    c (int): The third number.\n\n    Returns:\n    int: The median number.\n    \"\"\"\n\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i + 1], arr[high] = arr[high], arr[i + 1]\n        return i + 1\n\n    def quick_select(arr, k):\n        low = 0\n        high = len(arr) - 1\n\n        while low <= high:\n            pivot_index = partition(arr, low, high)\n            if k == pivot_index:\n                return arr[k]\n            elif k < pivot_index:\n                high = pivot_index - 1\n            else:\n                low = pivot_index + 1\n\n    sorted_numbers = [a, b, c]\n    median_index = quick_select(sorted_numbers, len(sorted_numbers) // 2)\n    return sorted_numbers[median_index]\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # find the middle two numbers in the sorted array\n    middle_numbers = sorted_numbers[1:-1]\n\n    # calculate the median\n    median = sum(middle_numbers) / len(middle_numbers)\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of those numbers.\n    \"\"\"\n    # First, sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Then, calculate the median based on the length of the sorted list\n    if len(nums) % 2 == 0:\n        # If the length of the list is even, return the average of the middle two numbers\n        median = (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2\n    else:\n        # If the length of the list is odd, return the middle number\n        median = nums[len(nums) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Calculate the sum of the three numbers\n    total = a + b + c\n\n    # Calculate the average of the three numbers\n    average = total / 3\n\n    # Calculate the middle index\n    middle_index = len(sorted_list) // 2\n\n    # Check if the middle index is odd or even\n    if len(sorted_list) % 2 == 0:\n        # If it's even, the median is the average of the two middle numbers\n        median = (sorted_list[middle_index - 1] + sorted_list[middle_index]) / 2\n    else:\n        # If it's odd, the median is the middle number\n        median = sorted_list[middle_index]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the midpoint index\n    midpoint_index = len(sorted_numbers) // 2\n\n    # Return the median value\n    if len(sorted_numbers) % 2 == 0:\n        # If the length of the sorted array is even, return the average of the two middle values\n        median = (sorted_numbers[midpoint_index - 1] + sorted_numbers[midpoint_index]) / 2\n    else:\n        # If the length of the sorted array is odd, return the middle value\n        median = sorted_numbers[midpoint_index]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a_b = a + b\n    c_b = c + b\n    a_c = a + c\n    \n    if a_b > a_c:\n        median = (a_b + a_c) / 2\n    else:\n        median = (a_b + a_c) / 2\n        \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n    \n    # Calculate the median\n    if len(nums) % 2 == 0:\n        # If the length of the sorted list is even, take the average of the middle two numbers\n        median = (nums[len(nums)//2 - 1] + nums[len(nums)//2]) / 2\n    else:\n        # If the length of the sorted list is odd, take the middle number\n        median = nums[len(nums)//2]\n    \n    # Return the median\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits = 0\n        while num > 0:\n            digit = num % 10\n            sum_of_digits += digit\n            num //= 10\n        sum_of_digits_list.append(sum_of_digits)\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string and split it into a list of digits\n        digits = list(str(num))\n        # use a loop to add up the digits and add the result to a running total\n        total = 0\n        for digit in digits:\n            total += int(digit)\n        # print the total for each number\n        print(total)"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    digit_sum = 0\n    for num in nums:\n        if type(num) == int:\n            digit_sum += sum([int(digit) for digit in str(num)])\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(num) for num in nums if num.isdigit())"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sum of digits\n    sum_list = []\n    \n    # Iterate over each number in the list\n    for num in nums:\n        # Convert the number to a string and then split it into individual digits\n        num_str = str(num)\n        digits = [int(d) for d in num_str]\n        \n        # Compute the sum of digits and append it to the sum_list\n        sum_list.append(sum(digits))\n    \n    # Return the sum_list\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Computes the sum of digits of each number in a list.\n    \"\"\"\n    return [sum(map(int, str(n))) for n in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        digit_sum += sum(digits)\n    return digit_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # initialize an empty tuple to store the result\n    result_tup = ()\n    \n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # get the corresponding elements from the two tuples\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        \n        # perform the bitwise xor operation on the corresponding elements\n        xor_result = elem1 ^ elem2\n        \n        # add the result to the result tuple\n        result_tup += (xor_result,)\n        \n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    \n    # Initialize the result tuple with the first tuple element\n    result_tup = (test_tup1[0],)\n    \n    # Iterate over the remaining tuple elements and perform the bitwise xor operation\n    for i in range(1, len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # Initialize a variable to store the result of the bitwise xor operation\n    result = 0\n\n    # Iterate through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Get the corresponding element in the second tuple\n        j = i % len(test_tup2)\n        # Perform the bitwise xor operation on the elements and add the result to the result variable\n        result |= (test_tup1[i] ^ test_tup2[j])\n\n    # Return the result of the bitwise xor operation\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    \n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    \n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # convert the tuples to lists\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n\n    # calculate the length of the longest tuple\n    max_len = max(len(lst1), len(lst2))\n\n    # pad the shorter list with zeros to the length of the longest list\n    lst1 = lst1 + [0] * (max_len - len(lst1))\n    lst2 = lst2 + [0] * (max_len - len(lst2))\n\n    # perform the bitwise xor operation across the lists\n    result = [x ^ y for x, y in zip(lst1, lst2)]\n\n    # convert the result list back to a tuple\n    result_tup = tuple(result)\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize an empty result list to store the bitwise XOR values\n    result = []\n    # Loop through each element in the tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise XOR operation between the current element in the first tuple and the corresponding element in the second tuple\n        xor_result = test_tup1[i] ^ test_tup2[i]\n        # Add the bitwise XOR result to the result list\n        result.append(xor_result)\n    # Return the result list\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n\n    # Initialize the result tuple with zeros\n    result = (0,) * len(test_tup1)\n\n    # Perform the bitwise xor operation for each pair of values in the tuples\n    for i in range(len(test_tup1)):\n        result[i] = test_tup1[i] ^ test_tup2[i]\n\n    # Return the result tuple\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # Define an empty dictionary to store the frequency of unique tuples\n    freq_dict = {}\n\n    # Loop through the list\n    for i in test_list:\n        # Extract the unique tuple from the list\n        tup = tuple(sorted(i))\n        # Check if the tuple is already in the dictionary\n        if tup in freq_dict:\n            # Increment the count by 1\n            freq_dict[tup] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            freq_dict[tup] = 1\n\n    # Return the frequency of unique tuples\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Create a set to store unique tuples\n    unique_set = set()\n\n    # Iterate through the list and add unique tuples to the set\n    for item in test_list:\n        unique_set.add(tuple(item))\n\n    # Return the number of unique tuples in the set\n    return len(unique_set)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list as input and returns the number of unique tuples in the list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for elem in test_list:\n        if tuple(elem) not in unique_tuples:\n            unique_tuples.add(tuple(elem))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Initialize a new tuple to store the result\n    result = ()\n\n    # Iterate over the two tuples and add their elements in index wise order\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] + test_tup2[i],)\n\n    # Return the result tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length\")\n\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            test_tup1[i] = add_nested_tuples(test_tup1[i], test_tup2[i])\n        else:\n            test_tup1[i] += test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have same length\")\n\n    result = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # create a new empty tuple to store the sum of tuples\n    result_tup = ()\n    # loop through each element of the first tuple and add it to the result tuple\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # loop through both tuples using zip function\n    for i, j in zip(test_tup1, test_tup2):\n        # add the corresponding elements of the tuples using index-wise addition\n        result.append(i + j)\n    # return the final result\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both the tuples should have the same number of elements.\")\n        return None\n    else:\n        result_list = []\n        for i in range(len(test_tup1)):\n            try:\n                result_list.append(test_tup1[i] + test_tup2[i])\n            except:\n                print(\"An error occurred while performing index wise addition of tuple elements.\")\n                return None\n        return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            result.append(test_tup1[i] + test_tup2[i][j])\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # initialize the result tuple with length of the shortest tuple\n    result_tup = (0,) * min(len(test_tup1), len(test_tup2))\n\n    # loop through the tuples and perform the addition\n    for i in range(len(result_tup)):\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # checking if both tuples have equal length\n    if len(test_tup1) == len(test_tup2):\n        # initializing a list to store the result\n        result_list = []\n        # iterating over both tuples\n        for i in range(len(test_tup1)):\n            # adding the elements of both tuples at each index\n            result_list.append(test_tup1[i] + test_tup2[i])\n        # returning the list of result\n        return tuple(result_list)\n    else:\n        # if the length of any tuple is not equal to the length of the other, the function returns None\n        return None"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:   \n        return a   \n    else:   \n        return b  "
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes two parameters: tuplex and tuple1.\n    tuplex is the tuple containing the element that needs to be checked\n    tuple1 is the tuple containing the elements that need to be searched for.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            print(\"The element {} exists in tuple {}.\".format(element, tuplex))\n        else:\n            print(\"The element {} does not exist in tuple {}.\".format(element, tuplex))"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    return tuplex in tuple1"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer x as input and returns whether the parity of the number is odd or even.\n    '''\n    if x % 2 == 0:\n        return 'The parity of {} is even.'.format(x)\n    else:\n        return 'The parity of {} is odd.'.format(x)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as input and returns whether the parity is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the number is even.\"\n    else:\n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n\n    if x % 2 == 0:\n        print(x,\"is even\")\n    else:\n        print(x,\"is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"The parity of the given number is even.\"\n    else: \n        return \"The parity of the given number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print(x, \"is even.\") \n    else: \n        print(x, \"is odd.\") "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0: \n        return False \n    else: \n        return True "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: # If the number is even, it is not odd\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Check if the number is even or odd\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    This function takes an integer x as input and returns True if the parity of x is odd and False otherwise.\n    '''\n    if x%2==0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    digits.sort(reverse=True)\n    next_bigger = 0\n    for i in range(len(digits)):\n        next_bigger += 10**(len(digits) - i - 1) * digits[i]\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n\n    :param n: a positive integer\n    :return: the next bigger number by rearranging the digits of a given number\n    \"\"\"\n    num_str = str(n)\n    max_len = len(num_str)\n    for i in range(max_len):\n        if num_str[i] > num_str[i+1]:\n            num_str = num_str[:i] + num_str[i+1] + num_str[i] + num_str[i+1:]\n            max_len = len(num_str)\n    return int(num_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def next_bigger(n):\n        '''\n        Internal function to generate the next bigger number.\n        '''\n        digits = [int(digit) for digit in str(n)]\n        for i in range(len(digits)):\n            if digits[i] > 0:\n                digits[i] = 9\n            else:\n                digits[i] = 0\n        new_num = int(''.join(str(digit) for digit in digits))\n        return new_num\n\n    return next_bigger(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the input number to a string\n    num_str = str(n)\n    # create a list of characters for the digits of the input number\n    num_chars = list(num_str)\n    # reverse the list of digits\n    num_chars.reverse()\n    # convert the reversed list back to a string\n    num_str = ''.join(num_chars)\n    # convert the string back to an integer and add 1 to get the next bigger number\n    next_bigger = int(num_str) + 1\n    # return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a string\n    num = str(n)\n    # initialize the result string\n    result = ''\n    # iterate over the digits of the number\n    for digit in num:\n        # create a new string with the digit appended to the end\n        new_digit = digit + '9'\n        # check if the new digit is greater than or equal to the current result\n        if int(new_digit) >= int(result):\n            # if it is, append it to the result string\n            result = new_digit\n    # convert the result string back to an integer and return it\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    max_digit = max(digits)\n    min_digit = min(digits)\n    diff = max_digit - min_digit\n\n    if diff == 0:\n        return max_digit * 10 + 9\n    else:\n        if diff == 1:\n            return max_digit * 10 + min_digit\n        else:\n            return max_digit * 10 + min_digit - 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the given number into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # create a new list to hold the rearranged digits\n    rearranged_digits = []\n    # iterate through the digits from right to left\n    for digit in digits[::-1]:\n        # check if the current digit is less than or equal to 9\n        if digit <= 9:\n            # add the current digit to the new list\n            rearranged_digits.append(digit)\n        else:\n            # if the current digit is greater than 9, add 9 to it and add it to the new list\n            rearranged_digits.append(9)\n            rearranged_digits.append(digit-9)\n    # convert the new list of rearranged digits back into a string and return it\n    return \"\".join(map(str, rearranged_digits[::-1]))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n\n    Args:\n        n (int): A positive integer.\n\n    Returns:\n        int: The next bigger number.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Find the position of the largest digit\n    max_idx = 0\n    for i in range(1, len(num_str)):\n        if int(num_str[i]) > int(num_str[max_idx]):\n            max_idx = i\n\n    # Find the position of the smallest digit\n    min_idx = max_idx\n    for i in range(max_idx):\n        if int(num_str[i]) < int(num_str[min_idx]):\n            min_idx = i\n\n    # Swap the digits at positions min_idx and max_idx\n    num_str[min_idx], num_str[max_idx] = num_str[max_idx], num_str[min_idx]\n\n    # Convert the string back to an integer\n    next_bigger = int(num_str)\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Get the digits of the given number\n    digits = [int(d) for d in str(n)]\n    # Reverse the digits\n    digits.reverse()\n    # Find the last digit that is smaller than 9\n    for i in range(len(digits)):\n        if digits[i] < 9:\n            digits[i] += 1\n            break\n    # Reverse the digits again\n    digits.reverse()\n    # Convert the digits to a number\n    next_bigger = int(''.join(map(str, digits)))\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a list of digits\n    num_list = [int(x) for x in str(n)]\n    # Sort the digits in descending order\n    sorted_list = sorted(num_list, reverse=True)\n    # Reverse the list to create the next bigger number\n    next_bigger_list = sorted_list[::-1]\n    # Convert the list of digits to a string and convert it to an integer\n    next_bigger = int(''.join(str(x) for x in next_bigger_list))\n    return next_bigger"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    \n    for num1 in nums1:\n        heapq.heappush(pq, (-num1, -1))\n    \n    for num2 in nums2:\n        while pq[0][0] > num2:\n            heapq.heappop(pq)\n        \n        if len(pq) < k:\n            heapq.heappush(pq, (-num2, -1))\n    \n    return [(-pq[i][0], -pq[i][1]) for i in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heap = []\n\n    # Convert the input lists to sets to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n\n    # Create a min heap with the smallest element of each set\n    for num1 in nums1:\n        heapq.heappush(heap, (-num1, None))\n    for num2 in nums2:\n        heapq.heappush(heap, (-num2, None))\n\n    # Iterate through the heap, adding k smallest pairs to the output list\n    while len(heap) > 0:\n        # If the heap size is less than k, we need to add more pairs\n        if len(pairs) < k:\n            # Get the two smallest elements from the heap\n            num1, _ = heapq.heappop(heap)\n            num2, _ = heapq.heappop(heap)\n\n            # Add them to the output list and add them back to the heap\n            pairs.append((num1, num2))\n            heapq.heappush(heap, (-num1, num1))\n            heapq.heappush(heap, (-num2, num2))\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # create a min heap to store the pairs with smallest sums\n    min_heap = []\n    \n    # create a dictionary to store the indices of the elements in each array\n    index_dict = {}\n    \n    # loop through the first array and build a dictionary of indices and their values\n    for i, num in enumerate(nums1):\n        index_dict[num] = i\n        \n    # loop through the second array and push the pairs into the min heap\n    for num in nums2:\n        if num in index_dict:\n            heapq.heappush(min_heap, (-num, index_dict[num]))\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n                \n    # extract the k smallest pairs from the min heap and return them\n    return [-num for num, index in heapq.nsmallest(k, min_heap) for _ in range(2)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Initialize two heaps for storing the smallest k elements found\n    min_heap1 = []\n    min_heap2 = []\n    \n    # Iterate over the first array\n    for num1 in nums1:\n        # If the heap for the second array is empty or the element in the heap is greater than the current element in the first array, add the current element to the heap\n        if len(min_heap2) == 0 or num1 < min_heap2[0]:\n            heapq.heappush(min_heap2, num1)\n            \n        # If the length of the two heaps is greater than k, remove the smallest element from the heap for the first array and the smallest element from the heap for the second array\n        while len(min_heap1) > 0 and len(min_heap2) > 0:\n            if heapq.heappop(min_heap1) + heapq.heappop(min_heap2) <= k:\n                k -= 1\n            else:\n                break\n    \n    # Return the result\n    return k"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if not min_heap or nums1[i] + nums2[j] < min_heap[0]:\n                heapq.heappush(min_heap, nums1[i] + nums2[j])\n                if len(min_heap) > k:\n                    heapq.heappop(min_heap)\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    This function finds k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \n    Args:\n    nums1: List[int]: List of integers from the first array.\n    nums2: List[int]: List of integers from the second array.\n    k: int: The number of smallest pairs to find.\n    \n    Returns:\n    List[Tuple[int, int]]: List of tuples (x, y) where x and y are integers from the first and second array, respectively, and x+y is the smallest sum.\n    \"\"\"\n    \n    # Sort the input lists in ascending order\n    nums1.sort()\n    nums2.sort()\n    \n    # Initialize the result list and a min-heap with the first element of each list\n    result = []\n    heap1 = [(nums1[0], 0)]\n    \n    # Loop through the second list and add its first element to the heap\n    for i in range(1, len(nums2) + 1):\n        heapq.heappush(heap1, (nums2[i-1], i))\n        \n        # If the heap size is greater than k, pop the smallest pair from the heap\n        if len(heap1) > k:\n            heapq.heappop(heap1)\n        \n        # Add the smallest pair to the result list\n        if len(heap1) > 0:\n            result.append((heap1[0][0], nums2[i-1]))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    heapq.heapify(min_heap)\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1+num2, (num1, num2)))\n            else:\n                if num1+num2 < min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (num1+num2, (num1, num2)))\n\n    result = []\n    while min_heap:\n        result.append(min_heap[0][1])\n        heapq.heappop(min_heap)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of pairs\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if not heap or nums1[i] < heap[0][0] or (nums1[i] == heap[0][0] and nums2[j] < heap[0][1]):\n                heapq.heappush(heap, (nums1[i], nums2[j]))\n                if len(heap) > k:\n                    heapq.heappop(heap)\n    \n    # Extract the k smallest pairs from the heap and return them as a list\n    pairs = []\n    while heap:\n        pairs.append(heapq.heappop(heap))\n        if len(heap) < k:\n            break\n    \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left = arr[:mid]\n            right = arr[mid:]\n            merge_sort(left)\n            merge_sort(right)\n            i = j = k = 0\n            while i < len(left) and j < len(right):\n                if left[i] < right[j]:\n                    arr[k] = left[i]\n                    i += 1\n                else:\n                    arr[k] = right[j]\n                    j += 1\n                k += 1\n            while i < len(left):\n                arr[k] = left[i]\n                i += 1\n                k += 1\n            while j < len(right):\n                arr[k] = right[j]\n                j += 1\n                k += 1\n\n    nums1 = merge_sort(nums1)\n    nums2 = merge_sort(nums2)\n\n    heap = [(-x, -y) for x, y in zip(nums1, nums2)]\n    heapq.heapify(heap)\n\n    result = []\n    while k > 0:\n        _, item = heapq.heappop(heap)\n        result.append(item)\n        k -= 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a list of tuples where the first element is the sum of the elements in the first array and the second element is the sum of the elements in the second array\n    pairs = [(nums1[i]+nums2[j], i, j) for i in range(len(nums1)) for j in range(len(nums2)) if i!= j]\n    # sort the list in ascending order based on the sum of the elements in the first array and the sum of the elements in the second array\n    pairs.sort()\n    # initialize an empty list to store the k smallest pairs\n    result = []\n    # pop the k smallest pairs from the list and add them to the result list\n    for i in range(k):\n        result.append(pairs.pop())\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] < list1[j][0]:\n                if list1[i][1] < list1[j][1]:\n                    min_product = min(min_product, list1[i][0] * list1[j][1])\n                else:\n                    min_product = min(min_product, list1[i][0] * list1[j][0])\n            else:\n                if list1[i][1] < list1[j][1]:\n                    min_product = min(min_product, list1[i][1] * list1[j][1])\n                else:\n                    min_product = min(min_product, list1[i][1] * list1[j][0])\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize variables to keep track of minimum product and current product\n    min_product = float('inf')\n    current_product = 1\n\n    # iterate through the list of tuples\n    for i in range(len(list1)):\n        # multiply the current product by the difference between the minimum and maximum value in the tuple\n        current_product *= (list1[i][1] - list1[i][0])\n        \n        # update the minimum product if the current product is less than the current minimum\n        if current_product < min_product:\n            min_product = current_product\n\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize variables\n    min_product = float('inf')\n    result = []\n\n    # Loop through the list of tuples\n    for tup in list1:\n\n        # Get the two elements from the tuple\n        x, y = tup\n\n        # Calculate the product of the two elements\n        product = x * y\n\n        # Update the minimum product if the new product is smaller\n        if product < min_product:\n            min_product = product\n            result = [x, y]\n\n    # Return the minimum product and the two elements of the tuple that minimized the product\n    return min_product, result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize the minimum product as infinity\n    min_product = float('inf')\n\n    # Iterate over all pairs of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the first tuple and the second tuple\n            product = list1[i][0] * list1[j][1]\n\n            # Update the minimum product if the current product is smaller\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            for k in range(len(list1[i][j])):\n                product = list1[i][j][k] * list1[i][j][k+1]\n                if product < min_product:\n                    min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    min_product = float('inf')\n    min_tuple = (0, 0)\n    # Iterate through the list and find the pairs of tuples with the smallest product\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                # Calculate the product of the tuples\n                product = list1[i][0] * list1[j][1]\n                # Check if the product is smaller than the current minimum\n                if product < min_product:\n                    min_product = product\n                    min_tuple = (list1[i][0], list1[j][1])\n    # Return the minimum product and the corresponding tuple\n    return min_product, min_tuple"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    products = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            products.append(product)\n    return min(products)"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sort the list of tuples\n    list1.sort(key=lambda x: (x[0], x[1]))\n\n    # Initialize the minimum product to be the first tuple in the sorted list\n    min_product = list1[0][0] * list1[0][1]\n\n    # Loop through the sorted list and calculate the minimum product\n    for i in range(1, len(list1)):\n        # Calculate the product of the current tuple and the next tuple in the sorted list\n        product = list1[i][0] * list1[i][1]\n        # Update the minimum product if the current product is smaller than the previous minimum product\n        if product < min_product:\n            min_product = product\n\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value to the first element of the list\n    min_value = listval[0]\n    \n    # loop through the rest of the list\n    for i in range(1, len(listval)):\n        # if the current element is smaller than the minimum value, update it\n        if listval[i] < min_value:\n            min_value = listval[i]\n    \n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    else:\n        min_val = listval[0]\n        for val in listval[1:]:\n            if val < min_val:\n                min_val = val\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if len(listval) == 0:\n        raise ValueError(\"List is empty.\")\n\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    minval = listval[0]\n    for i in range(1, len(listval)):\n        if minval > listval[i]:\n            minval = listval[i]\n    return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Find the minimum value in the list using a loop\n    min_num = listval[0]\n    for num in listval:\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to be the first element of the list\n    min_val = listval[0]\n    # iterate through the remaining elements of the list\n    for i in range(1, len(listval)):\n        # if the current element is less than the minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for value in listval:\n        if min_val is None:\n            min_val = value\n        else:\n            if value < min_val:\n                min_val = value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # iterate over the list\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize the minimum value to the first element of the list\n    min_val = listval[0]\n\n    # Loop through the list and compare each element to the minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to the first element of the list\n    min_val = listval[0]\n\n    # Iterate through the rest of the list and update minimum value if necessary\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n\n    # Return the minimum value found\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('_(.)', lambda m: m.group(1).upper(), word)\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Remove the underscore (_) from the word and convert the rest of the characters to lowercase\n    camel_case = re.sub('(_[a-z])', lambda match: match.group()[1].upper(), word)\n    # Capitalize the first letter of the camel case string\n    return camel_case[0].upper() + camel_case[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert the first character to lower case\n    camel_word = word[0].lower()\n    # convert the remaining characters to camel case\n    for i in range(1, len(word)):\n        if word[i].isupper():\n            camel_word += '_' + word[i].lower()\n        else:\n            camel_word += word[i]\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n\n    Parameters:\n    word (str): A string in snake case format.\n\n    Returns:\n    str: A string in camel case format.\n    \"\"\"\n\n    # Convert the string to uppercase\n    word = word.upper()\n\n    # Remove leading underscores\n    word = re.sub('^_', '', word)\n\n    # Convert the string to camel case\n    camel_case = ''.join(x.capitalize() for x in word.split('_'))\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'(?<!^)(?=[A-Z])')\n    return pattern.sub('', word).title()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    camel_case = re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into individual words using regex\n    words = re.findall(r'\\w+', word)\n    # Convert the first letter of each word to uppercase\n    words[0] = words[0].capitalize()\n    # Join the words back into a camel case string\n    camel_case = ''.join(words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile('(.)([A-Z][a-z]+)')\n    return pattern.sub(r'\\1_\\2', word)"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function removes odd numbers from a given list.\n    \"\"\"\n    # create an empty list to store even numbers\n    new_list = []\n    # iterate through each number in the original list\n    for num in l:\n        # if the number is even, add it to the new list\n        if num % 2 == 0:\n            new_list.append(num)\n    # return the new list with even numbers removed\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function removes all odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n\n    Parameters:\n    list1: list of tuples\n    n: int, the index of the element to extract\n\n    Returns:\n    element: the nth element from list1\n    \"\"\"\n    if len(list1) == 0:\n        return None\n\n    if n < 0:\n        return None\n\n    if n > len(list1):\n        return None\n\n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        raise ValueError('The length of the list is less than n.')\n    for i, (a, b) in enumerate(list1):\n        if i == n - 1:\n            return b\n    raise ValueError('The nth element is not present in the list.')"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for val in list1:\n        if val in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and returns a boolean value indicating whether\n    there exists any value in the first sequence that is also present in the second sequence.\n\n    Args:\n        list1 (list): A sequence of values.\n        list2 (list): Another sequence of values.\n\n    Returns:\n        bool: True if there exists any value in list1 that is also present in list2, otherwise False.\n    \"\"\"\n\n    for item in list1:\n        if item in list2:\n            return True\n\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # checking if the lists have any overlapping values\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Create a set from list1 and set from list2\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if any value from list1 is in list2\n    for value in set1:\n        if value in set2:\n            return True\n    \n    # If no value was found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # convert the two lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # check if there is any overlapping value in the two sets\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as arguments and checks whether any value in the first list exists in the second list or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            print(item, \"exists in both sequences.\")\n        else:\n            print(item, \"does not exist in both sequences.\")"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    n = len(arr)\n    dp = [[0]*n for _ in range(n)]\n    max_product = float('-inf')\n    max_pair = None\n\n    for i in range(n):\n        for j in range(n):\n            if i > j:\n                dp[i][j] = arr[i] * arr[j]\n            else:\n                dp[i][j] = arr[j] * arr[i]\n\n            if dp[i][j] > max_product:\n                max_product = dp[i][j]\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = float('-inf')\n    max2 = float('-inf')\n    max3 = float('-inf')\n    max4 = float('-inf')\n    min1 = float('inf')\n    min2 = float('inf')\n    min3 = float('inf')\n    min4 = float('inf')\n\n    for i in arr:\n        max1 = max(max1*i, i)\n        max2 = max(max2*i, i)\n        max3 = max(max3*i, i)\n        max4 = max(max4*i, i)\n        min1 = min(min1*i, i)\n        min2 = min(min2*i, i)\n        min3 = min(min3*i, i)\n        min4 = min(min4*i, i)\n\n    max_product = max(max1, max2, max3, max4)\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (0,0)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # initialize variables\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    # loop through the array\n    for num in arr:\n        # update the maximum and minimum values\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    # calculate the pair's product\n    pair_product = max1 * max2\n\n    # return the product and the pair\n    return pair_product, (max1, min1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a pair of integers with the highest product.\n    \"\"\"\n    if len(arr) < 2:\n        return arr\n    else:\n        max1 = arr[0]\n        min1 = arr[0]\n        max2 = arr[0]\n        min2 = arr[0]\n        for num in arr[1:]:\n            if num > max1:\n                max2 = max1\n                max1 = num\n            elif num > max2:\n                max2 = num\n            if num < min1:\n                min2 = min1\n                min1 = num\n            elif num < min2:\n                min2 = num\n        return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Initialize two variables to keep track of the maximum and minimum values\n    max_val = arr[0]\n    min_val = arr[0]\n\n    # Loop through the array and update the maximum and minimum values\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        if arr[i] < min_val:\n            min_val = arr[i]\n\n    # Initialize the variable to store the maximum product\n    max_product = max_val * min_val\n\n    # Loop through the array again and update the maximum product if a pair is found\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n\n    # Return the maximum product found\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max1*max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and finds a pair with the highest product.\n    \"\"\"\n    max_pair = (0, 0)\n    max_product = arr[0] * arr[1]\n\n    for i in range(2, len(arr)):\n        if arr[i] * arr[i-1] > max_product:\n            max_pair = (arr[i], arr[i-1])\n            max_product = arr[i] * arr[i-1]\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_pair = (arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] > max_pair[0] * max_pair[1]:\n            max_pair = (arr[i], max_pair[0] * max_pair[1])\n        elif arr[i] > max_pair[0]:\n            max_pair = (arr[i], arr[i])\n        elif arr[i] > max_pair[1]:\n            max_pair = (max_pair[0], arr[i])\n    return max_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    common_element = None\n    for i in range(len(Input)):\n        if Input[i][0] == common_element:\n            return common_element\n        if common_element is None:\n            common_element = Input[i][0]\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Define an empty list to store common elements\n    common_list = []\n    # Loop through each tuple in the input list\n    for i in Input:\n        # Extract the first element of the tuple\n        first_elem = i[0]\n        # Loop through each other tuple in the input list\n        for j in Input:\n            # Extract the first element of the other tuple\n            other_elem = j[0]\n            # If the first element of both tuples is the same, add it to the common_list\n            if first_elem == other_elem:\n                common_list.append(first_elem)\n    # Return the list of common elements\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in Input:\n        if len(set(i[0])) == 1:\n            common_elements.append(i[0][0])\n    return common_elements\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    common_elements = []\n    for i in range(len(Input)):\n        first_element = Input[i][0]\n        if first_element not in common_elements:\n            common_elements.append(first_element)\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in Input:\n        for j in Input:\n            if i[0] == j[0]:\n                result.append(i[0])\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = []\n    for tup in Input:\n        if tup[0] not in common_elements:\n            common_elements.append(tup[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    common_elements = []\n    for tuple_ in Input:\n        for element in tuple_:\n            if element not in common_elements:\n                common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    count = 0\n    for i in range(len(Input)):\n        if i == 0:\n            common_element = Input[0]\n            count += 1\n        else:\n            if Input[i][0] == common_element:\n                count += 1\n            else:\n                count -= 1\n                if count == 0:\n                    common_element = None\n                else:\n                    for j in range(i):\n                        if Input[j][0] == common_element:\n                            common_element = None\n                            break\n    if count == 0:\n        print(\"No common element found\")\n    else:\n        print(\"Common element found:\", common_element)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Creating a dictionary to store the count of each element in the list of tuples\n    count_dict = {}\n    \n    # Looping through the list of tuples\n    for tup in Input:\n        # Checking if the first element of the tuple is already present in the count_dict\n        if tup[0] in count_dict:\n            # Incrementing the count of the first element in the dictionary\n            count_dict[tup[0]] += 1\n        else:\n            # Adding the first element to the dictionary with a count of 1\n            count_dict[tup[0]] = 1\n    \n    # Creating an empty list to store the common elements\n    common_list = []\n    \n    # Looping through the dictionary to find the common elements\n    for key in count_dict:\n        if count_dict[key] == len(Input):\n            # Adding the common element to the list\n            common_list.append(key)\n    \n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples containing the common first element in each tuple.\n    '''\n\n    # Iterate through the list of tuples\n    common_tuples = []\n    for i in Input:\n        # Check if the first element of the current tuple is already present in the common_tuples list\n        if i[0] in common_tuples:\n            # If it is, append the current tuple to the common_tuples list\n            common_tuples.append(i)\n        else:\n            # If not, add the first element of the current tuple to the common_tuples list\n            common_tuples.append((i[0], i))\n\n    return common_tuples"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as an argument and returns the element of the list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element with maximum length.\n    '''\n    max_len = 0\n    max_elem = \"\"\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n            \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # finding the length of the list\n    length = len(lst)\n    \n    # initializing two variables to store the maximum and minimum elements\n    max_ele = lst[0]\n    min_ele = lst[0]\n    \n    # iterating through the list to find the maximum and minimum elements\n    for i in range(length):\n        if lst[i] > max_ele:\n            max_ele = lst[i]\n        elif lst[i] < min_ele:\n            min_ele = lst[i]\n    \n    # returning the maximum element\n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list\n    having the maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    # loop through the list to find the maximum length\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_elem = i\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the element of the list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(lst):\n    \"\"\"\n    This function takes a list of numbers as input and rounds each number to the nearest integer and returns the sum of the rounded numbers multiplied by the length of the list.\n    \"\"\"\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    return total_sum * len(lst)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], int):\n            list1[i] = round(list1[i])\n            total_sum += list1[i]\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        rounded_num = round(num)\n        total += rounded_num\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        rounded_number = round(number)\n        total_sum += rounded_number\n    \n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # Initialize sum and count\n    sum = 0\n    count = 0\n    # Iterate from 1 to n\n    for i in range(1, n+1, 2):\n        # Calculate cube of current number and add to sum\n        sum += i ** 3\n        # Increment count of even numbers found\n        count += 1\n    # Return sum of cubes of even numbers\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    even_numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n    sum_of_cubes = 0\n    for num in even_numbers:\n        sum_of_cubes += num ** 3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    This function takes an integer n as input and returns the cube sum of the first n even natural numbers.\n    '''\n    sum_cube = 0\n    i = 0\n    \n    while i <= n:\n        sum_cube += i**3\n        i += 2\n    \n    return sum_cube"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # initialize sum variable to 0\n    cube_sum = 0\n\n    # iterate from 0 to n-1\n    for i in range(n):\n\n        # add cube of i to cube_sum\n        cube_sum += i**3\n\n    # return cube_sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i ** 3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # Initialize variables\n    sum_of_cubes = 0\n    count = 0\n\n    # Loop through first n even natural numbers\n    for i in range(1, n+1, 2):\n        cube = i ** 3\n        sum_of_cubes += cube\n        count += 1\n\n    # Print the sum of cubes and count of even natural numbers\n    print(\"The sum of cubes of first\", n, \"even natural numbers is:\", sum_of_cubes)\n    print(\"The count of even natural numbers is:\", count)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concat_str = ''\n    for item in test_tup:\n        concat_str += str(item) +''\n    return concat_str.strip()"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Concatenate each element of tuple by the delimiter \" \"\n    return \" \".join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    Write a function to concatenate each element of a tuple by the delimiter.\n    \"\"\"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(str(x) for x in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n\n    average_of_cubes = sum_of_cubes / count\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1,n+1):\n        total += i**3\n        count += 1\n    average = total/count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum / (n**3)\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    total = 0  \n    for i in range(1, n+1):  \n        total += i**3  \n    average = total/n  \n    return average  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i**3\n        count += 1\n    average = total/count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum / n\n    return average"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    return [tuple[len(tuple)-1] for tuple in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = []\n    for string in test_tuple:\n        if isinstance(string, str):\n            rear_tuple.append(string[-1])\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        if i % 2 == 1:\n            rear_index.append(test_tuple[i])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [x[-1] for x in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i, s in enumerate(test_tuple):\n        rear_elements.append(s[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [item[len(item)-1] for item in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_list = []\n    for i, string in enumerate(test_tuple):\n        if i == len(test_tuple)-1:\n            rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    This function counts the number of sublists containing a particular element in a list.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    This function takes a list and a particular element as input and returns the count of sublists that contain the element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        if num % 2!= 0:  # check if the number is odd\n            result.append(num)  # add it to the result list if it's odd\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a given list.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_list = re.split('-', dt)\n    dt_list.reverse()\n    dt_list.insert(2, '-')\n    return '-'.join(dt_list)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define regular expression pattern\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # match the pattern in the date string\n    match = re.match(pattern, dt)\n    # extract the matched values\n    year, month, day = match.groups()\n    # format the date string in dd-mm-yyyy format\n    new_dt = day + '-' + month + '-' + year\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    \n    # Use the re.sub() method to replace the year, month and day with the required format\n    new_dt = re.sub(pattern, lambda m: '%02d-%02d-%04d' % (int(m.group(2)), int(m.group(3)), int(m.group(1))), dt)\n    \n    # Return the modified date\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # use re.sub to replace the matched pattern with a new pattern with dashes instead of slashes\n    return re.sub(pattern, r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace the \"-\" with \"-\" to match the desired format\n    dt = dt.replace(\"-\", \"-\")\n    # Use the regular expression to match the format\n    pattern = r'(\\d{2})-(\\d{2})-(\\d{4})'\n    # Use the re.sub function to replace the matched pattern with the desired format\n    result = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    return result"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_pattern = r'\\d{4}'\n    mm_pattern = r'\\d{2}'\n    dd_pattern = r'\\d{2}'\n    formats = [\n        '%Y-%m-%d',\n        '%Y/%m/%d',\n        '%Y.%m.%d',\n        '%d/%m/%Y',\n        '%d.%m.%Y'\n    ]\n    for f in formats:\n        try:\n            dt = re.sub(r'(%s)' % yyyy_pattern, r'\\g<1>-', dt)\n            dt = re.sub(r'(%s)' % mm_pattern, r'-\\g<1>-', dt)\n            dt = re.sub(r'(%s)' % dd_pattern, r'-\\g<1>', dt)\n            return dt\n        except ValueError:\n            pass"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert the date string to datetime format\n    dt = re.sub(r'(\\d{2})-(\\d{2})-(\\d{4})', r'\\3-\\2-\\1', dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    new_dt = re.sub(pattern, r'\\2-\\1-\\3', dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\2-\\1-\\3', dt)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Get the length of the list\n    n = len(my_list)\n\n    # Tune the gap size\n    gap = n // 2\n\n    while gap > 0:\n        # Move the gap to the next position\n        for i in range(gap, n):\n            # Find the correct position for the element\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                # Swap the elements\n                temp = my_list[j - gap]\n                my_list[j - gap] = my_list[j]\n                my_list[j] = temp\n                j -= gap\n        # Decrease the gap\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n\n    # Find the largest gap\n    gap = n // 2\n\n    while gap > 0:\n        # Insertion sort for gap elements\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3*h + 1\n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h = h // 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3*h + 1\n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and temp < my_list[j-h]:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h = h//3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n\n    # Do gaps of 1, 4, 13, 40, 121, 364,...\n    gap = n // 2\n    while gap > 0:\n        # Move the gap to the next position\n        for i in range(gap, n):\n            # Insert the current element in its correct position in the array\n            j = i\n            while j >= gap and my_list[j] > my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n            # Move the current element to its correct position in the array\n            my_list[j], my_list[i] = my_list[i], my_list[j]\n        # Decrease the gap by a factor of 2\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n/3:\n        h = 3*h + 1\n    while h >= 1:\n        for i in range(h, n):\n            key = my_list[i]\n            j = i\n            while j >= h and key < my_list[j-h]:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = key\n        h = int(h/3)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Setting the gap to half of the size of the array\n    gap = n//2\n    # Iterating until the gap is less than or equal to 1\n    while gap > 0:\n        # Iterating over each element in the array\n        for i in range(gap, n):\n            # Moving the gap-sorted element to its correct position\n            # by shifting the rest of the array\n            j = i\n            while j >= gap and my_list[j] > my_list[j - gap]:\n                # Swapping the elements\n                temp = my_list[j]\n                my_list[j] = my_list[j - gap]\n                my_list[j - gap] = temp\n                j -= gap\n        # Decreasing the gap by half\n        gap = gap//2\n    # Returning the sorted array\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same number of elements.\")\n    else:\n        return tuple(x and y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] & test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same number of elements!\")\n        return None\n\n    # create a new tuple with elementwise and tuples of the given tuples\n    and_tuple = tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n\n    return and_tuple"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if the given tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples have different number of elements.\")\n\n    # extract the elementwise and tuples\n    and_tup = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] and test_tup2[i])\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize a new empty tuple to store the result\n    result_tup = ()\n\n    # Loop through the first tuple and the second tuple\n    for i in range(len(test_tup1)):\n        # Extract the corresponding elements of the two tuples and perform the bitwise AND operation\n        result_tup += (test_tup1[i] & test_tup2[i],)\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is positive or negative\n    if discriminant > 0:\n        # Calculate the directrix using the quadratic formula\n        directrix = (-b + (discriminant**0.5)) / (2*a)\n    else:\n        # Check if the discriminant is zero\n        if discriminant == 0:\n            # The directrix is zero\n            directrix = 0\n        else:\n            # Calculate the directrix using the quadratic formula\n            directrix = (-b - (discriminant**0.5)) / (2*a)\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        raise ValueError('The equation of a parabola is y = ax^2 + bx + c.')\n\n    if a == 1:\n        directrix = -b / (2 * a)\n    elif a == -1:\n        directrix = -b / (2 * a)\n    else:\n        discriminant = b**2 - 4*a*c\n        if discriminant > 0:\n            directrix = (-b + discriminant**0.5) / (2*a)\n        elif discriminant == 0:\n            directrix = -b / (2*a)\n        else:\n            directrix = (-b - discriminant**0.5) / (2*a)\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Find the equation of the parabola\n    eqn = a*x**2 + b*x + c\n    \n    # Find the derivative of the equation\n    der = 2*a*x + b\n    \n    # Calculate the value of the directrix\n    directrix = -der / (2*a)\n    \n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if there is a real root\n    if discriminant > 0:\n        # Calculate the directrix\n        directrix = (-b + math.sqrt(discriminant))/(2*a)\n        \n        # Print the result\n        print(\"The directrix of the parabola is\", directrix)\n    \n    elif discriminant == 0:\n        # Calculate the directrix\n        directrix = (-b)/(2*a)\n        \n        # Print the result\n        print(\"The directrix of the parabola is\", directrix)\n    \n    else:\n        # Print an error message\n        print(\"There are no real roots for the given parabola.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    if determinant >= 0:\n        x = (-b + determinant**0.5) / (2*a)\n        y = (-b - determinant**0.5) / (2*a)\n        print(f'The directrix of the parabola is ({x:.2f}, {y:.2f})')\n    else:\n        print('The parabola is not defined.')"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant of the quadratic equation\n    disc = b**2 - 4*a*c\n    \n    # If the discriminant is positive, there is a real root\n    if disc > 0:\n        root1 = (-b + disc**0.5)/(2*a)\n        root2 = (-b - disc**0.5)/(2*a)\n        return root1, root2\n    \n    # If the discriminant is zero, there is only one real root\n    elif disc == 0:\n        root = -b/(2*a)\n        return root\n    \n    # If the discriminant is negative, there are no real roots\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n    \n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Find the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # If discriminant is negative, the directrix is real and lies in one of the two quadrants\n    if discriminant < 0:\n        # Calculate the two roots\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        \n        # Check which root is the directrix\n        if root1 > root2:\n            directrix = root1\n        else:\n            directrix = root2\n        \n        return directrix\n    \n    # If discriminant is zero, the directrix is a point and lies on the line passing through the origin\n    elif discriminant == 0:\n        directrix = -b / (2*a)\n        return directrix\n    \n    # If discriminant is positive, the directrix is complex and lies on the intersection of two line segments\n    else:\n        root = -b / (2*a)\n        a1 = (b**2 - 4*c) / (4*a)\n        a2 = (b**2 + 4*c) / (4*a)\n        x1 = root - math.sqrt(root**2 - a1)\n        x2 = root + math.sqrt(root**2 - a2)\n        y1 = root + math.sqrt(root**2 - a1)\n        y2 = root - math.sqrt(root**2 - a2)\n        directrix = (x1 + x2) / 2\n        \n        return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + c ** 0.5) / (2 * a)\n    x2 = (-b - c ** 0.5) / (2 * a)\n    return (x1 + x2) / 2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    if determinant < 0:\n        return \"The equation has no real roots.\"\n    elif determinant == 0:\n        return \"The directrix is at x = \"+str((-b)/(2*a))\n    else:\n        x1 = (-b - determinant**0.5)/(2*a)\n        x2 = (-b + determinant**0.5)/(2*a)\n        return \"The directrix is at x = \"+str(x1)+\" and x = \"+str(x2)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for item in list1:\n        if item in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # convert both lists to sets to remove duplicates and get unique elements\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # check if there are any common elements\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set of elements in both lists\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if there is at least one element in both sets\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Use a set to remove duplicates from the lists\n    list1 = set(list1)\n    list2 = set(list2)\n    \n    # If there is at least one common element, return True\n    if len(list1 & list2) > 0:\n        return True\n    \n    # If there is no common element, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for i in list1:\n        if i in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the midpoints of the base segments\n    midpoint1 = 0.5 * (base1 + base2)\n    midpoint2 = base1 + height\n\n    # Find the lengths of the base segments\n    segment1 = abs(midpoint1 - base1)\n    segment2 = abs(midpoint2 - base1)\n\n    # Find the lengths of the other segment\n    segment3 = abs(midpoint2 - base2)\n    segment4 = abs(midpoint1 - base2)\n\n    # Calculate the lengths of the other two segments\n    segment5 = abs(base1 - midpoint1)\n    segment6 = abs(base2 - midpoint2)\n\n    # Calculate the length of the trapezium side\n    trapezium_side = max(segment1, segment2, segment3, segment4, segment5, segment6)\n\n    # Calculate the number of trapeziums that can be formed in the base segments\n    trapeziums = area / trapezium_side\n\n    # Find the lengths of the two segments that form the trapezium\n    segment7 = abs(midpoint2 - base1)\n    segment8 = abs(midpoint1 - base1)\n\n    # Find the median of the two segments\n    median1 = abs(base1 + height - midpoint2)\n    median2 = abs(base2 - midpoint1)\n\n    # Calculate the median of the trapezium\n    median = (median1 + median2) / 2\n\n    # Calculate the percentage error\n    error = 100 * (abs(median - trapezium_side) / trapezium_side)\n\n    # Print the results\n    print(\"The area of the trapezium is:\", area)\n    print(\"The length of the trapezium side is:\", trapezium_side)\n    print(\"The number of trapeziums that can be formed in the base segments is:\", trapeziums)\n    print(\"The median of the two segments that form the trapezium is:\", median)\n    print(\"The percentage error is:\", error)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the lengths of the sides of the trapezium\n    side1 = base1 + base2\n    side2 = height * 2\n\n    # Calculate the areas of the trapeziums\n    area1 = side1 * height / 2\n    area2 = side2 * height / 2\n\n    # Calculate the area of the trapezium formed by the half of one side\n    half_side1 = side1 / 2\n    area3 = half_side1 * height / 2\n\n    # Calculate the midpoint of the trapezium\n    midpoint = (base1 + base2 + side1) / 2\n\n    # Calculate the areas of the trapezium formed by the midpoint and both sides\n    area4 = height * (base1 + base2 + side1 - 2 * midpoint) / 4\n\n    # Calculate the total area of the trapezium\n    total_area = area1 + area2 + area3 + area4\n\n    # Calculate the median area of the trapezium\n    median_area = total_area / 4\n\n    # Calculate the median length of the trapezium\n    median_length = 2 * median_area / height\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n    \n    # calculate the lengths of the sides of the trapezium\n    side1 = area / (base1 + base2)\n    side2 = area - side1\n    \n    # find the length of the longer side\n    longer_side = side1 if side1 > side2 else side2\n    \n    # return the median length of the trapezium\n    return longer_side"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function takes in the lengths of two bases and the height of a trapezium as inputs.\n    It returns the median length of the trapezium.\n\n    :param base1: The length of the first base of the trapezium.\n    :type base1: int\n    :param base2: The length of the second base of the trapezium.\n    :type base2: int\n    :param height: The height of the trapezium.\n    :type height: int\n    :return: The median length of the trapezium.\n    :rtype: int\n    \"\"\"\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the semi-perimeter of the trapezium\n    semi_perimeter = 0.5 * (base1 + base2)\n\n    # Calculate the area of the base of the trapezium\n    area_base = 0.5 * height * (base1 + base2)\n\n    # Calculate the area of the upper half of the trapezium\n    area_upper = area - area_base\n\n    # Calculate the area of the lower half of the trapezium\n    area_lower = height * base1\n\n    # Calculate the ratio of the area of the upper half to the area of the trapezium\n    ratio_upper = area_upper / area\n\n    # Calculate the ratio of the area of the lower half to the area of the trapezium\n    ratio_lower = area_lower / area\n\n    # Calculate the sum of the ratios of the upper and lower halves of the trapezium\n    sum_ratios = ratio_upper + ratio_lower\n\n    # Calculate the median of the ratios of the upper and lower halves of the trapezium\n    median_ratio = sum_ratios / 2\n\n    # Calculate the median length of the trapezium by multiplying the semi-perimeter by the ratio of the median ratio to 1\n    median_length = semi_perimeter * median_ratio\n\n    return int(median_length)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2\n    height = 0.5 * height\n    area_rect = 0.5 * base1 * height\n    area_trapezium = 0.5 * area_rect\n\n    median_area = area_trapezium - area\n\n    if area_trapezium < area:\n        return median_area\n    else:\n        return median_area / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    # calculate the half of the base1 and base2\n    base1_half = base1 / 2\n    base2_half = base2 / 2\n    # calculate the height of the trapezium\n    trapezium_height = height\n    # calculate the base of the left trapezium\n    left_base = min(base1_half, base2_half)\n    # calculate the height of the left trapezium\n    left_height = trapezium_height / 2\n    # calculate the length of the left trapezium\n    left_length = left_base * left_height\n    # calculate the area of the left trapezium\n    left_area = 0.5 * left_base * left_height\n    # calculate the base of the right trapezium\n    right_base = max(base1_half, base2_half)\n    # calculate the height of the right trapezium\n    right_height = trapezium_height / 2\n    # calculate the length of the right trapezium\n    right_length = right_base * right_height\n    # calculate the area of the right trapezium\n    right_area = 0.5 * right_base * right_height\n    # check which trapezium has the smaller area\n    if left_area <= right_area:\n        # return the length of the left trapezium\n        return left_length\n    else:\n        # return the length of the right trapezium\n        return right_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium given the\n    base lengths and height.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the length of the shorter base\n    shorter_base = 0.5 * (base1 + base2)\n\n    # Calculate the length of the longer base\n    longer_base = 0.5 * (base1 - base2)\n\n    # Calculate the sum of the bases\n    total_base = shorter_base + longer_base\n\n    # Calculate the sum of the areas\n    total_area = area + area\n\n    # Calculate the sum of the squares of the bases\n    total_squares = (shorter_base ** 2) + (longer_base ** 2)\n\n    # Calculate the difference between the squares of the bases\n    diff_squares = total_squares - (area * (total_base / total_area))\n\n    # Calculate the midpoint of the trapezium\n    midpoint = shorter_base / total_base\n\n    # Calculate the height of the base at the midpoint\n    base_height = (shorter_base / total_base) * midpoint\n\n    # Calculate the length of the trapezium\n    trapezium_length = shorter_base + longer_base + base_height\n\n    # Calculate the median length of the trapezium\n    median_length = trapezium_length / 2\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # calculate the sum of the bases and heights\n    total_bases = base1 + base2 + height\n    # calculate the sum of the areas of each half trapezium\n    half1_area = 0.5 * (base1 ** 2)\n    half2_area = 0.5 * (base2 ** 2)\n    # calculate the sum of the areas of the trapezium\n    trapezium_area = half1_area + half2_area + height\n    # calculate the median area of the trapezium\n    median_area = 0.5 * trapezium_area\n    # calculate the median length of the trapezium\n    median_length = 0.5 * (base1 + base2)\n    # return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n\n    Args:\n    base1: int\n        The length of the first base of the trapezium.\n    base2: int\n        The length of the second base of the trapezium.\n    height: int\n        The height of the trapezium.\n\n    Returns:\n    float\n        The median length of the trapezium.\n    \"\"\"\n    length = (base1 + base2) / 2\n    area = 0.5 * length * height\n    median_area = area / 2\n\n    if median_area == 0:\n        return 0\n    elif median_area == 1:\n        return base1\n    else:\n        return length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of each trapezium side\n    side1 = base1\n    side2 = base2\n    side3 = height\n\n    # Sort the sides in ascending order\n    sorted_sides = sorted([side1, side2, side3])\n\n    # Calculate the sum of the sides\n    total_length = sum(sorted_sides)\n\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2 + height)\n\n    # Calculate the median length of the trapezium\n    median_length = (side1 + side2 + side3) / 3\n\n    # Calculate the absolute difference between the total and median lengths\n    abs_diff = abs(total_length - median_length)\n\n    # Return the median length and the absolute difference\n    return (median_length, abs_diff)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(\"The number entered is greater than all elements in the array.\")\n            return\n    print(\"The number entered is not greater than any element in the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(i, \"is greater than\", number)\n        else:\n            print(i, \"is not greater than\", number)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Checks whether the given number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            print(\"The number is greater than\", element)\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            print(i, \"is greater than\", number)\n            return\n    print(number, \"is not greater than any element of the array\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba\\w*b\\w*\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a(b)*')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a\\w+b\"\n    matches = re.findall(pattern, text)\n    return len(matches)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a.*b\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(b+)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns its last digit.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Removing any non-numeric characters from the number\n    n = ''.join(filter(str.isdigit, str(n)))\n    # Converting the string to an integer\n    n = int(n)\n    # Returning the last digit of the number\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # create an empty list to store the negative numbers\n    neg_list = []\n    # loop over each element of the input list\n    for num in list1:\n        # check if the element is negative\n        if num < 0:\n            # if it is, add it to the neg_list\n            neg_list.append(num)\n    # return the neg_list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(lst):\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a list of negative numbers from the given list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isalpha():\n            if char.islower():\n                if ord(char) % 2!= 0:\n                    new_str += char.lower()\n            elif char.isupper():\n                if ord(char) % 2!= 0:\n                    new_str += char.upper()\n            else:\n                if ord(char) % 2!= 0:\n                    new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n\n    :param str1: The string to be processed.\n    :return: The processed string.\n    \"\"\"\n    return ''.join(char for char in str1 if char.isalpha())"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # check if the character is odd\n        if int(str1[i]) % 2!= 0:\n            # remove the character from the string\n            str1 = str1[:i] + str1[i+1:]\n    return str1"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if char.isalnum()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove all odd characters from a string.\n\n    Parameters:\n    str1 (str): The input string.\n\n    Returns:\n    str: The modified string without odd characters.\n    \"\"\"\n    # Initialize an empty string to store the modified string\n    result = \"\"\n    # Iterate over each character in the input string\n    for char in str1:\n        # If the character is an even number (i.e., it's an odd character), skip it\n        if char % 2 == 0:\n            # Append the even character to the result string\n            result += char\n    # Return the modified result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is odd, append it to the result string\n        if int(char) % 2!= 0:\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = ''\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    bidirectional_pairs = 0\n\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                bidirectional_pairs += 1\n\n    return bidirectional_pairs"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)-1):\n        if (test_list[i][0], test_list[i+1][1]) in test_list[i+1:]:\n            bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[i][1:] and (test_list[j][0], test_list[i][0]) in test_list[j][1:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n\n    for pair in test_list:\n        if pair[0] in pair[1:] and pair[1] in pair[:-1]:\n            bidirectional_count += 1\n\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i:-1] or (test_list[j], test_list[i]) in test_list[i:j+1:-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]) or tuple(test_list[j]) == tuple(test_list[i]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    product = 1\n    for n in L:\n        product *= n\n    return product"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize an empty string to store the resulting number\n    result = ''\n    # Iterate over the list of integers\n    for num in L:\n        # Check if the current number is multiple of 2\n        if num % 2 == 0:\n            # If it is, append it to the result string\n            result += str(num)\n        # If the current number is not multiple of 2, append the previous result string and the current number to the result string\n        else:\n            # Convert the previous result string to an integer and add it to the result string\n            result = int(result) + num\n    # Return the final result string\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_L = set(L)\n    # Sort the set to sort the integers in ascending order\n    sorted_L = sorted(unique_L)\n    # Join the sorted set of integers into a single integer\n    single_int = int(''.join(map(str, sorted_L)))\n    # Return the single integer\n    return single_int"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        if num > 1:\n            result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 1\n    for num in L:\n        single_num *= num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n    # Loop through each element of the input list\n    for num in L:\n        # Convert the element to an integer and add it to the result\n        result += int(num)\n    # Return the final result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the single integer to be zero\n    result = 0\n    \n    # Loop through the list of integers\n    for num in L:\n        # If the integer is a multiple of 3, add it to the result\n        if num % 3 == 0:\n            result += num\n            \n    # Return the single integer\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(?:[A-Z][a-z]*\\b|\\w*[' + re.escape(';\"?.,!?]+\\b)([A-Z][a-z]*\\b|\\w*[' + re.escape(';\"?.,!?]+\\b))\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function will find all adverbs in a given sentence and their positions.\n    '''\n    # Find all adverbs in the given sentence\n    adverbs = re.findall(r'\\b(a|an|the|at|on|in|of|by|with|for|about|to|as|for|as|to|with|by|on|in|to)\\b', text, re.IGNORECASE)\n\n    # Find their positions in the sentence\n    positions = []\n    for i, word in enumerate(text.split()):\n        for j, adverb in enumerate(adverbs):\n            if adverb.lower() == word.lower():\n                positions.append((i, j))\n\n    # Return the positions of adverbs and their corresponding words\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w*[aA]dverb\\w*\\b'\n    matches = re.findall(pattern, text)\n    if not matches:\n        print(\"No adverbs found in the sentence.\")\n    else:\n        print(\"Adverbs found:\")\n        for match in matches:\n            print(f\"Position: {text.index(match)}\")\n            print(f\"Adverb: {match}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b\\w*adv\\w*\\b'\n    \n    # Use the re.finditer() function to find all occurrences of adverbs in the given text\n    matches = re.finditer(pattern, text)\n    \n    # Initialize an empty list to store the positions of the adverbs\n    positions = []\n    \n    # Iterate over all matches and add their positions to the positions list\n    for match in matches:\n        positions.append(match.start())\n    \n    # Return the list of positions of the adverbs\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expression pattern for adverbs\n    adverb_pattern = r'\\b([A-Za-z]{3,})\\b'\n\n    # Find all the matches of the given pattern in the given text\n    matches = re.findall(adverb_pattern, text)\n\n    # Initialize an empty list to store adverb positions and their values\n    positions = []\n\n    # Loop through all the matches and add their positions to the list\n    for i, match in enumerate(matches):\n        positions.append((i, match))\n\n    # Return the list of adverb positions and their values\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for finding the first adverb\n    pattern = r'\\b\\w*[a-zA-Z]*(er|est|s|d|s\\'t|s\\'|st|est)\\b'\n    \n    # Find all matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n    \n    # If there are no matches, return an empty list\n    if not matches:\n        return []\n    \n    # Extract the first adverb from the list of matches and its position\n    adverb = matches[0]\n    position = text.find(adverb)\n    \n    # Return a dictionary containing the adverb and its position\n    return {'adverb': adverb, 'position': position}"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Regex pattern for finding adverbs\n    pattern = r\"(\\b[\\w']+[.,;:!?]*[.!?:;]\\b|\\b[\\w']+\\b)\"\n\n    # Find all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize a dictionary to store the adverbs and their positions\n    adverbs = {}\n\n    # Iterate over all the matches and extract the adverb and its position\n    for match in matches:\n        # Extract the adverb and its position from the match\n        adverb = match[0]\n        position = text.find(adverb)\n\n        # Add the adverb and its position to the dictionary\n        adverbs[adverb] = position\n\n    # Sort the dictionary by position and return the sorted list of adverbs\n    sorted_adverbs = sorted(adverbs.items(), key=lambda x: x[1])\n    return sorted_adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern for identifying adverbs\n    pattern = r'\\b\\w+(ed|ing|ed|s|ing|es|ly|ingly|less|mostly|most|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|most"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function finds the first adverb and its positions in a given sentence.\n    '''\n    pattern = r'\\b(really|not|rarely|only|hardly|never|scarcely|sometimes|often|very|frequently|many|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rarely|some|frequently|seldom|rare"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = re.compile(r'\\b(a|an|the|as|at|to|of|on|with|about|above|beside|behind|below|in|inside|near|over|under|to|through|under)\\b', re.IGNORECASE)\n    \n    # Search for adverbs in the sentence\n    matches = adverb_pattern.findall(text)\n    \n    # If there are no adverbs in the sentence, return an empty list\n    if not matches:\n        return []\n    \n    # Get the positions of the first adverb\n    positions = [text.find(match) for match in matches]\n    \n    # Return the adverbs and their positions\n    return {'adverb': matches[0], 'positions': positions}"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of a cube\n    surface_area = 6 * l**2\n    \n    # return the surface area\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of a cube with side length l\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    area = 6 * l ** 2\n    surface_area = area * 6\n    print(\"The surface area of the cube is:\", surface_area)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the input array to an array of integers\n    arr = array('i', nums)\n    # Initialize variables to keep track of positive and negative numbers\n    pos_count = 0\n    neg_count = 0\n    # Loop through the array and count the number of positive and negative numbers\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n    # Compute the ratio of positive to negative numbers and return it as a float\n    return pos_count / neg_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert the array to a list to perform the operation\n    nums_list = list(nums)\n    # count the number of positive numbers\n    positive_count = sum(1 for num in nums_list if num > 0)\n    # calculate the ration\n    ration = positive_count / len(nums_list)\n    # return the ration\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert the array to an array of type 'i' (signed integer)\n    nums_array = array('i', nums)\n\n    # count the number of positive numbers\n    pos_count = 0\n    for num in nums_array:\n        if num > 0:\n            pos_count += 1\n\n    # calculate the ration of positive numbers\n    if len(nums_array) > 0:\n        pos_ratio = pos_count / len(nums_array)\n    else:\n        pos_ratio = 0\n\n    # return the result\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = array('i', [0])\n    neg_count = array('i', [0])\n    for num in nums:\n        if num > 0:\n            pos_count.append(1)\n        else:\n            neg_count.append(1)\n    pos_ratio = float(sum(pos_count)) / len(nums)\n    neg_ratio = float(sum(neg_count)) / len(nums)\n    return pos_ratio, neg_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    count_pos = 0\n    count_neg = 0\n    for num in arr:\n        if num > 0:\n            count_pos += 1\n        else:\n            count_neg += 1\n    pos_ratio = count_pos / (count_pos + count_neg)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n    return pos_count / (pos_count + neg_count + zero_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create an array to store the count of positive numbers in the array\n    positive_array = array('i', [0]*len(nums))\n    \n    # iterate through the array and update the count of positive numbers\n    for num in nums:\n        if num > 0:\n            positive_array.itemset(positive_array.index(num), positive_array[positive_array.index(num)]+1)\n    \n    # calculate the ratio of positive numbers in the array\n    ratio = len(nums) / positive_array.item(0)\n    \n    # return the ratio of positive numbers in the array\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0]) # create an empty array to store positive count\n    total_nums = len(nums)\n    \n    for num in nums:\n        if num > 0:\n            count[0] += 1\n    \n    return count[0] / total_nums"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns the ratio of positive numbers to all numbers in the array.\n    \"\"\"\n    # convert array to list\n    nums = list(nums)\n\n    # calculate sum of all elements in the array\n    total_sum = sum(nums)\n\n    # count positive numbers in the array\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n\n    # calculate ratio of positive numbers to all numbers in the array\n    ratio = positive_count / total_sum\n\n    # return ratio\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n    \n    pos_ratio = (pos_count / (pos_count + neg_count + zero_count))\n    print(\"The ration of positive numbers in the array is:\", pos_ratio)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    largest_negative = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_negative:\n            largest_negative = num\n    return largest_negative"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    # Initialize a variable to keep track of the largest negative number\n    largest = float('-inf')\n    \n    # Loop through each element in the list\n    for num in list1:\n        # If the element is negative, update the largest variable\n        if num < 0:\n            largest = num\n    \n    # Return the largest negative number found\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = list1[0]\n    for i in list1:\n        if i < 0 and i > max_neg:\n            max_neg = i\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -10000\n    for num in list1: \n        if num < 0 and num > largest: \n            largest = num \n    return largest "
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the largest negative number in the list.\n    \"\"\"\n    max_num = lst[0]\n    for num in lst:\n        if num < 0 and num > max_num:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -float('inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    largest = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_num = None\n    for num in list1:\n        if num < 0 and (neg_num is None or num > neg_num):\n            neg_num = num\n    return neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n\n    Args:\n    list1 (list): A list containing integers.\n\n    Returns:\n    int: The largest negative number from the given list.\n\n    Example:\n    >>> largest_neg([-5, 0, 10, -25])\n    10\n\n    >>> largest_neg([20, -10, 30, -5])\n    -10\n    \"\"\"\n\n    largest_neg_num = -float('inf') #initialize largest negative number to negative infinity\n\n    for num in list1: #iterate through the list\n        if num < 0 and num > largest_neg_num: #if the number is negative and greater than the current largest negative number\n            largest_neg_num = num #update the largest negative number\n\n    return largest_neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -float('inf')\n    for num in list1: \n        if num < 0 and num > max_neg: \n            max_neg = num\n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Trim each tuple by k\n        test_list[i] = (test_list[i][0], test_list[i][1][:K])"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(i)[:K] for i in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            if j < len(test_list[i]):\n                del test_list[i][j]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            if j == len(test_list[i]) - 1:\n                test_list[i] = test_list[i][:j]\n            else:\n                test_list[i] = test_list[i][:j] + (test_list[i][j+1],) + test_list[i][j+2:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + test_list[i][-K:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = (tup[0], tup[1], tup[2][:K])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[:K])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][K:]"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length\")\n        return\n\n    # initialize a new tuple with the same length as the first tuple\n    result_tup = tuple([0] * len(test_tup1))\n\n    # loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # perform the index wise multiplication of the corresponding elements of the two tuples\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n\n    # print the result tuple\n    print(\"The result tuple is:\", result_tup)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]*test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # check if both tuples have same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should have same length\")\n        return\n    \n    # perform index wise multiplication\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    \n    # return result\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should have the same length!\")\n        return\n\n    # Create a new tuple to store the multiplication results\n    result_tup = tuple(test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n\n    print(\"Index multiplication results:\", result_tup)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_lst = []\n    for i in lst:\n        count_lst.append(count_dict[i])\n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    count = Counter(lst)\n    result = {}\n    \n    for i in tup:\n        if i in count:\n            result[i] = count[i]\n            \n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) \n    for i in lst: \n        if i in count: \n            count[i] += 1 \n    return count "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for element in lst:\n        if element in count:\n            count[element] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # create a dictionary to store the count of each element in the tuple\n    count_dict = Counter(tup)\n\n    # loop through the list and count the occurrence of each element in the tuple\n    for element in lst:\n        count_dict[element] += 1\n\n    # return the count of each element in the tuple\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    count = Counter(lst) \n\n    # printing the count of each element in the tuple\n    for i in tup: \n        print(i, count[i]) "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for element in tup:\n        if element in lst:\n            if element in count_dict:\n                count_dict[element] += 1\n            else:\n                count_dict[element] = 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count.most_common(tup)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = {}\n    for key, value in count_dict.items():\n        count_tup = (tup, key, value)\n        result[count_tup] = count_tup\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n\n    Args:\n    n (int): the number of terms to calculate\n\n    Returns:\n    int: the sum of the first n perrin numbers\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sum_of_numbers = 0\n    for num in perrin_numbers:\n        sum_of_numbers += num\n    return sum_of_numbers"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = []\n    for i in range(1, n+1):\n        perrin_numbers.append(i*(i+1))\n    return sum(perrin_numbers)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum_ = 0\n    for i in range(1, n+1):\n        sum_ += i**2\n    return sum_"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum = 0\n    while p <= n:\n        sum += p\n        p += 1\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    This function calculates the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/(i*i)\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n    total = 0\n    for num in perrin_numbers:\n        total += num\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the nth Perrin number.\n    \"\"\"\n    perrin_numbers = [1, 1, 2, 2, 4, 6, 10, 16, 28, 56, 128]\n    return perrin_numbers[n-1]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(0, len(str_list), size):\n        extracted_strings.append(''.join(str_list[i:i+size]))\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    strings = []\n    for string in l:\n        if len(string) == l:\n            strings.append(string)\n    return strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:l])\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n    '''\n    str_list = str_list[:size] # Slice the list to extract only the specified size of strings.\n    return str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, l):\n    '''\n    Extracts a string from a list of strings based on the specified length.\n    '''\n    extracted_str = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            extracted_str.append(str_list[i])\n        if len(extracted_str) == l:\n            break\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a new list with the extracted strings.\n    '''\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input, and returns a list of extracted strings.\n    '''\n    extracted_str = []\n    for i in range(len(str_list)):\n        extracted_str.append(str_list[i][:size])\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(0, len(l), l):\n        extracted_strings.append(' '.join(l[i:i+l]))\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and the desired size of each string \n    to extract and returns a new list with the extracted strings.\n    '''\n    extracted_list = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_list.append(string)\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract a specified size string from a given list of string values.\n    '''\n    # Create an empty list to store the extracted strings\n    extracted_list = []\n\n    # Loop through the list of strings\n    for s in str_list:\n        # Check if the length of the current string is equal to the specified size\n        if len(s) == size:\n            # Add the current string to the extracted list\n            extracted_list.append(s)\n\n    # Return the extracted list\n    return extracted_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove all whitespaces from the string\n    text2 = re.sub(r'\\s+','', text1)\n    # Replace all whitespaces with a single space\n    text3 = re.sub(r'\\s','', text2)\n    # Return the modified string\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # Use regular expression to remove all whitespaces\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expression to remove all whitespaces\n    pattern = re.compile(r'\\s+')\n    text2 = pattern.sub('', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # replace all whitespace characters with an empty string\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1) # replace multiple whitespaces with a single space\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove whitespaces using regular expression\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount >= 0:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percent = 0.01 # loss percentage\n    if sale_amount < actual_cost * (1 - loss_percent):\n        loss_amount = actual_cost * loss_percent\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return (sale_amount - actual_cost)\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_rate = 0.05 #loss rate in percentage\n    loss_amount = actual_cost * (loss_rate/100) #calculate loss amount\n    if sale_amount >= actual_cost: #if sale amount is greater than actual cost\n        return sale_amount - loss_amount #return sale amount minus loss amount\n    else:\n        return 0 #if sale amount is less than actual cost return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount >= actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Initialize a variable to store the sum of even factors \n    sum_even = 0\n    \n    # Iterate from 2 to n/2 \n    for i in range(2, int(n/2)+1): \n        # If i is even and divisible by n, add it to sum_even \n        if i % 2 == 0 and i % n == 0: \n            sum_even += i\n    \n    # Return the sum of even factors \n    return sum_even"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactors = []\n    for i in range(2, n+1):\n        if n % i == 0 and i % 2 == 0:\n            evenFactors.append(i)\n    return sum(evenFactors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumOfFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors += i\n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenSum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i%2 == 0:\n            evenSum += i\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of even factors of the number.\n    '''\n    sum = 0\n    for i in range(2, n):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of even factors of n.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        if n % 2 == 0:\n            sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of even factors of the number.\n    '''\n\n    # initialize a variable to store the sum of even factors\n    sum_of_even_factors = 0\n\n    # iterate through the range of numbers from 2 to n-1\n    for i in range(2, n+1):\n        # check if i is even\n        if i % 2 == 0:\n            # add i to the sum_of_even_factors\n            sum_of_even_factors += i\n\n    # return the sum_of_even_factors\n    return sum_of_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumOfEvenFactors(n):\n    \"\"\"\n    Returns the sum of even factors of a number n.\n    \"\"\"\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors += i\n    return even_factors"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    # define the pattern to match a word containing 'z'\n    pattern = r'\\b[a-zA-Z]+\\b\\s+z\\b\\s+'\n    \n    # use the pattern to search the text\n    match = re.search(pattern, text)\n    \n    # if a match is found, return the matched text\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z0-9]+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w+z'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = r'\\b(z)\\b'\n    pattern = re.compile(regex)\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b\\s[a-zA-Z]+\\b\\s[a-zA-Z]+\\b\\s[a-zA-Z]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and checks whether it contains 31 days or not.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum in range(1, 13):\n        return days[monthnum - 1]\n    else:\n        return 'Invalid month number'"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        if monthnum2 % 2 == 0:\n            return False\n        else:\n            return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 % 100 == 0:\n        if monthnum2 % 400 == 0:\n            return True\n        else:\n            return False\n    else:\n        if monthnum2 % 4 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum < 1 or monthnum > 12:\n        return False\n    if monthnum == 2:\n        if monthnum % 4 == 0 and (monthnum % 100!= 0 or monthnum % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 == 2 and (datetime.datetime.now().year % 4 == 0 and datetime.datetime.now().year % 100!= 0 or datetime.datetime.now().year % 400 == 0):\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 2:\n        if datetime.datetime.now().year % 4 == 0 and datetime.datetime.now().year % 100!= 0 or datetime.datetime.now().year % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum2 % 2 == 0 and monthnum2!= 28:\n        return False\n    elif monthnum2 == 28:\n        if datetime.datetime.now().year % 4 == 0 and datetime.datetime.now().year % 100!= 0 or datetime.datetime.now().year % 400 == 0:\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Check for valid month number\n    if not 1 <= monthnum2 <= 12:\n        return \"Invalid month number\"\n    \n    # Check if month has 31 days\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [2, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    # Define a list containing the number of days in each month\n    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Check if the length of the month number is 2 (i.e., the year is present)\n    if len(str(monthnum)) == 2:\n        # Convert the month number to an integer and check if it's between 1 and 12\n        if 1 <= int(monthnum) <= 12:\n            # Check if the month number contains 31 days or not\n            if month_days[int(monthnum)-1] == 31:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # Check if the month number is in range of 1-12\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number. Month number should be between 1 and 12.\"\n\n    # Check if the month number has 31 days or not\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [2]:\n        return False\n    else:\n        return \"Invalid month number. Month number should be 2 or 3 or 4 or 6 or 9 or 11.\""
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = lst[0]\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_sublist = lst[i]\n            min_length = len(lst[i])\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Sort the list in ascending order using the built-in sort() function.\n    lst.sort()\n    # Initialize the minimum length and the minimum sublist to be the entire list.\n    min_len = len(lst)\n    min_sublist = lst\n    # Iterate over the sorted list and check if the current sublist has a smaller length.\n    for i in range(len(lst)-1):\n        # Get the current sublist and its length.\n        sublist = lst[i:i+2]\n        sublist_len = len(sublist)\n        # If the current sublist is smaller than the current minimum sublist, update it.\n        if sublist_len < min_len:\n            min_len = sublist_len\n            min_sublist = sublist\n    # Return the minimum sublist.\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list of sublists as input and returns the sublist with the minimum length.\n    '''\n    \n    # Initialize the minimum length to the first sublist's length\n    min_length = len(lst[0])\n    \n    # Loop through the list of sublists\n    for sublist in lst:\n        # Check if the current sublist's length is less than the minimum length\n        if len(sublist) < min_length:\n            # Update the minimum length to the current sublist's length\n            min_length = len(sublist)\n    \n    # Create a new list to store the sublist with minimum length\n    min_sublist = []\n    \n    # Loop through the list of sublists again\n    for sublist in lst:\n        # Check if the current sublist's length is equal to the minimum length\n        if len(sublist) == min_length:\n            # Append the current sublist to the new list\n            min_sublist.append(sublist)\n    \n    # Return the sublist with minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the smallest sublist.\n    '''\n    min_len = float('inf')\n    sublist = []\n    for i in range(len(lst)):\n        if min_len > len(lst[i]):\n            min_len = len(lst[i])\n            sublist = lst[i]\n    return sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Find the length of the smallest sublist\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n\n    # Find the sublist with the smallest length\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) == min_len:\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0]) \n    min_sublist = lst[0] \n    for sublist in lst: \n        if len(sublist) < min_len: \n            min_len = len(sublist) \n            min_sublist = sublist \n    return min_sublist "
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    min_lst = lst[0] \n    min_len = len(lst[0]) \n    for sublist in lst[1:]: \n        if len(sublist) < min_len: \n            min_lst = sublist \n            min_len = len(sublist) \n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list of lists and returns the sublist with the minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    This function takes in two parameters, l and b, which represent the length and width of a rectangle. The function calculates and returns the area of the rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'(?i)[A-Z]+'\n    # Use the re.sub() function to replace uppercase substrings with an empty string\n    result = re.sub(pattern, '', str1)\n    # Return the modified string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings in the string\n    upper = re.findall(r'[A-Z]+', str1)\n    \n    # Remove all uppercase substrings from the string\n    for word in upper:\n        str1 = re.sub(word, '', str1)\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # define regular expression pattern to match uppercase substrings\n    pattern = r'\\b[A-Z]\\w*\\b'\n    # find all uppercase substrings in the given string using regex\n    matches = re.findall(pattern, str1)\n    # remove all uppercase substrings from the given string\n    str1 = re.sub(pattern, '', str1)\n    # return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expressions to find all uppercase substrings in the string\n    pattern = r'([A-Z][a-z]*)'\n    matches = re.findall(pattern, str1)\n\n    # Loop through the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    This function takes a string as input and returns the string with all uppercase substrings removed.\n    \"\"\"\n    # Using regular expression to find uppercase substrings\n    pattern = re.compile(r'[A-Z]')\n    # Find all uppercase substrings in the string\n    uppercase_substrings = pattern.findall(str1)\n    # Remove all uppercase substrings from the string\n    result = ''.join([c for c in str1 if not c.isupper()])\n    # Return the modified string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Find all uppercase substrings in the string\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    # Remove the uppercase substrings from the string\n    for uppercase_substring in uppercase_substrings:\n        str1 = re.sub(uppercase_substring, '', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?<=\\s)[A-Z]+(?=\\s)'\n    matches = re.findall(pattern, str1)\n    for match in matches:\n        str1 = re.sub(r'\\b'+match+'\\b','', str1)\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            result.append(sublist[0])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for sublist in lst for item in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns a new list with the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as input and counts the number of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(lst):\n    '''\n    This function takes a list and returns all possible combinations of its elements.\n    '''\n    comb = []\n    for i in range(len(lst)):\n        comb.append(lst[i])\n        for j in range(i+1, len(lst)):\n            comb.append(lst[i]+lst[j])\n    return comb"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    This function takes a list as an argument and generates all possible combinations of its elements.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            yield list1[i:j]"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                if list1[i] < list1[j]:\n                    result.append([list1[i], list1[j]])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(lst) == 1:\n        return [lst]\n    else:\n        return [lst[0]] + combinations_list(lst[1:])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    :param arr: list of integers\n    :return: the maximum product subarray\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    max_product_so_far = 1\n\n    for num in arr:\n        current_product *= num\n        if current_product < 0:\n            current_product = 1\n        if current_product > max_product:\n            max_product = current_product\n        if current_product > max_product_so_far:\n            max_product_so_far = current_product\n\n    return max_product_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    Args:\n    arr: List[int]\n        The given array of integers.\n\n    Returns:\n    int\n        The maximum product subarray.\n\n    \"\"\"\n\n    # Initialize variables\n    max_product = arr[0]\n    current_product = arr[0]\n\n    # Loop through the array and update the max_product and current_product\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            current_product *= arr[i]\n        else:\n            current_product *= arr[i]\n            max_ending_here = max(max_ending_here, current_product)\n            if current_product > max_product:\n                max_product = current_product\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    curr_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        curr_product = max(arr[i], curr_product*arr[i])\n        max_product = max(max_product, curr_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product subarray.\n    '''\n    max_product = 1\n    current_product = 1\n    max_ending_here = 1\n    \n    for i in range(len(arr)):\n        if arr[i] < 0:\n            current_product = 1\n            max_ending_here = 1\n        else:\n            current_product *= arr[i]\n            max_ending_here = max(max_ending_here * arr[i], current_product)\n            \n        max_product = max(max_product, max_ending_here)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    current_product = 1\n\n    for num in arr[1:]:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables for maximum product subarray and current subarray product\n    max_product = float('-inf')\n    curr_product = 1\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Update current subarray product\n        curr_product *= arr[i]\n\n        # Update maximum product subarray if current subarray product is greater than maximum\n        if curr_product > max_product:\n            max_product = curr_product\n\n        # If current subarray product is less than zero, reset it to 1\n        if curr_product < 0:\n            curr_product = 1\n\n    # Return maximum product subarray\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        if not all(dict[i][j] == dict[0][j] for j in range(n)):\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for key, value in dict.items():\n        values.append(value)\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # check if dictionary is empty\n    if not dict:\n        return True\n\n    # get first value from dictionary\n    value = dict.values()[0]\n\n    # loop through dictionary and check if all values are same\n    for v in dict.values():\n        if v!= value:\n            return False\n\n    # all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict[list(dict.keys())[0]]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == 1:\n        return True\n    elif values[0] == values[1]:\n        return check_value(dict, n+1)\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(1, n+1):\n        if dict[i]!= dict[1]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and an integer as inputs and returns True if all values are same in the dictionary, False otherwise.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1 and values.pop() == n:\n        return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        values = list(dict.values())\n        if len(set(values)) == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == '':\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    for key, value in dict1.items():\n        if value == \"\":\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    def max_crossing_subarray(arr, low, mid, high):\n        \"\"\"\n        Returns the maximum product of a subarray of arr between indices low and high.\n        \"\"\"\n        max1 = float('-inf')\n        max2 = float('-inf')\n        max3 = float('-inf')\n\n        for i in range(mid, low - 1, -1):\n            if arr[i] > max1:\n                max3 = max2\n                max2 = max1\n                max1 = arr[i]\n            elif arr[i] > max2:\n                max3 = max2\n                max2 = arr[i]\n            elif arr[i] > max3:\n                max3 = arr[i]\n\n        for i in range(mid + 1, high + 1):\n            if arr[i] > max1:\n                max3 = max2\n                max2 = max1\n                max1 = arr[i]\n            elif arr[i] > max2:\n                max3 = max2\n                max2 = arr[i]\n            elif arr[i] > max3:\n                max3 = arr[i]\n\n        return max1 * max2 * max3\n\n    n = len(arr)\n    max_product = float('-inf')\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if j - i + 1 > 2:\n                for k in range(j + 1, n):\n                    max_product = max(max_product, max_crossing_subarray(arr, i, j, k))\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    def increasing_subsequence(arr):\n        n = len(arr)\n        inc = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if arr[i] > arr[j]:\n                    inc[i] = max(inc[i], inc[j] + 1)\n        return inc\n    \n    # Find the increasing subsequence of arr\n    inc = increasing_subsequence(arr)\n    \n    # Find the maximum product formed by multiplying numbers in the increasing subsequence\n    max_product = arr[0] * arr[inc[0]]\n    for i in range(1, len(arr)):\n        max_product = max(max_product, arr[i] * arr[inc[i]])\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n    else:\n        dp = [1] * n\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1] * arr[i], dp[i - 2] * arr[i], arr[i])\n        return max(dp[0], dp[1])"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here *= arr[i]\n        \n        if max_ending_here < 0:\n            max_ending_here = 0\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    dp = [0] * n\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[j] > 0:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n        max_ending_here = max(arr[i], max_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    if not arr:\n        return 0\n    max_product = float('-inf')\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        if current_product >= 0:\n            current_product *= arr[i]\n        else:\n            current_product = arr[i]\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Initialize variables to store the maximum product and the current subsequence product\n    max_product = float('-inf')\n    current_product = 1\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current element is smaller than the previous element\n        if arr[i] < arr[i - 1]:\n            # Calculate the product of the current subsequence and the previous element\n            current_product *= arr[i - 1]\n            # Update the maximum product if the current subsequence product is greater\n            max_product = max(max_product, current_product)\n        # If the current element is greater than the previous element, reset the current subsequence product to 1\n        else:\n            current_product = 1\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = 1\n\n    for i in range(1, n):\n        max_ending_here = max(max_ending_here * arr[i], max_so_far)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum of the pairwise additions to 0\n    pairwise_sum = 0\n    # Iterate through the tuple\n    for i in range(len(test_tup)-1):\n        # Add the current element and the next element to get the pairwise sum\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    # Return the final pairwise sum\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n    else:\n        for i in range(len(test_tup)-1):\n            test_tup[i] += test_tup[i+1]\n        return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(i + j for i, j in zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # check if the input is a tuple\n    if not isinstance(test_tup, tuple):\n        print(\"Input must be a tuple\")\n        return None\n    \n    # initialize the sum to 0\n    pairwise_sum = 0\n    \n    # loop through the tuple and add the neighboring elements\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i+1]\n        \n    # return the pairwise sum\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum([test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1)])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return test_tup[0] + add_pairwise(test_tup[1:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    add_list = []\n    for i in range(1, len(test_tup)):\n        add_list.append(test_tup[i] + test_tup[i-1])\n        \n    return add_list"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"The given tuple must have at least 2 elements.\"\n    else:\n        return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Find the length of the tuple\n    length = len(test_tup)\n    \n    # Initialize variables for the sum and result\n    sum = 0\n    result = 0\n    \n    # Loop through the tuple and add the pairwise additions\n    for i in range(length - 1):\n        sum += test_tup[i] + test_tup[i+1]\n        result = sum\n    \n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes two arrays arr and n as input and returns the remainder of the array multiplication.\n    '''\n\n    # Multiply all elements of the array and store in a new array\n    result = [x * arr[i] for i, x in enumerate(arr)]\n\n    # Find the product of the new array and modulo n\n    product = 1\n    for x in result:\n        product *= x\n\n    # Return the remainder of the product\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array of integers and an integer n as input.\n    It returns the product of the array multiplication modulo n.\n    '''\n    # Initialize a variable to store the product\n    product = 1\n    \n    # Iterate through the array and multiply each element by the product\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n        \n    # Return the final product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a number as input and returns the product of array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in an array and a modulo value n, and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return False\n    elif len(l) == 1:\n        return True\n    elif l[0] == l[-1]:\n        return False\n    else:\n        for i in range(len(l)-1):\n            if l[i] + 1 == l[i+1]:\n                return False\n        return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l) - 1):\n        if l[i] + 1 == l[i + 1]:\n            return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return \"The list should have at least two numbers\"\n    else:\n        for i in range(len(l)-1):\n            if l[i] + 1 == l[i+1]:\n                return \"The list contains consecutive numbers\"\n            else:\n                continue\n        return \"The list does not contain consecutive numbers\""
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, otherwise it returns False.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers and False otherwise.\n    '''\n    if len(l) < 2: # If the length of the list is less than 2, the list cannot contain consecutive numbers\n        return False\n    else:\n        for i in range(len(l)-1): # Loop through the list and check if there are any consecutive numbers\n            if l[i] + 1!= l[i+1]: # If there is a consecutive number, return True\n                return True\n        # If no consecutive number is found, return False\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # initialize an empty set to store the common elements\n    common_set = set()\n\n    # loop through each element in list1\n    for element1 in test_list1:\n        # loop through each element in list2\n        for element2 in test_list2:\n            # check if element1 and element2 are equal\n            if element1 == element2:\n                # add element1 to common_set\n                common_set.add(element1)\n                # break the inner loop once an element is found in common_set\n                break\n\n    # convert common_set to a tuple and return it\n    return tuple(common_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # check if the lists are of equal length\n    if len(test_list1)!= len(test_list2):\n        return None\n    \n    # convert both lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # convert the intersection set back to a list\n    intersection_list = list(intersection)\n    \n    # return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two tuple lists as input and returns the intersection of their elements.\n    The elements of the tuple list are considered in the same order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return list(set1.intersection(set2))"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two tuple lists as input and returns the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # We will initialize an empty set to store the intersection of elements\n    intersection = set()\n\n    # We will iterate over each element of the first list and check if it exists in the second list\n    for elem in test_list1:\n        # If the element exists in the second list, we will add it to the intersection set\n        if elem in test_list2:\n            intersection.add(elem)\n\n    # We will convert the set to a tuple and return it\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1.intersection(set2)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set from the first list to remove duplicate elements\n    set1 = set(test_list1)\n\n    # Use the set to find the elements that are in both lists\n    result = set1.intersection(set(test_list2))\n\n    # Convert the result to a list and return it\n    return list(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1 == tup2 and tup1 not in result:\n                result.append(tup1)\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes in two tuple lists and finds their tuple intersection irrespective of their order.\n\n    Parameters:\n        test_list1 (list): A list of tuples.\n        test_list2 (list): A list of tuples.\n\n    Returns:\n        set: A set containing the common elements of the two tuple lists.\n    \"\"\"\n\n    # create an empty set to store the common elements\n    common_elements = set()\n\n    # loop through each tuple in test_list1 and test_list2\n    for item1 in test_list1:\n        for item2 in test_list2:\n            # if the tuple is a common element, add it to the common_elements set\n            if item1 == item2:\n                common_elements.add(item1)\n\n    # return the common elements set\n    return common_elements"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set of the first tuple list, and then iterate through the second tuple list\n    # to check if the element is present in the set. If it is, add it to a set of the common tuples.\n    common_tuples = set()\n    for tuple2 in test_list2:\n        if tuple2 in test_list1:\n            common_tuples.add(tuple2)\n    return tuple(common_tuples)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #create a set from the first list\n    set_1 = set(test_list1)\n    #create a set from the second list\n    set_2 = set(test_list2)\n    #find the intersection of the two sets\n    intersection = set_1.intersection(set_2)\n    #convert the set back to a list\n    intersection_list = list(intersection)\n    #return the intersection list\n    return intersection_list"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n\n    Parameters\n    ----------\n    str1 : str\n        The string to modify.\n    ch : str\n        The character to replace.\n    newch : str\n        The character to replace the old character with.\n\n    Returns\n    -------\n    str\n        The modified string.\n\n    Examples\n    --------\n    >>> replace_char(\"Hello world\", \"l\", \"!\")\n    'H!o w!rld'\n\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # create a new string and replace the characters in the old string\n    new_str = str1.replace(ch, newch)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function takes in two parameters: a string str1 and two characters ch and newch.\n    The function replaces all occurrences of ch in str1 with newch, and returns the modified string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # split the string into list of characters\n    char_list = list(str1)\n    # loop through each character in the list\n    for i in range(len(char_list)):\n        # check if the character is equal to the character to be replaced\n        if char_list[i] == ch:\n            # replace the character with the new character\n            char_list[i] = newch\n    # join the list of characters back into a string\n    new_str = ''.join(char_list)\n    # return the new string\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the input dictionary\n    counter = Counter(dict1)\n    \n    # Sort the Counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1])\n    \n    # Convert the sorted Counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object with the input dictionary\n    counter = Counter(dict1)\n    # convert the Counter object into a list of tuples (value, count)\n    data = [(count, value) for value, count in counter.items()]\n    # sort the list of tuples by value in descending order\n    data.sort(reverse=True)\n    # create a new dictionary from the sorted list of tuples\n    sorted_dict = dict(data)\n    # return the new dictionary\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Sort the dictionary by values in descending order\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    \n    # sort the counter by value in descending order\n    sorted_counter = counter.most_common()\n    \n    # convert the sorted counter back to a dictionary\n    sorted_dict = {item[0]: item[1] for item in sorted_counter}\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = {k: v for k, v in counter.most_common()}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value in ascending order.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1])\n    sorted_dict = {}\n    for item in sorted_counter:\n        sorted_dict[item[0]] = item[1]\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        largest = max(nums)\n        smallest = min(nums)\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        max_num = nums[0]\n        min_num = nums[0]\n        for num in nums:\n            if num > max_num:\n                max_num = num\n            elif num < min_num:\n                min_num = num\n        return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Get the maximum and minimum values in the array\n    max_value = max(nums)\n    min_value = min(nums)\n    \n    # Find the sum of the maximum and minimum values\n    sum_values = max_value + min_value\n    \n    # Return the sum of the maximum and minimum values\n    return sum_values"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = float('-inf')\n    min_num = float('inf')\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    # Find the largest and smallest values\n    largest = nums[len(nums)-1]\n    smallest = nums[0]\n    # Find the sum of the largest and smallest values\n    sum_largest_smallest = largest + smallest\n    # Return the sum of the largest and smallest values\n    return sum_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # sort the array in ascending order\n    nums.sort()\n    \n    # find the sum of the largest and smallest values\n    largest_sum = sum(nums)\n    smallest_sum = sum(nums[:1])\n    \n    return largest_sum + smallest_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n    # calculate the sum of the largest and smallest values\n    big_sum = largest + smallest\n    return big_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array as input and returns the sum of the largest and smallest value in the array.\n    '''\n    # Find the largest and smallest value in the array\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Return the sum of the largest and smallest value\n    return max_val + min_val"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case_string = string.lower()\n    return lower_case_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if a given string is all uppercase or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'([a-z]+)') # regex pattern to match lowercase substrings\n    result = pattern.sub('', str1) # replace all lowercase substrings with empty string\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    \n    # Use re.sub() function to replace the lowercase substrings with an empty string\n    str1 = re.sub(pattern, '', str1)\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_regex = re.compile(r'[a-z]+', re.IGNORECASE)\n    return lowercase_regex.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Regular expression to match lowercase substrings\n    lowercase_regex = re.compile('[a-z]+')\n    # Find all lowercase substrings in the string and replace them with an empty string\n    return re.sub(lowercase_regex, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Use the re.sub() method to remove the substrings from the string\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n\n    # Find all the lowercase substrings in the given string\n    matches = pattern.findall(string)\n\n    # Loop through all the matches and replace them with an empty string\n    for match in matches:\n        string = string.replace(match, '')\n\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Remove all lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(string):\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', string)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'[a-z]+')\n    result = pattern.sub('', string)\n    return result"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = n // 10 ** (len(str(n)))\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # converting the given number to a string\n    num = str(n)\n    # getting the first digit of the string\n    first_digit = num[0]\n    # returning the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # check if the given number is a positive integer\n    if type(n)!= int or n < 0:\n        return \"Please enter a positive integer.\"\n    \n    # convert the number to a string\n    num_str = str(n)\n    \n    # check if the string contains only one character\n    if len(num_str)!= 1:\n        return \"Please enter a single digit number.\"\n    \n    # return the first character of the string\n    return num_str[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #checking if the given number is a positive integer\n    if type(n)!= int or n < 0:\n        return \"The given number is not a positive integer.\"\n    #extracting the first digit of the number\n    first_digit = n // 10\n    #returning the first digit of the number\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first = 0\n    while n > 0:\n        first = n % 10\n        n //= 10\n    return first"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    # get the first character of the string\n    first_char = num_str[0]\n    # convert the first character to an integer\n    first_digit = int(first_char)\n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Get the first digit of the given number\n    first_digit = str(n)[0]\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer number as input and returns the first digit of that number.\n    \"\"\"\n    # Convert the number to a string to extract its first character\n    num_str = str(n)\n    # Extract the first character of the string\n    first_char = num_str[0]\n    # Convert the first character to an integer\n    first_num = int(first_char)\n    # Return the first digit\n    return first_num"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns a new list with only the odd numbers.\n    '''\n    new_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            new_lst.append(num)\n    return new_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns a new list of odd integers only.\n    '''\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    \"\"\"\n    This function takes a list of integers and returns only the odd ones.\n    \"\"\"\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_nums = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_nums += i\n    \n    diff = sum_cubes - sum_nums\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # compute the sum of cubes of the first n natural numbers\n    cubes = [i**3 for i in range(n+1)]\n    sum_cubes = sum(cubes)\n\n    # compute the sum of the first n natural numbers\n    natural_numbers = [i for i in range(1, n+1)]\n    sum_natural_numbers = sum(natural_numbers)\n\n    # find the difference between the two sums\n    difference = sum_cubes - sum_natural_numbers\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initialize the sum of cubes of the first n natural numbers and the sum of the first n natural numbers to 0\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    \n    # Iterate through the first n natural numbers and calculate the sum of cubes and the sum of natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n    \n    # Return the difference between the sum of cubes and the sum of natural numbers\n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # find the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # find the sum of the first n natural numbers\n    sum_of_natural = sum([i for i in range(1, n+1)])\n    \n    # calculate the difference between the sum of cubes and the sum of natural numbers\n    diff = sum_of_cubes - sum_of_natural\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Initialize variables\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    \n    # Find sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    \n    # Find sum of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_numbers += i\n    \n    # Find difference between sum of cubes and sum of numbers\n    difference = sum_of_cubes - sum_of_numbers\n    \n    # Return difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Initialize variables\n    sum_cubes = 0\n    sum_natural_numbers = 0\n\n    # Calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n + 1):\n        sum_cubes += i ** 3\n\n    # Calculate the sum of the first n natural numbers\n    for i in range(1, n + 1):\n        sum_natural_numbers += i\n\n    # Calculate the difference between the two sums\n    difference = sum_cubes - sum_natural_numbers\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initialize the sum of cubes and sum of natural numbers\n    cube_sum = 0\n    natural_sum = 0\n    \n    # Loop n times to calculate the sum of cubes and sum of natural numbers\n    for i in range(1, n+1):\n        cube_sum += i**3\n        natural_sum += i\n    \n    # Return the difference between the two sums\n    return cube_sum - natural_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes = [i**3 for i in range(n+1)]\n    sum_cubes = sum(cubes)\n    natural_numbers = [i for i in range(1, n+1)]\n    sum_natural_numbers = sum(natural_numbers)\n    return abs(sum_cubes - sum_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find the sum of cubes of first n natural numbers\n    cubes_sum = sum([i**3 for i in range(1, n+1)])\n\n    # Find the sum of first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # Calculate the difference between the two sums\n    difference = abs(cubes_sum - sum_natural)\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(n):\n        sum_cubes += i**3\n        sum_natural += i\n    return sum_cubes - sum_natural"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = 0\n    count = 0\n    for i in range(N):\n        xor_sum += A[i]\n        if xor_sum % 2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes a list A and an integer N as input.\n    It then returns the number of pairs whose xor value is odd.\n\n    Example:\n    >>> A = [1, 2, 3, 4, 5]\n    >>> N = 7\n    >>> find_Odd_Pair(A, N)\n    6\n\n    Note: The function first computes the xor value of each element in A.\n          Then, for each element, it checks if the xor value is odd.\n          The function returns the total number of odd pairs found.\n    '''\n\n    # Initialize the variable to store the count of odd pairs\n    count = 0\n\n    # Iterate through each element in A\n    for i in range(len(A)):\n        # Compute the xor value of the current element\n        xor_value = A[i] ^ A[i+1] ^ A[i+2] ^ A[i+3] ^ A[i+4] ^ A[i+5] ^ A[i+6] ^ A[i+7] ^ A[i+8] ^ A[i+9] ^ A[i+10] ^ A[i+11] ^ A[i+12] ^ A[i+13] ^ A[i+14] ^ A[i+15] ^ A[i+16] ^ A[i+17] ^ A[i+18] ^ A[i+19] ^ A[i+20] ^ A[i+21] ^ A[i+22] ^ A[i+23] ^ A[i+24] ^ A[i+25] ^ A[i+26] ^ A[i+27] ^ A[i+28] ^ A[i+29] ^ A[i+30] ^ A[i+31] ^ A[i+32] ^ A[i+33] ^ A[i+34] ^ A[i+35] ^ A[i+36] ^ A[i+37] ^ A[i+38] ^ A[i+39] ^ A[i+40] ^ A[i+41] ^ A[i+42] ^ A[i+43] ^ A[i+44] ^ A[i+45] ^ A[i+46] ^ A[i+47] ^ A[i+48] ^ A[i+49] ^ A[i+50] ^ A[i+51] ^ A[i+52] ^ A[i+53] ^ A[i+54] ^ A[i+55] ^ A[i+56] ^ A[i+57] ^ A[i+58] ^ A[i+59] ^ A[i+60] ^ A[i+61] ^ A[i+62] ^ A[i+63] ^ A[i+64] ^ A[i+65] ^ A[i+66] ^ A[i+67] ^ A[i+68] ^ A[i+69] ^ A[i+70] ^ A[i+71] ^ A[i+72] ^ A[i+73] ^ A[i+74] ^ A[i+75] ^ A[i+76] ^ A[i+77] ^ A[i+78] ^ A[i+79] ^ A[i+80] ^ A[i+81] ^ A[i+82] ^ A[i+83] ^ A[i+84] ^ A[i+85] ^ A[i+86] ^ A[i+87] ^ A[i+88] ^ A[i+89] ^ A[i+90] ^ A[i+91] ^ A[i+92] ^ A[i+93] ^ A[i+94] ^ A[i+95] ^ A[i+96] ^ A[i+97] ^ A[i+98] ^ A[i+99] ^ A[i+100] ^ A[i+101] ^ A[i+102] ^ A[i+103] ^ A[i+10"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n                if count == N:\n                    break\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        xor = 0\n        for j in range(i):\n            xor ^= A[j]\n        if xor % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # initialize the count variable to zero\n    count = 0\n\n    # loop through all pairs of elements in the array\n    for i in range(N):\n        for j in range(i+1,N):\n            # calculate the xor of the two elements\n            xor = A[i] ^ A[j]\n\n            # if the xor is odd, increment the count variable\n            if xor % 2 == 1:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes an array A of size N and returns the count of odd xor pairs in the array.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        new_char = chr(ord(char) ^ 32) if char.islower() else chr(ord(char) ^ 32)\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([chr(ord(char) ^ 32) if char.islower() else char for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # initialize an empty string to store the new string\n    new_string = \"\"\n    # iterate through each character in the original string\n    for char in string:\n        # check if the character is uppercase\n        if char.isupper():\n            # if it is, add it to the new string in lowercase\n            new_string += char.lower()\n        else:\n            # if it isn't, add it to the new string in uppercase\n            new_string += char.upper()\n    # return the new string\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # initialize variables to store the sum and count of differences\n    total_diff = 0\n    count = 0\n\n    # convert the two integers to strings and iterate through each digit\n    for digit1, digit2 in zip(str(n1), str(n2)):\n        # calculate the per-digit difference\n        diff = int(digit1) - int(digit2)\n\n        # add the difference to the total sum and increment the count of differences\n        total_diff += diff\n        count += 1\n\n    # return the total sum of differences\n    return total_diff, count"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Function to check if a number is a palindrome\n    def is_palindrome(num):\n        if num < 0:\n            num = -num\n        reversed_num = 0\n        while num > 0:\n            remainder = num % 10\n            reversed_num = reversed_num * 10 + remainder\n            num = num // 10\n        return num == reversed_num\n\n    # Check if both numbers are palindromes\n    if is_palindrome(n1) and is_palindrome(n2):\n        # Find the difference between the numbers\n        diff = abs(n1 - n2)\n\n        # Convert the difference to a list of digits\n        diff_list = [int(digit) for digit in str(diff)]\n\n        # Calculate the sum of the per-digit differences\n        sum_diff = 0\n        for i in range(len(diff_list)):\n            sum_diff += abs(diff_list[i])\n\n        return sum_diff\n    else:\n        print(\"One or both of the numbers are not palindromes\")"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(10):\n        diff = abs(int(str(n1)[i]) - int(str(n2)[i]))\n        sum_diff += diff\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n\n    # Calculate the per-digit difference between the two numbers\n    per_digit_diff = sum([abs(n1_digit - n2_digit) for n1_digit, n2_digit in zip(n1_digits, n2_digits)])\n\n    # Return the total per-digit difference\n    return per_digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert both numbers to lists of digits\n    n1_list = [int(digit) for digit in str(n1)]\n    n2_list = [int(digit) for digit in str(n2)]\n    # create an empty list to store the per-digit differences\n    difference_list = []\n    # loop through each digit in both lists\n    for i in range(len(n1_list)):\n        # calculate the difference between the digits\n        difference = abs(n1_list[i] - n2_list[i])\n        # append the difference to the list of differences\n        difference_list.append(difference)\n    # calculate the sum of the differences\n    sum_difference = sum(difference_list)\n    # return the sum of the differences\n    return sum_difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize the sum of per-digit difference to 0\n    diff_sum = 0\n    \n    # Convert the two numbers to strings\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # Iterate through each character in the strings\n    for i in range(len(str_n1)):\n        # Calculate the difference between the characters and add it to the sum\n        diff_sum += abs(ord(str_n1[i]) - ord(str_n2[i]))\n        \n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(10):\n        diff += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 - n2\n    sum_diff = 0\n    for digit in str(abs(diff)):\n        sum_diff += int(digit)\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Initialize the sum variable\n    sum_diff = 0\n\n    # Loop through each digit of n1 and n2\n    for i in range(len(n1_str)):\n        diff = abs(ord(n1_str[i]) - ord(n2_str[i]))\n        sum_diff += diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the input integers to strings and split them into lists of digits\n    str1 = list(str(n1))\n    str2 = list(str(n2))\n\n    # Initialize the sum of the per-digit differences to zero\n    diff_sum = 0\n\n    # Iterate over the digits of the input integers\n    for i in range(max(len(str1), len(str2))):\n        # Calculate the per-digit difference between the current digit pairs\n        diff = abs(int(str1[i]) - int(str2[i]))\n\n        # Add the per-digit difference to the sum of the differences\n        diff_sum += diff\n\n    # Return the sum of the per-digit differences\n    return diff_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(arr, size):\n    '''\n    This function takes in an array and its size and returns the sum of the largest contiguous sublist of size \"size\" in the array.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if i >= size - 1:\n            if current_sum > max_sum:\n                max_sum = current_sum\n            current_sum -= arr[i-size+1]\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n    end_index = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i\n            end_index = i\n        elif current_sum < 0:\n            current_sum = 0\n\n    return a[start_index:end_index+1]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size > len(a):\n        raise ValueError(\"Size is greater than the length of the list.\")\n\n    max_sum = float('-inf')\n    current_sum = 0\n    max_start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_start = i\n\n    return max_sum, max_start, current_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    max_ending_here = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        if current_sum < 0:\n            current_sum = 0\n\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n        if current_sum > max_ending_here:\n            max_ending_here = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        \n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Get the union of two tuples using set operations\n    union_set = test_tup1.union(test_tup2)\n    # Convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n    # Return the sorted list as output\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Combine the two tuples into a single list\n    union_list = test_tup1 + test_tup2\n\n    # Sort the combined list in ascending order\n    union_list.sort()\n\n    # Output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two lists\n    union = list(set(test_tup1) | set(test_tup2))\n    # Sort the list in ascending order\n    union.sort()\n    # Output the sorted list\n    print(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of two tuples using set operation\n    union_set = test_tup1 | test_tup2\n    \n    # Convert the set to a list and sort it in ascending order\n    sorted_list = sorted(list(union_set))\n    \n    # Print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n    \n    # Remove duplicates from the combined list using a set\n    unique_list = list(set(combined_list))\n    \n    # Sort the unique list in ascending order\n    unique_list.sort()\n    \n    # Output the unique list\n    print(unique_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create an empty set to hold the union of the elements of the two tuples\n    union_set = set()\n\n    # add all elements of the first tuple to the union set\n    union_set |= set(test_tup1)\n\n    # add all elements of the second tuple to the union set\n    union_set |= set(test_tup2)\n\n    # convert the set to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n\n    # print the union of the two tuples in sorted order\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Get the union of the two tuples\n    union_list = list(set(test_tup1 + test_tup2))\n    # Sort the union list in ascending order\n    union_list.sort()\n    # Output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1 + test_tup2))\n    union_list.sort()\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Use the union method to find the union of the two lists\n    union_list = test_tup1 + test_tup2\n    # Sort the union list in ascending order\n    union_list.sort()\n    # Print the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Union of two tuples is the set of elements that are in either of them.\n    union_set = set(test_tup1) | set(test_tup2)\n    # Convert the set to a list and sort it.\n    union_list = sorted(list(union_set))\n    # Print the union of the two tuples.\n    print(union_list)\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    current_len = 0\n\n    for i in lst:\n        if i == lst[0]:\n            current_len += 1\n        else:\n            max_len = max(max_len, current_len)\n            current_len = 1\n\n    return max(max_len, current_len)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # create a list of lists to store sublists\n    sublists = []\n    # loop through the input list and split it into sublists\n    for i in range(len(lst)):\n        sublists.append(lst[i:i+10])\n    # initialize the maximum length to 0\n    max_length = 0\n    # loop through the sublists and find the length of the longest sublist\n    for sublist in sublists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    # return the maximum length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    for i in range(len(lst)):\n        sublist = lst[i]\n        for j in range(i+1, len(lst)):\n            sublist += lst[j]\n        maxLength = max(maxLength, len(sublist))\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    currentLength = 1\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            currentLength += 1\n        else:\n            if maxLength < currentLength:\n                maxLength = currentLength\n            currentLength = 1\n            \n    if maxLength < currentLength:\n        maxLength = currentLength\n        \n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize max length as 0\n    max_length = 0\n    # loop through each element in the list\n    for i in range(len(lst)):\n        # initialize current length as 0\n        current_length = 1\n        # loop through each element after i in the list\n        for j in range(i+1, len(lst)):\n            # check if the element at j is the same as the element at i\n            if lst[i] == lst[j]:\n                # if it is, increment the current length\n                current_length += 1\n            else:\n                # if it's not, break out of the inner loop\n                break\n        # update max_length if current_length is greater\n        if current_length > max_length:\n            max_length = current_length\n    # return the max length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list as input and returns the length of the longest sublist in the list.\n    '''\n\n    # Initialize max_len to 1 because a sublist of length 1 is always the same length\n    max_len = 1\n\n    # Iterate through each sublist in the list\n    for i in range(1, len(lst)):\n        # Initialize sublist_len to 1\n        sublist_len = 1\n        # Iterate through each subsequent element in the sublist\n        for j in range(i):\n            # If the element in the current sublist is greater than the element in the previous sublist, increment sublist_len\n            if lst[j] < lst[i]:\n                sublist_len += 1\n            else:\n                break\n        # Update max_len if the current sublist is longer than the previous max_len\n        if sublist_len > max_len:\n            max_len = sublist_len\n\n    # Return the maximum length of any sublist in the input list\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize variables\n    max_length = 1\n    current_length = 1\n\n    # Loop through the list\n    for i in range(1, len(lst)):\n        # If the current element is greater than the last element, increase the current length\n        if lst[i] > lst[i-1]:\n            current_length += 1\n        else:\n            # If the current element is less than or equal to the last element, reset the current length\n            current_length = 1\n\n        # If the current length is greater than the maximum length, update the maximum length\n        if current_length > max_length:\n            max_length = current_length\n\n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    curr_length = 0\n    \n    # iterate over each element of the list\n    for elem in lst:\n        # add the length of the current sublist to the current length\n        curr_length += 1\n        \n        # if the length of the current sublist is greater than the maximum length, update the maximum length\n        if curr_length > max_length:\n            max_length = curr_length\n        \n        # if the length of the current sublist is less than or equal to the maximum length, reduce the current length\n        else:\n            curr_length = 0\n            \n    # return the maximum length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_sublist = 0\n    current_sublist_length = 0\n    \n    for i in range(len(lst)):\n        if lst[i] == lst[i-1]:\n            current_sublist_length += 1\n        else:\n            longest_sublist = max(longest_sublist, current_sublist_length)\n            current_sublist_length = 1\n    \n    return max(longest_sublist, current_sublist_length)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"') # regular expression pattern to match quotes\n    values = re.findall(pattern, text) # find all matches of the pattern in the text\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Find all the occurrences of quotation marks in the string\n    matches = re.findall(r'\".*?\"', text)\n    \n    # Initialize an empty list to store the extracted values\n    extracted_values = []\n    \n    # Loop through all the matches and append their contents to the extracted_values list\n    for match in matches:\n        extracted_values.append(match.strip('\"'))\n    \n    # Return the extracted_values list\n    return extracted_values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")\\w+\\b(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")[\\w\\s-]+(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match quotation marks and values\n    pattern = r'\"(\\w+)\"'\n    # Use the re.findall() function to find all the matches in the text\n    matches = re.findall(pattern, text)\n    # Return a list of all the values found in the text\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        values.append(match)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Use regular expression to find all values between quotation marks\n    values = re.findall(r'\"(.*?)\"', text)\n    # Return the list of extracted values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")[\\w\\s]+(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    # count number of pairs\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    This function splits a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Convert the string to a list of characters\n    characters = list(word)\n    # Return the list of characters\n    return characters"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to 0\n    total = 0\n    \n    # Loop through each digit of the number\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 10\n        \n        # Add the digit to the total\n        total += digit\n        \n        # Remove the last digit from the number\n        n //= 10\n    \n    # Return the total sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # check if the input is a non-negative integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer')\n\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through each digit of the number and add it to the sum\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n = n // 10\n\n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Loop through each digit in the integer and add it to the sum\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    \n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and use a loop to add up the digits\n    digits_sum = 0\n    for digit in str(n):\n        digits_sum += int(digit)\n    return digits_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through each digit of the number\n    while n > 0:\n        # Get the last digit of the number\n        last_digit = n % 10\n        \n        # Add the last digit to the sum\n        sum += last_digit\n        \n        # Remove the last digit from the number\n        n //= 10\n    \n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and returns True if the list is sorted in ascending order,\n    and False otherwise.\n    '''\n    if len(list1) <= 1:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        if list1[0] <= list1[1]:\n            for i in range(1, len(list1)-1):\n                if list1[i] < list1[i-1]:\n                    return False\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    \n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    This function takes in a list as a parameter and returns True if the list is sorted in ascending order and False if it's not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n\n    Args:\n        length (int): The number of dictionaries to create in the list.\n\n    Returns:\n        list: A list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if isinstance(list1[i][j], list):\n                list1[i][j] = sorted(list1[i][j])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # iterate over each sublist in the list\n    for sublist in list1:\n        # sort the sublist using the built-in sort function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Args:\n        nums (list): A list of lists containing numbers.\n\n    Returns:\n        list: A list of unique numbers from all the input lists.\n    \"\"\"\n\n    # Use sets to remove duplicates\n    unique_nums = set()\n\n    for num_list in nums:\n        unique_nums.update(num_list)\n\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # remove duplicates from the first list\n    unique_nums = set(nums[0])\n    # remove duplicates from the rest of the lists\n    for i in range(1, len(nums)):\n        unique_nums = unique_nums.intersection(set(nums[i]))\n    # return the unique numbers\n    return sorted(list(unique_nums))"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists as input and returns a new list with only the unique elements from each list.\n    \"\"\"\n    # Convert the list of lists to a single list\n    flat_list = [item for sublist in nums for item in sublist]\n\n    # Convert the flat list to a set to remove duplicates\n    unique_set = set(flat_list)\n\n    # Convert the set back to a list and return it as the output\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n\n    # remove duplicates from the list\n    unique_nums = set(list_data)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data)) # get unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Remove duplicates from the list using a set and convert it back to a list\n    unique_nums = list(set(list_data))\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    # Remove duplicates from the list\n    unique_list = list(set(list_data))\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_list:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    # create a set to store unique numbers\n    unique_nums = set(list_data)\n    \n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)  # convert list to set to remove duplicates\n    product = 1  # initialize product to 1\n    for num in unique_numbers:\n        product *= num  # multiply the product by each unique number\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h\n\ndef main():\n    r = float(input(\"Enter the radius of the cylinder: \"))\n    h = float(input(\"Enter the height of the cylinder: \"))\n    print(\"The surface area of the cylinder is:\", surfacearea_cylinder(r, h))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi*(r**2)*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    return 2*3.1415926535*r*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    # Calculate the surface area using the formula:\n    # A = 2\u03c0rh + 2\u03c0rh2 = 2\u03c0r(h + h^2)\n    surface_area = 2*3.14159*r*(h + h**2)\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    volume = math.pi * r * r * h\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r * r\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function calculates the surface area of a cylinder.\n    \"\"\"\n    area = 2 * r * h\n    print(\"The surface area of the cylinder is:\", area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula to find surface area of a cylinder\n    surface_area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h + 2 * 3.14 * 3.14 * r * r * h + 3.14 * 3.14 * r * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    import math\n    \n    # calculate the area of the cylinder\n    area = math.pi * r**2\n    # add the surface area of the top and bottom faces\n    area += 2 * r * h\n    \n    # return the surface area\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the volume of the cylinder\n    V = (3/5)*pi*r**2*h\n    \n    # calculate the surface area of the cylinder\n    A = 2*pi*(r**2 + h**2)\n    \n    return A, V"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    else:\n        return all(x in A for x in B)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Loop through the list A and check if the sublist B is present in it\n    for i in range(len(A)): \n        if A[i:i+len(B)] == B: \n            return True \n    return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)):\n        if B[i] in A[i:]:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    \n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    if len(A) > len(B):\n        return False\n    elif len(A) == 0:\n        return True\n    else:\n        i = 0\n        j = 0\n        while i < len(A):\n            if A[i] == B[j]:\n                i += 1\n                j += 1\n            elif j == 0:\n                return False\n            else:\n                j = max(j - 1, 0)\n        return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    # If the length of A is greater than or equal to B, then there is no sublist\n    if len(A) >= len(B):\n        return False\n    \n    # Initialize a variable to keep track of the start index of the sublist\n    start = 0\n    \n    # Traverse the sublist and check if it is a sublist of A\n    while start <= len(A) - len(B):\n        if A[start:start+len(B)] == B:\n            return True\n        start += 1\n        \n    # If the sublist is not found, return False\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n\n    :param A: List of integers\n    :param B: List of integers\n    :return: True if A is sublist of B, False otherwise.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    if j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists as input and returns True if the first list is \n    a sublist of the second list else False.\n    '''\n    \n    for i in range(len(A)): \n        if A[i] in B: \n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function checks whether a list is sublist of another or not.\n    \"\"\"\n    if not A:\n        return True\n    if not B:\n        return False\n    if len(A) > len(B):\n        A, B = B, A\n    for i in range(len(A)):\n        if A[i] == B[0]:\n            if is_Sub_Array(A[i+1:], B[1:]):\n                return True\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize variables\n    factorial = 1\n    last_digit = 0\n    # Iterate through the digits in the number\n    while n > 0:\n        # Add the factorial of the current digit to the running total\n        factorial = factorial * n\n        # Remove the last digit from the number\n        n = n // 10\n        # Calculate the last digit of the factorial\n        last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Convert the number to string to calculate the factorial\n    factorial = str(n)\n    # Use string slicing to get the last digit of the factorial\n    last_digit = factorial[-1]\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert number to string to split it into digits\n    n_str = str(n)\n    \n    # split number into digits\n    digits = [int(d) for d in n_str]\n    \n    # find the last digit of the factorial\n    factorial = 1\n    for d in digits:\n        factorial *= d\n    \n    last_digit = factorial % 10\n    \n    # return last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    # Find the last digit in the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Extract the last digit from the factorial\n    last_digit = factorial % 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize the result variable\n    factorial = 1\n    # Iterate from 1 to n\n    for i in range(1, n+1): \n        # Multiply the factorial by i\n        factorial *= i\n        # Find the last digit of the factorial\n        last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # initialize factorial variable\n    factorial = 1\n    \n    # loop through digits of the given number\n    while n > 0: \n        # extract the last digit of n and store it in variable last_digit\n        last_digit = n % 10\n        \n        # multiply factorial by last_digit\n        factorial *= last_digit\n        \n        # extract the last digit of n without considering it\n        n //= 10\n    \n    # return the last digit of factorial\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    while n >= 10: \n        n = int(str(n)[-1]) \n    return n "
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return \"Please enter a non-negative integer.\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Find the length of the longest list\n    max_len = max(len(list1), len(list2), len(list3))\n    \n    # Create a new list to store the interleaved elements\n    interleaved_list = []\n    \n    # Iterate over each element in the longest list\n    for i in range(max_len):\n        # Append the i-th element of list1, list2, and list3 to the interleaved list\n        interleaved_list.append(list1[i] if i < len(list1) else None)\n        interleaved_list.append(list2[i] if i < len(list2) else None)\n        interleaved_list.append(list3[i] if i < len(list3) else None)\n        \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize a new empty list to store the interleaved list\n    result = []\n    \n    # Loop through each element of the three lists\n    for i in range(len(list1)):\n        # Append the first element of list1 to the result list\n        result.append(list1[i])\n        # Append the second element of list2 to the result list\n        result.append(list2[i])\n        # Append the third element of list3 to the result list\n        result.append(list3[i])\n    \n    # Return the interleaved list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # Loop through each list and add the corresponding element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # initialize an empty list to hold the final result\n    result = []\n    # iterate over the 3 lists and append their elements to the result list\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    # return the final result\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleaves 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return \"Error: Lists have different lengths.\"\n\n    # Initialize an empty list to hold the interleaved list\n    interleaved_list = []\n\n    # Add the first element of each list to the interleaved list\n    interleaved_list.append(list1[0])\n    interleaved_list.append(list2[0])\n    interleaved_list.append(list3[0])\n\n    # Add the remaining elements of each list to the interleaved list\n    for i in range(1, len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Ensure all lists are of the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n\n    # Initialize the result list\n    result = []\n\n    # Iterate through the lists and interleave their elements\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check that all lists have the same length\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n\n    # Initialize a new list to hold the interleaved values\n    interleaved_list = []\n\n    # Iterate over the three lists and append their values to the new list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    # Return the new list of interleaved values\n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples as input, and returns a list of all the elements that are present in one tuple but not in the other tuple.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar = []\n\n    # Loop through each element of the first tuple\n    for element in test_tup1:\n        # If the element is not present in the second tuple\n        if element not in test_tup2:\n            # Add it to the list of dissimilar elements\n            dissimilar.append(element)\n\n    # Return the list of dissimilar elements\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_set.add(test_tup1[i])\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element exists in the second tuple\n        if test_tup1[i] not in test_tup2:\n            # If it does not exist, add it to the list of dissimilar elements\n            dissimilar_list.append(test_tup1[i])\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar.append(element)\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n            \n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Find the set of elements in both tuples\n    shared_elements = test_tup1 & test_tup2\n    # Find the set of elements in either tuple but not in the other\n    dissimilar_elements = test_tup1 | test_tup2 - shared_elements\n    # Return the dissimilar elements as a list\n    return list(dissimilar_elements)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # check if the tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples should have the same number of elements.\"\n    # initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # iterate over the elements of both tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            # if an element is different, add it to the list of dissimilar elements\n            dissimilar_list.append(test_tup1[i])\n    # return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(x):\n        return x % 2 == 0\n    \n    filtered_list = []\n    for item in test_tuple:\n        if isinstance(item, list):\n            for i in item:\n                if is_even(even_fnc(i)):\n                    filtered_list.append(i)\n        elif is_even(even_fnc(item)):\n            filtered_list.append(item)\n    return filtered_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_list.append(item)\n    return even_list\n\ndef even(x):\n    return x % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_fnc(i))\n        else:\n            new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    for i in range(len(test_tuple)):\n        if not even_fnc(test_tuple[i]):\n            if isinstance(test_tuple[i], list):\n                for j in range(len(test_tuple[i])):\n                    test_tuple[i].pop(j)\n            elif isinstance(test_tuple[i], tuple):\n                del test_tuple[i]\n            else:\n                test_tuple.pop(i)\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, (list, tuple)):\n            result.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return tuple(result)\n\ndef is_even(num):\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_elements = []\n    for i in test_tuple:\n        if type(i) == list:\n            for j in i:\n                if even_fnc(j):\n                    uneven_elements.append(j)\n        elif even_fnc(i):\n            uneven_elements.append(i)\n    return uneven_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_item = even_fnc(item)\n            if new_item:\n                new_tuple.extend(new_item)\n        else:\n            new_tuple.append(item)\n    return new_tuple\n\ndef even_filter(item):\n    return all(x % 2 == 0 for x in item)\n\ntest_tuple = ((1, 2, 3), (4, 5, 6), (7, 8, 9), 10)\nprint(even_ele(test_tuple, even_filter))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], tuple):\n            test_tuple[i] = even_ele(test_tuple[i], even_fnc)\n        else:\n            if even_fnc(test_tuple[i]):\n                test_tuple[i] = None\n    return [x for x in test_tuple if x is not None]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Remove all the odd elements from the tuple\n    odd_tuple = tuple([x for x in test_tuple if x % 2!= 0])\n    # Call the even_fnc function to remove all the even elements from the odd tuple\n    odd_tuple = even_fnc(odd_tuple)\n    # Remove all the even elements from the odd tuple\n    even_tuple = tuple([x for x in odd_tuple if x % 2 == 0])\n    # Combine the odd and even elements back into a single tuple\n    result_tuple = odd_tuple + even_tuple\n    return result_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s + b*s + b*s + b*s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the square pyramid\n    surface = 2 * (b + s) * s + 2 * s * b + 2 * (b + s) * b\n\n    # Return the surface area of the square pyramid\n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # Calculate the area of the base\n    area_base = b * b\n\n    # Calculate the area of the side\n    area_side = s * s\n\n    # Calculate the area of the whole pyramid\n    area_pyramid = 2 * area_base + 2 * area_side\n\n    # Calculate the surface area of the pyramid\n    surface_area = area_pyramid * s\n\n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    This function takes the base edge and height of a square pyramid as input\n    and returns the surface area of the pyramid in square units.\n    '''\n    # Calculate the surface area using Heron's formula\n    area = (b*s)/2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Finding the length of the base\n    base_length = b\n\n    # Finding the length of the side\n    side_length = s\n\n    # Calculating the surface area of the pyramid\n    surface_area = (base_length ** 2 + side_length ** 2) * s / 2\n\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * (s + 2)) / 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #calculate the area of the base\n    area_base = b**2\n    \n    #calculate the area of the pyramid using Heron's formula\n    area_pyramid = area_base * s\n    \n    #calculate the surface area of the pyramid using the formula A = 1/2bh\n    surface_area = area_pyramid / 2\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)+(s**2)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the length of the base edge\n    L = b\n\n    # Calculate the height of the pyramid\n    h = s\n\n    # Calculate the surface area of the pyramid\n    A = (4 * b * h) / 3\n\n    return A"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = ((b+s)/2)*(b+s)\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n\n    if dict1 == {}:\n        print('Dictionary is empty')\n    else:\n        print('Dictionary is not empty')"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        print(\"Invalid input. Please enter a non-negative integer.\")\n        return None\n    \n    # Compute the factorial of 2^n\n    factorial = 1\n    for i in range(2, 2**num+1):\n        factorial *= i\n    \n    # Compute the nth Catalan number\n    catalan = factorial // (2*num*factorial)\n    \n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number using the formula:\n\n    C(n, r) = binomial(n, r) * (1 - r^2) * (1 - r^4) *... * (1 - r^k),\n\n    where k = n - r + 1 and n is the number of items, and r is the number of\n    items selected for each combination.\n    \"\"\"\n    n_choose_r = 1\n    for i in range(1, n + 1):\n        n_choose_r = n_choose_r * i // (i - r + 1)\n    k = n - r + 1\n    catalan_num = 1\n    for r in range(1, r + 1):\n        factor = 1\n        for i in range(1, k + 1):\n            factor = factor * (n - i + 1) // i\n        catalan_num = catalan_num * factor\n    return catalan_num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth catalan number using dynamic programming.\n    '''\n    # Initialize the first two rows of the catalan matrix\n    catalan_matrix = [[1, 1], [1, 0]]\n\n    # Calculate the rest of the rows of the matrix using the recurrence relation\n    for i in range(2, num + 1):\n        catalan_matrix.append([4 * catalan_matrix[i-1][0] - catalan_matrix[i-1][1], 2 * catalan_matrix[i-1][1]])\n\n    # Return the nth row of the matrix as the nth catalan number\n    return catalan_matrix[-1][0]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th catalan number is:\", catalan_number(n))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number using the formula:\n\n    C(n, r) = binomial(n, r) * r! / (s!(r-1)! * (n-r)!)\n\n    where n is the total number of elements in the set, r is the number of elements to select and s is the total number of elements in the set.\n\n    Args:\n    n (int): The total number of elements in the set.\n    r (int): The number of elements to select.\n    \"\"\"\n    from scipy.special import binom\n    from math import factorial\n\n    # Calculate s and r!\n    s = n * (n + 1) // 2\n    r_factorial = factorial(r)\n\n    # Calculate (n-r)!\n    n_r_factorial = factorial(n - r)\n\n    # Calculate C(n, r)\n    catalan_num = binom(n, r) * r_factorial / (s * n_r_factorial * factorial(r - 1))\n\n    return catalan_num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (2*n-1) * catalan_number(n-1) / (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num == 3:\n        return 6\n    elif num == 4:\n        return 24\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    # Initialize variables\n    n = n + 1  # n is 1-indexed\n    k = 0  # number of binary digits in n\n    catalan = 0\n    # Initialize factorial array\n    fact = [1] * (n + 1)\n    fact[0] = 0\n    for i in range(1, n + 1):\n        fact[i] = i * fact[i - 1]\n    # Generate Catalan number\n    while k < n:\n        catalan = catalan + fact[n - k] // fact[k]\n        k = k + 1\n    return catalan\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n < 0:\n        raise ValueError(\"Input must be non-negative\")\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (factorial(2*n) / (factorial(n) * factorial(n+1)))\n\ndef factorial(n):\n    '''\n    Write a function which returns nth factorial.\n    '''\n    if n < 0:\n        raise ValueError(\"Input must be non-negative\")\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define the regex pattern for adverbs ending with \"ly\"\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n\n    # find all matches in the text using the regex pattern\n    matches = re.findall(pattern, text)\n\n    # initialize an empty list to store the positions of the adverbs\n    positions = []\n\n    # iterate over the matches and store their positions in a list\n    for match in matches:\n        positions.append(text.index(match))\n\n    # return the list of positions of the adverbs\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define regex pattern to find adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]*ly\\b'\n    \n    # find all matches of pattern in text and store them in a list\n    matches = re.findall(pattern, text)\n    \n    # if there are no matches, return an empty list\n    if not matches:\n        return []\n    \n    # find the first match and extract the positions and adverb itself\n    match = matches[0]\n    start, end = match.span()\n    adverb = text[start:end]\n    \n    # return a list containing the positions and adverb itself\n    return [(start, end), adverb]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding the adverb ending with ly\n    pattern = r'\\b\\w*[ly]\\b'\n\n    # Use the re.findall() function to find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Return a list of tuples containing the adverb and its positions in the text\n    return [(match, text.find(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start_position = match.start()\n        end_position = match.end()\n        adverb = text[start_position:end_position]\n        adverbs.append((start_position, end_position, adverb))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    # define regular expression pattern to find adverbs ending with ly\n    pattern = r'\\b\\w*ly\\b'\n\n    # use the re.search() function to search for matches in the text\n    match = re.search(pattern, text)\n\n    # if match is not None, return a list of tuples containing the start and end positions of the match\n    if match:\n        return [(match.start(), match.end())]\n    else:\n        return []"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to find adverbs ending with 'ly'\n    pattern = re.compile(r'\\b\\w*ly\\b', re.IGNORECASE)\n    # Find all non-overlapping matches of the pattern in the given text\n    matches = pattern.finditer(text)\n    # Create a list of tuples containing the adverb and its positions\n    adverbs = []\n    for match in matches:\n        # Extract the matched text and its starting and ending positions\n        start, end = match.span()\n        # Add the matched text to the adverbs list along with its starting and ending positions\n        adverbs.append((match.group(), start, end))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b(\\w*ly)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b([a-zA-Z]+)\\s*ly\\b'\n    # Use the re.findall() function to find all matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the positions of the matches\n    positions = []\n    # Iterate over the matches and append their positions to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n    # Return a tuple of the positions list and the matches list\n    return (positions, matches)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b(\\w*)ly\\b'\n    matches = re.finditer(pattern, text)\n\n    for match in matches:\n        print(match.group(1), match.start(), match.end())"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*[aeiouAEIOU]y\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and the number of items to be returned as inputs.\n    It returns a list of the n most expensive items in the given dataset.\n    '''\n    # Initialize an empty min-heap\n    min_heap = []\n\n    # Iterate through the items in the dataset and add each item to the min-heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n    # Iterate through the first n items in the min-heap and append them to a new list\n    result = []\n    for i in range(n):\n        item = heapq.heappop(min_heap)\n        result.append(item)\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min-heap of size n\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, -item)\n        # if the heap size exceeds n, remove the item with the highest price\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1], item[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    result = []\n    for item in heap:\n        result.append(item[1])\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items based on their cost\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n\n    # Extract the n most expensive items\n    top_items = sorted_items[:n]\n\n    # Return the top_items\n    return top_items"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and a positive integer n as input, and returns\n    the n most expensive items in the list.\n    '''\n    # Create a min heap of size n to store the n most expensive items in the list\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, items[i])\n    \n    # Iterate through the remaining items in the list and push them into the heap\n    for i in range(n, len(items)):\n        heapq.heappush(min_heap, items[i])\n    \n    # Pop and return the n most expensive items from the heap\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and an integer n,\n    and returns a list of the n most expensive items in the dataset.\n    '''\n    # Sort the items in descending order based on their value\n    items.sort(reverse=True)\n    # Take the first n items as the most expensive items\n    return items[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap and fill it with the n most expensive items\n    heapq.nsmallest(n, items)\n\n    # Sort the remaining items in descending order\n    heapq.heapify(items)\n\n    # Return the n most expensive items\n    return [heapq.heappop(items) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if item not in heapq.heappushpop(heap, -item):\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n\n    heap = []\n\n    # Add the first n items to the heap\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n\n    # Iterate through the remaining items and update the heap\n    for item in items[n:]:\n        if item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n\n    # Return the items in the heap (in reverse order)\n    return [heap[0]] + heapq.nsmallest(n - 1, heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Initialize a min-heap with the first n items\n    min_heap = [heapq.heappushpop(min_heap, -price) for price in items[:n]]\n\n    # Loop through the remaining items and update the min-heap\n    for price in items[n:]:\n        heapq.heappush(min_heap, -price)\n\n    # Return the n most expensive items in the min-heap\n    return [price for price in min_heap]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n >= len(l):\n        return None\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the list is empty or not\n    if not l:\n        return l\n    \n    # if the length of the list is 1, then it's already split at the nth element\n    if len(l) == 1:\n        return [l[0]]\n    \n    # split the list at the nth element\n    mid = len(l) // 2\n    left = l[:mid]\n    right = l[mid:]\n    \n    # recursively call the function for left and right halves\n    left = split_Arr(left, n)\n    right = split_Arr(right, n)\n    \n    # add the first part of the list to the end of the right half\n    return left + [l[mid]] + right"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n > len(l):\n        raise ValueError(\"Invalid index value. Please enter a valid index value.\")\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the length of the list is less than the given index\n    if n >= len(l):\n        return None\n    \n    # initialize the new list and add the first part of the list\n    new_list = l[n:]\n    new_list.extend(l[:n])\n    \n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return []\n    elif n == 0:\n        return [l[0], *l[1:]]\n    else:\n        mid = len(l) // 2\n        return split_Arr(l[:mid] + [l[mid]], n - 1) + [l[mid]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    else:\n        return l[:n] + [l[n]] + split_Arr(l[n+1:], n)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        raise ValueError(\"Index out of range\")\n    if n < 0:\n        n = len(l) + n\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    part1 = l[:n]\n    part2 = l[n:]\n    return part1 + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # create an empty list to store the new list\n    new_list = []\n    \n    # loop through the list and add the first n elements to new_list\n    for i in range(n):\n        new_list.append(l[i])\n    \n    # add the remaining elements to the end of new_list\n    new_list.extend(l[n:])\n    \n    # return the new list\n    return new_list"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # convert the list to a tuple using tuple() function\n    tupx = tuple(listx)\n    # return the converted tuple\n    return tupx"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as an input and returns a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"Error: List must have at least two elements.\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return max(nums) - min(nums)\n    min_num = min(nums)\n    max_num = max(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    \"\"\"\n    if len(nums) == 1:\n        return 0\n    \n    # initialize the largest and smallest values to the first and second values of the list\n    largest = nums[0]\n    smallest = nums[1]\n    \n    # loop through the rest of the list and update the largest and smallest values accordingly\n    for num in nums[2:]:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # return the difference between the largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(int(a**0.5)+1, int(b**0.5)+1):\n        if a%i**2 == 0 and b%i**2 == 0:\n            print(f\"The perfect square between {a} and {b} is {i**2}.\")\n            break"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function takes two numbers a and b and returns the sum of all perfect squares between them.\n    \"\"\"\n    # initialize variables\n    perfect_sum = 0\n    num = a\n\n    # check if a is a perfect square\n    if is_perfect_square(a):\n        perfect_sum += a\n\n    # check if b is a perfect square\n    if is_perfect_square(b):\n        perfect_sum += b\n\n    # check if a+b is a perfect square\n    if is_perfect_square(a+b):\n        perfect_sum += a+b\n\n    # keep adding perfect squares between a and b\n    while num <= b:\n        if is_perfect_square(num):\n            perfect_sum += num\n        num += 1\n\n    # return the sum of perfect squares\n    return perfect_sum\n\ndef is_perfect_square(num):\n    \"\"\"\n    This function takes a number num and returns True if it is a perfect square, and False otherwise.\n    \"\"\"\n    # use the sqrt() function to check if the number is a perfect square\n    return int(num**0.5)**2 == num"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(int(a), int(b)+1):\n        square = i*i\n        if square == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        if square == int(square):\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Loop through all the numbers between a and b\n    for i in range(a, b+1):\n        # Check if the square of the current number is between a and b\n        if i ** 2 >= a and i ** 2 <= b:\n            # If it is, add the square of the current number to the list of perfect squares\n            perfect_squares.append(i ** 2)\n\n    # Return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through all the numbers from a to b\n    for i in range(a, b+1):\n        # check if the square of the current number is a perfect square\n        if i*i == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through all numbers between a and b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        square = int(i ** 0.5)\n        if square * square == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for num in range(a, b+1):\n        if num == sum([int(digit)**2 for digit in str(num)]):\n            perfect_squares.append(num)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        square = i**2\n        if square == i:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Initialize a variable to store the count of perfect squares\n    count = 0\n\n    # Loop through the range of b (inclusive)\n    for i in range(b + 1):\n        # Calculate the square root of the value of i\n        root = i ** 0.5\n\n        # Check if the square root is an integer\n        if root.is_integer():\n            # If it is, check if it is within the range of a (inclusive)\n            if i >= a:\n                # If it is, increment the count variable\n                count += 1\n\n    # Return the count of perfect squares\n    return count"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)\n    theta = cmath.phase(x)\n    rect_x = r * cmath.cos(theta)\n    rect_y = r * cmath.sin(theta)\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes two arguments, r and theta, which represent the radius and angle of a point in polar coordinates respectively.\n    It returns the corresponding x and y coordinates of the point in rectangular coordinates.\n    '''\n    \n    # Convert the angle from degrees to radians\n    angle_rad = cmath.radians(theta)\n    \n    # Calculate the x and y coordinates of the point in rectangular coordinates\n    x = r * cmath.cos(angle_rad)\n    y = r * cmath.sin(angle_rad)\n    \n    # Return the x and y coordinates of the point\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = abs(x)\n    theta = abs(y)\n    return r * cmath.cos(theta), r * cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates using the cmath module.\n    '''\n    rect_x = r * cmath.cos(theta)\n    rect_y = r * cmath.sin(theta)\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    r: radius (float)\n    theta: angle in radians (float)\n    \n    Returns: x (float), y (float)\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): Radius of the circle from the origin.\n    theta (float): Angle of the coordinate system (in radians).\n\n    Returns:\n    (x, y) (tuple): Tuple containing the rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    # Convert to complex numbers\n    r = complex(rho)\n    t = complex(theta)\n\n    # Convert to rectangular coordinates\n    x = r * cmath.cos(t)\n    y = r * cmath.sin(t)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) < 2:  # if the list has less than two elements, there is nothing to swap\n        return newList\n\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #initialize two variables to store the first and last elements\n    first = newList[0]\n    last = newList[-1]\n\n    #add the last element to the front of the list\n    newList.insert(0, last)\n\n    #add the first element to the end of the list\n    newList.append(first)\n\n    #print the modified list\n    print(\"The modified list is:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Reverse the list\n    newList.reverse()\n    # Get the length of the reversed list\n    length = len(newList)\n    # Set the first and last elements of the list to each other\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    # Print the modified list\n    print(newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    else:\n        print(\"The list must have at least two elements\")\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Check if the list is empty\n    if not newList:\n        return []\n\n    # Find the length of the list\n    length = len(newList)\n\n    # Interchange the first and last elements\n    newList[0], newList[length - 1] = newList[length - 1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Find the length of the list\n    length = len(newList)\n    # Find the last index of the list\n    lastIndex = length - 1\n    # Swap the first and last elements\n    temp = newList[0]\n    newList[0] = newList[lastIndex]\n    newList[lastIndex] = temp\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the input list is empty\n    if len(newList) == 0: \n        return newList \n    else: \n        # find the first and last elements of the list\n        first = newList[0] \n        last = newList[-1] \n        # create a new list with the first and last elements interchanged \n        newList = [last, first] + newList[1:-1] + [first, last] \n        # return the new list\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    This function swaps the first and last elements in a list.\n    '''\n\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return \"Error: List must have at least two elements.\"\n\n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n - integer, the number of terms in the series\n    k - integer, the number of terms to include in the sum\n\n    Returns:\n    sum - integer, the sum of the product of consecutive binomial co-efficients\n    '''\n\n    # Calculate the factorial of n using recursion\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    # Calculate the binomial coefficient using recursion\n    def binomial(n,k):\n        if k == 0 or k == n:\n            return 1\n        else:\n            return factorial(n)/(factorial(k)*factorial(n-k))\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    sum = 0\n    for i in range(k):\n        sum += binomial(n,i)\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomial_coeff = 1\n    for i in range(k):\n        binomial_coeff *= n-i\n    return binomial_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function takes two arguments: n (the number of terms in the binomial series) and k (the number of terms to sum).\n    It calculates the sum of the product of consecutive binomial co-efficients using the formula:\n\n    (n choose k) * (n choose (n-k))\n\n    The function then returns the result.\n    '''\n\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return binomial_Coeff(n-1, k-1) * n / (k + 1)\n\ndef binomial_sum(n, k):\n    '''\n    This function takes two arguments: n (the number of terms in the binomial series) and k (the number of terms to sum).\n    It calculates the sum of the product of consecutive binomial co-efficients using the binomial_Coeff function.\n    It then returns the sum of the consecutive binomial co-efficients.\n    '''\n\n    sum_binomial_coeff = 0\n    for i in range(k):\n        sum_binomial_coeff += binomial_Coeff(n, i)\n    return sum_binomial_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) * (n-k+1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    # If k is greater than n, return 0\n    if k > n:\n        return 0\n\n    # If n is 0, return 0\n    if n == 0:\n        return 0\n\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k, n+1):\n        sum += (n-i+1) * i / math.factorial(i-1)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    else:\n        return (n * binomial_Coeff(n - 1, k - 1)) // (k + 1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    sum_coeff = 0\n    for i in range(k,n+1):\n        coeff *= i\n        sum_coeff += coeff\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    if n == 0 and k == 0:\n        return 1\n    elif k == 0 or k == n:\n        return 0\n    elif k > n // 2:\n        k = n - k\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Calculate the binomial coefficient using recursion\n    if n == 0 and k == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif k == 0:\n        return 1\n\n    else:\n        return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k-2)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_regex = r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(ip_regex, ip):\n        ip_list = ip.split('.')\n        for i in range(len(ip_list)):\n            if ip_list[i].startswith('0'):\n                ip_list[i] = ip_list[i][1:]\n        return '.'.join(ip_list)\n    else:\n        return \"Invalid IP address\""
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+','',ip) # Remove leading zeroes\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = r'^([1-9]|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])(\\.([1-9]|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])){3}$'\n    if re.match(ip_pattern, ip):\n        ip_address = ip.split('.')\n        while ip_address[3].startswith('0'):\n            ip_address.pop()\n        new_ip = '.'.join(ip_address)\n        return new_ip\n    else:\n        return 'Invalid IP address'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^(0)+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.strip()\n    ip = re.sub(r'(\\b0\\.0\\.0\\.0\\b)', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+\\.0\\.0\\.0', '', ip)\n    ip = re.sub(r'\\.0\\.0\\.0$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function takes an IP address as input and removes the leading zeroes from it.\n    '''\n    ip = re.sub(r'^\\s*0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # convert the ip address to a string\n    ip_str = str(ip)\n    # remove leading zeroes from the string using regular expressions\n    ip_str = re.sub(r'^0+(?!$)', '', ip_str)\n    # convert the string back to an integer\n    ip_int = int(ip_str)\n    # return the integer representation of the ip address\n    return ip_int"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # regular expression pattern to match ip addresses\n    pattern = r'^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])){3}$'\n\n    # check if the ip address matches the pattern\n    if re.match(pattern, ip):\n        # extract the octets from the ip address\n        octets = ip.split('.')\n\n        # remove leading zeroes from each octet\n        new_octets = [int(octet) for octet in octets if octet!= '0']\n\n        # join the remaining octets with a '.' separator\n        new_ip = '.'.join(str(octet) for octet in new_octets)\n\n        # return the new ip address\n        return new_ip\n    else:\n        # raise an error if the ip address doesn't match the pattern\n        raise ValueError('Invalid IP address.')"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # remove all leading zeroes from the ip address\n    ip = re.sub('^0+', '', ip)\n\n    return ip\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        print(\"List should have at least 2 elements.\")\n        return None\n\n    first_even = None\n    first_odd = None\n\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            if first_even is None:\n                first_even = i\n            else:\n                return first_even - first_odd\n                break\n        elif list1[i] % 2!= 0:\n            if first_odd is None:\n                first_odd = i\n            else:\n                return first_odd - first_even\n                break\n\n    if first_even is None or first_odd is None:\n        print(\"There is no even or odd number in the list.\")\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Initialize variables\n    even_count = 0\n    odd_count = 0\n\n    # Loop through the list\n    for num in list1:\n        # Check if the number is even\n        if num % 2 == 0:\n            even_count += 1\n        # Check if the number is odd\n        else:\n            odd_count += 1\n\n    # Find the difference between the two numbers\n    diff = even_count - odd_count\n\n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num if even_num is None else min(num, even_num)\n        else:\n            odd_num = num if odd_num is None else min(num, odd_num)\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd numbers in the list.\n    \"\"\"\n    # Initialize the first even and first odd number of the list\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                even = even - num\n        else:\n            if odd is None:\n                odd = num\n            else:\n                odd = odd - num\n    # If only one number in the list is even or odd, return 0\n    if even is None or odd is None:\n        return 0\n    # Return the difference between the first even and first odd numbers\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = [num for num in list1 if num % 2 == 0]\n    odd = [num for num in list1 if num % 2!= 0]\n    \n    if len(even) > 0 and len(odd) > 0:\n        return abs(even[0] - odd[0])\n    else:\n        return 'No even or odd numbers found in the list.'"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = list1[0]\n    odd_first = list1[1]\n    diff = (even_first - odd_first)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    even_num = []\n    odd_num = []\n    for num in lst:\n        if num % 2 == 0:\n            even_num.append(num)\n        else:\n            odd_num.append(num)\n    return abs(even_num[0] - odd_num[0])"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = 0\n    first_odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            first_even = num\n        else:\n            first_odd = num\n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count - odd_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize a variable to store the minimum number of swaps required\n    min_swaps = float('inf')\n\n    # Iterate through each bit position of the binary numbers\n    for i in range(len(str1)):\n        # If the bits at the current positions are different,\n        # swap the bits and increment the swap count\n        if (num1 & (1 << i))!= (num2 & (1 << i)):\n            min_swaps = min(min_swaps, i)\n            num1 ^= 1 << i\n            num2 ^= 1 << i\n\n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the minimum number of swaps\n    min_swaps = 0\n\n    # Iterate through each bit in the binary strings\n    for i in range(32):\n        # Check if the bits are different\n        if (num1 & (1 << i))!= (num2 & (1 << i)):\n            # If they are different, increment the minimum number of swaps\n            min_swaps += 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    # Converting the binary strings into integers \n    int1 = int(str1, 2) \n    int2 = int(str2, 2) \n\n    # Checking if the binary strings have the same number of 1s \n    while int1!= int2 : \n        # Counting the number of 0s and 1s in int1 \n        count0s = int1.count('0') \n        count1s = int1.count('1') \n        # If int1 has fewer 0s than 1s, we need to add 1 to int1 \n        if count0s < count1s : \n            int1 = int1 + '1' \n            # Counting the number of 0s and 1s in int1 again \n            count0s = int1.count('0') \n            count1s = int1.count('1') \n            # Counting the number of swaps required \n            swaps = abs(count0s - count1s) \n        # If int1 has more 0s than 1s, we need to remove 1 from int1 \n        else : \n            int1 = int1[:-1] \n            # Counting the number of 0s and 1s in int1 again \n            count0s = int1.count('0') \n            count1s = int1.count('1') \n            # Counting the number of swaps required \n            swaps = abs(count0s - count1s) \n\n        # Adding or removing 1s from int1 \n        if int1.count('0') < int1.count('1') : \n            int1 = int1 + '1' \n            swaps += 1 \n        else : \n            int1 = int1[:-1] \n            swaps -= 1 \n\n    # Counting the number of swaps required \n    swaps += abs(len(str1) - len(str2))\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    n = len(str1)\n\n    # Create a dictionary to store the count of each digit in both strings\n    digit_count = {}\n    for digit in str1 + str2:\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n\n    # Initialize a variable to keep track of the minimum number of swaps required\n    min_swaps = n\n\n    # Iterate through all possible swaps\n    for i in range(n):\n        if digit_count[str1[i]] > 0 and digit_count[str2[i]] > 0:\n            # Swap the i-th digits of both strings\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + str1[i] + str2[i+1:]\n\n            # Update the digit count of each string\n            for digit in str1 + str2:\n                if digit in digit_count:\n                    digit_count[digit] -= 1\n\n            # Update the minimum number of swaps required\n            min_swaps = min(min_swaps, n - i)\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to binary form and calculate the XOR of the two binary strings\n    bin_str1 = bin(int(str1, 2))[2:]\n    bin_str2 = bin(int(str2, 2))[2:]\n    xor_str = bin_str1 ^ bin_str2\n\n    # Initialize the variables for the swap count and XOR bit count\n    swap_count = 0\n    xor_count = 0\n\n    # Iterate over the XOR bits from right to left\n    for bit in reversed(xor_str):\n        # If the bit is 0, then add 1 to the swap count and increment the XOR bit count by 1\n        if bit == '0':\n            swap_count += 1\n            xor_count += 1\n        # If the bit is 1, then increment the XOR bit count by 1\n        else:\n            xor_count += 1\n\n    # Calculate the minimum swap count that can be obtained with the current XOR bit count\n    min_swap_count = (xor_count // 2) + xor_count % 2\n\n    # Return the minimum swap count\n    return min_swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2):\n    #Convert both binary numbers to binary strings\n    binary1 = bin(int(str1))[2:]\n    binary2 = bin(int(str2))[2:]\n    \n    #Find the length of the binary strings\n    n1 = len(binary1)\n    n2 = len(binary2)\n    \n    #Check if the length of the binary strings is same or not\n    if n1!= n2:\n        return \"Invalid Input\"\n    \n    #Create a 2D list to store the count of swaps required for each combination of bits\n    dp = [[0 for j in range(n2+1)] for i in range(n1+1)]\n    \n    #Base case\n    for i in range(1,n1+1):\n        for j in range(1,n2+1):\n            if binary1[i-1] == binary2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n    \n    return dp[n1][n2]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # Convert strings to lists\n    str1 = list(str1)\n    str2 = list(str2)\n\n    # Initialize swap counter and length variables\n    swaps = 0\n    len1, len2 = len(str1), len(str2)\n\n    # Compare lengths of binary strings\n    if len1 > len2:\n        str1, str2 = str2, str1\n        swaps += len1 - len2\n\n    # Iterate through binary strings\n    for i in range(len1):\n        # If digits are different, swap digits and increase swap counter\n        if str1[i]!= str2[i]:\n            str1[i], str2[i] = str2[i], str1[i]\n            swaps += 1\n\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the two binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables to keep track of the swaps needed\n    swaps = 0\n    n = len(str1)\n\n    # Iterate through the bits of the integers\n    for i in range(n):\n        # If the bits are different, swap the bits\n        if num1 & (1 << i)!= num2 & (1 << i):\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0]*(n+1) for _ in range(n+1)]\n\n    # initialize first row of dp table\n    for i in range(n+1):\n        dp[0][i] = i\n\n    # initialize last column of dp table\n    for i in range(1, n+1):\n        dp[i][n] = i\n\n    # fill rest of dp table in bottom up manner\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n\n    # find the minimum number of swaps required to convert str1 to str2\n    swaps = 0\n    i, j = n, n\n    while i > 0 and j > 0:\n        if str1[i-1] == str2[j-1]:\n            swaps += dp[i][j]\n            i -= 1\n            j -= 1\n        elif str1[i-1] < str2[j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n\n    # Convert the binary strings to lists of bits\n    str1 = [int(bit) for bit in str1]\n    str2 = [int(bit) for bit in str2]\n\n    # Find the length of the longest binary string\n    max_length = max(len(str1), len(str2))\n\n    # Initialize variables for the minimum number of swaps and the current swap count\n    min_swaps = float('inf')\n    current_swaps = 0\n\n    # Iterate over the length of the longest binary string\n    for i in range(max_length):\n        # Compare the i-th bit of str1 with the i-th bit of str2\n        if str1[i] < str2[i]:\n            # If str1 is less than str2, we need to swap it with the i-th bit of str2\n            current_swaps += 1\n            if current_swaps < min_swaps:\n                min_swaps = current_swaps\n\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    size = 0\n    for tuple in tuple_list:\n        for element in tuple:\n            size += sys.getsizeof(element)\n\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    # initialize the size to 0\n    size = 0\n\n    # loop through the tuple elements\n    for element in tuple_list:\n\n        # calculate the size of each element\n        if sys.getsizeof(element) == 0:\n            # 0-bytes\n            size += 1\n        else:\n            # non-0-bytes\n            size += sys.getsizeof(element)\n\n    # return the size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize the size of the tuple to 0\n    size = 0\n    # Iterate over each element in the tuple\n    for element in tuple_list:\n        # Convert the element to bytes using the `memoryview()` function\n        element_bytes = memoryview(element).tobytes()\n        # Add the size of the element to the total size\n        size += sys.getsizeof(element_bytes)\n    # Return the total size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tuple in tuple_list:\n        total_size += sys.getsizeof(tuple)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        total_size += sys.getsizeof(tuple_list[i])\n    return total_size\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Find the total number of elements in the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Find the total number of elements that need to be compared\n    total_elements = n1 + n2\n\n    # Find the index of kth smallest element\n    k_smallest = k - 1\n    index = 0\n\n    # Compare all elements in both arrays\n    while index < total_elements:\n        # If element in arr1 is smaller, move it to the end of arr1 and increment index\n        if arr1[index] < arr2[index]:\n            arr1.pop(index)\n            n1 -= 1\n            index += 1\n\n        # If element in arr2 is smaller, move it to the end of arr2 and increment index\n        else:\n            arr2.pop(index)\n            n2 -= 1\n            index += 1\n\n        # If kth smallest element is found, break out of the loop\n        if index == k_smallest:\n            break\n\n    # If kth smallest element is not found, return None\n    if index!= k_smallest:\n        return None\n\n    # Return the kth smallest element\n    return arr1[k_smallest]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m, n = len(arr1), len(arr2)\n    i, j = 0, 0\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if k <= m:\n        return find_kth(arr1[i:], arr2, k)\n    else:\n        return find_kth(arr1, arr2[j:], k - m)\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    m = len(arr1)\n    n = len(arr2)\n    i = j = 0\n\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            else:\n                k -= 1\n                j += 1\n\n    # If we are here, one of the arrays is exhausted.\n    # Return the remaining elements of the other array.\n    if i == m:\n        return arr2[j:]\n    elif j == n:\n        return arr1[i:]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > len(arr1) + len(arr2):\n        return \"Error: k is greater than the sum of lengths of the two arrays.\"\n\n    # Find the total length of both arrays\n    total_length = len(arr1) + len(arr2)\n\n    # Initialize variables for the two pointers\n    i, j = 0, 0\n\n    # Loop until we have found k elements\n    while i < len(arr1) and j < len(arr2) and k >= 0:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            i += 1\n            j += 1\n\n    # Check if we have found k elements\n    if k >= 0:\n        return \"Error: k is greater than the number of elements in the arrays.\"\n    else:\n        return arr1[i - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # get the length of both arrays\n    len1 = len(arr1)\n    len2 = len(arr2)\n\n    # check if the length of both arrays is equal\n    if len1!= len2:\n        print(\"Both arrays must be of equal length\")\n        return\n\n    # initialize variables to store the current index in both arrays\n    i = j = 0\n\n    # loop through both arrays until we find the kth element\n    while i < len1 and j < len2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # if we found the kth element, return it\n            if k == 1:\n                return arr1[i]\n            # if we have found all k elements, return the current index i\n            elif k == 2:\n                return i\n            # if we have found all k+1 elements, return None\n            else:\n                return None\n\n    # if we have reached the end of one of the arrays without finding the kth element, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and a number k and returns the kth smallest element from both arrays.\n\n    Args:\n        arr1: list of integers\n        arr2: list of integers\n        k: integer\n\n    Returns:\n        int: the kth smallest element from both arrays\n    \"\"\"\n    i = 0\n    j = 0\n    result = []\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        elif arr1[i] > arr2[j]:\n            result.append(arr2[j])\n            j += 1\n        else:\n            result.append(arr1[i])\n            i += 1\n            j += 1\n            \n    result += arr1[i:]\n    result += arr2[j:]\n    \n    return result[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:  # arr1[i] == arr2[j]\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n    if k == 0:  # kth element is in arr1\n        return arr1[i]\n    else:  # kth element is in arr2\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n    \n    if k == 1:\n        return arr1[-1]\n    else:\n        return arr2[-1]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n    \"\"\"\n    # Convert the number to a string and calculate the sum of the cube of digits\n    s = str(n)\n    sum_of_cubes = sum([int(digit) ** 3 for digit in s])\n    # Compare the sum of the cube of digits with the original number\n    if sum_of_cubes == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if number == 0:\n        return True\n    else:\n        sum_of_digits = 0\n        temp = number\n        while temp > 0:\n            digit = temp % 10\n            sum_of_digits += digit ** 3\n            temp //= 10\n        return number == sum_of_digits"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Check whether a given number is armstrong or not.\n    \"\"\"\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return sum == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if number < 10:\n        return False\n\n    # Convert the number to a string and reverse it\n    reversed_number = str(number)[::-1]\n\n    # Calculate the sum of the powers of each digit of the reversed number\n    sum_of_powers = 0\n    for digit in reversed_number:\n        sum_of_powers += int(digit) ** len(reversed_number)\n\n    # Compare the sum of powers with the original number\n    return sum_of_powers == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    Function to check if a given number is an Armstrong number or not.\n    \"\"\"\n    original_number = number\n    while original_number > 0:\n        digit = original_number % 10\n        original_number //= 10\n        sum_of_powers = 0\n        for i in range(1, digit + 1):\n            sum_of_powers += pow(i, digit)\n        if sum_of_powers!= original_number:\n            return False\n    return True"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(num):\n    '''\n    A function to check whether a given number is an Armstrong number or not.\n    '''\n    num = int(num)\n    num_string = str(num)\n    power = len(num_string)\n    sum_of_squares = 0\n\n    for digit in num_string:\n        square = int(digit) ** power\n        sum_of_squares += square\n\n    return num == sum_of_squares"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    else:\n        num_str = str(number)\n        sum = 0\n        temp = number\n        while temp > 0:\n            digit = temp % 10\n            sum += digit ** 3\n            temp //= 10\n        return num_str == str(sum)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # initialize a variable to store the sum of cubes of digits\n    sum_of_cubes = 0\n    # convert the given number to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(number)]\n    # calculate the sum of cubes of digits in the list\n    for digit in digits:\n        sum_of_cubes += digit**3\n    # compare the given number with the sum of cubes of digits\n    if number == sum_of_cubes:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(number):\n    # Convert the given number to a string\n    number_str = str(number)\n    # Initialize the sum of digits to 0\n    sum_of_digits = 0\n    # Loop through each digit of the number\n    for digit in number_str:\n        # Add the digit to the sum of digits\n        sum_of_digits += int(digit)\n    # Return True if the sum of digits of the number is equal to the original number\n    return sum_of_digits == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    A number is said to be Armstrong if the sum of its own digits raised to the power of the number of digits is equal to the number itself.\n\n    For example:\n    371 is an Armstrong number because 3 + 7 + 1 = 12 + 8 + 1 = 37.\n    153 is not an Armstrong number because 5 + 5 + 3 = 15, which is not equal to 153.\n\n    This function takes an integer `n` as input and returns `True` if it is an Armstrong number, `False` otherwise.\n    \"\"\"\n    # Calculate the sum of digits raised to the power of the number of digits\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit ** len(str(n))\n        n //= 10\n    # Check if the sum is equal to the original number\n    return total == n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    print(f\"The sum of the first {n} natural numbers is: {sum}\")\n    print(f\"The average of the first {n} natural numbers is: {average}\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    print(\"Sum of first\", number, \"natural numbers:\", sum)\n    print(\"Average of first\", number, \"natural numbers:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    total = 0\n    for i in range(1, number+1):\n        sum += i\n        total += 1\n    \n    average = sum / total\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns a tuple containing the sum of the first n natural numbers and the average of these numbers.\n    \"\"\"\n    # Initialize variables for sum and sum of squares\n    sum_n = 0\n    sum_squares_n = 0\n\n    # Loop through first n natural numbers\n    for i in range(1, n+1):\n        # Add i to sum\n        sum_n += i\n        \n        # Add i^2 to sum of squares\n        sum_squares_n += i*i\n\n    # Calculate sum and average\n    sum_average = sum_n/n\n    sum_average_squared = sum_squares_n/n\n\n    return (sum_n, sum_average, sum_average_squared)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 1:\n        return \"Invalid input\"\n\n    sum_list = []\n    for i in range(1, number+1):\n        sum_list.append(i)\n\n    sum_of_list = sum(sum_list)\n    average_of_list = sum_of_list / number\n\n    print(\"Sum of the first\", number, \"natural numbers:\", sum_of_list)\n    print(\"Average of the first\", number, \"natural numbers:\", average_of_list)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_list = [0] * number  # initialize a list with zeros\n    \n    for i in range(1, number + 1):\n        sum_list[i-1] = i  # populate the list with the natural numbers\n    \n    sum_value = sum(sum_list)  # calculate the sum of the list\n    average = sum_value / number  # calculate the average\n    \n    return sum_value, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_of_numbers = 0\n    count = 0\n\n    for i in range(1, number + 1):\n        sum_of_numbers += i\n        count += 1\n\n    average = sum_of_numbers / count\n\n    return sum_of_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(number):\n        total += i\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    avg = sum/number\n    print(\"Sum of first\", number, \"natural numbers is:\", sum)\n    print(\"Average of first\", number, \"natural numbers is:\", avg)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if the input number is even and False if it is odd.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    for char, count in freq_dict.items():\n        if count > 1:\n            return char\n\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    # Create a dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first character with a frequency greater than 1\n    for char, count in freq.items():\n        if count > 1:\n            return char\n\n    # If no repeated character was found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create an empty dictionary to store the count of each character\n    char_count = {}\n    # iterate through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # iterate through each character in the string again and return the first one that appears more than once\n    for char in str1:\n        if char in char_count and char_count[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # Otherwise, add the character to the dictionary with a frequency of 1\n        else:\n            freq[char] = 1\n    \n    # Initialize a variable to store the first repeated character\n    first_repeated = None\n    \n    # Loop through the dictionary and check if the frequency of each character is greater than 1\n    for char, count in freq.items():\n        if count > 1:\n            if first_repeated is None or count < first_repeated:\n                first_repeated = count\n                first_repeated_char = char\n    \n    # Return the first repeated character and its frequency\n    return first_repeated, first_repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_list = list(str1)\n    char_count = {}\n    \n    for char in char_list:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 2:\n            return char\n    \n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n            \n    # find the first repeated character in the dictionary\n    for char in freq:\n        if freq[char] == 2:\n            return char\n            \n    # if no repeated character found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # convert the string to a set to remove duplicates\n    str1_set = set(str1)\n    # iterate through the set and return the first repeated character\n    for char in str1_set:\n        if str1.count(char) > 1:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # find the character with the highest count in the dictionary\n    max_count = 0\n    first_repeated_char = None\n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            first_repeated_char = char\n\n    return first_repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(string):\n    \"\"\"\n    Find the first repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character\n    char_freq = {}\n    for char in string:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # Find the first repeated character\n    for char in string:\n        if char_freq[char] > 1:\n            return char\n    \n    # If no character is repeated, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i + j <= n:\n                lucid_numbers.append(i + j)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        if i < 10:\n            lucids.append(i)\n        else:\n            is_lucid = True\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    is_lucid = False\n                    break\n            if is_lucid:\n                lucids.append(i)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_set = set()\n    i = 1\n    \n    while i <= n:\n        if is_lucid(i):\n            lucid_set.add(i)\n        i += 1\n    \n    return sorted(lucid_set)"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        lucid_num = 1\n        for j in range(1, i):\n            lucid_num = (lucid_num*i) // j\n        ludic_numbers.append(lucid_num)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = []\n    for num in range(1, n):\n        if num == 1:\n            ludic_nums.append(num)\n        else:\n            for i in range(2, num):\n                if num % i == 0:\n                    break\n            else:\n                ludic_nums.append(num)\n    return ludic_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    # Create a list to store the lucid numbers\n    lucid_numbers = []\n\n    # Use a loop to check for lucid numbers up to n\n    for i in range(1, n+1):\n        # Check if i is a lucid number\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        # If i is a lucid number, append it to the list\n        if is_lucid:\n            lucid_numbers.append(i)\n\n    # Return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if i % 2 == 1:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            lucid.append(i)\n    return lucid\n\ndef is_lucid(num):\n    '''\n    Write a function to check if a number is lucid or not.\n    '''\n    count = 0\n    for i in str(num):\n        count += int(i)\n    return count == 1"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            lucids.append(i)\n    return lucids"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the words back into a string\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n\n    # Join the list of reversed words into a single string\n    reversed_s =''.join(words)\n\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string by spaces\n    words = s.split()\n    # reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # join the words back into a string separated by spaces\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse each word in the list\n    words = [word[::-1] for word in words]\n    # Join the words back together into a string separated by spaces\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Convert the string to list of words\n    words = s.split()\n    # Reverse the list of words\n    words.reverse()\n    # Join the list of words with spaces\n    reversed_s =''.join(words)\n    # Return the reversed string\n    return reversed_s"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the given number is greater than 1\n    if num <= 1:\n        return False\n\n    # Check if the given number is divisible by any number less than or equal to its square root\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    # If the given number is not divisible by any number less than or equal to its square root, then it is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is divisible by 1 or 0\n    if num == 1 or num == 0:\n        return False\n\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # If the number is not divisible by any number between 2 and the square root of the number, it is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(n):\n    '''\n    This function checks if the given integer n is a prime number or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    This function checks if the given integer num is a prime number or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            if is_prime(i):\n                return True\n    return False\n\nprint(prime_num(10))\nprint(prime_num(100))\nprint(prime_num(1000))"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number, otherwise it returns False.\n    A number is a prime number if it is greater than 1 and cannot be written as the sum of two smaller primes.\n    \"\"\"\n    if num <= 1:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(num ** 0.5) + 1, 6):\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    # check if the number is equal to 2 or 3\n    elif num == 2 or num == 3:\n        return True\n    # check if the number is divisible by any number between 2 and num-1\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    # check if the number is divisible by any number between 5 and sqrt(num)\n    else:\n        for i in range(5, int(num**0.5)+1, 6):\n            if num % i == 0 or num % (i+2) == 0:\n                return False\n        return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0][1], matches[0][2]\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    for match in matches:\n        return match, matches.index(match), matches.index(match) + len(match)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start(), match.end()))\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    #initializing the variable to store the result\n    result = 0\n\n    #checking if n is positive or not\n    if n > 0:\n\n        #looping n times and adding the bell number to the result\n        for i in range(1, n+1):\n            result += (((-1)**(i-1)) * math.factorial(i-1) / math.factorial(n))**n\n        \n        #returning the result\n        return result\n    else:\n        #if n is not positive, return 0\n        return 0"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_array = [1] * (n+1)\n    bell_array[0] = 0\n    \n    for i in range(1,n+1):\n        bell_array[i] = (bell_array[i-1] * (i+1)) % 1000000007\n    \n    return bell_array[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    This function calculates the nth Bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_list = [0, 1]\n    for i in range(2, n + 1):\n        bell_list.append(bell_list[i - 1] + bell_list[i - 2])\n    return bell_list[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    b = 1\n    for i in range(1, n+1):\n        b = b * i\n    return b"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # initialize the new list to hold the remaining elements\n    new_list = []\n    # initialize the counter for the remaining elements\n    count = 0\n    # loop through the list, starting from the second element\n    for i in range(1, len(list1)):\n        # if the counter is less than k, add the current element to the new list\n        if count < L:\n            new_list.append(list1[i])\n            # increment the counter\n            count += 1\n        # if the counter is equal to k, skip the current element\n        elif count == L:\n            pass\n        # if the counter is greater than k, add the current element to the new list and decrement the counter\n        else:\n            new_list.append(list1[i])\n            count -= 1\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    k = L - 1\n    count = 0\n    for i in range(len(list1)):\n        if i == k:\n            count += 1\n        else:\n            list1[count] = list1[i]\n            count += 1\n    return list1[:L]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if L == 1:\n        return list1\n    elif L % 2 == 0:\n        return [list1[i] for i in range(0, L//2, 2)] + [list1[i] for i in range(1, len(list1), 2)]\n    else:\n        return [list1[i] for i in range(0, L//2, 2)] + [list1[i] for i in range(1, L//2, 2)]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Convert the list to a set to remove duplicates\n    set_list = set(list1)\n    # Convert the set back to a list to get the order\n    list_set = sorted(set_list)\n    # Remove the k'th element from the list_set and return it\n    return list_set[L]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:-L]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # copy the list to remove the element\n    list2 = list1.copy()\n    \n    # remove the kth element from the list\n    list2.pop(L-1)\n    \n    # return the list with the removed element\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) <= L:\n        return []\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the matrix\n    m = len(test_list)\n    \n    # Check if the n is a positive integer\n    if not isinstance(N, int) or N <= 0:\n        return \"Error: N should be a positive integer.\"\n    \n    # Check if N is less than or equal to the length of the matrix\n    if N > m:\n        return \"Error: N should be less than or equal to the length of the matrix.\"\n    \n    # Initialize the max value to be the first element of the first row\n    max_val = test_list[0][0]\n    \n    # Loop through the remaining rows and columns and compare the current value to the max value\n    for i in range(1, m):\n        for j in range(N-1):\n            max_val = max(max_val, test_list[i][j])\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) > N:\n            if row[N] > max_val:\n                max_val = row[N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Check if the input is valid\n    if not isinstance(test_list, list) or not all(isinstance(row, list) for row in test_list):\n        raise ValueError(\"Input must be a valid matrix of lists\")\n    \n    # Check if N is a valid integer\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer\")\n    \n    # Get the length of the first row\n    first_row_length = len(test_list[0])\n    \n    # Check if N is valid\n    if N > first_row_length:\n        raise ValueError(\"N must be less than or equal to the length of the first row\")\n    \n    # Get then'th column of the matrix\n    nth_column = [row[N-1] for row in test_list]\n    \n    # Get the maximum value in then'th column\n    max_value = max(nth_column)\n    \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Check if the list is empty or not\n    if not test_list:\n        return None\n    \n    # Initialize the max value as negative infinity\n    max_val = float('-inf')\n    \n    # Iterate through each list in the matrix\n    for row in test_list:\n        # Check if the nth column is present in the list\n        if N <= len(row):\n            # Get the nth column value\n            col_val = row[N-1]\n            # Update the max value if the current value is greater than it\n            if col_val > max_val:\n                max_val = col_val\n    \n    # Return the max value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the number of rows in the matrix\n    m = len(test_list)\n    \n    # Initialize the variable to store the max value\n    max_val = 0\n    \n    # Loop through each row of the matrix\n    for i in range(m):\n        # Get the value of then'th column of the current row\n        col_val = test_list[i][N-1]\n        \n        # If the current value is greater than the max value, update the max value\n        if col_val > max_val:\n            max_val = col_val\n    \n    # Return the max value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # get the length of the first row\n    row_length = len(test_list[0])\n    # initialize the max value to be the first element in the first row\n    max_value = test_list[0][0]\n    # iterate over the first row and compare the max value to the nth element of each row\n    for i in range(row_length):\n        if test_list[0][i] > max_value:\n            max_value = test_list[0][i]\n    # initialize the result list to be the same length as the input list\n    result_list = [0] * len(test_list)\n    # iterate over the result list and compare the max value to the nth element of each row\n    for i in range(len(result_list)):\n        result_list[i] = max_value\n    # return the result list\n    return result_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize variables\n    max_val = 0\n    \n    # iterate through the matrix\n    for row in test_list:\n        # check if then'th column value is greater than the current max value\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    \n    # return the max value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    for i in range(n):\n        max_value = max(test_list[i][j] for j in range(N))\n        for j in range(N):\n            test_list[i][j] = max_value\n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Initialize max value and index of max value\n    max_val = float('-inf')\n    max_index = None\n\n    # Loop through each row in the matrix\n    for row in test_list:\n\n        # Check if the current row has the nth column\n        if len(row) > N:\n\n            # If it does, check if the value at the nth column is greater than the current max value\n            if row[N] > max_val:\n                max_val = row[N]\n                max_index = row.index(max_val)\n\n    # Return the index of the max value in the nth column\n    return max_index"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if not isinstance(test_list, list) or not all(isinstance(row, list) for row in test_list):\n        raise ValueError(\"Input must be a list of lists.\")\n    if len(test_list) == 0:\n        raise ValueError(\"Input must not be an empty list.\")\n    if len(test_list[0]) == 0:\n        raise ValueError(\"Input must not be an empty list.\")\n\n    max_value = float('-inf')\n    for row in test_list:\n        if len(row) == 0:\n            raise ValueError(\"Input must not be an empty list.\")\n        if len(row)!= len(test_list[0]):\n            raise ValueError(\"Input must be a square matrix.\")\n        if N > len(row) or N < 1:\n            raise ValueError(\"n must be between 1 and the number of columns in the matrix.\")\n\n        max_value = max(max_value, row[N-1])\n\n    return max_value"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        first_element = sublist[0]\n        second_element = sublist[1]\n        merged_list.append([first_element, second_element])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # initialize an empty list to hold the merged lists\n    merged_lst = []\n    # loop through each sublist in the input list\n    for sublist in lst:\n        # check if the sublist has only two elements\n        if len(sublist) == 2:\n            # if so, append it to the merged list\n            merged_lst.append(sublist)\n    # return the merged list\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Initialize an empty list to hold the merged lists\n    merged_lst = []\n    \n    # Loop through each sublist in the input list\n    for sublist in lst:\n        # Add the first element of the sublist to the first list in the merged list\n        merged_lst.append([sublist[0], sublist[1]])\n    \n    # Return the merged list\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        sublist = lst[i]\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            cum_sum += test_list[i][j-1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize a variable to store the cumulative sum\n    cum_sum = 0\n    # loop through each tuple in the list\n    for tup in test_list:\n        # loop through each value in the tuple\n        for val in tup:\n            # add the value to the cumulative sum\n            cum_sum += val\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for tup in test_list:\n        for val in tup:\n            total += val\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(x[1] for x in test_list)"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes in a tuple list and returns the cumulative sum of all the values present in the list.\n    '''\n    cumulative_sum = 0\n    for value in test_list:\n        cumulative_sum += value\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize a variable to store the cumulative sum\n    cum_sum = 0\n    \n    # loop through each tuple in the list\n    for tup in test_list:\n        # loop through each value in the tuple\n        for val in tup:\n            # add the value to the cumulative sum\n            cum_sum += val\n    \n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize a list to store the average values for each tuple\n    averages = []\n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the sum of all values in the current tuple\n        total = sum(tup)\n        # Calculate the average by dividing the sum by the length of the tuple\n        avg = total / len(tup)\n        # Append the average value to the averages list\n        averages.append(avg)\n    # Return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values\n    avg_list = []\n    \n    # Loop through each tuple in the input list\n    for num_tuple in nums:\n        # Calculate the average value for the tuple\n        avg = sum(num_tuple) / len(num_tuple)\n        # Append the average value to the list\n        avg_list.append(avg)\n    \n    # Return the list of average values\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averaged_tuples = []\n    for i in range(len(nums)):\n        num_sum = sum(nums[i])\n        num_count = len(nums[i])\n        average = num_sum / num_count\n        averaged_tuples.append(average)\n    return averaged_tuples"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for i in nums:\n        count += 1\n        for j in i:\n            total += j\n    return [total / count]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num_tuple in nums:\n        avg = sum(num_tuple) / len(num_tuple)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for num_tuple in nums:\n        num_list = []\n        for num in num_tuple:\n            num_list.append(num)\n        average = sum(num_list) / len(num_list)\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num in nums:\n        avg = sum(num)/len(num)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        total = 0\n        for num in num_tuple:\n            total += num\n        averages.append(total / len(num_tuple))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for num_tuple in nums:\n        average = sum(num_tuple) / len(num_tuple)\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple((x % y for x, y in zip(test_tup1, test_tup2)))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([x % y for x, y in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    else:\n        return tuple(a % b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables to store the number of jumps required and the total distance traveled\n    jumps = 0\n    dist = 0\n\n    # Loop through the steps and check for the required distance\n    for i in range(steps):\n        if dist + d >= 0:\n            dist += d\n            jumps += 1\n        else:\n            break\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Args:\n    steps (int): number of steps to take in each jump.\n    d (int): length of the jump.\n\n    Returns:\n    int: number of jumps required to reach (d, 0) from origin.\n    \"\"\"\n\n    # Initialize variables\n    jumps = 0\n    current_pos = 0\n    height = 0\n\n    # Iterate through steps\n    for step in range(steps):\n        # If current position is greater than d, move up\n        if current_pos > d:\n            height += 1\n            current_pos -= d\n\n        # Move down\n        current_pos += 1\n\n        # If current position is equal to 0, count a jump\n        if current_pos == 0:\n            jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables to keep track of the number of jumps and the current position\n    num_jumps = 0\n    curr_pos = 0\n    # Loop through the given number of steps\n    for i in range(steps):\n        # Check if the current position is at the desired destination\n        if curr_pos == d:\n            return num_jumps\n        # Check if the current position is within the boundaries of the plane\n        if curr_pos < 0 or curr_pos >= d:\n            return -1\n        # Check if the current position is already visited\n        if i > 0 and steps - i <= 2 * num_jumps:\n            return -1\n        # Check if there are enough steps left to reach the desired destination\n        if steps - i >= 2 * num_jumps + 1:\n            # Calculate the maximum number of jumps that can be made to reach the desired destination\n            max_jumps = (steps - i + 1) // 2\n            # Update the number of jumps if the maximum number of jumps is less than the current number of jumps\n            if max_jumps < num_jumps:\n                num_jumps = max_jumps\n            # Update the current position based on the number of jumps made\n            curr_pos += num_jumps\n        else:\n            # If there are not enough steps left to reach the desired destination, there is no valid jump\n            return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    jumps = 0\n    current_position = 0\n    current_height = 0\n\n    while current_position < steps:\n        if current_height == 0:\n            if current_position + d < steps:\n                current_position += d\n                jumps += 1\n            else:\n                break\n        else:\n            current_position -= 1\n            current_height -= 1\n            jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function takes two arguments: steps (int) and d (int).\n    It returns the minimum number of jumps required to reach (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n    if d == 1:\n        return 1\n\n    jumps = 0\n    distance = d\n\n    while distance > 0:\n        distance -= 1\n        if distance < d:\n            jumps += 1\n        else:\n            jumps += distance//d\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    jumps = 0\n    i = 0\n    while i < steps:\n        if i + d <= steps:\n            jumps += 1\n            i += d\n        else:\n            i += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps % d!= 0:\n        raise ValueError(\"Steps must be divisible by d\")\n    n = steps // d\n    min_jumps = 0\n    for i in range(n):\n        min_jumps += i + 1\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < d:\n        return 'Invalid input'\n\n    jumps = 0\n    for i in range(steps-d):\n        steps -= 1\n        if steps <= 0:\n            return jumps\n        if i < d:\n            jumps += 1\n        else:\n            jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize the variables to store the distance and the number of jumps\n    distance = 0\n    jumps = 0\n    # Loop through the given steps and check for the point of form (d, 0) from origin\n    while distance <= d and distance < steps:\n        # If the distance is equal to the desired distance, return the number of jumps\n        if distance == d:\n            return jumps\n        # If the distance is less than the desired distance, move to the next step and increase the distance and jumps\n        distance += 1\n        jumps += 1\n    # If the distance is greater than the desired distance, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    i = 0\n    while i < steps:\n        i += 1\n        if i == steps - d:\n            jumps += 1\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists should have same length')\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the lists have equal length\n    if len(nums1)!= len(nums2):\n        print(\"Lists are not of equal length\")\n        return\n    \n    # create a new list to store the result\n    result = []\n    \n    # loop through each element in the lists\n    for i in range(len(nums1)):\n        # divide the corresponding elements\n        result.append(nums1[i]/nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    # Check if the lists are of equal length\n    if len(nums1)!= len(nums2):\n        return \"Lists are not of equal length.\"\n    else:\n        # Initialize empty list to store the result\n        result = []\n        # Iterate over the elements of both lists\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        # Return the result list\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists should have same length\")\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError(\"Division by zero is not allowed\")\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1/num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are not of equal length\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a list of their element-wise divisions.\n    '''\n    # check if the lists are of the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length.\")\n    \n    # create an empty list to store the result\n    result = []\n    \n    # loop through the lists\n    for i in range(len(nums1)):\n        # divide each element of the lists\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    nums = [char for char in test_str if char.isdigit()]\n    nums.sort()\n    return test_str.replace(nums[0], '').replace(nums[-1], '') + nums[0] + nums[-1]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # initialize a list to store the numbers\n    num_list = []\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, append it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # if the character is not a number, append it to the end of the string\n        else:\n            test_str = test_str + char\n    # join the num_list with the string to form the final string\n    return ''.join(num_list) + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Initialize empty string to store numbers\n    num_str = \"\"\n\n    # Loop through each character in the given string\n    for char in test_str:\n\n        # Check if the character is a number\n        if char.isdigit():\n\n            # Append the character to the number string\n            num_str += char\n\n    # Add the number string to the end of the given string\n    test_str += num_str\n\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    # Create a list of numbers in the input string\n    nums = [char for char in test_str if char.isdigit()]\n    \n    # Create a list to store the remaining characters\n    remaining = [char for char in test_str if not char.isdigit()]\n    \n    # Concatenate the two lists and reverse the order\n    result = nums + remaining[::-1]\n    \n    return ''.join(result)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # initialize variables to keep track of numbers and letters\n    num_count = 0\n    letter_count = 0\n\n    # iterate through the string\n    for i in range(len(test_str)):\n\n        # check if the character is a number\n        if test_str[i].isdigit():\n\n            # if it is a number, move it to the end of the string\n            test_str = test_str[:i] + test_str[i:]\n\n        # otherwise, increment the counter for letters\n        else:\n            letter_count += 1\n\n    # if there are no numbers, move the letters to the end\n    if num_count == 0:\n        test_str = test_str[letter_count:]\n\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    # split the string into a list of characters\n    char_list = list(test_str)\n    # iterate over the list of characters\n    for char in char_list:\n        # check if the character is a digit\n        if char.isdigit():\n            # add the digit to the number list\n            num_list.append(char)\n        # if the character is not a digit, move it to the end of the list\n        else:\n            # check if the number list is empty\n            if num_list == []:\n                # add the character to the number list\n                num_list.append(char)\n            # if the number list is not empty, move the digits to the end of the list\n            else:\n                # iterate over the number list backwards\n                for i in range(len(num_list)-1, -1, -1):\n                    # check if the character is a digit\n                    if num_list[i].isdigit():\n                        # add the digit to the number list\n                        num_list.insert(i+1, num_list[i])\n                    # if the character is not a digit, move it to the end of the list\n                    else:\n                        # insert the character at the next position\n                        num_list.insert(i+1, char)\n                        break\n    # join the number list into a string\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    return \"\".join(num_list) + test_str[:-len(num_list)]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = re.findall(r'\\d+', test_str)\n    nums_str = ''.join(nums)\n    nums_index = [test_str.index(num) for num in nums]\n    for i in range(len(nums)):\n        test_str = test_str[:nums_index[i]] + nums_str + test_str[nums_index[i]+len(nums[i]):]\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Initialize variables to keep track of numbers and letters\n    num = \"\"\n    alpha = \"\"\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a digit, add it to the number variable\n        if char.isdigit():\n            num += char\n        # If the character is not a digit, add it to the alpha variable\n        else:\n            alpha += char\n    # Concatenate the number and alpha variables to get the final string\n    final_str = num + alpha\n    # Return the final string\n    return final_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()  # sort the list in ascending order\n    size = 1  # initialize the size of the subset to 1\n    i = 0  # initialize the iterator to 0\n    while i < len(a) - 1:\n        j = i + 1  # initialize the iterator to the next element after the current one\n        while j < len(a) and a[i] % a[j]!= 0:\n            j += 1  # increment the iterator until the pair is divisible\n        size = max(size, j - i)  # update the size of the subset\n        i = j  # update the iterator to the next element after the current subset\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Initialize variables\n    max_size = 0\n    subset = []\n    current_size = 1\n    pairs = 0\n    \n    # Sort the list in ascending order\n    a.sort()\n    \n    # Loop through the list\n    for num in a:\n        if current_size == 1:\n            subset.append(num)\n            current_size += 1\n        else:\n            for i in range(current_size):\n                if num % subset[i] == 0:\n                    pairs += 1\n                    break\n                elif i == current_size - 1:\n                    subset.append(num)\n                    current_size += 1\n                    break\n        \n        # Update the maximum size if the current subset is larger\n        if current_size > max_size:\n            max_size = current_size\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    # create a dictionary to store the length of the largest subset of every pair of numbers\n    pairs_len = {}\n    \n    # loop through the list of numbers\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            # if the pair is divisible, update the length of the largest subset\n            if a[i] % a[j] == 0 and a[j] % a[i] == 0:\n                pairs_len[a[i], a[j]] = max(pairs_len.get((a[i], a[j]), 0), pairs_len.get((a[j], a[i]), 0)) + 1\n    \n    # find the maximum length of the largest subset\n    max_len = max(pairs_len.values())\n    \n    # find the pairs with the maximum length\n    pairs_with_max_len = [k for k, v in pairs_len.items() if v == max_len]\n    \n    # return the length of the largest subset\n    return max_len"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    max_sum = 0\n    max_length = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] % a[j] == 0 and a[i] % a[k] == 0:\n                    subset_sum = a[i] + a[j] + a[k]\n                    if subset_sum > max_sum:\n                        max_sum = subset_sum\n                        max_length = 3\n                    elif subset_sum == max_sum and 3 < max_length:\n                        max_length += 1\n    return max_length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables\n    current_sum = 0\n    largest_sum = 0\n    current_size = 0\n    largest_size = 0\n\n    # Loop through the sorted list\n    for num in a:\n\n        # Add the current number to the current sum\n        current_sum += num\n\n        # Check if the current sum is divisible by 2\n        if current_sum % 2 == 0:\n\n            # If it is, update the largest sum and size\n            if current_sum > largest_sum:\n                largest_sum = current_sum\n                largest_size = current_size\n\n            # Reset the current sum and size\n            current_sum = 0\n            current_size = 0\n\n    # Return the largest size\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns the size of the largest subset of the numbers that can be made of pairs of numbers that are divisible by each other.\n\n    Example:\n    Input: [2, 4, 6, 8, 10]\n    Output: 4\n\n    \"\"\"\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize two variables to keep track of the maximum size and the current size\n    max_size = 0\n    curr_size = 0\n\n    # Iterate over the sorted list\n    for i in range(len(a)):\n        # Check if the current number is divisible by the next number in the list\n        if a[i] % a[i + 1] == 0:\n            # If it is, add it to the current size\n            curr_size += 1\n        else:\n            # If it's not, update the maximum size if the current size is greater\n            if curr_size > max_size:\n                max_size = curr_size\n            # Reset the current size\n            curr_size = 1\n\n    # Update the maximum size if the last number is divisible by the first number\n    if curr_size > max_size:\n        max_size = curr_size\n\n    # Return the maximum size of the largest subset of divisible pairs\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    max_size = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                max_size = max(max_size, j-i+1)\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Args:\n    a: List of integers\n\n    Returns:\n    int: The size of the largest subset of a such that every pair is divisible.\n\n    \"\"\"\n\n    a.sort()\n    n = len(a)\n    res = 1\n    curr = 1\n\n    for i in range(1, n):\n        if a[i] % a[curr - 1] == 0:\n            curr += 1\n        else:\n            if curr == res:\n                res += 1\n            curr = i + 1\n\n    return res"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    n = len(a)\n    # Initialize the result as 0\n    result = 0\n    # Initialize the current subset as the first element of the list\n    current_subset = [a[0]]\n    # Iterate over the list from the second element to the last element\n    for i in range(1, n):\n        # If the current element is divisible by the last element of the current subset, add the current element to the current subset and update the result if the current subset is larger than the result so far\n        if a[i] % current_subset[-1] == 0:\n            current_subset.append(a[i])\n            result = max(result, len(current_subset))\n        # If the current element is not divisible by the last element of the current subset, remove the last element from the current subset and continue iterating over the list\n        else:\n            current_subset.pop()\n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function takes a list of numbers as input and returns the size of the largest subset of the numbers\n    such that every pair of adjacent numbers is divisible by 10.\n\n    >>> largest_subset([10, 20, 30, 40, 50])\n    2\n    >>> largest_subset([5, 15, 25, 35, 45])\n    4\n    >>> largest_subset([2, 10, 30, 60])\n    0\n    \"\"\"\n    # Calculate the sum of the numbers\n    total = sum(a)\n\n    # Initialize the largest subset size to 0\n    max_size = 0\n\n    # Loop through the numbers in the list\n    for i in range(len(a)):\n        # Compute the size of the largest subset that can be formed with the current number i\n        subset_size = 0\n        for j in range(i, len(a)):\n            if a[j] % 10 == 0:\n                subset_size += 1\n            else:\n                break\n\n        # Update the maximum size if the current size is greater\n        if subset_size > max_size:\n            max_size = subset_size\n\n    # Return the maximum size found\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    if n % 2 == 0:\n        # find median of two middle elements\n        mid1 = n // 2\n        mid2 = n // 2\n        median1 = arr1[mid1]\n        median2 = arr2[mid2]\n\n        # find median of two middle elements of two lists\n        for i in range(mid1):\n            if arr1[i] < median1:\n                median1 = arr1[i]\n        for j in range(mid2):\n            if arr2[j] < median2:\n                median2 = arr2[j]\n\n        median = (median1 + median2) / 2\n\n        return median\n    else:\n        # find median of middle element\n        mid = n // 2\n        median = arr1[mid]\n        for i in range(mid):\n            if arr1[i] < median:\n                median = arr1[i]\n        return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n\n    # Find the median index\n    median_index = n // 2\n\n    # Find the median value\n    if n % 2 == 0:\n        median_value = (merged_list[median_index - 1] + merged_list[median_index]) / 2\n    else:\n        median_value = merged_list[median_index]\n\n    return median_value"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge both arrays into a single sorted array\n    sorted_arr = merge_sorted_arrays(arr1, arr2)\n    \n    # Find the median index based on the length of the array\n    if n % 2 == 0:\n        median_index = n // 2\n    else:\n        median_index = n // 2 + 1\n    \n    # Return the median value\n    return sorted_arr[median_index]\n\ndef merge_sorted_arrays(arr1, arr2):\n    '''\n    Merge two sorted arrays into a single sorted array.\n    '''\n    # Initialize two pointers for each array\n    i = j = 0\n    \n    # Initialize a new array to store the merged sorted array\n    merged_arr = []\n    \n    # Loop through both arrays until one of them has been exhausted\n    while i < len(arr1) and j < len(arr2):\n        # Compare the values at the current indices of both arrays\n        if arr1[i] < arr2[j]:\n            # Add the value at the first index of the first array to the merged array\n            merged_arr.append(arr1[i])\n            # Increment the first index of the first array\n            i += 1\n        else:\n            # Add the value at the first index of the second array to the merged array\n            merged_arr.append(arr2[j])\n            # Increment the first index of the second array\n            j += 1\n    \n    # Add any remaining values from the first array to the merged array\n    merged_arr += arr1[i:]\n    # Add any remaining values from the second array to the merged array\n    merged_arr += arr2[j:]\n    \n    # Return the merged sorted array\n    return merged_arr"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge two sorted lists to form a single sorted list\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    merged_list.sort()\n\n    # Find the median\n    if n % 2 == 0:\n        median = (merged_list[n//2 - 1] + merged_list[n//2]) / 2\n    else:\n        median = merged_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge two sorted lists\n    merged_list = arr1 + arr2\n    merged_list.sort()\n\n    # Find the median index\n    median_index = n // 2\n\n    # Return the median\n    return merged_list[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted arrays\n    merged_arr = arr1 + arr2\n    # Sort the merged array\n    sorted_arr = sorted(merged_arr)\n    # Find the median of the sorted array\n    if n % 2 == 0:\n        median = (sorted_arr[n//2 - 1] + sorted_arr[n//2]) / 2\n    else:\n        median = sorted_arr[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n    merged_list.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        # If n is even, return the average of middle two elements\n        return (merged_list[n//2-1] + merged_list[n//2]) / 2\n    else:\n        # If n is odd, return the middle element\n        return merged_list[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted arrays\n    merged_arr = sorted(arr1 + arr2)\n\n    # Get the index of the median element\n    mid = n // 2\n    if n % 2 == 0:\n        median = (merged_arr[mid - 1] + merged_arr[mid]) / 2\n    else:\n        median = merged_arr[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Merge the two sorted lists\n    merged = merge(arr1, arr2, n)\n    \n    # Find the median of the merged list\n    median = find_median(merged, n)\n    \n    return median\n\ndef merge(arr1, arr2, n):\n    '''\n    Merge two sorted lists of same size.\n    '''\n    merged = []\n    i = j = 0\n    \n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n            \n    if i < n:\n        merged += arr1[i:]\n    else:\n        merged += arr2[j:]\n    \n    return merged\n\ndef find_median(arr, n):\n    '''\n    Find the median of a sorted list.\n    '''\n    mid = n // 2\n    if n % 2 == 0:\n        return (arr[mid] + arr[mid - 1]) / 2\n    else:\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # If the sizes of both arrays are even, we find the average of the middle two elements\n        mid1 = n//2\n        mid2 = mid1\n        if len(arr1) > mid1:\n            arr1_median = get_median(arr1[0:mid1], arr2[0:mid2], mid1)\n        else:\n            arr1_median = arr2[mid2-mid1]\n        if len(arr1) > mid1+1:\n            arr2_median = get_median(arr1[mid1+1:n], arr2[mid1+1:n], n-mid1-1)\n        else:\n            arr2_median = arr2[mid1+1]\n        return (arr1_median + arr2_median) / 2\n    else:\n        # If the sizes of both arrays are odd, we find the middle element\n        mid1 = n//2\n        mid2 = mid1\n        if len(arr1) > mid1:\n            arr1_median = get_median(arr1[0:mid1], arr2[0:mid2], mid1)\n        else:\n            arr1_median = arr2[mid2-mid1]\n        if len(arr1) > mid1+1:\n            arr2_median = get_median(arr1[mid1+1:n], arr2[mid1+1:n], n-mid1-1)\n        else:\n            arr2_median = arr2[mid1+1]\n        return arr1_median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    new_nums = []\n    for num in nums:\n        new_nums.append(num ** n)\n    return new_nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer `n` as input and returns the n-th power of each number in the list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if isinstance(string, str):\n        return string.upper()\n    else:\n        raise TypeError('Input must be a string')"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is in uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Swap the first and last element\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    # Return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Check if the input is a list\n    if isinstance(newList, list):\n        # Get the length of the list\n        length = len(newList)\n        \n        # Check if the length of the list is greater than or equal to 2\n        if length >= 2:\n            # Swap the first and last elements of the list\n            newList[0], newList[length-1] = newList[length-1], newList[0]\n            \n            # Print the new list\n            print(\"New list: \", newList)\n            \n    else:\n        # If the input is not a list, print an error message\n        print(\"Error: Input must be a list.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList)\n    if n == 0:\n        return newList\n    elif n == 1:\n        return [newList[0], newList[0]]\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        print(\"New List:\", newList)\n    else:\n        print(\"List should have at least 2 elements\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2: # check if the list has less than two elements\n        return newList # return the original list if it has less than two elements\n    else:\n        first = newList[0] # get the first element of the list\n        last = newList[-1] # get the last element of the list\n        newList[0] = last # set the first element to the last element\n        newList[-1] = first # set the last element to the first element\n        return newList # return the modified list"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # find the length of the list\n    length = len(newList)\n\n    # check if the list has at least two elements\n    if length < 2:\n        print(\"The list must have at least two elements.\")\n        return\n\n    # find the first and last elements of the list\n    first = newList[0]\n    last = newList[length-1]\n\n    # swap the first and last elements\n    newList[0] = last\n    newList[length-1] = first\n\n    # print the modified list\n    print(\"Modified List: \", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Get the length of the list\n    length = len(newList)\n    # Check if the length is less than 2 (which means the list has less than 2 elements)\n    if length < 2:\n        return newList\n    # Swap the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    # Return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the length of the list is greater than 1\n    if len(newList) > 1:\n        # Swap the first and last elements in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    second = newList[-1]\n    newList[0] = second\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Calculates the area of the largest triangle inscribed in a semicircle with a given radius.\n\n    :param r: The radius of the semicircle.\n    :type r: float\n    :return: The area of the largest triangle inscribed in the semicircle.\n    :rtype: float\n    \"\"\"\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r.\n    area = 0.5 * r * r * (1 + 3 * r * r)\n\n    # Return the calculated area.\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(3):\n        area += math.sqrt(3) / 4 * r**2\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Area of the semicircle\n    area_semicircle = 2 * r * r * pi\n\n    # Area of a triangle\n    def triangle_area(base, height):\n        return 0.5 * base * height\n\n    # Find the maximum base that can be inscribed in the semicircle\n    def max_base(r):\n        return 2 * r * r * pi\n\n    # Find the maximum height that can be inscribed in the semicircle\n    def max_height(r):\n        return (2 * r * r * pi) ** 0.5\n\n    # Find the maximum area that can be inscribed in the semicircle\n    def max_area(r):\n        max_base_val = max_base(r)\n        max_height_val = max_height(r)\n        return max_base_val * max_height_val\n\n    # Find the area of the largest triangle that can be inscribed in the semicircle\n    max_triangle_area = max_area(r)\n\n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    return max_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Constants\n    pi = 3.14159\n\n    # Calculate semi-circle area\n    s = pi * r**2\n\n    # Calculate area of the triangle\n    a = s / 3\n\n    # Calculate area of the largest triangle\n    largest_area = 0.5 * s * r\n\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Radius of the semicircle\n    s = 2*r\n\n    # Compute the perimeter of a right triangle\n    p = 3*r\n\n    # Compute the area of the largest triangle\n    a = (math.sqrt(3)*r**2)/2\n\n    # Compute the area of the smallest triangle\n    b = math.sqrt(3)*r**2\n\n    # Compute the area of the largest triangle\n    c = p - a - b\n\n    # Compute the area of the smallest triangle\n    d = p - c - b\n\n    # Compute the area of the smallest triangle\n    e = p - c - a\n\n    # Compute the area of the smallest triangle\n    f = p - d - b\n\n    # Compute the area of the smallest triangle\n    g = p - d - a\n\n    # Compute the area of the smallest triangle\n    h = p - e - b\n\n    # Compute the area of the smallest triangle\n    i = p - e - a\n\n    # Compute the area of the smallest triangle\n    j = p - f - b\n\n    # Compute the area of the smallest triangle\n    k = p - f - a\n\n    # Compute the area of the smallest triangle\n    l = p - g - b\n\n    # Compute the area of the smallest triangle\n    m = p - g - a\n\n    # Compute the area of the smallest triangle\n    n = p - h - b\n\n    # Compute the area of the smallest triangle\n    o = p - h - a\n\n    # Compute the area of the smallest triangle\n    p = p - i - b\n\n    # Compute the area of the smallest triangle\n    q = p - i - a\n\n    # Compute the area of the smallest triangle\n    r = p - j - b\n\n    # Compute the area of the smallest triangle\n    s = p - j - a\n\n    # Compute the area of the smallest triangle\n    t = p - k - b\n\n    # Compute the area of the smallest triangle\n    u = p - k - a\n\n    # Compute the area of the smallest triangle\n    v = p - l - b\n\n    # Compute the area of the smallest triangle\n    w = p - l - a\n\n    # Compute the area of the smallest triangle\n    x = p - m - b\n\n    # Compute the area of the smallest triangle\n    y = p - m - a\n\n    # Compute the area of the smallest triangle\n    z = p - n - b\n\n    # Compute the area of the smallest triangle\n    A = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z\n\n    # Compute the area of the largest triangle\n    B = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z\n\n    # Compute the area of the smallest triangle\n    C = p - a - b\n\n    # Compute the area of the smallest triangle\n    D = p - c - b\n\n    # Compute the area of the smallest triangle\n    E = p - c - a\n\n    # Compute the area of the smallest triangle\n    F = p - d - b\n\n    # Compute the area of the smallest triangle\n    G = p - d - a\n\n    # Compute the area of the smallest triangle\n    H = p - e - b\n\n    # Compute the area of the smallest triangle\n    I = p - e - a\n\n    # Compute the area of the smallest triangle\n    J = p - f - b\n\n    # Compute the area of the smallest triangle\n    K = p - f - a\n\n    # Compute the area of the smallest triangle\n    L = p - g - b\n\n    # Compute the area of the smallest triangle\n    M = p - g - a\n\n    # Compute the area of the smallest triangle\n    N = p - h - b\n\n    # Compute the area of the smallest triangle\n    O = p - h - a\n\n    # Compute the area of the smallest triangle\n    P = p - i - b\n\n    # Compute the area of the smallest triangle\n    Q = p - i - a\n\n    # Compute the area of the smallest triangle\n    R = p - j - b\n\n    # Compute the area of the smallest triangle\n    S = p - j - a\n\n    # Compute the area of the smallest triangle\n    T = p - k - b\n\n    # Compute the area of the smallest triangle\n    U = p - k - a\n\n    # Compute the area of the smallest triangle\n    V = p - l - b\n\n    # Compute the area of the smallest triangle\n    W = p - l"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 2 * r\n    b = math.sqrt(r**2 + r**2)\n    c = math.sqrt(r**2 - r**2)\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the semi-perimeter of the triangle\n    s = 2 * r * math.sqrt(3)\n\n    # calculate the area of the triangle using Heron's formula\n    a = math.sqrt(s * (s - 3 * r) * (s - 2 * r) * (s - r))\n\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    A = (s / 2) * (s / 2) * r * math.sqrt(3)\n\n    # return the area of the largest triangle\n    return A"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    pi = 3.14159265358979323846\n\n    # Calculate the area of a triangle using Heron's formula\n    def heron_area(a, b, c):\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Calculate the area of a triangle using Heron's formula for the triangle that can be inscribed in the semicircle\n    def semicircle_triangle_area(a, b, c, r):\n        s = (a + b + c) / 2\n        area_1 = heron_area(a, b, c)\n        area_2 = heron_area(a, s, r)\n        area_3 = heron_area(s, b, r)\n        area_4 = heron_area(s, s, r)\n        area_5 = heron_area(r, r, s)\n        return area_1 + area_2 + area_3 + area_4 + area_5\n\n    # Find the largest triangle that can be inscribed in the semicircle\n    max_area = 0\n    for a in range(int(r), 1, -1):\n        for b in range(int(r), 1, -1):\n            for c in range(int(r), 1, -1):\n                area = semicircle_triangle_area(a, b, c, r)\n                if area > max_area:\n                    max_area = area\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = semicircle_triangle_area(r, r, r, r)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a Python function to find the smallest missing number from a sorted list of natural numbers.\n\n    :param array: A sorted list of natural numbers.\n    :param start: The starting index of the array. Defaults to 0.\n    :param end: The ending index of the array. Defaults to None, which means the last index of the array.\n    :return: The smallest missing number from the array.\n    \"\"\"\n\n    # Check if the array is sorted\n    if len(array) > 1 and array[0] > array[1]:\n        return find_First_Missing(array[1:], start + 1, end)\n\n    # If the array is sorted, find the first missing number\n    if array[start] < start:\n        return start - array[start]\n    else:\n        return end + 1 - array[-1]"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    \"\"\"\n    # If the end index is not provided, set it as the last index of the array\n    if end is None:\n        end = len(array) - 1\n    # Iterate over the range of the array from the start index to the end index\n    for i in range(start, end+1):\n        # If the current number is not present in the array, return the current number as the first missing number\n        if i+1 not in array:\n            return i+1\n    # If the loop completes without finding the first missing number, return None\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as an input and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # if end is None, set it as the length of the array\n    if end is None:\n        end = len(array)\n\n    # find the smallest missing number using binary search\n    left, right = start, end\n    while left < right:\n        mid = (left + right) // 2\n        if array[mid] == mid:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    \n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    if end - start < 2:\n        return start + 1\n\n    mid = (start + end) // 2\n\n    if array[start] == mid:\n        return find_First_Missing(array, start, mid - 1)\n    elif array[mid] == mid:\n        return find_First_Missing(array, mid + 1, end)\n    else:\n        return find_First_Missing(array, start, mid - 1)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    # Traverse through the array and check if the current number is equal to its index\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    # Find the minimum and maximum values in the array\n    min_val = array[0]\n    max_val = array[-1]\n\n    # If start is not specified, set it to the minimum value\n    if start is None:\n        start = min_val\n\n    # If end is not specified, set it to the maximum value\n    if end is None:\n        end = max_val\n\n    # Initialize the first missing number to be the minimum value\n    first_missing = min_val\n\n    # Loop through the range of the input list\n    while start <= end:\n        # Calculate the middle index of the current range\n        mid = (start + end) // 2\n\n        # If the middle index contains a missing value, update first_missing to be mid\n        if array[mid] == mid:\n            first_missing = mid\n        # If the middle index contains a larger value, update the start to be mid+1\n        elif array[mid] > mid:\n            start = mid + 1\n        # If the middle index contains a smaller value, update the end to be mid-1\n        else:\n            end = mid - 1\n\n    return first_missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    \n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if mid == 0 or array[mid - 1] < mid:\n            if mid == len(array) or array[mid] > mid:\n                return mid\n            else:\n                return mid + 1\n        else:\n            end = mid - 1\n\n    return end + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    '''\n    This function takes a list as input and returns a new list containing only even numbers from the input list.\n    '''\n    return [num for num in lst if num % 2 == 0]"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as input and returns a list of even numbers.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    even_list = [] \n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list "
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    x1 = x\n    y1 = y - 1\n    x2 = x\n    y2 = y + 1\n    x3 = x - 1\n    y3 = y\n    x4 = x + 1\n    y4 = y\n    return [(x1, y1), (x2, y2), (x3, y3), (x4, y4)] + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Get the coordinates of the element\n    x, y = ele\n    \n    # List to store the adjacent coordinates\n    adj = []\n    \n    # Iterate through all the possible directions and check if the coordinates are valid\n    for i, j in ((x-1, y), (x+1, y), (x, y-1), (x, y+1)):\n        if 0 <= i < len(sub) and 0 <= j < len(sub[0]):\n            adj.append((i,j))\n    \n    return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    This function takes a coordinate tuple as input and returns all the adjacent coordinates.\n    \"\"\"\n\n    # Extract the coordinates of the input element\n    x, y = ele\n\n    # Initialize an empty list to store the adjacent coordinates\n    adj = []\n\n    # Check if the element is within the boundaries of the grid\n    if x >= 0 and x < n and y >= 0 and y < m:\n\n        # Check all the neighboring elements of the input element\n        if x+1 < n:\n            adj.append((x+1, y))\n        if x-1 >= 0:\n            adj.append((x-1, y))\n        if y+1 < m:\n            adj.append((x, y+1))\n        if y-1 >= 0:\n            adj.append((x, y-1))\n\n        # Check for adjacent elements in the subgrid\n        for sub_ele in sub:\n            x_sub, y_sub = sub_ele\n            if x_sub+1 < n and x_sub-1 >= 0 and y_sub+1 < m and y_sub-1 >= 0:\n                if (x_sub+1, y_sub) not in adj:\n                    adj.append((x_sub+1, y_sub))\n                if (x_sub-1, y_sub) not in adj:\n                    adj.append((x_sub-1, y_sub))\n                if (x_sub, y_sub+1) not in adj:\n                    adj.append((x_sub, y_sub+1))\n                if (x_sub, y_sub-1) not in adj:\n                    adj.append((x_sub, y_sub-1))\n\n    # Return the adjacent coordinates of the input element\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adjacent = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i, j)!= (0, 0):\n                neighbor = (x + i, y + j)\n                if neighbor in sub:\n                    adjacent.append(neighbor)\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Find the adjacent coordinates of the given coordinate tuple\n    adjacent = []\n    if ele[0] > 0:\n        adjacent.append((ele[0]-1, ele[1]))\n    if ele[0] < 1:\n        adjacent.append((ele[0]+1, ele[1]))\n    if ele[1] > 0:\n        adjacent.append((ele[0], ele[1]-1))\n    if ele[1] < 1:\n        adjacent.append((ele[0], ele[1]+1))\n    # Add the adjacent coordinates to the sublist\n    sub.extend(adjacent)\n    # Return the sublist\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # define a dictionary to store adjacent coordinates\n    adj = {\n        (0, 1): (-1, 0),\n        (1, 0): (0, 1),\n        (0, -1): (1, 0),\n        (1, 1): (0, -1),\n        (-1, 0): (0, 1),\n        (1, -1): (-1, 0),\n        (-1, 1): (0, -1),\n    }\n\n    # initialize an empty list to store adjacent coordinates\n    adj_coords = []\n\n    # extract the x and y coordinates of the given element\n    x, y = ele\n\n    # iterate over all adjacent coordinates of the current element\n    for adj_x, adj_y in adj:\n\n        # check if the adjacent element exists in the sub-list\n        if adj_x + x >= 0 and adj_x + x < len(sub) and adj_y + y >= 0 and adj_y + y < len(sub[adj_x + x]):\n            adj_coords.append((adj_x + x, adj_y + y))\n\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # initialize a list to store the adjacent coordinates\n    adj_coords = []\n    \n    # extract the row and column values of the given coordinate\n    row, col = ele\n    \n    # iterate over the possible adjacent rows and columns\n    for i in range(row - 1, row + 2):\n        for j in range(col - 1, col + 2):\n            # check if the adjacent row and column values are within the grid bounds\n            if i >= 0 and i < n and j >= 0 and j < m:\n                # if the adjacent row and column values are not the same as the current row and column, add them to the list of adjacent coordinates\n                if i!= row or j!= col:\n                    adj_coords.append((i, j))\n    \n    # return the list of adjacent coordinates\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return sub + adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=None):\n    if sub is None:\n        sub = []\n    adj = [(ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+1,y),(x-1,y),(x,y+1),(x,y-1),(x+1,y+1),(x-1,y+1),(x+1,y-1),(x-1,y-1)]\n    if sub:\n        return [x+1,y for x,y in adj if x+1 in sub and y in sub]\n    else:\n        return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the text to lowercase and split into words\n    words = text.lower().split()\n    \n    # Loop through each word and replace spaces with underscores\n    for i, word in enumerate(words):\n        if'' in word:\n            words[i] = word.replace(' ', '_')\n    \n    # Convert the words back to a string and return it\n    return''.join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces_count = 0\n    underscore_count = 0\n    \n    # Count the number of spaces and underscores in the given string\n    for char in text:\n        if char =='':\n            spaces_count += 1\n        elif char == '_':\n            underscore_count += 1\n    \n    # Replace spaces with underscores and vice versa\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    \n    # Calculate the difference between the number of spaces and underscores in the original string and the new string\n    diff_spaces = spaces_count - underscore_count\n    diff_underscores = underscore_count - spaces_count\n    \n    # Add the difference to the beginning of the new string to make it match the original string\n    text = diff_spaces *'' + text\n    \n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    \n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the string into words\n    words = text.split()\n\n    # Iterate over each word in the list\n    for i, word in enumerate(words):\n        # Check if the word contains whitespace\n        if any(char.isspace() for char in word):\n            # Replace spaces with underscores\n            words[i] = word.replace(' ', '_')\n        # Check if the word contains underscores\n        elif any(char == '_' for char in word):\n            # Replace underscores with spaces\n            words[i] = word.replace('_','')\n\n    # Join the words back into a string\n    return''.join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Initialize an empty list to store the modified string\n    modified_text = []\n\n    # Iterate over each character in the string\n    for char in text:\n        # Check if the character is a whitespace\n        if char =='':\n            # Append an underscore to the modified text list\n            modified_text.append('_')\n        else:\n            # Append the original character to the modified text list\n            modified_text.append(char)\n\n    # Join the modified characters into a string and return it\n    return ''.join(modified_text)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the string to lowercase\n    text = text.lower()\n    # Replace all whitespace characters with an underscore\n    text = text.replace(\" \", \"_\")\n    # Replace all underscore characters with a whitespace\n    text = text.replace(\"_\", \" \")\n    # Return the modified string\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    # replace spaces with underscores\n    new_text = text.replace(' ', '_')\n    # replace underscores with spaces\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1-zero_count] = num_list[len(num_list)-1-zero_count], num_list[i]\n            zero_count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.append(num_list.pop(i))\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Iterate through the list\n    for i in range(len(num_list)):\n        # If the current element is zero, move it to the end of the list\n        if num_list[i] == 0:\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Create a new list with all elements in the original list\n    new_list = num_list[:]\n    \n    # Loop through the new list from the end to the beginning\n    for i in range(len(new_list)-1, -1, -1):\n        \n        # If the current element is zero, swap it with the last non-zero element in the list\n        if new_list[i] == 0:\n            for j in range(i, len(new_list)-1):\n                if new_list[j]!= 0:\n                    temp = new_list[i]\n                    new_list[i] = new_list[j]\n                    new_list[j] = temp\n                    break\n        else:\n            break\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create an empty list to store non-zero elements\n    result = []\n    # iterate through the input list\n    for num in num_list:\n        # if the element is not zero, append it to the result list\n        if num!= 0:\n            result.append(num)\n    # iterate through the input list again and append all zeroes to the end of the result list\n    for num in num_list:\n        if num == 0:\n            result.append(num)\n    # return the result list\n    return result"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # initialize two pointers, one at the beginning and one at the end of the list\n    left = 0\n    right = len(num_list) - 1\n    \n    # while there are still elements to be moved\n    while left < right:\n        # if the left element is zero\n        if num_list[left] == 0:\n            # move the left element to the next position (right)\n            num_list[left], num_list[right] = num_list[right], num_list[left]\n            \n            # move the pointers to the next position (right)\n            left += 1\n            right -= 1\n        else:\n            # move the right element to the next position (left)\n            left += 1\n    \n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers and moves all the zeroes to the end of the list.\n    \"\"\"\n    # Create a new list to store non-zero values\n    non_zero_list = []\n    # Loop through the list and add non-zero values to the new list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n    # Append all non-zero values to the end of the original list\n    num_list.extend(non_zero_list)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and an integer n as inputs and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    if n <= 0 or n > len(arr):\n        return \"Invalid input\"\n    \n    xor_sum = 0\n    for i in range(n):\n        xor_sum += arr[i] ^ arr[i + n]\n    \n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes two parameters:\n    arr: List of integers\n    n: Number of pairs to be considered\n\n    It finds the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # Initialize variables\n    sum_xor = 0\n    xor_sum = 0\n\n    # Loop through the list of numbers\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Find the xor of the two numbers\n            xor_sum = arr[i] ^ arr[j]\n            # Add the xor to the sum_xor variable\n            sum_xor += xor_sum\n\n    # Return the sum of xor of all pairs of numbers\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and an integer n as input and returns the sum of xor of all pairs of numbers in the list.\n    \n    Args:\n    arr (list): a list of integers\n    n (int): the size of the list\n    \n    Returns:\n    int: the sum of xor of all pairs of numbers in the list\n    \n    Example:\n    >>> pair_xor_Sum([1, 2, 3, 4, 5], 2)\n    11\n    \n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list as an input and the number of elements in the list as an input.\n    It returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of all pairs of numbers\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    # Return the sum of XOR of all pairs\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for num in iterable:\n        heapq.heappush(heap, num)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list\n    arr = list(iterable)\n    \n    # Build a max heap from the list\n    heapq.heapify(arr)\n    \n    # Sort the heap by repeatedly extracting the maximum element and adding it to the end of the sorted list\n    for i in range(len(arr)-1, 0, -1):\n        # Extract the maximum element from the heap\n        max_val = heapq.heappop(arr)\n        \n        # Add the maximum element to the end of the sorted list\n        arr.append(max_val)\n    \n    # Return the sorted list\n    return arr"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using heap sort algorithm.\n    '''\n    # Convert the list to a min heap\n    heap = [heapq.heappushpop(hq.heappushpop, x) for x in iterable]\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the input list into a max heap\n    heap = hq.heapify(iterable)\n\n    # Sort the heap using heapsort\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Create a min heap from the list\n    hq.heapify(iterable)\n    # Build a sorted list by extracting elements from the heap\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using the heap sort algorithm.\n    The time complexity of this algorithm is O(nlogn).\n    '''\n    heap = hq.heapify(iterable)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    This function sorts the given list using heap sort.\n    \"\"\"\n    # Convert the list to a heap\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    # Extract elements from the heap in sorted order\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a min heap\n    hq.heapify(iterable)\n    # extract elements from the heap and append to a new list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list\n    iterable = list(iterable)\n    # Build a max heap from the iterable\n    hq.heapify(iterable)\n    # Extract the maximum element from the heap\n    result = [hq.heappop(iterable)]\n    # Repeat the process for all the elements in the iterable\n    while iterable:\n        # Extract the maximum element from the heap\n        max_value = hq.heappop(iterable)\n        # Add it to the result list\n        result.append(max_value)\n        # Rebuild the heap\n        hq.heapify(iterable)\n    # Return the sorted list\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n\n    # Initialize variables\n    profit = 0\n    loss = 0\n\n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if profit and loss are zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount >= actual_cost:\n        return \"The sale amount is greater than or equal to the cost of the item.\"\n    elif sale_amount < actual_cost:\n        return \"The sale amount is less than the cost of the item.\"\n    else:\n        return \"The sale amount is equal to the cost of the item.\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Calculate the profit and loss for the sale\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if profit is zero and loss is zero\n    if profit == 0 and loss == 0:\n        print(\"The sale has no profit and no loss.\")\n        return True\n    else:\n        print(\"The sale does not have no profit and no loss.\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= 0:\n        return True\n    if actual_cost <= 0:\n        return True\n    if actual_cost > sale_amount:\n        return False\n    return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # check for no profit and no loss\n    if profit <= 0 and loss <= 0:\n        print(\"The given amount has no profit and no loss\")\n    else:\n        print(\"The given amount has a profit of\", profit, \"and a loss of\", loss)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        return True, 'Profitable'\n    elif sale_amount > actual_cost:\n        return False, 'Loss'"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return False\n    elif sale_amount == actual_cost:\n        return True\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    This function takes in two arguments, v (wind velocity in km/h) and t (temperature in celsius).\n    It then calculates the wind chill index using the formula:\n    \n    wci = 13.12 + 0.6215*t - 11.37*math.log(v) + 0.3965*t*math.log(v) - 0.114*t**2\n    \n    where t and v are the temperature and wind velocity respectively.\n    \n    Finally, the function returns the calculated wind chill index rounded to the nearest integer.\n    '''\n    \n    wci = 13.12 + 0.6215*t - 11.37*math.log(v) + 0.3965*t*math.log(v) - 0.114*t**2\n    \n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert the temperature from celsius to fahrenheit\n    t = (t * 1.8) + 32\n    \n    # Calculate the wind chill using the given formula\n    # W = 13.12 + 0.6215 * (T - 273.15) + 10 * (v * 0.066)\n    w = (13.12 + 0.6215 * (t - 273.15) + 10 * (v * 0.066))\n    \n    # Round the wind chill to the nearest integer\n    wc = math.ceil(w)\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_mph = v * 1609.34\n    return round(237.3 + (0.6215 * t) - (11.37 * math.pow(wind_speed_mph, 0.16)) + (0.3965 * t * math.pow(wind_speed_mph, 0.16)))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the dew point temperature from the given temperature and wind velocity\n    dew_point = 243.04 * (math.exp((17.625 * t) / (t + 243.04))) - 11.375 * math.exp((17.625 * t) / (t + 243.04))\n\n    # Calculate the wind chill temperature\n    wc_temp = 237.3 + 0.6215 * v + 11.375 * math.exp((17.625 * t) / (t + 243.04))\n\n    # Calculate the wind chill index\n    wc_index = math.round(13.12 + 0.6215 * v + 11.375 * math.exp((17.625 * t) / (t + 243.04)) - 0.115 * dew_point)\n\n    # Return the wind chill index rounded to the next integer\n    return wc_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    wind_speed = v * 3.6  # converting the wind speed from km/h to m/s\n    temperature = t - 273.15  # converting the temperature from celsius to Kelvin\n    \n    # calculating the wind chill temperature\n    wc = 0.006219 * temperature - 11.37\n\n    # calculating the wind chill index\n    wci = math.ceil(wc / wind_speed)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the temperature in Kelvin\n    T = t + 273.15\n    \n    # Calculate the humidity ratio\n    if v <= 10:\n        H = 0.01 * (33.3 - 0.01 * (33.3 - 16.7 * t))\n    elif 10 < v <= 16:\n        H = 0.01 * (33.3 - 0.01 * (33.3 - 16.7 * t))\n    elif 16 < v <= 22:\n        H = 0.01 * (33.3 - 0.01 * (33.3 - 16.7 * t))\n    else:\n        H = 0.01 * (33.3 - 0.01 * (33.3 - 16.7 * t))\n        \n    # Calculate the wind chill index\n    W = 35.74 + 0.6215 * v - 35.75 * math.exp(17.625 * (T - 29.65) / (T - 24.95)) + 0.4275 * H - 44.75 * math.exp(-11.375 * (T - 29.65) / (T - 23.15))\n    \n    # Round the wind chill index to the nearest integer\n    W_int = round(W)\n    \n    # Return the wind chill index\n    return W_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    W = round((10 - (0.14 * t - 35.72)) * v**2 + (10 - (0.07 * t - 44.85)))\n\n    return W"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v >= 10:\n        return round(23.7 + (0.6215 * t) - (3.597 * math.log(v)) + (0.144 * (t - 80)))\n    elif v >= 5:\n        return round(21.2 + (0.6215 * t) - (3.597 * math.log(v)) + (0.144 * (t - 80)))\n    else:\n        return round(18.6 + (0.6215 * t) - (3.597 * math.log(v)) + (0.144 * (t - 80)))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the nearest integer.\n    \n    Parameters:\n    v (float): Wind velocity in kilometers per hour.\n    t (float): Temperature in Celsius.\n    \n    Returns:\n    int: Wind chill index rounded to the nearest integer.\n    \"\"\"\n    \n    # Calculate the relative humidity based on the wind speed and temperature\n    rh = 13.12 + 0.6215 * v - 11.37 * math.exp((17.625 * t) / (t + 243.5))\n    \n    # Calculate the wind chill index based on the relative humidity and temperature\n    wc = 35.74 + 0.6215 * v - 35.75 * math.exp((17.625 * t) / (t + 243.5)) + 0.4275 * rh\n    \n    # Round the wind chill index to the nearest integer\n    wc = round(wc)\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Calculate the wind chill index using the formulae:\n    # Chill index = 13.12 + 0.6215 * temperature - 11.37 * velocity^0.16 + 0.3965 * temperature * velocity^0.16\n    # Chill index = round(Chill index)\n    \n    chill_index = round(13.12 + 0.6215 * t - 11.37 * v**0.16 + 0.3965 * t * v**0.16)\n    \n    return chill_index"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the names' lengths\n    total_length = 0\n    \n    # Iterate through the names in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it and move on to the next name\n            continue\n        # If the name does not start with a lowercase letter, add its length to the total\n        total_length += len(name)\n    \n    # Return the sum of the names' lengths\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a variable to store the sum of names' lengths\n    total_length = 0\n    # iterate through the list of names\n    for name in sample_names:\n        # if the name starts with a lowercase letter, skip it\n        if name[0].islower():\n            continue\n        # add the length of the name to the total_length variable\n        total_length += len(name)\n    # return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # Initialize sum to 0\n    sum_length = 0\n\n    # Iterate over the names in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If yes, skip the name\n            continue\n        # If no, add the length of the name to the sum\n        sum_length += len(name)\n\n    # Return the sum of lengths of names after removing those starting with a lowercase letter\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the cleaned names\n    cleaned_names = []\n\n    # loop through each name in the input list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if so, skip the name\n            continue\n        else:\n            # if not, append the name to the cleaned names list\n            cleaned_names.append(name)\n\n    # sum the lengths of the cleaned names\n    total_length = sum(len(name) for name in cleaned_names)\n\n    # return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Create an empty list to store the names with lowercase letters removed\n    names = []\n\n    # Loop through each name in the input list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it and move on to the next one\n            continue\n        # If the name does not start with a lowercase letter, add it to the names list\n        names.append(name)\n\n    # Initialize a sum variable to keep track of the length of the names list\n    sum_length = 0\n\n    # Loop through each name in the names list\n    for name in names:\n        # Add the length of each name to the sum variable\n        sum_length += len(name)\n\n    # Return the sum of the lengths of the names in the names list\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in sample_names if name[0].isupper()]\n\n    # Sum the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if name[0].isupper())"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    # Remove the parenthesis from the string using regex\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parenthesis and what is inbetween them\n    items = re.sub(r'\\((.*?)\\)', '', items)\n    items = re.sub(r'\\[(\\w+)\\]', '', items)\n    items = re.sub(r'\\{(.*?)\\}', '', items)\n    \n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    match = pattern.search(items)\n    if match:\n        return match.group(1)\n    else:\n        return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\([^)]*\\)') # regex pattern for matching parenthesis\n    result = re.sub(pattern, '', items) # remove parenthesis using regex\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define a regular expression pattern to match any parenthesis enclosed in brackets\n    pattern = r'\\((.*?)\\)'\n    # Use the re.sub() function to remove the parenthesis from the string\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove any parentheses from the string using regular expressions\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^\\)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)') # regex pattern to match parenthesis\n    result = pattern.sub('', items) # remove parenthesis using regex and replace with empty string\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    while n > 1:\n        a, b = b, a + b\n        n -= 1\n    return b\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth nonagonal number is:\", is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return ((n*n) // 2) + ((n*n+1) // 2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize variables to store the first two nonagonal numbers\n    a = 1\n    b = 1\n    # Loop to calculate the nth nonagonal number\n    for i in range(n):\n        c = (a + b) * (2 * a + 1) // (a + 1)\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize variables for the row and column\n    row = 1\n    col = 1\n\n    # Loop through the square matrix of size n*n\n    for i in range(n):\n        for j in range(n):\n            # Calculate the value of the nonagonal number\n            value = row + col\n            print(value, end=' ')\n\n            # Move to the next position\n            row += 1\n            col += 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize variables\n    i = 1\n    num = 0\n    # Calculate the sum of squares of the first n squares\n    while i <= n:\n        num += i**2\n        i += 1\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    j = 1\n    nonagonal_number = 1\n    \n    while i <= n:\n        nonagonal_number += j\n        i += 1\n        j += 1\n    \n    return nonagonal_number"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize variables\n    first_nonagonal = 1\n    second_nonagonal = 4\n\n    # Iterate until we reach the nth nonagonal number\n    for i in range(2, n + 1):\n        # Calculate the next nonagonal number\n        next_nonagonal = (first_nonagonal ** 2) + (second_nonagonal ** 2)\n\n        # Update the variables\n        first_nonagonal = second_nonagonal\n        second_nonagonal = next_nonagonal\n\n    return second_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    result = 1\n    for i in range(1, n+1):\n        result += 2*i\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    while i <= n:\n        j = i*i\n        while j <= n:\n            return False\n            j += i\n        i += 1\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<=\\b|^)[zZ](?=\\b|$)'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\b[a-z]+z\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?:[^z]+z[^z]+){2}\\b'\n    match = re.search(pattern, text)\n    return match"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove all non-alphanumeric characters from the text\n    text = re.sub(r'\\W+','', text.lower())\n\n    # Split the text into words\n    words = text.split()\n\n    # Check if 'z' exists at the start and end of any word\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            return True\n\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    words = re.findall(r'\\b\\w+\\b', text)\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regex to match words with 'z' at the start or end\n    pattern = r'\\b(z)(\\w+|z)\\b'\n    matches = re.findall(pattern, text)\n\n    # Check if there are matches\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = r'\\b[zZ][^\\w]*\\b'\n    result = re.search(regex, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]*[zZ].*[a-zA-Z]*\\b'\n    matches = re.findall(pattern, text)\n    return len(matches)!= 0"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the first k elements of the array\n    for i in range(k):\n        input[i], input[-(i+1)] = input[-(i+1)], input[i]\n\n    # Reverse the remaining elements of the array\n    for i in range(k, len(input)//2):\n        input[i], input[-(i+1)] = input[-(i+1)], input[i]\n\n    # Reverse the last k elements of the array\n    for i in range(len(input)-k, len(input)-1):\n        input[i], input[-(i+1)] = input[-(i+1)], input[i]\n\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # Base case: if k is greater than the length of the array, return the array\n    if k > len(input):\n        return input\n    \n    # Recursive case: Swap the element at index k with the element at the end of the array\n    input[k], input[len(input)-1] = input[len(input)-1], input[k]\n    \n    # Recursively call the function with k-1 as the new k value\n    reverse_Array_Upto_K(input, k-1)\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # reverse the array\n    input.reverse()\n    # reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    # reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    left, right = 0, k - 1\n\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a given position k and reverses the elements upto that position.\n    '''\n    # Split the input array into two parts: before and after k\n    before_k = input[:k]\n    after_k = input[k:]\n    \n    # Reverse the elements in the before and after parts of the array\n    before_k_reversed = before_k[::-1]\n    after_k_reversed = after_k[::-1]\n    \n    # Merge the reversed parts of the array\n    reversed_array = before_k_reversed + after_k_reversed\n    \n    # Return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an input list and a position k as parameters and returns a reversed list up to the kth position.\n    '''\n    return input[::-1][:k][::-1]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        return input\n    input = input[:k]\n    reversed_array = input[::-1]\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 0 or k > len(input):\n        return \"Invalid input\"\n    else:\n        input.reverse()\n        input = input[:k] + input[k:][::-1]\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    for i in range(len(input)-1, k-1, -1):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the elements up to the given position\n    input = input[::-1][:k]\n    # Reverse the entire array\n    input = input[::-1]\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_dict = {**test_dict, **test_tup}\n    return new_dict"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Get the length of the tuple\n    length = len(test_tup)\n\n    # Create a new tuple with the length of the original tuple + 1\n    new_tuple = (test_tup[0],) * (length + 1)\n\n    # Update the new tuple with the dictionary values\n    new_tuple[1:] = test_dict.values()\n\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup, test_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"The first argument should be a tuple.\")\n    \n    # Check if the input is a dictionary\n    if not isinstance(test_dict, dict):\n        raise TypeError(\"The second argument should be a dictionary.\")\n    \n    # Add the dictionary to the tuple\n    test_tup = test_tup + (test_dict,)\n    \n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # create a new dictionary with the same keys as test_dict\n    new_dict = {k: test_dict[k] for k in test_dict}\n    # create a new tuple with the elements of test_tup and the new dictionary as the last element\n    new_tup = tuple(test_tup) + (new_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary into a tuple\n    test_dict_tuple = tuple(test_dict.items())\n    # Concatenate the tuple to the test_tup\n    new_tuple = test_tup + test_dict_tuple\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return (test_tup + tuple(test_dict.items()))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup + tuple(test_dict.items()))"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_sum = 0\n    max_path = []\n\n    # Initialize the starting cell\n    current_row = 0\n    current_col = 0\n    current_sum = cost[current_row][current_col]\n    current_path = [current_row, current_col]\n\n    # Traverse the matrix, keeping track of the current sum and path\n    for i in range(1, N*N):\n        # Check if we can move right\n        if current_col + 1 < N:\n            new_sum = current_sum + cost[current_row][current_col+1]\n            new_path = current_path.copy()\n            new_path.append((current_row, current_col+1))\n            if new_sum > max_sum:\n                max_sum = new_sum\n                max_path = new_path\n            current_sum = new_sum\n            current_row = current_row\n            current_col = current_col+1\n\n        # Check if we can move down\n        if current_row + 1 < N:\n            new_sum = current_sum + cost[current_row+1][current_col]\n            new_path = current_path.copy()\n            new_path.append((current_row+1, current_col))\n            if new_sum > max_sum:\n                max_sum = new_sum\n                max_path = new_path\n            current_sum = new_sum\n            current_row = current_row+1\n\n    # Compute the average of the maximum path\n    max_path_sum = 0\n    for i in range(len(max_path)):\n        row, col = max_path[i]\n        max_path_sum += cost[row][col]\n    max_average = max_path_sum / len(max_path)\n\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    N = len(cost)\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N-i-1):\n            current_cost = cost[i][j] + cost[i][j+1] + cost[i+1][j+1] + cost[i+1][j]\n            current_avg = current_cost / (i+j+2)\n            if current_avg > max_avg:\n                max_avg = current_avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    N = len(cost)\n    \n    # Initialize variables\n    max_avg = float('-inf')\n    curr_path_avg = 0\n    path = []\n    \n    # Iterate through all paths from top-left to bottom-right\n    for i in range(N):\n        for j in range(N):\n            # Add current cell to path\n            path.append((i, j))\n            \n            # Compute path cost and average\n            curr_path_cost = sum(cost[i][j])\n            curr_path_avg = curr_path_cost / (i+j+1)\n            \n            # Compare current average with max average and update if necessary\n            if curr_path_avg > max_avg:\n                max_avg = curr_path_avg\n                curr_path = path[:]\n            \n            # Remove current cell from path\n            path.pop()\n    \n    # Return maximum average path\n    return curr_path_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def dfs(i, j, visited, path, total_cost):\n        if i == N-1 and j == N-1:\n            if path not in path_set:\n                path_set.add(path)\n                if total_cost > max_avg:\n                    max_avg = total_cost\n            return\n\n        # Visit current cell\n        visited.add((i, j))\n\n        # Move to right cell\n        if j < N-1:\n            dfs(i, j+1, visited, path+[j+1], total_cost+cost[i][j+1])\n\n        # Move to down cell\n        if i < N-1:\n            dfs(i+1, j, visited, path+[i+1], total_cost+cost[i+1][j])\n\n        # Unvisit current cell\n        visited.remove((i, j))\n\n    # Initialize variables\n    N = len(cost)\n    path_set = set()\n    max_avg = 0\n\n    # Traverse all paths\n    for i in range(N):\n        for j in range(N):\n            visited = set()\n            path = []\n            dfs(i, j, visited, path, 0)\n\n    return max_avg / len(path_set)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    max_avg = 0\n    total_cost = 0\n    visited_cells = 0\n    \n    # Iterate through all paths in the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # Check if the cell is already visited\n            if cost[i][j] == float('inf') or visited_cells == 0:\n                continue\n            \n            # Check if the current cell can be visited in the next step\n            next_i = (i+1) % len(cost)\n            next_j = (j+1) % len(cost[0])\n            if cost[next_i][next_j]!= float('inf'):\n                visited_cells += 1\n            \n            # Compute the average cost of the visited cells\n            current_avg = total_cost / visited_cells\n            if current_avg > max_avg:\n                max_avg = current_avg\n                \n            # Update the total cost and visited cells\n            total_cost += cost[i][j]\n            visited_cells += 1\n    \n    # Return the maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        for j in range(N):\n            if i == 0:\n                dp[i][j] = dp[0][j] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i][0] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    max_path_sum = dp[N-1][N-1]\n    max_avg = max_path_sum / (N*N)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                cost[i][j] += cost[i][j-1]\n            elif j == 0:\n                cost[i][j] += cost[i-1][j]\n            else:\n                cost[i][j] += min(cost[i-1][j], cost[i][j-1])\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == N-1:\n                avg = cost[i][j]\n                max_avg = max(max_avg, avg)\n            elif i == 0:\n                avg = cost[i][j] + cost[i][j-1]\n                max_avg = max(max_avg, avg)\n            elif j == 0:\n                avg = cost[i][j] + cost[i-1][j]\n                max_avg = max(max_avg, avg)\n            else:\n                avg = cost[i][j] + min(cost[i-1][j], cost[i][j-1])\n                max_avg = max(max_avg, avg)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def dfs(i, j, total_cost, visited):\n        '''\n        Recursive function to find the maximum average of a given cost matrix.\n        '''\n        if i == N-1 and j == N-1:\n            # base case: end of path: compute and update average\n            if visited:\n                total_cost /= visited\n                if max_avg < total_cost:\n                    max_avg = total_cost\n            return\n\n        # explore all possible next moves\n        if i < N-1:\n            visited += 1  # visit current cell\n            dfs(i+1, j, total_cost + cost[i][j], visited)\n            visited -= 1  # unvisit current cell\n\n        if i > 0:\n            visited += 1  # visit current cell\n            dfs(i-1, j, total_cost + cost[i][j], visited)\n            visited -= 1  # unvisit current cell\n\n        if j < N-1:\n            visited += 1  # visit current cell\n            dfs(i, j+1, total_cost + cost[i][j], visited)\n            visited -= 1  # unvisit current cell\n\n        if j > 0:\n            visited += 1  # visit current cell\n            dfs(i, j-1, total_cost + cost[i][j], visited)\n            visited -= 1  # unvisit current cell\n\n    # initialize variables\n    N = len(cost)\n    max_avg = float('-inf')\n    dfs(0, 0, 0, 0)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Find the maximum value in the cost matrix\n    max_val = max([max(row) for row in cost])\n\n    # Initialize an empty list to store the path\n    path = []\n\n    # Initialize a variable to keep track of the current position\n    current_pos = (0, 0)\n\n    # Initialize a variable to keep track of the current visited cells\n    visited_cells = 1\n\n    # Initialize a variable to keep track of the maximum average\n    max_avg = 0\n\n    # Initialize a variable to keep track of the current maximum average\n    curr_max_avg = 0\n\n    # Initialize a variable to keep track of the maximum cell in the path\n    max_cell = None\n\n    # Loop through each cell in the cost matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # If the current cell is not already visited and the cost is less than or equal to the maximum value\n            if cost[i][j] <= max_val and (i, j) not in visited_cells:\n                # Update the current position\n                current_pos = (i, j)\n\n                # Update the current visited cells\n                visited_cells |= 1 << (i * len(cost[0]) + j)\n\n                # Calculate the average of the path up to the current position\n                path_avg = sum(cost[k][j] for k in range(i) if k >= 0) + \\\n                           sum(cost[i][k] for k in range(j) if k >= 0) + \\\n                           cost[i][j]\n\n                # If the average is greater than the current maximum average or if the current position is greater than the maximum cell in the path\n                if path_avg > curr_max_avg or (path_avg == curr_max_avg and (i, j) > max_cell):\n                    # Update the current maximum average\n                    curr_max_avg = path_avg\n\n                    # Update the maximum cell in the path\n                    max_cell = (i, j)\n\n                    # Update the maximum average in the path\n                    max_avg = path_avg\n\n                    # Initialize a list to store the path\n                    path = [(i, j)]\n                else:\n                    # If the average is not greater than the current maximum average but it is greater than the maximum average in the path\n                    if path_avg > max_avg:\n                        # Update the maximum average in the path\n                        max_avg = path_avg\n\n                        # Update the maximum cell in the path\n                        max_cell = (i, j)\n\n                        # Initialize a list to store the path\n                        path = [(i, j)]\n                    # If the average is not greater than the maximum average in the path but it is greater than the current maximum average in the path\n                    elif path_avg == max_avg and (i, j) > max_cell:\n                        # Update the maximum cell in the path\n                        max_cell = (i, j)\n\n                        # Initialize a list to store the path\n                        path = [(i, j)]\n\n                # Backtrack the path and update the visited cells\n                while path[-1]!= current_pos:\n                    visited_cells &= ~(1 << (i * len(cost[0]) + j))\n                    i, j = path[-1]\n                    path.pop()\n\n                # Update the visited cells\n                visited_cells &= ~(1 << (i * len(cost[0]) + j))\n                i, j = current_pos\n                path.pop()\n                visited_cells |= 1 << (i * len(cost[0]) + j)\n\n    # Return the maximum average of the path\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def dfs(i, j, path_cost):\n        if i == n-1 and j == n-1:\n            # Base case: if we reach bottom right cell, add current cost to path_cost and check if its greater than max_cost\n            path_cost += cost[i][j]\n            if path_cost > max_cost:\n                max_cost = path_cost\n                max_path = path_cost_list[:]\n        else:\n            # Recursive case: try to go to right and then down, then to right and up, and so on until we reach bottom right cell\n            dfs(i+1, j, path_cost)\n            dfs(i, j+1, path_cost)\n\n    n = len(cost)\n    max_cost = 0\n    max_path = []\n\n    # Start from top left cell and keep expanding to check for maximum average\n    dfs(0, 0, 0)\n\n    return max_path"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # Filter the students based on height and weight\n    filtered_students = {name: student for name, student in students.items() if student[0] > h and student[1] > w}\n\n    # Return the filtered dictionary\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create an empty list to store the filtered students\n    filtered_students = []\n    # Loop through each student\n    for name, (height, weight) in students.items():\n        # Check if the student has height and weight above the minimum\n        if height > h and weight > w:\n            # Add the student to the filtered students list\n            filtered_students.append(name)\n    # Return the filtered students list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height >= h and weight >= w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name: tuple for name, height_weight in students.items() if height_weight[0] > h and height_weight[1] > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name,data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = students[name]\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Initialize an empty list to store the filtered students\n    filtered_students = []\n\n    # Iterate over the students dictionary\n    for name, data in students.items():\n        # Extract the student height and weight\n        height, weight = data\n\n        # Check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # If so, add the student to the filtered list\n            filtered_students.append(name)\n\n    # Return the filtered students list\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], num) for num in nums2):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize variables to count the number of pairs with the same value\n    count = 0\n    \n    # Loop through each pair of elements in the lists\n    for i in range(len(nums1)):\n        # Check if the current pair has the same value as the next pair in the list\n        if nums1[i] == nums2[i+1]:\n            # If the values are the same, increment the count variable\n            count += 1\n            \n    # Return the count of pairs with the same value\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    # create a dictionary to store the count of each element in each list\n    count_dict = {}\n    for i in range(len(nums1)):\n        if nums1[i] in count_dict:\n            count_dict[nums1[i]] += 1\n        else:\n            count_dict[nums1[i]] = 1\n    for i in range(len(nums2)):\n        if nums2[i] in count_dict:\n            count_dict[nums2[i]] += 1\n        else:\n            count_dict[nums2[i]] = 1\n    \n    # check if each element in the first list occurs at least twice in the second list\n    for i in range(len(nums1)):\n        if count_dict[nums1[i]] >= 2:\n            print(i)"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize the sum to 0\n    sum_of_digits = 0\n    \n    # iterate over the power until it reaches 1\n    while power > 1:\n        # get the last digit of the base\n        last_digit = base % 10\n        \n        # add the last digit to the sum\n        sum_of_digits += last_digit\n        \n        # divide the base by 10 to remove the last digit\n        base //= 10\n        \n        # decrement the power\n        power -= 1\n    \n    # add the last digit of the base to the sum\n    sum_of_digits += base\n    \n    # return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        power -= 1\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate over the digits of the base and calculate the sum\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit)\n    # Calculate the sum of the digits to the specified power\n    power_sum = sum ** power\n    # Return the power sum\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize the sum variable to 0\n    sum_digits = 0\n    # iterate through the digits of the base string and calculate the sum\n    for digit in base_str:\n        digit_int = int(digit)\n        sum_digits += digit_int ** power\n    # return the sum of digits raised to the power\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum to zero\n    total_sum = 0\n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Calculate the power of the digit to the specified power\n        power_digit_int = digit_int ** power\n        # Add the power of the digit to the sum\n        total_sum += power_digit_int\n    # Return the sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    base_str = str(base)\n    for digit in base_str:\n        result += int(digit) ** power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    num = base\n    while power > 0:\n        digit = num % 10\n        total += digit\n        num //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to a string\n    base_str = str(base)\n    # initialize the sum to zero\n    sum_digits = 0\n    # loop over all digits of the base\n    for digit in base_str:\n        # add the digit to the sum\n        sum_digits += int(digit)\n    # multiply the sum by the power\n    sum_digits *= power\n    # return the sum\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize a variable to store the sum of digits\n    digit_sum = 0\n    # Iterate through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the digit_sum\n        digit_sum += int(digit)\n    # Calculate the result by raising the digit_sum to the specified power\n    result = digit_sum ** power\n    # Return the result\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    match = re.search(pattern, text1)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    match = re.search(pattern, text1)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Regular expression pattern to match quotation marks \" \"\n    pattern = r'\"([^\"]*)\"'\n    # Use re.findall() method to extract all the matches in the text\n    matches = re.findall(pattern, text)\n    # If matches are found, return the first match\n    if matches:\n        return matches[0]\n    # If no matches are found, return an empty string\n    else:\n        return \"\""
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Find all occurrences of quotation marks \" \" in the string\n    quotations = re.findall(r'\"([^\"]*)\"', text)\n\n    # Loop through the quotations and return the values\n    values = []\n    for quotation in quotations:\n        values.append(quotation[1:-1])\n\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Extract values between quotation marks \" \" of the given string.\n\n    Args:\n        text (str): Input string.\n\n    Returns:\n        List of extracted values.\n    \"\"\"\n    pattern = r'(\"(?:[^\\\\\"]+|\\\\.)*\")'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # use regular expression to extract values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    match = re.findall(pattern, text1)\n    # remove empty strings\n    match = [x for x in match if x!= \"\"]\n    # return list of values between quotation marks\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'(?<!\\\\)\"(?:\\\\.|[^\"])*\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1  # N is the length of the input tuple minus one\n    result_tup = (test_tup[0],) * N  # create an empty tuple of length N and fill it with the first element of the input tuple\n    for i in range(1, N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(a * b for a, b in zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # Initialize a new tuple with the same length as the original tuple\n    result_tup = tuple([0] * len(test_tup))\n    \n    # Loop through the original tuple and multiply each element by the next one\n    for i in range(len(test_tup)):\n        result_tup[i] = test_tup[i] * test_tup[i+1]\n    \n    # Return the new tuple of multiplied elements\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    res_tup = ()\n    for i in range(N-1):\n        res_tup = res_tup + (test_tup[i] * test_tup[i+1],)\n    res_tup = res_tup + (test_tup[-1] * test_tup[0],)\n    return res_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+N])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # loop through the lists and add their corresponding values\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Initialize an empty list to store the sum of the two lists\n    result = []\n    # Loop through the first list and add each element to the result list\n    for i in lst1:\n        result.append(i)\n    # Loop through the second list and add each element to the result list\n    for j in lst2:\n        result.append(j)\n    # Return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i+j for i in lst1 for j in lst2]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n] and [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(g) for k, g in groupby(sorted(set(nums)))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for key, group in groupby(sorted(nums))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    unique_nums = []\n    last_num = None\n\n    for num in nums:\n        if last_num == num:\n            continue\n        else:\n            unique_nums.append(num)\n            last_num = num\n\n    return unique_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n    '''\n    # Iterate over the list and group consecutive duplicates together\n    for key, group in groupby(nums):\n        if list(group) == list(group).lstrip():\n            # If the group is all duplicates of the previous group, remove it\n            yield from key"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Remove consecutive duplicates using itertools groupby function\n    return [list(group) for key, group in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n\n    Args:\n    - nums (list): the input list\n\n    Returns:\n    - list: the filtered list\n\n    Example:\n    >>> consecutive_duplicates([1, 2, 3, 2, 1])\n    [1, 2, 3]\n    '''\n    # group the list by the last element of each group\n    groups = groupby(sorted(nums, reverse=True))\n    # iterate over each group and check if the next element is the same\n    filtered = []\n    for i, group in enumerate(groups):\n        # if the next element is the same, skip the current group\n        if i < len(groups) - 1 and groups[i+1][0] == group[0]:\n            continue\n        # otherwise, add the current group to the filtered list\n        filtered.extend(group)\n    return filtered"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [x[0] for x in groupby(enumerate(nums), lambda x: x[0] == x[1])]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(enumerate(nums)):\n        if k == 0 or g[1][1]!= nums[g[1][0]-1]:\n            yield from g"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    # Use groupby to group the list by consecutive duplicates\n    grouped_nums = groupby(enumerate(nums), lambda x: x[1] == x[0] + 1)\n    # Convert the grouped iterator to a list\n    consecutive_duplicates_list = list(grouped_nums)\n    # Loop through the list and remove the duplicates\n    for i in range(len(consecutive_duplicates_list)):\n        if len(consecutive_duplicates_list[i][0]) == 1:\n            consecutive_duplicates_list.pop(i)\n    # Return the list without duplicates\n    return [num for _, num in consecutive_duplicates_list]"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given its radius and height.\n    '''\n    A_lat = math.pi * r**2 * h\n    return A_lat"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r * h  # Formula for lateral surface area of a cone\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*r*math.tan(math.pi/6)*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi*(r**2)*h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r * r + 2 * math.pi * h * r\n    return area\n\nprint(lateralsurface_cone(2,3)) # Output: 16.594"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula to calculate lateral surface area of a cone given radius r and height h\n    area = 2 * r * math.tan(math.pi/6) * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the lateral surface area of the cone using the formula\n    # lateral surface area = pi * r^2 * h / 3\n    lateral_surface_area = math.pi * r**2 * h / 3\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi * r * h\n    return s\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi * r ** 2 * h / 3  # Calculating the lateral surface area using the formula of a cone\n    return lateral_surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'\\s+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = '., '\n    pattern = re.compile(r'[{0}]'.format(re.escape(special_chars)))\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'([^\\w\\s])', r' \\1 ', text)\n    text = re.sub(r'[^\\w\\s]+', r' : ', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[,.]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'[^\\w\\s]|_|\\.|,| ', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[^\\w\\s]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[^\\w\\s]'\n    text = re.sub(pattern, '', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[ \\.,]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = [' ', ',', '.']\n    for char in special_chars:\n        text = re.sub(char, ':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if A[mid] == x:\n            # We found the first occurrence of x\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If we reached this point, x was not found in the array\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A[0] == x:\n        return 0\n    else:\n        for i in range(1, len(A)):\n            if A[i] == x:\n                return i\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the index of the first occurrence to -1\n    index = -1\n    \n    # Iterate over the array until the index of the first occurrence is found\n    for i in range(len(A)):\n        if A[i] == x:\n            index = i\n            break\n    \n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n    \n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    n = len(A)\n    while i < n and A[i] < x:\n        i += 1\n    if i == n or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes in a sorted array A and a number x and returns the index of the first occurrence of x in A.\n    If x is not found in A, it returns -1.\n    \"\"\"\n    # Initialize the left and right pointers to the first and last indices of A respectively\n    left = 0\n    right = len(A) - 1\n    \n    # If x is not found, return -1\n    if x > A[right]:\n        return -1\n    \n    # Binary search algorithm to find the first occurrence of x\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If x is not found in A, return -1\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sublist_sum = [0]*len(arr)\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sublist_sum[i] += arr[j]*(j-i)\n    return sum(sublist_sum)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # initialize sum of products and product of first element\n    sum_prod = 0\n    prod_first = 1\n    \n    # loop through each element of the array\n    for i in range(1, len(arr)):\n        # multiply current product by previous product\n        prod = prod_first * arr[i]\n        # add current product to sum of products\n        sum_prod += prod\n        # update product of first element\n        prod_first = prod\n        \n    # return sum of products\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # initialize empty matrix to store products of sublists\n    prod_matrix = [[0] * (n + 1) for _ in range(n)]\n    \n    # base case: if n = 1, there are no sublists and sum of products is just the product of the element\n    if n == 1:\n        return arr[0] * arr[0]\n    else:\n        # fill the matrix using dynamic programming\n        for i in range(1, n + 1):\n            for j in range(i):\n                # if i > j, because we only need to consider sublists from i to j inclusive\n                if i > j:\n                    prod_matrix[i - 1][j] = arr[j] * prod_matrix[i - 1][j - 1]\n                # if i == j, because we are considering the sublist from i to j\n                else:\n                    prod_matrix[i - 1][j] = arr[j]\n        # find the sum of products of all sublists\n        result = 0\n        for i in range(n + 1):\n            result += prod_matrix[n][i]\n        return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Calculate the sum of elements of the array\n    sum_of_arr = sum(arr)\n    # Initialize the result array\n    result = []\n    # Calculate the product of each sublist\n    for i in range(1, n+1):\n        prod = 1\n        for j in range(n-i+1):\n            prod *= arr[j]\n        result.append(prod)\n    # Calculate the sum of all products\n    sum_of_products = sum(result)\n    return sum_of_arr - sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    MOD = 10**9 + 7\n    \n    # Initialize variables\n    prefix_product = [0] * n\n    suffix_product = [0] * n\n    prefix_sum = [0] * n\n    suffix_sum = [0] * n\n    \n    # Calculate prefix and suffix products\n    for i in range(n):\n        prefix_product[i] = (prefix_product[i-1] + arr[i]) % MOD\n        suffix_product[i] = (suffix_product[i+1] + arr[i]) % MOD\n    \n    # Calculate prefix and suffix sums\n    for i in range(n-1, -1, -1):\n        prefix_sum[i] = (prefix_sum[i+1] + arr[i]) % MOD\n        suffix_sum[i] = (suffix_sum[i] + arr[i]) % MOD\n    \n    # Initialize variables for subarray products\n    subarray_products = [0] * (n+1)\n    for i in range(n+1):\n        subarray_products[i] = (subarray_products[i-1] + arr[i-1]) % MOD * (subarray_products[i-2] + arr[i-2]) % MOD\n    \n    # Initialize variables for subarray sums\n    subarray_sums = [0] * (n+1)\n    subarray_sums[1] = (subarray_sums[1] + arr[0]) % MOD\n    \n    # Calculate subarray sums and products\n    for i in range(2, n+1):\n        subarray_sums[i] = (subarray_sums[i] + subarray_sums[i-1] + arr[i-1]) % MOD\n        subarray_products[i] = (subarray_products[i] - subarray_products[i-1] + (arr[i-1] * arr[i-2])) % MOD\n    \n    # Calculate sum of products of all possible sublists\n    result = 0\n    for i in range(n+1):\n        for j in range(i, n+1):\n            if j == n+1:\n                break\n            result = (result + subarray_products[j]) % MOD\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function takes in a list of integers as an argument and returns the sum of products of all possible sublists.\n\n    Input: A list of integers.\n\n    Output: The sum of products of all possible sublists.\n\n    Example:\n\n    >>> sum_Of_Subarray_Prod([1, 2, 3, 4, 5])\n    20\n\n    \"\"\"\n\n    # Initialize the sum and the product variables\n    sum_of_products = 0\n    product = 1\n\n    # Iterate through all possible sublists of the given list\n    for i in range(len(arr)):\n        # Update the product with the current element in the sublist\n        product *= arr[i]\n\n        # Update the sum with the product of the sublist\n        sum_of_products += product\n\n        # Reset the product variable for the next sublist\n        product = 1\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = arr[0]\n    for i in range(2, n + 1):\n        dp[i] = arr[i - 1] * dp[i - 1] + arr[i - 2] * dp[i - 2]\n    return sum(dp)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [[1]*n for _ in range(n)]\n\n    for i in range(1, n):\n        for j in range(i):\n            dp[i][j] = arr[i]*dp[i-1][j] + arr[j]*dp[i-1][j-1]\n\n    sum_ = 0\n    for i in range(n):\n        sum_ += dp[n-1][i]\n\n    return sum_"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n\n    # Using dynamic programming approach to find sum of products of all subarrays\n    for i in range(n):\n        for j in range(i, n):\n            # Calculate the product of all elements in the subarray\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            # Add the product of the subarray to the result\n            result += prod\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    subarray_sum = 0\n    product = 1\n    result = 0\n    for i in range(n):\n        subarray_sum += arr[i]\n        product *= arr[i]\n        if i >= 2:\n            result += product - subarray_sum\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    n = n ^ (1 << (len(bin(n)[2:]) - 1))  # Toggle the last bit\n    n = n ^ (1 << (len(bin(n)[2:]) - 2))  # Toggle the second-to-last bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Get the last two bits\n    last_two_bits = n & 0b11\n\n    # Get the first and last bits\n    first_bit = n & 0b00000001\n    last_bit = n & 0b10000000\n\n    # Toggle the middle bits\n    middle_bits = first_bit ^ last_bit\n\n    # Combine the middle bits with the last two bits\n    result = middle_bits | last_two_bits\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Get the length of the binary representation of n\n    length = len(bin(n)[2:])\n\n    # Get the middle index of the binary representation of n\n    middle_index = length // 2\n\n    # Create a bitmask of 0s and 1s with length+2 bits to toggle the middle bits\n    bitmask = (1 << (length + 2)) - 1\n\n    # Create a variable to store the result\n    result = n ^ bitmask\n\n    # Return the result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Check if the number is odd or even\n    if n & 1 == 0:\n        # If even, set middle bits to 1\n        n = n | (1 << 1) | (1 << 7)\n    else:\n        # If odd, set middle bits to 0\n        n = n & ~(1 << 1) & ~(1 << 7)\n    \n    # Return the toggled number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    # find the first and last bits of the number\n    first_bit = (n & 1)\n    last_bit = (n & (1 << (n.bit_length() - 1))) >> (n.bit_length() - 1)\n\n    # toggle first and last bits\n    toggled_bits = (n & (~(1 << first_bit) & ~(1 << last_bit))) | ((~n) & (1 << first_bit) & (1 << last_bit))\n\n    return toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize two variables to store the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (1 << 31)\n    \n    # Toggle the middle bits of the number except for the first and last bits\n    middle_bits = n ^ first_bit ^ last_bit\n    \n    # Combine the first and the last bits of the number with the middle bits\n    final_number = first_bit << 31 | middle_bits | last_bit\n    \n    return final_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Initialize variables\n    bit1 = 0\n    bit2 = 0\n\n    # Extract the first and last bits\n    bit1 = n & 1\n    bit2 = n & (2**32 - 1)\n\n    # Toggle bits of the number\n    n = n ^ (1 << 1) ^ (2**32 - 1)\n\n    # Combine the first and last bits with the toggled bits\n    n = bit1 ^ (n ^ bit2)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. \n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the first and last bit positions\n    first_bit = bin(n & 1)[2:].index('1')\n    last_bit = bin(n & (-n & 1))[2:].index('1')\n\n    # toggle the middle bits\n    mask = (1 << (last_bit - first_bit - 2)) - 1\n    m = n ^ (n & mask)\n    return m"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Initialize the first and last bits as 0\n    first_bit = (n & 1)\n    last_bit = ((n >> 31) & 1)\n\n    # Initialize the middle bits as 1\n    middle_bits = ((n & ((1 << 31) | (1 << (31 - 2)))) >> 1)\n\n    # Toggle the middle bits and combine with the first and last bits\n    result = (first_bit ^ middle_bits) + ((first_bit & last_bit) << 1)\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Get the first and last bits of the given number\n    first_bit = n & 1\n    last_bit = n & (2**32-1)\n    \n    # XOR the first and last bits to get the middle bits\n    middle_bits = first_bit ^ last_bit\n    \n    # XOR the middle bits with the given number to get the final number\n    final_number = n ^ middle_bits\n    \n    return final_number"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Args:\n    a (list): a list of sorted integers\n    x (int): the value to be inserted\n\n    Returns:\n    int: the left insertion point for x in a\n\n    \"\"\"\n    # using bisect module to find the left insertion point\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx = bisect.bisect_left(a, x)\n    if idx == len(a):\n        return len(a)\n    elif idx!= 0 and a[idx-1] == x:\n        return idx-1\n    else:\n        return idx"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    This function takes a sorted list a and a value x and returns the index of the left insertion point for x in a.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif index!= 0 and a[index - 1]!= x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Create a sorted list of the elements in a\n    sorted_list = sorted(a)\n    # Find the left index at which to insert x\n    left_index = bisect.bisect_left(sorted_list, x)\n    # Return the left index\n    return left_index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 0\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    # Base case\n    if n == 1:\n        return 0\n\n    # Recursive case\n    return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nprint(geometric_sum(5))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nn = int(input(\"Enter a value of n: \"))\n\nprint(\"The geometric sum of\", n, \"-1 is:\", geometric_sum(n))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # If n is 1, return 1\n    if n == 1:\n        return 1\n\n    # If n is greater than 1, multiply the last number by 2^n - 1\n    else:\n        return 2 * geometric_sum(n - 1) + 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # First triangular number with n digits is 10^n-1\n    index = int(math.log10(10**n-1))\n    # Initialize the smallest triangular number to the smallest possible triangular number\n    smallest = 10**index-1\n    # Initialize the smallest triangular number with n digits to the smallest possible triangular number with n digits\n    smallest_n = smallest * 10**(n-1)\n    # Loop until the smallest triangular number with n digits is less than the smallest possible triangular number\n    while smallest_n < smallest:\n        # Increment the index and find the next triangular number with n digits\n        index += 1\n        next_smallest = int(math.log10(10**index-1)) * 10**(n-1)\n        # Update the smallest triangular number if the next triangular number with n digits is lesser\n        if next_smallest < smallest:\n            smallest = next_smallest\n    return index - 1 # Return the index of the smallest triangular number with n digits\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    max_triangular_number = 10**(n-1)\n    \n    for i in range(1,max_triangular_number+1):\n        if i < max_triangular_number:\n            triangular_number = i*i\n            if triangular_number < max_triangular_number:\n                index_triangular_number = math.ceil(triangular_number/max_triangular_number)\n                return index_triangular_number\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Calculate the sum of the first n digits\n    sum_of_first_n_digits = n * (n + 1) // 2\n    \n    # Check each triangular number with n digits\n    for i in range(1, int(math.sqrt(sum_of_first_n_digits)) + 1):\n        for j in range(1, int(math.sqrt(sum_of_first_n_digits)) + 1):\n            triangular_number = i * (i + 1) + j * (j + 1)\n            # Check if the sum of its first n digits is equal to n\n            if triangular_number == n * (n + 1) // 2:\n                return n - 1 - sum_of_first_n_digits // triangular_number"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # Initialize a variable to store the smallest triangular number with n digits\n    smallest = math.pow(10, n-1)\n\n    # Initialize a variable to store the current triangular number\n    current = smallest\n\n    # Iterate through the range of indices from 0 to n-1\n    for i in range(n-1): \n        # Calculate the next triangular number by adding the current triangular number to the previous smallest triangular number\n        next_triangular = current + smallest\n        # If the next triangular number is smaller than the smallest triangular number with n digits, update the smallest triangular number with n digits to the next triangular number\n        if next_triangular < smallest: \n            smallest = next_triangular\n        # Update the current triangular number to the next triangular number\n        current = next_triangular\n\n    # Return the index of the smallest triangular number with n digits\n    return math.log10(smallest) + 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    if n == 1:\n        return 0\n    \n    triangular_numbers = []\n    for i in range(1, n+1):\n        triangular_numbers.append(math.factorial(i))\n    \n    smallest_triangular_number = min(triangular_numbers)\n    \n    index_of_smallest_triangular_number = triangular_numbers.index(smallest_triangular_number)\n    \n    return index_of_smallest_triangular_number"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    index = 0\n    triangular_num = 1\n    while triangular_num < (10**n):\n        index += 1\n        triangular_num = (n * (n + 1)) // 2\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # initialize the smallest triangular number and its index\n    smallest_triangular = 10**(n-1)\n    index = n-1\n\n    # loop until we find the smallest triangular number with n digits\n    while True:\n        # find the next triangular number\n        triangular = smallest_triangular + index + 1\n        \n        # check if the triangular number has n digits\n        if math.log10(triangular).is_integer():\n            break\n        \n        # increment the index and update the smallest triangular number\n        index += 1\n        smallest_triangular += smallest_triangular\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Define a function to check if a number is triangular\n    def is_triangular(num):\n        return (num * (num + 1)) // 2 == num\n    \n    # Define a function to find the index of the smallest triangular number with n digits\n    def find_min_triangular(n):\n        # Define a list to store the smallest triangular number with n digits\n        min_triangular_list = []\n        \n        # Define a variable to store the smallest triangular number with n digits\n        min_triangular = None\n        \n        # Define a variable to store the current number\n        current_num = 0\n        \n        # Loop through all numbers from 1 to n\n        for i in range(1, n+1):\n            \n            # Append the current number to the list\n            min_triangular_list.append(current_num)\n            \n            # Find the next number in the sequence\n            current_num = (current_num * (current_num + 1)) // 2\n            \n            # If the current number is triangular and smaller than the smallest triangular number, update the smallest triangular number\n            if is_triangular(current_num) and (current_num < min_triangular or min_triangular is None):\n                min_triangular = current_num\n        \n        # Return the index of the smallest triangular number with n digits\n        return min_triangular_list\n    \n    # Return the index of the smallest triangular number with n digits\n    return find_min_triangular(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    T = [0] * (n+1)\n    T[0], T[1] = 0, 1\n\n    for i in range(2, n+1):\n        T[i] = T[i-1] + T[i-2]\n\n    return T[n]"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Calculating the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Calculating the index of the smallest triangular number with n digits\n    index = math.factorial(2*n - 1) // (factorial * math.factorial(n - 1) * math.factorial(2*n - 3))\n\n    return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(len(test_tup)-1):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create a dictionary to store the key-value pairs\n    my_dict = {}\n    # iterate through the tuple\n    for i in range(0, len(test_tup), 2):\n        # add the key-value pair to the dictionary\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    # initialize an empty dictionary\n    my_dict = {}\n    # loop through each element in the tuple\n    for i in range(len(test_tup)):\n        # if the element is a string or integer, add it to the dictionary as a key-value pair\n        if isinstance(test_tup[i], (str, int)):\n            my_dict[test_tup[i]] = test_tup[i+1]\n        # if the element is a tuple, recursively call the function on that tuple and add the result to the dictionary\n        elif isinstance(test_tup[i], tuple):\n            my_dict.update(tuple_to_dict(test_tup[i]))\n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    dict_ = {}\n    for i in range(0, len(test_tup), 2):\n        dict_[test_tup[i]] = test_tup[i+1]\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_result = {}\n    for i in range(0, len(test_tup)-1, 2):\n        dict_result[test_tup[i]] = test_tup[i+1]\n    return dict_result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_value_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key_value_dict[test_tup[i]] = test_tup[i+1]\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result = {}\n    count = 0\n    for i in test_tup:\n        result[i] = test_tup[count + 1]\n        count += 1\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[2:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        return False if s[0]!= s[-1] else all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return s[0]!= s[0]\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters are same,\n    else False.\n    \"\"\"\n    # Check if the length of the string is 1 or 0\n    if len(s) <= 1:\n        return True\n    \n    # Get the first character of the string\n    first_char = s[0]\n    \n    # Loop through the rest of the string\n    for char in s[1:]:\n        # If the current character is not the same as the first character, return False\n        if char!= first_char:\n            return False\n    \n    # If all the characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    elif len(s) > 1:\n        if s[0] == s[-1]:\n            return all_Characters_Same(s[1:-1])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string s as input and returns True if all the characters in the string are same and False otherwise.\n    '''\n    # If the string is empty or only contains spaces, return True\n    if not s or s.isspace():\n        return True\n    \n    # Check if the first and last characters of the string are same\n    if s[0] == s[-1]:\n        # Check if the rest of the characters are same\n        for i in range(1, len(s)-1):\n            if s[i]!= s[-1]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)*side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    s = (side**2 + side**2 + side**2 + side**2)/4\n    # Calculate the area using Heron's formula\n    a = math.sqrt(s*(s-side)*(s-side)*(s-side))\n    return a"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2)/4\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    half_perimeter = side / 2\n    area = math.sqrt(3) / 4 * half_perimeter**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    area = math.sqrt(3) / 4 * side * side * side\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    s = (side ** 2) / 12\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2 + side**2 + side**2 + side**2) ** 0.25\n    return 6*s"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the sine of the angle between the three edges\n    cos_angle = (side * side + side * side + side * side + side * side) / (4 * side * side)\n\n    # calculate the area of the tetrahedron\n    area = math.sqrt(1 + cos_angle) - math.sqrt(1 - cos_angle)\n\n    # return the area of the tetrahedron\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)/4 * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n\n    Args:\n    side (float): length of one of the three sides of the tetrahedron.\n\n    Returns:\n    float: the area of the tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** 0.5\n\n    # Calculate the area of the tetrahedron using Heron's formula\n    return (1 / 6) * s * (s - side) * (s - side) * (s - side)"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function takes a list and a number m and rotates the list to the right by m items.\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    lst[0:m] = lst[m:n] + lst[0:m]\n    return lst[0:n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(lst, n):\n    '''\n    Rotate a given list by specified number of items to the right direction.\n    '''\n    # Convert the list to a deque so that we can use its right rotate method\n    d = deque(lst)\n    # Rotate the list by n items\n    for _ in range(n):\n        d.rotate(-1)\n    # Convert the deque back to a list\n    return list(d)"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # if the number of items to be rotated is greater than the total number of items in the list, then return the list as it is\n    if m > n:\n        return list\n    # if the number of items to be rotated is zero, then return the list as it is\n    if m == 0:\n        return list\n    # if the number of items to be rotated is less than zero, then rotate the list to the left by the absolute value of the number of items to be rotated\n    if m < 0:\n        m = n + m\n    # initialize two pointers - one at the start and one at the end of the list\n    i = 0\n    j = n - 1\n    # move the pointer i by m steps to the right\n    while i < m:\n        i = i + 1\n        j = j - 1\n    # swap the values at the pointers i and j\n    temp = list[i]\n    list[i] = list[j]\n    list[j] = temp\n    # rotate the list by one step to the left\n    for i in range(m, n):\n        list[i - m] = list[i]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m %= n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function takes a list and a number m as input.\n    The function rotates the list by m number of items to the right direction.\n    \"\"\"\n    # calculate the length of the list\n    n = len(list)\n    # rotate the list by m number of items\n    for i in range(m):\n        temp = list[0]\n        for j in range(n-1):\n            list[j] = list[j+1]\n        list[n-1] = temp\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # Check if m is greater than n\n    if m > n:\n        return list\n    # If m is less than or equal to n/2, rotate m items to the left\n    if m <= n/2:\n        for i in range(m):\n            list.append(list.pop(0))\n        return list\n    # If m is greater than n/2, rotate (n-m) items to the left and append m items to the right\n    else:\n        for i in range(n-m):\n            list.append(list.pop(0))\n        return list + list[:m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[m:], list[:m] = list[:m], list[m:]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m %= n  # Find the remainders of m and n\n    if m == 0:\n        return list\n    else:\n        # Reverse the list from 0 to m-1\n        list = list[n - m:] + list[:n - m]\n        return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(lst, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Create a copy of the list\n    list_copy = lst[:]\n    # Determine the number of rotations to be done\n    n = len(list_copy)\n    m = m % n\n    # Reverse the first half of the list\n    list_copy[:m] = list_copy[:m][::-1]\n    # Reverse the second half of the list\n    list_copy[m:] = list_copy[m:][::-1]\n    # Concatenate the two reversed halves of the list\n    result = list_copy[:m] + lst + list_copy[m:]\n    return result"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    none_found = False\n    for item in test_tup:\n        if item is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(elem is None for elem in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_value = None  # define a variable to store the none value\n    \n    # loop through each element of the tuple\n    for element in test_tup:\n        # check if the element is equal to the none value\n        if element is none_value:\n            # if yes, return True, indicating that there is at least one none value in the tuple\n            return True\n    \n    # if no none value is found in the tuple, return False\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits = [int(d) for d in str(num)]\n        for digit in digits:\n            if digit not in digits:\n                return False\n        return True\n    \n    return filter(lambda x: is_divisible_by_digits(x), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num):\n        digits = [int(digit) for digit in str(num)]\n        return all(digit % 2 == 0 for digit in digits)\n    return list(filter(is_divisible, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(map(lambda y: x % y == 0, [int(digit) for digit in str(x)])) and int(x) >= startnum and int(x) <= endnum, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_nums = filter(lambda x: all(int(d) % i == 0 for i in range(1, 10)), range(10))\n    return [num for num in range(startnum, endnum + 1) if all(int(str(num)[i]) % i == 0 for i in range(len(str(num))))]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # create a lambda function to check if a number is divisible by any digit in its string representation\n    is_divisible = lambda x: all(int(i) % int(x[i]) == 0 for i in range(len(x)))\n\n    # iterate through each number in the range and check if it is divisible by every digit in its string representation\n    for num in range(startnum, endnum+1):\n        if is_divisible(str(num)):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible(num):\n        return all(d in str(num) for d in digits)\n\n    digits = set(str(startnum).split())\n    divisible_numbers = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible(num):\n            divisible_numbers.append(num)\n\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = list(str(endnum))\n    return filter(lambda x: all(int(digit) % int(digit) == 0 for digit in x), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two parameters, startnum and endnum, which are the range of numbers to search for numbers within.\n    It then iterates through each number in the range and checks if it is divisible by every digit in the number.\n    If a number is divisible by every digit, it is added to a list of divisible numbers.\n    Finally, the function returns the list of divisible numbers.\n    \"\"\"\n    divisible_list = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(digit in digits for digit in digits):\n            divisible_list.append(num)\n    return divisible_list"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(d) % int(d) == 0 for d in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r*r*math.pi*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function calculates the area of a sector given the radius and angle.\n    The function returns None if the angle is greater than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Convert angle to radians\n    a = math.radians(a)\n    \n    # Check if angle is valid\n    if a > math.pi * 2:\n        print(\"Error: angle must be less than 360 degrees\")\n        return None\n    \n    # Calculate area using formula: area = pi * r^2 * sin(a/2)\n    area = math.pi * r**2 * math.sin(a/2)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <= 360 and a >= 0:\n        area = math.pi * (r ** 2) * a / 360\n        return area\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r*r*math.pi*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if the angle is within the valid range\n    if a > 360 or a < 0:\n        return None\n    else:\n        # Calculate the area of the sector\n        area = math.pi * r * r * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * (r ** 2) * a / 360"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Initialize LCS matrix\n    L = [[0 for j in range(len(Z)+1)] for i in range(len(X)+1)]\n\n    # Fill LCS matrix\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Z)+1):\n            if X[i-1] == Z[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Extract LCS\n    i = len(X)\n    j = len(Z)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Z[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Function to find longest common subsequence of three strings\n    def lcs3(x, y, z):\n        m, n, o = len(x), len(y), len(z)\n        dp = [[[0 for j in range(o+1)] for i in range(m+1)] for k in range(n+1)]\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                for k in range(1, o+1):\n                    if x[i-1] == y[j-1] and y[j-1] == z[k-1]:\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                    else:\n                        dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n        return dp[m][n][o]\n    \n    # Find the length of LCS of X, Y and Z\n    l = lcs3(X, Y, Z)\n    \n    # Find all LCS subsequences of X, Y and Z\n    lcs_list = []\n    for i in range(len(X)+1):\n        for j in range(len(Y)+1):\n            for k in range(len(Z)+1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs_list.append('')\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    lcs_list.append(X[i-1])\n                else:\n                    lcs_list.append(max(lcs_list[i-1], lcs_list[j], lcs_list[k]))\n                    \n    # Find the length of all LCS subsequences\n    len_lcs_list = [len(lcs) for lcs in lcs_list]\n    \n    # Find the LCS subsequence with maximum length\n    max_lcs = lcs_list[len_lcs_list.index(max(len_lcs_list))]\n    \n    return max_lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # creating a 2D table to store lengths of LCS of substrings\n    L = [[0] * (p+1) for i in range(m+1)]\n\n    # filling the table in bottom up fashion\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # finding the starting index of each LCS\n    i = m\n    j = n\n    k = p\n\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        elif L[i][j-1][k] == L[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # reversing the LCS and returning it as a string\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of LCS of substring ending at i and j\n    L = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # Fill the table in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # Print the length of LCS\n    lcs = \"\"\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        elif L[i][j-1][k] == L[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # To store the length of LCS \n    n = len(X) \n    m = len(Y) \n    p = len(Z) \n\n    # To create a 2D table to store lengths of LCS of subproblems \n    L = [[0 for j in range(p+1)] for i in range(n+1)] \n\n    # Fill L[][] in bottom up manner. Note that L[i][0] and L[0][j] are already filled \n    for i in range(1, n+1): \n        for j in range(1, p+1): \n\n            # If the last characters of X and Z are same, then LCS of X[0..i-1] and Z[0..j-1] is LCS of X[0..i-1] and Y[0..j-1] + L[i-1][j-1] \n            if X[i-1] == Z[j-1]: \n                L[i][j] = L[i-1][j-1] + 1 \n\n            # If last characters of X and Z are not same, then length of LCS of X[0..i-1] and Z[0..j-1] is maximum of L[i-1][j] and L[i][j-1] \n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n\n    # To store the lcs string \n    lcs = \"\" \n\n    # Backtracking to construct the lcs string \n    i = n \n    j = p \n    while i > 0 and j > 0: \n        if X[i-1] == Z[j-1]: \n            lcs = X[i-1] + lcs \n            i -= 1 \n            j -= 1 \n        elif L[i-1][j] > L[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    return lcs "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. \n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # creating a 3D table to store lengths of LCS for all prefixes of X, Y and Z\n    LCS = [[[0 for j in range(p+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # filling the table to find lengths of LCS for all prefixes of X, Y and Z\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                    LCS[i][j][k] = LCS[i-1][j][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    LCS[i][j][k] = LCS[i-1][j][k]\n                else:\n                    LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i-1][j-1][k-1])\n\n    # backtracking to find LCS\n    i = m\n    j = n\n    k = p\n\n    lcs_string = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n            lcs_string = X[i-1] + lcs_string\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n            j -= 1\n        else:\n            if LCS[i-1][j][k] == LCS[i-1][j][k-1] and LCS[i-1][j][k] == LCS[i][j-1][k]:\n                i -= 1\n            elif LCS[i-1][j][k] == LCS[i][j-1][k-1]:\n                j -= 1\n            else:\n                k -= 1\n\n    return lcs_string"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n\n    # Step 1: Find the length of the longest string in the three sequences\n    n = max(len(X), len(Y), len(Z))\n\n    # Step 2: Create a 2D matrix to store the length of the LCS of all possible substrings\n    L = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # Step 3: Fill the matrix using dynamic programming\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            elif X[i-1] == Z[j-1] and X[i-1]!= Y[j-1]:\n                L[i][j] = L[i-1][j]\n            elif Y[j-1] == Z[i-1] and Y[j-1]!= X[i-1]:\n                L[i][j] = L[i][j-1]\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Step 4: Backtrack the LCS by using the matrix\n    i, j = n, n\n    lcs = \"\"\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n\n    # Function to find length of the longest common subsequence\n    def longest_common_subsequence(X, Y): \n        n = len(X) \n        m = len(Y) \n\n        # create a 2D table to store lengths of longest common suffixes \n        L = [[0] * (m+1) for _ in range(n+1)] \n\n        # Fill in L[i][j] with length of LCS of X[:i] and Y[:j] \n        for i in range(n+1): \n            for j in range(m+1): \n                if i == 0 or j == 0:\n                    L[i][j] = 0\n                elif X[i-1] == Y[j-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1])\n\n        # print LCS lengths for debugging purposes \n        # print(L)\n\n        return L[n][m]\n\n    # Find lengths of LCS for X and Y \n    len_x = longest_common_subsequence(X, Y) \n    len_y = longest_common_subsequence(Y, Z) \n\n    # Find the length of LCS for X, Y, and Z \n    len_z = longest_common_subsequence(X, Z) \n\n    # Find the length of LCS for X and Y \n    len_xy = longest_common_subsequence(X, Y) \n\n    # print LCS lengths for debugging purposes \n    # print(\"len_x:\", len_x) \n    # print(\"len_y:\", len_y) \n    # print(\"len_z:\", len_z) \n    # print(\"len_xy:\", len_xy)\n\n    # Find the LCS of X and Y \n    lcs_x_y = X[:len_x] \n\n    # Find the LCS of Y and Z \n    lcs_y_z = Y[:len_y] \n\n    # Find the LCS of X and Z \n    lcs_x_z = X[:len_z] \n\n    # Find the LCS of X and Y and Y and Z \n    lcs_xy_yz = X[:len_xy] \n\n    # print LCS for debugging purposes \n    # print(\"lcs_x_y:\", lcs_x_y) \n    # print(\"lcs_y_z:\", lcs_y_z) \n    # print(\"lcs_x_z:\", lcs_x_z) \n    # print(\"lcs_xy_yz:\", lcs_xy_yz)\n\n    # Return the longest common subsequence of the three given strings \n    return max(lcs_x_y, lcs_y_z, lcs_x_z, lcs_xy_yz)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n\n    # Function to find length of LCS of two strings\n    def lcs_len(x, y):\n        m, n = len(x), len(y)\n        L = [[0 for j in range(n + 1)] for i in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    L[i][j] = 0\n                elif x[i - 1] == y[j - 1]:\n                    L[i][j] = L[i - 1][j - 1] + 1\n                else:\n                    L[i][j] = max(L[i - 1][j], L[i][j - 1])\n        return L[m][n]\n\n    # Function to find LCS of three strings using LCS of two strings\n    def lcs_of_two_strings(x, y):\n        m, n = len(x), len(y)\n        L = [[0 for j in range(n + 1)] for i in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    L[i][j] = 0\n                elif x[i - 1] == y[j - 1]:\n                    L[i][j] = L[i - 1][j - 1] + 1\n                else:\n                    L[i][j] = max(L[i - 1][j], L[i][j - 1])\n        return L[m][n]\n\n    # Function to find LCS of three strings\n    def lcs_three_strings(x, y, z):\n        m, n, p = len(x), len(y), len(z)\n        L = [[[0 for j in range(p + 1)] for k in range(n + 1)] for i in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                for k in range(p + 1):\n                    if i == 0 or j == 0 or k == 0:\n                        L[i][j][k] = 0\n                    elif x[i - 1] == z[k - 1]:\n                        L[i][j][k] = L[i - 1][j][k - 1] + 1\n                    elif y[j - 1] == z[k - 1]:\n                        L[i][j][k] = L[i][j - 1][k - 1]\n                    else:\n                        L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n        return L[m][n][p]\n\n    # Find length of LCS of X, Y and Z\n    l1 = lcs_len(X, Y)\n    l2 = lcs_len(Y, Z)\n    l3 = lcs_len(X, Z)\n\n    # Find LCS of X, Y and Z\n    L1 = lcs_of_two_strings(X, Y)\n    L2 = lcs_of_two_strings(Y, Z)\n    L3 = lcs_of_two_strings(X, Z)\n\n    # Find LCS of X, Y and Z\n    LCS = lcs_three_strings(X, Y, Z)\n\n    # Print lengths of LCS\n    print(\"Length of LCS of X and Y is\", l1)\n    print(\"Length of LCS of Y and Z is\", l2)\n    print(\"Length of LCS of X and Z is\", l3)\n\n    # Print LCS\n    for i in range(len(X) + 1):\n        print(\"X\" * i)\n    for i in range(len(Y) + 1):\n        print(\"Y\" * i)\n    for i in range(len(Z) + 1):\n        print(\"Z\" * i)\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            for"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp = [[0 for j in range(p+1)] for i in range(m+1)]\n\n    # populate dp table in bottom-up manner\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # backtrack to find the longest common subsequence\n    lcs = \"\"\n    i = m\n    j = p\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.sub(r'\\b[A-Z][a-z]+\\b', r'\\1\\ ', str1)\n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Remove all non-word characters except spaces from the string\n    str1 = re.sub(r'[^\\w\\s]', '', str1)\n    # Split the string into a list of words\n    words = str1.split()\n    # Loop through each word and capitalize it if it starts with a capital letter\n    for i in range(len(words)):\n        word = words[i]\n        if word[0].isupper():\n            words[i] = word.capitalize()\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n\n    # split the string by spaces\n    words = str1.split()\n\n    # iterate through the words and replace any starting with capital letters with a space\n    for i in range(len(words)):\n        # check if the first character of the word is a capital letter\n        if words[i][0].isupper():\n            # replace the word with a space\n            words[i] ='' + words[i]\n\n    # join the words with spaces\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # find all the capital words in the string\n    cap_words = re.findall(r'\\b[A-Z]\\w*\\b', str1)\n    # join all the capital words with spaces\n    result =''.join(cap_words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    for i in range(len(words)):\n        if words[i][0].isupper() and i!= 0:\n            words[i] ='' + words[i]\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Define a regular expression to match capital letters\n    pattern = re.compile('([A-Z][a-z]+)')\n\n    # Split the string into words\n    words = pattern.findall(str1)\n\n    # Join the words with spaces between them\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # use regular expressions to match capital words\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    # replace the matched words with spaces\n    return re.sub(pattern, r' \\1', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    str1 = re.sub(r'\\b(\\w)(\\w*)\\b', r'\\1 \\2', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    # Split the string into words using regular expressions\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Join the words back together with spaces in between\n    return''.join(words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings of numbers and sorts them numerically.\n    \"\"\"\n    # Split the list of strings into a list of lists, where each inner list contains one string of numbers\n    nums_list = [[s] for s in nums_str]\n\n    # Convert each list of numbers into an integer using the int() function\n    for i in range(len(nums_list)):\n        nums_list[i] = [int(s) for s in nums_list[i]]\n\n    # Sort the list of integers using the sorted() function\n    nums_list.sort()\n\n    # Convert each sorted list of integers back into a string and return the final result\n    return [''.join(str(n)) for n in nums_list]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    # Convert all numbers in the list to float values\n    nums = [float(x) for x in nums_str]\n    # Sort the list numerically\n    nums.sort()\n    # Convert the sorted list back to strings\n    sorted_nums = [str(x) for x in nums]\n    # Return the sorted list of strings\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = [float(num) for num in nums_str]\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically. \n    \"\"\"\n    num_list = []\n    for num_str in nums_str:\n        num_list.append(float(num_str))\n    num_list.sort()\n    return num_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings as input and sorts it in ascending order of numeric strings.\n    '''\n    nums = []\n    for s in nums_str:\n        if s.isdigit():\n            nums.append(int(s))\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # split the strings into individual numbers\n    nums = [int(num) for num in nums_str]\n    # sort the numbers in ascending order\n    nums.sort()\n    # convert the sorted numbers back into strings and join them into a single string\n    sorted_nums_str = ''.join(str(num) for num in nums)\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    # convert all strings to float\n    nums_float = [float(num) for num in nums_str]\n    # sort the list in ascending order\n    nums_float.sort()\n    # convert the sorted list back to strings\n    nums_str_sorted = [str(num) for num in nums_float]\n    return nums_str_sorted"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = []\n    for s in nums_str:\n        try:\n            num = float(s)\n            nums.append(num)\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x.replace(',', '')))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_tup:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return tuple(sum(a) for a in zip(test_list, test_tup))"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    \n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # add the tuple to the list\n    test_list.append(test_tup)\n\n    # return the modified list\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n\n    parent = (i - 1) // 2\n    if arr[parent] > arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, parent)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i >= len(arr):\n        return True\n\n    if arr[i] > arr[2*i+1]:\n        return False\n    else:\n        return check_min_heap_helper(arr, 2*i+1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr) // 2:\n        return True\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    if left_child < len(arr) and arr[left_child] > arr[i]:\n        return False\n    if right_child < len(arr) and arr[right_child] > arr[i]:\n        return False\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n\n    if i < 0:\n        return False\n\n    if arr[i] < arr[i+1]:\n        return False\n\n    return check_min_heap_helper(arr, i+1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] < arr[2*i+1] and arr[i] < arr[2*i+2]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) % 2 == 0:\n        return False\n    return check_min_heap_helper(arr, 0)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    \n    if arr[i] < arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        # if the array is of even length, we can perform the following check\n        return arr[i] >= arr[2*i+1]\n    else:\n        # if the array is of odd length, we need to perform a better check\n        return arr[i] >= min(arr[2*i+1], arr[2*i+2])"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0:\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if arr[i] > arr[left] or arr[i] > arr[right]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    elif right < len(arr) and arr[right] < arr[i]:\n        return False\n    else:\n        return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    \n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i < 1:\n        return True\n\n    # Compare the current node with its children\n    if arr[i] < min(arr[2*i], arr[2*i+1]):\n        return False\n\n    # Recursively call the function for the left child\n    return check_min_heap_helper(arr, 2*i) and check_min_heap_helper(arr, 2*i+1)\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    # Call the helper function for the root node\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    \n    # Initialize variables\n    jacobsthal_count = 0\n    jacobsthal_number = 0\n\n    # Check if n is valid\n    if n <= 0:\n        return \"Invalid input\"\n\n    # Check if n is 0 or 1\n    elif n == 1:\n        return 1\n\n    # Calculate the nth jacobsthal number\n    else:\n        for i in range(2, n+1):\n            jacobsthal_count += 1\n            jacobsthal_number = (jacobsthal_count**2) + (jacobsthal_count - 1)\n\n        return jacobsthal_number\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal = [0, 1]\n    lucas = [1, 1]\n\n    for i in range(2, n+1):\n        next_jac = (jacobsthal[i-1] + lucas[i-1]) % 10\n        next_luc = lucas[i-1] + 1\n        jacobsthal.append(next_jac)\n        lucas.append(next_luc)\n\n    return jacobsthal[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_num_list = [0, 1, 1]\n    for i in range(2, n):\n        jacobsthal_num_list.append(jacobsthal_num_list[-1] + jacobsthal_num_list[-2])\n    return jacobsthal_num_list[n-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize the first two numbers in the series\n    a, b = 0, 1\n\n    # Calculate the nth number in the series\n    for i in range(n):\n        a, b = b, a + b\n\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob = 1\n        lucas = 1\n        for i in range(1, n+1):\n            jacob = (jacob + lucas) % 10\n            lucas = (lucas + jacob) % 10\n        return lucas"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + (2 * jacobsthal_num(n-2))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ \n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n-1)) + (2 * jacobsthal_num(n-2)) - jacobsthal_num(n-3)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Returns the nth Jacobsthal number.\n    \"\"\"\n    jacobsthal_numbers = [1, 1]\n    while len(jacobsthal_numbers) < n:\n        new_numbers = []\n        for i in range(len(jacobsthal_numbers)):\n            new_numbers.append(jacobsthal_numbers[i] + jacobsthal_numbers[i+1])\n        jacobsthal_numbers = new_numbers\n    return jacobsthal_numbers[n-1]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize a list to store the minimum k records\n    min_k_list = []\n\n    # Iterate through the list and append the first k elements of the sorted list to the min_k_list\n    for i in range(min(K, len(test_list))):\n        min_k_list.append(test_list[i][0])\n\n    # Return the list of minimum k records\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_val = float('inf')\n    count = 0\n    for i in range(len(test_list)):\n        if count < K:\n            if test_list[i][1] < min_val:\n                min_val = test_list[i][1]\n                count += 1\n        else:\n            break\n    return min_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    # sort the list of tuples by value in ascending order\n    test_list.sort(key=lambda x: x[1])\n\n    # initialize variables to store the minimum k records and their values\n    min_k_records = []\n    min_k_values = []\n\n    # iterate over the sorted list of tuples and find the minimum k records\n    for i in range(K):\n        # find the current minimum record\n        min_record = test_list[i]\n\n        # check if the minimum value has not been seen before\n        if min_record[1] not in min_k_values:\n            min_k_records.append(min_record)\n            min_k_values.append(min_record[1])\n\n    # return the minimum k records and their values\n    return min_k_records, min_k_values"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sorting the tuple list based on the second element\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Finding the minimum k records\n    count = 0\n    for i in range(len(sorted_list)):\n        if count == K:\n            break\n        count += 1\n        if sorted_list[i][0] == 'A':\n            print(sorted_list[i][1], sorted_list[i][2])"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    min_list = []\n    for tup in test_list:\n        if len(min_list) < K:\n            min_list.append(tup)\n        else:\n            min_list.remove(min(min_list))\n            min_list.append(tup)\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n\n    Args:\n    test_list (list): List of tuples where each tuple contains information about a user. Each tuple should have the form (user_id, age, gender, occupation).\n\n    K (int): Number of records to be returned.\n\n    Returns:\n    list: List of tuples containing the minimum K records from the input list. Each tuple should have the form (user_id, age, gender, occupation).\n\n    \"\"\"\n    # Sorting the test_list based on the age in descending order\n    sorted_test_list = sorted(test_list, key=lambda x: x[1], reverse=True)\n\n    # Initializing an empty list to store the K records\n    min_k_list = []\n\n    # Looping through the first K records of the sorted_test_list\n    for i in range(K):\n        min_k_list.append(sorted_test_list[i])\n\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    # Initialize variables to store minimum records\n    min_list = []\n    min_value = float('inf')\n\n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        # If the length of the current tuple is less than K, then update the minimum value\n        if len(test_list[i]) < K:\n            if len(min_list) < K:\n                min_list.append(test_list[i])\n            else:\n                min_list.pop(0)\n                min_list.append(test_list[i])\n\n        # If the length of the current tuple is greater than or equal to K, then check if the current tuple has a smaller value\n        else:\n            if test_list[i][-1] < min_value:\n                min_value = test_list[i][-1]\n                min_list = [test_list[i]]\n            elif test_list[i][-1] == min_value:\n                min_list.append(test_list[i])\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Input:\n        test_list: list of tuples\n        K: integer\n    \n    Output:\n        Returns the tuple with the minimum k records from the tuple list\n    \n    Example:\n        test_list = [('apple', 2), ('banana', 5), ('orange', 3), ('kiwi', 1)]\n        K = 2\n        \n        Output: ('orange', 3)\n    '''\n\n    # Sort the list in descending order based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Initialize the minimum k records\n    min_records = []\n\n    # Iterate through the sorted list and add the k smallest records to min_records\n    i = 0\n    while i < len(test_list) and len(min_records) < K:\n        min_records.append(test_list[i])\n        i += 1\n\n    # If there are less than K records left in the list, add all the remaining records to min_records\n    if len(min_records) < K:\n        min_records.extend(test_list[i:])\n\n    # Return the minimum k records\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    test_list = sorted(test_list, key=lambda x: x[1])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list by the second element in each tuple\n    test_list.sort(key=lambda x: x[1])\n    # create a new list to store the minimum k records\n    min_records = []\n    # iterate over the sorted list and add minimum k records to the new list\n    for i in range(K):\n        min_records.append(test_list[i])\n    # return the new list\n    return min_records"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty set to store common elements\n    common = set()\n    # Loop through each element in l1\n    for i in range(len(l1)):\n        # Check if the element is common in all three lists\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.add(l1[i])\n    # Convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    '''\n    # Initialize an empty dictionary to store common elements\n    common_dict = {}\n    # Loop through the lists and add common elements to the dictionary\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3 and l1[i] not in common_dict:\n            common_dict[l1[i]] = True\n    # Return the dictionary keys as a list\n    return list(common_dict.keys())"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    # Loop through each index of the list\n    for i in range(len(l1)):\n        # Check if the element at the current index is common for all three lists\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            # If it is, add it to the list of common elements\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n            \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Sort the list in descending order\n    numbers.sort(reverse=True)\n\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list must have at least two elements.\")\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    # Find the smallest number\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    \n    # Find the second smallest number\n    second_smallest = None\n    for num in numbers:\n        if num!= smallest:\n            if second_smallest is None or num < second_smallest:\n                second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = None\n    second_smallest = None\n\n    for num in numbers:\n        if smallest is None or num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = re.compile(r'a(b*){1,}')\n    match = pattern.search(text)\n\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*?b'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab.*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    result = re.search(pattern, text)\n    if result:\n        print(f\"Match found: {result.group()}\")\n    else:\n        print(\"Match not found\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*a'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"abbbbbbbba\"\nmatches = text_match_zero_one(text)\nprint(matches)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'ab+')\n    result = pattern.findall(text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*?b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return 'Match found'\n    else:\n        return 'Match not found'"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Initialize a dictionary to store the frequency of characters in the list\n    char_freq = {}\n    # Iterate over the list of strings\n    for string in test_list:\n        # Convert the string to lowercase\n        string = string.lower()\n        # Iterate over the characters in the string\n        for char in string:\n            # If the character is already in the dictionary, increment its frequency by 1\n            if char in char_freq:\n                char_freq[char] += 1\n            # If the character is not in the dictionary, add it with a frequency of 1\n            else:\n                char_freq[char] = 1\n\n    # Initialize a set to store the pairs of reverse strings\n    reverse_pairs = set()\n    # Iterate over the dictionary of character frequencies\n    for char, freq in char_freq.items():\n        # If the frequency is odd, then it means that there are an odd number of occurrences of the character in the list\n        if freq % 2 == 1:\n            # Iterate over all the other possible characters\n            for other_char in char_freq:\n                # If the other character is not the same as the current character and has an odd frequency, then it means that there are two possible pairs of characters that form a reverse string\n                if other_char!= char and char_freq[other_char] % 2 == 1:\n                    # Add the pair of characters to the set of reverse pairs\n                    reverse_pairs.add(f'{char}{other_char}')\n\n    # Return the length of the set of reverse pairs\n    return len(reverse_pairs)\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # Create an empty dictionary to store the frequency of each string\n    freq = {}\n\n    # Loop through each string in the list\n    for s in test_list:\n        # Reverse the string and store its frequency in the dictionary\n        freq[s[::-1]] = freq.get(s[::-1], 0) + 1\n\n    # Initialize two counters for the number of pairs of reverse strings\n    count1 = 0\n    count2 = 0\n\n    # Loop through each string in the list again\n    for s in test_list:\n        # If the reversed string appears in the dictionary, increment the count of pairs of reverse strings\n        if s[::-1] in freq:\n            count1 += freq[s[::-1]] - 1\n            count2 += 1\n            # If the count of pairs is greater than 1, increment the count of pairs of reverse strings\n            if count1 > 1:\n                count2 += count1 - 2\n\n    # Return the total count of pairs of reverse strings\n    return count2\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n\n    # Create a dictionary to store the count of each string in the list\n    count_dict = {}\n\n    # Loop through the list of strings\n    for string in test_list:\n        # Reverse the string and store in the dictionary\n        reversed_string = string[::-1]\n        if reversed_string not in count_dict:\n            count_dict[reversed_string] = 1\n        else:\n            # Increment the count of the current string\n            count_dict[string] += 1\n\n    # Initialize the count of reverse pairs to 0\n    reverse_pair_count = 0\n\n    # Loop through the dictionary and count the reverse pairs\n    for string in count_dict:\n        # Check if the count of the current string is greater than 1\n        if count_dict[string] > 1:\n            reverse_pair_count += count_dict[string] * (count_dict[string] - 1) // 2\n\n    return reverse_pair_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if test_list[i][::-1] in test_list[j]:\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    # Initialize a counter to keep track of the number of reverse pairs\n    count = 0\n    \n    # Loop through each string in the list\n    for i in range(len(test_list)):\n        \n        # Get the first string in the list\n        str1 = test_list[i]\n        \n        # Loop through each string in the list starting from the next index\n        for j in range(i+1, len(test_list)):\n            \n            # Get the second string in the list\n            str2 = test_list[j]\n            \n            # Check if the strings are reversed\n            if str1 == str2[::-1]:\n                count += 1\n                \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for string in test_list:\n        for i in range(len(string)):\n            for j in range(i+1, len(string)):\n                if string[i] == string[j][::-1]:\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function takes a list of strings as input, and counts the number of pairs of reverse strings in the list.\n\n    Example:\n    test_list = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"]\n    count_reverse_pairs(test_list)\n\n    Output:\n    The function will return 2, as there are two pairs of reverse strings in the list: (\"dcba\", \"abcd\") and (\"lls\", \"s\").\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] or test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the unique sublists and their count\n    unique_sublist_dict = {}\n    \n    # loop through the list1 and for each sublist, convert it to a tuple and add it to the dictionary\n    for sublist in list1:\n        unique_sublist_tuple = tuple(sublist)\n        if unique_sublist_tuple in unique_sublist_dict:\n            unique_sublist_dict[unique_sublist_tuple] += 1\n        else:\n            unique_sublist_dict[unique_sublist_tuple] = 1\n    \n    return unique_sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        else:\n            counts[sublist_tuple] = 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_counts = {}\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublist_counts:\n                sublist_counts[sublist] = 1\n            else:\n                sublist_counts[sublist] += 1\n    \n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the number of occurrences of each tuple in the list\n    sublist_count = {}\n    for i in list1:\n        # Convert each list element to a tuple and add it to the dictionary if it is not present already\n        if tuple(i) not in sublist_count:\n            sublist_count[tuple(i)] = 0\n        sublist_count[tuple(i)] += 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the counts of unique sublists\n    sublist_counts = {}\n    # loop through each list in the main list\n    for lst in list1:\n        # convert the list to a tuple to compare with other tuples in the dictionary\n        tup = tuple(lst)\n        # if the tuple is not already in the dictionary, add it and set its value to 1\n        if tup not in sublist_counts:\n            sublist_counts[tup] = 1\n        # if the tuple is already in the dictionary, increment its value by 1\n        else:\n            sublist_counts[tup] += 1\n    # return the dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for item in list1:\n        item_tuple = tuple(item)\n        if item_tuple in count:\n            count[item_tuple] += 1\n        else:\n            count[item_tuple] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for item in list1:\n        item_tuple = tuple(item)\n        if item_tuple in count:\n            count[item_tuple] += 1\n        else:\n            count[item_tuple] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the count of sublists\n    count_dict = {}\n    # iterate through the list1\n    for sublist in list1:\n        # convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # if the tuple is already in the dictionary, increment its value\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        # otherwise, add the tuple to the dictionary with a value of 1\n        else:\n            count_dict[sublist_tuple] = 1\n    # return the dictionary of count of sublists\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the count of each tuple\n    count = {}\n    # Loop through each element in the list\n    for element in list1:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Convert the list to a tuple and add it to the dictionary\n            count[tuple(element)] = count.get(tuple(element), 0) + 1\n    # Return the dictionary\n    return count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        if '.' in num:\n            decimal_part = num.split('.')[1]\n            if len(decimal_part) == 2:\n                return True\n            else:\n                return False\n        else:\n            return True\n    except:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer():\n            return True\n        elif num % 1 == 0 and num % 1 == 0.0:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    for i in num:\n        if i == '.':\n            return False\n        if not (i.isdigit() or i == '.'):\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Split the string into a list of integers\n    num_list = [int(i) for i in str(num)]\n\n    # Check if the list contains only one element\n    if len(num_list)!= 1:\n        return False\n\n    # Check if the list contains only zeros\n    if num_list[0] == 0:\n        return False\n\n    # Check if the list contains only zeros and ones\n    if (num_list[0] == 1 and num_list[0] == 0) or (num_list[0] == 0 and num_list[0] == 1):\n        return False\n\n    # Check if the list contains only ones\n    if num_list[0] == 1:\n        return True\n\n    # Check if the list contains only zeros\n    if num_list[0] == 0:\n        return True\n\n    # If the list contains more than one non-zero element, it cannot be a decimal number\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    if num.replace(\".\", \"\", 1).isdigit():\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float(num)\n        if len(str(float(num))) == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n\n    # Check if the input is a valid decimal number with a precision of 2\n    if len(num) < 1 or num[-1] == '.' or num[-1] == '-' or num[-1] == '+':\n        return False\n    elif '.' not in num:\n        return False\n    elif len(num.split('.')) > 2:\n        return False\n    elif len(num.split('.')[1]) > 2:\n        return False\n    else:\n        try:\n            float(num)\n        except ValueError:\n            return False\n        else:\n            return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        decimal.Decimal(num)\n        if '.' in num:\n            if len(num.split('.')[1]) <= 2:\n                return True\n        return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal_pattern = r'^[-+]?\\d+(\\.\\d{1,2})?$'\n    match = re.match(decimal_pattern, num)\n    if match:\n        if '.' in match.group():\n            num_parts = match.group().split('.')\n            if len(num_parts[0]) > 0 and len(num_parts[1]) <= 2:\n                return True\n            else:\n                return False\n        else:\n            if len(num_parts[0]) > 0 and len(num_parts[1]) <= 2:\n                return True\n            else:\n                return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        decimal_point = num.index('.')\n        int_part = num[:decimal_point]\n        dec_part = num[decimal_point + 1:]\n        if len(int_part) > 1 or len(dec_part) > 2:\n            return False\n        for digit in int_part:\n            if not digit.isdigit():\n                return False\n        for digit in dec_part:\n            if not digit.isdigit():\n                return False\n        if len(int_part) > 0 and len(dec_part) > 0:\n            for digit in int_part:\n                if int(digit) > 9:\n                    return False\n            for digit in dec_part:\n                if int(digit) > 9:\n                    return False\n        if len(int_part) == 0 and len(dec_part) > 0:\n            for digit in dec_part:\n                if int(digit) > 9:\n                    return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) < 2:\n        return False\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Create a set from the list to remove duplicates\n    unique_set = set(arr)\n\n    # Check if the length of the set is 1 or not\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Check if the list contains only one element\n    if len(arr) == 1:\n        return True\n    \n    # Check if all the elements in the list are distinct\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return False\n        seen.add(num)\n    \n    # If we've gone through the loop without finding any duplicates, it means that all the elements in the list are distinct\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        if arr.count(arr[i]) > 1:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if unique:\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    else:\n        for i in range(len(arr)):\n            if arr.count(arr[i])!= 1:\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes a list of numbers and checks whether all the elements in the list are distinct or not.\n    Returns True if all elements are distinct, else False.\n    \"\"\"\n    if len(set(arr)) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n    # iterate through the list\n    for num in arr:\n        # add the element to the set\n        unique_set.add(num)\n    # if the set has only one element, it is unique\n    if len(unique_set) == 1:\n        return True\n    # otherwise, it is not unique\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        if monthnum3 % 100 == 0:\n            if monthnum3 % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    monthnum = str(monthnum3)\n    if monthnum.isdigit() and 1 <= int(monthnum) <= 12:\n        if monthnum3 in ['4', '6', '9', '11']:\n            return True\n        else:\n            return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # mapping of month numbers to number of days in each month\n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    if monthnum3 in days_in_month:\n        # check if the number of days in the month is 30 or 31\n        if days_in_month[monthnum3] == 30:\n            print(monthnum3, \"contains 30 days.\")\n        else:\n            print(monthnum3, \"contains 31 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if 1 <= monthnum <= 12:\n        if monthnum % 2 == 0:\n            if monthnum in [4, 6, 9, 11]:\n                return True\n            else:\n                return False\n        else:\n            if monthnum in [2, 4, 6, 9, 11]:\n                return True\n            else:\n                return False\n    else:\n        print(\"Invalid month number. Month numbers should be from 1 to 12.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        print(\"The month contains 30 days\")\n    elif monthnum3 in [4, 6, 9, 11]:\n        print(\"The month contains 31 days\")\n    else:\n        print(\"The month does not contain 30 or 31 days\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # dictionary to map month number to number of days\n    days_in_month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    # check if the given month number is in the dictionary\n    if monthnum3 in days_in_month:\n        # if it is, check if the number of days is 30\n        if days_in_month[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        # if not, return False\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum % 2 == 0:\n        return monthnum % 3 == 0\n    else:\n        return monthnum % 2 == 0"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(1,n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize minimum difference to infinity\n    min_diff = float('inf')\n\n    # loop through the array\n    for i in range(n - 1):\n        # compute the difference between the current and next element\n        diff = abs(arr[i] - arr[i + 1])\n\n        # update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n):\n        diff = arr[i+1] - arr[i]\n        min_diff = min(min_diff, diff)\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize minimum difference\n    min_diff = float('inf')\n\n    # iterate over the array\n    for i in range(n - 1):\n        # find the difference between the current element and the next element\n        diff = arr[i + 1] - arr[i]\n\n        # update the minimum difference if the current difference is smaller\n        min_diff = min(min_diff, diff)\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n):\n    \"\"\"\n    This function takes an array of integers and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf') # initialize min_diff to infinity\n    for i in range(n):\n        for j in range(i+1,n):\n            diff = abs(arr[i]-arr[j]) # calculate the difference between the two elements\n            if diff < min_diff: # if the difference is smaller than the current min_diff\n                min_diff = diff # update min_diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    if n < 2:\n        return 0\n\n    min_diff = float('inf')\n    min_1 = min_2 = None\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n                min_1 = arr[i]\n                min_2 = arr[j]\n\n    return min_diff, min_1, min_2"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    # Sort the array\n    arr.sort()\n    # Initialize minimum difference variable\n    min_diff = float('inf')\n    # Initialize two pointers\n    i = 0\n    j = 1\n    # Compare the elements at the two pointers\n    while j < n:\n        # If the difference between the current element and the next element is smaller than the current minimum difference, update the minimum difference\n        diff = arr[j] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n        # Move the pointers to the next pair of elements\n        i += 1\n        j += 1\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    # Initialize variables\n    min_diff = float('inf')\n    min_pair = None\n\n    # Iterate through the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the difference between the current pair\n            diff = abs(arr[i] - arr[j])\n\n            # Check if this difference is smaller than the current minimum\n            if diff < min_diff:\n                min_diff = diff\n                min_pair = (arr[i], arr[j])\n\n    # Return the minimum difference and the pair\n    return min_diff, min_pair"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two variables to store the minimum and maximum difference\n    min_diff = float('inf')\n    max_diff = -float('inf')\n\n    # Iterate through the sorted array and check for the minimum and maximum difference\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        min_diff = min(min_diff, diff)\n        max_diff = max(max_diff, diff)\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    diff = float('inf')\n    for i in range(n-1):\n        diff = min(diff, arr[i+1] - arr[i])\n    return diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    # initialize a counter variable to keep track of the number of digits\n    digit_count = 0\n\n    # iterate over each character in the string\n    for char in str:\n        # if the character is a digit, increment the counter\n        if char.isdigit():\n            digit_count += 1\n\n    # return the count of digits\n    return digit_count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime or not\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_prime(n):\n        \"\"\"\n        Helper function to find the nth prime number\n        \"\"\"\n        count = 0\n        for i in range(2, int(math.sqrt(n))+1):\n            if is_prime(i):\n                count += 1\n                if count == n:\n                    return i\n\n    polite_number = 2\n    count = 0\n\n    while count < n:\n        polite_number += nth_prime(2)\n        count += 1\n\n    return polite_number\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    def nth_polite_number(a, b, c, d):\n        return (a + b * math.sqrt(2)) * math.sqrt(2) * (1 + 2 * math.sqrt(2) * c * (2 * d - 1))\n\n    def nth_polite_number_helper(a, b, c, d, n):\n        if n == 1:\n            return a\n        else:\n            return nth_polite_number_helper(a, b, c, d, n - 1)\n\n    a, b, c, d = 1, 2, 1, 2\n    if n <= 1:\n        return n\n    else:\n        return nth_polite_number_helper(a, b, c, d, n - 1)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    def nth_polite_number(n):\n        \"\"\"\n        Recursive function to find nth polite number.\n        \"\"\"\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 3\n        else:\n            if nth_polite_number(n-1) % 2 == 0:\n                return nth_polite_number(n-1) + 1\n            else:\n                return nth_polite_number(n-1) + 2\n\n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a = 0\n    b = 0\n    count = 1\n    while count <= n:\n        temp = b\n        b = (a + b) % 1000000007\n        a = temp\n        count += 1\n    return a\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function checks if a given number is the nth polite number or not.\n    \"\"\"\n    i = 2\n    polite_number = 1\n    while i <= n:\n        if polite_number * i < n:\n            polite_number *= 2\n        else:\n            return polite_number\n        i += 1\n    return \"Not found.\"\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find the nth polite number.\n    \"\"\"\n    # initialize a variable for counting number of polite numbers\n    count = 0\n    # initialize a variable for storing the value of the nth polite number\n    nth_polite = 0\n\n    # loop till count equals n\n    while count < n:\n        # if the value of nth polite number is less than or equal to 1, then it's a polite number\n        if nth_polite <= 1:\n            nth_polite += 1\n        # if the value of nth polite number is greater than 1, then it's not a polite number\n        else:\n            # update the value of nth polite number\n            nth_polite += 2 * nth_polite - 1\n        # increment count for each iteration\n        count += 1\n\n    return nth_polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize variables for nth polite number and prime factorization\n    polite_num = 1\n    prime_factorization = []\n\n    # Initialize the first number to be considered as 2\n    current_num = 2\n\n    # Loop through until nth polite number is found\n    while prime_factorization == []:\n        # Check if current number is prime\n        is_prime = True\n        for i in range(2, int(math.sqrt(current_num))+1):\n            if current_num % i == 0:\n                is_prime = False\n                break\n\n        # If current number is prime, add it to the prime factorization\n        if is_prime:\n            prime_factorization.append(current_num)\n\n        # Increment current number\n        current_num += 1\n\n        # Check if nth polite number has been found\n        if len(prime_factorization) == n:\n            break\n\n    # Return the nth polite number\n    return polite_num\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Constants\n    LIMIT = 1000000 # Limit of the nth polite number\n    MAX_NUM = 1000 # Maximum value of the nth polite number\n\n    # Initialize variables\n    count = 1 # Count of polite numbers\n    num = 1 # Current polite number\n\n    # Loop until the nth polite number is found\n    while count < n:\n        num += 1\n        if num % 2 == 0:\n            continue\n        elif num % 5 == 0:\n            count += 1\n        elif num % 7 == 0:\n            continue\n        elif num % 11 == 0:\n            continue\n        elif num % 13 == 0:\n            count += 1\n        elif num % 17 == 0:\n            continue\n        elif num % 19 == 0:\n            count += 1\n        elif num % 23 == 0:\n            count += 1\n        elif num % 29 == 0:\n            count += 1\n        elif num % 31 == 0:\n            count += 1\n        elif num % 37 == 0:\n            count += 1\n        elif num % 41 == 0:\n            count += 1\n        elif num % 43 == 0:\n            count += 1\n        elif num % 47 == 0:\n            count += 1\n        elif num % 53 == 0:\n            count += 1\n        elif num % 59 == 0:\n            count += 1\n        elif num % 61 == 0:\n            count += 1\n        elif num % 67 == 0:\n            count += 1\n        elif num % 71 == 0:\n            count += 1\n        elif num % 73 == 0:\n            count += 1\n        elif num % 79 == 0:\n            count += 1\n        elif num % 83 == 0:\n            count += 1\n        elif num % 89 == 0:\n            count += 1\n        elif num % 97 == 0:\n            count += 1\n        elif num % 101 == 0:\n            count += 1\n        elif num % 103 == 0:\n            count += 1\n        elif num % 107 == 0:\n            count += 1\n        elif num % 109 == 0:\n            count += 1\n        elif num % 113 == 0:\n            count += 1\n        elif num % 127 == 0:\n            count += 1\n        elif num % 131 == 0:\n            count += 1\n        elif num % 137 == 0:\n            count += 1\n        elif num % 139 == 0:\n            count += 1\n        elif num % 149 == 0:\n            count += 1\n        elif num % 151 == 0:\n            count += 1\n        elif num % 157 == 0:\n            count += 1\n        elif num % 163 == 0:\n            count += 1\n        elif num % 167 == 0:\n            count += 1\n        elif num % 173 == 0:\n            count += 1\n        elif num % 179 == 0:\n            count += 1\n        elif num % 181 == 0:\n            count += 1\n        elif num % 191 == 0:\n            count += 1\n        elif num % 193 == 0:\n            count += 1\n        elif num % 197 == 0:\n            count += 1\n        elif num % 199 == 0:\n            count += 1\n        elif num % 211 == 0:\n            count += 1\n        elif num % 223 == 0:\n            count += 1\n        elif num % 227 == 0:\n            count += 1\n        elif num % 229 == 0:\n            count += 1\n        elif num % 233 == 0:\n            count += 1\n        elif num % 239 == 0:\n            count += 1\n        elif num % 241 == 0:\n            count += 1\n        elif num % 251 == 0:\n            count += 1\n        elif num % 257 == 0:\n            count += "
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns the nth polite number.\n    \"\"\"\n    # base cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        # recursive case\n        return 3 * (is_polite(n-1) + 1) // 2"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_consecutive(num):\n        if num < 10:\n            return False\n        prev = num - 1\n        for i in range(1, 10):\n            if (num - prev) % 9 == 0:\n                return True\n            prev = num\n\n    def nth_polite(start, end):\n        for i in range(start, end):\n            if is_prime(i) and is_consecutive(i):\n                return i\n\n    return nth_polite(1000, 10000)\n\nprint(is_polite(10))"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    for i in range(n):\n        if i < n-1:\n            result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append([l1[i], l1[i+1]])\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # create an empty list to store the pairs\n    pairs = []\n    # loop through the list\n    for i in range(len(l1) - 1):\n        # add the current pair to the list\n        pairs.append((l1[i], l1[i+1]))\n    # return the list of pairs\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function takes two arguments:\n    - arr: a list of numbers\n    - sum: the target sum\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes two lists as input: arr and sum. The function counts the number of pairs of elements in arr \n    whose sum is equal to sum.\n    '''\n    count = 0\n    # Create a dictionary to store the frequency of each element in arr\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    # Iterate over the frequency dictionary and check if the difference between sum and the sum of the keys of the dictionary is present\n    for num in freq:\n        if sum - num in freq:\n            count += freq[num] * freq[sum - num]\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function takes a list of numbers and the sum as input.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the number of pairs whose sum is equal to'sum'.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    # creating an empty list to store the difference\n    diff_list = []\n    # iterating through the two lists\n    for i in li1:\n        # if the element is not present in the second list, add it to the difference list\n        if i not in li2:\n            diff_list.append(i)\n    # returning the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    result = []\n    for item in li1:\n        if item not in li2:\n            result.append(item)\n    return result"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n    \"\"\"\n    result = []\n    for i in li1:\n        if i not in li2:\n            result.append(i)\n    return result"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as inputs and returns a new list containing the elements in the first list that are not in the second list.\n    '''\n    new_list = []\n    for item in li1:\n        if item not in li2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = list(set(li1) - set(li2))\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a Python function to get the difference between two lists.\n    \"\"\"\n    # Create an empty list to store the difference\n    diff_list = []\n    # Loop through each element in the first list\n    for i in li1:\n        # Check if the element is present in the second list\n        if i not in li2:\n            # If not, add it to the diff_list\n            diff_list.append(i)\n    # Return the diff_list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    #creating an empty list to store the difference\n    diff = []\n    #iterating through each element of both lists\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            diff.append(li1[i])\n    #returning the difference list\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Use set operations to get the difference between the two lists\n    difference = set(li1) - set(li2)\n    # Convert the resulting set to a list and return it\n    return list(difference)"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_powers += i**4\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 4\n        i += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_sum = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 1:\n            odd_sum += i ** 4\n        i += 1\n    return odd_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_num = 3\n    result = 0\n\n    while n > 0:\n        if odd_num % 2 == 1:\n            result += odd_num ** 4\n            n -= 1\n        odd_num += 2\n\n    return result\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_of_fourth_powers += i ** 4\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of fourth power of odd numbers\n    sum_fourth_power = 0\n\n    # Loop through the first n odd numbers\n    for i in range(n):\n        # Check if the current number is odd\n        if i % 2 == 1:\n            # Calculate the fourth power of the current odd number\n            fourth_power = i ** 4\n            # Add the fourth power to the sum of fourth power of odd numbers\n            sum_fourth_power += fourth_power\n\n    # Return the sum of fourth power of odd numbers\n    return sum_fourth_power\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1):\n        sum_of_fourth_powers += i*i*i*i\n    return sum_of_fourth_powers"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # create a stack to store opening and closing parentheses\n    stack = deque()\n\n    # iterate through each character in the expression\n    for i, char in enumerate(exp):\n        # if the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(i)\n        # if the character is a closing parenthesis, pop the last opening parenthesis from the stack\n        elif char == ')':\n            if not stack:\n                return False\n            last_open = stack.pop()\n\n    # if the stack is not empty, there are still opening parentheses left in the expression\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            if stack[-1]!= '(':\n                return False\n            stack.pop()\n    return True if not stack else False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if i - top > 1:\n                return False\n    if len(stack)!= 0:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balance = 0\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if stack:\n                stack.pop()\n            else:\n                balance += 1\n    if balance == 0:\n        print(\"Expression is balanced\")\n    else:\n        print(\"Expression is not balanced\")"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n    close_brackets = {')', ']', '}'}\n\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if not (close_brackets[char] == top_char):\n                return False\n\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_expression(exp):\n    # create a stack to store opening parenthesis\n    stack = deque()\n    # iterate through the expression\n    for i in range(len(exp)):\n        # if the character is an opening parenthesis, push it onto the stack\n        if exp[i] == '(':\n            stack.append(i)\n        # if the character is a closing parenthesis, check if the number of opening parenthesis is equal to the number of closing parenthesis\n        elif exp[i] == ')':\n            if not stack:  # if the stack is empty, the expression is not balanced\n                return False\n            if len(stack) == 1:  # if the length of the stack is equal to 1, the closing parenthesis matches the opening parenthesis at the top of the stack\n                stack.pop()  # remove the opening parenthesis at the top of the stack\n            else:  # if the length of the stack is greater than 1, the closing parenthesis is not balanced\n                return False\n    # if the loop completes without finding any unmatched closing parenthesis, the expression is balanced\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c in ['(', '{', '[']:\n            stack.append(c)\n        elif c in [')', '}', ']']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if not (c in ['(', '(', '[', '{'] and (c == ')' or c == '}' or c == ']' or c == '}')):\n                return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Convert the string to a list of words\n    words = test_str.split()\n\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Check if the length of the current word is equal to K\n        if len(words[i]) == K:\n            # If it is, remove the word from the list\n            words.pop(i)\n            i -= 1 # Decrement the index because we have removed a word\n\n    # Join the list of words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split() # Split the string into a list of words\n    new_words = [] # Initialize an empty list to store the new words\n    \n    for word in words:\n        if len(word)!= K: # Check if the length of the word is not equal to K\n            new_words.append(word) # If the length is not K, append it to the new list\n    \n    return''.join(new_words) # Join the new list of words back into a string separated by spaces"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Create an empty list to store the words without k length\n    new_words = []\n    \n    # Loop through each word in the original list\n    for word in words:\n        # If the length of the word is not equal to K, add the word to the new list\n        if len(word)!= K:\n            new_words.append(word)\n    \n    # Join the new list of words into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i, word in enumerate(words):\n        if len(word) == K:\n            words.pop(i)\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Regular expression pattern to match the pattern\n    pattern_obj = re.compile(pattern)\n    # Find all the occurrences of the pattern in the text\n    matches = pattern_obj.findall(text)\n    # If there is at least one match, return a tuple with the matches and positions\n    if matches:\n        return (matches, [m.start() for m in matches])\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    if not matches:\n        return None\n\n    # Find the position of the first occurrence of the pattern in the text\n    pos = text.find(matches[0])\n\n    # Create a dictionary to store the position and occurrence of the pattern\n    result = {matches[0]: (pos, 1)}\n\n    # Find the remaining occurrences of the pattern and their positions\n    for match in matches[1:]:\n        pos = text.find(match, pos+len(matches[0]))\n        result[match] = (pos, result[matches[0]][1]+1)\n\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], matches[0].start()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    matches = re.findall(pattern,text)\n    if matches:\n        for match in matches:\n            print(f\"{match[0]} found at position: {match[1]}\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\npattern = \"fox\"\nresult = occurance_substring(text, pattern)\nif result:\n    print(f\"The substring {result[0]} is found at position {result[1]} and ends at position {result[2]}.\")\nelse:\n    print(\"No match found.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        return result[0]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    # Initialize variables\n    count = 0\n    \n    # Loop through the list\n    for i in range(len(nums)):\n        # Check if the number is odd\n        if nums[i] % 2!= 0:\n            # Increment the count\n            count += 1\n        \n        # Check if the count is equal to the length of the list\n        if count == len(nums):\n            # Return True if the count is equal to the length of the list\n            return True\n    \n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len([x for x in nums[i::2] if x % 2 == 1])!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # iterate over the list\n    for i in range(len(nums)):\n        # check if the current index is odd\n        if i % 2!= 0:\n            # check if the current number is odd\n            if nums[i] % 2!= 0:\n                return False\n    # if we made it through the loop without finding an odd number, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            for j in range(i, len(nums), 2):\n                if nums[j] % 2 == 1:\n                    odd_count += 1\n                    if odd_count > 2:\n                        return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # iterate over the indices of the list\n    for i in range(len(nums)):\n        # check if the index is odd\n        if i % 2!= 0:\n            # check if the number at that index is odd\n            if nums[i] % 2!= 0:\n                return False\n    # if we made it here, all the odd indices contain odd numbers\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_nums = set()\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            odd_nums.add(nums[i])\n    return odd_nums == set(range(1, len(nums) + 1, 2))"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if any(nums[i:i+2][::2] % 2 == 1):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        count = 0\n        for j in range(len(nums)):\n            if nums[j] % 2!= 0:\n                count += 1\n                if count > 2:\n                    return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0: # check if i is even index\n            continue\n        odd_count = 0\n        for j in range(len(nums[i])):\n            if nums[i][j] % 2 == 1:\n                odd_count += 1\n        if odd_count == 0: # if odd count is zero, then no odd numbers found in odd index\n            return False\n    return True # if all odd indexes have odd numbers, then return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"  # vowels as a string\n    count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] in vowels and i > 0:\n            if test_str[i-1] in vowels:\n                count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i!= 0:\n            if test_str[i] == test_str[i-1]:\n                count += 1\n        if i!= len(test_str)-1:\n            if test_str[i] == test_str[i+1]:\n                count += 1\n        for vowel in vowels:\n            if vowel == test_str[i] and (i == 0 or test_str[i-1]!= vowel) and (i == len(test_str)-1 or test_str[i+1]!= vowel):\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if (test_str[i] in vowels) and (test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set of unique elements in the list\n    unique_elements = set(arr)\n    # Find the sum of unique elements\n    sum_unique = sum(unique_elements)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of all the non-repeated elements in the list.\n    \"\"\"\n    unique_elements = list(set(arr))\n    total_sum = 0\n\n    for num in unique_elements:\n        total_sum += num\n\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to store unique elements of the input list\n    unique_elements = set(arr)\n    # sum of unique elements\n    sum_unique = sum(unique_elements)\n    # return the sum of the unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set of unique elements\n    unique_elements = set(arr)\n    \n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Iterate through the unique elements and add their values to the total sum\n    for element in unique_elements:\n        total_sum += element\n    \n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Removing duplicates from the list\n    unique_arr = list(set(arr))\n    # Initializing sum variable to 0\n    sum_of_arr = 0\n    # Looping through the unique elements in the list\n    for element in unique_arr:\n        # Adding the element to the sum variable\n        sum_of_arr += element\n    return sum_of_arr"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements.\n\n    Args:\n        arr: A list of integers.\n\n    Returns:\n        The sum of non-repeated elements in the list.\n    \"\"\"\n\n    # Create a set to store unique elements in the list.\n    unique_set = set(arr)\n\n    # Calculate the sum of unique elements in the list.\n    sum_unique = sum(unique_set)\n\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Initialize a set to store unique elements in the list\n    unique_set = set(arr)\n    # Initialize a sum variable to store the sum of the non-repeated elements in the list\n    sum_non_repeat = 0\n    # Loop through each element in the unique_set and add it to the sum_non_repeat variable\n    for num in unique_set:\n        sum_non_repeat += num\n    # Return the sum_non_repeat variable as the result of the function\n    return sum_non_repeat"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # initialize the sum to 0\n    sum_non_repeated = 0\n    # iterate through the set to calculate the sum\n    for element in unique_set:\n        sum_non_repeated += element\n    # return the sum\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    # create a dictionary to store the elements and their index\n    element_index = {}\n    # initialize the sum variable to 0\n    total_sum = 0\n    # loop through the list and add each element to the dictionary\n    for i, num in enumerate(arr):\n        element_index[num] = i\n    # loop through the list again and add each element to the sum if it hasn't been added yet\n    for num in arr:\n        if num not in element_index:\n            total_sum += num\n    # return the final sum\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes in a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    unique_elements = list(set(arr))  # convert the list to a set to get unique elements\n    return sum(unique_elements)  # return the sum of the unique elements"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list of elements as input and returns a list of sublists, where each sublist contains\n    consecutive duplicates of the input list elements.\n    \"\"\"\n    grouped_lst = groupby(lst)\n    return [list(group) for group in grouped_lst if len(list(group)) > 1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def pack_duplicates(iterable):\n        return [[k] for k, g in groupby(iterable)]\n\n    return pack_duplicates(list1)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(enumerate(list1), lambda x: x[1] == x[0])]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Define an empty list to store the sublists\n    result = []\n\n    # Loop through the list and group consecutive duplicates\n    for key, group in groupby(enumerate(list1)):\n        # If the group contains more than one item, create a sublist\n        if len(list(group)) > 1:\n            result.append([key, list(group)])\n\n    # Return the list of sublists\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return [list(group) for key, group in groupby(lst) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # create an iterator over the grouped list of consecutive duplicates\n    grouped = groupby(enumerate(list1), lambda x: x[0] == x[1])\n    \n    # loop through the grouped iterator to find consecutive duplicates and pack them into sublists\n    result = []\n    for key, group in grouped:\n        if key:\n            # if the group is consecutive duplicates, pack it into a sublist and append it to the result list\n            sublist = [item for _, item in group]\n            result.append(sublist)\n    \n    # return the result list\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list as input and returns a new list where the consecutive duplicate elements are grouped together.\n    '''\n    result = []\n    for key, group in groupby(lst):\n        if len(list(group)) > 1:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(zip(*[list(g) for k, g in groupby(list1) if k]))"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        if type(item) == list:\n            sublist = tuple(item)\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the counts of unique sublists\n    counts = {}\n\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it's already in the dictionary\n        if tuple(sublist) in counts:\n            # Increment the count of the sublist in the dictionary\n            counts[tuple(sublist)] += 1\n        else:\n            # Add the sublist and its count to the dictionary\n            counts[tuple(sublist)] = 1\n\n    # Return the dictionary of counts of unique sublists\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for item in list1:\n        if type(item) == list:\n            if item not in sublist_count:\n                sublist_count[item] = 0\n            sublist_count[item] += 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the list to a set to remove duplicates\n    list1 = set(list1)\n    # Initialize an empty dictionary\n    sublists = {}\n    # Iterate over the set of lists\n    for sublist in list1:\n        # Turn the list to a tuple\n        sublist_tuple = tuple(sublist)\n        # Count the occurrences of the tuple in the dictionary\n        if sublist_tuple in sublists:\n            sublists[sublist_tuple] += 1\n        else:\n            sublists[sublist_tuple] = 1\n    # Return the dictionary of unique sublists and their occurrences\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Convert the list to a set to remove duplicates, and then back to a list\n    unique_list = list(set(list1))\n\n    # Create a dictionary to store the count of each unique sublist\n    sublist_count = {}\n\n    # Iterate through each unique sublist\n    for sublist in unique_list:\n        # Count the occurrences of the sublist in the original list\n        count = list1.count(sublist)\n\n        # Add the count to the dictionary with the sublist as the key\n        sublist_count[sublist] = count\n\n    # Return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in count:\n            count[sublist_tuple] = 1\n        else:\n            count[sublist_tuple] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # convert list to list of tuples\n    sublists = [(list1.index(i), i) for i in list1]\n    \n    # count occurrences of each tuple\n    count = {}\n    for sublist in sublists:\n        if sublist in count:\n            count[sublist] += 1\n        else:\n            count[sublist] = 1\n    \n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Convert the list to a set to get unique elements\n    unique_elements = set(list1)\n\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Iterate over the unique elements\n    for element in unique_elements:\n        # Count the number of occurrences of the element in the list\n        count = list1.count(element)\n        # Add the element and its count to the dictionary\n        counts[element] = count\n\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for item in list1:\n        if isinstance(item, list):\n            sublist_tuple = tuple(item)\n            if sublist_tuple not in sublist_count:\n                sublist_count[sublist_tuple] = 1\n            else:\n                sublist_count[sublist_tuple] += 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create a dictionary to store the occurrences of each sublist\n    counts = {}\n\n    # iterate over the input list\n    for sublist in list1:\n        # turn the sublist into a tuple (for easy comparison)\n        sublist = tuple(sublist)\n        # check if the sublist is already in the dictionary\n        if sublist in counts:\n            # if it is, increment its count by 1\n            counts[sublist] += 1\n        else:\n            # if not, add it to the dictionary with a count of 1\n            counts[sublist] = 1\n\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    #sorting the tuple list in ascending order\n    sorted_list = sorted(test_list)\n    #finding the sum of each tuple in the sorted list\n    sum_list = []\n    for i in range(n):\n        sum_list.append(sum(sorted_list[i]))\n    #combination of sums with tuples in the sorted list\n    combinations_list = []\n    for i in range(n-1):\n        for j in range(i+1,n):\n            combinations_list.append((sorted_list[i],sorted_list[j]))\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            if test_list[i][0] + test_list[j-1][0] == test_list[-1][0]:\n                combination = tuple(test_list[i]) + tuple(test_list[j-1])\n                combinations_list.append(combination)\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sort the list of tuples in ascending order\n    test_list.sort()\n\n    # Create a set of tuples with unique elements in each combination\n    for i in range(1, len(test_list)):\n        for j in range(i):\n            if test_list[i][1] < test_list[j][1]:\n                test_list[i], test_list[j] = test_list[j], test_list[i]\n\n    # Find all unique combinations of tuples with sum of elements in the given list\n    for i in range(len(test_list)):\n        if test_list[i][0] == 0:\n            print(test_list[i])\n        else:\n            for combo in combinations(test_list, i+1):\n                if sum(combo) == test_list[i][0]:\n                    print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a list of tuples\n    tuples = [(x, y) for x in test_list for y in test_list]\n    # find the combinations of sums with tuples\n    result = list(combinations(tuples, 2))\n    # return the result\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    n = len(test_list)\n    for i in range(1, n+1):\n        for j in combinations(range(n), i):\n            combination = tuple(test_list[k] for k in j)\n            if sum(combination) == 0:\n                print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a dictionary to store the combination of sums with tuples\n    combination_dict = {}\n    \n    # iterate over all the tuples in the list\n    for i in range(len(test_list)):\n        # find all the combinations of sums for the current tuple\n        for comb in combinations(test_list[i], r=2):\n            # calculate the sum of the two tuples\n            sum_value = comb[0] + comb[1]\n            \n            # check if the sum value is already in the dictionary\n            if sum_value in combination_dict:\n                # if it is, append the current tuple to the combination list\n                combination_dict[sum_value].append(test_list[i])\n            else:\n                # if it is not, create a new list for the combination and append the current tuple to it\n                combination_dict[sum_value] = [test_list[i]]\n    \n    # return the combination dictionary\n    return combination_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    \"\"\"\n\n    # Create a list of all possible combinations of sums\n    all_combinations = list(combinations(test_list, len(test_list)))\n\n    # Filter out combinations with duplicate elements\n    filtered_combinations = []\n    for comb in all_combinations:\n        if comb not in filtered_combinations:\n            filtered_combinations.append(comb)\n\n    return filtered_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples as input, and returns a list of all combinations of sums with tuples in the input list.\n    '''\n\n    # List to store the combinations\n    comb_list = []\n\n    # Using itertools.combinations() function to generate all combinations of sums with tuples in the input list\n    for comb in combinations(test_list, r=2):\n        # Sort the tuples in the combination and append it to the comb_list\n        comb_list.append(tuple(sorted(comb)))\n\n    return comb_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if sum(test_list[i]) == sum(test_list[j]) + sum(test_list[k]):\n                    print(\"combination:\", test_list[i], \" + \", test_list[j], \" + \", test_list[k])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a set to store the tuples to check\n    tuples = set(test_list)\n    # Sort the tuples\n    tuples = sorted(tuples)\n    # Initialize the combinations set\n    combinations_set = set()\n    # Iterate over the tuples\n    for i in range(len(tuples)):\n        # Check for all possible sums of the current tuple\n        for j in range(i+1, len(tuples)):\n            # Create a tuple of the sums\n            current_sum = tuples[i] + tuples[j]\n            # Check if the current sum is in the set of tuples to check\n            if current_sum in tuples:\n                # Add the combination to the combinations set\n                combinations_set.add(frozenset([tuples[i], tuples[j]]))\n    # Return the combinations set\n    return combinations_set"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer input and returns True if the count of divisors is even, else False.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n > 2 and count == 0:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even or odd. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # function to count the number of divisors\n    def count_div(num):\n        div_count = 0\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                div_count += 1\n        return div_count\n\n    # calculate the count of divisors\n    count = count_div(n)\n\n    # check whether the count is even or odd\n    if count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > 2:\n                return False\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    divisor = 2\n    while divisor <= math.sqrt(n):\n        if n % divisor == 0:\n            count += 1\n            n = n // divisor\n        else:\n            divisor += 1\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    # calculate the number of divisors of n\n    div_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_count += 1\n\n    # check if the count of divisors is even\n    if div_count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    \n    if n > 1:\n        count += 1\n    \n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function checks whether the count of divisors is even or odd.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    if n > 2 and n % 2 == 0:\n        count += 1\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes a positive integer as input and returns True if the count of divisors is even, else False.\n    A divisor of a positive integer is a number that divides the integer evenly. \n    For example, 2 is a divisor of 8 because 2 can be written as a sum of 2 and 4.\n    If the count of divisors is even, then there are an equal number of even and odd divisors. \n    Otherwise, there are an odd number of even and an even number of odd divisors.\n    '''\n\n    # finding the number of divisors of n\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n\n    # finding the count of even and odd divisors\n    even_divisors = sum(divisors)\n    odd_divisors = len(divisors) - even_divisors\n\n    # checking if the count of divisors is even\n    if even_divisors == odd_divisors:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    sum_odd = 0\n    n = len(arr)\n\n    # Iterate through all subarrays and check if their length is odd\n    for i in range(n-1):\n        if i < n-2:\n            if len(arr[i:i+3]) % 2 == 1:\n                sum_odd += sum(arr[i:i+3])\n        else:\n            if len(arr[i:]) % 2 == 1:\n                sum_odd += sum(arr[i:])\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n\n    :param arr: List of integers.\n    :return: Sum of all odd length subarrays.\n    \"\"\"\n    # Find the maximum length of subarray\n    max_length = max(len(arr), len(str(max(arr))))\n    # Initialize the sum variable\n    sum_arr = 0\n    # Loop through all possible subarrays of length max_length\n    for i in range(1, max_length + 1):\n        # Initialize the variable to 0\n        subarray_sum = 0\n        # Loop through all possible starting indices of subarrays of length i\n        for j in range(len(arr) - i + 1):\n            # Add the current element to the subarray sum\n            subarray_sum += arr[j]\n            # Add the current subarray sum to the overall sum if it is odd\n            if i % 2!= 0 and i == len(str(subarray_sum)):\n                sum_arr += subarray_sum\n    # Return the overall sum of all odd length subarrays\n    return sum_arr"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each subarray in the array\n    for i in range(len(arr)):\n        # If the length of the subarray is odd, add all the odd elements to the sum\n        if len(arr[i]) % 2!= 0:\n            sum += sum_odd_elements(arr[i])\n    # Return the sum of all odd length subarrays\n    return sum\n\ndef sum_odd_elements(arr):\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each element in the subarray\n    for i in range(len(arr)):\n        # If the element is odd, add it to the sum\n        if arr[i] % 2!= 0:\n            sum += arr[i]\n    # Return the sum of all odd elements in the subarray\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize variables\n    sum_odd_length_subarrays = 0\n    n = len(arr)\n\n    # Loop through the array and add the odd length subarray sum\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            sum_odd_length_subarrays += arr[i]\n        elif i % 2 == 1:\n            sum_odd_length_subarrays += arr[i] + arr[i-1] + arr[i+1]\n        else:\n            sum_odd_length_subarrays += arr[i]\n\n    # Return the sum of all odd length subarrays\n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            sum += arr[j-2]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array of integers and returns the sum of all odd-length subarrays.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        curr_sum = 0\n        max_sum = 0\n        curr_sum += arr[0]\n        max_sum = curr_sum\n        for i in range(1, len(arr)):\n            curr_sum += arr[i]\n            if i % 2 == 0:\n                curr_sum -= arr[i-1]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n        return max_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize a variable to store the sum\n    sum = 0\n    # Loop through the array\n    for i in range(len(arr)):\n        # Check if the current index is odd\n        if i % 2!= 0:\n            # Initialize a variable to store the current subarray sum\n            subarray_sum = 0\n            # Loop through the subarray starting at the current index\n            for j in range(i, len(arr)):\n                # Add the current element to the subarray sum\n                subarray_sum += arr[j]\n                # Check if the subarray sum is odd\n                if subarray_sum % 2!= 0:\n                    # Add the subarray sum to the total sum\n                    sum += subarray_sum\n                    # Exit the inner loop\n                    break\n    # Return the total sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_length = 1\n    for i in range(1, n):\n        if len(arr[i]) > max_length:\n            max_length = len(arr[i])\n    sum_odd_length = 0\n    for i in range(n - max_length + 1):\n        subarray = arr[i:i+max_length]\n        odd_count = 0\n        for num in subarray:\n            if num % 2!= 0:\n                odd_count += 1\n        if odd_count % 2 == 1:\n            sum_odd_length += sum(subarray)\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    # Initialize the sum to zero\n    total_sum = 0\n\n    # Iterate over all possible subarrays\n    for i in range(len(arr) - 1):\n        # Check if the current subarray has an odd length\n        if len(arr[i:i+2]) % 2 == 1:\n            # Add the current sum to the total sum\n            total_sum += sum(arr[i:i+2])\n\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as an argument and returns the sum of all odd length subarrays.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            if i == 0:\n                temp_sum = arr[j-1]\n            else:\n                temp_sum = arr[j-1] - arr[i-1]\n            if j-i+1 % 2 == 0:\n                sum += temp_sum\n            else:\n                sum -= temp_sum\n    return sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_color, min_color = max(r, g, b), min(r, g, b)\n    delta = max_color - min_color\n    if max_color == 0:\n        h = 0\n    else:\n        if max_color == r:\n            h = (g - b) / delta\n        elif max_color == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h = h * 60\n        if h < 0:\n            h += 360\n    if max_color == min_color:\n        v = 0\n    else:\n        v = delta / max_color\n    return h, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n\n    Args:\n        r (int): Red value in 0-255 range.\n        g (int): Green value in 0-255 range.\n        b (int): Blue value in 0-255 range.\n\n    Returns:\n        h (float): Hue value in 0-360 range.\n        s (float): Saturation value in 0-1 range.\n        v (float): Value value in 0-1 range.\n\n    \"\"\"\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    v = cmax\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = (g - b) / delta\n    elif cmax == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h = h / 6\n\n    if h < 0:\n        h += 1\n\n    s = delta / (1 - abs(2 * cmax - 1))\n    if s == 0:\n        v = 0\n    else:\n        s = s\n\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    if max_value == 0:\n        hue = 0\n    elif max_value == r:\n        hue = 60 * ((g - b) / delta)\n    elif max_value == g:\n        hue = 60 * ((b - r) / delta + 2)\n    else:\n        hue = 60 * ((r - g) / delta + 4)\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_value\n    value = max_value\n    hsv = [hue, saturation, value]\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # Convert RGB to HSV\n    h = None\n    s = None\n    v = None\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    del_c = cmax - cmin\n    if del_c == 0:\n        h = 0\n        s = 0\n    else:\n        if cmax == r:\n            h = ((g - b) / del_c) % 6\n        elif cmax == g:\n            h = (b - r) / del_c + 2\n        elif cmax == b:\n            h = (r - g) / del_c + 4\n        h = round(h * 60)\n        if h < 0:\n            h += 360\n        s = del_c / (1 - abs(2 * cmax - 1))\n        v = cmax\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color model.\n\n    Args:\n        r (int): Red value of the color (0-255).\n        g (int): Green value of the color (0-255).\n        b (int): Blue value of the color (0-255).\n\n    Returns:\n        tuple: Hue (0-360), Saturation (0-1), Value (0-1).\n    \"\"\"\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Determine the color value\n    if max_value == min_value:\n        h = s = v = 0\n    else:\n        d = max_value - min_value\n        s = d / (max_value + min_value)\n        if max_value == r:\n            h = (g - b) / d + (g < b) * 6\n        elif max_value == g:\n            h = (b - r) / d + 2\n        else:\n            h = (r - g) / d + 4\n\n        h *= 60\n        if h < 0:\n            h += 360\n\n    return int(h), int(s * 100), int(max_value / 255 * 100)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n\n    :param r: Red color component in the range [0, 255].\n    :param g: Green color component in the range [0, 255].\n    :param b: Blue color component in the range [0, 255].\n    :return: Hue, Saturation and Value components of the HSV color.\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n\n    if max_value == min_value:\n        hue = 0\n    elif max_value == r:\n        hue = (g - b) / delta\n    elif max_value == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    hue = 60 * hue if hue < 0 else 60 * hue\n\n    if delta == 0:\n        saturation = 0\n    elif max_value == r:\n        saturation = (g - b) / delta\n    else:\n        saturation = (max_value - min_value) / delta\n\n    return hue, saturation, max_value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    # Normalize input values to range [0, 1]\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    # Convert r, g, b to their respective color values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h = h * 60\n    if h < 0:\n        h += 360\n\n    s = delta / (1 - abs(2 * min_val - 1))\n    if s == 0:\n        v = 0\n    else:\n        v = max_val\n\n    return (int(h), int(s*255), int(v*255))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts RGB color to HSV color.\n\n    Args:\n        r (int): Red color component (0-255).\n        g (int): Green color component (0-255).\n        b (int): Blue color component (0-255).\n\n    Returns:\n        tuple: (h, s, v): where\n            h (float): Hue (0-360).\n            s (float): Saturation (0-1).\n            v (float): Value (0-1).\n    \"\"\"\n    # Calculate the maximum and minimum values for each channel\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate the delta value\n    delta = max_value - min_value\n\n    # Calculate the saturation\n    if max_value == 0:\n        h = 0\n    elif delta == 0:\n        h = 0\n    else:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h *= 60\n\n        if h < 0:\n            h += 360\n\n    # Calculate the value\n    v = max_value / 255\n\n    # Calculate the saturation\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * max_value - 1))\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n        s = 0\n    elif cmax == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif cmax == g:\n        h = 60 * ((b - r) / delta + 2)\n    else:\n        h = 60 * ((r - g) / delta + 4)\n    h = int(h)\n    if h < 0:\n        h += 360\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    v = cmax\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    h = 0\n    s = 0\n    v = max_value\n    if max_value!= 0:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h *= 60\n        if h < 0:\n            h += 360\n        s = delta / max_value\n    else:\n        h = 0\n        s = 0\n    return (h, s, v)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                product = num\n        elif num % 2 == 1:\n            odd_count += 1\n            if odd_count == 1:\n                product = num\n                break\n                \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        return lst[0] * lst[1]\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    result = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            result *= num\n            even_count = 0\n            odd_count = 0\n    \n    return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product *= num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Given a list of integers, returns the product of the first even and odd numbers.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The product of the first even and odd numbers in the list.\n    \"\"\"\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            else:\n                first_even *= num\n        else:\n            if first_odd is None:\n                first_odd = num\n            else:\n                first_odd *= num\n    return first_even * first_odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    # Filter out only even and odd numbers from the list\n    even_odd = filter(lambda x: x % 2 == 0 or x % 2 == 1, lst)\n\n    # If the list is empty, return 0\n    if not even_odd:\n        return 0\n\n    # Calculate the product of first even and odd numbers\n    product = next(even_odd) * next(even_odd)\n\n    # Return the product\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    product = 1\n    for i in list1:\n        if i % 2 == 0:\n            count += 1\n        if count == 2:\n            product *= i\n            count = 0\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    product = 1\n    for num in lst:\n        if num % 2 == 0:\n            product *= num\n        else:\n            product *= num * 2\n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_list = []\n    str_list = []\n    for char in test_str:\n        if char.isdigit():\n            int_list.append(int(char))\n        else:\n            str_list.append(char)\n    return tuple(int_list), tuple(str_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for elem in test_str:\n        int_tuple += (int(elem),)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by whitespace and convert it to a list\n    str_list = test_str.split()\n    \n    # Initialize an empty tuple\n    int_tuple = ()\n    \n    # Iterate over the list and append each element as an integer to the tuple\n    for i in str_list:\n        int_tuple += (int(i),)\n    \n    # Return the tuple as the result\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        tup_str = eval(test_str)\n        int_tup = tuple(map(int, tup_str))\n        return int_tup\n    except:\n        return \"Invalid input\""
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string by commas and spaces\n    tup_str = test_str.split(',')\n    tup_str = [i.strip() for i in tup_str]\n    \n    # Convert each string to an integer and append to a list\n    tup_int = []\n    for str_int in tup_str:\n        try:\n            tup_int.append(int(str_int))\n        except ValueError:\n            print(f\"Invalid input '{str_int}' in tuple string.\")\n    \n    # Return the converted integer tuple\n    return tup_int"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the tuple string to a list of tuples\n    lst = list(eval(test_str))\n    # Check if all elements in the list are integers\n    if all(isinstance(x, int) for x in lst):\n        # Convert the list of tuples to an integer tuple\n        return tuple(lst)\n    # If any element is not an integer, raise an error\n    else:\n        raise ValueError(\"All elements in the tuple string must be integers.\")\n"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a tuple of strings\n    str_tuple = test_str.split(',')\n\n    # Convert each string in the tuple to an integer\n    int_tuple = tuple(int(item.strip()) for item in str_tuple)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function converts a tuple of string and integer values into a single integer tuple.\n    '''\n    tup = test_str[0]\n    for i in range(1, len(test_str), 2):\n        tup += (int(test_str[i]),)\n    return tup"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        int_tuple = tuple(int(x) for x in test_str.strip('()').split(', '))\n        return int_tuple\n    except ValueError:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into tuples\n    int_tuple = tuple(map(int, test_str))\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif index == 0 or a[index - 1] < x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # use binary search to find the insertion point of x in a\n    index = bisect.bisect_right(a, x)\n    # if x is greater than all the elements in a, index will be len(a)\n    # if x is smaller than all the elements in a, index will be 0\n    # in both cases, we return the length of a as the insertion point\n    if index == len(a):\n        return len(a)\n    elif index == 0:\n        return 0\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x-1)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return -1\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n\n    pattern = r'a.*b.*b.*b'\n\n    matches = re.findall(pattern, text)\n\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a{1}b{3}\"\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{1}b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b){3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return 'Match found!'\n    else:\n        return 'No match found.'"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"ab{3}\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    result = re.search(pattern, text)\n    if result:\n        print(f\"{result.start()}: {result.group()}\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('a(b){3}')\n    return pattern.match(text)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # concatenate the two lists into a single list\n    new_list = test_list + [test_str]\n    # convert the list to a tuple\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # concatenate the list and string with a comma and space\n    new_tuple_str = ','.join(map(str, test_list)) + ','+ test_str\n    \n    # convert the string to a tuple\n    new_tuple_obj = tuple(eval(new_tuple_str))\n    \n    return new_tuple_obj"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str + str(test_list))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Args:\n        test_list (list): List of elements to be included in the new tuple.\n        test_str (str): String to be used as the first element of the new tuple.\n\n    Returns:\n        tuple: New tuple with the given string as the first element and the list as the rest.\n    \"\"\"\n    return (test_str,) + tuple(test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return tuple([test_list, test_str])"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert list to tuple\n    test_tuple = tuple(test_list)\n    \n    # Concatenate the two tuples\n    new_tuple = test_tuple + (test_str,)\n    \n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str, test_list)\n    return new_tup"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count += 1\n    return count == len(nums)//2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count = 0\n            for j in range(i+2, len(nums), 2):\n                if nums[j] % 2 == 0:\n                    count += 1\n                else:\n                    break\n            if count == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count = 0\n            for j in range(i, len(nums), 2):\n                if nums[j] % 2 == 0:\n                    count += 1\n            if count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Initialize a variable to count the number of even numbers in each index\n    count = [0] * len(nums)\n    \n    # Iterate through the list and count the number of even numbers in each index\n    for num in nums:\n        if num % 2 == 0:\n            count[num//2] += 1\n    \n    # Check if all even indices have an even number of even numbers\n    for i in range(0, len(nums), 2):\n        if count[i] % 2!= 0:\n            return False\n    \n    # If all even indices have even numbers of even numbers, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and (nums[i] % 2!= 0):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2])) == 1:\n            return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n        if count % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n\n    :param test_tup: A tuple containing nested tuples.\n    :return: A new tuple without the nested tuples.\n    \"\"\"\n    flattened_tup = []\n    for element in test_tup:\n        if isinstance(element, tuple):\n            flattened_tup.extend(element)\n        else:\n            flattened_tup.append(element)\n    return tuple(flattened_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return [x for tup in test_tup for x in tup]\n    else:\n        return [test_tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            new_tup.extend(item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Get the first element in the tuple\n    first_elem = test_tup[0]\n    # If the first element is a tuple, recursively call the function on it\n    if type(first_elem) == tuple:\n        return remove_nested(first_elem)\n    # Otherwise, remove the tuple from the list and return the list\n    else:\n        return [elem for elem in test_tup if not type(elem) == tuple]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Loop through each element in the tuple\n    for item in test_tup:\n        # Check if the element is a tuple\n        if isinstance(item, tuple):\n            # Recursively call the function on the nested tuple\n            remove_nested(item)\n        else:\n            # If the element is not a tuple, remove it from the list\n            test_tup.remove(item)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for subitem in item:\n                result.append(subitem)\n        else:\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    flat_tup = []\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            flat_tup.extend(elem)\n        else:\n            flat_tup.append(elem)\n    return flat_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    for i in range(len(test_tup)):\n        if isinstance(test_tup[i], tuple):\n            # unpack the tuple and recursively call the function on the unpacked tuple\n            test_tup[i] = remove_nested(test_tup[i])\n    # return a new tuple without any nested tuples\n    return tuple(elem for sublist in test_tup for elem in sublist)"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_lists(input_list): \n    '''\n    This function takes a list and returns the number of lists in the list.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n        elif isinstance(item, int) or isinstance(item, float) or isinstance(item, str):\n            continue\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list: \n        if type(item) == list: \n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_lists(input_list):\n    '''\n    This function takes in a list and counts the number of lists in it.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr,x):\n    \"\"\"\n    This function takes an array and an element x as input and returns the index of the last occurrence of x in the array.\n    \"\"\"\n    low = 0\n    high = len(arr)-1\n    while low<=high:\n        mid = (low+high)//2\n        if arr[mid]==x:\n            high = mid-1\n        elif arr[mid]<x:\n            low = mid+1\n        else:\n            high = mid-1\n    return high"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments:\n    arr - a sorted array\n    x - the element to search for in the array\n    \n    The function returns the index of the last occurrence of x in the array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in an array and an element x and returns the last position of the element in the array.\n\n    Parameters:\n    arr (list): A sorted array.\n    x (int): An element to find the last position of.\n\n    Returns:\n    int: The last position of the element in the array or -1 if the element is not found in the array.\n\n    Example:\n    >>> arr = [1, 2, 3, 4, 5]\n    >>> last(arr, 3)\n    3\n    >>> last(arr, 6)\n    -1\n    \"\"\"\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            # Found the last occurrence of x\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = 0\n    n = len(arr)\n    while i < n and arr[i]!= x:\n        i += 1\n    if i == n:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element x as input, and returns the last position of x in the array.\n\n    Args:\n        arr (list): The sorted array.\n        x (int): The element to find.\n\n    Returns:\n        int: The last position of x in the array.\n\n    Raises:\n        TypeError: If arr is not a list or x is not an integer.\n    \"\"\"\n    # Check if arr is a list and x is an integer\n    if not isinstance(arr, list) or not isinstance(x, int):\n        raise TypeError(\"arr must be a list and x must be an integer\")\n\n    # Initialize last position to -1\n    last_position = -1\n\n    # Traverse the array from left to right and check if each element is equal to x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            # Update last position if current element is equal to x\n            last_position = i\n\n    # Return last position\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # initialize the last position to -1\n    last_pos = -1\n    # loop through the array\n    for i in range(len(arr)):\n        # if the element is equal to the search element\n        if arr[i] == x:\n            # update the last position\n            last_pos = i\n    # return the last position\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    This function takes in an array and an element as input and returns the last position of the element in the array.\n    '''\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # initialize the last position to -1\n    last_position = -1\n\n    # iterate over the array and find the last position of the element x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_position = i\n\n    # return the last position of the element x\n    return last_position"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[a-zA-Z0-9]*b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nresult = text_starta_endb(text)\nprint(result)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=a)\\w*b(?=[\\.,;:])')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found.'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.+b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*?b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all items in the dictionary.\n    \"\"\"\n    total = 0\n    for value in dictionary.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Returns the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_of_odds = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_of_odds += i\n    return sum_of_odds\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(l, r): \n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # take input for range l and r\n    l = int(input(\"Enter lower limit: \"))\n    r = int(input(\"Enter upper limit: \"))\n\n    # initialize sum as 0\n    sum = 0\n\n    # loop through range l to r and add odd numbers to sum\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n\n    # print the sum\n    print(\"The sum of all odd natural numbers within the range\", l, \"and\", r, \"is\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter lower limit: \"))\n    r = int(input(\"Enter upper limit: \"))\n    odd_sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            odd_sum += i\n    return odd_sum\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_ = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum_ += i\n    return sum_"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes in an integer 'n' representing the upper limit of the range from 1 to n.\n    It then calculates the sum of all odd natural numbers within that range and returns the result.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0 \n    for i in range(1, n+1, 2): \n        total += i \n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum_of_odd = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum_of_odd += l\n        l += 1\n    return sum_of_odd"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n\n    # initialize the sum variable to zero\n    sum_of_array = 0\n\n    # iterate through the array and add each element to the sum\n    for num in arr:\n        sum_of_array += num\n\n    # return the sum\n    return sum_of_array"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    temp = (n & mask) << (32 - d)\n    return (n >> d) | temp"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert number to binary string\n    num_binary = bin(n)[2:]\n    # Determine number of zero bits at the beginning\n    num_zeros = len(num_binary) - d\n    # Pad with zeros if necessary\n    if num_zeros < 0:\n        num_zeros = -num_zeros\n        num_binary = '0' * num_zeros + num_binary\n    # Rotate left\n    rotated_binary = num_binary[-d:] + num_binary[:-d]\n    # Convert rotated binary string back to decimal\n    rotated_num = int(rotated_binary, 2)\n    # Return rotated number\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = 0xFFFFFFFF << (32 - d)\n    return (n << d) & mask + (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n,d):\n    # Convert the number to binary and find the number of bits\n    binary_str = bin(n)[2:]\n    num_bits = len(binary_str)\n    \n    # Perform the rotation using the formula left = right << d | right >> (num_bits - d)\n    left = int(binary_str[d:] + binary_str[:d], 2)\n    \n    # Return the rotated number\n    return left"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << 32) - 1\n    d = d % 32\n    return ((n << d) | (n >> (32 - d))) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n    \"\"\"\n    if d == 0:\n        return n\n    elif d < 0:\n        d = -d\n        n = (n >> d) | (n << (32 - d))\n    else:\n        n = (n << d) | (n >> (32 - d))\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # To rotate a 32-bit number by d bits, we need to perform the following steps:\n    # 1. Shift the bits to the right by d bits.\n    # 2. Shift the leftmost d bits to the left.\n    # 3. Add the original number to the rotated number.\n    # 4. Return the rotated number.\n\n    # Shift the bits to the right by d bits.\n    rotated = n >> d\n\n    # Shift the leftmost d bits to the left.\n    rotated_left = (n & ((1 << d) - 1)) << (32 - d)\n\n    # Add the original number to the rotated number.\n    result = rotated_left + rotated\n\n    return result\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n\n    Parameters:\n    n (int): the number to rotate\n    d (int): the number of bits to rotate by\n\n    Returns:\n    int: the rotated number\n    \"\"\"\n    # Convert n to a 32-bit binary string\n    n_str = format(n, '032b')\n    # Compute the length of n_str\n    n_len = len(n_str)\n    # Compute the number of bits to rotate by\n    if d >= n_len:\n        # The rotation is greater than or equal to the length of n_str\n        d = d % n_len\n    # Compute the number of bits to be rotated\n    n_rotated = n_len - d\n    # Compute the mask to apply to the lower bits\n    mask = (1 << n_rotated) - 1\n    # Compute the shifted value\n    shifted = ((n >> d) | (n << (32 - n_rotated))) & mask\n    # Compute the final result\n    result = shifted | (n & (~mask))\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary\n    binary_n = bin(n)[2:]\n    # Pad the binary with leading zeros\n    binary_n = '0'*(32-len(binary_n)) + binary_n\n    \n    # Compute the rotation\n    binary_n = binary_n[-d:] + binary_n[:-d]\n    # Convert back to decimal\n    n = int(binary_n, 2)\n    \n    return n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    # Define a regular expression pattern to match any whitespace character\n    pattern = re.compile(r'\\s+')\n    # Use the `sub()` method of the `re` module to replace all whitespace characters with an empty string\n    return pattern.sub('', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use the regular expression `\\s` to match any whitespace character\n    # (space, tab, newline, etc.)\n    pattern = r'\\s'\n    # Use the `re.sub()` function to replace all occurrences of whitespace in the string with an empty string\n    return re.sub(pattern, '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expressions to remove all whitespaces from the string\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    equal_count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            equal_count += 1\n    return equal_count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == z and y == x:\n        count += 1\n    if y == z and x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    # Loop through all possible pairs of elements in the list\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] == x[j] and x[i]!= y[j]:\n                count += 1\n            if x[i] == y[j] and x[i]!= x[j]:\n                count += 1\n            if y[i] == y[j] and y[i]!= x[j]:\n                count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == z and z == y:\n        count += 1\n    if y == z and z == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = n-1\n        while j >= i and arr[j] >= arr[i]:\n            j -= 1\n        if j < n-1:\n            count += n - j\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i\n        while j < n-1 and arr[j] > arr[j+1]:\n            j += 1\n        if j == n-1:\n            break\n        count += 1\n        left = j\n        right = n-1\n        while left < right:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                return j - i + 1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    \n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # check if array is already sorted\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return 0\n\n    # use binary search to find the number of rotations\n    l, r = 0, n - 1\n    count = 0\n    while l <= r:\n        mid = l + (r - l) // 2\n        if mid == 0 or arr[mid - 1] <= arr[mid]:\n            count = mid\n            r = mid - 1\n        else:\n            l = mid + 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n == 1 or n == 2:\n        return 0\n\n    # Find the minimum value in the array\n    min_val = min(arr)\n\n    # Find the maximum value in the array\n    max_val = max(arr)\n\n    # Check if all the values in the array are in the same half of the range\n    if min_val <= max_val / 2 and min_val + max_val - 1 >= max_val * 3 / 2:\n        return 0\n\n    # Check if all the values in the array are in the same half of the range\n    if min_val <= max_val / 2 and min_val + max_val - 1 >= max_val * 5 / 2:\n        return 0\n\n    # Check if all the values in the array are in the same half of the range\n    if min_val <= max_val / 2 and min_val + max_val - 1 >= max_val * 7 / 2:\n        return 0\n\n    # Check if all the values in the array are in the same half of the range\n    if min_val <= max_val / 2 and min_val + max_val - 1 >= max_val * 9 / 2:\n        return 0\n\n    # Count the number of rotations required to generate the sorted array\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                count += 1\n                break\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    # Initialize count variable\n    count = 0\n    \n    # Initialize left and right pointers for the array\n    left = 0\n    right = len(arr) - 1\n    \n    # Check if the array is already sorted\n    if arr == sorted(arr):\n        return 0\n    \n    # Traverse the array while left and right pointers are not crossed\n    while left < right:\n        # Swap the elements at left and right pointers\n        arr[left], arr[right] = arr[right], arr[left]\n        \n        # Check if the array is sorted\n        if arr == sorted(arr):\n            return count\n        \n        # Increment the count and update the pointers\n        count += 1\n        left += 1\n        right -= 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Create a copy of the array to avoid modifying the original array\n    arr = arr.copy()\n\n    # Traverse the array from the middle\n    for i in range(n // 2):\n        # If the current element is greater than the next element, swap them\n        if arr[i] > arr[i+1]:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n\n    count = 0\n    # Traverse the array from the end and check if the element is greater than the previous element\n    for i in range(n-2, -1, -1):\n        if arr[i] > arr[i+1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function returns True if the given number is a perfect square and False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 0\n    while i * i <= n:\n        i += 1\n    return i * i == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    sqrt_n = int(n ** 0.5) + 1\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # If the number is less than 2, it is not a perfect square\n    if n < 2:\n        return False\n    \n    # If the number is equal to 2, it is a perfect square\n    if n == 2:\n        return True\n    \n    # Initialize two variables, left and right, with values from 1 to n/2\n    left = 1\n    right = n // 2\n    \n    # Loop until left > right\n    while left <= right:\n        # Check if the sum of the two variables is equal to the given number\n        if left + right == n:\n            return True\n        \n        # If the sum is less than the given number, move the left variable to the right\n        if left + right < n:\n            left += 1\n        \n        # If the sum is greater than the given number, move the right variable to the left\n        else:\n            right -= 1\n    \n    # If the loop completes without finding a perfect square, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Find the square root of n\n    sqrt_n = int(n ** 0.5)\n\n    # Check if the square root is an integer\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # Check if the input number is less than 1\n    if n < 1:\n        return False\n\n    # Calculate the square root of the given number using the bisection method\n    low = 1\n    high = n\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        # If the square of mid is greater than n, update high to mid-1\n        if mid*mid > n:\n            high = mid - 1\n        # If the square of mid is less than or equal to n, update low to mid+1\n        else:\n            low = mid + 1\n\n    # If the square of the mid value is equal to n, then n is a perfect square\n    if mid*mid == n:\n        return True\n    # Otherwise, n is not a perfect square\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 2:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n\n    Args:\n        n (int): The number to check whether it is a perfect square or not.\n\n    Returns:\n        bool: `True` if the given number is a perfect square and `False` otherwise.\n    \"\"\"\n\n    # Check if the number is negative\n    if n < 0:\n        return False\n\n    # Initialize the variable `square` to `n`\n    square = n\n\n    # Check if the number is a perfect square by dividing it by its square root and comparing it with 1\n    while square * square > n:\n        square -= 1\n\n    # If the square is 1, then the number is a perfect square\n    if square == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # helper function to check whether a number is a perfect square\n    def is_perfect_square_helper(num):\n        # check if num is negative or zero\n        if num < 0 or num == 0:\n            return False\n        # check if num is odd\n        if num % 2 == 1:\n            return False\n        # check if num is a perfect square by iterating from 3 to num//2\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n\n    # check if n is a perfect square by calling the helper function\n    if is_perfect_square_helper(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if the number is 0 or 1\n    if n == 0 or n == 1:\n        return True\n\n    # check if the number is a perfect square\n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        i += 1\n\n    # if none of the above conditions are met, the number is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # check if n is a perfect square\n    for i in range(1, int(n**0.5) + 1):\n        if n % i**2 == 0:\n            return True\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # calculate the product of the numbers in the list\n    product = 1\n    for num in arr:\n        product *= num\n    \n    # check if the product is even or odd\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    \n    for num in arr: \n        product *= num\n        \n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    # calculate the product of all the numbers in the list\n    product = 1\n    for num in arr:\n        product *= num\n\n    # check if the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for l in lists:\n        total_sum = sum(l)\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_list = l\n    \n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n\n    for i in range(len(lists)):\n        temp_sum = sum(lists[i])\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            result = lists[i]\n\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = None\n    for list_ in lists:\n        if sum(list_) > max_sum:\n            max_sum = sum(list_)\n            max_list = list_\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the maximum sum and list of maximum sum to be empty lists\n    max_sum = []\n    max_list = []\n\n    # Loop through each list in the input lists\n    for i in range(len(lists)):\n        # Initialize a variable to keep track of the current sum of elements in the list\n        current_sum = 0\n\n        # Loop through each element in the current list\n        for j in range(len(lists[i])):\n            # Add the current element to the current sum\n            current_sum += lists[i][j]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum and list accordingly\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n\n    # Return the list of maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[0])):\n            if lists[i][j] < 0:\n                break\n            current_sum = sum(lists[i][j:]) + lists[i][j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    def find_max_sum(lst):\n        if len(lst) == 1:\n            return lst[0]\n        else:\n            return max(lst[0] + find_max_sum(lst[1:]), find_max_sum(lst[1:]))\n\n    max_sum = find_max_sum(lists)\n    return [lst for lst in lists if sum(lst) == max_sum]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Create a list to store the maximum sum list\n    max_sum_list = []\n\n    # Iterate through each sublist in the outer list\n    for sublist in lists:\n        # Initialize a variable to store the sum of the sublist\n        sum_sublist = 0\n\n        # Iterate through each element in the sublist\n        for element in sublist:\n            # Add the element to the sum of the sublist\n            sum_sublist += element\n\n        # Check if the current sum of the sublist is greater than the maximum sum so far\n        if sum_sublist > max_sum_list:\n            # If it is, update the maximum sum list\n            max_sum_list = sublist\n\n    # Return the maximum sum list\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    result = []\n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            result = lst\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize the max_sum variable to a very large number\n    max_sum = float('-inf')\n    # loop through the lists\n    for i in range(len(lists)):\n        # loop through the elements in the current list\n        for j in range(len(lists[i])):\n            # add the current element to the running sum and check if it's the new max_sum\n            current_sum = lists[i][j] + lists[i][j+1] + lists[i][j+2] + lists[i][j+3] + lists[i][j+4]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                # create a new list that only contains the current elements\n                max_list = [lists[i][j], lists[i][j+1], lists[i][j+2], lists[i][j+3], lists[i][j+4]]\n    # return the max_list\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    max_index = -1\n    current_run = 0\n    current_index = -1\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            if current_run == 0:\n                current_index = i\n            current_run += 1\n        else:\n            current_run = 0\n        if current_run > max_run:\n            max_run = current_run\n            max_index = i\n    return test_str[max_index:max_index + max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 1\n    max_count = 1\n    current_char = test_str[0]\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 1\n            current_char = test_str[i]\n\n    if count > max_count:\n        max_count = count\n\n    return max_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    max_index = 0\n    current_run = 0\n    current_index = 0\n    \n    for index, char in enumerate(test_str):\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n                max_index = current_index\n        else:\n            current_run = 0\n        \n        current_index = index\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_count = 0\n    max_run = 0\n    start = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            upper_count += 1\n        else:\n            if upper_count > max_run:\n                max_run = upper_count\n            upper_count = 0\n            start = i + 1\n\n    if upper_count > max_run:\n        max_run = upper_count\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 1\n    prev_char = None\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if prev_char.isupper():\n                if current_run > max_run:\n                    max_run = current_run\n            prev_char = char\n            current_run = 1\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    uppercase = False\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n            uppercase = False\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n\n    # Initialize variables\n    current_run = 0\n    max_run = 0\n    current_upper = False\n\n    # Loop over each character in the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            # If it is, update the current run and check if it is longer than the maximum run so far\n            if current_run + 1 > max_run:\n                max_run = current_run + 1\n            # Reset the current run\n            current_run = 1\n            current_upper = True\n        # If the character is not uppercase, reset the current run and the current_upper flag\n        else:\n            current_run = 0\n            current_upper = False\n\n    # Check if the last run was longer than the maximum run so far\n    if current_run + 1 > max_run:\n        max_run = current_run + 1\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_run = 0\n    current_run = 0\n    # iterate through each character in the string\n    for i in range(len(test_str)):\n        # if the character is uppercase, increment the current run counter\n        if test_str[i].isupper():\n            current_run += 1\n        # if the character is not uppercase, reset the current run counter and continue\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    # check if the last current run is longer than the previous max run\n    max_run = max(max_run, current_run)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    n = len(test_str)\n    i, count = 0, 0\n    max_run = 0\n    \n    while i < n:\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 0\n        \n        if count > max_run:\n            max_run = count\n        \n        i += 1\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    upper_count = 0\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            upper_count += 1\n            if upper_count > max_run:\n                max_run = upper_count\n        else:\n            upper_count = 0\n    return max_run\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n\n    :param nums: list of numbers\n    :return: the first odd number in the list or None if there are no odd numbers in the list\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup.count(K) > 0:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if K in tup:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        print(K, \"is in\", test_tup)\n    else:\n        print(K, \"is not in\", test_tup)"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if any(K in tup for tup in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        print(\"The given tuple contains the element:\", K)\n    else:\n        print(\"The given tuple does not contain the element:\", K)"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            print(\"False\")\n            return\n    \n    print(\"True\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must be of equal length.\")\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            print(\"Tuple 1 has an element larger than its corresponding element in tuple 2.\")\n            return False\n    \n    print(\"All elements in both tuples are smaller or equal to each other.\")\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('Tuple lengths do not match.')\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            print(f'Element {i} in test_tup1 ({test_tup1[i]}) is not smaller than its corresponding element in test_tup2 ({test_tup2[i]}).')\n            return False\n    print('All elements in both tuples are smaller.')\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Loop through each element in the second tuple\n    for i in range(len(test_tup2)):\n        # If the element in the second tuple is not smaller than the corresponding element in the first tuple, return False\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    # If no element in the second tuple is greater than or equal to the corresponding element in the first tuple, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples must have the same length.\"\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return \"One or more elements of the second tuple is not smaller than its corresponding element in the first tuple.\"\n    \n    return \"All elements of the second tuple are smaller than or equal to the corresponding elements of the first tuple.\""
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if the length of the two tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # iterate over the elements of the two tuples\n    for i in range(len(test_tup1)):\n        # compare the elements of the two tuples\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    # if we reach this point, all elements of both tuples are smaller than their corresponding elements in the first tuple\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the two tuples is not equal.\")\n        return\n    \n    # Check if each element of the first tuple is smaller than its corresponding element in the second tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(f\"{test_tup1[i]} is not smaller than {test_tup2[i]}\")\n            return"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same number of elements.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples must have the same length.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]