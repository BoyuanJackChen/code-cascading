[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Loop through the tuples and compare their elements\n    for element in test_tup1:\n        if element in test_tup2:\n            return element\n    # If no shared elements are found, return None\n    return None"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            if test_tup1[i] not in shared_elements:\n                shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Create sets for each list\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n\n    # Convert the sets back to lists\n    list_common_elements = list(common_elements)\n\n    return list_common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            if test_tup1[i] not in shared_elements:\n                shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Initialize an empty list to store the common elements\n    common_elements = []\n\n    # Iterate through the first list\n    for element in test_tup1:\n        # If the element is present in the second list, append it to the common_elements list\n        if element in test_tup2:\n            common_elements.append(element)\n\n    # Return the common_elements list\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the input tuples to sets to remove duplicates and find the intersection\n    shared_set = set(test_tup1) & set(test_tup2)\n    # Convert the set back to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Initialize an empty set to store the shared elements\n    shared_set = set()\n    \n    # Iterate over the tuples and add the shared elements to the set\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_set.add(test_tup1[i])\n    \n    # Convert the set to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n and returns True if it is not a prime number, False otherwise.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number,\n    and False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function checks whether a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if the number is not a prime number, otherwise it returns False.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if n is less than 2\n    if n < 2:\n        return False\n    \n    # check if n is divisible by any number from 2 to sqrt(n)\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n        \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of size n\n    hq.heapify(nums[:n])\n    # add the remaining numbers to the heap\n    for i in range(n, len(nums)):\n        hq.heappush(nums, nums[i])\n    # return the heap\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a max heap to store the n largest numbers\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # convert the list to a min heap\n    hq.heapify(nums)\n    # extract the largest n numbers and convert them back to a list\n    result = [hq.heappop(nums) for _ in range(n)]\n    # reverse the order of the extracted numbers\n    result.reverse()\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as input, and returns the n largest integers in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            hq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                hq.heappop(max_heap)\n                hq.heappush(max_heap, num)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap of size n\n    max_heap = hq.nsmallest(n, nums)\n    # extract the n largest integers from the max heap and return them in descending order\n    return [hq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Convert the list of numbers to a max heap\n    max_heap = nums[:]\n    hq.heapify(max_heap)\n    \n    # Remove the smallest n elements from the heap and add them to a new list\n    result = []\n    while len(result) < n:\n        result.append(max_heap.pop())\n    \n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap using the nums list as the data\n    max_heap = hq.nsmallest(n, nums)\n    # initialize an empty result list\n    result = []\n    # add the largest n integers from the max heap to the result list\n    for _ in range(n):\n        result.append(max_heap[0])\n        # remove the maximum value from the max heap\n        hq.heappop(max_heap)\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Initialize a min-heap with the first n elements of the list\n    max_heap = [nums[0]]\n    for i in range(1, n):\n        hq.heappushpop(max_heap, -nums[i])\n    # Extract the n largest elements from the heap and return them as a list\n    return [hq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums) # Create a max heap from the given list\n    largest = []\n    for _ in range(n): # Get the first n elements from the heap\n        largest.append(hq.heappop(nums)) # Add the largest element to the output list\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert list to heap using heappush() and heappop()\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n    \n    # Pop the n largest numbers from the heap\n    largest_nums = [hq.heappop(heap) for _ in range(n)]\n    \n    # Convert heap to list and return\n    return list(largest_nums)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    while x > 1:\n        if x % 2!= 0:\n            return False\n        x = x >> 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: \n        # if x is a power of 2, then it will have all 1's on its right side\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the given numbers to binary representation\n    x_bin = bin(x)[2:]\n    y_bin = bin(y)[2:]\n    \n    # Compare the lengths of the binary representations\n    if len(x_bin) == len(y_bin):\n        # Check if all the bits are the same in both binary representations\n        if x_bin == y_bin:\n            # If all the bits are the same, then the two numbers differ at one bit position only\n            return True\n    else:\n        # If the lengths of the binary representations are different, then the two numbers are not the same\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Convert the two numbers to binary strings\n    binary_str1 = bin(x)[2:]\n    binary_str2 = bin(x)[2:]\n    \n    # Check if the difference is only at one bit position\n    for i in range(len(binary_str1)):\n        if binary_str1[i]!= binary_str2[i]:\n            return True\n            \n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # converting binary string to integer\n    x = int(bin(x)[2:], 2)\n\n    # checking if the difference between the two numbers is 1 or not\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x-1)!= 0: \n        x &= (x-1)\n    if x == 1: \n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Initialize the variable to store the count of set bits in the binary representation of the number\n    count = 0\n\n    # Convert the number to binary representation\n    bin_str = bin(x)[2:]\n\n    # Iterate over the binary string and check if the count of set bits is one\n    for bit in bin_str:\n        if bit == '1':\n            count += 1\n        else:\n            break\n\n    # If the count of set bits is one, then the two numbers differ at one bit position only\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if x is a power of 2\n    if x > 0:\n        while x & 1 == 0:\n            x = x >> 1\n        if x == 1:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the number to binary string\n    binary_str = bin(x)[2:]\n    # Check if the length of the binary string is odd or even\n    if len(binary_str) % 2 == 0:\n        # If the length is even, check if the last two digits are the same\n        return binary_str[-2:] == binary_str[-4:-2]\n    else:\n        # If the length is odd, check if the last digit and the second-to-last digit are the same\n        return binary_str[-1] == binary_str[-3]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    while x!= 1:\n        if x & (x-1) == 0:\n            # If x is a power of 2, then its binary representation contains only one bit set\n            return True\n        x >>= 1\n    return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # filter out words with less than 4 characters\n    filtered_words = [word for word in words if len(word) >= 4]\n    # print the filtered words\n    print(filtered_words)\n"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # define a regular expression pattern to match words with 4 or more characters\n    pattern = r'\\b\\w{4,}\\b'\n\n    # use re.findall() method to find all the matches in the string\n    matches = re.findall(pattern, text)\n\n    # return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    \n    # Print the result\n    print(words)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Use regex to match words that have at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n\n    # Use re.findall to find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # Return the matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words using the space as the delimiter\n    words = re.findall('\\w+', text)\n\n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Remove all non-alphanumeric characters from the text\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n\n    # Split the text into words\n    words = text.split()\n\n    # Find all words that are at least 4 characters long\n    char_long_words = [word for word in words if len(word) >= 4]\n\n    return char_long_words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num*num)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # create an empty list to store the squared numbers\n    squared_nums = []\n    \n    # loop through each element in the input list\n    for num in nums:\n        # square the current number and append it to the squared_nums list\n        squared_nums.append(num**2)\n    \n    # return the squared_nums list\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    # Initialize variables\n    count = 0\n    min_rotations = float('inf')\n\n    # Loop through all possible rotations of the string\n    for i in range(len(str)):\n        # Reverse the current string and check if it is equal to the original string\n        if str[i:] == str[:i][::-1]:\n            # If so, increase the count and update the minimum rotations if necessary\n            count += 1\n            if count < min_rotations:\n                min_rotations = count\n\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    # Initialize the count and maximum count\n    count = 0\n    max_count = 0\n    \n    # Loop through all possible rotations of the string\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            # Compare the two rotations\n            if str[:i] == str[len(str)-j:len(str)-i]:\n                # Update the count if the count is greater than the maximum count\n                count = max(count, j-i)\n                # Update the maximum count\n                max_count = max(max_count, j)\n                \n    # Return the minimum count\n    return max_count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    for i in range(n):\n        # checking if the string can be formed by reversing the first i characters\n        # and then appending the first i characters\n        if str[:i] == str[i:][::-1] + str[:i]:\n            # calculating the minimum number of rotations required\n            # by counting the number of occurrences of the first i characters in the string\n            rotations = str.count(str[:i])\n            return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 1:\n        return 0\n    else:\n        for i in range(1, len(str)):\n            if str[i]!= str[0]:\n                return i\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    # Initialize variables to store the minimum number of rotations and the number of rotations required to get the same string\n    min_rot = 0\n    num_rot = 0\n\n    # Check for palindromes\n    for i in range(len(str)):\n        if str[i]!= str[-(i+1)]:\n            return \"The given string is not a palindrome\"\n\n    # Check for minimum number of rotations required to get the same string\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            if str[i] > str[i+1]:\n                min_rot += 1\n                temp = str[i]\n                str = str[:i] + str[i+1] + str[i] + temp + str[i+2:]\n                num_rot += 1\n            elif str[i] < str[i+1]:\n                min_rot += 1\n                temp = str[i]\n                str = str[:i+1] + str[i] + str[i+1] + temp + str[i+2:]\n                num_rot += 1\n\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Base case: if the string is empty, return 0 rotations\n    if len(str) == 0:\n        return 0\n\n    # Base case: if the string has only one character, return 0 rotations\n    if len(str) == 1:\n        return 0\n\n    # Recursive case: for each rotation, we need to make a recursive call with the string rotated by 1 character\n    min_rotations = float('inf')\n    for i in range(len(str)):\n        rotated_str = str[i:] + str[:i]\n        rotations = find_Rotations(rotated_str)\n        if rotations > 0:\n            min_rotations = min(min_rotations, rotations + 1)\n\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    if len(str) <= 1:\n        return 0\n\n    n = len(str)\n    min_rotations = float('inf')\n\n    for i in range(1, n):\n        j = i\n        while j < n and str[j] == str[i]:\n            j += 1\n\n        if j > i:\n            min_rotations = min(min_rotations, j - i)\n\n    return min_rotations + 1 if min_rotations!= 0 else 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    This function finds the minimum number of rotations (greater than 0) required to get the same string.\n    \n    Args:\n    str (str): The input string.\n    \n    Returns:\n    int: The minimum number of rotations required to get the same string.\n    \"\"\"\n    \n    # Initialize the character frequency dictionary\n    char_freq = {}\n    for char in str:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # Initialize the minimum number of rotations\n    min_rotations = 0\n    \n    # Iterate over all possible rotations\n    for i in range(1, len(str)):\n        # Check if the rotation is valid\n        if char_freq[str[i]] == char_freq[str[0]] and char_freq[str[i-1]] > char_freq[str[0]]:\n            # If the rotation is valid, increment the minimum number of rotations\n            min_rotations += 1\n    \n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    dp = [[n] * (n+1) for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if s[i:j] == s[j:]:\n                dp[i][j] = l - 1\n                for k in range(i, j):\n                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])\n    return dp[0][n-1]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize variables\n    min_rotations = 0\n    current_str = str\n    # Loop until current string is the same as original string\n    while current_str!= str:\n        # Increment the minimum number of rotations\n        min_rotations += 1\n        # Rotate the string by one character\n        current_str = current_str[1:] + current_str[0]\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, \"\")\n    return s[:len(s)-2] + s[-1] if s[-1] == ch else s[:len(s)-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    index = s.find(ch)\n    if index!= -1:\n        s = s[:index] + s[index+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # initialize pointers for first and last occurrence of the character\n    first = 0\n    last = len(s)-1\n\n    # loop through the string until the first and last occurrence of the character are found\n    while first < last:\n        # check if the current character is equal to the given character\n        if s[first] == ch:\n            # if it is, move the first pointer to the next character\n            first += 1\n        else:\n            # if it's not, move the first pointer to the current position\n            break\n\n    while first < last:\n        # check if the current character is equal to the given character\n        if s[last] == ch:\n            # if it is, move the last pointer to the previous character\n            last -= 1\n        else:\n            # if it's not, move the last pointer to the current position\n            break\n\n    # remove the first occurrence of the character from the string\n    s = s[:first] + s[first+1:]\n\n    # remove the last occurrence of the character from the string\n    s = s[:last] + s[last+1:]\n\n    # return the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, '')\n    if len(s) > 0:\n        return s[1:-1]\n    else:\n        return \"\""
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        return s[:s.find(ch)] + s[s.find(ch)+1:]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    s = s.replace(ch, \"\")\n    return s[1:-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # if character is first or last character in the string, return empty string\n    if s[0] == ch or s[-1] == ch:\n        return ''\n\n    # if character is neither first nor last character in the string, remove first and last occurrence of it\n    for i in range(len(s)):\n        if s[i] == ch:\n            s = s[:i] + s[i+1:]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return \"\"\n    elif s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return s[0] + remove_Occ(s[1:], ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # initializing variables\n    pos = -1\n    found = False\n    \n    # iterating through the string\n    for i in range(len(s)):\n        # if the character matches, and it is the first occurrence\n        if s[i] == ch and found == False:\n            pos = i\n            found = True\n            continue\n        # if the character matches and it is not the first occurrence\n        if s[i] == ch and found == True:\n            # removing the first occurrence\n            if pos == -1:\n                s = s[i+1:]\n            else:\n                s = s[:pos] + s[i+1:]\n            # resetting the position of the first occurrence\n            pos = -1\n            found = False\n    \n    # removing the last occurrence\n    if pos == -1:\n        s = s[:-1]\n    else:\n        s = s[:pos-1]\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        if s[0] == ch:\n            s = s[1:]\n        if s[-1] == ch:\n            s = s[:-1]\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # loop through each row of the matrix\n    for i in range(len(M)):\n        # loop through each element in the row\n        for j in range(len(M[i])):\n            # store the current element in a temporary variable\n            temp = M[i][j]\n            # loop through each element in the row after the current one\n            for k in range(j+1, len(M[i])):\n                # if the sum of the current element and the sum of the elements before it is smaller than the sum of the elements after it,\n                # swap the elements\n                if M[i][k] > (temp + M[i][j]):\n                    M[i][j], M[i][k] = M[i][k], M[i][j]\n                    temp = M[i][j]\n                    j = k"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            for k in range(len(M[0])-1, j, -1):\n                if M[i][k] > M[i][j]:\n                    M[i][k], M[i][j] = M[i][j], M[i][k]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Traverse through each row of the matrix\n    for i in range(n):\n        # Traverse through each element of the row\n        for j in range(n-i-1):\n            # If the element is smaller than the element on its right, swap them\n            if M[j][i] > M[j+1][i]:\n                M[j][i], M[j+1][i] = M[j+1][i], M[j][i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] > M[i][i] + M[j][j]:\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] < M[i][i] + M[j][j]:\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # get the number of rows and columns in the matrix\n    rows, cols = len(M), len(M[0])\n\n    # create a list to store the sum of each row\n    sums = [sum(row) for row in M]\n\n    # sort the matrix in ascending order based on the sums of the rows\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(rows):\n                if sums[i] > sums[k]:\n                    # swap the elements at positions i and k\n                    M[i][j], M[k][j] = M[k][j], M[i][j]\n                    # update the sum of the row at position i\n                    sums[i] = sum(M[i])\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the dimensions of the matrix\n    rows, cols = len(M), len(M[0])\n    \n    # Sort the matrix in ascending order\n    for j in range(cols):\n        for i in range(rows):\n            # Calculate the sum of the current row and column\n            row_sum = sum(M[i])\n            col_sum = sum([M[k][j] for k in range(rows)])\n            # Compare the row sum with the column sum\n            if row_sum < col_sum:\n                # Swap the rows if they are not already swapped\n                if i!= rows-1 and M[i]!= M[i+1]:\n                    M[i], M[i+1] = M[i+1], M[i]\n                # Swap the columns if they are not already swapped\n                if j!= cols-1 and M[i][j]!= M[i][j+1]:\n                    M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n    # Print the sorted matrix\n    print(\"Sorted Matrix:\")\n    for i in range(rows):\n        row = \" \".join(map(str, M[i]))\n        print(row)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Loop through each row in the matrix\n    for i in range(len(M)):\n        \n        # Find the sum of the current row\n        row_sum = sum(M[i])\n        \n        # Sort the current row in ascending order\n        M[i].sort()\n        \n        # Loop through each element of the current row and add it to the sum if it's not already there\n        for j in range(len(M[i])):\n            if M[i][j] not in M[i][:j] and M[i][j] not in M[i][j+1:]:\n                row_sum += M[i][j]\n        \n        # Divide the sum by the length of the current row to get the final sum of the matrix\n        M[i] = [row_sum/len(M[i])] + M[i][1:]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Initialize a new list to store the sorted matrix\n    sorted_M = []\n    # Loop through each row of the matrix\n    for i in range(n):\n        # Initialize variables to keep track of the minimum and maximum values in the row\n        min_val = M[i][0]\n        max_val = M[i][0]\n        # Loop through each element in the row and update the minimum and maximum values\n        for j in range(1, n):\n            if M[i][j] < min_val:\n                min_val = M[i][j]\n            elif M[i][j] > max_val:\n                max_val = M[i][j]\n        # Create a new list to store the elements in the row that fall within the minimum and maximum values\n        row_slice = [x for x in M[i] if x >= min_val and x <= max_val]\n        # Sort the row slice and append it to the sorted matrix\n        sorted_row = sorted(row_slice)\n        sorted_M.append(sorted_row)\n    # Combine all the sorted rows into a single sorted matrix\n    sorted_M = sorted(sorted_M, key=sum)\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # create a copy of the matrix to avoid modifying the original\n    M_sorted = [[0 for j in range(n)] for i in range(n)]\n    # loop through the rows of the matrix\n    for i in range(n):\n        # loop through the elements in each row, starting from the first element\n        for j in range(n):\n            # add up the elements in the row and add it to the sorted row\n            row_sum = sum(M[i][j:]) + M[i][j]\n            # add the row to the sorted matrix\n            M_sorted[i][j] = row_sum\n    return M_sorted"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    area = 0.5 * l * b\n    volume = area * h\n\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the volume\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculate the volume of the prism\n    V = l * b * h\n    \n    # return the volume\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #calculate the volume using Heron's formula\n    volume = (1/3)*(l*b*h)\n    #return the volume\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    print(\"The volume of the triangular prism is\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) :\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l * b * h) / 3"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    # Calculate the volume of the prism\n    V = l * b * h\n    \n    # Print the volume of the prism\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6.0\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, width and height of a triangular prism as input parameters and returns its volume.\n    \"\"\"\n    # Calculate the volume of the triangular prism\n    volume = 0.5 * l * b * h\n\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z](?=.*[a-z])[a-z]*_[a-z]*'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_'\n\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z][a-z0-9]*)_([a-z][a-z0-9]*)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?i)(?<=\\w)(?=[a-z])')\n    matches = pattern.finditer(text)\n    if len(matches) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])'\n    matches = re.findall(pattern, text.lower())\n    return bool(matches)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<!\\w)_(?=[a-z])'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+[_][a-z]+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    underscore_pattern = r'_+[a-z]+_'\n    return bool(re.search(underscore_pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define regular expression pattern for matching lowercase sequences with underscores\n    pattern = r'(?<![a-zA-Z])([a-z]+)_+(?=[a-zA-Z])'\n    \n    # Use re.search() method to search for pattern in input string\n    matches = re.search(pattern, text)\n    \n    # If pattern is found, return True\n    if matches:\n        return True\n    \n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_?[a-z]*')\n    matches = pattern.findall(text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string, no_of_chars):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    result = []\n    for char in string:\n        if char not in char_set:\n            result.append(char)\n    return result[:no_of_chars]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Convert the string to a list of characters\n    list_str = list(string)\n\n    # Create a list of characters to be removed from the first string\n    char_list = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n\n    # Remove characters from the first string which are present in the second string\n    for i in range(len(list_str)):\n        if list_str[i] in char_list:\n            list_str.pop(i)\n\n    # Convert the list of characters to a string and return it\n    return ''.join(list_str)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    char_set = set(string)\n    char_list = list(char_set)\n    sorted_char_list = sorted(char_list)\n\n    for i in range(len(char_list)):\n        if char_list[i] in sorted_char_list:\n            char_list.remove(char_list[i])\n\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char not in remove_chars:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    # create a list of the ASCII characters\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n\n    # create a list of characters that should be removed from the first string\n    remove_list = [c for c in string if c in char_list]\n\n    # remove the characters from the first string\n    result = [c for c in string if c not in remove_list]\n\n    # join the list of characters into a string\n    result = ''.join(result)\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string1, string2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string2)\n    return ''.join([char for char in string1 if char not in char_set])"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    # Create an empty list to store the characters.\n    result_list = []\n    # Loop through each character in the input string.\n    for char in string:\n        # If the character is not present in the NO_OF_CHARS list, append it to the result_list.\n        if char not in NO_OF_CHARS:\n            result_list.append(char)\n    return result_list"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Convert the string into a list of characters\n    char_list = list(string)\n\n    # Initialize an empty string to store the modified string\n    modified_string = \"\"\n\n    # Iterate through each character in the list\n    for char in char_list:\n\n        # If the character is not present in the second string, add it to the modified string\n        if char not in string:\n            modified_string += char\n\n    # Return the modified string\n    return modified_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for char in string:\n        if char in string[string.find(char)+1:]:\n            string = string.replace(char, \"\", 1)\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n\n    # Get the length of the character list\n    length = len(char_list)\n\n    # Create a new list to store the unique characters\n    unique_char_list = []\n\n    # Iterate through the character list\n    for i in range(length):\n        # If the current character is not in the second string, add it to the new list\n        if char_list[i] not in unique_char_list:\n            unique_char_list.append(char_list[i])\n\n    # Convert the new list of unique characters back to a string and return it\n    return ''.join(unique_char_list)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the occurrence of each number in the array\n    counts = {}\n    # Iterate through each number in the array\n    for num in arraynums:\n        # If the number is already in the dictionary, increment the count by 1\n        if num in counts:\n            counts[num] += 1\n        # If the number is not in the dictionary, add it with a count of 1\n        else:\n            counts[num] = 1\n    # Iterate through each number in the dictionary and check if its count is greater than 1\n    for num in counts:\n        if counts[num] > 1:\n            return True\n    # If no duplicate numbers are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a dictionary to store unique elements of the array\n    unique_dict = {}\n    \n    # iterate through the array and add unique elements to the dictionary\n    for num in arraynums:\n        if num not in unique_dict:\n            unique_dict[num] = True\n    \n    # check if there are any duplicate elements in the dictionary\n    if len(unique_dict)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store unique elements\n    unique_dict = {}\n\n    # loop through the array and add unique elements to the dictionary\n    for num in arraynums:\n        if num in unique_dict:\n            return True\n        else:\n            unique_dict[num] = True\n\n    # if no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store the unique elements\n    unique_nums = set()\n\n    # Iterate through the array\n    for num in arraynums:\n        # If the number is not in the set, add it and return True\n        if num not in unique_nums:\n            unique_nums.add(num)\n            return True\n\n    # If we reach this point, the array does not contain any duplicate elements\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the element count for each number in the array\n    count = {}\n    for num in arraynums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Check if any number in the dictionary has a count greater than 1\n    for num, count in count.items():\n        if count > 1:\n            return True\n    \n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements of the array\n    unique_set = set(arraynums)\n    # check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store the unique elements of the array\n    unique_set = set(arraynums)\n    # check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and (x % 10 == 4 or x % 10 == 7):\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x == 0: \n        return 'The number is 0' \n    elif x % 2 == 0: \n        return 'The number is a woodball' \n    else: \n        return 'The number is not a woodball' "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0: \n        return False \n    elif x % 2 == 0: \n        for i in range(3, int(x**0.5)+1, 2): \n            if x % i == 0: \n                return False \n        return True \n    else: \n        return True "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 100 and x <= 200:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    if x in [3, 6, 9, 12, 15, 18, 21]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    # Define the set of valid woodball numbers\n    valid_woodalls = {1, 5, 10, 50, 100, 500, 1000}\n\n    # Check if the input is in the valid set\n    if x in valid_woodalls:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 1000:\n        return \"Woodball\"\n    else:\n        return \"Not a woodball\""
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num //= 10\n    return rev_num == (2 * rev_num + 1)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    if num < 0:\n        num = -num\n    num_str = str(num)\n    reverse = int(num_str[::-1])\n    \n    if reverse < 2*num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    return num - 2 * reverse\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*num == num + num\n\nnum = int(input(\"Enter a number: \"))\nif rev(num):\n    print(\"The number is one less than twice its reverse.\")\nelse:\n    print(\"The number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num*10 + num % 10\n        num //= 10\n    if reversed_num == 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return str(num) == str(int(num[::-1]) + 1)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num + reverse == 2 * reverse - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    temp = num\n    \n    # convert the given number to integer and store it in rev_num\n    while(temp!= 0):\n        rem = temp % 10\n        rev_num = (rev_num * 10) + rem\n        temp = temp // 10\n    \n    # check if the reverse of the given number is one less than twice the reverse of the given number\n    if(abs(rev_num - num) < 2 * num):\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    rev_num = 0\n    temp = num\n\n    # Reverse the number\n    while temp > 0:\n        digit = temp % 10\n        rev_num = rev_num * 10 + digit\n        temp //= 10\n\n    # Check if the original number is one less than twice its reverse\n    if num - 2 * rev_num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return reverse == num**2 - 2"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(1, 10):\n        for j in arr:\n            if i <= j <= 9:\n                max_num = max(max_num, i*j)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True) # Sort the list in reverse order\n    max_num = 0 # Initialize the maximum number variable\n    for i in range(len(arr)) : # Loop through each digit in the list\n        max_num += (int(arr[i]) ** len(arr)) # Calculate the maximum number formed with that digit and the remaining digits in the list\n    return max_num # Return the maximum number"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    # Convert the list of digits into an integer\n    num = int(''.join(map(str, arr)))\n    \n    # Convert the integer into a list of digits\n    arr_digits = []\n    while num > 0:\n        arr_digits.append(num % 10)\n        num //= 10\n    \n    # Initialize the maximum number formed with the digits\n    max_num = 0\n    \n    # Loop through all possible numbers and check if they can be formed with the given digits\n    for i in range(1, 10):\n        num = i\n        for j in range(len(arr_digits)):\n            num *= 10\n            num += arr_digits[j]\n        if num > max_num:\n            max_num = num\n            \n    # Return the maximum number formed with the digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) :\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)-1):\n        max_num += int(arr[i])*int(arr[i+1])\n    max_num += int(arr[-1])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max(max_num, arr[i]*(10**i))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        temp = 0\n        for j in range(i, len(arr)):\n            temp = temp*10 + arr[j]\n            if temp > max_num:\n                max_num = temp\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    power = 0\n    for i in range(len(arr)-1,-1,-1):\n        num = int(arr[i])\n        if num == 0:\n            continue\n        if num > max_num:\n            max_num = num\n            power = i+1\n    return max_num**(power)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(10):\n        for j in range(1, len(arr)):\n            if arr[j] == i:\n                max_num += arr[j]**j\n        if max_num > 9:\n            max_num -= 9\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    This function takes a list of digits as input and returns the maximum possible number that can be formed by concatenating the digits.\n    '''\n    arr.sort(reverse=True) # Sort the digits in descending order\n    max_num = 0\n    for digit in arr:\n        max_num = max_num * 10 + digit # Multiply the current maximum number by 10 and add the current digit to it\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)-1,-1,-1) :\n        max_num += (2**i)*(arr[i]-1)\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y): \n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n\n    # If both numbers are positive, their signs will be opposite.\n    if x > 0 and y > 0:\n        return \"The two numbers have opposite signs\"\n\n    # If one number is positive and other is negative, then their signs will be opposite.\n    elif x > 0 and y < 0:\n        return \"The two numbers have opposite signs\"\n\n    # If one number is negative and other is positive, then their signs will be opposite.\n    elif x < 0 and y > 0:\n        return \"The two numbers have opposite signs\"\n\n    # If both numbers are negative, their signs will also be opposite.\n    elif x < 0 and y < 0:\n        return \"The two numbers have opposite signs\"\n\n    # If one number is zero and other is positive or negative, then their signs will be opposite.\n    elif x == 0 and (y > 0 or y < 0):\n        return \"The two numbers have opposite signs\"\n\n    # If one number is zero and other is zero, then their signs will be equal.\n    elif x == 0 and y == 0:\n        return \"The two numbers have equal signs\"\n\n    # If one number is zero and other is negative, then their signs will be opposite.\n    elif x == 0 and y < 0:\n        return \"The two numbers have opposite signs\"\n\n    # If one number is zero and other is positive, then their signs will be opposite.\n    elif x == 0 and y > 0:\n        return \"The two numbers have opposite signs\"\n\n    # If one number is positive and other is zero, then their signs will be equal.\n    elif x > 0 and y == 0:\n        return \"The two numbers have equal signs\"\n\n    # If one number is negative and other is zero, then their signs will be equal.\n    elif x < 0 and y == 0:\n        return \"The two numbers have equal signs\"\n\n    # If none of the above conditions are met, then their signs are not opposite.\n    else:\n        return \"The two numbers have not opposite signs\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0 and y<0) or (x>0 and y>0):\n        return \"The signs of both the numbers are opposite.\"\n    elif x<0 and y>0:\n        return \"The first number has negative sign and the second number has positive sign.\"\n    elif x>0 and y<0:\n        return \"The first number has positive sign and the second number has negative sign.\"\n    else:\n        return \"The signs of both the numbers are same.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # check if the signs of x and y are opposite\n    if (x < 0 and y >= 0) or (x >= 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function will check whether two integers have opposite sign or not.\n\n    :param x: first integer to be checked\n    :param y: second integer to be checked\n    :return: True if the two integers have opposite sign, else False.\n    \"\"\"\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return \"The given numbers have opposite signs.\"\n    else:\n        return \"The given numbers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # checking if x is greater than y\n    if x > y:\n        # swapping x and y\n        x, y = y, x\n    # checking if x is zero\n    if x == 0:\n        # return True if y is zero\n        return y == 0\n    # calculating the sign of y\n    y_sign = y / abs(y)\n    # checking if the sign of x is same as the sign of y\n    if x / abs(x) == y_sign:\n        # return True if x and y have opposite signs\n        return True\n    # otherwise return False\n    return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        return \"Both numbers are zero.\"\n    elif x == 0:\n        return \"Number 2 has opposite sign to number 1.\"\n    elif y == 0:\n        return \"Number 1 has opposite sign to number 2.\"\n    elif x < 0 and y < 0:\n        return \"Both numbers have opposite signs.\"\n    elif x < 0 and y > 0:\n        return \"Number 2 has opposite sign to number 1.\"\n    elif x > 0 and y < 0:\n        return \"Number 1 has opposite sign to number 2.\"\n    else:\n        return \"Both numbers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Find the largest prime factor of n\n    largest_prime = 2\n    while largest_prime**2 <= n:\n        largest_prime += 1\n\n    # Determine the number of times n divides the largest prime factor\n    divides = 0\n    for i in range(2, largest_prime):\n        if n % i == 0:\n            divides += 1\n\n    # Return the nth octagonal number\n    return n + divides"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Determine whether a given number is an octagonal number or not.\n    \"\"\"\n    if n < 1:\n        return False\n    for i in range(1, int(n**0.5) + 1):\n        if n % (i*i) == 0:\n            return False\n    return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the base case\n    if n == 1:\n        return 1\n\n    # Calculate the base 10 of n\n    base_ten = n // 10\n\n    # Calculate the octagonal number\n    octagonal = 10 * base_ten * (base_ten + 1) + 10 * n\n\n    return octagonal\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a, b = 1, 1\n    for i in range(n):\n        print(a)\n        a, b = b, a + b\n    return a\n\noct_n = int(input(\"Enter the value of n: \"))\nresult = is_octagonal(oct_n)\nprint(\"The {}th octagonal number is: {}\".format(oct_n, result))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    for i in range(1, n + 1):\n        j = 1\n        while j <= 2 * i:\n            k = 2 * i - j\n            if j == k:\n                print(f\"{i} x {j} = {i * j}\")\n            elif j < k:\n                print(f\"{i} x {j} = {i * j}\")\n                j += 1\n            else:\n                print(f\"{i} x {j} = {i * j}\")\n                j += 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * n - 1 + is_octagonal(n - 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Returns True if n is an octagonal number, False otherwise.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_octagonal(n - 1) + is_octagonal(n - 2) == n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the base of the octagonal number system\n    base = 12\n\n    # Initialize the count of the number of even numbers up to the base\n    count = 0\n\n    # Iterate through the numbers up to the nth octagonal number\n    for i in range(1, n+1):\n        # Check if the number is even\n        if i % 2 == 0:\n            count += 1\n\n        # Check if the current number is an octagonal number\n        if count == base:\n            return i\n\n        # Check if the number is an octagonal number\n        if count == base - 1 and i!= n:\n            return i\n\n    return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) ** 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    for i in range(1, n+1):\n        a *= i\n    return a\n\ndef nth_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        a = (i*i*i)\n        if a == is_octagonal(i):\n            return a\n    return -1\n\nprint(nth_octagonal(10))"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a defaultdict to store the count of substrings with the sum of digits equal to the length of the substring\n    count_dict = defaultdict(int)\n\n    # Loop through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the sum of digits of the substring is equal to its length\n            substring = s[i:j+1]\n            sum_of_digits = sum(int(digit) for digit in substring)\n            if sum_of_digits == len(substring):\n                count_dict[substring] += 1\n\n    # Return the count of substrings with the sum of digits equal to the length of the substring\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    digit_count = defaultdict(int)\n    total_sum = 0\n    \n    # Count the total sum of digits in the string\n    for i in range(len(s)):\n        digit_count[s[i]] += 1\n        total_sum += s[i]\n    \n    # Iterate through all substrings and count their sum of digits\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            # Check if the sum of digits is equal to the length of the substring\n            if sum(map(int, substring)) == len(substring):\n                count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    This function counts the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    n = len(s)\n    dp = [0] * n\n    dp[0] = 1\n    \n    for i in range(1, n):\n        if s[i] == '0':\n            dp[i] = 0\n        else:\n            for j in range(i):\n                if s[j] == '0' and s[i] == '9':\n                    dp[i] += dp[j]\n    \n    count = sum(dp)\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings\n    count_dict = defaultdict(int)\n\n    # loop through the string\n    for i in range(len(s)):\n        # initialize variables for current substring\n        current = s[i]\n        start = i\n        # loop through the rest of the string\n        while i < len(s) - 1:\n            # check if current substring ends with a digit\n            if s[i].isdigit():\n                # check if sum of digits is equal to length of substring\n                if sum([int(digit) for digit in s[i:i+current]]) == len(s[i:i+current]):\n                    # if yes, increment the count of substrings\n                    count_dict[current] += 1\n            # move the substring to the right\n            current = s[i+1]\n            i += 1\n\n    # return the dictionary containing the count of substrings\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Define a dictionary to store the count of substrings\n    counts = defaultdict(int)\n\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Create a substring of the current character\n        substring = s[i:i+1]\n\n        # Get the sum of digits in the substring\n        sum_digits = sum(int(d) for d in substring)\n\n        # If the sum of digits is equal to the length of the substring, add 1 to the count\n        if sum_digits == len(substring):\n            counts[substring] += 1\n\n    # Return the count of substrings\n    return counts"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    def count_substrings(s):\n        n = len(s)\n        count = 0\n        dp = defaultdict(int)\n        dp[0] = 1\n        for i in range(n):\n            for j in range(i+1, n+1):\n                if sum(int(digit) for digit in s[i:j]) == j-i:\n                    count += dp[j-i]\n        return count\n\n    return count_substrings(s)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_counts = defaultdict(int)\n    for char in s:\n        digit_counts[ord(char)] += 1\n    count = 0\n    for char in s:\n        for i in range(len(s)):\n            substr = s[i:i+len(char)]\n            if sum(ord(c) - ord('0') for c in substr) == len(substr):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = defaultdict(int)\n    dp[0] = 1\n    for i in range(1, n):\n        if s[i] == '0':\n            continue\n        for j in range(i):\n            if s[i] == s[j] and abs(int(s[i]) - int(s[j])) == i - j:\n                dp[i] += dp[j]\n    return dp[n-1]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = defaultdict(int)\n    for i in range(n):\n        count[i] = 1\n    for i in range(n-2):\n        count[i+1] += count[i]\n    for i in range(n-3):\n        count[i+2] += count[i]\n    for i in range(n-4):\n        count[i+3] += count[i]\n    count[n-1] += count[n-2]\n    count[n-2] += count[n-3]\n    count[n-3] += count[n-4]\n    count[n-4] += count[n-5]\n    count[n-5] += count[n-6]\n    count[n-6] += count[n-7]\n    count[n-7] += count[n-8]\n    count[n-8] += count[n-9]\n    count[n-9] += count[n-10]\n    count[n-10] += count[n-11]\n    count[n-11] += count[n-12]\n    count[n-12] += count[n-13]\n    count[n-13] += count[n-14]\n    count[n-14] += count[n-15]\n    count[n-15] += count[n-16]\n    count[n-16] += count[n-17]\n    count[n-17] += count[n-18]\n    count[n-18] += count[n-19]\n    count[n-19] += count[n-20]\n    count[n-20] += count[n-21]\n    count[n-21] += count[n-22]\n    count[n-22] += count[n-23]\n    count[n-23] += count[n-24]\n    count[n-24] += count[n-25]\n    count[n-25] += count[n-26]\n    count[n-26] += count[n-27]\n    count[n-27] += count[n-28]\n    count[n-28] += count[n-29]\n    count[n-29] += count[n-30]\n    count[n-30] += count[n-31]\n    count[n-31] += count[n-32]\n    count[n-32] += count[n-33]\n    count[n-33] += count[n-34]\n    count[n-34] += count[n-35]\n    count[n-35] += count[n-36]\n    count[n-36] += count[n-37]\n    count[n-37] += count[n-38]\n    count[n-38] += count[n-39]\n    count[n-39] += count[n-40]\n    count[n-40] += count[n-41]\n    count[n-41] += count[n-42]\n    count[n-42] += count[n-43]\n    count[n-43] += count[n-44]\n    count[n-44] += count[n-45]\n    count[n-45] += count[n-46]\n    count[n-46] += count[n-47]\n    count[n-47] += count[n-48]\n    count[n-48] += count[n-49]\n    count[n-49] += count[n-50]\n    count[n-50] += count[n-51]\n    count[n-51] += count[n-52]\n    count[n-52] += count[n-53]\n    count[n-53] += count[n-54]\n    count[n-54] += count[n-55]\n    count[n-55] += count[n-56]\n    count[n-56] += count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # create a defaultdict to store the count of substrings for each digit sum\n    digit_count = defaultdict(int)\n\n    # loop through each character in the string\n    for i in range(len(s)):\n\n        # get the current character and its digit sum\n        current_char = s[i]\n        current_sum = int(current_char)\n\n        # loop through each possible substring with the current character\n        for j in range(i, len(s)):\n\n            # get the next character and its digit sum\n            next_char = s[j]\n            next_sum = int(next_char)\n\n            # if the sum of digits is equal to the length of the substring, increment the count\n            if abs(current_sum - next_sum) == len(current_char):\n                digit_count[current_sum] += 1\n\n    # return the sum of the counts for each digit sum\n    return sum(digit_count.values())"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Find the smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n\n    if not xs:\n        raise ValueError(\"List cannot be empty.\")\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize the smallest number to the first number in the list\n    smallest = xs[0]\n    # loop through the remaining numbers in the list\n    for x in xs[1:]:\n        # if the current number is smaller than the smallest number, update the smallest number\n        if x < smallest:\n            smallest = x\n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0] # assume smallest is first element of xs\n    for x in xs[1:]: # iterate over remaining elements\n        if x < smallest: # if current element is smaller\n            smallest = x # update smallest\n    return smallest # return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables to store the maximum difference and the current difference\n    max_diff = 0\n    curr_diff = 0\n    \n    # Iterate over the list of tuples and calculate the current difference\n    for i in range(len(test_list) - 1):\n        curr_diff = abs(test_list[i][0] - test_list[i+1][0])\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    \n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize variables\n    max_diff = 0\n    curr_diff = 0\n\n    # Loop through each pair of tuples in the list\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the two tuples\n            diff = abs(test_list[i][1] - test_list[j][1])\n            # Update the current difference if the new difference is greater\n            if diff > curr_diff:\n                curr_diff = diff\n                # Update the maximum difference if the current difference is greater\n                if curr_diff > max_diff:\n                    max_diff = curr_diff\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    n = len(test_list)\n    max_diff = float('-inf')  # initialize max_diff to negative infinity\n    \n    # iterate through all possible pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # calculate the difference between the elements and update max_diff if necessary\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize max difference to negative infinity\n    max_diff = float('-inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the tuples and update max_diff if necessary\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Initialize the maximum difference to zero\n    max_diff = 0\n\n    # Loop through the list\n    for i in range(len(test_list)):\n        # If the difference between the current element and the next element is greater than the previous maximum difference, update the maximum difference\n        if test_list[i][1] - test_list[i][0] > max_diff:\n            max_diff = test_list[i][1] - test_list[i][0]\n\n    # Return the maximum difference\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables\n    max_diff = 0\n    \n    # Loop through the list of tuples\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the two tuples\n            diff = abs(test_list[i][1]-test_list[j][1])\n            \n            # Update the maximum difference if necessary\n            if diff > max_diff:\n                max_diff = diff\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list += recursive_list_sum(item)\n            else:\n                flat_list.append(item)\n        return sum(flat_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # Recursive case: add the first element of the list to the sum of the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:  # base case: empty list\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])  # recursive case: add first element and sum remaining elements\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                flatten(item)\n            else:\n                yield item\n\n    flattened_list = list(flatten(data_list))\n    sum_of_elements = sum(flattened_list)\n    return sum_of_elements"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list, index=0, total=0):\n    \"\"\"\n    Recursive function to flatten a list and sum all of its elements.\n    \"\"\"\n    if index < len(data_list):\n        if isinstance(data_list[index], list):\n            total = recursive_list_sum(data_list[index], 0, total)\n        else:\n            total += data_list[index]\n        return recursive_list_sum(data_list, index + 1, total)\n    else:\n        return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(nested_list):\n        if isinstance(nested_list, list):\n            flat_list = []\n            for item in nested_list:\n                if isinstance(item, list):\n                    flat_list.extend(flatten(item))\n                else:\n                    flat_list.append(item)\n            return flat_list\n        else:\n            return [nested_list]\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    # Flatten the list by converting each nested list into a single list\n    flattened_list = [num for sublist in data_list for num in sublist]\n    \n    # Sum all of the elements in the flattened list\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: If the input list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: Add the first element to the result of flattening the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            recursive_list_sum(item)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(input_list):\n        '''\n        Flatten a nested list.\n        '''\n        result = []\n        for item in input_list:\n            if isinstance(item, list):\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and counts the number of positive numbers in the list.\n    '''\n    pos_count = 0\n    for num in lst:\n        if num > 0:\n            pos_count += 1\n    return pos_count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    if n < 0:\n        raise ValueError(\"Bell numbers cannot be negative.\")\n    elif n == 0:\n        return 1\n    else:\n        # calculate the number of ways to partition the first n Bell numbers\n        num_ways = 1\n        for i in range(1, n+1):\n            num_ways *= i\n        # multiply by the number of ways to partition the last n-1 Bell numbers\n        for i in range(1, n-1):\n            num_ways *= i\n        # return the final answer\n        return num_ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1):\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # The number of ways to partition a set of Bell numbers is equal to the number of partitions of n into 2.\n    return n*(n-1)//2\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n-1))//2"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1, 1]  # the first two Bell numbers\n    ways = [1] * (n+1)  # initialize the ways list with 1's\n    \n    for i in range(2, n+1):\n        for j in range(1, i//2+1):\n            if j < bell[i-1]:\n                ways[i] += ways[j] + ways[i-j]\n                bell[i] = j\n        bell.append(i)\n        \n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the number of ways to partition the set to 0\n    ways_to_partition = 0\n\n    # Iterate over all possible values of n\n    for i in range(n+1):\n        # Check if the current value of n is a Bell number\n        if is_bell_number(i):\n            # Increment the number of ways to partition the set by 1\n            ways_to_partition += 1\n\n    return ways_to_partition\n\ndef is_bell_number(n):\n    \"\"\"\n    Check if a number is a Bell number.\n    \"\"\"\n    # Initialize the number of Bell numbers to 0\n    bell_count = 0\n\n    # Iterate over all possible values of n\n    for i in range(1, n+1):\n        # Check if the current value of n is a multiple of i\n        if n % i == 0:\n            # Increment the number of Bell numbers by 1\n            bell_count += 1\n\n    # Check if the number of Bell numbers is equal to n\n    if bell_count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Create a list of Bell numbers up to n\n    bell_numbers = [0] * (n + 1)\n    bell_numbers[0], bell_numbers[1] = 1, 1\n    # Loop through the list and calculate the number of ways to partition it\n    ways = 0\n    for i in range(2, n + 1):\n        ways += (i - 1) * bell_numbers[i]\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n\nprint(bell_number(5)) # Output: 15"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return (n*(n-1))//2"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables to store the number of ways to partition and the number of 1's in each partition\n    ways = [0] * (n + 1)\n    ones = [0] * (n + 1)\n    # Fill in the variables as described in the problem statement\n    #...\n    return ways[n]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if the array is empty or not\n    if len(A) < 2:\n        return True\n\n    # Check if the array is monotonic or not\n    if A[0] <= A[1]:\n        if len(A) > 2:\n            for i in range(1, len(A)-1):\n                if A[i] <= A[i-1] or A[i] >= A[i+1]:\n                    return False\n    else:\n        if len(A) > 2:\n            for i in range(1, len(A)-1):\n                if A[i] >= A[i-1] or A[i] <= A[i+1]:\n                    return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n\n    # check if the array is increasing or decreasing\n    if A[0] < A[n-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes in an array A and returns True if the array is monotonic, \n    and False otherwise. A monotonic array is one where either all its elements \n    are in increasing order or all its elements are in decreasing order.\n\n    If all elements in the array A are in increasing order, the function returns True.\n    If all elements in the array A are in decreasing order, the function returns False.\n    If the array has a mix of both increasing and decreasing elements, the function \n    returns None.\n    '''\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n    elif all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return False\n    else:\n        return None"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Check whether an array is monotonic or not.\n\n    Parameters:\n    A (list): List of integers.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    if len(A) <= 1:\n        return True\n    \n    # Check if all elements are the same or increasing or decreasing\n    if A[0] <= A[-1] or A[0] >= A[-1]:\n        return True\n    \n    # Check if there are any decreasing elements\n    for i in range(1, len(A)-1):\n        if A[i] >= A[i-1] and A[i] <= A[i+1]:\n            return False\n    \n    # If we reach this point, all elements are either the same or increasing\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    elif A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    This function checks whether the given array A is monotonic or not.\n\n    Args:\n        A (list): The input array to be checked for monotonicity.\n\n    Returns:\n        bool: True if A is monotonic, False otherwise.\n    '''\n\n    if len(A) < 2:\n        return True\n    \n    if A[0] <= A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return is_Monotonic(A[1:]) and A[0] >= A[1]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    \n    for i in range(1, n):\n        if A[i] <= A[i-1]:\n            return False\n            \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Find the first and last elements of the array\n    first = A[0]\n    last = A[-1]\n\n    # Check if the first element is less than the last element\n    if first >= last:\n        return True\n\n    # Iterate through the array starting from the second element\n    for i in range(1, len(A)-1):\n        # Check if the current element is less than the previous element\n        if A[i] <= A[i-1]:\n            return False\n\n    # If the array is monotonic, the last element should be greater than or equal to the first element\n    if A[-1] <= first:\n        return False\n    else:\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A and checks whether the elements of the array are monotonic or not.\n    A monotonic array is a sequence in which any two adjacent elements are either in the same direction or in the opposite direction.\n\n    Examples:\n    Input:  [1, 2, 2, 3, 4, 5]\n    Output: True\n\n    Input:  [6, 5, 4, 3, 2, 1]\n    Output: False\n\n    Input:  [1, 2, 2, 1, 1]\n    Output: True\n\n    Input:  [1, 1, 1, 1, 1]\n    Output: True\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in s:\n        if i not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if i not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not isinstance(l, list) or not isinstance(s, list):\n        return False\n    for i in range(len(l)):\n        if l[i] in s and is_sublist(l[i:], s):\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    if s[0] not in l:\n        return False\n    return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) >= len(s):\n        if l[:len(s)] == s:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    i = 0\n    j = 0\n    while i < len(l) and j < len(s):\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n    return j == len(s)"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if all(len(t) == len(Input[0]) for t in Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns True if all the tuples have equal length, else False.\n    \"\"\"\n    for tuple in Input:\n        if len(tuple)!= len(set(tuple)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Loop through each tuple in the Input list\n    for tuple_1 in Input:\n        # Get the length of the tuple\n        len_1 = len(tuple_1)\n        # Loop through each tuple in the Input list\n        for tuple_2 in Input:\n            # If the length of the current tuple is not equal to the length of the other tuple, return False\n            if len_1!= len(tuple_2):\n                return False\n    # If all tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # Check if the input is a list of tuples\n    if not all(isinstance(x, tuple) for x in Input):\n        return \"Input is not a list of tuples.\"\n    \n    # Check if all the tuples have equal length\n    for i in range(len(Input[0])):\n        if any(len(x)!= len(Input[0]) for x in Input):\n            return \"All tuples in the list have different lengths.\"\n\n    return \"All tuples in the list have equal lengths.\""
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for tuple in Input:\n        if len(tuple)!= len(set(tuple)):\n            count += 1\n    if count == 0:\n        print(\"All tuples have equal length\")\n    else:\n        print(\"Not all tuples have equal length\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            count += 1\n    if count == 0:\n        print(\"All the tuples have equal length\")\n    else:\n        print(\"Not all the tuples have equal length\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        gap = n // 2\n        \n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n                \n        n = gap"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        i = 0\n        while i < n - gap:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = (gap * 10) // 13 # calculate new gap size\n\n        # Move the gap elements to the end of the list\n        for i in range(gap, n):\n            key = nums[i]\n            j = i - gap\n\n            while j >= 0 and key > nums[j]:\n                nums[j + gap] = nums[j]\n                j -= gap\n\n            nums[j + gap] = key\n\n        # Decrease the gap size until it becomes 1\n        gap //= 10\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = gap // 10\n\n        if gap == 1:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # initialize variables\n    n = len(nums)\n    max_iter = 10\n    swapped = True\n    \n    # loop until no more swaps\n    while swapped:\n        swapped = False\n        \n        # loop through each element\n        for i in range(max_iter):\n            \n            # calculate the gap size\n            gap = max_iter - i\n            \n            # check if the gap is too big\n            if gap > n//2:\n                gap = n\n            \n            # swap elements\n            for j in range(gap):\n                if nums[j] > nums[j+gap]:\n                    nums[j], nums[j+gap] = nums[j+gap], nums[j]\n                    swapped = True\n            \n            # exit loop if no more swaps were made\n            if not swapped:\n                break\n        \n        # decrease the maximum iteration count\n        max_iter = max(1, int(max_iter / 1.3))\n        \n        # exit loop if no more swaps were made\n        if not swapped:\n            break\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j] < nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n        gap = gap // 1.3"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        if gap < 1:\n            gap = n\n        else:\n            gap = int(gap / 1.3)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n        gap = 10\n        i = 0\n\n        while i < n - gap:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n            i += 1\n\n        if not swapped:\n            break\n        gap = int(gap / 1.3)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = gap // 1.3  # reduce gap size by 1/3 every pass"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    \n    # initialize the swapped flag and the gap size\n    swapped = True\n    gap = len(nums) // 2\n    \n    # loop until no swaps are made\n    while swapped:\n        swapped = False\n        \n        # iterate over the list and compare adjacent elements\n        for i in range(gap, len(nums)):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        \n        # decrease the gap size and continue iterating if swaps are made\n        gap //= 1\n        \n        # if the gap is too small, we can't continue iterating and must exit\n        if gap < 1:\n            break\n    \n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Take the square root of the number\n    sqrt_n = round(n ** 0.5)\n    \n    # Check if the difference of the squares is a square\n    if sqrt_n ** 2 == n - sqrt_n ** 2:\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    # check if the number is less than or equal to 0\n    if n <= 0:\n        return False\n    # calculate the square of the given number\n    square = n ** 2\n    # calculate the difference between the square and its double\n    diff = square - (2 * n)\n    # check if the difference is a perfect square or not\n    for i in range(int(diff ** 0.5) + 1):\n        if diff % i == 0 and diff // i == i:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # find the square of the number\n    square = n ** 0.5\n\n    # check if the square of the number is divisible by 2\n    if square % 2 == 0:\n        return False\n\n    # find the difference between the square and the number\n    diff = square - n\n\n    # check if the difference between the square and the number is divisible by 2\n    if diff % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # taking input from the user\n    num = int(input(\"Enter a number: \"))\n    \n    # checking whether the number is greater than 0 or not\n    if num <= 0:\n        print(\"The number should be greater than 0\")\n    else:\n        # finding the first square root of the number\n        first = int(num**(1/2))\n        \n        # finding the second square root of the number\n        second = int(num**(1/2))\n        \n        # checking whether the first and second square roots are equal or not\n        if first == second:\n            print(\"The number can be represented as the difference of two squares\")\n        else:\n            print(\"The number cannot be represented as the difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,int(n/2)+1):\n        for j in range(1,int(n/2)+1):\n            if i*i+j*j == n:\n                return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1): \n        if n % i == 0 and i**2 == n: \n            return True\n        elif n % i == 0 and i**2 > n: \n            return False\n        elif i**2 > n: \n            break\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # convert the number to a string\n    str_n = str(n)\n    # find the length of the string\n    length = len(str_n)\n    # check if the length of the string is odd\n    if length % 2 == 1:\n        # if it is, then there is no difference of two squares\n        return False\n    # if the length is even, then there is a difference of two squares\n    for i in range(length // 2):\n        # check if the digits are the same\n        if int(str_n[i])!= int(str_n[-i-1]):\n            return False\n    # if we reach this point, then there is a difference of two squares\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_square(n):\n    \"\"\"\n    A helper function to check if a number is a square.\n    \"\"\"\n    if n < 0:\n        return False\n    sqrt_n = int(n ** 0.5)\n    return sqrt_n * sqrt_n == n\n\ndef dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n <= 0:\n        return False\n    for i in range(1, int(n**0.5)+1):\n        if i * i == n or i * i == n - 1:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Find the square of the given number\n    num_square = n**2\n\n    # Loop through all the numbers from 1 to the square of the given number\n    for i in range(1, num_square+1):\n\n        # Check if the difference between the square of the given number and the square of the current number is equal to the given number\n        if num_square - i == n:\n            return True\n\n    # If no such pair of squares exists, then return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n >= 0:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return \"not possible\"\n        for i in range(int(n**0.5)+1, int(n)+1):\n            if n % i == 0:\n                return \"not possible\"\n        return \"possible\"\n    else:\n        return \"not possible\"\n\nprint(dif_Square(25)) # Output: not possible\nprint(dif_Square(4)) # Output: possible\nprint(dif_Square(16)) # Output: not possible"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors) - 1):\n        if colors[i] == patterns[i] and colors[i+1] == patterns[i+1]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # initialize variables\n    n = len(colors)\n    colors.sort()\n    patterns.sort()\n    match = True\n\n    # iterate through the patterns array and check if they match the colors array\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            match = False\n            break\n\n    # return the result\n    return match"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    # Convert patterns to list to handle strings\n    patterns = list(patterns)\n    n = len(colors)\n\n    # Initialize variables\n    count = 0\n    index = 0\n\n    # Loop through colors\n    for color in colors:\n        # Find the pattern that matches the current color\n        pattern = patterns[index]\n\n        # Check if the current pattern matches the current color\n        if pattern == color:\n            # Increment the count\n            count += 1\n\n            # Move to the next index\n            index = (index + 1) % n\n        else:\n            # Reset the index\n            index = 0\n\n    # Check if all patterns have been matched\n    if count == n:\n        # All patterns have been matched, so return True\n        return True\n    else:\n        # Not all patterns have been matched, so return False\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    This function takes in a list of colors and a list of patterns as input and returns True if the colors follow the patterns and False otherwise.\n    \"\"\"\n\n    # Initialize a variable to keep track of the current color index\n    current_color = 0\n\n    # Initialize a variable to keep track of the current pattern index\n    current_pattern = 0\n\n    # Loop through the patterns list and compare each color with the pattern at the current color index and pattern index.\n    for i in range(len(colors)):\n        if colors[i]!= patterns[current_color][current_pattern]:\n            # If there is a mismatch, return False\n            return False\n        else:\n            # If there is a match, move to the next color and pattern index\n            current_color += 1\n            current_pattern += 1\n\n    # If the loop completes without a mismatch, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Convert patterns to a list of sets for easier lookup\n    patterns_sets = [set(pattern) for pattern in patterns]\n\n    # Loop through each color in the colors array\n    for color in colors:\n        # Convert the color to a set for easier lookup\n        color_set = set(color)\n\n        # Check if the color is in any of the patterns sets\n        if not any(color_set in pattern_set for pattern_set in patterns_sets):\n            # If not, return False\n            return False\n\n    # If we made it this far, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(patterns)\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes in two lists: colors and patterns. The colors list contains the colors that are to be used in the patterns.\n    The patterns list contains the sequence of colors to be used for each pattern.\n\n    The function checks whether it follows the sequence given in the patterns array by comparing the colors in the patterns list with the corresponding colors in the colors list.\n    If they are the same, the function moves to the next pattern and repeats the process until it reaches the end of the patterns list.\n    If it reaches the end of the patterns list without finding a match, the function returns False, indicating that the color patterns are not the same.\n    If it finds a match, the function returns True, indicating that the color patterns are the same.\n    '''\n\n    # Loop through the colors and patterns lists\n    for color in colors:\n        # Check if the current color is the same as the next color in the patterns list\n        if patterns[0] == color:\n            # If the current color is the same as the next color, move to the next pattern in the list and repeat the process\n            patterns = patterns[1:]\n            continue\n        # If the current color is not the same as the next color, return False\n        else:\n            return False\n    \n    # If the loop completes without finding a match, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if all the colors in the colors list are present in the patterns array\n    for pattern in patterns:\n        for color in pattern:\n            if color not in colors:\n                return False\n    # If all the colors are present, check if the colors in the first pattern match the colors in the second pattern\n    if patterns[0] == patterns[1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    for color in colors:\n        if color not in patterns:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # check if the length of colors and patterns are equal\n    if len(colors)!= len(patterns):\n        return False\n    \n    # initialize variables to keep track of the current pattern and the last color\n    current_pattern = patterns[0]\n    last_color = colors[0]\n    \n    # loop through the remaining colors\n    for color in colors[1:]:\n        # check if the current color matches the last color in the pattern\n        if color!= last_color and color not in current_pattern:\n            return False\n        \n        # update the last color and update the current pattern\n        last_color = color\n        current_pattern = patterns[current_pattern.index(color)]\n    \n    # if we reach here, it means we have checked all the colors and the pattern is valid\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                divisible_tuples.append((test_list[i], test_list[j]))\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    \n    for i in range(len(test_list)):\n        if all(x % K == 0 for x in test_list[i]):\n            result.append(test_list[i])\n    \n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        tuple_elements = [element for element in test_list[i]]\n        for j in range(len(tuple_elements)):\n            if tuple_elements[j] % K!= 0:\n                tuple_elements[j] = -1\n        if all(x!= -1 for x in tuple_elements):\n            result.append(tuple_elements)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_divisible_by_K = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            tuples_divisible_by_K.append(tup)\n    return tuples_divisible_by_K"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        found_divisible = True\n        for num in tup:\n            if num % K!= 0:\n                found_divisible = False\n                break\n        if found_divisible:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_list = []\n    for tuple_ in test_list:\n        if all(x % K == 0 for x in tuple_):\n            tuples_list.append(tuple_)\n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible_count = sum(1 for i in tup if i % K == 0)\n        if divisible_count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    # create a dictionary to store the count of elements in the tuples\n    count_dict = {}\n    # iterate over the list of tuples\n    for tup in test_list:\n        # iterate over the elements of the tuple\n        for elem in tup:\n            # if the element is divisible by K, increment its count in the dictionary\n            if elem % K == 0:\n                count_dict[elem] = count_dict.get(elem, 0) + 1\n    \n    # create a list to store the tuples with all elements divisible by K\n    result = []\n    # iterate over the count dictionary\n    for key, value in count_dict.items():\n        # if all elements are divisible by K, append the tuple to the result list\n        if value == len(test_list):\n            result.append(key)\n    \n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        print(n, 'is divisible by 11')\n    else:\n        print(n, 'is not divisible by 11')"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11 == 0)"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    elif n % 11!= 0:\n        return False\n    else:\n        return is_Diff(n // 11)"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is divisible by 11, otherwise False.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split() # split the string into a list of words\n    for word in word_list:\n        if len(word) % 2 == 0: # if the length of the word is even, return False\n            return False\n    # if all words have odd length, return True\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    # Split the string into a list of words\n    words = s.split()\n    \n    # Iterate over each word in the list\n    for word in words:\n        \n        # Get the length of the word\n        length = len(word)\n        \n        # Check whether the length is odd or even\n        if length % 2 == 0:\n            # If the length is even, print \"Even\"\n            print(\"Even\")\n        else:\n            # If the length is odd, print \"Odd\"\n            print(\"Odd\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    for w in word:\n        if len(w) % 2 == 0:\n            return \"The length of the word is even\"\n        else:\n            return \"The length of the word is odd\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(word, \"is odd.\")\n        else:\n            print(word, \"is even.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0] # split the string by space and take the first element as the word\n    if len(word) % 2 == 0:\n        print(word, \"is even.\")\n    else:\n        print(word, \"is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 24\n    else:\n        return 42 + 42*n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    \n    elif n == 1:\n        return 4\n    \n    elif n == 2:\n        return 10\n    \n    else:\n        return (n * (3 * n - 1)) / 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise ValueError(\"n must be an integer\")\n    # Check if n is a non-negative integer\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    # Check if n is a valid tetrahedral number\n    if n > 2000000:\n        raise ValueError(\"n must be a valid tetrahedral number\")\n    \n    # Initialize variables\n    a = 0\n    b = 1\n    c = 0\n    d = 0\n    \n    # Calculate the nth tetrahedral number\n    for i in range(n):\n        a += 1\n        b += 2*a\n        c += 3*a + b\n        d += 4*a*b\n    \n    return d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 4 * tetrahedral_number(n - 1) + 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the first tetrahedral number\n    tetrahedral = 0\n    \n    # Loop through the numbers from 1 to n-1\n    for i in range(1, n):\n        # Add the i-th power of i to the tetrahedral number\n        tetrahedral += i**i\n    \n    # Return the tetrahedral number\n    return tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize the sum of the first n numbers to 1\n    sum_n = 1\n\n    # Iterate through the first n-1 numbers\n    for i in range(1, n):\n        # Calculate the next term in the sequence\n        next_term = 4 * i * (i-1) // 3\n        # Add it to the sum\n        sum_n += next_term\n\n    # Return the final sum\n    return sum_n\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = n * (n - 1) * (n - 2) * (n - 3) // 6\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_numbers = [0]\n    for i in range(1, n+1):\n        tetrahedral_numbers.append(tetrahedral_numbers[i-1] + tetrahedral_numbers[i-2] + tetrahedral_numbers[i-3])\n    return tetrahedral_numbers[n-1]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize variables\n    num = 1\n    count = 0\n\n    # Calculate the tetrahedral number\n    while count < n:\n        num += 4*count\n        count += 1\n\n    return num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return (4 * (n-1) * (n-2) // (n-3)) + tetrahedral_number(n-3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    This function takes the radius of a sphere as input and returns the volume of the sphere.\n    \"\"\"\n    v = (4/3) * math.pi * (r**3)\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3) * pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3) * pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return chr((ascii_val % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize a variable to store the character\n    char = \"\"\n\n    # loop through each character in the string\n    for char_in_str in strr:\n        # convert the character to ASCII value\n        ascii_val = ord(char_in_str)\n\n        # add the ASCII value modulo 26 to the current character\n        new_ascii_val = (ascii_val + 13) % 26\n\n        # convert the new ASCII value back to character and append to the character variable\n        new_char = chr(new_ascii_val)\n        char += new_char\n\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0  \n    char = \"\"  \n    for i in strr:  \n        ascii_value += ord(i)  \n        if ascii_value > 26:  \n            ascii_value -= 26  \n        char += chr(ascii_value)  \n    return char  "
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr) == 0:\n        return \"\"\n    else:\n        first_char = ord(strr[0])\n        rest_of_str = strr[1:]\n        first_sum = first_char % 26\n        rest_sum = sum([ord(ch) % 26 for ch in rest_of_str])\n        return chr(first_sum + rest_sum)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize variables to store ASCII values of characters\n    ascii_values = [0] * 26\n    # Iterate over each character in the string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_value = ord(char) - ord('a')\n        # Add the ASCII value of the character to the corresponding position in the list\n        ascii_values[ascii_value] += 1\n    # Find the character made by adding the ASCII values of all the characters modulo 26\n    char_sum = 0\n    for i in range(26):\n        if ascii_values[i] > 0:\n            char_sum += (i + ord('a')) * ascii_values[i]\n    # Convert the sum to its ASCII value and return it as a character\n    return chr((char_sum + ord('a')) % 26 + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    char = chr((char_sum % 26) + ord('a'))\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr(char_sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for i in range(len(strr)):\n        ascii_val += ord(strr[i])\n    return chr((ascii_val % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the result string\n    result = ''\n    # Traverse through each character of the string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_val = ord(char)\n        # Add the ASCII value modulo 26 to the result string\n        result += chr(((ascii_val + 65) % 26) + 65)\n    return result"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1]\n    for i in range(n):\n        seq.append(3*seq[-1] - seq[-2])\n    return seq[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445]\n\n    if n < 1 or n > len(sequence):\n        return \"Invalid input. Please enter a number between 1 and 22.\"\n    else:\n        return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n\n    Args:\n    n (int): The index of the number to find.\n\n    Returns:\n    int: The nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(2 * sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n    return sequence[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        sequence_num = 1\n        for i in range(1, n):\n            sequence_num += sequence_num % 2\n        return sequence_num"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence\n\nn = int(input(\"Enter the number of terms: \"))\nprint(\"The sequence of the newman conway sequence is:\")\nfor i in sequence(n):\n    print(i)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            b = [4, 2, 1]\n        else:\n            b = [2, 1, 4]\n        a.extend(b)\n    return a[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # calculate the surface area of a sphere using the formula\n    # surface area = 4*pi*r^2\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area using the formula: 4 * pi * r^2\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n\nprint(surfacearea_sphere(1))   # Output: 50.26548245743669"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Finding the surface area using the formula:\n    # surface area = 4 * pi * r^2\n    surface_area = 4 * math.pi * r**2\n    \n    # Returning the surface area\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    S = 4 * pi * r**2\n    return S"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n\n    Returns:\n    The nth centered hexagonal number.\n    '''\n    # Define the centered hexagonal sequence\n    chex_seq = [0, 1]\n\n    # Generate the centered hexagonal sequence up to n\n    for i in range(2, n+1):\n        # Calculate the next centered hexagonal number\n        chex = 3*chex_seq[i-1] - i\n\n        # Add the next centered hexagonal number to the sequence\n        chex_seq.append(chex)\n\n    # Return the nth centered hexagonal number\n    return chex_seq[n]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    if n == 1:\n        return 1\n\n    a = 1\n    b = 1\n\n    while n > 1:\n        a += 1\n        b += 1\n        n -= 1\n\n    return a - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    centered_hex = 0\n    if n < 0:\n        return \"Enter a positive integer\"\n    \n    for i in range(n):\n        centered_hex += 4 * i ** 2\n    \n    return centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_num = 0\n    hexagonal_center = 0\n    count = 1\n    while count <= n:\n        hexagonal_num += 2*hexagonal_center + 1\n        hexagonal_center += 1\n        count += 1\n    return hexagonal_num - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function calculates the n-th centered hexagonal number using recursion.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 3 * centered_hexagonal_number(n-1) + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (5*n*n - 3*n + 5) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        a = centered_hexagonal_number(n-1)\n        b = centered_hexagonal_number(n-2)\n        return a + b"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function finds the nth centered hexagonal number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer greater than or equal to 1.\"\n    else:\n        return (5 * n * n - 3 * n + 2) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    # Inductive case\n    else:\n        # Calculate the sum of the centered hexagonal numbers\n        sum = (4 * n - 3) // 2\n        # Calculate the position of the center\n        center = (3 * n ** 2 + 1) // 2\n        # Calculate the sum of the first two centered hexagonal numbers\n        first_two = (center - 2) * (center + 1) // 6\n        # Return the sum of centered hexagonal numbers\n        return sum + first_two"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return centered_hexagonal_number(n-1) * (1 - 6*n + n**2) / 2"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    # Merge the first two dictionaries\n    merged_dict = ct.ChainMap(dict1, dict2)\n\n    # Merge the result with the third dictionary\n    result_dict = ct.ChainMap(merged_dict, dict3)\n\n    return dict(result_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()  # Create a copy of dict1 to avoid modifying the original dict1\n    merged_dict.update(dict2)  # Update merged_dict with the values from dict2\n    merged_dict.update(dict3)  # Update merged_dict with the values from dict3\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    :param dict1: First dictionary.\n    :type dict1: dict\n    :param dict2: Second dictionary.\n    :type dict2: dict\n    :param dict3: Third dictionary.\n    :type dict3: dict\n    :return: Merged dictionary.\n    :rtype: dict\n    \"\"\"\n\n    merged_dict = {}\n\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def freq_count(lst):\n    \"\"\"\n    Return the frequency of each element in the list as a dictionary.\n    \"\"\"\n    freq_dict = collections.defaultdict(int)\n    for elem in lst:\n        freq_dict[elem] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    # loop through each element in the list\n    for element in list1:\n        # if the element is already in the dictionary, increment its frequency\n        if element in freq:\n            freq[element] += 1\n        # otherwise, add the element with a frequency of 1\n        else:\n            freq[element] = 1\n    # return the dictionary containing the frequency of each element\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary containing the frequency of all the elements in the list.\n    \"\"\"\n    count = collections.Counter(lst)\n    return dict(count)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    num_list = []\n    for i in range(1, N+1):\n        num_list.append(i)\n    closest_num = min(num_list)\n    while closest_num > n:\n        closest_num = min(num_list, key=lambda x: abs(x - n))\n    print(\"The closest smaller number than\", n, \"is\", closest_num)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    # Initialize variables\n    closest = N\n    diff = float('inf')\n    \n    # Loop through all numbers between 1 and N\n    for i in range(1, N+1):\n        # Calculate the absolute difference between the current number and N\n        current_diff = abs(i - N)\n        \n        # Check if this difference is smaller than the current closest\n        if current_diff < diff:\n            # Update the closest number and the difference\n            closest = i\n            diff = current_diff\n    \n    # Return the closest smaller number than N\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    if N % 2 == 0:\n        N -= 1\n    while N % 2 == 0:\n        N -= 1\n\n    while True:\n        N += 1\n        if N % 2 == 1:\n            return N\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    while True:\n        n -= 1\n        if n < 0:\n            return n\n        if abs(n - N) < abs(N - (n - 1)):\n            return n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest = float('-inf')\n    \n    for i in range(N):\n        num = int(input(f\"Enter a number: \"))\n        if num < smallest:\n            closest = smallest\n            smallest = num\n        elif num > smallest and num < closest:\n            closest = num\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    numbers = []\n    for i in range(1, N):\n        if N % i == 0:\n            numbers.append(i)\n    closest_num = min(numbers)\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize variables\n    small_num = float('inf')\n    closest_num = float('-inf')\n\n    # loop through all numbers from 1 to N\n    for num in range(1, N+1):\n        # compare the current number with the smallest number seen so far\n        if num < small_num:\n            closest_num = small_num\n            small_num = num\n        # if the current number is closer to the smallest number seen so far, update the variables\n        elif abs(small_num - num) < abs(closest_num - small_num):\n            closest_num = num\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    num = 1\n    closest = num\n\n    while True:\n        num += 1\n        if num > N:\n            break\n        if abs(num - N) < abs(closest - N):\n            closest = num\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    count = 0\n    diff = n\n    for i in range(1, n+1):\n        if i < n:\n            count += 1\n            diff = abs(i - n)\n        else:\n            break\n    return n + (diff // count)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    if N == 1:\n        return N\n    else:\n        return closest_num(N-1)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_list = []\n    max_len = 0\n    \n    for word in list1:\n        word_list.append(word)\n        if len(word) > max_len:\n            max_len = len(word)\n    \n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize a variable to store the length of the longest word\n    longest_word_len = 0\n\n    # loop through each word in the list\n    for word in list1:\n        # check if the length of the current word is greater than the current longest word\n        if len(word) > longest_word_len:\n            # update the longest word length\n            longest_word_len = len(word)\n\n    # return the length of the longest word\n    return longest_word_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize variables to keep track of the longest word length and the word itself\n    longest_length = 0\n    longest_word = ''\n\n    # Loop through each word in the list\n    for word in list1:\n        # If the length of the current word is greater than the longest word length, update the variables\n        if len(word) > longest_length:\n            longest_length = len(word)\n            longest_word = word\n\n    # Return the length of the longest word\n    return longest_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"The substring is present in the given string.\")\n    else:\n        print(\"The substring is not present in the given string.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Check if all elements of the list contain the substring\n    for word in str1:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, str) and isinstance(sub_str, str):\n        return any(sub_str in s for s in str1.split())\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert the given list of string values to a set to remove duplicates\n    str_set = set(str1)\n    \n    # Check if the given substring is present in the set of string values\n    if sub_str in str_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if type(str1)!= list:\n        return \"The input is not a list\"\n    for value in str1:\n        if sub_str in value:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if isinstance(sub_str, str):\n        sub_list = [sub_str]\n    else:\n        sub_list = sub_str\n    for i in range(len(str1)-len(sub_list)+1):\n        if str1[i:i+len(sub_list)] in sub_list:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return is_undulating(n - 1) and (n - 1) % 2 == 0"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # check if the number is odd\n    if n % 2 == 1:\n        # if the number is odd, check if it's divisible by 3\n        if n % 3 == 0:\n            return True\n        else:\n            return False\n    else:\n        # if the number is even, check if it's divisible by 2\n        if n % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n <= 0:\n        return \"The number must be positive.\"\n\n    is_undulating = True\n\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            is_undulating = False\n            break\n\n    return \"The number is\" + (\" undulating\" if is_undulating else \" not undulating\")"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"The given number is even.\"\n    else:\n        return \"The given number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check whether the number is divisible by 15\n    if n % 15 == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i*i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    if n % 2 == 0:\n        return \"The given number is not an odd number.\"\n    else:\n        return \"The given number is an odd number.\"\n\nn = int(input(\"Enter a number: \"))\nresult = is_undulating(n)\nprint(result)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Checking whether the given number is odd or even\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Find the index of the minimum value in the sorted list\n    min_index = sorted_list.index(min(sorted_list, key=itemgetter(0)))\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    # use the itemgetter() function from the operator module to extract the second value from each tuple\n    # and sort the list of tuples by that second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the index of the first tuple in the sorted list\n    return sorted_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples in ascending order based on the second value of the tuples\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the index of the first tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple in the list with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    test_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 1000 #initialize the minimum length to a large number\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = 1000000\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # find the length of the smallest list in the list\n    min_len = len(lst[0])\n\n    # loop through the list of lists and find the length of the smallest list\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize the variable to store the minimum length\n    min_length = lst[0][0]\n    # Loop through each sublist in the list and find the minimum length\n    for sublist in lst:\n        for item in sublist:\n            if len(item) < min_length:\n                min_length = len(item)\n    # Return the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    \"\"\"\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize min_length to infinite\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n\n    divisor_count = 0\n\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_count += 1\n\n    return divisor_count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store frequency\n    freq_dict = {}\n\n    # Iterate through the flattened list and count frequency of each element\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flattened_list = [num for sublist in list1 for num in sublist]\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    # Loop through the flattened list and count the frequency of each element\n    for num in flattened_list:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    # Return the dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    # create an empty dictionary to store the frequencies\n    freq = {}\n\n    # loop through each element in the flattened list\n    for item in list1:\n        # if the element is a string, convert it to a list of characters\n        if isinstance(item, str):\n            item = list(item)\n\n        # if the element is a list, recursively call the function on it\n        if isinstance(item, list):\n            subfreq = frequency_lists(item)\n            # iterate over the subdictionary to add its values to the main dictionary\n            for k, v in subfreq.items():\n                if k in freq:\n                    freq[k] += v\n                else:\n                    freq[k] = v\n        # if the element is not a list, increment its frequency in the main dictionary\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n\n    # return the final dictionary of frequencies\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Flatten the list of lists\n    flattened = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store frequency of each element in the flattened list\n    freq = {}\n\n    # Loop through each element in the flattened list and update the frequency in the dictionary\n    for elem in flattened:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n\n    # Return the dictionary containing frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Convert the list of lists to a flattened list\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Iterate through the flattened list and update the frequency of each element in the dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n\n    # Flatten the list\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through the flattened list and count the frequency of each element\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # create an empty dictionary to store frequency\n    freq = {}\n    \n    # loop through each element in the list\n    for element in list1:\n        \n        # if the element is already in the dictionary, increment its count\n        if element in freq:\n            freq[element] += 1\n        # otherwise, add the element to the dictionary with a count of 1\n        else:\n            freq[element] = 1\n            \n    # return the dictionary of frequencies\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # loop through the flattened list of lists\n    for item in list1:\n        # if the item is not a list, add it to the dictionary with a frequency of 1\n        if not isinstance(item, list):\n            freq_dict[item] = 1\n        # if the item is a list, recursively call the `frequency_lists` function on the list and add its frequency to the dictionary\n        else:\n            sub_freq_dict = frequency_lists(item)\n            for key, value in sub_freq_dict.items():\n                freq_dict[key] = value + (freq_dict.get(key, 0) if key in freq_dict else 0)\n\n    # return the final dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary\n    freq = {}\n\n    # loop through each element in the list\n    for element in list1:\n        # if the element is not in the dictionary, add it with a value of 1\n        if element not in freq:\n            freq[element] = 1\n        # if the element is already in the dictionary, increment its value by 1\n        else:\n            freq[element] += 1\n\n    # return the dictionary\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq:\n                    freq[subitem] += 1\n                else:\n                    freq[subitem] = 1\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    # divide by the length of the list\n    result = product / len(numbers)\n    \n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # multiply all the numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    # divide the product by the length of the list\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1  \n    for num in numbers:  \n        result *= num  \n    return result / len(numbers)  "
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    binary = ''\n    while n:\n        binary = str(n % 2) + binary\n        n //= 2\n\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    # initialize an empty string to store the binary equivalent\n    binary_string = ''\n    \n    # iterate through each bit of the decimal number\n    for i in range(32): \n        \n        # extract the ith bit from the decimal number\n        bit = (n >> i) & 1\n        \n        # convert the bit to binary and add it to the binary string\n        binary_string += str(bit)\n        \n        # shift the decimal number to the right by one bit\n        n = n >> 1\n        \n        # if the binary string is not empty and the last digit is a 1, append a 0 to the binary string\n        if binary_string and binary_string[-1] == '1':\n            binary_string += '0'\n    \n    # return the binary string with no leading zeros\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    # initialize an empty string to hold the binary equivalent of n\n    binary_str = ''\n    # iterate over the binary digits of n from right to left\n    while n > 0:\n        # get the rightmost digit of n\n        digit = n % 2\n        # add the digit to the beginning of binary_str\n        binary_str = str(digit) + binary_str\n        # divide n by 2 to remove the rightmost digit\n        n //= 2\n    # return the binary string with no leading zeros\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n = n // 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_string = ''\n    while n > 0:\n        remainder = n % 2\n        binary_string = str(remainder) + binary_string\n        n //= 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    def is_palindrome(num):\n        \"\"\"\n        Helper function to check if a number is palindrome or not.\n        \"\"\"\n        num_str = str(num)\n        return num_str == num_str[::-1]\n\n    def palindrome_to_int(palindrome):\n        \"\"\"\n        Helper function to convert a palindrome to an integer.\n        \"\"\"\n        return int(palindrome)\n\n    # Check if the input is a palindrome\n    if is_palindrome(num):\n        return palindrome_to_int(str(num + 1))\n\n    # If not, find the next smallest palindrome\n    i = 10**(num-1)\n    while True:\n        if is_palindrome(i):\n            return palindrome_to_int(str(i + 1))\n        i += 1\n\nif __name__ == \"__main__\":\n    # Test cases\n    print(next_smallest_palindrome(10)) # Output: 11\n    print(next_smallest_palindrome(12345)) # Output: 12351\n    print(next_smallest_palindrome(123456789)) # Output: 999999999"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_smallest_palindrome(num):\n        n = str(num)\n        if is_palindrome(int(n)):\n            return True\n        for i in range(1, len(n)):\n            for j in range(i+1, len(n)+1):\n                if n[:i] == n[i:j] + n[j:]:\n                    return True\n        return False\n\n    def is_smaller_palindrome(num):\n        n = str(num)\n        for i in range(1, len(n)):\n            for j in range(i+1, len(n)+1):\n                if n[:i] + n[j:] + n[:j] == n[i:j] + n[:i] + n[j:]:\n                    return True\n        return False\n\n    def find_next_smallest_palindrome(num):\n        n = str(num)\n        if is_smallest_palindrome(int(n)):\n            return int(n)\n\n        for i in range(len(n)):\n            for j in range(i+1, len(n)+1):\n                k = len(n) - len(n[:i] + n[j:]) - 1\n                if k < 0 or n[k] < n[i] or n[k] == n[i] and n[:i] + n[j:] > n[i:j]:\n                    return int(n[:i] + n[j:] + n[i])\n\n        return 0\n\n    if num < 10:\n        return num\n\n    return find_next_smallest_palindrome(num)\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter an integer: \"))\n    print(\"Next smallest palindrome of\", num, \":\", next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    for i in range(999, num, -1):\n        if is_palindrome(str(i)):\n            return i\n    return -1\n\ndef is_palindrome(s):\n    \"\"\"\n    Check if a string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n    num = int(sys.argv[1])\n    if num < 10:\n        print(\"Invalid input: the input number must be greater than or equal to 10.\")\n        sys.exit(1)\n    print(\"Next smallest palindrome of\", num, \"is\", next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert integer to string\n    num_str = str(num)\n    # reverse the string\n    rev_num_str = num_str[::-1]\n    # convert the reversed string to an integer\n    rev_num = int(rev_num_str)\n    # add 1 to the reversed integer to get the next smallest palindrome\n    next_palindrome = rev_num + 1\n    return next_palindrome\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    next_palindrome = next_smallest_palindrome(num)\n    print(\"The next smallest palindrome of\", num, \"is\", next_palindrome)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(n):\n        '''\n        Check if a number is a palindrome.\n        '''\n        return str(n) == str(n)[::-1]\n\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # initialize variables to track the current palindrome and the next smallest palindrome\n    current_palindrome = num\n    next_smallest_palindrome = None\n\n    # iterate through all possible palindromes starting from the current palindrome\n    for i in range(1, int(num**0.5)+1):\n        # if the current palindrome is even and divisible by i, append it to the list of palindromes\n        if (num % i == 0 and num % (i*2)!= 0) or (num % i!= 0 and num % (i*2) == 0):\n            current_palindrome = num // i\n            if next_smallest_palindrome is None or int(str(next_smallest_palindrome)[-1]) < current_palindrome:\n                next_smallest_palindrome = current_palindrome\n\n    # if there are no more palindromes, return None\n    if next_smallest_palindrome is None:\n        return None\n\n    # otherwise, return the next smallest palindrome\n    else:\n        return next_smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to a string\n    num_str = str(num)\n    # Reverse the string\n    num_str_rev = num_str[::-1]\n    # Convert the reversed string back to an integer\n    num_str_rev = int(num_str_rev)\n    # Check if the reversed integer is greater than the input integer\n    if num_str_rev > num:\n        # If it is, return the reversed integer\n        return num_str_rev\n    # Check if the reversed integer is less than or equal to the input integer\n    elif num_str_rev <= num:\n        # If it is not, iterate through the reversed integer until it is greater than the input integer\n        while num_str_rev <= num:\n            # Increment the last character in the reversed integer\n            num_str_rev += 1\n            # Convert the reversed integer back to a string\n            num_str_rev_str = str(num_str_rev)\n            # Check if the reversed integer is greater than the input integer\n            if num_str_rev_str > num:\n                # If it is, return the reversed integer\n                return num_str_rev\n            # Check if the reversed integer is less than or equal to the input integer\n            elif num_str_rev_str <= num:\n                # If it is not, continue iterating through the reversed integer\n                continue"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    def is_palindrome(num):\n        \"\"\"\n        Check whether a number is a palindrome or not.\n        \"\"\"\n        if num < 0:\n            num = abs(num)\n        elif num == 0:\n            return True\n        reverse_num = 0\n        while num > 0:\n            digit = num % 10\n            reverse_num = reverse_num * 10 + digit\n            num //= 10\n        return num == reverse_num\n\n    def is_prime(num):\n        \"\"\"\n        Check whether a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        \"\"\"\n        Find the next prime number after a specified number.\n        \"\"\"\n        for i in range(num + 1, sys.maxsize):\n            if is_prime(i):\n                return i\n\n    def next_smallest_palindrome_helper(num):\n        \"\"\"\n        The main helper function to find the next smallest palindrome.\n        \"\"\"\n        if not is_palindrome(num):\n            # If the number is not a palindrome, we need to find the next smallest palindrome.\n            next_prime_num = next_prime(num)\n            if is_palindrome(next_prime_num):\n                return next_prime_num\n            else:\n                return next_smallest_palindrome_helper(next_prime_num)\n        else:\n            # If the number is already a palindrome, we need to find the next smaller odd number.\n            for i in range(num + 1, 2 * num, 2):\n                if is_prime(i):\n                    return i\n            return None\n\n    # Call the helper function to find the next smallest palindrome.\n    return next_smallest_palindrome_helper(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Create a string representation of the integer\n    int_str = str(num)\n\n    # Convert the string to a list of characters\n    chars = list(int_str)\n\n    # Loop through the characters and swap them if necessary\n    for i in range(len(chars) // 2):\n        if chars[i]!= chars[-i - 1]:\n            chars[i], chars[-i - 1] = chars[-i - 1], chars[i]\n\n    # Convert the list of characters back to a string and compare it with the original string\n    new_str = ''.join(chars)\n    if int(new_str) > int(int_str):\n        return int(new_str)\n    else:\n        return next_smallest_palindrome(num + 1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    else:\n        return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    # Sort the array\n    arr.sort()\n    # Find the kth element (k-1)th index from the end of the sorted array\n    return arr[n-k]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        raise ValueError('Index out of range')\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left, right = 1, n\n        while left < right:\n            mid = (left + right) // 2\n            if mid > k:\n                right = mid\n            else:\n                left = mid + 1\n        return arr[left - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if len(arr) == 0:\n        return None\n\n    # Initialize two pointers, one at the beginning and the other at the end of the array\n    left = 1\n    right = len(arr)\n\n    # Iterate until the two pointers meet in the middle\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If the kth element is in the left half of the array\n        if k == mid:\n            return arr[k-1]\n\n        # If the kth element is in the right half of the array\n        elif k < mid:\n            right = mid - 1\n\n        # If the kth element is in the left half of the array\n        else:\n            left = mid + 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    \n    left, right = 1, len(arr)\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Case 1: k is in the left half of the array\n        if k == mid:\n            return arr[k-1]\n        \n        # Case 2: k is in the right half of the array\n        elif k > mid:\n            left = mid + 1\n        \n        # Case 3: k is in the left half of the array\n        else:\n            right = mid - 1\n            \n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return \"Invalid input\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes an array and the kth element as arguments. It returns the kth element in the array.\n    The indexing of Python starts from 0, so we need to add 1 to the kth element to get the correct index.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    for char in word:\n        if char.isupper():\n            if result:\n                result += '_'\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    # convert all underscores to camel case\n    result = []\n    for i, c in enumerate(word):\n        if c == '_':\n            if i == 0 or word[i-1] == '_':\n                # add an uppercase letter if the underscore is preceded by another underscore\n                result.append(c.upper())\n            else:\n                # add a lowercase letter if the underscore is not preceded by another underscore\n                result.append(c)\n        else:\n            result.append(c)\n    return ''.join(result)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    prev_char =''\n    for char in word:\n        if char == '_':\n            camel_case += prev_char.upper()\n            prev_char = ''\n        else:\n            camel_case += char\n            prev_char = char\n    camel_case += prev_char.upper()\n    return camel_case.lstrip()"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            if word[i].isupper():\n                camel_case += \"_\" + word[i].lower()\n            else:\n                camel_case += word[i].lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0].lower()\n    for word in words[1:]:\n        camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i, char in enumerate(word):\n        if i > 0 and char.isupper():\n            camel_word += '_'\n        camel_word += char.lower()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n\n    Args:\n    word (str): The input string in snake case.\n\n    Returns:\n    str: The converted camel case string.\n\n    Examples:\n    >>> snake_to_camel(\"snake_case\")\n   'snakeCase'\n    >>> snake_to_camel(\"camel_case\")\n    'camelCase'\n    \"\"\"\n    # Split the word into words\n    words = word.split('_')\n    \n    # Convert the first word to lowercase\n    first_word = words[0].lower()\n    \n    # Convert the rest of the words to camel case\n    rest_of_words = [word.capitalize() for word in words[1:]]\n    \n    # Join the words and return\n    return first_word + ''.join(rest_of_words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words back into a string\n    camel_case_word = '_'.join(words)\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n\n    :param word: The input word in snake case.\n    :type word: str\n    :return: The converted camel case string.\n    :rtype: str\n    \"\"\"\n    return ''.join(map(str.capitalize, word.split('_')))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        else:\n            camel_word += word[i].capitalize()\n    return camel_word"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    A = [[1 for j in range(m+1)] for i in range(n+1)]\n    B = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # Fill the matrices A and B\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == j:\n                A[i][j] = 1\n                B[i][j] = 0\n            elif i == 1 or j == 1:\n                A[i][j] = 0\n                B[i][j] = 1\n            elif i + j == n:\n                A[i][j] = 0\n                B[i][j] = 1\n            elif i + j == m + n - 1:\n                A[i][j] = 0\n                B[i][j] = 1\n            else:\n                A[i][j] = 1\n                B[i][j] = 1\n\n    # Calculate the Eulerian number\n    E = [[0 for j in range(m+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            E[i][j] = A[i][j] - B[i-1][j-1]\n\n    # Return the Eulerian number\n    return E"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n\n    Parameters:\n    n: int\n        The number of rows in the square grid.\n    m: int\n        The number of columns in the square grid.\n\n    Returns:\n    int\n        The value of the Eulerian number a(n, m).\n    \"\"\"\n    if n < 1 or m < 1:\n        raise ValueError(\"n and m must be positive integers.\")\n\n    # Create the grid\n    grid = [[0 for j in range(m + 1)] for i in range(n + 1)]\n\n    # Fill the grid with 1s\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            grid[i][j] = 1\n\n    # Starting from the bottom-right corner, fill the grid with 0s\n    i, j = n, m\n    while i >= 1 and j >= 1:\n        grid[i][j] = 0\n        i -= 1\n        j -= 1\n\n    # Calculate the sum of the grid\n    total = sum(sum(row) for row in grid)\n\n    return total"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Function to check if a number is prime or not\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    # Function to calculate the Eulerian number a(n, m)\n    def eulerian_num_helper(n, m, count):\n        if count >= n*m:\n            return 1\n        if is_prime(count):\n            return 0\n        return (eulerian_num_helper(n, m, count+1) + eulerian_num_helper(n, m, count+2)) % (n*m)\n\n    # Call the function to calculate the Eulerian number a(n, m)\n    a = eulerian_num_helper(n, m, 0)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the first term of the series\n    a = 0\n\n    # Initialize the second term of the series\n    b = 0\n\n    # Initialize the third term of the series\n    c = 0\n\n    # Initialize the fourth term of the series\n    d = 1\n\n    # Calculate the first term of the series\n    a = (d * (n * m)) // 2\n\n    # Calculate the second term of the series\n    b = (d * (n + m)) // 2\n\n    # Calculate the third term of the series\n    c = (d * (2 * n * m + m * m)) // 2\n\n    # Calculate the fourth term of the series\n    d = (d * (2 * n * m + n * n)) // 2\n\n    # Calculate the sum of the first four terms\n    return a + b + c + d"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def eulerian_number(n, m):\n        if n == 1 and m == 1:\n            return 1\n        elif n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif m == 0:\n            return 1\n        else:\n            return (eulerian_number(n-1, m) + eulerian_number(n, m-1))%1000000007\n\n    return eulerian_number(n, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m * (m - 1) // 2\n    elif n == 2:\n        return (m + 1) * (m + 3) // 2\n    else:\n        return (n - 1) * eulerian_num(n - 1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Generate all possible paths\n    paths = []\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                paths.append(['A'])\n            elif i == 0:\n                paths.append(['A', 'B'])\n            elif j == 0:\n                paths.append(['A', 'C'])\n            elif i == j:\n                paths.append(['A', 'B', 'C'])\n            else:\n                paths.append(['A', 'B', 'C', 'D'])\n\n    # Calculate Eulerian path\n    for path in paths:\n        if 'A' in path and 'B' in path and 'C' in path:\n            euler_path = path\n            break\n\n    # Calculate a(n, m)\n    a = 0\n    for i in range(n):\n        for j in range(m):\n            a += 1 if i == j else 0\n\n    # Calculate the number of edges in the Eulerian path\n    edges = len(euler_path) - 1\n\n    # Return a(n, m)\n    return a * edges"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    b = 1\n    for i in range(1, n):\n        a = a * i\n    for i in range(1, m):\n        b = b * i\n    return a * b"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    a = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Initialize the first row and column of the matrix to 1\n    a[1][1] = 1\n\n    # Fill the rest of the matrix using the recurrence relation\n    for i in range(2, n + 1):\n        for j in range(2, m + 1):\n            a[i][j] = a[i - 1][j] + a[i][j - 1]\n\n    # Return the value of the last cell of the matrix\n    return a[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first row and first column with 1\n    a = [1] * (m + 1)\n    a[0] = 0\n\n    # Fill the rest of the matrix with the Eulerian path\n    for i in range(1, n + 1):\n        # Initialize the current row\n        current_row = [0] * (m + 1)\n        # Fill the first column of the current row with 1\n        current_row[0] = 1\n        # Fill the rest of the current row with the sum of the previous row and the previous column\n        for j in range(1, m + 1):\n            current_row[j] = a[j] + a[j-1]\n        # Set the current row as the new row for the next iteration\n        a = current_row\n\n    # Return the last element of the last row of the matrix\n    return a[m]"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n\n        # Sort the sublist in ascending order using the built-in sort() function\n        sublist.sort()\n\n        # Print the sorted sublist\n        print(sublist)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i, sublist in enumerate(input_list):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist alphabetically using the sorted() function\n        sorted_sublist = sorted(sublist)\n        # Replace the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sorted_sublist\n\n    # Return the sorted list of lists\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = sorted(input_list[i][j])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for num in lst:\n        if num is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool and item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, bool) and elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list = tuple(test_list)\n    return test_tup + test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the two lists and the tuples\n    new_list = test_list + test_tup\n    \n    # Return the new list\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Create a new tuple and add the list to it.\n    new_tup = (test_tup[0], test_tup[1], *test_list)\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Concatenate the lists and tuples\n    total_list = list(test_list) + list(test_tup)\n    # Convert the combined list to a tuple\n    total_tup = tuple(total_list)\n    return total_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for element in test_list:\n        test_tup = test_tup + (element,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    for item in test_list:\n        test_tup += (item,)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    merged_list = []\n    \n    # Add the first two elements to the heap\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    \n    # Add the third element to the heap\n    heapq.heappush(heap, num3)\n    \n    # Merge the heaps and add the elements to the merged list\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merges three lists into a single sorted list.\n    '''\n    # create a new list to store the merged sorted list\n    merged_list = []\n\n    # create a min heap to store the smaller elements of the three lists\n    min_heap = []\n    heapq.heappush(min_heap, num1)\n    heapq.heappush(min_heap, num2)\n    heapq.heappush(min_heap, num3)\n\n    # merge the lists until one of them is empty\n    while min_heap:\n        # add the smallest element of the three lists to the merged list\n        merged_list.append(heapq.heappop(min_heap))\n\n        # add the next smaller element to the min heap\n        if min_heap:\n            heapq.heappush(min_heap, heapq.heappop(min_heap))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # concatenate the three lists\n    total = num1 + num2 + num3\n    # create a min heap with the first element of each list\n    min_heap = [heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heapify(total[i:j]), total[j]), total[i]), total[i+1]) for i in range(0, len(total), 2) for j in range(i+2, len(total), 2)]\n    # concatenate the elements of the min heap\n    merged = []\n    while min_heap:\n        merged.append(heapq.heappop(min_heap))\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # sort the three lists\n    sorted_list = []\n    for i in num1:\n        heapq.heappush(sorted_list, i)\n    for i in num2:\n        heapq.heappush(sorted_list, i)\n    for i in num3:\n        heapq.heappush(sorted_list, i)\n    # convert the sorted list to a list\n    sorted_list = [heapq.heappop(sorted_list) for i in range(len(sorted_list))]\n    # return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # merge three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # use heapq to sort the merged list\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n        \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # create a list of all three lists\n    merged_list = num1 + num2 + num3\n\n    # use heapq to merge the lists\n    heapq.heapify(merged_list)\n\n    # return the sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # Merge three lists into a single sorted list using heapq\n    heap = []\n    heapq.heapify(heap)\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n    \n    merged_list = []\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n        \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # convert lists to sets to ensure unique elements only\n    unique_num1 = set(num1)\n    unique_num2 = set(num2)\n    unique_num3 = set(num3)\n\n    # concatenate sets and convert to list\n    merged_list = list(unique_num1 | unique_num2 | unique_num3)\n\n    # sort list\n    merged_list.sort()\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    # initialize an empty list to store the merged sorted list\n    merged_list = []\n    # merge the three lists into one single sorted list using heapq\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) <= heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        else:\n            merged_list.append(heapq.heappop(num2))\n    # append any remaining elements from the lists to the merged list\n    while num1:\n        merged_list.append(heapq.heappop(num1))\n    while num2:\n        merged_list.append(heapq.heappop(num2))\n    while num3:\n        merged_list.append(heapq.heappop(num3))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    # Combine all three lists into one\n    combined_list = num1 + num2 + num3\n\n    # Use heapq to sort the combined list\n    sorted_list = heapq.merge(num1, num2, num3)\n\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Convert the binary string to a list of digits\n    digits = [int(d) for d in s]\n\n    # Initialize an empty list to store the odd numbers\n    odd_nums = []\n\n    # Loop through the given number of rotations\n    for i in range(n):\n\n        # Initialize two pointers, one at the beginning and the other at the end of the list\n        left = 0\n        right = len(digits) - 1\n\n        # Swap the first and last digits, then the second and second-to-last digits, and so on until the entire list is rotated n times\n        while left < right:\n            digits[left], digits[right] = digits[right], digits[left]\n            left += 1\n            right -= 1\n\n        # Add the odd digits to the odd_nums list\n        for d in digits:\n            if d % 2!= 0:\n                odd_nums.append(d)\n\n    # Return the number of odd digits in the rotated binary string\n    return len(odd_nums)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of binary digits\n    binary_digits = list(map(str, bin(int(s))[2:]))\n\n    # Find the length of the binary string\n    length = len(binary_digits)\n\n    # Rotate the binary string the given number of times\n    for i in range(n):\n        binary_digits.append(binary_digits.pop(0))\n\n    # Find the number of odd values in the rotated binary string\n    count = 0\n    for digit in binary_digits:\n        if int(digit) % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # convert string to list\n    s = list(s)\n    # count the number of 1's in the list\n    count = 0\n    for i in s:\n        if i == '1':\n            count += 1\n    # if the count is odd, divide the count by 2 to get the number of odd numbers\n    if count % 2 == 1:\n        return count // 2\n    # if the count is even, return 0\n    else:\n        return 0"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of binary digits\n    binary_digits = [int(digit) for digit in s]\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate n times\n    for i in range(n):\n        # Append the first digit to the end of the list\n        binary_digits.append(binary_digits[0])\n\n        # Remove the first digit from the beginning of the list\n        del binary_digits[0]\n\n        # Check if the binary digits list contains odd numbers\n        for digit in binary_digits:\n            if digit % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Convert the binary string to a list of digits\n    binary_list = list(s)\n\n    # Calculate the total number of digits in the binary string\n    total_digits = len(binary_list)\n\n    # Check if the length of the binary string is odd\n    if total_digits % 2 == 1:\n        # If it is odd, add a 0 to the beginning of the list to make it even\n        binary_list = [0] + binary_list\n\n    # Rotate the list of digits n times\n    for i in range(n):\n        temp = binary_list[-1]\n        for j in range(total_digits-1):\n            binary_list[j] = binary_list[j+1]\n        binary_list[-1] = temp\n\n    # Count the number of odd numbers in the rotated list\n    count = 0\n    for i in range(total_digits):\n        if binary_list[i] % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    # Initialize variables for the count and current rotation count\n    count = 0\n    rot_count = 0\n\n    # Loop through the string n times\n    for i in range(n):\n        # Loop through each character in the string\n        for j in range(len(s)):\n            # If the character is odd, increment the count\n            if int(s[j]) % 2!= 0:\n                count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    s = list(s) \n    for i in range(n): \n        if len(s) % 2 == 0: \n            temp = s[0] \n            for j in range(len(s)//2): \n                s[j], s[len(s)//2+j] = s[len(s)//2+j], temp \n        else: \n            temp = s[-1] \n            for j in range(len(s)//2, len(s)): \n                s[j], s[len(s)//2-1-j] = s[len(s)//2-1-j], temp \n    return sum(1 for i in s if i % 2 == 1)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    # Convert the binary string to a list of integers\n    binary_list = [int(bit) for bit in s]\n    # Create a new list with the rotated binary string\n    rotated_list = binary_list[n:] + binary_list[:n]\n    # Count the number of odd values in the rotated list\n    count = sum(bit for bit in rotated_list if bit%2!=0)\n    # Return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    # convert string to list of digits\n    s_list = list(s)\n\n    # rotate the list n times\n    for _ in range(n):\n        s_list = s_list[1:] + [s_list[0]]\n\n    # count the number of odd digits\n    count = sum(1 for digit in s_list if digit % 2 == 1)\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize variables\n    count = 0\n    last_digit = ord(s[0]) % 2\n    first_digit = ord(s[-1]) % 2\n    \n    # Rotate the binary string n times\n    for _ in range(n):\n        # Rotate the first digit\n        first_digit = (first_digit + 1) % 2\n        # Add the count of the new first digit to the count\n        count += first_digit\n    \n    # Check if the count of the last digit is odd or even\n    if count % 2 == 0:\n        odd_count = 0\n    else:\n        odd_count = 1\n    \n    # Add the count of the last digit to the count\n    count += odd_count\n    \n    # Return the count of the last digit\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common:\n                common.append(j)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty set to store common elements\n    common = set()\n    # iterate through the nested lists\n    for i in nestedlist:\n        # iterate through the inner lists\n        for j in i:\n            # check if the element is already in the set\n            if j not in common:\n                # add it to the set\n                common.add(j)\n    # return the set of common elements\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Use a set to store the common elements\n    common_set = set()\n\n    # Iterate through each element in the nested list\n    for elem in nestedlist:\n        # If the element is a list, recursively check for common elements\n        if isinstance(elem, list):\n            common_set.update(common_in_nested_lists(elem))\n        # If the element is not a list, add it to the set\n        else:\n            common_set.add(elem)\n\n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common = set()\n    \n    # Iterate through each nested list\n    for lst in nestedlist:\n        # Iterate through each element in the nested list\n        for elem in lst:\n            # Check if the element is already in the common set\n            if elem in common:\n                # If it is, increment the count for that element\n                common[elem] += 1\n            else:\n                # Otherwise, add the element to the set with a count of 1\n                common.add(elem)\n    \n    # Return the common set\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Loop through each list in the nested list\n    for i in nestedlist:\n        # Loop through each element in the current list\n        for j in i:\n            # If the element is already in the common_list, add it to the result_list\n            if j not in common_list:\n                common_list.append(j)\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for lst in nestedlist:\n        if lst not in common_list:\n            common_list.append(lst)\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create an empty dictionary to store common elements\n    common_dict = {}\n\n    # Loop through the nested list\n    for item in nestedlist:\n        # Loop through the elements in the current list\n        for element in item:\n            # If the element is already in the common dictionary, add it to the current item's list\n            if element in common_dict:\n                common_dict[element].append(item)\n            # Otherwise, add the element as a key with a single item list as the value\n            else:\n                common_dict[element] = [item]\n\n    # Create a set of common elements from the dictionary\n    common_set = set(common_dict.keys())\n\n    # Return a list of common elements\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for sublist in nestedlist:\n        common_elements.update(sublist)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common = set()\n    \n    # Loop through each sublist in the nested list\n    for sublist in nestedlist:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # Check if the element is already in the set\n            if element in common:\n                # If it is, append the sublist to a set of sublists that have common elements\n                common.add(sublist)\n                break\n            # If the element is not in the set, add it to the set\n            else:\n                common.add(element)\n    \n    # Return the set of common elements\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if not list1[i]:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if len(dictionary)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert tuple to list\n    nums_list = list(nums)\n    # initialize integer variable\n    result = 0\n    # iterate through list and add each element to result\n    for num in nums_list:\n        result += num\n    # return result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    int_num = 0\n    for num in nums:\n        int_num = int_num * 10 + num\n    return int_num"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty string to store the concatenated integers\n    result = \"\"\n    \n    # Iterate through each integer in the tuple\n    for num in nums:\n        # Convert the integer to a string and add it to the result string\n        result += str(num)\n        \n    # Convert the concatenated string of integers back to an integer and return it\n    return int(result)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    # Convert the tuple to a list to be able to perform a single pass over the list\n    nums = list(nums)\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate over the list and add each element to the sum\n    for num in nums:\n        sum += num\n    # Return the sum\n    return sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # initialize an empty string to store the integer value\n    num_str = \"\"\n    \n    # iterate through the tuple of integers\n    for num in nums:\n        # convert the integer to a string and append it to the num_str variable\n        num_str += str(num)\n        \n    # convert the num_str variable to an integer and return it\n    return int(num_str)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    int_num = 0\n    for num in nums:\n        int_num *= 10\n        int_num += num\n    return int_num"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize an empty list to store the sum of integers in the tuple\n    sum_list = []\n    # iterate over each integer in the tuple\n    for num in nums:\n        # add the integer to the sum_list\n        sum_list.append(num)\n    # convert the sum_list to a single integer using the built-in sum() function\n    return sum(sum_list)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # initialize an empty integer to hold the sum of the elements in the tuple\n    int_sum = 0\n    \n    # iterate through each element in the tuple\n    for num in nums:\n        # check if the element is a positive integer\n        if num > 0:\n            # add the positive integer to the sum\n            int_sum += num\n        # otherwise, raise an error\n        else:\n            raise ValueError(\"All elements in the tuple must be positive.\")\n    \n    # return the sum of the positive integers in the tuple\n    return int_sum"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    float_list = []\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, (int, float)):\n                float_list.append(float(element))\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for col in row:\n            if isinstance(col, str):\n                try:\n                    float(col)\n                    col = float(col)\n                except ValueError:\n                    pass\n            elif isinstance(col, list):\n                col = list_to_float(col)\n            if isinstance(col, (int, float)):\n                pass\n            else:\n                col = float(str(col))\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) or isinstance(test_list[i][j], int):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, row in enumerate(test_list):\n        for j, cell in enumerate(row):\n            try:\n                test_list[i][j] = float(cell)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, complex)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                element = float(element)\n                test_list[sublist.index(element)] = element"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        for element in item:\n            try:\n                float(element)\n            except ValueError:\n                print(f\"Element {element} cannot be converted to float\")\n                continue\n            else:\n                item.remove(element)\n                item.append(float(element))\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n\n    Parameters:\n    test_list (list of lists): A list of lists containing elements that can be converted to floats.\n\n    Returns:\n    list of floats: A list of floats containing the converted elements.\n    \"\"\"\n    float_list = []\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float_list.append(float(element))\n            except ValueError:\n                pass\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass  # do nothing for non-convertible elements\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on space character\n    words = string.split()\n    # return the list of words\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # initialize two pointers to the start and end of the array\n    start = 0\n    end = len(arr) - 1\n\n    # while the start pointer is less than the end pointer\n    while start < end:\n        # check if the current element is the same as the element at the start pointer\n        if arr[start] == arr[end]:\n            # if the element is found, move the start pointer to the right\n            start += 1\n            # if the element is not found, move the end pointer to the left\n            if start == end:\n                return arr[start]\n        # if the current element is not the same as the element at the start pointer,\n        # move the start pointer to the right\n        else:\n            start += 1\n\n    # if the loop completes, it means the element is not found and we return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    if len(arr) == 1:\n        return arr[0]\n\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Find the first and last elements of the array\n    first = arr[0]\n    last = arr[-1]\n\n    # Check if the first element is the same as the last element\n    if first == last:\n        return first\n\n    # Initialize the count of elements to 0\n    count = 0\n\n    # Initialize the index of the last occurrence of the first element\n    last_occurrence_index = -1\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # If the current element is the first occurrence of the first element, update the count and index\n        if arr[i] == first:\n            count += 1\n            last_occurrence_index = i\n\n        # If the count reaches 1 and the current element is not the last occurrence of the first element, return the first element\n        if count == 1 and arr[i]!= first:\n            return first\n\n    # If the loop completes without finding a second occurrence of the first element, return the last element\n    return last"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return search(arr[1:])"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    i = 1\n    while i < n:\n        if arr[i] == arr[i-1]:\n            i += 1\n        else:\n            break\n    return arr[i-1]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 1\n    element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == element:\n            count += 1\n        else:\n            count = 1\n            element = arr[i]\n    if count == 1:\n        return element\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to keep track of the count of each element in the array\n    count_dict = {}\n\n    # Iterate through the array and update the count of each element in the dictionary\n    for num in arr:\n        count_dict[num] = count_dict.get(num, 0) + 1\n\n    # Find the element that appears only once in the array\n    for key, value in count_dict.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in lst:\n        if num < 0:\n            current_product *= -1\n        else:\n            current_product *= num\n        \n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            temp_product = abs(list1[i][0] * list1[j][1])\n            if temp_product > max_product:\n                max_product = temp_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n):\n            current_product = abs(list1[i][0] * list1[j][1])\n            if current_product > max_product:\n                max_product = current_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = max(abs(list1[i][0] * list1[j][0]), abs(list1[i][1] * list1[j][1]))\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            max_product = max(product, max_product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i]*list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize variables\n    amicable_sum = 0\n    i = 2\n\n    # loop through all numbers from 1 to limit (inclusive)\n    while i <= limit:\n        # check if i is an amicable number\n        if i in [2, 3] or (limit // i) * i == limit:\n            # check if i is a multiple of any prime number between 2 and i-1\n            for j in range(2, i):\n                if limit % j == 0:\n                    break\n            else:\n                # if i is amicable, add it to the sum\n                amicable_sum += i\n\n        # increment i\n        i += 1\n\n    # return the sum of amicable numbers\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a dictionary to store the sum of two numbers as a key and the sum itself as a value\n    amicable_dict = {}\n    # Loop through all numbers from 1 to the specified limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable to any other number in the range\n        for other_num in range(1, limit + 1):\n            if (num!= other_num) and (num % other_num == 0) and (other_num % num == 0):\n                if num + other_num in amicable_dict:\n                    amicable_dict[num + other_num] += num\n                else:\n                    amicable_dict[num + other_num] = num\n    # Calculate the sum of all amicable numbers\n    amicable_sum = sum(amicable_dict.values())\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit):\n        if is_prime(num):\n            is_sum = True\n            for divisor in range(1, num):\n                if num % divisor == 0:\n                    is_sum = False\n                    break\n            if is_sum:\n                amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == sum([j for j in range(1, limit+1) if i % j == 0]):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for num in range(1, limit+1):\n        if num!= sum and num % sum == 0:\n            sum += num\n        if sum >= limit:\n            break\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if num == sum(range(1, num)):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a list to store the amicable numbers\n    amicable_numbers = []\n\n    # Loop through all numbers from 1 to the limit\n    for i in range(1, limit + 1):\n        # Check if the number is amicable\n        if i!= sum_of_proper_divisors(i):\n            # If it is, append it to the list of amicable numbers\n            amicable_numbers.append(i)\n\n    # Return the sum of all amicable numbers\n    return sum(amicable_numbers)\n\n\ndef sum_of_proper_divisors(n):\n    '''\n    Write a function to calculate the sum of all proper divisors of a number.\n    '''\n    # Initialize the sum of proper divisors to 0\n    sum_proper_divisors = 0\n\n    # Loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(n ** 0.5) + 1):\n        # Check if the number is a proper divisor of n\n        if n % i == 0:\n            # If it is, add it to the sum of proper divisors\n            sum_proper_divisors += i\n            # Also add all the other factors of n that are not divisors of i\n            sum_proper_divisors += n // i\n\n    # Return the sum of proper divisors\n    return sum_proper_divisors"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit):\n        num1 = i\n        num2 = 28 - num1\n        if num1 == num2:\n            amicable_numbers.append(num1)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i!= 1 and i!= limit:\n            if i in amicable_numbers:\n                continue\n            for j in range(1, limit + 1):\n                if j!= i and i + j == limit:\n                    amicable_numbers.append(i + j)\n                    break\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # List of all prime numbers between 2 and limit\n    primes = [2]\n    i = 3\n    while i * i <= limit:\n        if i in primes:\n            primes.append(i * i)\n        i += 2\n\n    # Initialize a dictionary to store the sum of all amicable pairs\n    amicable_pairs = {}\n\n    # Iterate through all prime numbers less than the limit\n    for p in primes:\n        # Check if p is an amicable pair\n        if (p + 1) in primes:\n            if p + 1 == p:\n                # If p is a perfect square, check if p is also an amicable pair\n                for k in range(p, int(p ** 0.5) + 1, p):\n                    if p + k == p:\n                        amicable_pairs[p] = (p + k)\n            else:\n                amicable_pairs[p] = p + 1\n\n    # Calculate the sum of all amicable pairs\n    amicable_sum = sum(amicable_pairs.values())\n\n    return amicable_sum"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns their angle in radians.\n    '''\n    angle = cmath.phase(a+b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Calculate the angle of the complex number\n    angle = cmath.phase(a+b*1j)\n\n    # Return the angle as a floating-point value in degrees\n    return float(angle.real)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function calculates the angle of a complex number a+bi.\n    '''\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    real = a.real\n    imag = a.imag\n    angle = cmath.phase(complex(real, imag))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Calculate the complex number from the real and imaginary parts\n    complex_number = a + b*1j\n\n    # Calculate the angle in radians\n    angle_rad = cmath.phase(complex_number)\n\n    # Convert the angle to degrees\n    angle_deg = angle_rad * 180 / cmath.pi\n\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the magnitude of the complex number\n    mag = cmath.sqrt(a**2 + b**2)\n    \n    # Calculate the argument of the complex number\n    arg = cmath.phase(mag+1j*b)\n    \n    # Convert the argument from radians to degrees\n    arg = arg * 180 / cmath.pi\n    \n    # Return the angle as a floating-point number\n    return float(arg)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            elif string[j] == '1':\n                count_1 += 1\n            else:\n                break\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_zeros = count_ones = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_zeros += 1\n            else:\n                count_ones += 1\n            if count_zeros == count_ones:\n                diff = count_zeros - count_ones\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count_0 = count_1 = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    count_0 += 1\n                else:\n                    count_1 += 1\n            max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    # convert the string to a list of binary digits\n    binary_list = [int(digit) for digit in string]\n\n    # initialize variables to keep track of the count of 0s and 1s in the string\n    count_0s = 0\n    count_1s = 0\n    max_diff = 0\n\n    # iterate through each substring of the binary string\n    for i in range(len(binary_list)):\n        # iterate through each character in the current substring\n        for j in range(len(binary_list[i])):\n            # increment the count of 0s and 1s in the current character\n            if binary_list[i][j] == 0:\n                count_0s += 1\n            else:\n                count_1s += 1\n\n            # check if the difference between the count of 0s and 1s is greater than the current maximum difference\n            diff = abs(count_0s - count_1s)\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    n = len(string)\n    max_diff = 0\n\n    for i in range(n):\n        count_0s = 0\n        count_1s = 0\n\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0s += 1\n            else:\n                count_1s += 1\n\n            diff = abs(count_0s - count_1s)\n\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    prev_num_zeros = 0\n    prev_num_ones = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            num_zeros = 0\n            num_ones = 1\n        else:\n            num_zeros = 1\n            num_ones = 0\n        \n        if i > 0 and string[i] == string[i-1]:\n            if string[i] == '0':\n                prev_num_zeros += 1\n            else:\n                prev_num_ones += 1\n            \n            if string[i] == '0':\n                num_zeros = prev_num_zeros + 1\n            else:\n                num_ones = prev_num_ones + 1\n                \n        if num_zeros - num_ones > max_diff:\n            max_diff = num_zeros - num_ones\n        \n        prev_num_zeros = num_zeros\n        prev_num_ones = num_ones\n        \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    count_zeroes = 0\n    count_ones = 0\n    max_diff = 0\n    for char in string:\n        if char == '0':\n            count_zeroes += 1\n        else:\n            count_ones += 1\n            if count_zeroes > 0 and count_ones > 0:\n                max_diff = max(max_diff, count_zeroes - count_ones)\n                count_zeroes = 0\n                count_ones = 0\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        count0 = 0\n        count1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            diff = abs(count0 - count1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    # create an empty dictionary to store the count of 0s and 1s\n    counts = {}\n    \n    # iterate through each character in the string\n    for char in string:\n        # if the character is a 0, increment the count of 0s\n        if char == '0':\n            counts['0'] = counts.get('0', 0) + 1\n        # if the character is a 1, increment the count of 1s\n        elif char == '1':\n            counts['1'] = counts.get('1', 0) + 1\n    \n    # find the maximum difference between the number of 0s and 1s in any sub-string of the string\n    max_diff = max(counts['0'] - counts['1'], counts['1'] - counts['0'])\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    \n    # Loop through all possible substrings of length n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            diff = 0\n            \n            # Count the number of 0s and 1s in each substring\n            for k in range(i, j):\n                if string[k] == '0':\n                    diff += 0\n                elif string[k] == '1':\n                    diff += 1\n            \n            # Update the maximum difference if the current substring has a greater difference\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, max(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    return sum(divisors)\n\n\nprint(sum_common_divisors(15, 25))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Get the set of common divisors between a and b\n    common_divisors = set(divisors(a) & divisors(b))\n\n    # Calculate the sum of common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Calculate the sum of the common divisors of two numbers using the Euclidean algorithm.\n    \"\"\"\n\n    # Find the GCD of the two numbers using the Euclidean algorithm\n    while b:\n        a, b = b, a % b\n\n    # Calculate the sum of the divisors of a and b\n    divisors = [i for i in range(1, a+1) if a % i == 0 and b % i == 0]\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # calculate the GCD of two numbers\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    # calculate the LCM of two numbers\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    # find the LCM and sum of common divisors\n    lcm_ab = lcm(a, b)\n    sum_cd = sum(lcm_ab, a) + sum(lcm_ab, b)\n\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # initialize sum to zero\n    total = 0\n    # iterate through all the numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # check if i is a divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            # add i to the total sum\n            total += i\n    # return the total sum\n    return total"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n\n    # Find the set of prime numbers up to the maximum number in the range\n    max_num = max(a, b)\n    primes = [True] * (max_num + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(max_num**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, max_num + 1, i):\n                primes[j] = False\n\n    # Find the common divisors of a and b\n    common_divisors = []\n    for i in range(2, max_num + 1):\n        if primes[i] and i in (a, b):\n            common_divisors.append(i)\n\n    # Calculate the sum of common divisors\n    common_divisor_sum = 0\n    for num in common_divisors:\n        common_divisor_sum += num\n\n    return common_divisor_sum\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n\n    Args:\n        a (int): First number\n        b (int): Second number\n\n    Returns:\n        int: Sum of common divisors of the two numbers\n    \"\"\"\n\n    def common_divisor(a, b):\n        \"\"\"\n        This function takes two numbers as input and returns their common divisor.\n\n        Args:\n            a (int): First number\n            b (int): Second number\n\n        Returns:\n            int: Common divisor of the two numbers\n        \"\"\"\n\n        # Check if a is divisible by b\n        while b!= 0:\n            temp = a % b\n            a = b\n            b = temp\n\n        return a\n\n    # Find the common divisor of the two numbers\n    common = common_divisor(a, b)\n\n    # Calculate the sum of common divisors\n    sum_common = 0\n    for i in range(1, common + 1):\n        if a % i == 0 and b % i == 0:\n            sum_common += i\n\n    return sum_common"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers a and b and returns the sum of their common divisors.\n    \"\"\"\n    # Get the common divisors of a and b\n    common_divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    # Calculate the sum of the common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    # finding the greatest common divisor of a and b\n    gcd = max(a,b)\n    while(gcd%a!=0 and gcd%b!=0):\n        if gcd%a>0:\n            a=a-gcd\n        else:\n            b=b-gcd\n        gcd=max(a,b)\n    \n    # calculating the sum of common divisors\n    sum_cd=0\n    for i in range(1,gcd+1):\n        if(gcd%i==0 and a%i==0 and b%i==0):\n            sum_cd+=i\n    \n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    def common_divisors(a, b):\n        \"\"\"\n        Write a function to find the common divisors of two numbers.\n        \"\"\"\n        divisors = []\n        for i in range(1, a + 1):\n            if a % i == 0 and b % i == 0:\n                divisors.append(i)\n        return divisors\n\n    def sum_of_common_divisors(divisors):\n        \"\"\"\n        Write a function to find the sum of common divisors.\n        \"\"\"\n        sum_cd = 0\n        for divisor in divisors:\n            sum_cd += divisor\n        return sum_cd\n\n    div1 = common_divisors(a, b)\n    div2 = common_divisors(b, a)\n    sum_cd1 = sum_of_common_divisors(div1)\n    sum_cd2 = sum_of_common_divisors(div2)\n    return sum_cd1 + sum_cd2"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(\"The result of multiplication of\", x, \"and\", y, \"is:\", result)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    carry = 0\n    while y!= 0:\n        # Get the last digit of x and y\n        x_last_digit = x % 10\n        y_last_digit = y % 10\n\n        # Calculate the product of x and y\n        product = x_last_digit * y_last_digit + carry\n\n        # Update the result and carry\n        result = result + product\n        carry = product // 10\n\n        # Update x and y\n        x = x // 10\n        y = y // 10\n\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into a list of words\n    result = [] # empty list to store the long words\n    for word in words:\n        if len(word) > n: # if the length of the word is greater than n\n            result.append(word) # add the word to the result list\n    return result # return the result list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    This function takes in a list of words and a maximum number of characters n and returns a list of words longer than n characters.\n\n    Args:\n    n (int): The maximum number of characters a word can have to be included in the returned list.\n    words (list): A list of words to filter.\n\n    Returns:\n    list: A list of words longer than n characters.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # check if the matrix has the same number of rows and columns\n    if rows!= cols:\n        return False\n\n    # create a list of tuples representing the rows of the magic square\n    magic_rows = [(i, j) for i in range(rows) for j in range(cols)]\n\n    # sort the rows and columns of the magic square\n    sorted_magic_rows = sorted(magic_rows, key=lambda x: (x[0], x[1]))\n\n    # check if the magic square has the same elements in the sorted order\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[sorted_magic_rows[i][0]][sorted_magic_rows[j][1]]!= i+1:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    # Check that the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check that all elements in the matrix are unique\n    unique_elements = set(sum(my_matrix, []))\n    if len(unique_elements)!= len(my_matrix) ** 2:\n        return False\n\n    # Check that the matrix is a magic square\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j] for j in range(len(my_matrix)))\n        if my_matrix[i][i]!= row_sum or my_matrix[i][i]!= col_sum:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    sum_of_row = 0\n    sum_of_col = 0\n    sum_of_box = 0\n    \n    # check rows\n    for i in range(n):\n        for j in range(n):\n            sum_of_row += my_matrix[i][j]\n        if sum_of_row!= sum_of_n * n:\n            return False\n        sum_of_row = 0\n        \n    # check cols\n    for j in range(n):\n        for i in range(n):\n            sum_of_col += my_matrix[i][j]\n        if sum_of_col!= sum_of_n * n:\n            return False\n        sum_of_col = 0\n        \n    # check boxes\n    for i in range(n):\n        box_i = i // 3\n        box_j = j // 3\n        sum_of_box += my_matrix[box_i*3+i%3][box_j*3+j%3]\n    if sum_of_box!= sum_of_n * n:\n        return False\n    sum_of_box = 0\n    \n    # all tests passed\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Define a function to check if a number is a magic square number\n    def is_magic_square(matrix, row, col):\n        # Check if the number in the current cell is equal to the sum of its row and column values\n        if matrix[row][col] == matrix[row][0] + matrix[0][col]:\n            # Check if the number in the next cell to the right is equal to the sum of its row and column values\n            if matrix[row][col] == matrix[row][1] + matrix[1][col] and matrix[row][1] + matrix[1][col] == matrix[row][2] + matrix[2][col]:\n                return True\n            # Check if the number in the next cell to the left is equal to the sum of its row and column values\n            elif matrix[row][col] == matrix[row][2] + matrix[2][col] and matrix[row][2] + matrix[2][col] == matrix[row][0] + matrix[0][col]:\n                return True\n        # If the number in the current cell is not equal to the sum of its row and column values, return False\n        return False\n    \n    # Define a function to check if the matrix is a magic square\n    def is_magic_square_matrix(matrix):\n        # Initialize a variable to keep track of the number of rows\n        row_count = len(matrix)\n        \n        # Loop through each row in the matrix\n        for row in range(row_count):\n            # Loop through each column in the matrix\n            for col in range(row_count):\n                # If the number in the current cell is not a magic square number, return False\n                if not is_magic_square(matrix, row, col):\n                    return False\n        # If we make it through the entire matrix without returning False, return True\n        return True\n    \n    # Check if the matrix is a magic square\n    if is_magic_square_matrix(my_matrix):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # calculate the sum of the diagonal elements\n    diagonal_sum = 0\n    for i in range(len(my_matrix)):\n        diagonal_sum += my_matrix[i][i]\n    \n    # check if the sum of the diagonal elements is equal to 15 (the magic number)\n    if diagonal_sum!= 15:\n        return False\n    \n    # check if the matrix is the identity matrix\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if i!= j and my_matrix[i][j]!= 1:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check the rows and columns for each element\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j]!= sum(my_matrix[i]) - sum(my_matrix[j]) + my_matrix[i][j]:\n                return False\n            if my_matrix[i][j]!= sum(my_matrix[j]) - sum(my_matrix[i]) + my_matrix[j][i]:\n                return False\n\n    # Check the main diagonals for each element\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= sum(my_matrix[i]) - sum(my_matrix[:i]) + my_matrix[i][i]:\n            return False\n        if my_matrix[i][i]!= sum(my_matrix[i]) - sum(my_matrix[i+1:]) + my_matrix[i][i]:\n            return False\n\n    # Check the secondary diagonals for each element\n    for i in range(len(my_matrix)):\n        if my_matrix[i][-i-1]!= sum(my_matrix[i]) - sum(my_matrix[:i]) + my_matrix[i][-i-1]:\n            return False\n        if my_matrix[i][-i-1]!= sum(my_matrix[i]) - sum(my_matrix[i+1:]) + my_matrix[i][-i-1]:\n            return False\n\n    # If we make it through all the checks, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    \n    # Check if all elements in the matrix are unique\n    if len(set(sum(my_matrix, [])))!= rows*cols:\n        return False\n    \n    # Check for symmetry in each row\n    for i in range(rows):\n        if my_matrix[i][i]!= my_matrix[rows-1-i][i]:\n            return False\n    \n    # Check for symmetry in each column\n    for i in range(cols):\n        col = [row[i] for row in my_matrix]\n        if col == col[::-1]:\n            return False\n    \n    # Check for symmetry in the main diagonal\n    diag1 = [my_matrix[i][i] for i in range(rows)]\n    if diag1 == diag1[::-1]:\n        return False\n    \n    # Check for symmetry in the secondary diagonal\n    diag2 = [my_matrix[i][rows-1-i] for i in range(rows)]\n    if diag2 == diag2[::-1]:\n        return False\n    \n    # All tests passed\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    sum_col = [sum(row) for row in my_matrix]\n    sum_row = [sum(row) for row in zip(*my_matrix)]\n    sum_square = sum(row for row in my_matrix for col in row)\n    if all(i == j for i in sum_col) and all(i == k for i in sum_row) and all(i == l for i in sum_square):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # check if the matrix has the correct dimensions\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            # check if the element is in the matrix\n            if my_matrix[i][j] == 0:\n                return False\n            # check if the element is repeated in the row\n            if i > 0 and my_matrix[i][j] == my_matrix[i-1][j]:\n                return False\n            # check if the element is repeated in the column\n            if j > 0 and my_matrix[i][j] == my_matrix[i][j-1]:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # get the dimensions of the matrix\n    rows, cols = len(my_matrix), len(my_matrix[0])\n\n    # check if the matrix is a square matrix\n    if rows!= cols:\n        return False\n    \n    # check if the matrix contains only positive integers\n    for i in range(rows):\n        for j in range(cols):\n            if not isinstance(my_matrix[i][j], int) or my_matrix[i][j] < 1:\n                return False\n\n    # check if the matrix can be transformed into a magic square by reflecting its diagonals\n    for i in range(rows):\n        if my_matrix[i][i]!= my_matrix[rows-i-1][rows-i-1]:\n            return False\n\n    for j in range(cols):\n        if my_matrix[j][j]!= my_matrix[j][rows-j-1]:\n            return False\n\n    # the matrix is a magic square\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    max_count = 0\n    max_item = None\n    for num in nums:\n        count_dict[num] += 1\n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with maximum frequency.\n    '''\n\n    # Create a defaultdict to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency\n    max_item = max(freq, key=freq.get)\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    return max(freq, key=lambda x: freq[x] == max_freq)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_num = None\n    for num in nums:\n        freq[num] += 1\n        if max_num is None or freq[num] > freq[max_num]:\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each number\n    freq_dict = defaultdict(int)\n\n    # Iterate through the list of numbers\n    for num in nums:\n        # Increment the frequency of the current number in the dictionary\n        freq_dict[num] += 1\n\n    # Initialize the maximum frequency and the item with maximum frequency\n    max_freq = 0\n    max_item = None\n\n    # Iterate through the dictionary to find the item with maximum frequency\n    for key, value in freq_dict.items():\n        if value > max_freq:\n            max_freq = value\n            max_item = key\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    \n    # Iterate through the list and update the frequency of each item\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with maximum frequency and return it\n    return max(freq, key=freq.get)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with\n    the maximum frequency in the list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_count = 0\n    max_num = None\n    \n    for num, count in freq_dict.items():\n        if count > max_count:\n            max_count = count\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    # count the frequency of each item in the list\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # find the item with the maximum frequency\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels:\n            reversed_str += char\n    return reversed_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = list(str1)\n    vowels_index = []\n\n    for i in range(len(str1)):\n        if str1[i].lower() in vowels:\n            vowels_index.append(i)\n\n    for i in range(len(vowels_index)-1, -1, -1):\n        str1.pop(vowels_index[i])\n\n    return ''.join(str1)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels:\n            reversed_str += char\n    return reversed_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    result = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in str1:\n        if char in vowels:\n            result = char + result\n        else:\n            result += char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = []\n    for i, char in enumerate(str1):\n        if char in vowels:\n            vowel_indices.append(i)\n    vowel_indices.reverse()\n    result = []\n    for i in vowel_indices:\n        result.append(str1[i])\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1_list = list(str1)\n    i = 0\n    j = len(str1_list) - 1\n    while i < j:\n        if str1_list[i] not in vowels and str1_list[j] not in vowels:\n            i += 1\n            j -= 1\n        elif str1_list[i] in vowels:\n            str1_list[i], str1_list[j] = str1_list[j], str1_list[i]\n            i += 1\n            j -= 1\n        elif str1_list[j] in vowels:\n            j -= 1\n    return \"\".join(str1_list)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    reversed_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            reversed_str = str1[i] + reversed_str\n        else:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            result += char\n    return result[::-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    s = str(tup1)\n    # Remove the parentheses and square brackets from the string\n    s = s.replace('(', '').replace(')', '').replace('[', '').replace(']', '')\n    # Return the modified string\n    return s"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # define a string variable to store the tuple as a string\n    tup_str = ''\n    # loop through the tuple and add each element to the string variable\n    for i in tup1:\n        tup_str += str(i)\n    # return the string variable\n    return tup_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_nums = [num for num in nums if num < 0]\n    return sum(neg_nums)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives_sum = 0\n    for num in nums:\n        if num < 0:\n            negatives_sum += num\n    return negatives_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        return \"Error: n must be a positive integer.\"\n    hexagonal = n * (2 * n - 1) // 2\n    return hexagonal"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    return 2 * n - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 0\n    for i in range(1, n+1):\n        hex_num += i * (i * 2 - 1)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2 * n * (n+1)) + (5 * n**2) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 2\n    c = a + b\n    count = 1\n\n    while count < n:\n        print(c, end=' ')\n        d = 6 * a + b\n        a = b\n        b = c\n        c = d\n        count += 1\n\n    print()\n    return c"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case for n = 0\n    if n == 0:\n        return 0\n    # Base case for n = 1\n    elif n == 1:\n        return 1\n    # Base case for n = 2\n    elif n == 2:\n        return 6\n    # Base case for n = 3\n    elif n == 3:\n        return 15\n    # Recursive case\n    else:\n        return (2 * hexagonal_num(n-1)) + hexagonal_num(n-2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 5\n    for i in range(1, n+1):\n        print(a, end=' ')\n        a += b\n        b += 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2*n-1))\n\nn = int(input(\"Enter a number: \"))\n\nprint(\"The {}th hexagonal number is: {}\".format(n, hexagonal_num(n)))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = (n * (2 * n - 1)) // 2\n    return hex_num"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list to make it iterable\n    nums = list(nums)\n    # Count the number of non-zeroes and zeroes\n    non_zeros = len([num for num in nums if num!= 0])\n    zeros = len([num for num in nums if num == 0])\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = non_zeros / zeros if zeros > 0 else 0\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    non_zero_count = 0\n    zero_count = 0\n\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n\n    zero_ratio = zero_count / non_zero_count if non_zero_count!= 0 else 0\n\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0])\n    for num in nums:\n        if num == 0:\n            zero_count.itemset(0, zero_count[0] + 1)\n    non_zero_count = len(nums) - zero_count[0]\n    return non_zero_count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a standard Python list\n    nums_list = list(nums)\n\n    # Count the number of zeroes and non-zeroes\n    zeros = 0\n    non_zeros = 0\n    for num in nums_list:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    if non_zeros == 0:\n        return 0.0\n    else:\n        return float(zeros) / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    # Convert the input array to an array of integers\n    arr = array('i', nums)\n\n    # Calculate the total number of elements in the array\n    n = len(arr)\n\n    # Initialize variables to keep track of non-zero and zero elements\n    non_zero_count = 0\n    zero_count = 0\n\n    # Loop through the array and count non-zero and zero elements\n    for i in range(n):\n        if arr[i]!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n\n    # Calculate the ratio of non-zero to zero elements\n    ratio = non_zero_count / zero_count if non_zero_count!= 0 else 0\n\n    # Return the ratio of non-zero to zero elements\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeroes = 0\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    non_zeroes = float(non_zeroes)\n    zeroes = float(zeroes)\n    ratio = zeroes / non_zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0]*len(nums)) #initialize an array of zeros of the same length as the input array\n    for num in nums:\n        count[num] += 1 #increment the count of the corresponding index in the array\n    non_zero_count = sum(count) #calculate the total count of non-zeroes in the array\n    zero_count = sum(count) - non_zero_count #calculate the total count of zeroes in the array\n    return (zero_count/non_zero_count)*100 #return the ratio of zeroes to non-zeroes as a percentage"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i')\n    for num in nums:\n        count.append(num)\n    zero_count = count.count(0)\n    non_zero_count = len(count) - zero_count\n    if zero_count == 0:\n        ratio = 0\n    else:\n        ratio = non_zero_count / zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0])\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            zeros.append(0)\n    non_zeros = zeros.count(0)\n    zeros_ratio = non_zeros / len(nums)\n    return zeros_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list to make it easier to iterate over\n    num_list = list(nums)\n    zero_count = 0\n    non_zero_count = 0\n    \n    # Iterate over the list and count the number of zeroes and non-zeroes\n    for num in num_list:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    # Calculate the ratio and return it as a float\n    if non_zero_count == 0:\n        return 0\n    else:\n        return float(zero_count) / non_zero_count"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    power = 1\n    while n > 0:\n        count += 1\n        if n & 1 == 1:\n            return False\n        n >>= 1\n        power <<= 1\n    return count == power - 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Find the number of 1's in the binary representation of n\n    count = sum([1 for digit in bin(n)[2:] if digit == '1'])\n\n    # If the count is 1, then there exists at least one power of 2 in n\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if n is already a power of 2\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    elif n & (n - 1) == 0:\n        return is_Sum_Of_Powers_Of_Two(n & (n - 1))\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    elif n % 2 == 0: \n        return False\n    else: \n        return is_Sum_Of_Powers_Of_Two(n//2) + is_Sum_Of_Powers_Of_Two(n//2)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the input number is greater than 0\n    if n <= 0:\n        return False\n    # Iterate over all the powers of 2 between 1 and n and check if the number can be represented as sum of non-zero powers of 2 or not\n    for i in range(1, n+1):\n        if n % i == 0 and is_Sum_Of_Powers_Of_Two(i) or n == i:\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # check for base cases\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    \n    # loop through all bits of the number\n    for i in range(1, n+1):\n        \n        # if the current bit is 1, check if the next bit is also 1\n        if (n & i) == i:\n            \n            # if the next bit is 1, check if the next bit is also 1\n            if (n & (i << 1)) == (i << 1):\n                return True\n    \n    # if no bits in the number match 1 and the next bit is also 1, it is not a power of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n can be represented as sum of non-zero powers of 2,\n    else it returns False.\n    \"\"\"\n    if n == 0:\n        return True\n    \n    # initialize variables to keep track of the number of powers of 2 and the remainder\n    count = 0\n    remainder = n\n    \n    # loop until the remainder is less than or equal to 1\n    while remainder <= 1:\n        # if the remainder is equal to 0, return True since we have reached a power of 2\n        if remainder == 0:\n            return True\n        \n        # increment the count and divide the remainder by 2\n        count += 1\n        remainder = remainder // 2\n    \n    # if the remainder is greater than 1, we need to check for the non-zero powers of 2 in the remainder\n    # loop through the non-zero powers of 2 from 2 to the square root of the remainder\n    for i in range(2, int(remainder**0.5)+1):\n        # if the remainder is divisible by i, decrement the count and divide the remainder by i\n        if remainder % i == 0:\n            count -= 1\n            remainder //= i\n    \n    # if the count is still greater than 0, it means there were non-zero powers of 2 in the remainder\n    return count > 0"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Function to check whether a number is a power of 2\n    def is_power_of_2(num):\n        return num == (1 << num).bit_length()\n\n    # Function to check whether the given number can be represented as sum of non-zero powers of 2 or not\n    def can_represent(num):\n        # Check if the given number is divisible by 2\n        if num % 2 == 0:\n            return False\n\n        # Check if the given number is a power of 2\n        if not is_power_of_2(num):\n            return False\n\n        # Check if the given number is representable as sum of non-zero powers of 2\n        # Calculate the number of bits required to represent the given number\n        bits_required = 0\n        while num > 1:\n            num //= 2\n            bits_required += 1\n\n        # Check if the given number can be represented as sum of non-zero powers of 2\n        num = 1 << bits_required\n        while num <= n:\n            if (num * (num + 1)) // 2 == n:\n                return True\n            num += 1\n\n        return False\n\n    # Check if the given number is representable as sum of non-zero powers of 2 or not\n    if can_represent(n):\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if n is a power of 2\n    if n & (n - 1) == 0:\n        # If it is a power of 2, check if the sum of powers of 2 is equal to n\n        return (n & (n - 1)) == 0\n    else:\n        # If n is not a power of 2, return False\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n\n    # check if the given number is a power of 2\n    power_of_two = 1\n    while power_of_two < n:\n        power_of_two <<= 1\n\n    if power_of_two == n:\n        # check if the given number can be represented as sum of non-zero powers of 2\n        power_of_two = 1\n        while power_of_two < n:\n            if n % power_of_two == 0:\n                # check if the remainder of n divided by power_of_two is 0\n                if (n // power_of_two) % 2 == 0:\n                    return False\n            power_of_two <<= 1\n        return True\n    else:\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n\nprint(circle_circumference(5))"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    print(\"The circumference of a circle with radius\", r, \"is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265358979323846\n    return 2 * pi * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    print(f\"The circumference of a circle with radius {r} is {circumference:.2f} units.\")"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened += sublist\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sub_list in test_list:\n        flat_list.extend(sub_list)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [num for sublist in test_list for num in sublist]\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for sub_list in test_list:\n        singly_list.extend(sub_list)\n    return singly_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list += extract_singly(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    # The length of the input list\n    n = len(nums)\n\n    # Create a boolean list indicating whether each element is in its sorted position\n    sorted = [True] * n\n\n    # Keep track of the largest index of an unsorted element\n    max_index = 0\n\n    # Iterate over the input list from the last element to the first\n    for i in range(n-2, -1, -1):\n        # If the element is not sorted, find its largest unsorted neighbor\n        if not sorted[i]:\n            max_index = i\n            for j in range(i+1, n):\n                if not sorted[j]:\n                    if nums[j] > nums[max_index]:\n                        max_index = j\n            # Swap the elements at the current index with the maximum unsorted neighbor\n            nums[i], nums[max_index] = nums[max_index], nums[i]\n            # Mark the two elements as sorted\n            sorted[i], sorted[max_index] = True, True\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # initialize the largest element as the last element\n    largest = nums[n-1]\n    # initialize the index of the largest element as the last index\n    idx = n-1\n    # loop until the largest element is reached\n    while largest > 0:\n        # loop through the array from the largest element to the second largest element\n        for i in range(n-2, -1, -1):\n            # if the current element is greater than the largest element, swap it with the largest element\n            if nums[i] > largest:\n                nums[i], nums[idx] = nums[idx], nums[i]\n                # update the largest element and its index\n                largest = nums[idx]\n                idx = i\n                # if the largest element is not the second largest element, break the loop\n                if largest!= nums[n-2]:\n                    break\n        # if the largest element is not the second largest element, break the loop\n        if largest!= nums[n-2]:\n            break\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n\n    # Create a helper list to store indices of elements that are already sorted\n    helper = [0] * n\n\n    # One by one move boundary of unsorted subarray of size n-1\n    for start in range(n-1):\n        # Find the maximum element in unsorted array starting from start\n        max_idx = start\n        for end in range(start+1, n):\n            if nums[end] > nums[max_idx]:\n                max_idx = end\n\n        # Swap the maximum element with the first element of the unsorted subarray\n        nums[start], nums[max_idx] = nums[max_idx], nums[start]\n\n        # Update the index of the last element that is sorted\n        helper[start] = max_idx\n\n    # Print the sorted array\n    for i in range(n-1, -1, -1):\n        print(nums[i], end=\" \")\n\n    # Print the indices of elements that are already sorted\n    print(\"\\nSorted indices: \", end=\"\")\n    for i in range(n-1, -1, -1):\n        print(helper[i], end=\" \")"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    def sort(arr, n):\n        if n == 1:\n            return\n        \n        # find the largest element in the first n-1 elements\n        max_idx = 0\n        for i in range(1, n):\n            if arr[i] > arr[max_idx]:\n                max_idx = i\n        \n        # swap the largest element with the first element\n        arr[0], arr[max_idx] = arr[max_idx], arr[0]\n        \n        # recursively sort the remaining n-1 elements\n        sort(arr, n-1)\n    \n    # sort the list in ascending order\n    sort(nums, len(nums))\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Start with a pancake of size n-1\n    for i in range(n-1, 0, -1):\n        # Find the index of the smallest element in the remaining pancake\n        smallest = i\n        for j in range(i):\n            if nums[j] > nums[smallest]:\n                smallest = j\n        # Swap the smallest element with the element at the end of the pancake\n        nums[i], nums[smallest] = nums[smallest], nums[i]\n        # Reverse the pancake so it starts at the next smallest element\n        reverse_pancake(nums, 0, i-1)\n    # Reverse the final sorted pancake to get the final sorted array\n    reverse_pancake(nums, 0, n-1)\n\n\ndef reverse_pancake(nums, start, end):\n    '''\n    Helper function to reverse a subarray of the given array.\n    '''\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the length of the list\n    n = len(nums)\n    # Use a loop to generate a sequence of pancakes of length n\n    for i in range(1, n+1):\n        # Sort the first i elements of the list\n        nums[:i] = sorted(nums[:i])\n        # Reverse the i-th element and the i-1 element\n        nums[i], nums[i-1] = nums[i-1], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # create a list of length n where each element is False\n    is_sorted = [False] * n\n    # create a list of length n where each element is the index of the pancake that is being sorted\n    pancake_indices = [None] * n\n    # initialize pancake_indices to 0\n    for i in range(n):\n        pancake_indices[i] = i\n    # main loop\n    while True:\n        # find the index of the largest unsorted element\n        max_index = -1\n        max_value = -1\n        for i in range(n):\n            if not is_sorted[i] and nums[i] > max_value:\n                max_index = i\n                max_value = nums[i]\n        if max_index == -1:\n            # all elements are sorted\n            break\n        # swap the largest unsorted element with the element at pancake_indices[max_index]\n        nums[max_index], nums[pancake_indices[max_index]] = nums[pancake_indices[max_index]], nums[max_index]\n        # mark the pancake as sorted\n        is_sorted[max_index] = True\n        is_sorted[pancake_indices[max_index]] = True\n        # find the next unsorted element and its pancake index\n        next_max_index = -1\n        next_max_value = -1\n        next_max_pancake_index = -1\n        for i in range(n):\n            if not is_sorted[i] and nums[i] > next_max_value:\n                next_max_index = i\n                next_max_value = nums[i]\n                next_max_pancake_index = i\n        # move the pancake to the next unsorted element\n        pancake_indices[max_index] = next_max_pancake_index\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # start with a single pancake and move it to the end\n    for i in range(n):\n        # choose the pancake with the smallest value to swap with the last element\n        index = i\n        min_index = i\n        for j in range(i, n):\n            if nums[j] < nums[min_index]:\n                min_index = j\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n        # print the sorted list at each iteration\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # find the maximum element in the list\n    max_num = max(nums)\n    # perform the pancake sort\n    while True:\n        swapped = False\n        for i in range(n-1):\n            # if the current element is greater than the next element, swap them\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        if not swapped:\n            break\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n\n    The pancake sort algorithm is a sorting algorithm that works by starting with a box containing the elements of the list. \n    The algorithm then selects the largest element from the box and places it at the end of the box. \n    The algorithm then selects the second largest element from the box and places it one position to the left of the selected element. \n    The algorithm repeats this process for the remaining elements in the box until the box is sorted.\n\n    This algorithm has a time complexity of O(n^2) in the worst case, but can be made more efficient using a stable sorting algorithm like heapsort or quicksort.\n    '''\n\n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n\n        if l < n and arr[l] > arr[largest]:\n            largest = l\n\n        if r < n and arr[r] > arr[largest]:\n            largest = r\n\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    def heap_sort(arr):\n        n = len(arr)\n        for i in range(n//2 - 1, -1, -1):\n            heapify(arr, n, i)\n        for i in range(n-1, 0, -1):\n            arr[i], arr[0] = arr[0], arr[i]\n            heapify(arr, i, 0)\n\n    heap_sort(nums)\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            for j in range(len(list1)):\n                if list1[i] == list3[j]:\n                    count += 1\n                    break\n            break\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list2[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if isinstance(item, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) is list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    for i in Input:\n        if type(i) == list:\n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Find the maximum element in the array\n    max_element = max(arr)\n\n    # Initialize two variables to hold the maximum absolute difference and its index\n    max_diff = 0\n    max_index = 0\n\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Calculate the absolute difference between the current element and the maximum element\n        diff = abs(arr[i] - max_element)\n\n        # If the absolute difference is greater than the maximum absolute difference found so far, update the variables\n        if diff > max_diff:\n            max_diff = diff\n            max_index = i\n\n    # Return the maximum absolute difference and its index\n    return max_diff, max_index"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff: \n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    # iterate through the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            max_diff = max(diff, max_diff)\n            \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(len(arr)-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    # Initialize two variables to keep track of the current minimum and maximum values\n    current_min = arr[0]\n    current_max = arr[0]\n    # Iterate through the array and update the minimum and maximum values accordingly\n    for num in arr:\n        if num < current_min:\n            current_min = num\n        elif num > current_max:\n            current_max = num\n    # Return the maximum absolute difference between any two elements in the array\n    return abs(current_max - current_min)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # find the values of x and y that satisfy ax + by = n\n    x1 = (-b + n**0.5) / a\n    x2 = (-b - n**0.5) / a\n    \n    # check if there is only one solution\n    if x1 == x2:\n        return (x1, x1)\n    \n    # if there are two solutions, return them as a tuple\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize two variables to keep track of the solutions\n    x1 = 0\n    y1 = 0\n\n    # loop over all possible values of x\n    for x in range(-n, n+1):\n        # loop over all possible values of y\n        for y in range(-n, n+1):\n            # check if the solution satisfies ax + by = n\n            if a * x + b * y == n:\n                # if it does, return the solution as a tuple\n                return (x, y)\n\n    # if no solution was found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extended_euclidean_algorithm(a, b):\n    '''\n    Returns a tuple containing the two integers x and y such that ax + by = gcd(a, b), where gcd(a, b) is the greatest common divisor of a and b.\n    '''\n    if b == 0:\n        return (a, 1)\n    d, x, y = extended_euclidean_algorithm(b, a % b)\n    return (y, x - (a // b) * y)\n\n\ndef find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    gcd = extended_euclidean_algorithm(a, b)\n    if gcd[0] == 0:\n        return None\n    x = (n // gcd[0]) * gcd[1]\n    y = n % gcd[0]\n    return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # initialize variables\n    x = 0\n    y = 0\n    is_solvable = False\n\n    # iterate until a solution is found or no more solutions can be found\n    while not is_solvable:\n\n        # try to find a solution with x + b = n\n        if n - a * x - b * y == 0:\n            is_solvable = True\n\n        # if no solution can be found, try a new value for x\n        elif n - a * (x + 1) - b * y == 0:\n            x += 1\n            is_solvable = True\n\n        # if no solution can be found, try a new value for y\n        elif n - a * x - b * (y + 1) == 0:\n            y += 1\n            is_solvable = True\n\n        # if no solution can be found, return None\n        else:\n            return None\n\n    # return the solution as a tuple\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    if a == 0:\n        return None\n\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*n\n\n    # check if the discriminant is positive\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        return (int(x1), int(x2))\n\n    # if the discriminant is negative, check if x1 or x2 have the correct sign\n    elif discriminant < 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        if x1**2 + x2**2 == n:\n            return (int(x1), int(x2))\n        elif x1**2 + x2**2 > n:\n            return (int(x1), int(x2))\n        else:\n            return None\n\n    # if the discriminant is zero, return None\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # initialize the variables\n    x = 0\n    y = 0\n    mod = 0\n\n    # check if a is not equal to zero\n    if a == 0:\n        return None\n\n    # check if b is not equal to zero\n    if b == 0:\n        return None\n\n    # calculate the value of mod (modulus)\n    mod = b**2 - 4*a*n\n\n    # check if mod is negative\n    if mod < 0:\n        return None\n\n    # calculate the values of x and y such that ax + by = n\n    x1 = (-b + mod**0.5) / (2*a)\n    x2 = (-b - mod**0.5) / (2*a)\n    y1 = (a*x1**2) + (b*x1) + n\n    y2 = (a*x2**2) + (b*x2) + n\n\n    # check if there is a solution\n    if (y1 == 0 and y2 == 0) or (y1!= 0 and y2!= 0):\n        return None\n\n    # return the tuple of x and y\n    return (x1, x2, y1, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n):\n        if a * i + b * (n - i) == n:\n            return i, n - i\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if a == 0:  # ax + by = n cannot be true\n        return None\n    x_1 = -b / a  # x1 = -b/a\n    y_1 = n / a - x_1 * b  # y1 = n/a - x1b\n    return (x_1, y_1)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a, b, n are integers\n    if not all(isinstance(x, int) and isinstance(y, int) and isinstance(n, int) for x in [a, b, n]):\n        return None\n    \n    # Check if a, b, n have different signs\n    if a * b > 0:\n        return None\n    \n    # Initialize variables\n    x = None\n    y = None\n    \n    # Iterate through all possible solutions\n    for i in range(-n, n+1):\n        if a * i + b * j == n:\n            x = i\n            y = j\n            break\n        elif a * i + b * j < n:\n            x = i\n            y = j\n    \n    # Check if a solution was found\n    if x is None:\n        return None\n    \n    # Return the solution as a tuple\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are both positive\n    if a <= 0 or b <= 0:\n        return None\n\n    # initialize x and y\n    x = 0\n    y = 0\n\n    # iterate until n is 0 or we have found a solution\n    while n > 0:\n        # divide n by a and y by b, and find the remainder\n        x_remainder = n % a\n        y_remainder = n // b\n\n        # check if x_remainder is positive and y_remainder is positive\n        if x_remainder > 0 and y_remainder > 0:\n            return (x, y)\n\n        # update x and y\n        x += x_remainder\n        y += y_remainder\n\n        # check if n is divisible by a or b\n        n = (n // a) + (n % a // b)\n\n    # return None if no solution was found\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Iterate through the first list and remove all the elements present in the second list\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            del list1[i]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # create an empty list to store the elements from list1 that are not present in list2\n    result = []\n    \n    # iterate through list1\n    for item in list1:\n        # check if item is not present in list2\n        if item not in list2:\n            # add item to result list\n            result.append(item)\n    \n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Create a new list to store the result\n    result = []\n    \n    # Loop through each element in the first list\n    for item in list1:\n        # Check if the element is not present in the second list\n        if item not in list2:\n            # If it is not, add it to the result list\n            result.append(item)\n    \n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Use a set to store all elements in list1 and set to store elements in list2\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Use a set intersection to get the elements in set1 that are not in set2\n    result = set1.intersection(set2)\n\n    # Convert the result set to a list and return it\n    return list(result)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize the sum to zero\n    sum = 0\n    \n    # loop through all the numbers from 0 to n // 2\n    for i in range(n // 2):\n        # calculate the sum and add it to the running total\n        sum += n - 2 * i\n    \n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum([(n - 2*i) for i in range(n // 2)])"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        sum_val = 0\n        for i in range(n // 2):\n            sum_val += n - 2*i\n        return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return n\n    else:\n        x = n - n // 2\n        return x + sum_series(n - x)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    result = 0\n    i = 0\n    while n - 2 * i >= 0:\n        result += n - 2 * i\n        i += 1\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    i = 0\n    while n - 2*i >= 0:\n        i += 1\n\n    sum_val = 0\n    while i >= 0:\n        sum_val += n - 2*i\n        i -= 1\n\n    return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n - 2 * i >= 0:\n        sum += n - 2 * i\n        i += 1\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * (l * math.sin(math.pi / l))) / (4 * math.tan(math.pi / l))"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    # Calculate the base and height of the polygon\n    base = s * tan(pi / l)\n    \n    # Calculate the area of the polygon using Heron's formula\n    area = (s * l * (s + l)) / 4\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the length of each side of the polygon\n    side_length = s / l\n\n    # Calculate the area of each side using Heron's formula\n    area_list = []\n    for i in range(l):\n        area_list.append(0.5 * s * tan((i * pi) / l))\n\n    # Calculate the area of the polygon as the sum of its individual areas\n    area = sum(area_list)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # convert the length and sides to radian\n    angle = 2 * pi / l\n    # calculate the area of the polygon\n    area = s * (tan(angle / 2)**2)\n    # return the area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (1 + tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the value of the semi-perimeter using the formula s = (n-2)*a\n    semi_perimeter = (l - 2 * s) / s\n\n    # Calculate the value of the area using the formula area = 1/2 * s * (1 + tan(pi/n)^2)\n    area = 0.5 * s * (1 + tan(pi / l) ** 2)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*s)/(4*tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # find the sum of the divisors of n\n    div_sum = sum(set(range(1, n+1)) & set(map(int, str(n))))\n\n    # calculate the sum of the divisors of n using math.prod\n    math_div_sum = math.prod(range(1, n+1))\n\n    return div_sum == math_div_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # function to find the divisors of a number\n    def find_divisors(num):\n        divs = []\n        for i in range(1, int(num**0.5)+1):\n            if num % i == 0:\n                divs.append(i)\n                if i!= num // i:\n                    divs.append(num // i)\n        return divs\n    \n    # find the divisors of n and m\n    div_n = find_divisors(n)\n    div_m = find_divisors(m)\n    \n    # find the sum of the divisors of n and m\n    n_div_sum = sum(div_n)\n    m_div_sum = sum(div_m)\n    \n    # check if the sum of the divisors of n and m is the same\n    if n_div_sum == m_div_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = set(set(range(1, int(math.sqrt(n))+1)) - set(range(int(math.sqrt(n))+1, n+1)))\n    div_sum = sum(divisors)\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    def factors(n):\n        '''\n        Generates a list of factors of n.\n        '''\n        factors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                factors.append(i)\n        return factors\n    \n    def sum_factors(factors):\n        '''\n        Calculates the sum of the factors of a number.\n        '''\n        return sum(factors)\n    \n    def gcd(a, b):\n        '''\n        Returns the greatest common divisor of a and b.\n        '''\n        return math.gcd(a, b)\n    \n    def lcm(a, b):\n        '''\n        Returns the least common multiple of a and b.\n        '''\n        return a * b // gcd(a, b)\n    \n    def is_lcm(a, b):\n        '''\n        Checks if a and b have the same least common multiple.\n        '''\n        return lcm(a, b) == a * b\n    \n    divisors = factors(n)\n    sum_divisors = sum_factors(divisors)\n    \n    return is_lcm(sum_divisors, lcm(n, 1))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 0: \n        return \"Invalid input\"\n    div_list = [] \n    for i in range(1, n+1): \n        if n % i == 0: \n            div_list.append(i) \n    div_sum = sum(div_list) \n    return div_sum == sum(set(div_list))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        A helper function to check if a number is prime.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_divisors(num):\n        \"\"\"\n        A helper function to calculate the sum of the divisors of a number.\n        \"\"\"\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return sum(divisors)\n\n    div1, div2 = 0, 0\n    while div1 < n:\n        div1 += 1\n        if is_prime(div1):\n            div2 = sum_divisors(div1)\n            if div2 == n:\n                return True\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i\n            if n // i!= i:\n                divisor_sum += n // i\n    return divisor_sum == n\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisor_sum += i + n // i\n\n    return divisor_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of the divisors of n\n    divisor_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n\n    # Calculate the sum of the divisors of (n-1)\n    divisor_sum_minus_one = sum([i for i in range(1, int(math.sqrt(n))+1) if n-1 % i == 0])\n\n    # Check if the sum of the divisors of n and n-1 is the same\n    if divisor_sum == divisor_sum_minus_one:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes an integer as input and returns True if the sum of the divisors of the integer is the same, False otherwise.\n    The function uses the formula to determine the sum of the divisors: S = 1 + 2 + 3 +... + n.\n    '''\n    \n    # initialize the sum of the divisors to 1\n    sum_of_divisors = 1\n    \n    # loop through the numbers from 2 to the square root of the input number\n    for i in range(2, int(math.sqrt(n)) + 1): \n        \n        # if the input number is divisible by the current number, add it to the sum of the divisors\n        if n % i == 0: \n            sum_of_divisors += i\n            \n    # check if the sum of the divisors is equal to the input number\n    if sum_of_divisors == n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert the string to lowercase to make it case insensitive\n    str1 = str1.lower()\n\n    # initialize a dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n\n    # iterate over each character in the string\n    for i in range(len(str1)):\n        # get the current character\n        current_char = str1[i]\n\n        # check if the current character is a letter\n        if current_char.isalpha():\n            # get the position of the current character in the alphabet (converted to lowercase)\n            position = (ord(current_char) - ord('a')) % 26\n\n            # increment the count for the current position if it already exists in the dictionary\n            if position in char_count:\n                char_count[position] += 1\n            # otherwise, add the current position to the dictionary with a count of 1\n            else:\n                char_count[position] = 1\n\n    # return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in english_alphabet:\n        if str1.lower().count(char) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Create an empty dictionary to store the character frequencies\n    char_freq = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a letter, update its frequency in the dictionary\n        if char.isalpha():\n            char = char.lower()\n            if char in char_freq:\n                char_freq[char] += 1\n            else:\n                char_freq[char] = 1\n    # Loop through the English alphabet (case insensitive)\n    for char in 'abcdefghijklmnopqrstuvwxyz':\n        # If the character is in the dictionary, increment the count\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    # Count the number of characters in the string that occur at the same position in the string as in the English alphabet (case insensitive)\n    same_position_count = sum([char_freq[char] for char in char_freq if char_freq[char] in char_freq])\n    return same_position_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    # convert all characters in the string to lowercase\n    str1 = str1.lower()\n    # create a dictionary to store the count of characters at each position in the English alphabet\n    char_counts = {}\n    # loop through each character in the string\n    for i in range(26):\n        # add the current character to the dictionary with a count of 0\n        char_counts[chr(i+97)] = 0\n    # loop through each character in the string again and count the number of occurrences at each position\n    for char in str1:\n        # convert the current character to its index in the English alphabet (97 is the ASCII value of 'a')\n        index = ord(char) - 97\n        # if the current character has a count of 0, increment its count in the dictionary\n        if char_counts[chr(index+97)] == 0:\n            char_counts[chr(index+97)] = 1\n        # otherwise, increment the count for the character at the current index in the dictionary\n        else:\n            char_counts[chr(index+97)] += 1\n    # return the dictionary with the count of characters at each position in the English alphabet\n    return char_counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n\n    for char in str1:\n        if char in alphabet:\n            count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n\n    # Create an empty dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # Check if the character is a lowercase letter in the English alphabet\n        if 'a' <= char <= 'z':\n            # If the character is a lowercase letter, add it to the dictionary with a count of 1\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert the string to lowercase to make the comparison case-insensitive\n    str1 = str1.lower()\n\n    # initialize a dictionary to store the count of each character in the English alphabet\n    count_dict = {chr(i): 0 for i in range(97, 123)}\n\n    # loop through the characters in the string\n    for char in str1:\n        # if the character is present in the dictionary, increment the count\n        if char in count_dict:\n            count_dict[char] += 1\n\n    # return the count of each character in the English alphabet\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    count = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    for char in str1:\n        if char.lower() in count:\n            count[char.lower()] += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    # Initialize a dictionary to store the counts of characters in str1\n    char_counts = {}\n    for i in range(ord('a'), ord('z')+1):\n        char_counts[chr(i)] = 0\n        \n    # Iterate through str1 and update the counts of characters in the alphabet\n    for char in str1:\n        if char in char_counts:\n            char_counts[char] += 1\n            \n    # Return the counts of characters in the alphabet\n    return char_counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    # Loop through the string\n    for char in str1:\n        # Check if the character is a vowel\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            # If it is, check if it has a corresponding letter in the English alphabet\n            if char.upper() in char_count:\n                # If it does, add 1 to the count for that letter in the dictionary\n                char_count[char.upper()] += 1\n            else:\n                # If it doesn't, add the character to the dictionary with a count of 1\n                char_count[char.upper()] = 1\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    This function counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    This function counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer as input and returns the next power of 2 greater than or equal to the input.\n    \"\"\"\n    # If n is already a power of 2, return it.\n    if n & (n - 1) == 0:\n        return n\n    \n    # Find the next power of 2 using binary search.\n    left, right = 1, 2**31 - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid >= n:\n            right = mid\n        else:\n            left = mid + 1\n    \n    # Return the next power of 2.\n    return left"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    n = n - 1  # Convert n to the power of 2 that it is already equal to\n    n |= (n >> 1)  # Add 1 to the binary representation of n\n    n |= (n >> 2)  # Add 2 to the binary representation of n\n    n |= (n >> 4)  # Add 4 to the binary representation of n\n    n |= (n >> 8)  # Add 8 to the binary representation of n\n    n |= (n >> 16)  # Add 16 to the binary representation of n\n    n += 1  # Convert the binary representation back to an integer\n    n = 1 << n  # Convert the integer back to a power of 2\n\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # find the binary representation of n\n    binary = bin(n)[2:]\n    \n    # convert the binary representation to an integer\n    integer = int(binary, 2)\n    \n    # find the next power of 2 using integer exponentiation\n    next_power = 1\n    for i in range(1, 32):\n        if integer & (1 << i):\n            next_power <<= 1\n        else:\n            break\n    \n    # convert the next power to a binary representation and return it as an integer\n    return int(''.join([str(next_power >> i & 1) for i in range(32)]), 2)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    # Convert n to an integer\n    n = int(n)\n    # Find the binary representation of n\n    binary = bin(n)[2:]\n    # Find the number of bits set to 1 in the binary representation\n    count = binary.count('1')\n    # Calculate the next power of 2\n    result = 1\n    for i in range(count):\n        result <<= 1\n    # Convert the result to an integer\n    result = int(result)\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Use binary search to find the smallest power of 2 greater than or equal to n\n    low = 1\n    high = n\n    while low < high:\n        mid = (low + high) // 2\n        if mid == n:\n            high = mid\n        elif mid < n:\n            low = mid + 1\n        else:\n            high = mid\n    return low"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # Convert n to binary and count the number of 1's in the binary representation\n    count = sum(1 for bit in bin(n)[2:] if bit == '1')\n    \n    # Calculate the power of 2 to the count minus 1\n    power_of_2 = 1 << count - 1\n    \n    # Return the power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize a variable to keep track of the next power of 2\n    next_power = 1\n    \n    # Loop while the next power is less than or equal to n\n    while next_power <= n:\n        # Increment the next power of 2 by 1\n        next_power <<= 1\n    \n    return next_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** (n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # initialize the largest power of 2 that is less than or equal to n\n    power = 1\n    while power <= n:\n        power <<= 1\n    \n    # return the power\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # initialize power of 2 to 2 (base case)\n    power = 2\n    \n    # loop until power is greater than or equal to n\n    while power >= n:\n        power *= 2\n    \n    # return power of 2\n    return power"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(lst, x):\n    count = 0\n    for item in lst:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # check if the indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        return \"Invalid indices\"\n\n    # initialize variables to store the sum and the current index\n    sum_val = 0\n    index = m\n\n    # iterate through the list from the given index to the last index\n    while index <= n:\n        sum_val += list1[index]\n        index += 1\n\n    # return the sum\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_val = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_val += i\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # initialize variables\n    sum_val = 0\n    \n    # loop through the list from the starting index to the ending index\n    for i in range(m, n+1):\n        # add each number to the sum\n        sum_val += list1[i]\n    \n    # return the sum value\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Check if the indices are valid\n    if m >= len(list1) or n >= len(list1) or m < 0 or n < 0:\n        print(\"Invalid indices. Please enter valid indices.\")\n        return None\n    \n    # Calculate the sum of numbers within the specified range\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n        \n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n + 1):\n        if i >= len(list1):\n            break\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Calculate the length of the list\n    length = len(list1)\n\n    # Check if the indices are within range\n    if m < 0 or m >= length or n < 0 or n >= length:\n        return \"Error: Invalid index range\"\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Loop through the range of indices\n    for i in range(m, n+1):\n        # Check if the index is within range\n        if i < 0 or i >= length:\n            return \"Error: Invalid index range\"\n        # Add the value at the current index to the sum\n        sum += list1[i]\n\n    # Return the sum of the specified indices\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize the sum variable to zero\n    total = 0\n    \n    # Loop through each element in the list starting from the first index to the second index (inclusive)\n    for i in range(m, n+1):\n        # Check if the current element is within the list range\n        if i <= len(list1) and i >= 0:\n            # Add the current element to the sum variable\n            total += list1[i-1]\n    \n    # Return the sum of the elements within the specified range\n    return total"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Convert the side length to radians\n    angle = math.radians(120)\n    # Use the Pythagorean theorem to calculate the perimeter\n    return 5 * a * math.sin(angle)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # calculate the semi-perimeter of the pentagon using the law of cosines\n    b = (a**2 + a**2) ** 0.5\n\n    # calculate the perimeter of the pentagon using the formula for a regular pentagon\n    perimeter = 5 * a * b\n\n    # return the result\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the perimeter of the pentagon using the formula\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the area of the pentagon\n    area = math.sqrt(5) * a * a / 2\n\n    # calculate the perimeter of the pentagon\n    perimeter = 5 * a\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n\nprint(perimeter_pentagon(5)) # output: 30.0"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurances of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    for word in s.split():\n        if word.lower() =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurence of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    start = s.find('std')\n    while start!= -1:\n        count += 1\n        start = s.find('std', start+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        first_element = type(test_tuple[0])\n        for i in range(1, len(test_tuple)):\n            if type(test_tuple[i])!= first_element:\n                return False\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    types = set([type(x) for x in test_tuple])\n    if len(types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # Check if tuple is empty\n    if len(test_tuple) == 0:\n        return True\n\n    # Get the first element in the tuple\n    first_element = type(test_tuple[0])\n\n    # Loop through the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        if type(element)!= first_element:\n            return False\n\n    # If we reach this point, all the elements have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = []\n    for element in test_tuple:\n        types.append(type(element))\n    return all(t == types[0] for t in types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if the length of the tuple is 0\n    if len(test_tuple) == 0:\n        return False\n    \n    # get the first element of the tuple\n    first_element = type(test_tuple[0])\n    \n    # iterate over the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        # check if the element has the same data type as the first element\n        if type(element)!= first_element:\n            return False\n    \n    # if the loop completes without returning False, then all the elements have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_types = []\n    for item in test_tuple:\n        data_types.append(type(item))\n\n    if all(t == data_types[0] for t in data_types):\n        print(\"All elements in the tuple have same data type.\")\n    else:\n        print(\"Some elements in the tuple have different data types.\")"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    # Initialize a counter and a boolean variable to keep track of whether the element is the majority\n    count = 0\n    is_majority = False\n    \n    # Loop through the array and count the occurrences of the element x\n    for num in arr:\n        if num == x:\n            count += 1\n            \n    # If the count is greater than n/2, the element is the majority\n    if count > n // 2:\n        is_majority = True\n        \n    return is_majority"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    return count > n // 2\n"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    \n    # Initialize a counter for the element x\n    count = 0\n    \n    # Iterate through the array and check if the current element matches x\n    for num in arr:\n        if num == x:\n            count += 1\n            \n    # If the count is greater than n/2, return True\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n / 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    # Convert n to binary representation\n    bin_n = bin(n)[2:]\n    # Initialize count variable to 0\n    count = 0\n    # Loop through each binary digit in the binary representation\n    for digit in bin_n:\n        # If the binary digit is a 1, increment the count\n        if digit == '1':\n            count += 1\n    # Return the count of set bits\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n\n    while n > 0: \n        # Get the rightmost set bit \n        n &= (n - 1) \n\n        # If there is a set bit, increment the count \n        if n & 1: \n            count += 1\n\n        # Remove the rightmost set bit \n        n >>= 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n-1\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # create a new string which will hold the odd index values of the given string\n    odd_index_str = \"\"\n    # iterate through each character of the given string\n    for char in str:\n        # if the index of the current character is odd, add it to the new string\n        if str.index(char) % 2!= 0:\n            odd_index_str += char\n    # return the new string which has all the odd index values of the given string\n    return odd_index_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # initialize an empty string to store the result\n    result = ''\n    \n    # loop through each character in the input string\n    for char in str:\n        # check if the index of the character is odd\n        if str.index(char) % 2!= 0:\n            # if the character is odd, add it to the result string\n            result += char\n    \n    # return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(str)\n\n    # Iterate over the list of characters and remove the odd index characters\n    for i in range(len(char_list)):\n        if i % 2!= 0:\n            char_list.pop(i)\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_string += str[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    # create a new string to store the odd characters\n    new_str = \"\"\n    # iterate through the characters of the input string\n    for i in range(len(str)):\n        # if the index value is odd, add it to the new string\n        if i % 2 == 1:\n            new_str += str[i]\n    # return the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_indices = [i for i in range(len(str)) if i % 2 == 1]\n    return ''.join([str[i] for i in odd_indices])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    return ''.join([chr(ord(c) - 1) if (ord(c) - 1) % 2 == 1 else c for c in str])"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as inputs and returns the minimum of the three.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    all_unset = True\n    for i in range(l, r + 1):\n        if bin(n & (1 << i))[2:].count('1')!= 0:\n            all_unset = False\n            break\n    return all_unset"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Convert n to binary string\n    bin_str = bin(n)[2:]\n\n    # Check if all bits are unset in the given range\n    for i in range(l, r+1):\n        if bin_str[i] == '0':\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize a boolean variable to keep track of whether all bits are set in the given range or not\n    all_set = True\n    # Iterate through each bit of the given number\n    for i in range(l, r+1):\n        # Check if the i-th bit is unset or set\n        if n & (1 << i) == 0:\n            # If the i-th bit is unset, check if any of the subsequent bits are unset\n            for j in range(l, i-1, -1):\n                if n & (1 << j) == 0:\n                    # If any of the subsequent bits are unset, the entire range is not set\n                    all_set = False\n                    break\n        else:\n            # If the i-th bit is set, check if any of the subsequent bits are set\n            for j in range(i+1, r+1):\n                if n & (1 << j) == 0:\n                    # If any of the subsequent bits are set, the entire range is not set\n                    all_set = False\n                    break\n    return all_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Args:\n        n (int): The integer value to be checked.\n        l (int): The lower limit of the range.\n        r (int): The upper limit of the range.\n\n    Returns:\n        bool: True if all the bits are unset in the given range, otherwise False.\n    \"\"\"\n\n    # Iterate through each bit position in the integer\n    for i in range(l, r+1):\n\n        # If the bit position is unset, the integer is not all set\n        if (n >> i) & 1:\n            return False\n\n    # If the loop completes without finding an unset bit, the integer is all set\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(n & i).count('1')!= 32:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize the variable to keep track of the count of unset bits\n    unset_bits = 0\n\n    # Loop through the bits of the number\n    while n!= 0:\n        # Check if the least significant bit is 1\n        if n & 1 == 1:\n            # Increment the count of unset bits\n            unset_bits += 1\n\n        # Shift the number to the right by 1 bit\n        n = n >> 1\n\n    # Calculate the difference between the range and the number of unset bits\n    difference = r - l - unset_bits\n\n    # Check if the difference is 0\n    if difference == 0:\n        # All the bits are set in the given range\n        return True\n    else:\n        # All the bits are unset in the given range\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # initialize a boolean variable to check if all the bits are unset\n    all_unset = True\n\n    # iterate through all the bits in the given range (inclusive)\n    for i in range(l, r + 1):\n        # if the current bit is set, return False\n        if n & (1 << i):\n            return False\n        # if the current bit is unset, check the next bit\n        else:\n            all_unset = False\n\n    # if all the bits are unset, return True\n    return all_unset"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    if l > r:\n        return True\n\n    for i in range(l,r+1):\n        if bin(n & i).count('1')!= bin(i).count('1'):\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize a mask with all bits set to 1\n    mask = (1 << (r - l + 1)) - 1\n\n    # Initialize a variable to store the number of unset bits\n    unset_bits = 0\n\n    # Iterate over the bits in the binary representation of n\n    for i in range(l, r + 1):\n        # Check if the ith bit is set in n\n        if (n & (1 << i))!= 0:\n            # If the ith bit is set, increment the unset_bits variable\n            unset_bits += 1\n\n    # Check if all the unset bits are set\n    if unset_bits == mask:\n        # If all the unset bits are set, return True\n        return True\n    else:\n        # If not, return False\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    if n == 0:\n        return True\n    else:\n        if l & (1 << (n - 1)):\n            return False\n        else:\n            return all_Bits_Set_In_The_Given_Range(n - 1, l, r)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            arr[i], arr[n] = arr[n], arr[i]\n            n -= 1\n        i += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create two empty lists to store the negative and positive elements, respectively\n    neg_list = []\n    pos_list = []\n    \n    # Loop through the array and append each element to the appropriate list\n    for element in arr:\n        if element < 0:\n            neg_list.append(element)\n        else:\n            pos_list.append(element)\n    \n    # Sort the negative list in descending order\n    neg_list.sort(reverse=True)\n    \n    # Sort the positive list in ascending order\n    pos_list.sort()\n    \n    # Loop through the array again, re-arranging the elements as required\n    i = 0\n    for element in arr:\n        if i < n:\n            if element < 0:\n                arr[i] = neg_list.pop(0)\n            else:\n                arr[i] = pos_list.pop(0)\n        else:\n            if element < 0:\n                arr[i] = neg_list.pop()\n            else:\n                arr[i] = pos_list.pop()\n        i += 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize two pointers: left_ptr and right_ptr\n    left_ptr = 0\n    right_ptr = n - 1\n\n    # loop until the left pointer is less than the right pointer\n    while left_ptr < right_ptr:\n        # if the element at the left pointer is negative, move the left pointer to the right\n        if arr[left_ptr] < 0:\n            left_ptr += 1\n        # if the element at the right pointer is positive or 0, move the right pointer to the left\n        elif arr[right_ptr] > 0 or arr[right_ptr] == 0:\n            right_ptr -= 1\n        # if the element at the right pointer is negative, swap the elements at the left and right pointers and move both pointers to the right\n        else:\n            arr[left_ptr], arr[right_ptr] = arr[right_ptr], arr[left_ptr]\n            left_ptr += 1\n            right_ptr -= 1\n\n    # print the re-arranged array\n    print(arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n and re-arranges the first n elements of the given array\n    so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for i in arr:\n        if i < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    if n > neg_count:\n        n = neg_count\n    if n > pos_count:\n        n = pos_count\n    arr = [arr[i] for i in range(n)]\n    arr = arr + [i for i in arr if i < 0]\n    arr = arr + [i for i in arr if i > 0]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg_count += 1\n        elif arr[i] > 0:\n            pos_count += 1\n    \n    # swap negative and positive elements until the count of negative elements is equal to the count of positive elements\n    while neg_count!= pos_count:\n        if neg_count < pos_count:\n            arr.append(arr.pop(0))\n            neg_count += 1\n        else:\n            arr.insert(0, arr.pop())\n            pos_count += 1\n    \n    # swap negative elements with the last elements of the array\n    for i in range(n):\n        arr[i], arr[-1] = arr[-1], arr[i]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Separate the negative and positive elements in two separate lists\n    neg_arr = [num for num in arr if num < 0]\n    pos_arr = [num for num in arr if num >= 0]\n\n    # If n is greater than the length of the positive array, swap them and continue\n    if n > len(pos_arr):\n        pos_arr, neg_arr = neg_arr, pos_arr\n        n = n - len(pos_arr)\n\n    # Shuffle the negative and positive elements\n    neg_arr.extend(pos_arr[:n])\n    pos_arr = pos_arr[n:]\n    random.shuffle(neg_arr)\n\n    # Combine the negative and positive elements and shuffle them again\n    final_arr = neg_arr + pos_arr\n    random.shuffle(final_arr)\n\n    return final_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    for i in arr:\n        if i < 0:\n            negative.append(i)\n        else:\n            positive.append(i)\n    \n    negative.sort(reverse=True)\n    positive.sort()\n    \n    result = negative + positive\n    return result[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize three variables to keep track of negative, positive and zero counts\n    neg_count = 0\n    pos_count = 0\n    zero_count = 0\n    \n    # Iterate through the array and count the number of negative, positive and zero elements\n    for num in arr:\n        if num < 0:\n            neg_count += 1\n        elif num > 0:\n            pos_count += 1\n        else:\n            zero_count += 1\n    \n    # If the number of negative and zero elements is less than or equal to the number of positive elements, return the original array as it is\n    if neg_count <= zero_count and pos_count <= zero_count:\n        return arr\n    \n    # Sort the negative elements in ascending order and the zero elements in descending order\n    neg_arr = sorted(arr[:n])\n    zero_arr = sorted(arr[n:], reverse=True)\n    \n    # Concatenate the negative, positive and zero arrays and return the final array\n    result = neg_arr + [0] * zero_count + pos_arr\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize two empty lists to store negative and positive elements\n    negative = []\n    positive = []\n\n    # Loop through the array and append the positive and negative elements\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n\n    # Loop through the array again and add the negative elements to the end of the positive list\n    for i in range(n, len(arr)):\n        positive.append(arr[i])\n\n    # Return the final list of elements after re-arranging\n    return negative + positive"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # First, remove all negative numbers from the array\n    positive_arr = [num for num in arr if num > 0]\n    negative_arr = [num for num in arr if num < 0]\n\n    # Next, sort the positive array in descending order\n    positive_arr.sort(reverse=True)\n\n    # Finally, concatenate the two sorted arrays and return the result\n    return positive_arr + negative_arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    str2 = str1.replace(\" \", char)\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Split the string into individual words\n    words = str1.split()\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Replace any blank spaces in the word with the character\n        words[i] = words[i].replace(\" \",char)\n    # Join the words back together into a string\n    new_str = \" \".join(words)\n    # Return the modified string\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Replace all blank spaces with the given character\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    \n    # Add the first n items from the list to the min heap\n    for i in range(n):\n        heapq.heappush(min_heap, list1[i])\n        \n    # Add the remaining items from the list to the min heap\n    for i in range(n, len(list1)):\n        heapq.heappushpop(min_heap, list1[i])\n        \n    # Return the n largest items from the min heap\n    return min_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # converting the list into a heap\n    heap = list1\n    heapq.heapify(heap)\n    # finding the n largest items from the heap\n    for i in range(n):\n        heapq.heappop(heap)\n    # converting the heap back into a list and returning it\n    return [x for x in heapq.nsmallest(n, heap)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heapq.nlargest(n, heap)\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use a max heap to store the top n largest items\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -list1[i])\n    # Return the top n largest items as a list\n    return [-x for x in max_heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use heapify to convert the list into a max heap\n    heapq.heapify(list1)\n    \n    # Remove the largest n items from the heap and add them to a new list\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(list1))\n        \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap, list1[i])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Sort the list in descending order using the built-in `sorted` function\n    lst = sorted(lst, reverse=True)\n\n    # Return the top n elements of the sorted list\n    return lst[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap, list1[i])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area\n    lateral_surface_area = 2 * r * h\n\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi * r**2\n    surface_area = 2 * area * h\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateral_surface_area_cylinder(r, h):\n    '''\n    Calculates the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Using the formula for a circle:\n    # A = \u03c0r^2\n    # Since we want the surface area, we need to take the area of the cylinder.\n    # A = 2\u03c0r^2\n    # Since r^2 = h^2, we get r = sqrt(h^2)\n    # A = \u03c0h^2\n    # Therefore, the lateral surface area of the cylinder is \u03c0h^2.\n    # Now, we need to multiply this value by the height of the cylinder to get the total surface area.\n    # S = A*h\n    surface_area = 2*3.14159*r**2*h\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    '''\n    return math.pi * r ** 2 * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Calculate the lateral surface area of a cylinder.\n    \n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    float: lateral surface area of the cylinder\n    '''\n    \n    return 2*pi*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r*r + 2*3.14159*r*h + 2*3.14159*h*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    lateral_area = 2 * r * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*(r**2 + h**2)"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l**3\n    return vol"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l ** 3  # cube of length l\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a new number with all bits set to 1\n    new_number = 0\n    # Loop through each bit in the original number\n    for bit in bin(n)[2:]:\n        # If the bit is an even number, set its value to 1\n        if int(bit) % 2 == 0:\n            new_number += 1\n    # Return the new number with all even bits set to 1\n    return new_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n >> 1\n    \n    for i in range(count):\n        n = n | (1 << i)\n    \n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the even bits of n\n    even_bits = []\n    \n    # iterate over the bits of n\n    for i in range(32):\n        # check if the i-th bit of n is 1\n        if (n >> i) & 1 == 1:\n            # add the i-th bit to the even_bits list\n            even_bits.append(i)\n    \n    # convert the even_bits list to an integer\n    even_bits_int = int(''.join([str(i) for i in even_bits]), 2)\n    \n    # return the result\n    return even_bits_int"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the even bits\n    even_bits = []\n    \n    # loop through each bit of the given number\n    for i in range(32):\n        # check if the current bit is even\n        if n & (1 << i):\n            # if it is, append it to the even_bits list\n            even_bits.append(n & (1 << i))\n    \n    # convert the even_bits list to an integer and return it\n    return int(''.join(str(x) for x in even_bits), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    n_copy = n\n    count = 0\n    while count < 64:\n        if n_copy & 1 == 0:\n            n_copy |= 1 << count\n        count += 1\n    return n_copy"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    return n | (n - 1) & ~(n & 1)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Convert the given number to a binary string\n    binary_string = bin(n)[2:]\n    # Initialize an empty string to store the new binary number\n    new_binary_string = ''\n    # Iterate over the binary string from right to left\n    for bit in binary_string[::-1]:\n        # If the bit is even, add a 1 to the new binary string\n        if int(bit) == 0:\n            new_binary_string += '0'\n        else:\n            new_binary_string += '1'\n    # Convert the new binary string to an integer and return it\n    return int(new_binary_string, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize an empty string to store the number with even bits set\n    result = \"\"\n\n    # Loop through each bit of the given number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, append \"1\" to the result string\n        if bit == \"1\":\n            result += \"1\"\n        # If the current bit is odd, append \"0\" to the result string\n        else:\n            result += \"0\"\n\n    # Convert the result string to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty list to store even bits\n    even_bits = []\n    # Loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the current bit is even, append it to the even_bits list\n        if bit == '1':\n            even_bits.append(1)\n        else:\n            even_bits.append(0)\n    # Combine the even bits into a single number and return it\n    return int(''.join(map(str, even_bits)), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize the even_bit variable to 0\n    even_bit = 0\n\n    # loop through each bit of the given number\n    for i in range(32):\n        # get the bit value at index i\n        bit_value = (n >> i) & 1\n\n        # if the bit value is even (i.e., 0), set the even_bit variable to 1\n        if bit_value == 0:\n            even_bit = 1\n            # break out of the loop if we find an even bit\n            break\n\n    # return the new value of the even_bit variable\n    return even_bit"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts of each tuple\n    count_dict = {}\n    \n    # loop through the list of tuples\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # if it is, increment its count by 1\n            count_dict[tup] += 1\n        else:\n            # if it isn't, add it to the dictionary with a count of 1\n            count_dict[tup] = 1\n    \n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is not already in the counts dictionary, add it with a count of 1\n        if tup not in counts:\n            counts[tup] = 1\n        # Otherwise, increment the count for that tuple\n        else:\n            counts[tup] += 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    count_dict = {}\n    for tup in test_list:\n        count_dict[tup] = count_dict.get(tup, 0) + 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    count_dict = {}\n    for tup in unique_tuples:\n        count_dict[tup] = test_list.count(tup)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_tuples = set(tuple(sorted(i)) for i in test_list)\n    \n    # Count the occurrences of each unique tuple using Counter\n    count_dict = Counter(unique_tuples)\n    \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    n = len(str)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= \"\":\n                count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if len(substring) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    This function takes a string as input and returns the count of non-empty substrings of the string.\n    '''\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n\n        # Initialize left and right indices to current index\n        left = i\n        right = i\n\n        # While left index is within the string and current character is not a space\n        while left >= 0 and str[left]!='':\n            # Increment left index\n            left -= 1\n\n        # While right index is within the string and current character is not a space\n        while right < len(str) and str[right]!='':\n            # Increment right index\n            right += 1\n\n        # If the length of the substring between left and right is greater than 0, increment count\n        if right - left > 0:\n            count += 1\n\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    if m < 1 or n < 1:\n        return 0\n\n    def helper(length, index, count, curr_seq):\n        if length == n:\n            count[0] += 1\n        else:\n            if index < len(curr_seq):\n                for i in range(index + 1, len(curr_seq)):\n                    if curr_seq[i] >= 2 * curr_seq[i - 1] < m:\n                        helper(length + 1, i, count, curr_seq)\n            else:\n                for i in range(index + 1, len(curr_seq) + 1):\n                    if i >= 2 * index + 2:\n                        helper(length + 1, i, count, curr_seq)\n\n    count = [0]\n    helper(0, 0, count, [1])\n    return count[0]"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Base case: if n == 1, the only possible sequence is m\n    if n == 1:\n        return m\n    # Base case: if n == 0, there are no sequences\n    elif n == 0:\n        return 0\n    \n    # Initialize two variables to keep track of the previous two elements\n    prev_prev = 0\n    prev = m\n    \n    # Calculate the number of possible sequences by using dynamic programming\n    # The number of sequences is equal to the sum of the number of sequences for previous and previous previous elements\n    num_sequences = prev_prev + prev\n    \n    # Check if the current element is within the allowed range\n    if prev <= 2*m:\n        num_sequences += get_total_number_of_sequences(prev, n-1)\n    \n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n): \n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    \n    total = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if j >= 2 * i <= m:\n                total += 1\n    \n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequence = []\n    for i in range(n):\n        sequence.append(2*i+1)\n    total_sequences = 1\n    for i in range(1,m):\n        count = 0\n        for j in range(i,m):\n            if j%2 == 0 and j >= 2*i and j <= m:\n                count += 1\n        total_sequences *= count\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequence = []\n    sequences_count = 0\n    \n    for i in range(n):\n        sequence.append(i + 1)\n    \n    prev_element = 0\n    \n    while sequence[-1] < m:\n        if sequence[-1] >= 2 * prev_element and sequence[-1] <= m:\n            sequences_count += 1\n        prev_element = sequence[-1]\n        sequence.append(prev_element + 1)\n    \n    return sequences_count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m+1, n+1):\n        count += i*(i-2)//2\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total = 0\n    prev_num = 0\n    for i in range(n):\n        if i == 0:\n            current_num = 2\n            total += 1\n        elif prev_num + 1 <= m:\n            current_num = prev_num + 1\n            total += 1\n        else:\n            current_num = prev_num + 2\n            total += 1\n        prev_num = current_num\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # initialize the number of possible sequences to 0\n    total_sequences = 0\n\n    # initialize an array to store the previous element\n    prev_elements = [0] * n\n\n    # iterate through the length of the sequence\n    for i in range(2, n+1):\n        # check if each element satisfies the given conditions\n        for j in range(n-i+2):\n            # calculate the current element\n            current_element = j + 1\n\n            # check if the current element is greater than or equal to twice the previous element and less than or equal to m\n            if current_element >= 2*prev_elements[j] and current_element <= m:\n                # if the current element satisfies the conditions, update the number of possible sequences\n                total_sequences += 1\n\n        # update the previous element\n        prev_elements[i-1] = current_element\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    # initialize the count variable\n    count = 0\n\n    # loop through all possible sequence lengths from 1 to n\n    for i in range(1, n + 1):\n        # loop through all possible previous numbers less than or equal to twice the current number\n        for j in range(2 * i, min(m, 2 * i) + 1, 2 * i):\n            # if the current number is greater than or equal to the previous number and less than or equal to m, increment the count\n            if j <= m and i <= j:\n                count += 1\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Initialize a list to store the sequence\n    sequence = []\n\n    # Initialize a counter for the number of sequences found\n    count = 0\n\n    # Loop through all the possible values of the first element of the sequence\n    for i in range(2,m+1):\n        \n        # Check if the current element is less than or equal to twice the previous element\n        if i <= 2*i-1:\n            \n            # Add the current element to the sequence and increment the count\n            sequence.append(i)\n            count += 1\n            \n            # If the current element is greater than or equal to twice the previous element, then check if the remaining elements of the sequence satisfy the given conditions\n            for j in range(1,n):\n                if sequence[j-1]+sequence[j] > m:\n                    break\n                if sequence[j-1]+sequence[j] >= 2*sequence[j-1]+1:\n                    sequence.append(sequence[j-1]+sequence[j])\n                    count += 1\n            \n            # Remove the last element of the sequence since we have already added it to the count\n            sequence.pop()\n        \n        # If the current element is greater than twice the previous element, then check if the remaining elements of the sequence satisfy the given conditions\n        elif i > 2*i-1:\n            \n            # Add the current element to the sequence and increment the count\n            sequence.append(i)\n            count += 1\n            \n            # If the current element is less than or equal to twice the previous element, then check if the remaining elements of the sequence satisfy the given conditions\n            for j in range(1,n):\n                if sequence[j-1]+sequence[j] > m:\n                    break\n                if sequence[j-1]+sequence[j] >= 2*sequence[j-1]+1:\n                    sequence.append(sequence[j-1]+sequence[j])\n                    count += 1\n            \n            # Remove the last element of the sequence since we have already added it to the count\n            sequence.pop()\n    \n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # get the length of the first list\n    length = len(list1)\n\n    # loop through the first list from the end to the first element\n    for i in range(length-1, -1, -1):\n        # add the elements of the second list to the first list\n        for j in range(len(list2)):\n            list1[i] = list1[i] + list2[j]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    last_elem = list1[-1]\n    list1[-1] = []\n    for elem in list2:\n        list1.append(elem)\n    list1[-1] = last_elem\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) == len(list2):\n        list1[-1] = list2\n    else:\n        print(\"The two lists must have the same length.\")"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    total = 0\n    for char in str1:\n        total += 1\n    return total"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n    # Convert sqrt_N to an integer\n    sqrt_N = int(sqrt_N)\n    # Square the square root\n    sqrt_N = sqrt_N ** 2\n    # Add 1 to sqrt_N\n    sqrt_N += 1\n    # Return the square root\n    return sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    This function takes in a number N and returns the next perfect square greater than N.\n\n    Steps:\n    1. Convert N to a float and store in the variable num.\n    2. Calculate the square root of num using math.sqrt() and store it in the variable root.\n    3. Calculate the next perfect square by multiplying root by itself and rounding down to the nearest integer using math.floor().\n    4. Return the next perfect square.\n\n    Complexity: O(1)\n    '''\n    num = float(N)\n    root = math.sqrt(num)\n    next_perfect_square = math.floor(root) * root\n    return next_perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = int(math.sqrt(N))\n    while True:\n        N += 1\n        if is_perfect_square(N):\n            return N\n\ndef is_perfect_square(num):\n    \"\"\"\n    Checks if a given number is a perfect square.\n    \"\"\"\n    return int(math.sqrt(num)) ** 2 == num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 0\n    while i*i <= N:\n        i += 1\n    return i*i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Convert the given number to a float and round it to the nearest integer\n    num = round(float(N))\n    # Use the math.sqrt() function to find the square root of the given number\n    sqrt_num = math.sqrt(num)\n    # Use the ceil() function to round up the square root to the nearest integer\n    sqrt_num = ceil(sqrt_num)\n    # Use the math.isqrt() function to find the integer part of the square root\n    sqrt_num_int = math.isqrt(sqrt_num)\n    # Multiply the integer part of the square root with the integer part of the original number to get the next perfect square\n    next_num = sqrt_num_int * num\n    return next_num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number N and returns the next perfect square greater than N.\n    \"\"\"\n    # If N is already a perfect square, return N+1\n    if math.sqrt(N) % 1 == 0:\n        return N+1\n\n    # If N is not a perfect square, find the next highest perfect square greater than N\n    square = math.sqrt(N)\n    i = 1\n    while square**i <= N:\n        i += 1\n\n    # Return the square greater than N that is a perfect square\n    return int(square**(i-1)) + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # initialize variables\n    sqrt_N = int(math.sqrt(N))\n    root_square = sqrt_N * sqrt_N\n    if root_square == N:\n        return root_square + 1\n    else:\n        return root_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than a given number.\n    \"\"\"\n    x = N\n    while True:\n        x += 1\n        if math.isqrt(x) ** 2 == x:\n            return x"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N as input and returns the next perfect square greater than N.\n    '''\n    # Initialize a variable to keep track of the next perfect square greater than N\n    next_square = N + 1\n    # Initialize a variable to keep track of the number of iterations of the algorithm\n    iterations = 0\n    # Loop until the square root of the next perfect square greater than N is greater than 1\n    while math.sqrt(next_square) <= 1:\n        # Increase the number of iterations by 1\n        iterations += 1\n        # Calculate the next perfect square greater than N by adding 1 to the square root of the current perfect square\n        next_square = math.ceil(math.sqrt(next_square)) + 1\n    # Print the number of iterations taken to find the next perfect square greater than N\n    print(f'Number of iterations required: {iterations}')\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # The initial number is sqrt(N) rounded up to the nearest integer.\n    initial_square = math.ceil(math.sqrt(N))\n\n    # Initialize the next square to be the square root of the initial square.\n    next_square = int(math.sqrt(initial_square))\n\n    # Keep checking the next square until it is greater than the initial square.\n    while next_square > initial_square:\n        # Check if the next square is a perfect square.\n        if is_perfect_square(next_square):\n            # If it is, return it.\n            return next_square\n        # If it is not, increment the square and try again.\n        next_square += 1\n\n    # If there are no more perfect squares, return None.\n    return None\n\ndef is_perfect_square(n):\n    '''\n    Check if a number is a perfect square.\n    '''\n    # Use the math library to check if n is a perfect square.\n    return math.isqrt(n) == math.floor(math.sqrt(n))"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    prev_val = arr[0]\n    current_sum = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > prev_val:\n            current_sum += arr[i]\n        else:\n            current_sum = arr[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        prev_val = arr[i]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # check if the array is increasing or decreasing\n    increasing = True\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            increasing = False\n            break\n\n    # if the array is increasing, find the maximum subsequence sum\n    if increasing:\n        if n % 2 == 0:\n            max_sum = arr[n//2] - arr[n//2 - 1]\n        else:\n            max_sum = arr[n//2]\n        for i in range(n//2 - 1, -1, -1):\n            max_sum = max(max_sum, arr[i] + arr[i+1])\n        return max_sum\n\n    # if the array is decreasing, find the maximum subsequence sum\n    else:\n        max_sum = arr[0]\n        for i in range(1, n):\n            max_sum = max(max_sum, arr[i] + arr[i-1])\n        return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # initialize variables\n    prev_sum = float('-inf')\n    curr_sum = 0\n    max_sum = float('-inf')\n    \n    for i in range(len(arr)):\n        # check if current element is increasing\n        if arr[i] >= arr[i-1]:\n            # if increasing, add to current sum\n            curr_sum += arr[i]\n        else:\n            # if decreasing, update max_sum if curr_sum is greater\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            # reset curr_sum and prev_sum\n            curr_sum = 0\n            prev_sum = arr[i]\n    \n    # check if curr_sum is greater than max_sum\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize two variables to store the maximum sum of increasing subsequence and maximum sum of decreasing subsequence\n    inc_max = float('-inf')\n    dec_max = float('-inf')\n    \n    # Initialize two variables to store the sum of increasing subsequence and sum of decreasing subsequence\n    inc_sum = 0\n    dec_sum = 0\n    \n    # Loop through the array\n    for num in arr:\n        # If the current number is greater than the previous number, then add the current number to the sum of increasing subsequence and update the maximum sum of increasing subsequence if necessary\n        if num > arr[inc_sum]:\n            inc_sum += 1\n            inc_max = max(inc_max, inc_sum)\n        # If the current number is less than the previous number, then add the current number to the sum of decreasing subsequence and update the maximum sum of decreasing subsequence if necessary\n        elif num < arr[dec_sum]:\n            dec_sum += 1\n            dec_max = max(dec_max, dec_sum)\n            \n    # Return the maximum sum of increasing subsequence or maximum sum of decreasing subsequence\n    return inc_max if inc_max > dec_max else dec_max"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_sum_before = max(arr[0], arr[1])\n        max_sum_after = max(arr[-1], arr[-2])\n        max_sum_middle = 0\n        for i in range(2, n-1):\n            max_sum_middle = max(max_sum_middle, arr[i-1], arr[i])\n        return max(max_sum_before, max_sum_after, max_sum_middle)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    is_increasing = True\n    \n    # iterate through the array\n    for i in range(len(arr)):\n        # check if the current element is increasing or decreasing\n        if arr[i] > arr[i+1]:\n            if is_increasing:\n                # if the current element is increasing and we are already in increasing mode, update the maximum sum\n                current_sum += arr[i]\n                if current_sum > max_sum:\n                    max_sum = current_sum\n            else:\n                # if the current element is decreasing and we are already in decreasing mode, update the maximum sum and start a new increasing mode\n                current_sum = arr[i]\n                is_increasing = True\n        else:\n            if is_increasing:\n                # if the current element is decreasing and we are already in increasing mode, update the maximum sum and start a new decreasing mode\n                current_sum += arr[i]\n                if current_sum > max_sum:\n                    max_sum = current_sum\n                is_increasing = False\n            else:\n                # if the current element is increasing and we are already in decreasing mode, update the maximum sum\n                current_sum = arr[i]\n                \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Find the length of the array\n    n = len(arr)\n    # Initialize two pointers, left and right, to start of the array\n    left = 0\n    right = n - 1\n    # Initialize two variables to store the maximum sum of increasing subsequences and decreasing subsequences\n    max_sum_increasing = float('-inf')\n    max_sum_decreasing = float('-inf')\n    # Initialize two variables to store the maximum sum of increasing and decreasing subsequences\n    max_sum = float('-inf')\n    # Initialize a variable to store the current sum of increasing and decreasing subsequences\n    current_sum = 0\n    # Loop through the array using the pointers\n    while left < right:\n        # If the left pointer is less than the right pointer, the current subsequence is increasing\n        if arr[left] <= arr[right]:\n            # Add the current element to the current sum of increasing subsequences\n            current_sum += arr[left]\n            # Update the maximum sum of increasing subsequences if the current sum is greater than the current maximum\n            if current_sum > max_sum_increasing:\n                max_sum_increasing = current_sum\n            # Move the left pointer one position to the right\n            left += 1\n        else:\n            # If the left pointer is greater than the right pointer, the current subsequence is decreasing\n            # Add the current element to the current sum of decreasing subsequences\n            current_sum -= arr[right]\n            # Update the maximum sum of decreasing subsequences if the current sum is greater than the current maximum\n            if current_sum > max_sum_decreasing:\n                max_sum_decreasing = current_sum\n            # Move the right pointer one position to the left\n            right -= 1\n    # Update the maximum sum if the array is bitonic\n    if max_sum_increasing <= max_sum_decreasing:\n        max_sum = max_sum_increasing\n    else:\n        max_sum = max_sum_decreasing\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    # Initialize variables for maximum sum and current sum\n    max_so_far = float('-inf')\n    current_sum = 0\n\n    # Iterate through the array\n    for num in arr:\n        # If the number is increasing, add it to the current sum\n        if num < arr[current_sum]:\n            current_sum += 1\n\n        # If the current sum is greater than the maximum so far, update the maximum\n        if current_sum > 0 and current_sum > max_so_far:\n            max_so_far = current_sum\n\n        # If the number is decreasing, subtract it from the current sum\n        if num > arr[current_sum]:\n            current_sum -= 1\n\n    # If the last number in the array is increasing, add it to the current sum\n    if current_sum < len(arr) and arr[current_sum] < arr[len(arr) - 1]:\n        current_sum += 1\n\n    # If the current sum is greater than the maximum so far, update the maximum\n    if current_sum > max_so_far:\n        max_so_far = current_sum\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # initialize variables\n    n = len(arr)\n    prev_sum = 0\n    max_sum = float('-inf')\n    # loop through the array\n    for i in range(n):\n        # if the current element is increasing, update the prev_sum\n        if arr[i] > arr[i-1]:\n            prev_sum += arr[i]\n        # if the current element is decreasing, update the max_sum if it's greater than the prev_sum\n        elif arr[i] < arr[i-1]:\n            max_sum = max(max_sum, prev_sum)\n            prev_sum = arr[i]\n        # if the current element is neither increasing nor decreasing, update the max_sum if it's greater than the prev_sum\n        else:\n            max_sum = max(max_sum, prev_sum)\n            prev_sum = 0\n    # update max_sum with the final prev_sum\n    max_sum = max(max_sum, prev_sum)\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [0] * (2 * n - 1)\n\n    # Fill up the dp array using the properties of bitonic subsequences\n    for i in range(1, 2 * n - 1):\n        if i % 2 == 0:\n            dp[i] = arr[i // 2]\n        else:\n            dp[i] = max(dp[i - 1], arr[i // 2])\n\n    # Find the maximum subarray sum\n    max_sum = dp[0]\n    for i in range(1, 2 * n - 1, 2):\n        max_sum = max(max_sum, dp[i] + dp[i - 1])\n\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1.0\n    while guess * guess > number:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function computes the square root of a given number using the Babylonian method.\n    '''\n    # Initialize variables for the iteration count and current approximation of the square root\n    i = 0\n    guess = 1.0\n    \n    # While the current approximation is within a certain tolerance of the desired square root\n    while abs(guess*guess - number) >= 0.0001:\n        i += 1\n        guess = (guess + number/guess) / 2.0\n        \n    # Return the final approximation of the square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 0.5 * number\n    y = number / x\n\n    i = 0\n    while abs(y - x) > 0.000001:\n        x = x - y / x\n        y = number / x\n        i += 1\n\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables\n    guess = number // 2\n    prev_guess = guess\n    count = 0\n    while guess**2 > number:\n        count += 1\n        prev_guess = guess\n        guess = (number / guess + guess) // 2\n    print(f\"The square root of {number} is approximately {guess} with {count} iterations.\")"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    x = number / 2.0\n    y = 1.0\n    n = 1\n    while x >= y:\n        y = (y + number / y) / 2.0\n        x = 2.0 * y - x\n        n += 1\n    return n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    lower = 0\n    upper = number\n    result = (lower + upper) / 2\n    \n    while True:\n        if result**2 == number:\n            return result\n        \n        if result**2 > number:\n            upper = result\n        else:\n            lower = result\n            \n        result = (lower + upper) / 2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.000001 # Used to check if a number is close to zero\n    guess = number / 2 # Set initial guess as half of the number\n    while True: # Loop until the guess is close enough to the square root\n        if abs(guess*guess - number) <= epsilon:\n            return guess # If the guess is close enough, return it\n        guess = (guess + number / guess) / 2 # Update guess using babylonian method"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    sqrt_count = 0\n    guess = number / 2\n    while guess * guess > number:\n        sqrt_count += 1\n        guess = (number / guess + guess) / 2\n    return guess, sqrt_count"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = number\n    x1 = x0\n    x2 = 0.5 * x0 * x0\n    for i in range(3):\n        x3 = x1 - ((x1 * x1 - x0) / (2 * x1))\n        if abs(x3 - x2) < 1e-6:\n            break\n        x2 = x1\n        x1 = x3\n    return x2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2  # Start with an initial guess of the square root\n    while True:  # Loop until the guess is good enough\n        next_guess = (guess + number / guess) / 2  # Compute the next guess\n        if abs(guess - next_guess) < 0.00001:  # Check if we've converged to within 0.00001 of the correct guess\n            break  # If we've converged, stop the loop\n        guess = next_guess  # Update our guess to the next iteration\n    return guess  # Return the final guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Initialize a dictionary to store lengths of longest palindromic subsequences of all prefixes of the string\n    dp = {}\n    \n    # Initialize the longest palindromic subsequence length to zero\n    max_length = 0\n    \n    # Iterate through all prefixes of the string\n    for i in range(len(str)):\n        \n        # Initialize variables to keep track of the longest palindromic subsequence ending at the current prefix\n        max_left = 0\n        max_right = 0\n        \n        # Iterate through all prefixes of the string up to the current prefix\n        for j in range(i):\n            \n            # If the characters at the current and previous prefixes are the same, add 1 to the longest palindromic subsequence ending at the previous prefix\n            if str[j] == str[i]:\n                dp[(j, i)] = dp.get((j, i-1), 0) + 2\n                \n                # Update the longest palindromic subsequence ending at the current prefix\n                if dp[(j, i)] > max_left:\n                    max_left = dp[(j, i)]\n                    max_right = i\n        \n        # Update the longest palindromic subsequence length if the current prefix is the longest palindromic subsequence ending at any prefix\n        if max_left > max_length:\n            max_length = max_left\n    \n    # Return the longest palindromic subsequence length\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Create a 2D table to store the length of longest palindromic subsequence ending at each position in the string\n    table = [[0] * (len(str) + 1) for _ in range(len(str) + 1)]\n\n    # Initialize the table with 1's\n    for i in range(1, len(str) + 1):\n        table[i][i] = 1\n\n    # Fill the table using dynamic programming approach\n    for i in range(1, len(str) + 1):\n        for j in range(1, len(str) + 1):\n            if str[i - 1] == str[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(string):\n    # Initialize two pointers, left and right, to 0\n    left = 0\n    right = 0\n\n    # Initialize a variable to store the length of the longest palindromic subsequence found so far\n    max_length = 1\n\n    # Iterate through the string\n    for i in range(len(string)):\n        # If the character at the right pointer is same as the character at the left pointer,\n        # then we can expand our current palindromic subsequence by one character.\n        if string[i] == string[right]:\n            # Update the right pointer and check if the updated subsequence is longer than the previous longest palindromic subsequence\n            right += 1\n            current_length = right - left + \n            if current_length > max_length:\n                max_length = current_length\n\n        # If the character at the right pointer is different from the character at the left pointer,\n        # then we can either move the right pointer to the right or move the left pointer to the right until we find a match\n        else:\n            # Move the left pointer to the right until we find a match\n            while string[i]!= string[left]:\n                # If the left pointer has reached the beginning of the string, then there is no match\n                if left == 0:\n                    return 1\n                # Move the left pointer to the right\n                left += 1\n\n            # Move the right pointer to the right until we find a match\n            while string[i] == string[left]:\n                # If the right pointer has reached the end of the string, then the current subsequence is longer\n                if right == len(string) - 1:\n                    current_length = right - left + \n                    if current_length > max_length:\n                        max_length = current_length\n                # Move the right pointer to the right\n                right += 1\n                current_length = right - left + \n\n    # Return the length of the longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        dp = [[0] * n for _ in range(n)]\n        max_len = 1\n        start = 0\n        for i in range(1, n):\n            if str[i] == str[i-1]:\n                dp[i][i] = 2\n                start = i\n            else:\n                dp[i][i] = 1\n                while i - dp[i-1][dp[i-1].index(max(dp[i-1]))] >= 0 and str[i] == str[i-1-dp[i-1][dp[i-1].index(max(dp[i-1]))]]:\n                    dp[i][i] += 1\n                    i -= 1\n            if dp[i][i] > max_len:\n                max_len = dp[i][i]\n        return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str): \n    # Create a 2D array to store LPS values for all prefixes of the string\n    n = len(str)\n    L = [[0]*n for i in range(n)]\n\n    # Initialize LPS values for all prefixes\n    L[0][0] = 0\n\n    # Fill LPS values using dynamic programming approach\n    for i in range(1, n):\n        for j in range(1, n-i):\n            if str[j] == str[j+i]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return L[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    \n    dp = [1] * n\n    prev = 0\n    \n    for i in range(1, n):\n        if s[i] == s[prev]:\n            dp[i] = dp[prev] + 1\n            prev += 1\n        elif i - prev > 1 and s[i] == s[i - prev - 1]:\n            dp[i] = dp[i - prev] + 2\n            prev = i - prev\n        else:\n            dp[i] = 1\n    \n    return max(dp)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str): \n    n = len(str)\n    # create a 2D array to store the length of longest palindromic subsequence ending at each index\n    lps_table = [[0] * n for _ in range(n)]\n    # initialize the first row and column of the array\n    for i in range(n):\n        lps_table[i][i] = 1\n\n    # fill the rest of the array using dynamic programming approach\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                lps_table[i][j] = lps_table[i+1][j-1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i+1][j], lps_table[i][j-1])\n\n    # return the length of the longest palindromic subsequence ending at the last index\n    return lps_table[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(s):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(s)\n    # create a 2D array to store length of longest palindromic subsequence ending at each index\n    lps_matrix = [[0] * n for _ in range(n)]\n\n    # length of longest palindromic subsequence ending at index 0 is 0\n    for i in range(n):\n        lps_matrix[i][i] = 0\n\n    # calculate length of longest palindromic subsequence ending at each index\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] == s[j]:\n                lps_matrix[i][j] = lps_matrix[j][i-1] + 2\n            else:\n                lps_matrix[i][j] = max(lps_matrix[i][j-1], lps_matrix[j][i])\n\n    # return the length of the longest palindromic subsequence ending at the last index\n    return lps_matrix[n-1][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    n = len(str)\n    if n <= 1:\n        return n\n\n    # create a 2D table to store the lengths of longest palindromic subsequences ending at each position\n    dp = [[0] * n for _ in range(n)]\n\n    # base cases\n    dp[0][0] = 1\n    dp[0][1] = 1 if str[0] == str[1] else 0\n\n    # fill the table using dynamic programming\n    for i in range(2, n):\n        if str[i] == str[i-1]:\n            dp[i][i-1] = 2 + dp[i-2][i-2]\n        else:\n            dp[i][i-1] = max(dp[i-1][i-2], dp[i-2][i-1])\n\n    # return the length of the longest palindromic subsequence ending at the last position\n    return dp[n-1][n-2]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # create a 2D table to store the length of longest palindromic subsequence for all prefixes of the string\n    table = [[0] * (len(str) + 1) for _ in range(len(str) + 1)]\n\n    # base case: all characters are palindromic subsequences of length 1\n    for i in range(1, len(str) + 1):\n        table[i][i] = 1\n\n    # check all prefixes of the string\n    for i in range(1, len(str) + 1):\n        for j in range(1, len(str) + 1):\n            if str[i-1] == str[j-1]:\n                # check for palindromic subsequences of length 2\n                if i == j:\n                    table[i][j] = 2\n                # check for palindromic subsequences of length greater than 2\n                else:\n                    table[i][j] = table[i-1][j-1] + 1\n\n    # return the length of the longest palindromic subsequence\n    return table[len(str)][len(str)]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Check if n is odd\n    if n % 2 == 1:\n        # Calculate the harmonic sum of (n-1)/2\n        harmonic_sum_of_n1 = (n-1)//2\n        # Multiply the harmonic sum of n-1 with (n-1)\n        harmonic_sum_of_n = harmonic_sum_of_n1 * n\n    else:\n        # Calculate the harmonic sum of n/2\n        harmonic_sum_of_n1 = n//2\n        # Multiply the harmonic sum of n-1 with n\n        harmonic_sum_of_n = harmonic_sum_of_n1 * (n-1)\n    return harmonic_sum_of_n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The harmonic sum of\", n, \"is\", harmonic_sum(n))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/n**2) + (1/n**3) +... + (1/n**(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic = 0\n    for i in range(1, n+1):\n        harmonic += 1 / i\n    return harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1 + 1/2\n    else:\n        return (2 * harmonic_sum(n-1) - harmonic_sum(n-2)) / (1 - (2*n-2)/n)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for i in array_nums1:\n        if i in array_nums2:\n            intersection.append(i)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    # create a set to store the unique elements in array_nums2\n    unique_elements = set(array_nums2)\n    # create an empty list to store the intersection of the two arrays\n    intersection = []\n    # loop through each element in array_nums1\n    for num in array_nums1:\n        # check if the element is in unique_elements\n        if num in unique_elements:\n            # if it is, add it to the intersection list\n            intersection.append(num)\n            # remove the element from unique_elements\n            unique_elements.remove(num)\n    # return the intersection of the two arrays\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Create two sets to store the unique elements of both arrays\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets and store it in a new set\n    intersection = set_nums1.intersection(set_nums2)\n\n    # Convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Find the intersection of the two arrays\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    # Return the intersection\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create two sets to store unique elements from the two arrays\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set to store the unique elements of the first array\n    set_nums1 = set(array_nums1)\n    # Create an empty list to store the intersection\n    intersection = []\n    # Loop through the second array\n    for num in array_nums2:\n        # If the number is in the set of the first array, add it to the intersection list\n        if num in set_nums1:\n            intersection.append(num)\n            # Remove the number from the set to avoid duplicates\n            set_nums1.remove(num)\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # convert the arrays to sets to remove duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # find the intersection of the sets\n    intersection_set = set_nums1.intersection(set_nums2)\n\n    # convert the set back to a list and return it\n    return list(intersection_set)\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a dictionary to store the frequency of each element in the second array\n    frequency_dict = {}\n    for num in array_nums2:\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        else:\n            frequency_dict[num] = 1\n    \n    # Iterate through the first array and check if each element is present in the dictionary\n    intersection = []\n    for num in array_nums1:\n        if num in frequency_dict and frequency_dict[num] > 0:\n            intersection.append(num)\n            frequency_dict[num] -= 1\n    \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Use a set to remove duplicates from array_nums2\n    unique_nums2 = set(array_nums2)\n\n    # Iterate through array_nums1 and check if the current element is in unique_nums2\n    intersection = []\n    for num in array_nums1:\n        if num in unique_nums2:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # iterate over the list\n    for i in range(len(list)):\n        # insert the element before the current element\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.insert(0, element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        if i == 0:\n            new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        magnitude = abs(number)\n        angle = cmath.phase(number)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for num in numbers:\n        # extract the real and imaginary parts of the complex number\n        real = num.real\n        imag = num.imag\n\n        # calculate the magnitude of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n\n        # calculate the phase of the complex number\n        phase = cmath.phase(num)\n\n        # convert the magnitude and phase to degrees\n        magnitude = cmath.degrees(magnitude)\n        phase = cmath.degrees(phase)\n\n        # print the polar coordinates\n        print(f\"Polar coordinates: {real} + {imag}j or {magnitude} degrees with an angle of {phase} degrees.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for number in numbers:\n        # Convert to polar coordinates\n        r = abs(number)\n        theta = cmath.phase(number)\n\n        # Display result\n        print(\"({}, {})\".format(r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_list = []\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        modulus = abs(real**2 + imag**2)\n        theta = cmath.phase(number)\n        polar_list.append((modulus, theta))\n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        if imag == 0:\n            # If imaginary part is 0, then we can assume that the number is real.\n            polar_num = (abs(real), 0)\n        else:\n            # If imaginary part is not 0, then we can use the formula for polar coordinates:\n            # r = sqrt(real^2 + imag^2)\n            # theta = atan(imag/real)\n            polar_num = (abs(real*cmath.exp(1j*imag)), (cmath.atan(imag/real)).real)\n        print(polar_num)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n\n        # Print the polar coordinates\n        print(\"({}, {})\".format(r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Loop through each number in the list\n    for num in numbers:\n        # Convert the number to complex number\n        c = complex(num)\n        # Calculate the magnitude and phase of the complex number\n        mag = abs(c)\n        phase = cmath.phase(c)\n        # Print the polar coordinates\n        print(\"Magnitude:\", mag, \"Phase:\", phase, \"in Polar Coordinates\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        if isinstance(number, complex):\n            # convert complex number to polar coordinates\n            r = cmath.sqrt(number.real**2 + number.imag**2)\n            theta = cmath.phase(number)\n            # print the polar coordinates\n            print(f\"({r:.2f}, {theta:.2f})\")\n        else:\n            print(\"Invalid input.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath  \n  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = num\n        angle = cmath.phase(num)\n        r = cmath.rect(real, imag)\n        print(r, angle)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        # Split the number into real and imaginary parts\n        real, imag = num.split('+')\n        real, imag = float(real), float(imag)\n\n        # Calculate the magnitude and angle of the number\n        magnitude = cmath.sqrt(real ** 2 + imag ** 2)\n        angle = cmath.phase(num)\n\n        # Add the polar coordinate to the result list\n        result.append((magnitude, angle))\n\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    This function returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l) - n + 1):\n        temp = tuple(l[i:i+n])\n        if temp not in result:\n            result.append(temp)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all combinations (with repetition) of the elements of the list\n    combinations = list(combinations_with_replacement(l, n))\n\n    # Convert the combinations list to a list of tuples\n    combinations_list = [(c,) for c in combinations]\n\n    return combinations_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l, n):\n            result.append(tuple(j))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for i in range(len(l)-n+1):\n        yield tuple(l[i:i+n])"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l) - n + 1):\n        color_combinations.append(tuple(l[i:i+n]))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l) - n + 1):\n        combination = tuple(l[i:i+n])\n        result.append(combination)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'green', 'blue']\n    comb = []\n    for i in range(len(l)):\n        comb.append((l[i], colors[i]))\n    return list(combinations_with_replacement(comb, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            combinations.append(tuple(sorted(l[i:j])))\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(lst, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number n and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    i = 2\n    while i <= n:\n        isPrime = True\n        for j in range(2, i):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n        i += 1\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_count += 1\n    return prime_count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        if all(num % i!= 0 for i in range(2, int(num**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Initialize a boolean array \"prime[0..n]\" and\n    # \"prime[i] = true\" if i is prime, else false.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p*p <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p*p, n+1, p):\n                prime[i] = False\n        p += 1\n    \n    # count the number of prime numbers less than n\n    count = 0\n    for i in range(2, n+1):\n        if prime[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # initialize a list to store the prime numbers\n    prime_list = []\n    # iterate through all numbers less than n\n    for i in range(2, n):\n        # check if i is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # if i is prime, add it to the prime_list\n        if is_prime:\n            prime_list.append(i)\n    # return the number of prime numbers found in the list\n    return len(prime_list)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    prime_count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, i)):\n            prime_count += 1\n    return prime_count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    # initialize a boolean array \"prime[0..n]\" and\n    # \"prime[i] = true\" if i is prime, else false.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p*p <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p*p, n+1, p):\n                prime[i] = False\n        p += 1\n\n    # count the number of prime numbers\n    count = 0\n    for i in range(2, n+1):\n        if (prime[i]):\n            count += 1\n\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    if max_tup1 > max_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths.\")\n        return\n\n    # Initialize variables for the maximum values\n    max1 = max2 = float('-inf')\n\n    # Iterate over the tuples and compare each value\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1:\n            max2 = max1\n            max1 = test_tup1[i]\n        elif test_tup2[i] > max2:\n            max2 = test_tup2[i]\n\n    # Return the maximum values\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the length of the two tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n\n    # Initialize the max values to the first tuple\n    max_tup1 = test_tup1\n    max_tup2 = test_tup2\n\n    # Iterate over the tuples to find the maximum values\n    for i in range(len1):\n        for j in range(len2):\n            # If the current value in the first tuple is greater than the current value in the second tuple, update max_tup1\n            if test_tup1[i] > test_tup2[j]:\n                max_tup1 = (test_tup1[i], test_tup1[j])\n\n            # If the current value in the second tuple is greater than the current value in the first tuple, update max_tup2\n            elif test_tup2[j] > test_tup1[i]:\n                max_tup2 = (test_tup2[j], test_tup2[i])\n\n    # Return the maximum values in a tuple\n    return max_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Define a function to compare two tuples\n    def compare_tuples(tup1, tup2):\n        # Loop through each element in the tuples\n        for i in range(len(tup1)):\n            # Compare the elements and return the result\n            if tup1[i] > tup2[i]:\n                return tup1\n            elif tup1[i] < tup2[i]:\n                return tup2\n            else:\n                continue\n        # If all elements are equal, return the first tuple\n        return tup1\n    \n    # Call the compare_tuples function to get the max tuple\n    max_tuple = compare_tuples(test_tup1, test_tup2)\n    \n    # Print the max tuple\n    print(max_tuple)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Find the length of the two tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n\n    # Ensure that both tuples have the same length\n    if len1!= len2:\n        print(\"Both tuples must have the same length.\")\n        return None\n\n    # Initialize two variables to store the maximum value and index\n    max_val = test_tup1[0]\n    max_index = 0\n\n    # Loop through each element in the tuple\n    for i in range(len1):\n        # If the current element is greater than the max value, update the max value and index\n        if test_tup1[i] > max_val:\n            max_val = test_tup1[i]\n            max_index = i\n\n        # If the current element is greater than the second max value, update the second max value and index\n        if test_tup2[i] > test_tup1[max_index] and i!= max_index:\n            max_val = test_tup2[i]\n            max_index = i\n\n    # Return the maximum value and index\n    return (max_val, max_index)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    elif test_tup1[1] > test_tup2[1]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    is_prime = True\n    for i in range(2, n+1):\n        if is_prime:\n            count += 1\n            if count == n:\n                return i\n            is_prime = False\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize two variables to track the count of primes and the maximum prime\n    count = 0\n    max_prime = 2\n    \n    # Iterate from 3 to n-1\n    for i in range(3, n):\n        # If i is a newman prime, increment the count and update max_prime if necessary\n        if is_newman_prime(i):\n            count += 1\n            if i > max_prime:\n                max_prime = i\n    \n    # If n is a newman prime, the count will be n-1\n    if is_newman_prime(n):\n        count += 1\n    \n    # Return the maximum prime found and the count of primes found\n    return max_prime, count\n\n\ndef is_newman_prime(n):\n    \"\"\"\n    Check if a number is a newman prime or not.\n    \"\"\"\n    # Check if n is divisible by any odd integer less than or equal to n/2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    \n    # If we reach this point, n is a newman prime\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize the sequence of primes up to 10\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\n    # Initialize the sequence of prime numbers\n    prime_nums = []\n\n    # Loop through each prime in the sequence\n    for prime in primes:\n        # Check if the prime divides n\n        if n % prime == 0:\n            # If it does, add the prime to the list of prime numbers\n            prime_nums.append(prime)\n\n            # If the prime divides n exactly, it's not a newman\u2013shanks\u2013williams prime number\n            if n == prime:\n                return prime_nums\n\n    # If the loop completes without finding a newman\u2013shanks\u2013williams prime number, return the list of prime numbers\n    return prime_nums"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 1\n    num = 2\n    prime = False\n\n    # Check if the number is prime\n    while count < n:\n        if num % 2 == 0:\n            num += 1\n        else:\n            count += 1\n            num += 2\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    if prime:\n        return num\n    else:\n        return \"Invalid input. Please enter a positive integer.\""
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the first two newman-shanks-williams primes\n    a = 1\n    b = 2\n    \n    # Initialize the counter\n    count = 0\n    \n    # Initialize the largest prime found so far\n    largest_prime = 0\n    \n    # Loop n times\n    for i in range(n):\n        # Compute the next newman-shanks-williams prime\n        c = a + b\n        \n        # Check if it's prime\n        if is_prime(c):\n            # If it is, check if it's larger than the largest prime found so far\n            if c > largest_prime:\n                # If it is, update the largest prime found so far\n                largest_prime = c\n                count = 1\n            elif c == largest_prime:\n                # If it's the same as the largest prime found so far, increment the count\n                count += 1\n        \n        # Update the values of a and b for the next iteration\n        a = b\n        b = c\n        \n    # Return the largest prime found\n    return largest_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables for the algorithm\n    p = 2  # Initialize the first prime number\n    count = 1  # Initialize the count of primes\n    \n    # Loop until the count reaches n\n    while count < n: \n        # Check if p is a newman-shanks-williams prime\n        if is_prime(p) and is_newman_prime(p):\n            count += 1  # Increment the count of primes\n        \n        # Find the next prime number\n        p += 1\n        \n    return p  # Return the nth newman-shanks-williams prime number\n\ndef is_prime(n): \n    '''\n    Determine if a number is prime using trial division.\n    '''\n    if n < 2:\n        return False\n    \n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    \n    return True\n\ndef is_newman_prime(n): \n    '''\n    Determine if a number is a newman-shanks-williams prime.\n    '''\n    if n < 7:\n        return False\n    \n    # Check for prime factors up to the square root of n\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    \n    # Check if the number is a newman-shanks-williams prime\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # initialize variables\n    count = 0\n    newman_prime = 2\n\n    # check if newman_prime is prime\n    while newman_prime!= 1:\n        if newman_prime % 2 == 0:\n            newman_prime += 1\n        else:\n            for i in range(3, int(newman_prime**0.5)+1, 2):\n                if newman_prime % i == 0:\n                    break\n            else:\n                count += 1\n                if count == n:\n                    return newman_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a list of prime numbers up to 100\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Loop through the list and find the nth prime number\n    for i in range(n):\n        if is_prime(primes[i]):\n            pass\n        else:\n            # If the nth prime number is not prime, find the next prime number\n            while not is_prime(primes[i]):\n                primes.append(find_next_prime(primes[i]))\n\n    return primes[n-1]\n\ndef is_prime(num): \n    '''\n    Returns True if the given number is prime, False otherwise.\n    '''\n    if num < 2: \n        return False \n    for i in range(2, int(num**0.5)+1): \n        if num % i == 0: \n            return False \n    return True\n\ndef find_next_prime(num): \n    '''\n    Finds the next prime number after the given number.\n    '''\n    # Initialize the next prime number to the given number plus 2\n    next_prime = num + 2\n\n    # Keep incrementing the next prime number until it is found to be prime\n    while not is_prime(next_prime):\n        next_prime += 2\n\n    return next_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Find the nth newman prime number\n    current_num = 1\n    nth_newman_prime = 0\n    while nth_newman_prime < n:\n        if is_prime(current_num):\n            nth_newman_prime += 1\n        current_num += 1\n\n    return nth_newman_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    count = 0\n    p = 2\n\n    # Check if p is prime\n    while count < n:\n        if is_prime(p):\n            count += 1\n        p += 1\n\n    # If n is prime, return p\n    if count == n:\n        return p\n    else:\n        return None"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Perform element-wise division and assign the result to the corresponding element in the second tuple\n        test_tup2[i] = test_tup1[i] / test_tup2[i]\n    return test_tup2"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return None\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] // test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples are not equal.\")\n        return\n    # Create a new tuple with the element-wise division of the two tuples\n    result_tup = tuple(a/b for a, b in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for num1, num2 in zip(test_tup1, test_tup2):\n        result_tup += (num1 / num2,)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same number of elements\")\n    \n    # Perform element-wise division operation\n    return tuple(test_tup1[i] / test_tup2[i] for i in range(len(test_tup1)))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Perform element-wise division\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    # Return the updated tuple\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples are not of equal length.\")\n        return\n\n    # Perform element-wise division operation\n    result_tup = tuple(num1 / num2 for num1, num2 in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the two tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n\n    # Perform element-wise division using zip() and map()\n    result = list(map(lambda x, y: x / y, test_tup1, test_tup2))\n\n    # Return the result tuple\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return list1\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(lst, L):\n    # Check if L is an integer and is greater than 0\n    if not isinstance(L, int) or L <= 0:\n        raise ValueError(\"L must be a positive integer\")\n\n    # Calculate the number of parts needed to split the list\n    n = len(lst) // L\n\n    # Split the list into two parts\n    part1 = lst[:L * n]\n    part2 = lst[L * n:]\n\n    # Return the two parts as a tuple\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        print(\"Error: List must have at least L elements\")\n        return\n    \n    # split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list_len = len(list1)\n    mid = list_len // 2\n    return (list1[:mid], list1[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_len = len(list1)\n    if list1_len < L:\n        raise ValueError(\"The length of the list is less than L.\")\n    mid = list1_len // 2\n    list1_part1 = list1[:mid]\n    list1_part2 = list1[mid:]\n    return (list1_part1, list1_part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # If L is greater than the length of the list, return the list as is\n    if L > len(list1):\n        return (list1,)\n    \n    # Otherwise, split the list into two parts where the length of the first part is L\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts such that the length of the first part is L.\n    \"\"\"\n    if len(lst) <= L:\n        raise ValueError(\"List must have at least 2 elements to split into two parts\")\n\n    n = len(lst)\n    mid = n // 2\n    return lst[:mid], lst[mid:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return (list1, [])\n    elif L % 2 == 0:\n        mid = L // 2\n        return (list1[:mid], list1[mid:])\n    else:\n        mid = L // 2 + 1\n        return (list1[:mid], list1[mid:])"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    This function takes the height in inches as an input and returns the dog's age in dog's years.\n    \"\"\"\n    # calculate the dog's age in years\n    dog_age = h_age / 30\n    # return the dog's age in years\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * (h_age // 7)\n    if h_age % 7!= 0:\n        dog_years += 1\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n\n    Args:\n        h_age (float): The height of the dog in inches.\n\n    Returns:\n        float: The age of the dog in dog's years.\n    '''\n    # Calculate the dog's age in dog's years\n    years = 7 * h_age / 12  # assume 7 years for a male dog and 6.5 years for a female dog\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age / 7\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # Calculate the dog's years based on his/her height in inches\n    dog_years = h_age * 0.44095881368158\n\n    # Convert the dog's years to whole and fractional parts\n    whole_years = int(dog_years)\n    fractional_years = dog_years - whole_years\n\n    # Print the result\n    print(f\"Dog's age in dog's years is: {whole_years}.{fractional_years:.2f}\")"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 7 * h_age # multiply by 7 to convert from human years to dog's years\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age + 12\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    breed = input(\"Enter the breed of your dog: \")\n    years = input(\"Enter the years of your dog: \")\n    dog_age = int(years) - int(h_age)\n    if breed == \"Golden Retriever\":\n        dog_age *= 2\n    elif breed == \"Labrador Retriever\":\n        dog_age *= 1.5\n    elif breed == \"Bernese Mountain Dog\":\n        dog_age *= 1.2\n    elif breed == \"Saint Bernard\":\n        dog_age *= 1.1\n    elif breed == \"Poodle\":\n        dog_age *= 0.9\n    elif breed == \"Doberman\":\n        dog_age *= 0.8\n    elif breed == \"German Shepherd\":\n        dog_age *= 1.1\n    elif breed == \"Miniature Pinscher\":\n        dog_age *= 1.2\n    elif breed == \"Golden Retriever\":\n        dog_age *= 2\n    else:\n        dog_age = 0\n    print(\"Your dog's age in dog's years is:\", dog_age)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age + 11\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = step\n    # Split the list into sublists\n    sublists = [S[i:i+n] for i in range(0, len(S), n)]\n    return sublists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        raise ValueError(\"Step must be a positive integer\")\n    n = len(S)\n    if step > n:\n        raise ValueError(\"Step must be less than or equal to the length of the list\")\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    return [S[i:i+step] for i in range(0, n, step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # initialize an empty list to store the resulting lists\n    result = []\n    # use a for loop to iterate through the input list\n    for i in range(0, len(S), step):\n        # slice the list to get the sublist starting at index i and ending at index i+step-1\n        sublist = S[i:i+step]\n        # append the sublist to the result list\n        result.append(sublist)\n    # return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if step < 1:\n        raise ValueError(\"Step must be a positive integer.\")\n    \n    results = []\n    for i in range(0, len(S), step):\n        results.append(S[i:i+step])\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        return []\n    n = len(S)\n    n_lists = n // step\n    if n % step!= 0:\n        n_lists += 1\n    lists = []\n    i = 0\n    while i < n:\n        lists.append(S[i:i+step])\n        i += step\n    return lists"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l**2\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l ** 2) + (12 * l)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize the sum variable\n    sum = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current number to the sum\n        sum += i*i\n    \n    # return the final sum of the squares of the odd numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum += i ** 2\n        i += 1\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the square of the current odd natural number to the sum variable\n        sum += i*i\n    # Return the final sum value\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n+1, 2, -2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n\n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current number to the sum of squares\n        sum_of_squares += i*i\n\n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_squares = 0  \n    for i in range(n):  \n        if i % 2 == 0:  \n            sum_squares += i**2  \n    return sum_squares  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    # Initialize the counter to 1\n    count = 1\n    # Loop through the first n odd natural numbers\n    while count <= n:\n        # Add the square of the current number to the sum\n        sum += (count * count)\n        # Increment the counter\n        count += 2\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    star_num = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            star_num += 2**(n-i)\n        else:\n            star_num += 2**(i-1)\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # loop through each number from 1 to n\n    for i in range(1, n+1): \n        # print the current number followed by a star\n        print(i, \"*\" * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    #initialize variables\n    current_num = 1\n    count = 1\n\n    #iterate untiln'th number is found\n    while count < n:\n        #calculate the next number\n        current_num = 1 + 3 * current_num\n        count += 1\n\n    #return then'th number\n    return current_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Define the length of the star sequence\n    length = 10\n\n    # Initialize the star number as 0\n    star_num = 0\n\n    # Iterate through the sequence of stars\n    for i in range(length):\n        # If the current number is equal to n, add 1 to the star number\n        if i == n:\n            star_num += 1\n    \n    # Return the star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 0\n    result = 1\n    while count < n:\n        result *= 2\n        count += 1\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n < 0:\n        return \"Error: n must be a non-negative integer.\"\n    elif n == 0:\n        return 1\n    else:\n        return n * (2*n - 1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Find then'th star number.\n    \"\"\"\n    # initialize the first two numbers\n    num1 = 2\n    num2 = 3\n\n    # loop n-1 times to calculate the nth number\n    for i in range(n-1):\n        # calculate the new number by adding num2 and dividing by 2\n        num3 = (num1 + num2) // 2\n        # swap num1 and num3 to calculate the next pair of numbers\n        num1 = num2\n        num2 = num3\n\n    return num1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    else:\n        return '*' + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    a = 1\n    b = 2\n\n    # loop through n to find then'th star number\n    for i in range(1, n+1):\n        # print the current star number\n        print('*', end='')\n\n        # update the values of a and b\n        a = b\n        b = a + b\n"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the variable to 1\n    count = 1\n    # loop n times\n    for i in range(n):\n        # print the current count value\n        print(count)\n        # increment the count value by 1\n        count += 1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {\n        'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122,\n        'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80, 'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90,\n        '0': 48, '1': 49, '2': 50, '3': 51, '4': 52, '5': 53, '6': 54, '7': 55, '8': 56, '9': 57\n    }\n    if k in ascii_dict:\n        return ascii_dict[k]\n    else:\n        return -1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_table = {\n        'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80, 'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90,\n        'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122\n    }\n    return ascii_table.get(k.upper())"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.upper()\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    # initialize the sum of even numbers at even positions to 0\n    even_sum = 0\n    \n    # loop through the list and check if each number is even\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            # if the number is even, add it to the sum of even numbers at even positions\n            even_sum += arr[i]\n            \n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    # Initialize variables to store sum and even index\n    sum = 0\n    even_index = 0\n\n    # Iterate through the list\n    for i in range(len(arr)):\n        # Check if the current element is even\n        if arr[i] % 2 == 0:\n            # Check if the current element is at even position\n            if i % 2 == 0:\n                # Add the current element to sum\n                sum += arr[i]\n                # Update even_index to the current index\n                even_index = i\n\n    # Return the sum of even numbers at even positions of the list\n    return sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    \n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n                even_index = i\n                \n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index_sum = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index_sum += arr[i]\n\n    return even_sum, even_index_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_at_even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even_at_even_index += arr[i]\n    return sum_even_at_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if even_index == -1 or i % 2 == 0:\n                even_index = i\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even_index += arr[i]\n\n    return sum_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n\n    # initialize sum variable to 0\n    total_sum = 0\n\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the raised to the fifth power of each even natural number\n        power = 0\n        while power < 5:\n            power += 1\n            result = i**power\n            # check if the result is even\n            if result % 2 == 0:\n                # add the result to the total sum\n                total_sum += result\n\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nresult = even_Power_Sum(n)\nprint(\"The sum of the first\", n, \"even natural numbers that are raised to the fifth power is\", result)"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_evens = 0\n    for i in range(2, n+1, 2):\n        sum_of_evens += i ** 5\n    return sum_of_evens"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize the sum variable to zero\n    total = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the sum of the i^5\n        total += i**5\n        \n    # Return the total sum\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i ** 5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2): # loop through even numbers\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    # Initialize an empty list to hold the rear elements\n    rear_elements = []\n    # Loop through each tuple in the list\n    for tuple in test_list:\n        # Append the rear element of the tuple to the rear_elements list\n        rear_elements.append(tuple[-1])\n    # Return the list of rear elements\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for t in test_list:\n        result.append(t[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for tup in test_list:\n        rear = tup[-1]\n        result_list.append(rear)\n    return result_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [rear for tup in test_list for rear in tup[-1]]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    result = []\n    for item in test_list:\n        rear = item[1]\n        result.append(rear)\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        rear = item[-1]\n        result.append(rear)\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    # Loop through both tuples simultaneously\n    for i in range(len(test_tup1)):\n        # Subtract the corresponding elements and store the result in a new tuple\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(sum(i - j for i in test_tup1) for j in test_tup2)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return\n    \n    # loop through the tuples and subtract the elements of the first tuple by the elements of the second tuple with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    # return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if i >= len(test_tup2):\n            print(f\"The second tuple has fewer elements than the first tuple. Skipping index {i}.\")\n            continue\n        test_tup1[i] -= test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if i in test_tup2:\n            result.append(test_tup1[i] - test_tup2[test_tup2.index(i)])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = ()\n    for i in range(len(test_tup1)):\n        sub_tup += (test_tup1[i] - test_tup2[i],)\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] - test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_binomial = 0\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            coeff = math.comb(n, i)\n            sum_even_binomial += coeff\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_binomial = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum_even_binomial += math.comb(n, i)\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum of the even index binomial coefficients.\n    \"\"\"\n\n    # Use the formula (n choose k) * (n choose (n-k)) to calculate the even index binomial coefficients\n    # where n is the given integer and k is the even index.\n    # Example:\n    # n = 6, k = 4\n    # (6 choose 4) * (6 choose (6-4)) = 150\n    # (n choose k) * (n choose (n-k)) = 150\n\n    # Initialize the sum of even index binomial coefficients to zero\n    even_sum = 0\n\n    # Loop through all possible values of k (even indices) up to the given integer n\n    for k in range(n+1):\n        # Calculate the even index binomial coefficient using the formula (n choose k) * (n choose (n-k))\n        coeff = math.comb(n, k) * math.comb(n, n-k)\n\n        # If the even index is even, add the coefficient to the sum\n        if k % 2 == 0:\n            even_sum += coeff\n\n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # define the range of even indices\n    start_index = 0\n    end_index = 2*n - 2\n    \n    # initialize the sum of even index binomial coefficients to zero\n    even_sum = 0\n    \n    # loop over the range of even indices\n    for i in range(start_index, end_index, 2):\n        # calculate the value of the binomial coefficient\n        coeff = math.comb(n, i)\n        \n        # check if the binomial coefficient is even\n        if i % 2 == 0:\n            even_sum += coeff\n            \n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize a variable to store the sum of even index binomial coefficients\n    sum_even_index = 0\n\n    # Loop through the even indices of the binomial coefficient array\n    for i in range(2, n+1, 2):\n        # Calculate the current even index binomial coefficient\n        coeff = math.comb(n, i)\n\n        # Add the current even index binomial coefficient to the sum\n        sum_even_index += coeff\n\n    # Return the sum of even index binomial coefficients\n    return sum_even_index"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    result = 0\n    for i in range(2, n+1, 2):\n        for j in range(1, i+1):\n            result += math.comb(i, j)\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        print(\"Invalid input: n must be a positive integer\")\n    elif n == 1:\n        print(\"Sum of even index binomial coefficients: 2\")\n    else:\n        sum_even = 0\n        for i in range(2, n+1, 2):\n            sum_even += math.comb(n, i-1)\n        print(\"Sum of even index binomial coefficients: \", sum_even)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def binomial_coeff(n, k):\n        return math.comb(n, k)\n\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i * binomial_coeff(n, i-2)\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Use math.comb function to find the even index binomial coefficients.\n    even_binomial_coeffs = [math.comb(n, i) for i in range(0, n+1, 2)]\n    return sum(even_binomial_coeffs)"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r * r * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (1/3)*3.14159*(r**2)*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * (r ** 2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14/4)*r**2*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14159 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    area = 3.14159 * r**2  # Formula for area of a circle\n    volume = area * h  # Formula for volume of a cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \n    :param r: float, the radius of the cylinder\n    :param h: float, the height of the cylinder\n    :return: float, the volume of the cylinder\n    '''\n    \n    volume = 3.14159 * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Formula for calculating the volume of a cylinder\n    V = (3/4) * 3.14159 * r * r * h\n    return V"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i] == test_tup[i+1]:\n                count += 1\n            else:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= test_tup.index(test_tup[i]):\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i] < test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            break\n        if test_tup[i]!= test_tup[i + 1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i] == test_tup[i-1]:\n                count += 1\n            else:\n                break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 13\n    else: \n        return 13*(n-1) + 6*(n-1)*(n-2) + 12*(n-1)*(n-2)*(n-3)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize a variable to store the decagonal number\n    decagonal = 0\n    \n    # Loop through each digit in the decimal representation of n\n    for digit in str(n):\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        \n        # Add the integer times the power of the decagonal number to the decagonal variable\n        decagonal += digit_int * ((2 * (digit_int - 1)) ** (2 * digit_int))\n    \n    # Return the decagonal number\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer n as input and returns True if it is a decagonal number, False otherwise.\n    A decagonal number is a number such that the sum of its two diagonals is equal to n.\n    For example, 15 is a decagonal number because 1 + 12 = 15.\n    '''\n\n    # To check if a number is a decagonal number, we need to find its two diagonals.\n    # We can calculate the sum of the two diagonals using the formula:\n    #\n    #   (n * (n-1)) / 2\n    #\n    # which gives us the sum of the first n numbers.\n\n    # Calculate the sum of the first n numbers.\n    n_sum = (n * (n-1)) / 2\n\n    # Check if the sum is equal to n.\n    if n_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Define the first and second row of the decagonal matrix\n    first_row = [1]\n    second_row = [1, 2]\n    \n    # Initialize the result variable\n    result = 1\n    \n    # Iterate over the rows of the matrix\n    for i in range(2, n+1):\n        # Calculate the current row by appending the sum of the previous two rows\n        current_row = [1]\n        for j in range(1, i):\n            current_row.append(second_row[j-1] + first_row[j-1])\n        # Update the result variable with the current row and the first row of the next iteration\n        result = current_row\n        first_row = second_row\n        # Update the second row of the next iteration\n        second_row = current_row\n    \n    # Return the result variable as the nth decagonal number\n    return result"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return None\n    else:\n        return (n * (3 * n - 1)) / 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_nums = [0]\n    for i in range(1, n+1):\n        decagonal_nums.append(sum(int(j)**2 for j in str(i*5)))\n    return decagonal_nums"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return 10*n**2 + 5*n\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(n):\n        num += i*i\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    for i in range(1, n+1):\n        decagonal_num += i * (i + 1) // 2\n    return decagonal_num"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        print(\"The list contains unique elements.\")\n    else:\n        print(\"The list contains duplicate elements.\")"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = set(test_list)\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    test_set = set(test_list)\n    return len(test_list) == len(test_set)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The lists must be of equal length.')\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [x - y for x,y in zip(nums1,nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    if len(nums1)!= len(nums2):\n        print(\"The lists are not of equal length.\")\n        return result\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts the corresponding elements of two lists element-wise.\n\n    Args:\n    nums1: list, the first list to be subtracted from\n    nums2: list, the second list to be subtracted from\n\n    Returns:\n    list, the resulting list of differences between the two input lists\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length')\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each digit\n    digit_freq = {}\n    # Loop through each digit in the integer and update its frequency in the dictionary\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n    # Loop through each digit in the integer and check if its frequency is greater than or equal to itself\n    for digit in str(n):\n        if digit_freq[digit] < digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    # check if the number is positive\n    if n <= 0:\n        return False\n\n    # convert the number into a list of digits\n    digits = list(str(n))\n\n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # iterate through each digit in the number\n    for digit in digits:\n        # if the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # if the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[digit] = 1\n\n    # iterate through each digit in the number\n    for digit in digits:\n        # check if the frequency of the digit is greater than the digit itself\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = {}\n    for d in digits:\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n    for d in freq:\n        if freq[d] > d:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    # Convert the integer to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    \n    # Create a dictionary to store the frequency of each digit\n    freq = {}\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # Check whether the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the integer to a string\n    num_str = str(n)\n    # Initialize a dictionary to store the frequency of digits\n    freq = {}\n    # Iterate through the string and update the frequency of digits\n    for digit in num_str:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    # Iterate through the dictionary and check if the frequency of each digit is less than or equal to its digit itself\n    for digit, freq_digit in freq.items():\n        if freq_digit > int(digit):\n            return False\n    # If no digit has a frequency greater than its digit, then the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    # function to check whether the frequency of each digit in the integer is less than or equal to the digit itself\n    # use a dictionary to store the frequency of each digit\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n\n    # iterate through the frequency dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > int(digit):\n            return False\n\n    # if all the digits have a frequency less than or equal to the digit itself, the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Convert the integer to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    \n    # Initialize the frequency dictionary\n    freq = {}\n    \n    # Count the frequency of each digit\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n            \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    # If all the digits are valid, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    freq_dict = {}\n\n    # Count the frequency of each digit in the integer\n    for digit in digits:\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n\n    # Check whether the frequency of each digit is less than or equal to the digit itself\n    for digit in freq_dict:\n        if freq_dict[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    count = {}\n    for digit in str(n):\n        count[int(digit)] = count.get(int(digit), 0) + 1\n    for key, value in count.items():\n        if value > key:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    def digit_frequency(n): \n        '''\n        Helper function to count the frequency of each digit in the integer.\n        '''\n        freq = [0] * 10\n        while n: \n            freq[n % 10] += 1\n            n //= 10\n        return freq\n\n    freq = digit_frequency(n)\n    for i in range(10): \n        if freq[i] > 1: \n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"Not all items in the list are equal to the given element.\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(lst) == 0:\n        return True\n    elif lst[0] == element:\n        return check_element(lst[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Check if all elements in lst are equal to elem.\n    \"\"\"\n    if len(lst) == 0:\n        return True  # empty list is always true\n\n    first = lst[0]\n    for x in lst:\n        if x!= first:\n            return False\n\n    return True  # all elements are equal"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(list[i] == element for i in range(len(list)))"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes in a list and an element and returns True if all the elements in the list are equal to the given element, otherwise False.\n    '''\n    if len(lst) == 0:\n        return True\n    elif lst[0] == element:\n        return check_element(lst[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list `lst` and an element `elem` and returns True if all the elements in `lst` are equal to `elem`, and False otherwise.\n    '''\n    for item in lst:\n        if item!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        if list[0] == element:\n            return check_element(list[1:], element)\n        else:\n            return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    elif len(list) == 1:\n        return list[0] == element\n    else:\n        for i in range(len(list)):\n            if list[i]!= element:\n                return False\n        return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(x == element for x in list):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"Not all items in the list are equal to the given element.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = re.compile(r'a.*(b){2,3}')\n    result = pattern.match(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=[^b]*b{2,3})'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]*b[b]?b*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    result = re.search(pattern, text)\n    \n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[bB]*')\n    return pattern.search(text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[bB]{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=\\w*b)(?=.*b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<=a)(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize max_sum and max_end to negative infinity\n    max_sum = float('-inf')\n    max_end = -1\n    \n    # Repeat the array k times\n    for i in range(k):\n        # Find the sum of the array\n        array_sum = sum(a)\n        \n        # If the array sum is greater than max_sum, update max_sum and max_end\n        if array_sum > max_sum:\n            max_sum = array_sum\n            max_end = i\n        \n        # Remove the first element of the array\n        a.pop(0)\n        \n        # Recalculate the sum of the array\n        array_sum = sum(a)\n        \n        # If the array sum is greater than max_sum, update max_sum and max_end\n        if array_sum > max_sum:\n            max_sum = array_sum\n            max_end = i\n    \n    # Return the largest sum of a contiguous array in the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the sum and max sum variables\n    sum = max_sum = 0\n    \n    # Repeat the array k times\n    for i in range(k):\n        # Add the first element to the sum\n        sum += a[0]\n        \n        # Calculate the maximum sum using the sum so far\n        max_sum = max(max_sum, sum)\n        \n        # Move the left pointer to the right\n        for j in range(1, n):\n            # Subtract the left element from the sum\n            sum -= a[j-1]\n            \n            # Calculate the maximum sum using the updated sum\n            max_sum = max(max_sum, sum)\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Create a copy of the array to store the modified array\n    modified_arr = a.copy()\n\n    # Repeat the array k times to create the modified array\n    for _ in range(k):\n        modified_arr = [a[0]] + modified_arr + [a[-1]]\n\n    # Initialize the maximum subarray sum and its index\n    max_sum = max_sum_index = float('-inf')\n\n    # Iterate through the modified array and find the maximum subarray sum\n    for i in range(n):\n        subarray_sum = sum(modified_arr[i:i+n])\n        if subarray_sum > max_sum:\n            max_sum = subarray_sum\n            max_sum_index = i\n\n    return max_sum, max_sum_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    count = 0\n\n    # Iterate through the array and count the number of occurrences of each element\n    for i in range(n):\n        if a[i] not in counts:\n            counts[a[i]] = 0\n        counts[a[i]] += 1\n\n    # Iterate through the array k times\n    for i in range(k):\n        # Add the original element to the current sum\n        current_sum += a[0]\n\n        # Iterate through the array and update the current sum based on the counts\n        for j in range(n):\n            current_sum += (a[j] * counts[a[j]]) - (a[j] * counts[a[j]] - a[j]) * counts[a[j]]\n\n        # Update the maximum sum if the current sum is greater\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize a variable to store the maximum sum of a contiguous subarray\n    max_sum = float('-inf')\n\n    # Initialize a variable to store the current sum of a contiguous subarray\n    curr_sum = 0\n\n    # Loop through the array k times\n    for i in range(k):\n        # Add the first element to the current sum\n        curr_sum += a[0]\n\n        # Update the maximum sum if the current sum is greater\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # Move the window by one element\n        a = a[1:]\n\n    # Loop through the remaining elements of the array\n    for i in range(n - k):\n        # Add the next element to the current sum\n        curr_sum = max(curr_sum - a[i], a[i])\n\n        # Update the maximum sum if the current sum is greater\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    k_sum = sum(a[:k])\n\n    # Iterate over the array\n    for i in range(n-k+1):\n        # Update current sum\n        curr_sum += a[i+k-1]\n\n        # Check if the current sum is greater than the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # Check if the current sum is greater than the sum of the current k elements\n        if curr_sum > k_sum:\n            # Update the maximum sum to be the current sum and add the k-th element to the sum\n            max_sum = curr_sum + a[i+k-1]\n            k_sum += sum(a[i+k:])\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n\n    # Initialize the maximum sum to be the first element of the array\n    max_sum = a[0]\n\n    # Initialize the current sum to be the first element of the array\n    current_sum = a[0]\n\n    # Repeat the given array k times and compute the sum for each repetition\n    for i in range(k):\n        for j in range(i, n):\n            current_sum += a[j]\n            max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    arr = a * k\n    for i in range(n):\n        curr_sum += arr[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize the sum of the modified array\n    sum_modified = a[0] * k\n    \n    # Loop through the array and calculate the sum of each subarray formed by repeating the given array k times\n    for i in range(1, n):\n        sum_modified += a[i] * k\n        sum_modified -= a[i-1] * k\n\n    # Return the maximum sum of a contiguous array in the modified array\n    return sum_modified"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # calculate the sum of the original array\n    sum_original = sum(a)\n\n    # create a list to store the sums of the modified array\n    sum_modified = []\n\n    # loop through all possible lengths of the modified array\n    for i in range(1, k+1):\n        # calculate the sum of the modified array\n        sum_modified_i = sum([a[j] for j in range(n) if j % i == 0])\n\n        # add the sum to the list\n        sum_modified.append(sum_modified_i)\n\n    # find the maximum sum of the modified array\n    max_sum = max(sum_modified)\n\n    # calculate the difference between the maximum sum and the original sum\n    diff = max_sum - sum_original\n\n    # return the difference\n    return diff"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    i = 2\n    while i <= n:\n        total += i**2\n        i += 2\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    i = 2\n    while i <= n:\n        if i % 2 == 0:\n            sum_of_squares += i ** 2\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        count += 1\n        sum_of_squares += count ** 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i\n        if i*i % 2 == 0:\n            break\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total_sum = 0\n    count = 0\n    while count < n:\n        count += 1\n        if count % 2 == 0:\n            total_sum += count ** 2\n    return total_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_numbers = [x for x in range(2, n+1, 2)]\n    return sum([x**2 for x in even_numbers])"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_sum = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            even_sum += i**2\n        i += 1\n    return even_sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function takes a list of lists and returns a list containing the maximum length of each sublist.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        max_length = len(sublist)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n            max_list = list1[i]\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize a variable to store the maximum length\n    max_length = 0\n    # iterate through each element in the list\n    for lst in list1:\n        # check if the length of the current list is greater than the maximum length\n        if len(lst) > max_length:\n            # update the maximum length\n            max_length = len(lst)\n    # return the list of maximum length\n    return [x for x in list1 if len(x) == max_length]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum lengths\n    max_lengths = []\n    # Loop through each sub-list in the list of lists\n    for sublist in list1:\n        # Find the maximum length of the sub-list\n        max_length = max([len(x) for x in sublist])\n        # Append the maximum length to the list of maximum lengths\n        max_lengths.append(max_length)\n    # Return the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize the maximum length to 0\n    max_len = 0\n    # Iterate over each list in the input list\n    for lst in list1:\n        # Calculate the length of the current list\n        current_len = len(lst)\n        # Update the maximum length if the current list is longer\n        if current_len > max_len:\n            max_len = current_len\n    # Return the list of maximum length\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum lengths\n    max_lengths = []\n    \n    # Loop through each sublist in the outer list\n    for sublist in list1:\n        # Initialize an empty list to store the lengths of each sublist\n        lengths = []\n        \n        # Loop through each element in the sublist\n        for element in sublist:\n            # Append the length of the element to the lengths list\n            lengths.append(len(str(element)))\n            \n        # Find the maximum length of the sublist by finding the maximum value in the lengths list\n        max_length = max(lengths)\n        \n        # Append the maximum length to the max_lengths list\n        max_lengths.append(max_length)\n    \n    # Find the maximum length in the max_lengths list\n    max_length_list = max(max_lengths)\n    \n    # Return the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a table to store the number of ways for each combination of colors\n    table = [[0] * (k+1) for _ in range(n+1)]\n\n    # Initialize the base cases for the table\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1 or j == 1:\n                table[i][j] = 1\n            else:\n                table[i][j] = table[i-1][j] + table[i][j-1]\n\n    # Return the total number of ways\n    return table[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Initialize a dictionary to store the count of ways\n    ways = {0: 1}\n\n    # Loop through all possible ways of having the first post painted\n    for i in range(1, n+1):\n        ways[i] = 0\n        for j in range(1, k+1):\n            if i >= j:\n                ways[i] += ways[i-j]\n\n    # Return the count of ways\n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2: \n        return 0\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    else: \n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k+1)\n\nn = 5\nk = 3\n\nprint(\"Number of ways to paint the fence: \", count_no_of_ways(n, k))"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    # base cases\n    for i in range(n+1):\n        dp[i][0] = 1\n    for j in range(k+1):\n        dp[0][j] = 1\n    \n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if dp[i-1][j] == 1 and dp[i][j-1] == 1:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n            elif dp[i-1][j] == 1:\n                dp[i][j] = dp[i-1][j]\n            elif dp[i][j-1] == 1:\n                dp[i][j] = dp[i][j-1]\n    \n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a matrix to store the count of ways of painting the fence with at most 2 adjacent posts having the same color\n    count_matrix = [[0] * (k+1) for _ in range(n+1)]\n    # Initialize the count of ways of painting the fence with 0 adjacent posts having the same color\n    count_matrix[0][0] = 1\n\n    # Fill the count_matrix with the count of ways of painting the fence with different adjacent posts having the same color\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i <= 2:\n                # If the i-th post has the same color as the (i-1)-th and (i-2)-th posts, then the count of ways of painting the fence with at most 2 adjacent posts having the same color is k\n                count_matrix[i][j] = j\n            else:\n                # Otherwise, the count of ways of painting the fence with at most 2 adjacent posts having the same color is the sum of the count of ways of painting the fence with at most (i-3)-th adjacent posts having the same color and the count of ways of painting the fence with at most (i-2)-th and (i-1)-th adjacent posts having the same color\n                count_matrix[i][j] = count_matrix[i-3][j] + count_matrix[i-2][j] + count_matrix[i-1][j]\n\n    # Return the count of ways of painting the fence with at most 2 adjacent posts having the same color\n    return count_matrix[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a boolean matrix to store whether each post can be painted with each color\n    color_matrix = [[False] * k for _ in range(n)]\n    # Initialize the first post as black\n    color_matrix[0][0] = True\n    # Initialize the number of ways as 1\n    count = 1\n\n    # Loop through all the possible colors\n    for color in range(1, k):\n        # Loop through all the possible adjacent post pairs\n        for i in range(n):\n            for j in range(i+1, n):\n                # If the adjacent posts have the same color, mark them as painted in the color matrix and increment the count\n                if color_matrix[i][color] and color_matrix[j][color]:\n                    color_matrix[i][color] = color_matrix[j][color] = True\n                    count += 1\n\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize an array to store the number of ways for each number of colors\n    ways = [0] * (k + 1)\n\n    # Base case: the fence must have at least two colors\n    ways[2] = 1\n\n    # Base case: if the fence has exactly one color, there is only one way\n    if n == 1:\n        return ways[1]\n\n    # Iterate over all numbers of colors from 2 to k\n    for i in range(2, k + 1):\n        # Calculate the number of ways for the previous number of colors\n        ways_prev = ways[i]\n\n        # If the current color is the same as the previous color, we can paint the fence with only one color\n        if i == k:\n            ways[i] = ways_prev\n        else:\n            # Otherwise, we can paint the fence with at most one of the previous colors\n            ways[i] = ways_prev + ways[i - 1]\n\n    # Return the total number of ways for the given number of colors\n    return ways[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def helper(i, j, k):\n        if i < 0 or i >= n or j < 0 or j >= n:\n            return 0\n        \n        if i == 0 and j == 0:\n            return 1\n        \n        if dp[i][j]!= -1:\n            return dp[i][j]\n        \n        if arr[i][j] == arr[i-1][j]:\n            dp[i][j] = helper(i-1, j, k)\n        else:\n            dp[i][j] = helper(i-1, j, k) + helper(i, j-1, k)\n        \n        return dp[i][j]\n        \n    arr = [[0]*n for _ in range(n)]\n    dp = [[-1]*n for _ in range(n)]\n    \n    for i in range(n):\n        arr[0][i] = 1\n        arr[i][0] = 1\n        arr[n-1][i] = 1\n        arr[i][n-1] = 1\n    \n    return helper(n-1, n-1, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Using a 2D array to store the number of ways to paint the fence with at most 2 adjacent posts having the same color\n    ways = [[0] * (k + 1) for _ in range(n + 1)]\n    # Base cases\n    for i in range(1, n + 1):\n        ways[i][1] = 1\n    ways[1][2] = 1\n    # Fill in the rest of the array using dynamic programming\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            ways[i][j] = ways[i - 1][j] + ways[i - 1][j - 1]\n    # Return the final value in the 2D array\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # create a list of all possible colors for the fence\n    colors = list(range(1, k+1))\n\n    # create a 2D list to store the count of ways of painting the fence for each possible color pair\n    ways = [[0]*(k-1) for _ in range(n-1)]\n\n    # initialize the first row and column of the count table to 1\n    for i in range(k-1):\n        ways[0][i] = 1\n\n    # fill the rest of the count table using dynamic programming\n    for i in range(1, n):\n        for j in range(k-1):\n            ways[i][j] = ways[i-1][j]\n            for l in range(j+1, k-1):\n                ways[i][j] += ways[i-1][l-1]\n\n    # return the count of ways of painting the fence for each possible color pair\n    return ways[n-1]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two integers n and m as input and returns the quotient of n and m rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  \n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # first, check if the divisor is 0\n    if m == 0:\n        raise ValueError(\"Cannot divide by zero.\")\n    # if the divisor is not 0, find the remainder and divide by m\n    remainder = n % m\n    quotient = n // m\n    # check if the quotient has any remainder\n    if remainder == 0:\n        return quotient\n    # if the quotient does not have any remainder, increment the quotient and recurse\n    else:\n        return find(quotient, m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return None #return None if m is zero\n    return n // m #return n divided by m rounded down to the nearest integer"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as inputs and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m   # integer division\n    return quotient   # return the quotient  "
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of the third side\n    s = (w ** 2 + h ** 2 - (w ** 2 / 4) ** 2) ** 0.5\n    # convert the length to cm and round to the nearest integer\n    s = round(s * 2.54)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w ** 2 + h ** 2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w ** 2 + h ** 2) ** 0.5\n    return math.sqrt(s ** 2 - w ** 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w + h) / 2\n    c = math.sqrt(s * (s - w) * (s - h))\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    c = math.sqrt(w**2 + (h/2)**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the other two sides\n    s = math.sqrt(w**2 + h**2)\n    \n    # Calculate the hypotenuse\n    hypo = math.sqrt(w**2 + s**2)\n    \n    # Calculate the third side\n    third_side = hypo - s\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    return math.sqrt(w**2 + h**2) - s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    a = math.sqrt(w ** 2 + h ** 2)\n    b = math.sqrt(w ** 2 + (h / 2) ** 2)\n    \n    return a + b"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Using Heron's formula\n    s = (w**2 + h**2)**0.5\n    return math.sqrt(s**2 - w**2 - h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    sqrt_of_sum_of_squares = math.sqrt((w**2 + h**2 + (w + h)**2) / 2)\n    third_side = sqrt_of_sum_of_squares - w - h\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = None\n    for num in listval:\n        if max_num is None:\n            max_num = num\n        elif num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif isinstance(listval[0], (int, float)):\n        return max(listval)\n    elif isinstance(listval[0], str):\n        return max(listval, key=len)\n    else:\n        raise ValueError(\"Input list contains non-numeric or non-string elements.\")"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for i in listval:\n        if max_val is None or i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif isinstance(listval[0], (int, float, complex)):\n        return max(listval)\n    elif isinstance(listval[0], (list, tuple, set, frozenset)):\n        for sublist in listval:\n            if isinstance(sublist, (list, tuple, set, frozenset)):\n                max_value = max_val(sublist)\n                if max_value is not None:\n                    return max_value\n        return None\n    else:\n        return None"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError('Input should be a list.')\n    max_num = None\n    for num in listval:\n        if max_num is None:\n            max_num = num\n        elif num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None:\n            max_val = val\n        elif val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize max value with the first value in the list\n    max_value = listval[0]\n    # Loop through the rest of the list\n    for i in range(1, len(listval)):\n        # If the current value is greater than the max value, update max_value\n        if listval[i] > max_value:\n            max_value = listval[i]\n    # Return max_value\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = float('-inf')  # initialize max value to negative infinity\n    for num in listval:\n        if num > max_num:  # if the current number is greater than the max, update max\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, (list, tuple)):\n        return None\n    max_val = None\n    for val in listval:\n        if max_val is None:\n            max_val = val\n        elif val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for value in listval:\n        if value > max_val:\n            max_val = value\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    i = 1\n    while i*i <= number:\n        if number % i:\n            i += 1\n        else:\n            divisors.append(i)\n            number //= i\n            while number % i == 0:\n                number //= i\n    divisors.append(number)\n    return sum(divisors)\n\nprint(sum_div(60)) # Output: 77"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    i = 1\n    while i * i <= number:\n        if number % i:\n            i += 1\n        else:\n            divisors.append(i)\n            number //= i\n    divisors.append(number)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # initialize sum to 0\n    div_sum = 0\n\n    # loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(number**0.5) + 1):\n\n        # check if the number is divisible by i\n        if number % i == 0:\n\n            # add i to the sum\n            div_sum += i\n\n    # return the sum of all divisors\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 1\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    # initialize variables for counting inversions\n    count = 0\n    n = len(arr)\n\n    # sort the array in ascending order\n    arr.sort()\n\n    # traverse the sorted array and count inversions\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            count += n - i\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sort the array\n    arr = sorted(arr)\n\n    # Initialize count of inversions\n    inv_count = 0\n\n    # Traverse the sorted array\n    for i in range(1, len(arr)):\n        # Calculate the sum of elements on both sides of i\n        left_sum = sum(arr[:i])\n        right_sum = sum(arr[i:])\n\n        # Check if the sum of elements on both sides of i is negative or not\n        if left_sum > right_sum:\n            inv_count += left_sum - right_sum\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_sort(arr):\n    \"\"\"\n    Sorts an array using merge sort algorithm.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    left = merge_sort(left)\n    right = merge_sort(right)\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    \"\"\"\n    Merges two sorted arrays into a single sorted array.\n    \"\"\"\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result\n\ndef count_inversions(arr):\n    \"\"\"\n    Counts the number of inversions in an array using merge sort algorithm.\n    \"\"\"\n    inv_count = 0\n    arr = merge_sort(arr)\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            inv_count += left[i] > left[j] and left[i] < right[j]\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the count of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    # Counting inversions using merge sort algorithm\n    def merge_sort(arr):\n        if n <= 1:\n            return arr\n        mid = n // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        left = merge_sort(left)\n        right = merge_sort(right)\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result.extend(left[i:])\n        result.extend(right[j:])\n        return result\n\n    arr = merge_sort(arr)\n    inv_count = 0\n    i, j = 0, 1\n    while j < n:\n        if arr[i] <= arr[j]:\n            i += 1\n        else:\n            inv_count += n - i\n            j += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Create two pointers i and j, pointing to the first and last elements of the array respectively.\n    i = 0\n    j = len(arr) - 1\n\n    # Loop through the array until the pointers meet in the middle.\n    while i < j:\n        # If the elements at i and j are not in the correct order, swap them.\n        if arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]\n\n        # Find the first element greater than arr[j] in the right subarray.\n        k = i\n        while k < j and arr[k] <= arr[j]:\n            k += 1\n\n        # If the first element greater than arr[j] is not in the first i positions of the array,\n        # then there is at least one inversion in the left subarray.\n        if k - i > 1:\n            # The inversion count is the difference between the count of the left and right subarrays and the count of the left subarray.\n            inv_count = (k - i) - (j - k)\n        else:\n            inv_count = 0\n\n        # Move the pointers accordingly to continue searching for inversions.\n        i += inv_count\n        j -= inv_count\n\n    # Return the count of inversions.\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result += left[i:]\n    result += right[j:]\n    \n    return result\n\ndef get_Inv_Count(arr):\n    sorted_arr = merge_sort(arr)\n    inv_count = 0\n    \n    for i in range(len(sorted_arr)):\n        for j in range(i + 1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                inv_count += (j - i)\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # Sort the array\n    arr = merge_sort(arr, 0, n-1)\n\n    # Count inversions\n    count = 0\n    for i in range(1, n):\n        count += i * (n - i)\n\n    return count\n\ndef merge_sort(arr, low, high):\n    if low < high:\n        mid = (low + high) // 2\n        merge_sort(arr, low, mid)\n        merge_sort(arr, mid+1, high)\n        merge_sort(arr, low, mid, mid+1, high)\n\n    # Merge the two sorted subarrays\n    i, j, k = low, mid+1, low\n       \n    while i <= mid and j <= high:\n        if arr[i] <= arr[j]:\n            arr[k] = arr[i]\n            i += 1\n        else:\n            arr[k] = arr[j]\n            j += 1\n            count += mid - i + 1\n        k += 1\n    \n    while i <= mid:\n        arr[k] = arr[i]\n        i += 1\n        k += 1\n    \n    while j <= high:\n        arr[k] = arr[j]\n        j += 1\n        k += 1"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Helper function to swap elements of the array\n    def swap(arr, i, j):\n        temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n\n    # Helper function to sort the array in ascending order\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n        merge_sort(left_half)\n        merge_sort(right_half)\n        i = j = k = 0\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n    # Merge sort the array to sort it in ascending order\n    merge_sort(arr)\n\n    # Initialize variables to count inversions\n    count = 0\n    left = 0\n    right = len(arr) - 1\n\n    # Traverse the sorted array and count inversions\n    while left < right:\n        if arr[left] < arr[right]:\n            left += 1\n        elif arr[left] > arr[right]:\n            right -= 1\n        else:\n            # Swap the two elements at the current positions\n            swap(arr, left, right)\n\n            # Count the inversion\n            count += left - right + 1\n\n            # Increment left and decrement right pointers\n            left += 1\n            right -= 1\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Sort the array\n    arr.sort()\n\n    # Initialize the count to 0\n    count = 0\n\n    # Traverse the array in reverse order\n    for i in range(len(arr) - 1, 0, -1):\n        # Check if the element is greater than the previous element\n        if arr[i] > arr[i - 1]:\n            count += i - 1  # Add the number of elements to the count\n\n    return count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flattens a nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(lst):\n    '''\n    This function takes a nested list as input and returns a flattened version of the list.\n    '''\n    flattened_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened_lst.extend(flatten_list(item))\n        else:\n            flattened_lst.append(item)\n    return flattened_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    Args:\n    lst (list): A nested list structure.\n\n    Returns:\n    list: A flattened list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the count of each item\n    item_count = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item, price in stdata:\n        item_count[item] += price\n\n    # Find the maximum aggregate\n    max_agg = max(item_count.values())\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples (num, price) as input and returns the maximum aggregate.\n    '''\n    \n    # Create a defaultdict to store the stock prices for each stock\n    stock_prices = defaultdict(int)\n    \n    # Iterate through the list of tuples\n    for num, price in stdata:\n        # Update the stock prices for the given stock\n        stock_prices[num] = price\n    \n    # Calculate the maximum aggregate using the max() function\n    max_agg = max(stock_prices.values())\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    st = defaultdict(int)\n    for item in stdata:\n        st[item[0]] += item[1]\n    max_aggregate_value = 0\n    max_item = \"\"\n    for item in st:\n        if st[item] > max_aggregate_value:\n            max_aggregate_value = st[item]\n            max_item = item\n    return max_item, max_aggregate_value"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate value.\n    '''\n    # Create a dictionary to store the maximum aggregate values for each item in the list.\n    max_agg_dict = defaultdict(int)\n\n    # Iterate through the list of tuples and update the maximum aggregate values in the dictionary.\n    for item in stdata:\n        max_agg_dict[item[0]] = max(max_agg_dict[item[0]], item[1])\n\n    # Find the maximum aggregate value from the dictionary and return it.\n    return max(max_agg_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n\n    Args:\n    stdata (list): a list of tuples of the form (item, price).\n\n    Returns:\n    int: the maximum aggregate value.\n    '''\n\n    # Create a defaultdict to store the count of each item in the list\n    item_count = defaultdict(int)\n\n    # Iterate through the list of tuples and update the count of each item\n    for item, price in stdata:\n        item_count[item] += 1\n\n    # Calculate the maximum aggregate by iterating through the items and multiplying the price by the count\n    max_agg = max([price * count for item, count in item_count.items()])\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate and the count of transactions\n    max_agg_dict = defaultdict(int)\n\n    # iterate through the list of tuples\n    for transaction in stdata:\n        # get the transaction details\n        customer_id, amount = transaction\n\n        # update the maximum aggregate and count of transactions in the defaultdict\n        max_agg_dict[amount] += 1\n\n    # find the maximum aggregate in the defaultdict\n    max_agg = max(max_agg_dict, key=max_agg_dict.get)\n\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the maximum aggregate for each month and category\n    max_agg = defaultdict(float)\n    # Iterate through the list of tuples\n    for item in stdata:\n        # Extract the month and category from the tuple\n        month, category = item\n        # Calculate the maximum aggregate for the given month and category\n        max_agg[month][category] = max(max_agg[month][category], item[2])\n    # Find the maximum aggregate for each month and category\n    max_agg_list = []\n    for month, category_dict in max_agg.items():\n        max_agg_list.append((month, max(category_dict.items(), key=lambda x: x[1])))\n    # Return the maximum aggregate for each month and category\n    return max_agg_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict with keys as the month and values as the aggregate\n    month_dict = defaultdict(int)\n\n    # Iterate over the list of tuples and update the aggregate for each month\n    for name, amount, month in stdata:\n        month_dict[month] += amount\n\n    # Find the maximum aggregate across all months\n    max_amount = max(month_dict.values())\n\n    # Return the maximum aggregate\n    return max_amount"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a defaultdict to store the count of each item in the list\n    count_dict = defaultdict(int)\n\n    # Iterate through each tuple in the list\n    for item in stdata:\n        # Add 1 to the count of the item in the count_dict\n        count_dict[item] += 1\n\n    # Initialize a variable to store the maximum aggregate\n    max_agg = 0\n\n    # Iterate through the count_dict and compare the count of each item with the maximum aggregate\n    for item, count in count_dict.items():\n        max_agg = max(max_agg, count)\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        for j in item:\n            max_dict[j] += item[j]\n\n    max_agg = max(max_dict.values())\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n, 2**2*n):\n        binary_str = bin(i)[2:]\n        if int(binary_str[:n]) == int(binary_str[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        first_sum = int(binary[:n])\n        last_sum = int(binary[-n:])\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_half = i\n        last_half = 0\n        for j in range(n):\n            last_half = (last_half << 1) + (first_half & 1)\n            first_half >>= 1\n        if (first_half >> n) == (last_half >> n):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**2*n+1):\n        temp = bin(i)[2:].zfill(2*n)\n        if sum(temp[:n]) == sum(temp[-n:]):\n            count += 1\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The count of binary sequences is:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_n = i & ((1 << n) - 1)  # get the first n bits\n        last_n = i >> n  # get the last n bits\n        if first_n == last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(n-1), 2**(n)):\n        if sum(int(digit) for digit in bin(i)[2:]) == 2**(n-1) or sum(int(digit) for digit in bin(i)[2:]) == 2**(n):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    # Initialize count variable\n    count = 0\n\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Initialize two variables to store the sum of first n and last n bits\n        sum_first = 0\n        sum_last = 0\n\n        # Loop through all bits in the current binary sequence\n        for j in range(n):\n            # Check if the jth bit is 1 or 0\n            if i & (1 << j):\n                # If the jth bit is 1, add it to sum_first\n                sum_first += 2**(n-1-j)\n            else:\n                # If the jth bit is 0, add it to sum_last\n                sum_last += 2**(n-1-j)\n\n        # If the sum of first n bits is same as the sum of last n bits, increment the count variable\n        if sum_first == sum_last:\n            count += 1\n\n    # Return the count of all such binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n    for i in range(2**n):\n        x = i\n        y = 0\n        for j in range(n):\n            y = y << 1\n            y = y | x & 1\n            x = x >> 1\n        count += 1\n        if i == y:\n            break\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize the count and sum variables\n    count = 0\n    sum1 = 0\n    sum2 = 0\n\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Extract the first n bits and the last n bits from the binary sequence\n        seq = bin(i)[2:].zfill(n) + bin(i)[-n:]\n        # Calculate the sum of the first n bits and the last n bits\n        sum1 = int(seq[:n])\n        sum2 = int(seq[-n:])\n        # Check if the sum of the first n bits is same as the sum of the last n bits\n        if sum1 == sum2:\n            # Increment the count if the condition is true\n            count += 1\n    \n    # Return the count of all binary sequences with the required property\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    # initialize a dictionary to store the count of binary sequences\n    count = {}\n    # initialize two numbers that sum up to n\n    num1 = 0\n    num2 = n - 1\n\n    # loop until the number of bits becomes equal to n\n    while len(bin(num1 + num2)[2:]) < n:\n        # increment the last bit of num1 and num2\n        num1 = num1 + 1\n        num2 = num2 + 1\n        # if the sum of num1 and num2 is equal to n, increment the count\n        if num1 + num2 == n:\n            count[bin(num1)[2:]] = count.get(bin(num1)[2:], 0) + 1\n\n    # return the count of all binary sequences of length 2n\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize depth to 0\n    depth = 0\n    # Loop through each key in the dictionary\n    for key in d:\n        # Check if the value of the key is a dictionary\n        if isinstance(d[key], dict):\n            # If it is, add 1 to the depth\n            depth += 1\n        # If the value is not a dictionary, decrement the depth\n        else:\n            depth -= 1\n    # Return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a counter variable to keep track of the depth\n    depth = 0\n    \n    # Recursively iterate through the dictionary and update the depth counter\n    for key, value in d.items():\n        if isinstance(value, dict):\n            # If the value is a dictionary, recurse to get its depth\n            depth = max(depth, dict_depth(value))\n        else:\n            # If the value is not a dictionary, simply update the depth counter\n            depth += 1\n    \n    # Return the final depth value\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth variable to 0\n    depth = 0\n    # loop through each key in dictionary\n    for key in d:\n        # if key is a dictionary, recursively call function\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]))\n        # if key is not a dictionary, increment depth by 1\n        else:\n            depth += 1\n    # return depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    current_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n        if isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    current_depth += 1\n        if isinstance(value, (str, int, float, bool)):\n            current_depth -= 1\n        depth = max(depth, current_depth)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            pass\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            count += 1\n    return count + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            pass\n    return depth"
    }
]